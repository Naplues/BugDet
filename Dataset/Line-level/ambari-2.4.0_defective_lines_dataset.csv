File,Line_number,SRC
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,311,statementExecutor = getStatementExecutor();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,364,statementExecutor = getStatementExecutor();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,368,private ActorRef getStatementExecutor() {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,46,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,55,private boolean hasStartedFetching = false;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,56,private boolean shouldFetchMore = true;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,72,try {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,73,getMoreLogs();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,85,hasStartedFetching = false;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,86,shouldFetchMore = true;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,87,if (!(moreLogsScheduler == null || moreLogsScheduler.isCancelled())) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,88,moreLogsScheduler.cancel();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,91,Duration.Zero(), Duration.create(AGGREGATION_INTERVAL, TimeUnit.MILLISECONDS),
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,92,this.getSelf(), new GetMoreLogs(), getContext().dispatcher(), null);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,95,private void getMoreLogs() throws SQLException, HdfsApiException {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,96,List<String> logs = statement.getQueryLog();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,97,if (logs.size() > 0 && shouldFetchMore) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,99,HdfsUtil.putStringToFile(hdfsApi, logFile, allLogs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,100,if(!statement.hasMoreLogs()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,101,shouldFetchMore = false;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,105,if(!shouldFetchMore) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,106,moreLogsScheduler.cancel();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,107,parent.tell(new LogAggregationFinished(), ActorRef.noSender());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,130,private void stopLogAggregation() {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,131,if (logAggregator != null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,132,getContext().stop(logAggregator);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,134,logAggregator = null;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,161,return getArchiveClassLoader(viewConfig, archiveDir);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,205,File   libDir  = archiveUtility.getFile(libPath);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,218,urlList.add(archiveDir.toURI().toURL());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,220,return new ViewClassLoader(viewConfig, urlList.toArray(new URL[urlList.size()]));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1660,ClassLoader cl = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1961,classLoader = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,417,ActionExecutionContext actionContext = new ActionExecutionContext(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,418,cluster.getClusterName(), INSTALL_PACKAGES_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,419,Collections.singletonList(filter),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,421,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,438,Stage stage = stageFactory.createNew(req.getId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,440,cluster.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,441,cluster.getClusterId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,442,caption,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,445,StageUtils.getGson().toJson(hostLevelParams));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,447,long stageId = req.getLastStageId() + 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,448,if (0L == stageId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,449,stageId = 1L;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,451,stage.setStageId(stageId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,452,req.addStages(Collections.singletonList(stage));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,454,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,457,throw new SystemException("Can not modify stage", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,304,final private static String JDK_RESOURCE_LOCATION =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,522,ServletHolder resources = new ServletHolder(ServletContainer.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,523,resources.setInitParameter("com.sun.jersey.config.property.resourceConfigClass",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,525,resources.setInitParameter("com.sun.jersey.config.property.packages",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,201,if (m_grouping.parallelScheduler != null && m_grouping.parallelScheduler.maxDegreeOfParallelism > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,202,hostSets = SetUtils.split(tw.getHosts(), m_grouping.parallelScheduler.maxDegreeOfParallelism);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ParallelScheduler.java,27,public static int DEFAULT_MAX_DEGREE_OF_PARALLELISM = 100;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,20,package org.apache.ambari.logsearch.solr.metrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,22,import org.apache.hadoop.metrics2.sink.timeline.AbstractTimelineMetricsSink;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,23,import org.apache.hadoop.metrics2.sink.timeline.TimelineMetrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,25,public class SolrAmsClient extends AbstractTimelineMetricsSink {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,26,private final String collectorHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,28,public SolrAmsClient(String collectorHost) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,29,this.collectorHost = collectorHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,34,return collectorHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,38,protected int getTimeoutSeconds() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,39,return 10;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,43,protected boolean emitMetrics(TimelineMetrics metrics) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,44,return super.emitMetrics(metrics);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,34,import org.codehaus.jackson.JsonParseException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,35,import org.codehaus.jackson.map.JsonMappingException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,36,import org.codehaus.jackson.map.ObjectMapper;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,37,import org.codehaus.jackson.type.TypeReference;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricReadHelper.java,76,value = rs.getDouble("METRIC_SUM") / rs.getInt("METRIC_COUNT");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/DefaultServiceCalculatedState.java,120,if (isInMaintenance & !componentInfo.isClient()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,795,int retriesRemaining = 100;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,796,do {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,797,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,798,stageContainer = updateHostComponents(stages, requests, request.getRequestInfoProperties(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,799,runSmokeTest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,801,if (--retriesRemaining == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,802,LOG.info("Caught an exception while updating host components, will not try again: {}", e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,804,if (IllegalArgumentException.class.isInstance(e)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,805,throw (IllegalArgumentException) e;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,807,throw new RuntimeException("Update Host request submission failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,810,LOG.info("Caught an exception while updating host components, retrying : " + e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,811,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,812,Thread.sleep(250);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,814,Thread.currentThread().interrupt();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,815,throw new RuntimeException("Update Host request submission failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,26,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,125,protected static final String EXLUSIVE_ID = "exclusive";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,126,private static Set<String> pkPropertyIds =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,127,new HashSet<String>(Arrays.asList(new String[]{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,128,REQUEST_ID_PROPERTY_ID}));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,375,return pkPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,432,if (requestInfoProperties.containsKey(EXLUSIVE_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,433,exclusive = Boolean.valueOf(requestInfoProperties.get(EXLUSIVE_ID).trim());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,702,setResourceProperty(resource, REQUEST_CONTEXT_ID, entity.getRequestContext(), requestedPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,23,import javax.persistence.GeneratedValue;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,24,import javax.persistence.GenerationType;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,30,import javax.persistence.TableGenerator;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,31,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,33,private final List<TopologyTask> tasks;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,74,private List<TopologyTask> topologyTasks = new ArrayList<TopologyTask>();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,293,public List<TopologyTask> getTopologyTasks() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,43,import org.apache.ambari.server.controller.ShortTaskStatus;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,797,LOG.info("TopologyManager.replayRequests: no config with TOPOLOGY_RESOLVED found, adding cluster config request");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,798,addClusterConfigRequest(topology, new ClusterConfigurationRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,799,ambariContext, topology, false, stackAdvisorBlueprintProcessor));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,810,if(logicalRequest != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,811,boolean completed = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,812,for(ShortTaskStatus ts : logicalRequest.getRequestStatus().getTasks()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,813,if(!HostRoleStatus.valueOf(ts.getStatus()).isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,814,completed = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,817,return completed;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,819,return false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,828,if(logicalRequest != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,829,for(ShortTaskStatus ts : logicalRequest.getRequestStatus().getTasks()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,830,if(HostRoleStatus.valueOf(ts.getStatus()) != HostRoleStatus.COMPLETED) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,831,return false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,835,return true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,866,private void addClusterConfigRequest(ClusterTopology topology, ClusterConfigurationRequest configurationRequest) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1095,long clusterId = cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1113,Map<String, Service> clusterServiceMap = cluster.getServices();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1114,Set<String> clusterServiceNames = clusterServiceMap.keySet();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1168,List<AlertDefinition> agentDefinitions = ambariServiceAlertDefinitions.getAgentDefinitions();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1169,for (AlertDefinition agentDefinition : agentDefinitions) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1170,AlertDefinitionEntity entity = mappedEntities.get(agentDefinition.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1173,if (null == entity) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1174,entity = alertDefinitionFactory.coerce(clusterId, agentDefinition);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1175,persist.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1180,List<AlertDefinition> serverDefinitions = ambariServiceAlertDefinitions.getServerDefinitions();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1181,for (AlertDefinition serverDefinition : serverDefinitions) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1182,AlertDefinitionEntity entity = mappedEntities.get(serverDefinition.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1185,if (null == entity) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1186,entity = alertDefinitionFactory.coerce(clusterId, serverDefinition);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1187,persist.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1228,LOG.info(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1230,serviceName, stackId, definition.getDefinitionName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1234,&& !stackComponentMap.containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1235,LOG.info(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1237,serviceName, componentName, stackId,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1238,definition.getDefinitionName());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3310,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3315,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3320,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,94,import org.apache.ambari.server.state.ServiceInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1864,public static ConfigUpgradePack build(UpgradePack upgradePack, StackId sourceStackId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1867,sourceStackId.getStackName(), sourceStackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1877,sourceStackId.getStackName(), intermediateStack.version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,163,private Map<String, VersionDefinitionXml> versionDefinitions = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1399,for (VersionDefinitionXml definition : stack.getVersionDefinitions()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1400,versionDefinitions.put(String.format("%s-%s-%s", stack.getName(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1401,stack.getVersion(), definition.release.version), definition);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,22,import java.text.SimpleDateFormat;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,41,public abstract class Filter extends ConfigBlock {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,178,if (!"{}".equals(jsonStr)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,229,if ("{}".equals(jsonStr)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4153,RepositoryInfo repositoryInfo = ambariMetaInfo.getRepository(request.getStackName(), request.getStackVersion(), request.getOsType(), request.getRepoId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4154,String repoName = repositoryInfo.getRepoName();
ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java,28,public RepositoryRequest(String stackName, String stackVersion, String osType, String repoId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java,93,+ getStackName() + "]";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java,228,(String) properties.get(REPOSITORY_REPO_ID_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,981,private String getHostNameFromProperties(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,129,String hostName = getHostNameFromProperties(properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,228,private String getHostNameFromProperties(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,233,return hostName;
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionHelper.java,65,public static void validateCreateLink(StackInfo stack, ExtensionInfo extension) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionHelper.java,67,validateServiceDuplication(stack, extension);
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionHelper.java,91,private static void validateServiceDuplication(StackInfo stack, ExtensionInfo extension) throws AmbariException {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,43,FSDataOutputStream stream;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,75,import org.apache.ambari.server.orm.entities.OperatingSystemEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,76,import org.apache.ambari.server.orm.entities.RepositoryEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,77,import org.apache.ambari.server.orm.entities.RepositoryVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,90,import org.apache.ambari.server.state.RepositoryInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,108,import com.google.gson.JsonArray;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,109,import com.google.gson.JsonElement;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,110,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,21,import com.google.common.base.Preconditions;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,22,import com.google.common.base.Strings;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,23,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,24,import org.apache.ambari.server.utils.SecretReference;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,47,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,55,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,56,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,57,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,58,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,59,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,60,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,61,import java.util.LinkedHashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,62,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,63,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,64,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,21,import org.apache.ambari.server.controller.internal.Stack;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,22,import org.apache.ambari.server.orm.entities.BlueprintEntity;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,37,public String getName();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,43,public Map<String, HostGroup> getHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,52,public HostGroup getHostGroup(String name);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,62,public Configuration getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,71,public Setting getSetting();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,78,public Collection<String> getServices();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,87,public Collection<String> getComponents(String service);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,97,public String getRecoveryEnabled(String serviceName, String componentName);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,103,public boolean shouldSkipFailure();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,110,public Stack getStack();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,120,public Collection<HostGroup> getHostGroupsForService(String service);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,129,public Collection<HostGroup> getHostGroupsForComponent(String component);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,131,public SecurityConfiguration getSecurity();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,138,public void validateTopology() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,145,public void validateRequiredProperties() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,152,public BlueprintEntity toEntity();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,22,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,38,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,39,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,40,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,41,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,42,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,43,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,304,public void validateRequiredProperties() throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidator.java,32,public void validateTopology() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidator.java,40,public void validateRequiredProperties() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,83,public void validateRequiredProperties() throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,25,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.REPO_INFO;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,28,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.STACK_NAME;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,29,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.STACK_VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,53,import org.apache.ambari.server.orm.entities.RepositoryEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,66,import com.google.gson.JsonArray;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,67,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,403,commandParams.put(SCRIPT, actionName + ".py");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,510,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,513,JsonObject rootJsonObject = new JsonObject();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,514,JsonArray repositories = new JsonArray();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,536,hostLevelParams.put(REPO_INFO, rootJsonObject.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1060,Map<String, List<RepositoryInfo>> repos = ambariMetaInfo.getRepository(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1064,if (null == family) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1076,LOG.warn("Could not retrieve repo information for host"
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,107,updateMaintenanceState(currentAlert, newMaintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,114,updateMaintenanceState(currentAlert, newMaintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,126,updateMaintenanceState(currentAlert, newMaintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,148,private void updateMaintenanceState(AlertCurrentEntity currentAlert,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,149,MaintenanceState maintenanceState) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,156,return;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,161,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,53,response.sendRedirect(this.getLoginFormUrl() + ((request.getQueryString() != null) ? "?" + request.getQueryString() : ""));
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,291,return serviceType;
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,295,this.serviceType = serviceType;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,897,if (pack.getType() == UpgradeType.ROLLING) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,89,import org.apache.commons.lang.math.NumberUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,910,private static int compareVersions(String version1, String version2) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,912,if (StringUtils.equals(version1, version2)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,913,return 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,916,int compare = VersionUtils.compareVersions(version1, version2);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,917,if (0 != compare) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,918,return compare;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,921,int v1 = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,922,int v2 = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,923,if (version1.indexOf('-') > -1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,924,v1 = NumberUtils.toInt(version1.substring(version1.indexOf('-')), 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,927,if (version2.indexOf('-') > -1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,928,v2 = NumberUtils.toInt(version2.substring(version2.indexOf('-')), 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,931,compare = v2 - v1;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,89,List<Integer> stack1Parts = new ArrayList<Integer>();
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,90,List<Integer> stack2Parts = new ArrayList<Integer>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4075,repo.getBaseUrl(), repo.getLatestUri());
ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java,159,return new RepositoryResponse(getBaseUrl(), getOsType(), getRepoId(),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,845,String query = dbmsHelper.getDropTableStatement(tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,846,executeQuery(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,24,import javax.persistence.Basic;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,30,import javax.persistence.FetchType;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,149,return new ArrayList<String>(prerequisiteChecks.checks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,180,prerequisiteChecks.checks = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,195,prerequisiteChecks.configuration.globalProperties = new ArrayList<PrerequisiteProperty>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,198,prerequisiteChecks.configuration.prerequisiteCheckProperties = new ArrayList<PrerequisiteCheckProperties>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,286,List<Grouping> list = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,297,List<Grouping> checked = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,358,List<Grouping> reverse = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,388,List<Grouping> list = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,429,m_process = new LinkedHashMap<String, Map<String, ProcessingComponent>>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,431,if (null == processing || processing.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,440,componentMap = new LinkedHashMap<String, ProcessingComponent>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,528,public List<String> checks = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,561,Map<String, String> result = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,611,Map<String, String> result = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,114,Config createConfig(Cluster cluster, String type, Map<String, String> properties,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,862,Config config = createConfig(cluster, request.getType(), requestProperties,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,909,public Config createConfig(Cluster cluster, String type, Map<String, String> properties,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,868,return controller.createConfig(cluster, type, properties, tag, propertyAttributes);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,91,stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,578,controller.createConfig(cluster, configType, mergedProperties, newTag, propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,482,for (ServiceComponentHost serviceComponentHost : serviceComponent.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,483,ComponentInfo componentInfo = ambariMetaInfo.getComponent(targetStackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,484,targetStackId.getStackVersion(), service.getName(), serviceComponent.getName());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,486,if (!componentInfo.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,621,hostResource.setProperty(HostResourceProvider.HOST_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1298,hostname.equals(ambariServerHostname) ? null : hostname,
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,43,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,44,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,54,private static final Logger LOG = LoggerFactory.getLogger(AbstractCheckDescriptor.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1244,private static class SingleHostTopologyUpdater implements PropertyUpdater {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1276,Matcher m = HOSTGROUP_REGEX.matcher(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1277,if (m.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1278,String hostGroupName = m.group(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1280,HostGroupInfo groupInfo = topology.getHostGroupInfo().get(hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1281,if (groupInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1283,throw new RuntimeException(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1285,+ hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1289,return origValue.replace(m.group(0), groupInfo.getHostNames().iterator().next());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1399,Matcher m = HOSTGROUP_REGEX.matcher(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1400,if (m.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1401,String hostGroupName = m.group(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1402,return Collections.singleton(hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,188,private static final String REQUEST_PROGRESS_PERCENT_ID = "Upgrade/progress_percent";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,435,setResourceProperty(r, REQUEST_PROGRESS_PERCENT_ID, calc.getPercent(), requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,81,private static final Set<String> PK_PROPERTY_IDS = new HashSet<String>(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,87,private static final Set<String> PROPERTY_IDS = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,92,private static final Map<Resource.Type, String> KEY_PROPERTY_IDS = new HashMap<Resource.Type, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,162,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,224,Set<Long> targetIds = new HashSet<Long>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,321,alertStateSet = new HashSet<AlertState>(alertStates.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,343,Set<AlertGroupEntity> groups = new HashSet<AlertGroupEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,344,List<Long> ids = new ArrayList<Long>(groupIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,429,alertStateSet = new HashSet<AlertState>(alertStates.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,440,Set<AlertGroupEntity> groups = new HashSet<AlertGroupEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,441,List<Long> ids = new ArrayList<Long>(groupIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,449,Set<AlertGroupEntity> groups = new HashSet<AlertGroupEntity>(s_dao.findAllGroups());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,499,List<AlertGroup> groups = new ArrayList<AlertGroup>(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,528,Map<String, Object> normalizedMap = new HashMap<String, Object>(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,94,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,114,new HashSet<String>(Arrays.asList(new String[]{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,156,Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,158,final Set<ServiceComponentHostRequest> requests = new HashSet<ServiceComponentHostRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,583,List<ServiceOsSpecific> foundedOSSpecifics = new ArrayList<ServiceOsSpecific>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,69,case ViewInstance:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,70,return new ViewInstanceResourceProvider();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,97,case AlertTarget:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,98,return new AlertTargetResourceProvider();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,21,import com.google.common.base.Strings;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,22,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,47,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,48,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,49,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,50,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,51,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,52,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,53,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,93,private static Map<Resource.Type, String> keyPropertyIds = new HashMap<Resource.Type, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,103,private static Set<String> propertyIds = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,158,Set<Resource> resources    = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,228,return new HashSet<String>(keyPropertyIds.values());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,264,Map<String, String> applicationData = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,368,Map<String, String> instanceProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,403,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,404,ViewRegistry       viewRegistry   = ViewRegistry.getInstance();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,405,ViewInstanceEntity instanceEntity = toEntity(properties, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,407,ViewEntity viewEntity = instanceEntity.getViewEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,408,String     viewName   = viewEntity.getCommonName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,409,String     version    = viewEntity.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,410,ViewEntity view       = viewRegistry.getDefinition(viewName, version);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,412,if ( view == null ) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,413,throw new IllegalStateException("The view " + viewName + " is not registered.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,417,if (!view.isDeployed()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,418,throw new IllegalStateException("The view " + viewName + " is not loaded.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,421,if (viewRegistry.instanceExists(instanceEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,422,throw new DuplicateResourceException("The instance " + instanceEntity.getName() + " already exists.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,424,viewRegistry.installViewInstance(instanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,426,throw new AmbariException("Caught exception trying to create view instance.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,429,throw new IllegalArgumentException(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,442,ViewInstanceEntity instance = toEntity(properties, true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,443,ViewEntity         view     = instance.getViewEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,445,if (includeInstance(view.getCommonName(), view.getVersion(), instance.getInstanceName(), false)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,446,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,447,ViewRegistry.getInstance().updateViewInstance(instance);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,448,ViewRegistry.getInstance().updateView(instance);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,450,throw new AmbariException("Caught exception trying to update view instance.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,453,throw new IllegalArgumentException(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,466,Set<String>  requestedIds = getRequestPropertyIds(PropertyHelper.getReadRequest(), predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,467,ViewRegistry viewRegistry = ViewRegistry.getInstance();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,469,Set<ViewInstanceEntity> viewInstanceEntities = new HashSet<ViewInstanceEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,471,for (ViewEntity viewEntity : viewRegistry.getDefinitions()){
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,473,if (viewEntity.isDeployed()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,474,for (ViewInstanceEntity viewInstanceEntity : viewRegistry.getInstanceDefinitions(viewEntity)){
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,475,Resource resource = toResource(viewInstanceEntity, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,476,if (predicate == null || predicate.evaluate(resource)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,477,if (includeInstance(viewInstanceEntity, false)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,478,viewInstanceEntities.add(viewInstanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,484,for (ViewInstanceEntity viewInstanceEntity : viewInstanceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,485,viewRegistry.uninstallViewInstance(viewInstanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,487,return null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,295,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,296,if (this == o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,297,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,299,if (o == null || getClass() != o.getClass()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,300,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,303,RepositoryVersionEntity that = (RepositoryVersionEntity) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,305,if (id != null ? !id.equals(that.id) : that.id != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,306,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,308,if (stack != null ? !stack.equals(that.stack) : that.stack != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,309,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,311,if (version != null ? !version.equals(that.version) : that.version != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,312,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,314,if (displayName != null ? !displayName.equals(that.displayName) : that.displayName != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,315,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,318,if (operatingSystems != null ? !operatingSystems.equals(that.operatingSystems) : that.operatingSystems != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,319,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,322,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,387,int result = id != null ? id.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,388,result = 31 * result + (stack != null ? stack.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,389,result = 31 * result + (version != null ? version.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,390,result = 31 * result + (displayName != null ? displayName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,391,result = 31 * result + (operatingSystems != null ? operatingSystems.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,392,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,19,package org.apache.ambari.server.state.svccomphost;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,22,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,23,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,24,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,25,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,27,import org.apache.ambari.server.state.ComponentInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,29,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,30,import org.apache.ambari.server.state.UpgradeState;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,40,public class ServiceComponentHostSummary {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,42,private Collection<HostComponentStateEntity> allHostComponents;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,43,private Collection<HostComponentStateEntity> haveAdvertisedVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,44,private Collection<HostComponentStateEntity> waitingToAdvertiseVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,45,private Collection<HostComponentStateEntity> noVersionToAdvertise;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,49,allHostComponents = host.getHostComponentStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,50,haveAdvertisedVersion = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,51,waitingToAdvertiseVersion = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,52,noVersionToAdvertise = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,55,for (HostComponentStateEntity hostComponentStateEntity : allHostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,56,ComponentInfo compInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,57,stackName, stackVersion, hostComponentStateEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,58,hostComponentStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,60,if (!compInfo.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,62,noVersionToAdvertise.add(hostComponentStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,121,return true;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,24,import java.util.Calendar;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,52,private final long delay;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,57,public AsyncCallableService(Callable<T> task, long timeout, long delay,
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,58,ScheduledExecutorService executorService) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,62,this.delay = delay;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,68,long startTimeInMillis = Calendar.getInstance().getTimeInMillis();
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,69,LOG.info("Task execution started at: {}", startTimeInMillis);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,72,Future future = executorService.submit(task);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,74,while (!taskCompleted(future)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,75,if (!timeoutExceeded(startTimeInMillis)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,76,LOG.debug("Retrying task execution in [ {} ] milliseconds.", delay);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,77,future = executorService.schedule(task, delay, TimeUnit.MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,79,LOG.debug("Timout exceeded, cancelling task ... ");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,81,if (!future.isDone()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,82,boolean cancelled = future.cancel(true);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,83,LOG.debug("Task cancelled: {}", cancelled);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,85,LOG.debug("Task already done.");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,87,LOG.info("Timeout exceeded, task execution won't be retried!");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,89,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,93,LOG.info("Exiting Async task execution with the result: [ {} ]", serviceResult);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,94,return serviceResult;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,97,private boolean taskCompleted(Future<T> future) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,98,boolean completed = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,99,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,100,LOG.debug("Retrieving task execution result ...");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,103,T taskResult = future.get(timeout, TimeUnit.MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,106,LOG.debug("Task successfully executed: {}", taskResult);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,108,completed = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,111,LOG.info("Exception during task execution: ", e);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,113,return completed;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,116,private boolean timeoutExceeded(long startTimeInMillis) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,117,return timeout < Calendar.getInstance().getTimeInMillis() - startTimeInMillis;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,121,this.serviceResult = serviceResult;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,85,private static final String CLUSTER_ENV_CONFIG_TYPE_NAME = "cluster-env";
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,86,private static final String CLUSTER_CONFIG_TASK_MAX_TIME_IN_MILLIS_PROPERTY_NAME = "cluster_configure_task_timeout";
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,868,String timeoutStr = topology.getConfiguration().getPropertyValue(CLUSTER_ENV_CONFIG_TYPE_NAME,
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,869,CLUSTER_CONFIG_TASK_MAX_TIME_IN_MILLIS_PROPERTY_NAME);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,871,long timeout = 1000 * 60 * 30; // 30 minutes
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,872,long delay = 1000; //ms
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,874,if (timeoutStr != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,875,timeout = Long.parseLong(timeoutStr);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,876,LOG.debug("ConfigureClusterTask timeout set to: {}", timeout);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,878,LOG.debug("No timeout constraints found in configuration. Wired defaults will be applied.");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,883,Executors.newScheduledThreadPool(1));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,885,executor.submit(asyncCallableService);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,212,List<StatusCommand> cmds = new ArrayList<StatusCommand>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,251,Map<String, Map<String, String>> configurations = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,252,Map<String, Map<String,  Map<String, String>>> configurationAttributes = new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,20,import com.google.gson.annotations.SerializedName;
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,21,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,51,private Map<String, String> commandParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,54,private Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1391,private void ensureVersionDefinitions() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java,163,return new ClusterStackVersionResourceProvider(managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,573,private ActionExecutionContext getHostVersionInstallCommand(RepositoryVersionEntity repoVersion,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,109,case ClusterStackVersion:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,110,return new ClusterStackVersionResourceProvider(managementController);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,187,cnfe.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,189,return executionCommand;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,194,return executionCommand;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2121,ExecutionCommand execCmd = stage.getExecutionCommandWrapper(scHost.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2122,scHost.getServiceComponentName()).getExecutionCommand();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2328,if ((execCmd != null) && (execCmd.getConfigurationTags().containsKey("cluster-env"))) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,774,if (identity.getReference() != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,775,referencedIdentity = getReferencedIdentityDescriptor(identity.getReference());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,778,referencedIdentity = getReferencedIdentityDescriptor(identity.getName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,229,String hostName = (String) properties.get(HostResourceProvider.HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java,126,REPOSITORY_VERSION_STACK_SERVICES);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackServiceDirectory.java,65,return stackName + versionString + serviceName + "ServiceAdvisor";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4048,final RepositoryResponse response = new RepositoryResponse(repository.getBaseUrl(), osType, repository.getRepositoryId(), repository.getName(), "", "", "");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4074,repo.getRepoId(), repo.getRepoName(), repo.getMirrorsList(),
ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryResponse.java,37,String repoName, String mirrorsList, String defaultBaseUrl, String latestBaseUrl) {
ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java,160,getRepoName(), getMirrorsList(), getDefaultBaseUrl(), getLatestBaseUrl());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,29,import org.apache.ambari.server.Role;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,30,import org.apache.ambari.server.RoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,32,import org.apache.ambari.server.controller.internal.PageRequestImpl;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,33,import org.apache.ambari.server.controller.internal.RequestImpl;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,34,import org.apache.ambari.server.controller.internal.TaskResourceProvider;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,35,import org.apache.ambari.server.controller.spi.PageRequest;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,36,import org.apache.ambari.server.controller.spi.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,37,import org.apache.ambari.server.controller.utilities.PredicateBuilder;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,40,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,68,private static final PageRequestImpl PAGE_REQUEST = new PageRequestImpl(PageRequest.StartingPoint.End, 1000, 0, null, null);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,113,List<HostRoleCommandEntity> commands = hostRoleCommandDAO.findAll(REQUEST, PREDICATE);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,116,Map<Role, HostRoleCommandEntity> latestTimestamps = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,117,for (HostRoleCommandEntity command : commands) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,118,Role role = command.getRole();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,120,if (!latestTimestamps.containsKey(role)) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,121,latestTimestamps.put(role, command);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,132,for (Map.Entry<String, Long> serviceEntry : lastServiceConfigUpdates.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,133,String serviceName = serviceEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,134,Long configTimestamp = serviceEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,136,boolean serviceCheckWasExecuted = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,137,for (HostRoleCommandEntity command : latestTimestamps.values()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,139,serviceCheckWasExecuted = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,140,Long serviceCheckTimestamp = command.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,142,if (serviceCheckTimestamp < configTimestamp) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,143,failedServiceNames.add(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,144,LOG.info("Service {} latest config change is {}, latest service check executed at {}",
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,145,serviceName,
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,146,DATE_FORMAT.format(new Date(configTimestamp)),
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,147,DATE_FORMAT.format(new Date(serviceCheckTimestamp)));
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,152,if (!serviceCheckWasExecuted) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,154,LOG.info("Service {} service check has never been executed", serviceName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,225,Map<Long, HostRoleCommandStatusSummaryDTO> map = new HashMap<Long, HostRoleCommandStatusSummaryDTO>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,283,List<HostRoleCommandEntity> result = new ArrayList<HostRoleCommandEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,285,List<List<Long>> lists = Lists.partition(new ArrayList<Long>(taskIds), configuration.getTaskIdListLimit());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,353,List<Long> result = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,355,List<List<Long>> lists = Lists.partition(new ArrayList<Long>(taskIds), configuration.getTaskIdListLimit());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,413,Map<String, List<HostRoleCommandEntity>> hostCommands = new HashMap<String, List<HostRoleCommandEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,632,List<HostRoleCommandEntity> managedList = new ArrayList<HostRoleCommandEntity>(entities.size());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,818,JpaSortBuilder<HostRoleCommandEntity> sortBuilder = new JpaSortBuilder<HostRoleCommandEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,90,private Collection<String> hostsToIgnore = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,91,private final List<HostImpl> availableHosts = new LinkedList<HostImpl>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,92,private final Map<String, LogicalRequest> reservedHosts = new HashMap<String, LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,93,private final Map<Long, LogicalRequest> allRequests = new HashMap<Long, LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,95,private final Collection<LogicalRequest> outstandingRequests = new ArrayList<LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,97,private Map<Long, ClusterTopology> clusterTopologyMap = new HashMap<Long, ClusterTopology>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,502,Collection<LogicalRequest> matchingRequests = new ArrayList<LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,519,Collection<StageEntity> stages = new ArrayList<StageEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,534,Collection<HostRoleCommand> tasks = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,557,List<RequestStatusResponse> requestStatusResponses = new ArrayList<RequestStatusResponse>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,575,Map<String, Collection<String>> hostComponentMap = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,586,hostComponents = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,605,throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,608,String statement = dbmsHelper.getAlterColumnStatement(tableName,
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,609,columnInfo);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,21,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,22,import org.apache.ambari.server.metadata.ActionMetadata;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,23,import org.apache.ambari.server.orm.dao.MetainfoDAO;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,24,import org.apache.ambari.server.orm.entities.MetainfoEntity;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,25,import org.apache.ambari.server.state.stack.LatestRepoCallable;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,26,import org.apache.ambari.server.state.stack.OsFamily;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,28,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,53,private OsFamily osFamily;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,58,private LatestRepoQueryExecutor repoUpdateExecutor = new LatestRepoQueryExecutor();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,76,this.osFamily = osFamily;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,112,public void registerRepoUpdateTask(String url, StackModule stack) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,113,repoUpdateExecutor.addTask(new LatestRepoCallable(url,
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,114,new File(stack.getStackDirectory().getRepoDir()), stack.getModuleInfo(), osFamily));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,142,private Collection<LatestRepoCallable> tasks = new ArrayList<LatestRepoCallable>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,147,Collection<Future<Void>> futures = new ArrayList<Future<Void>>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,151,private ExecutorService executor = Executors.newSingleThreadExecutor(new ThreadFactory() {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,164,public void addTask(LatestRepoCallable task) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,165,tasks.add(task);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,172,for (LatestRepoCallable task : tasks) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,173,futures.add(executor.submit(task));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,184,for (Future<Void> f : futures) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,103,private Map<String, ConfigurationModule> configurationModules = new HashMap<String, ConfigurationModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,108,private Map<String, ServiceModule> serviceModules = new HashMap<String, ServiceModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,113,private Map<String, ExtensionModule> extensionModules = new HashMap<String, ExtensionModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,606,Collection<ServiceModule> serviceModules = new ArrayList<ServiceModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,756,new HashMap<PropertyDependencyInfo, Set<PropertyDependencyInfo>>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,772,new HashSet<PropertyDependencyInfo>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,949,tmp = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1046,stackContext.registerRepoUpdateTask(rxml.getLatestURI(), this);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1113,private Set<String> errorSet = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,18,package org.apache.ambari.server.state.stack;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,20,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,21,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,22,import java.io.InputStreamReader;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,23,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,24,import java.net.URI;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,25,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,27,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,28,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,29,import java.util.concurrent.Callable;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,31,import org.apache.ambari.server.controller.internal.URLStreamProvider;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,32,import org.apache.ambari.server.state.RepositoryInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,33,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,34,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,35,import org.apache.ambari.server.state.repository.VersionDefinitionXml;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,36,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,37,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,38,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,40,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,41,import com.google.gson.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,47,public class LatestRepoCallable implements Callable<Void> {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,48,private static final int LOOKUP_CONNECTION_TIMEOUT = 2000;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,51,private final static Logger LOG = LoggerFactory.getLogger(LatestRepoCallable.class);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,53,private String sourceUri = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,54,private File stackRepoFolder = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,55,private StackInfo stack = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,56,private OsFamily os_family;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,58,public LatestRepoCallable(String latestSourceUri, File stackRepoFolder, StackInfo stack, OsFamily os_family) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,59,this.sourceUri = latestSourceUri;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,60,this.stackRepoFolder = stackRepoFolder;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,61,this.stack = stack;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,62,this.os_family = os_family;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,66,public Void call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,68,Type type = new TypeToken<Map<String, Map<String, Object>>>(){}.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,69,Gson gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,71,Map<String, Map<String, Object>> latestUrlMap = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,73,try {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,74,if (sourceUri.startsWith("http")) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,76,URLStreamProvider streamProvider = new URLStreamProvider(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,77,LOOKUP_CONNECTION_TIMEOUT, LOOKUP_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,78,null, null, null);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,80,LOG.info("Loading latest URL info for stack {}-{} from {}", stack.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,81,stack.getVersion(), sourceUri);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,82,latestUrlMap = gson.fromJson(new InputStreamReader(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,83,streamProvider.readFrom(sourceUri)), type);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,85,File jsonFile = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,86,if (sourceUri.charAt(0) == '.') {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,87,jsonFile = new File(stackRepoFolder, sourceUri);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,89,jsonFile = new File(sourceUri);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,92,if (jsonFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,94,stack.getVersion(), jsonFile);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,95,latestUrlMap = gson.fromJson(new FileReader(jsonFile), type);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,99,LOG.info("Could not load the URI for stack {}-{} from {}, ({}).  Using default repository values",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,100,stack.getName(), stack.getVersion(), sourceUri, e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,101,throw e;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,105,if (null != latestUrlMap) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,106,for (RepositoryInfo ri : stack.getRepositories()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,107,if (latestUrlMap.containsKey(ri.getRepoId())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,109,Map<String, Object> valueMap = latestUrlMap.get(ri.getRepoId());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,111,if (valueMap.containsKey("latest")) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,114,Map<String, String> osMap = (Map<String, String>) valueMap.get("latest");
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,116,String baseUrl = resolveOsUrl(ri.getOsType(), osMap);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,117,if (null != baseUrl) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,121,String repo_file_format;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,123,if(os_family.isUbuntuFamily(ri.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,124,repo_file_format = "list";
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,126,repo_file_format = "repo";
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,129,String repoFileName = stack.getName().toLowerCase() + "." + repo_file_format;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,130,int idx = baseUrl.toLowerCase().indexOf(repoFileName);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,132,if (-1 != idx && baseUrl.toLowerCase().endsWith(repoFileName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,133,baseUrl = baseUrl.substring(0, idx);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,136,if ('/' == baseUrl.charAt(baseUrl.length()-1)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,137,baseUrl = baseUrl.substring(0, baseUrl.length()-1);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,140,ri.setLatestBaseUrl(baseUrl);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,141,if (ri.getBaseUrl() != null && !ri.isBaseUrlFromSaved()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,143,ri.setBaseUrl(baseUrl);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,151,StackId stackId = new StackId(stack);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,152,if (!latestUrlMap.containsKey(stackId.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,153,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,156,Map<String, Object> map = latestUrlMap.get(stackId.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,158,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,183,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,196,Set<String> oses = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,197,for (RepositoryInfo ri : stack.getRepositories()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,198,if (null != os_family.find(ri.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,199,oses.add(os_family.find(ri.getOsType()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,203,VersionDefinitionXml.Merger merger = new VersionDefinitionXml.Merger();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,205,for (Entry<String, String> versionEntry : osMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,207,String osFamily = os_family.find(versionEntry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,210,if (null == osFamily) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,211,String alias = os_family.getAliases().get(versionEntry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,212,if (null != alias) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,213,osFamily = os_family.find(alias);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,218,if (null == osFamily || !oses.contains(osFamily)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,219,LOG.info("Stack {} cannot resolve OS {} to the supported ones: {}. Family: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,220,stackId, versionEntry.getKey(), StringUtils.join(oses, ','), osFamily);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,221,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,224,String uriString = versionEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,226,if ('.' == uriString.charAt(0)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,227,uriString = new File(stackRepoFolder, uriString).toURI().toString();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,230,try {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,231,URI uri = new URI(uriString);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,235,merger.add(version, xml);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,237,LOG.warn("Could not load version definition for {} identified by {}. {}",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,238,stackId, uriString, e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,242,return merger.merge();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,253,private String resolveOsUrl(String os, Map<String, String> osMap) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,257,return osMap.get(os);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,260,Set<String> possibleTypes = os_family.findTypes(os);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,262,for (String type : possibleTypes) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,264,return osMap.get(type);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,267,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2633,atlasPropsMap.put("atlas.graph.storage.hostname", new MultipleHostTopologyUpdater("HBASE_MASTER"));
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,123,List<AlertDefinitionEntity> entities = m_dao.findByServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,124,cluster.getClusterId(), Services.AMBARI.name(),
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,125,Components.AMBARI_SERVER.name());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,127,for (AlertDefinitionEntity entity : entities) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,133,SourceType sourceType = entity.getSourceType();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,134,if (sourceType != SourceType.SERVER) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,135,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,156,List<AlertDefinitionEntity> entities = m_dao.findByServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,157,cluster.getClusterId(), Services.AMBARI.name(),
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,158,Components.AMBARI_SERVER.name());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2771,for (ClusterConfigEntity configEntity : serviceConfigEntity.getClusterConfigEntities()) {
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,60,public Response listdir(@QueryParam("path") String path) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,51,private final Map<String, String> authParams;
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigGroupRequest.java,37,String tag, String description, Set<String> hosts,
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigGroupRequest.java,38,Map<String, Config> configs) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,493,private synchronized Set<ConfigGroupResponse> createConfigGroups
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,494,(Set<ConfigGroupRequest> requests) throws AmbariException, AuthorizationException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,501,Set<ConfigGroupResponse> configGroupResponses = new
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,502,HashSet<ConfigGroupResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,506,.getConfigGroupFactory();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,549,String serviceName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,550,if (request.getConfigs() != null && !request.getConfigs().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,652,ConfigGroupRequest request = new ConfigGroupRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,653,null, clusterName, absoluteGroupName, service, "Host Group Configuration",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,59,import org.apache.ambari.server.controller.spi.Request;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,93,private static final String CLUSTER_NAME_PROPERTY_ID                  = PropertyHelper.getPropertyId("Clusters", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,94,private static final String HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID   = PropertyHelper.getPropertyId("HostRoles", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,95,private static final String HOST_COMPONENT_HOST_NAME_PROPERTY_ID      = PropertyHelper.getPropertyId("HostRoles", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,96,private static final String HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("HostRoles", "component_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,259,private final Map<String, ConcurrentMap<String, ConcurrentMap<String, String>> >jmxPortMap =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,260,Collections.synchronizedMap(new HashMap<String, ConcurrentMap<String, ConcurrentMap<String, String>>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,565,ConcurrentMap<String, ConcurrentMap<String, String>> clusterJmxPorts = jmxPortMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,566,if (clusterJmxPorts == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,568,clusterJmxPorts = jmxPortMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,569,if (clusterJmxPorts == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,570,clusterJmxPorts = new ConcurrentHashMap<String, ConcurrentMap<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,899,ResourceProvider provider = getResourceProvider(Resource.Type.Cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,901,Set<String> propertyIds = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,902,propertyIds.add(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,904,Map<String, String> requestInfoProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,905,requestInfoProperties.put(ClusterResourceProvider.GET_IGNORE_PERMISSIONS_PROPERTY_ID, "true");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,907,Request request = PropertyHelper.getReadRequest(propertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,908,requestInfoProperties, null, null, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,910,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,911,jmxPortMap.clear();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,912,Set<Resource> clusters = provider.getResources(request, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,914,clusterHostComponentMap = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,915,clusterGangliaCollectorMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,918,for (Resource cluster : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,920,String clusterName = (String) cluster.getPropertyValue(CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,923,provider = getResourceProvider(Resource.Type.HostComponent);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,925,request = PropertyHelper.getReadRequest(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,926,HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,928,Predicate predicate = new PredicateBuilder().property(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,929,equals(clusterName).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,931,Set<Resource> hostComponents = provider.getResources(request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,932,Map<String, String> hostComponentMap = clusterHostComponentMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,934,if (hostComponentMap == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,935,hostComponentMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,936,clusterHostComponentMap.put(clusterName, hostComponentMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,939,for (Resource hostComponent : hostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,940,String componentName = (String) hostComponent.getPropertyValue(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,941,String hostName = (String) hostComponent.getPropertyValue(HOST_COMPONENT_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,966,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,967,LOG.error("Caught UnsupportedPropertyException while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,969,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,971,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,972,LOG.error("Caught NoSuchResourceException exception while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,974,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,976,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,977,LOG.error("Caught NoSuchParentResourceException exception while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,979,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,509,cluster, managementController, ami, stackId, serviceNames, perOsRepos, stage, host);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,579,final List<RepositoryEntity> repoInfo = perOsRepos.get(osFamily);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,580,if (repoInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,581,throw new SystemException(String.format("Repositories for os type %s are " +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,583,osFamily, repoVersion.getVersion(), stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,58,import org.apache.ambari.server.orm.entities.RepositoryEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,343,List<OperatingSystemEntity> operatingSystems = repoVersionEnt.getOperatingSystems();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,344,Map<String, List<RepositoryEntity>> perOsRepos = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,345,for (OperatingSystemEntity operatingSystem : operatingSystems) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,346,perOsRepos.put(operatingSystem.getOsType(), operatingSystem.getRepositories());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,351,final List<RepositoryEntity> repoInfo = perOsRepos.get(osFamily);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,352,if (repoInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,148,LOG.info("Checking for configs not mapped to any cluster");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,150,String GET_NOT_MAPPED_CONFIGS_QUERY = "select type_name from clusterconfig where type_name not in (select type_name from clusterconfigmapping)";
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,151,Set<String> nonSelectedConfigs = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,152,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,153,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,162,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,163,statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,164,rs = statement.executeQuery(GET_NOT_MAPPED_CONFIGS_QUERY);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,165,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,166,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,167,nonSelectedConfigs.add(rs.getString("type_name"));
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,170,if (!nonSelectedConfigs.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,175,LOG.error("Exception occurred during check for not mapped configs to cluster procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,177,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,178,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,179,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,181,LOG.error("Exception occurred during result set closing procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,185,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,186,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,187,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,189,LOG.error("Exception occurred during statement closing procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,204,String GET_CONFIGS_SELECTED_MORE_THAN_ONCE_QUERY = "select c.cluster_name, ccm.type_name from clusterconfigmapping ccm " +
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,235,LOG.error("Exception occurred during check for config selected more than ones procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,290,LOG.error("Exception occurred during check for host without state procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,366,LOG.error("Exception occurred during check for same count of host component states and host component desired states: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,604,LOG.error("Exception occurred during complex service check procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,606,LOG.error("Exception occurred during complex service check procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,258,null, null, null, null, requestStageContainer, handler);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,573,request.getTag(), request.getDescription(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,577,configGroup.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2250,private void deleteService(Service service) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1373,if(conf == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1374,LOG.error("Config inconsistency exists:"+
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,400,if (!ex.getMessage().contains("Cannot obtain block length for")) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,42,public static void putStringToFile(HdfsApi hdfs, String filePath, String content) throws HdfsApiException {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,44,try {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,46,stream = hdfs.create(filePath, true);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,47,stream.write(content.getBytes());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,48,stream.close();
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,195,StackId stackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,221,public void resubmitTasks(List<Long> taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,790,public void resubmitTasks(List<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,145,List<CommandReport> reportsToProcess = new ArrayList<CommandReport>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,257,public void resubmitTasks(List<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,258,db.resubmitTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1817,actionManager.resubmitTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,428,List<RepositoryVersionEntity> entities = s_repoVersionDAO.findByStack(entity.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DeconstructedPrincipal.java,38,class DeconstructedPrincipal {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,41,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,408,throw new IllegalArgumentException("Cluster name should be provided" +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,413,LOG.debug("Received a createCluster request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,415,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,420,throw new IllegalArgumentException("Stack information should be"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,421,+ " provided when creating a cluster");
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,58,private String repositoryVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/api/predicate/QueryParser.java,110,expression.setRightOperand(expression.getRightOperand().toString().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/api/predicate/operators/InOperator.java,50,throw new InvalidQueryException("IN operator is missing a required right operand.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,105,List<String> hosts = (List<String>) getRequestProperty(request, HOST_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,106,List<String> services = (List<String>) getRequestProperty(request, SERVICES_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,21,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,63,private Set<Rule> setRules = new TreeSet<Rule>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,108,: Collections.unmodifiableSet(new HashSet<String>(additionalRealms));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,118,copy.setRules = new TreeSet<Rule>(setRules);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,129,public void addRules(String authToLocalRules) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,136,setRules.add(rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,160,public void addRule(String principal, String localUsername) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,265,return new Rule(principal, componentCount, 1, String.format(
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,267,principal.getComponent(1), principal.getRealm(), localUser));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,278,String caseSensitivityRule = caseInsensitive ? "/L" : "";
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,280,return new Rule(new Principal(String.format(".*@%s", realm)),
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,281,1, 1, String.format("RULE:[1:$1@$0](.*@%s)s/@.*//" + caseSensitivityRule, realm));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,291,return new Rule(rule.startsWith("RULE:") ? rule : String.format("RULE:%s", rule));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,304,collection = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,326,Pattern.compile("RULE:\\s*\\[\\s*(\\d)\\s*:\\s*(.+?)(?:@(.+?))??\\s*\\]\\s*\\((.+?)\\)\\s*s/(.*?)/(.*?)/([a-zA-Z]*)(?:.|\n)*");
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,331,private Principal principal;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,336,private String rule;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,341,private int expectedComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,346,private int matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,356,public Rule(Principal principal, int expectedComponentCount, int matchComponentCount, String rule) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,357,this.principal = principal;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,358,this.expectedComponentCount = expectedComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,359,this.matchComponentCount = matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,360,this.rule = rule;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,368,public Rule(String rule) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,374,expectedComponentCount = Integer.valueOf(m.group(1));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,377,matchComponentCount = (matchPattern.startsWith("$") ?
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,378,matchPattern.substring(1) :
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,379,matchPattern).
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,380,split("\\$").length;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,381,String patternRealm = m.group(3);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,382,principal = new Principal(m.group(4));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,386,if (patternRealm != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,387,this.rule = String.format("RULE:[%d:%s@%s](%s)s/%s/%s/%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,388,expectedComponentCount, matchPattern, patternRealm,
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,389,principal.toString(), replacementPattern, replacementReplacement, replacementModifier);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,391,this.rule = String.format("RULE:[%d:%s](%s)s/%s/%s/%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,392,expectedComponentCount, matchPattern,
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,393,principal.toString(), replacementPattern, replacementReplacement, replacementModifier);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,402,public Principal getPrincipal() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,403,return principal;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,412,public int getExpectedComponentCount() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,413,return expectedComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,422,public int getMatchComponentCount() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,423,return matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,433,public String toString() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,434,return rule;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,453,int retVal = expectedComponentCount - other.getExpectedComponentCount();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,456,retVal = other.getMatchComponentCount() - matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,459,Principal otherPrincipal = other.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,460,if (principal.equals(otherPrincipal)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,461,retVal = rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,464,String realm = principal.getRealm();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,465,String otherRealm = otherPrincipal.getRealm();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,469,for (int i = 1; i <= matchComponentCount; i++) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,471,String component1 = principal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,472,String otherComponent1 = otherPrincipal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,488,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,489,return this == o || o instanceof Rule && rule.equals(((Rule) o).rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,493,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,494,return rule.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,806,final String rmHostPropertyName = "yarn.resourcemanager.hostname." + resourceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,807,yarnSiteUpdatersForAvailability.put(rmHostPropertyName, new SingleHostTopologyUpdater("RESOURCEMANAGER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,809,final String rmHTTPAddress = "yarn.resourcemanager.webapp.address." + resourceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,810,yarnSiteUpdatersForAvailability.put(rmHTTPAddress, new SingleHostTopologyUpdater("RESOURCEMANAGER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,812,final String rmHTTPSAddress = "yarn.resourcemanager.webapp.https.address." + resourceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,813,yarnSiteUpdatersForAvailability.put(rmHTTPSAddress, new SingleHostTopologyUpdater("RESOURCEMANAGER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1248,private String component;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,438,for (RepositoryVersionEntity candidate : entities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,439,String baseVersion = candidate.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,446,matching.add(candidate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,450,matching.add(candidate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,461,Set<String> versions= new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,462,for (RepositoryVersionEntity match : matching) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,463,versions.add(match.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,466,throw new IllegalArgumentException(String.format("More than one repository matches patch %s: %s",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,470,RepositoryVersionEntity parent = matching.get(0);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,463,groups.add(groupHolder);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,61,private Set<String> priorityServices = new LinkedHashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,68,private Set<String> excludeServices = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,128,List<StageWrapper> result = new ArrayList<StageWrapper>(stageWrappers);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,135,Set<String> clusterServices = new LinkedHashSet<String>(serviceMap.keySet());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,140,StageWrapper wrapper = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,141,StageWrapper.Type.SERVICE_CHECK,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,143,new TaskWrapper(service, "", Collections.<String>emptySet(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,144,new ServiceCheckTask()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,159,StageWrapper wrapper = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,160,StageWrapper.Type.SERVICE_CHECK,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,162,new TaskWrapper(service, "", Collections.<String>emptySet(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,163,new ServiceCheckTask()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,347,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,424,if (entity.getType() != RepositoryType.PATCH) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,19,package org.apache.ambari.server.controller.utilities;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,21,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,23,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,27,import java.util.Scanner;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,29,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,30,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,31,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,32,import org.apache.ambari.server.orm.dao.ClusterDAO;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,33,import org.apache.ambari.server.orm.dao.MetainfoDAO;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,34,import org.apache.ambari.server.orm.entities.ClusterConfigEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,35,import org.apache.ambari.server.orm.entities.ClusterConfigMappingEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,36,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,37,import org.apache.ambari.server.orm.entities.ClusterServiceEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,38,import org.apache.ambari.server.orm.entities.ClusterStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,39,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,40,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,41,import org.apache.ambari.server.orm.entities.MetainfoEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,42,import org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,43,import org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,44,import org.apache.ambari.server.orm.entities.StackEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,45,import org.apache.ambari.server.state.ComponentInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,46,import org.apache.ambari.server.state.ServiceInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,47,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,48,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,49,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,50,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,51,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,52,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,54,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,55,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,60,public class DatabaseChecker {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,62,static Logger LOG = LoggerFactory.getLogger(DatabaseChecker.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,65,static Injector injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,66,static AmbariMetaInfo ambariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,67,static MetainfoDAO metainfoDAO;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,69,public static void checkDBConsistency() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,70,LOG.info("Checking DB consistency");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,72,boolean checkPassed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,73,if (ambariMetaInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,74,ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,77,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,78,List<ClusterEntity> clusters = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,79,for (ClusterEntity clusterEntity: clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,80,StackId stackId = new StackId(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,82,Collection<ClusterServiceEntity> serviceEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,83,clusterEntity.getClusterServiceEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,84,for (ClusterServiceEntity clusterServiceEntity : serviceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,86,ServiceDesiredStateEntity serviceDesiredStateEntity =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,87,clusterServiceEntity.getServiceDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,88,if (serviceDesiredStateEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,89,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,90,LOG.error(String.format("ServiceDesiredStateEntity is null for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,92,clusterEntity.getClusterName(), clusterServiceEntity.getServiceName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,94,Collection<ServiceComponentDesiredStateEntity> scDesiredStateEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,95,clusterServiceEntity.getServiceComponentDesiredStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,96,if (scDesiredStateEntities == null ||
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,97,scDesiredStateEntities.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,98,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,99,LOG.error(String.format("serviceComponentDesiredStateEntities is null or empty for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,101,clusterEntity.getClusterName(), clusterServiceEntity.getServiceName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,103,for (ServiceComponentDesiredStateEntity scDesiredStateEnity : scDesiredStateEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,105,Collection<HostComponentDesiredStateEntity> schDesiredStateEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,106,scDesiredStateEnity.getHostComponentDesiredStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,107,Collection<HostComponentStateEntity> schStateEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,108,scDesiredStateEnity.getHostComponentStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,110,ComponentInfo componentInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,111,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,112,scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,114,boolean zeroCardinality = componentInfo.getCardinality() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,116,|| scDesiredStateEnity.getComponentName().equals("SECONDARY_NAMENODE"); // cardinality 0 for NameNode HA
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,118,boolean componentCheckFailed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,120,if (schDesiredStateEntities == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,121,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,122,LOG.error(String.format("hostComponentDesiredStateEntities is null for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,124,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,126,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,127,LOG.error(String.format("hostComponentDesiredStateEntities is empty for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,129,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,132,if (schStateEntities == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,133,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,134,LOG.error(String.format("hostComponentStateEntities is null for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,136,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,138,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,139,LOG.error(String.format("hostComponentStateEntities is empty for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,141,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,144,if (!componentCheckFailed &&
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,145,schDesiredStateEntities.size() != schStateEntities.size()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,146,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,147,LOG.error(String.format("HostComponentStateEntities and HostComponentDesiredStateEntities " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,150,scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,152,checkPassed = checkPassed && !componentCheckFailed;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,157,if (checkPassed) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,158,LOG.info("DB consistency check passed.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,160,String errorMessage = "DB consistency check failed. Run \"ambari-server start --skip-database-validation\" to skip validation.";
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,161,LOG.error(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,162,throw new AmbariException(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,166,private static boolean clusterConfigsContainTypeAndTag(Collection<ClusterConfigEntity> clusterConfigEntities,
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,167,String typeName, String tag) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,168,for (ClusterConfigEntity clusterConfigEntity : clusterConfigEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,169,if (typeName.equals(clusterConfigEntity.getType()) && tag.equals(clusterConfigEntity.getTag())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,170,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,173,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,183,public static void checkDBConfigsConsistency() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,184,LOG.info("Checking DB configs consistency");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,186,boolean checkPassed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,188,if (ambariMetaInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,189,ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,192,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,193,List<ClusterEntity> clusters = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,194,if (clusters != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,195,for (ClusterEntity clusterEntity : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,196,Collection<ClusterConfigMappingEntity> configMappingEntities = clusterEntity.getConfigMappingEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,197,Collection<ClusterConfigEntity> clusterConfigEntities = clusterEntity.getClusterConfigEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,199,if (configMappingEntities != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,200,Map<String, Integer> selectedCountForType = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,201,for (ClusterConfigMappingEntity clusterConfigMappingEntity : configMappingEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,202,String typeName = clusterConfigMappingEntity.getType();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,203,if (clusterConfigMappingEntity.isSelected() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,204,int selectedCount = selectedCountForType.get(typeName) != null ? selectedCountForType.get(typeName) : 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,205,selectedCountForType.put(typeName, selectedCount + 1);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,208,if (!clusterConfigsContainTypeAndTag(clusterConfigEntities, typeName, clusterConfigMappingEntity.getTag())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,209,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,210,LOG.error("ClusterConfig does not contain mapping for type_name=" + typeName + " tag="
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,211,+ clusterConfigMappingEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,214,if (!selectedCountForType.containsKey(typeName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,215,selectedCountForType.put(typeName, 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,221,Collection<ClusterServiceEntity> clusterServiceEntities = clusterEntity.getClusterServiceEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,222,ClusterStateEntity clusterStateEntity = clusterEntity.getClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,223,if (clusterStateEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,224,StackEntity currentStack = clusterStateEntity.getCurrentStack();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,225,StackInfo stack = ambariMetaInfo.getStack(currentStack.getStackName(), currentStack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,227,for (ClusterServiceEntity clusterServiceEntity : clusterServiceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,228,if (!State.INIT.equals(clusterServiceEntity.getServiceDesiredStateEntity().getDesiredState())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,229,String serviceName = clusterServiceEntity.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,230,ServiceInfo serviceInfo = ambariMetaInfo.getService(stack.getName(), stack.getVersion(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,231,for (String configTypeName : serviceInfo.getConfigTypeAttributes().keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,232,if (selectedCountForType.get(configTypeName) == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,233,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,234,LOG.error("ClusterConfigMapping does not contain mapping for service=" + serviceName + " type_name="
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,235,+ configTypeName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,238,if (selectedCountForType.get(configTypeName) == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,239,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,240,LOG.error("ClusterConfigMapping selected count is 0 for service=" + serviceName + " type_name="
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,241,+ configTypeName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,243,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,244,LOG.error("ClusterConfigMapping selected count is more than 1 for service=" + serviceName
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,245,+ " type_name=" + configTypeName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,256,if (checkPassed) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,257,LOG.info("DB configs consistency check passed.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,259,String errorMessage = "DB configs consistency check failed. Run \"ambari-server start --skip-database-validation\" to skip validation.";
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,260,LOG.error(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,261,throw new AmbariException(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,265,public static void checkDBVersion() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,267,LOG.info("Checking DB store version");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,268,if (metainfoDAO == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,269,metainfoDAO = injector.getInstance(MetainfoDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,273,String schemaVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,275,if (schemaVersionEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,276,schemaVersion = schemaVersionEntity.getMetainfoValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,279,Configuration conf = injector.getInstance(Configuration.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,280,File versionFile = new File(conf.getServerVersionFilePath());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,281,if (!versionFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,282,throw new AmbariException("Server version file does not exist.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,284,String serverVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,285,try (Scanner scanner = new Scanner(versionFile)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,286,serverVersion = scanner.useDelimiter("\\Z").next();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,289,throw new AmbariException("Unable to read server version file.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,292,if (schemaVersionEntity==null || VersionUtils.compareVersions(schemaVersion, serverVersion, 3) != 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,293,String error = "Current database store version is not compatible with " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,295,+ ", serverVersion=" + serverVersion
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,296,+ ", schemaVersion=" + schemaVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,297,LOG.warn(error);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,298,throw new AmbariException(error);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,301,LOG.info("DB store version is compatible");
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,28,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,47,import com.google.gson.JsonArray;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,48,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,49,import com.google.gson.JsonPrimitive;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,295,private void fillHostDetails(ManualTask mt, Map<String, List<String>> hostToComponents) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,296,JsonArray arr = new JsonArray();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,297,for (Entry<String, List<String>> entry : hostToComponents.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,298,JsonObject hostObj = new JsonObject();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,299,hostObj.addProperty("host", entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,301,JsonArray componentArr = new JsonArray();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,302,for (String comp : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,303,componentArr.add(new JsonPrimitive(comp));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,305,hostObj.add("components", componentArr);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,307,arr.add(hostObj);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,310,JsonObject obj = new JsonObject();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,311,obj.add("unhealthy", arr);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,313,mt.structuredOut = obj.toString();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,87,private Map<Role, Float> successFactors = new HashMap<Role, Float>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,91,new TreeMap<String, Map<String, HostRoleCommand>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,93,new TreeMap<String, List<ExecutionCommandWrapper>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,193,stageEntity.setHostParamsStage(hostParamsStage);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,228,List<HostRoleCommand> commands = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,441,Map<String, String> cmdParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,450,Map<String, Map<String, String>> configurations = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,453,Map<String, Map<String, Map<String, String>>> configurationAttributes = new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,457,configTags = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,461,Map<String, String> roleParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,489,Map<String, String> roleParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,500,List<String> hlist = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,435,perOsRepos.put(operatingSystem.getOsType(), operatingSystem.getRepositories());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,155,import org.apache.ambari.server.state.HostComponentAdminState;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,423,Map<String, String> params = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1193,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1194,LOG.info("Merging Alert Definition {} into the database",
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1195,entity.getDefinitionName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,593,ambariMetaInfo.reconcileAlertDefinitions(clusters);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,252,entity.setHash(UUID.randomUUID().toString());
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,266,Source source = definition.getSource();
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,273,LOG.error(
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,275,exception);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,30,import org.apache.ambari.server.state.PropertyInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,31,import org.apache.ambari.server.state.ConfigHelper;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,32,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,36,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,37,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,38,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,39,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,44,public class FinalUpgradeCatalog extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,57,protected void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,62,protected void executePreDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,108,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,109,return getFinalVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,113,public boolean isFinal() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,114,return true;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,117,private String getFinalVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,118,return VersionUtils.getVersionSubstring(configuration.getServerVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3017,changedComps.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,224,if (fail.contains("{{version}}") && null != request.getRepositoryVersion()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,225,fail = fail.replace("{{version}}", request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/checks/ConfigurationMergeCheck.java,65,RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findByStackNameAndVersion(stackName, request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsMasterMaintenanceCheck.java,57,return super.isApplicable(request) && request.getRepositoryVersion() != null;
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsMasterMaintenanceCheck.java,68,final String upgradePackName = repositoryVersionHelper.get().getUpgradePackageName(stackId.getStackName(), stackId.getStackVersion(), request.getRepositoryVersion(), null);
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheck.java,58,return super.isApplicable(request) && request.getRepositoryVersion() != null;
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheck.java,76,if (null != request.getRepositoryVersion()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheck.java,92,stackId, request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/checks/InstallPackagesCheck.java,61,final String repoVersion = request.getRepositoryVersion();
ambari-server/src/main/java/org/apache/ambari/server/checks/InstallPackagesCheck.java,63,final RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findByStackNameAndVersion(stackName, request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,67,public String getRepositoryVersion() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,125,super(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,183,throw new SystemException(String.format("Upgrade pack not found for the target repository version %s",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,184,upgradeCheckRequest.getRepositoryVersion()));
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,34,private String m_repositoryVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,36,private StackId m_targetStackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,68,return m_repositoryVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,71,public void setRepositoryVersion(String repositoryVersion) {
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,72,m_repositoryVersion = repositoryVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,118,return m_targetStackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,127,public void setTargetStackId(StackId targetStackId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,128,m_targetStackId = targetStackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,65,public static final String UPGRADE_CHECK_ID_PROPERTY_ID                 = PropertyHelper.getPropertyId("UpgradeChecks", "id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,66,public static final String UPGRADE_CHECK_CHECK_PROPERTY_ID              = PropertyHelper.getPropertyId("UpgradeChecks", "check");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,67,public static final String UPGRADE_CHECK_STATUS_PROPERTY_ID             = PropertyHelper.getPropertyId("UpgradeChecks", "status");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,68,public static final String UPGRADE_CHECK_REASON_PROPERTY_ID             = PropertyHelper.getPropertyId("UpgradeChecks", "reason");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,69,public static final String UPGRADE_CHECK_FAILED_ON_PROPERTY_ID          = PropertyHelper.getPropertyId("UpgradeChecks", "failed_on");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,70,public static final String UPGRADE_CHECK_FAILED_DETAIL_PROPERTY_ID      = PropertyHelper.getPropertyId("UpgradeChecks", "failed_detail");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,71,public static final String UPGRADE_CHECK_CHECK_TYPE_PROPERTY_ID         = PropertyHelper.getPropertyId("UpgradeChecks", "check_type");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,72,public static final String UPGRADE_CHECK_CLUSTER_NAME_PROPERTY_ID       = PropertyHelper.getPropertyId("UpgradeChecks", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,73,public static final String UPGRADE_CHECK_UPGRADE_TYPE_PROPERTY_ID       = PropertyHelper.getPropertyId("UpgradeChecks", "upgrade_type");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,78,public static final String UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID = PropertyHelper.getPropertyId("UpgradeChecks", "repository_version");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,155,String stackName = cluster.getCurrentStackVersion().getStackName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,156,String sourceStackVersion = cluster.getCurrentStackVersion().getStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,158,final PrereqCheckRequest upgradeCheckRequest = new PrereqCheckRequest(clusterName, upgradeType);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,161,if (propertyMap.containsKey(UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,162,String repositoryVersionId = propertyMap.get(UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID).toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,165,upgradeCheckRequest.setRepositoryVersion(repositoryVersionId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,166,upgradeCheckRequest.setTargetStackId(repositoryVersionEntity.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,176,upgradePack = upgradeHelper.get().suggestUpgradePack(clusterName, sourceStackVersion,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,203,if (upgradeCheckRequest.getRepositoryVersion() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,204,setResourceProperty(resource, UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID, upgradeCheckRequest.getRepositoryVersion(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,48,import org.apache.ambari.server.orm.dao.RepositoryVersionDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,199,public UpgradePack suggestUpgradePack(String clusterName, String upgradeFromVersion, String upgradeToVersion,
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,206,String repoVersion = upgradeToVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,209,if (direction.isDowngrade() && null != upgradeFromVersion) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,210,repoVersion = upgradeFromVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,215,if (versionEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,225,String repoStackId = versionEntity.getStackId().getStackId();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,227,if (null != upgradePack.getTargetStack() && upgradePack.getTargetStack().equals(repoStackId) &&
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,228,upgradeType == upgradePack.getType()) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,234,String.format("Unable to perform %s. Found multiple upgrade packs for type %s and target version %s",
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,235,direction.getText(false), upgradeType.toString(), repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,30,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,43,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,676,commandParams.put(SERVICE_PACKAGE_FOLDER, serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,677,commandParams.put(HOOKS_FOLDER, stackInfo.getStackHooksFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpPropertyProvider.java,117,populateResource(httpPropertyRequest, resource, cluster, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpPropertyProvider.java,131,Cluster cluster, String hostName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,522,result.add(actualConfigs.get(stackPropertyConfigType).getProperties().get(stackProperty.getName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,396,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1238,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,459,if (!dbAccessor.tableHasColumn(UPGRADE_TABLE, UPGRADE_PACKAGE_COL)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,460,LOG.info("Adding upgrade_package column to upgrade table.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,461,dbAccessor.addColumn(UPGRADE_TABLE, new DBColumnInfo(UPGRADE_PACKAGE_COL, String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,463,if (!dbAccessor.tableHasColumn(UPGRADE_TABLE, UPGRADE_TYPE_COL)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,464,LOG.info("Adding upgrade_type column to upgrade table.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,465,dbAccessor.addColumn(UPGRADE_TABLE, new DBColumnInfo(UPGRADE_TYPE_COL, String.class, 32, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,469,boolean success = populateUpgradeTable();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,471,if (!success) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,472,throw new AmbariException("Errors found while populating the upgrade table with values for columns upgrade_type and upgrade_package.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,509,private boolean populateUpgradeTable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,510,boolean success = true;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,511,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,512,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,513,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,514,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,515,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,517,rs = statement.executeQuery("SELECT upgrade_id, cluster_id, from_version, to_version, direction, upgrade_package, upgrade_type FROM upgrade");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,518,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,519,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,520,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,521,final long upgradeId = rs.getLong("upgrade_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,522,final long clusterId = rs.getLong("cluster_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,523,final String fromVersion = rs.getString("from_version");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,524,final String toVersion = rs.getString("to_version");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,525,final Direction direction = Direction.valueOf(rs.getString("direction"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,527,String upgradePackage = rs.getString("upgrade_package");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,528,String upgradeType = rs.getString("upgrade_type");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,530,LOG.info(MessageFormat.format("Populating rows for the upgrade table record with " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,532,upgradeId, clusterId, fromVersion, toVersion, direction));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,535,if (StringUtils.isEmpty(upgradeType)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,536,LOG.info("Updating the record's upgrade_type to " + UpgradeType.ROLLING);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,537,dbAccessor.executeQuery("UPDATE upgrade SET upgrade_type = '" + UpgradeType.ROLLING + "' WHERE upgrade_id = " + upgradeId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,540,if (StringUtils.isEmpty(upgradePackage)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,541,String version = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,542,StackEntity stack = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,544,if (direction == Direction.UPGRADE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,545,version = toVersion;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,554,version = fromVersion;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,557,ClusterEntity cluster = clusterDAO.findById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,559,if (null != cluster) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,560,stack = cluster.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,561,upgradePackage = calculateUpgradePackage(stack, version);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,563,LOG.error("Could not find a cluster with cluster_id " + clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,566,if (!StringUtils.isEmpty(upgradePackage)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,567,LOG.info("Updating the record's upgrade_package to " + upgradePackage);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,568,dbAccessor.executeQuery("UPDATE upgrade SET upgrade_package = '" + upgradePackage + "' WHERE upgrade_id = " + upgradeId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,570,success = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,571,LOG.error("Unable to populate column upgrade_package for record in table upgrade with id " + upgradeId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,576,success = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,577,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,578,LOG.error("Unable to populate the upgrade_type and upgrade_package columns of the upgrade table. " + e);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,583,success = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,584,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,585,LOG.error("Failed to retrieve records from the upgrade table to populate the upgrade_type and upgrade_package columns. Exception: " + e);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,587,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,588,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,589,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,591,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,592,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,595,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,598,return success;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,631,private String calculateUpgradePackage(StackEntity stack, String version) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,632,String upgradePackage = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,634,if (null != version && null != stack) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,635,RepositoryVersionEntity repoVersion = repositoryVersionDAO.findByStackNameAndVersion(stack.getStackName(), version);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,639,if( null == repoVersion ){
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,640,List<RepositoryVersionEntity> bestMatches = repositoryVersionDAO.findByStack(new StackId(stack));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,641,if (!bestMatches.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,642,repoVersion = bestMatches.get(0);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,647,if( null == repoVersion ) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,648,return null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,651,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,652,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,653,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,654,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,655,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,657,rs = statement.executeQuery("SELECT upgrade_package FROM repo_version WHERE repo_version_id = " + repoVersion.getId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,658,if (rs != null && rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,659,upgradePackage = rs.getString("upgrade_package");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,663,LOG.error("Failed to retrieve upgrade_package for repo_version record with id " + repoVersion.getId() + ". Exception: " + e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,665,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,666,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,667,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,669,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,670,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,673,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,677,return upgradePackage;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,138,public final static String UPDATE_EXCLUDE_FILE_ONLY = "update_exclude_file_only";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,778,.get(UPDATE_EXCLUDE_FILE_ONLY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,853,LOG.info("Decommissioning " + slaveCompType + " and marking Maintenance=ON on " + sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,860,LOG.info("Recommissioning " + slaveCompType + " and marking Maintenance=OFF on " + sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,912,commandParams.put(UPDATE_EXCLUDE_FILE_ONLY, "false");
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,70,private Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,80,new HashMap<String, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,95,private Map<String, String> commandParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,107,private List<Map<String, String>> kerberosCommandParams = new ArrayList<Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,110,private Set<String> localComponents = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,74,public static final String VERSION_KEY = "version";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,84,public static final String ORIGINAL_STACK_KEY = "original_stack";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,91,public static final String TARGET_STACK_KEY = "target_stack";
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,450,String msg = String.format("File %s didn't pass the validation. Error message is : %s", file.getAbsolutePath(), e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,172,createAmbariServiceAndComponentResources(topology, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,195,public void createAmbariServiceAndComponentResources(ClusterTopology topology, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,204,Set<ServiceRequest> serviceRequests = new HashSet<ServiceRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,205,Set<ServiceComponentRequest> componentRequests = new HashSet<ServiceComponentRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,221,Map<String, Object> installProps = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,224,Map<String, Object> startProps = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,227,Predicate predicate = new EqualsPredicate<String>(
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,228,ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,259,Map<String, Object> properties = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,261,properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,272,final Set<ServiceComponentHostRequest> requests = new HashSet<ServiceComponentHostRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,340,return addHostToExistingConfigGroups(hostName, topology, groupName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,551,private boolean addHostToExistingConfigGroups(String hostName, ClusterTopology topology, String groupName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,565,String qualifiedGroupName = getConfigurationGroupName(topology.getBlueprint().getName(), groupName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,567,if (group.getName().equals(qualifiedGroupName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,592,Map<String, Map<String, Config>> groupConfigs = new HashMap<String, Map<String, Config>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,617,serviceConfigs = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,449,addRepoInfoToHostLevelParams(cluster, hostLevelParams, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,508,private void addRepoInfoToHostLevelParams(Cluster cluster, Map<String, String> hostLevelParams, String hostName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,538,StackId stackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,539,hostLevelParams.put(STACK_NAME, stackId.getStackName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,540,hostLevelParams.put(STACK_VERSION, stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,87,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,93,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,99,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,105,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,111,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,120,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,126,new ArrayList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,155,new HashSet<String>(Arrays.asList("fs.defaultFS", "hbase.rootdir", "instance.volumes", "policymgr_external_url", "xasecure.audit.destination.hdfs.dir"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,206,Collection<String> requiredHostGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,245,Set<String> configTypesUpdated = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,405,Collection<Configuration> allConfigs = new ArrayList<Configuration>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,616,new LinkedList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,643,new LinkedList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,669,new LinkedList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,768,Map<String, Map<String, PropertyUpdater>> highAvailabilityUpdaters = new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,769,Map<String, PropertyUpdater> hdfsSiteUpdatersForAvailability = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,799,Map<String, Map<String, PropertyUpdater>> highAvailabilityUpdaters = new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,800,Map<String, PropertyUpdater> yarnSiteUpdatersForAvailability = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,826,Map<String, Map<String, PropertyUpdater>> highAvailabilityUpdaters = new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,827,Map<String, PropertyUpdater> oozieSiteUpdatersForAvailability = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1101,Collection<String> addedGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1143,Collection<String> hosts = new LinkedHashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1175,List<String> namesWithoutWhitespace = new LinkedList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1407,return new HashSet<String>(matchingGroups);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1819,Set<String> hostStrings = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1861,Set<String> temp = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1896,Collection<String> requiredHostGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2143,new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2207,Collection<String> requiredGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2254,Map<String, PropertyUpdater> amsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2255,Map<String, PropertyUpdater> hdfsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2256,Map<String, PropertyUpdater> mapredSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2257,Map<String, PropertyUpdater> coreSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2258,Map<String, PropertyUpdater> hbaseSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2259,Map<String, PropertyUpdater> yarnSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2260,Map<String, PropertyUpdater> hiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2261,Map<String, PropertyUpdater> hiveSiteNonTopologyMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2262,Map<String, PropertyUpdater> oozieSiteOriginalValueMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2263,Map<String, PropertyUpdater> oozieSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2264,Map<String, PropertyUpdater> stormSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2265,Map<String, PropertyUpdater> stormSiteNonTopologyMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2266,Map<String, PropertyUpdater> accumuloSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2267,Map<String, PropertyUpdater> falconStartupPropertiesMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2268,Map<String, PropertyUpdater> kafkaBrokerMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2269,Map<String, PropertyUpdater> kafkaBrokerNonTopologyMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2270,Map<String, PropertyUpdater> atlasPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2271,Map<String, PropertyUpdater> mapredEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2272,Map<String, PropertyUpdater> mHadoopEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2273,Map<String, PropertyUpdater> shHadoopEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2274,Map<String, PropertyUpdater> hbaseEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2275,Map<String, PropertyUpdater> hiveEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2276,Map<String, PropertyUpdater> hiveInteractiveEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2277,Map<String, PropertyUpdater> hiveInteractiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2278,Map<String, PropertyUpdater> oozieEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2279,Map<String, PropertyUpdater> oozieEnvHeapSizeMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2281,Map<String, PropertyUpdater> multiWebhcatSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2282,Map<String, PropertyUpdater> multiHbaseSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2283,Map<String, PropertyUpdater> multiStormSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2284,Map<String, PropertyUpdater> multiCoreSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2285,Map<String, PropertyUpdater> multiHdfsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2286,Map<String, PropertyUpdater> multiHiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2287,Map<String, PropertyUpdater> multiKafkaBrokerMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2288,Map<String, PropertyUpdater> multiSliderClientMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2289,Map<String, PropertyUpdater> multiYarnSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2290,Map<String, PropertyUpdater> multiOozieSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2291,Map<String, PropertyUpdater> multiAccumuloSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2292,Map<String, PropertyUpdater> multiRangerKmsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2293,Map<String, PropertyUpdater> dbHiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2294,Map<String, PropertyUpdater> rangerAdminPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2295,Map<String, PropertyUpdater> rangerEnvPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2296,Map<String, PropertyUpdater> rangerYarnAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2297,Map<String, PropertyUpdater> rangerHdfsAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2298,Map<String, PropertyUpdater> rangerHbaseAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2299,Map<String, PropertyUpdater> rangerHiveAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2300,Map<String, PropertyUpdater> rangerKnoxAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2301,Map<String, PropertyUpdater> rangerKafkaAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2302,Map<String, PropertyUpdater> rangerStormAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2303,Map<String, PropertyUpdater> rangerAtlasAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2304,Map<String, PropertyUpdater> hawqSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2305,Map<String, PropertyUpdater> zookeeperEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2446,List<String> hiveHooksClean = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2707,final Map<String , String> userProps = new HashMap<String , String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2965,return !(this.propertyConfigType.equals(configType) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3121,Collections.unmodifiableSet( new HashSet<String>(Arrays.asList("dfs.namenode.http-address", "dfs.namenode.https-address", "dfs.namenode.rpc-address")));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3156,Collections.unmodifiableSet( new HashSet<String>(Arrays.asList(HAWQ_SITE_HAWQ_STANDBY_ADDRESS_HOST)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,655,ActionExecutionContext actionContext = new ActionExecutionContext(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,656,cluster.getClusterName(), INSTALL_PACKAGES_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,657,Collections.singletonList(filter),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,658,params);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,676,public Set<PropertyInfo> getStackProperties(Cluster cluster) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,677,StackId stackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,222,final Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,226,List<ClusterVersionEntity> requestedEntities = new ArrayList<ClusterVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,250,final Map<String, List<String>> hostStates = new HashMap<String, List<String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,301,String stackName;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,302,String stackVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,306,Set<String> requiredProperties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,344,final StackId stackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,345,if (propertyMap.containsKey(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,346,propertyMap.containsKey(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,347,stackName = (String) propertyMap.get(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,348,stackVersion = (String) propertyMap.get(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,349,stackId = new StackId(stackName, stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,350,if (! ami.isSupportedStack(stackName, stackVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,351,throw new NoSuchParentResourceException(String.format("Stack %s is not supported",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,352,stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,355,StackId currentStackVersion = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,356,stackId = currentStackVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,431,Map<String, List<RepositoryEntity>> perOsRepos = new HashMap<String, List<RepositoryEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,445,Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,471,ArrayList<Stage> stages = new ArrayList<Stage>(batchCount);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,588,List<ServiceOsSpecific.Package> packages = new ArrayList<ServiceOsSpecific.Package>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,589,Set<String> servicesOnHost = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,631,Map<String, String> params = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,748,Set<String> requiredProperties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,787,Map<String, String> args = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,802,ArrayList<Host> hosts = new ArrayList<Host>(cluster.getHosts());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,34,import com.google.common.base.Objects;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1294,private boolean isNonRollingUpgradePastUpgradingStack(UpgradeEntity upgrade) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1302,command.getCustomCommandName().equalsIgnoreCase(UpgradeResourceProvider.CONST_CUSTOM_COMMAND_NAME) &&
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1303,command.getStatus() == HostRoleStatus.COMPLETED) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1304,return true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1308,return false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1311,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,163,RepositoryVersionEntity repositoryVersionEntity = repositoryVersionDAO.findByStackNameAndVersion(stackName, repositoryVersionId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,177,upgradeCheckRequest.getRepositoryVersion(), Direction.UPGRADE, upgradeType, preferredUpgradePackName);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,200,Direction direction, UpgradeType upgradeType, String preferredUpgradePackName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,204,StackId stack =  cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,213,RepositoryVersionEntity versionEntity = s_repoVersionDAO.get().findByStackNameAndVersion(stack.getStackName(), repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,216,throw new AmbariException(String.format("Repository version %s was not found", repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,219,Map<String, UpgradePack> packs = m_ambariMetaInfo.get().getUpgradePacks(stack.getStackName(), stack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,220,UpgradePack pack = null;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,222,if (StringUtils.isNotEmpty(preferredUpgradePackName) && packs.containsKey(preferredUpgradePackName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,223,pack = packs.get(preferredUpgradePackName);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,242,throw new AmbariException(String.format("Unable to perform %s. Could not locate %s upgrade pack for version %s",
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,243,direction.getText(false), upgradeType.toString(), repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/ClientConfigFileDefinition.java,76,append(dictionaryName, rhs.dictionaryName).isEquals();
ambari-server/src/main/java/org/apache/ambari/server/state/ClientConfigFileDefinition.java,84,append(dictionaryName).toHashCode();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,396,String.format("Downgrade version %s is not the current cluster version of %s",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1302,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1304,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1311,makeCommandStage(context, request, entity, wrapper, skippable, supportsAutoSkipOnFailure,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1315,makeActionStage(context, request, entity, wrapper, skippable, supportsAutoSkipOnFailure,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1319,makeServiceCheckStage(context, request, entity, wrapper, skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1345,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1347,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1401,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1442,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1444,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1498,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1525,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1527,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1559,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1597,UpgradeItemEntity entity, ServerSideActionTask task, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1598,boolean supportsAutoSkipOnFailure, boolean allowRetry,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1696,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,365,if (!currentRepoStackId.equals(originalStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,368,clusterName, currentRepoStackId.getStackId(), originalStackId.getStackId(), PREVIOUS_UPGRADE_NOT_COMPLETED_MSG);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,371,throw new AmbariException("The source target stack doesn't match the cluster's CURRENT repo version's stack.");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,375,if (!originalStackId.equals(targetStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,376,out.append(String.format("Will remove configs since the original stack %s differs from the target stack %s " +
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,378,cluster.removeConfigurations(targetStackId);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,382,out.append(String.format("Searching for current version for %s\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,383,clusterName));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,427,clusterName, targetStackId, badVersion);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,161,if (!currentClusterStackId.equals(originalStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,171,if (currentClusterStackId.equals(targetStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1274,if (effectiveVersion == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1279,Collection<ClusterVersionEntity> clusterVersionEntities = getClusterEntity().getClusterVersionEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1280,for (ClusterVersionEntity clusterVersionEntity : clusterVersionEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1281,if (clusterVersionEntity.getRepositoryVersion().getVersion().equals(effectiveVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1282,return clusterVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1286,return null;
ambari-server/src/main/java/org/apache/ambari/annotations/ExperimentalFeature.java,43,PATCH_UPGRADES
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,328,Job job = createJob(insertQuery, "default");
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,349,Job job = createJob(deleteQuery, "default");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,318,StackInfo stackInfo = ambariMetaInfo.getStack
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,319,(stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,436,commandParams.put(SERVICE_PACKAGE_FOLDER, serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,437,commandParams.put(HOOKS_FOLDER, stackInfo.getStackHooksFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,20,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,21,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,96,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1375,AmbariMetaInfo ambariMetaInfo = s_metaProvider.get();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1376,StackId stackId = context.getEffectiveStackId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1378,StackInfo stackInfo = ambariMetaInfo.getStack(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1379,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1381,if (wrapper.getTasks() != null && wrapper.getTasks().size() > 0
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1382,&& wrapper.getTasks().get(0).getService() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1383,String serviceName = wrapper.getTasks().get(0).getService();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1384,ServiceInfo serviceInfo = ambariMetaInfo.getService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1385,stackId.getStackVersion(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1386,params.put(SERVICE_PACKAGE_FOLDER, serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1387,params.put(HOOKS_FOLDER, stackInfo.getStackHooksFolder());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,20,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,21,import java.util.concurrent.locks.ReentrantLock;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,38,import com.google.common.eventbus.AllowConcurrentEvents;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,64,private Lock m_stackVersionLock = new ReentrantLock();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,93,m_stackVersionLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,113,ServiceComponent sc = cluster.getService(sch.getServiceName()).getServiceComponent(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,118,sc.getName(), sch.getServiceComponentName(), sch.getHostName(), newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,120,if (UNKNOWN_VERSION.equals(sc.getDesiredVersion())) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,121,processUnknownDesiredVersion(cluster, sc, sch, newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,140,m_stackVersionLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,150,private void bootstrapVersion(Cluster cluster, ServiceComponentHost sch) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,151,RepositoryVersionEntity repoVersion = sch.recalculateHostVersionState();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,152,if (null != repoVersion) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,153,cluster.recalculateClusterVersionState(repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,171,bootstrapVersion(cluster, sch);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,181,private void processComponentVersionChange(Cluster cluster, ServiceComponent sc,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,182,ServiceComponentHost sch,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,183,String newVersion) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,184,String desiredVersion = sc.getDesiredVersion();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,185,UpgradeState upgradeState = sch.getUpgradeState();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,186,if (upgradeState == UpgradeState.IN_PROGRESS) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,188,if (desiredVersion.equals(newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,189,sch.setUpgradeState(UpgradeState.COMPLETE);  // Component upgrade confirmed
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,190,sch.setStackVersion(cluster.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,194,sch.setUpgradeState(UpgradeState.VERSION_MISMATCH);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,198,sch.setUpgradeState(UpgradeState.COMPLETE);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,200,sch.setUpgradeState(UpgradeState.NONE);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,203,sch.setUpgradeState(UpgradeState.VERSION_MISMATCH);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,205,sch.setVersion(newVersion);
ambari-server/src/main/java/org/apache/ambari/server/agent/AlertDefinitionCommand.java,69,public AlertDefinitionCommand(String clusterName, String hostName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,611,hostname, hash, definitions);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,598,Map<String, String[]> componentPortsProperties = new HashMap<String, String[]>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,623,initRpcSuffixes(clusterName, componentName, configType, currVersion, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,654,String[] getPortProperties(Service.Type service, String componentName, String hostName, Map<String, Object> properties, boolean httpsEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,658,return getNamenodeHaProperty(properties, serviceDesiredProperties.get(service).get(componentName), hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,663,private String[] getNamenodeHaProperty(Map<String, Object> properties, String pattern[], String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,675,if (propertyValue.split(":")[0].equals(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1289,keys.put(tag, getNamenodeHaProperty(configProperties, stringMap.get(tag), hostName));
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,463,enqueueAgentCommands(clusterName, hostNames);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,487,Cluster cluster = m_clusters.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,493,enqueueAgentCommands(clusterName, hosts);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,510,private void enqueueAgentCommands(String clusterName, Collection<String> hosts) {
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,529,clusterName, hostName, hash, definitions);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,532,Cluster cluster = m_clusters.get().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,704,final RequestResourceFilter resourceFilter, Stage stage) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,980,Stage stage, Map<String, String> requestParams) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,994,addDecommissionAction(actionExecutionContext, resourceFilter, stage);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3806,requestProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2869,requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2937,requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1519,s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1578,s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2784,scHost.setState(State.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,137,public static final String UPGRADE_VERSION = "Upgrade/repository_version";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,268,PROPERTY_IDS.add(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,45,import javax.persistence.PreUpdate;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,46,import javax.persistence.PrePersist;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,61,import static java.util.Arrays.asList;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,150,String jsonData = null;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,151,try {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,152,jsonData = mapper.writeValueAsString(metrics);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,154,LOG.error("Unable to parse metrics", e);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,156,if (jsonData != null) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,157,return emitMetricsJson(connectUrl, jsonData);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,274,response.header("Content-Disposition", "inline; filename=\"concatResult.txt\"").type(MediaType.APPLICATION_OCTET_STREAM);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,595,default: {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/Precision.java,38,if (precision == null ) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,84,setupSecurity();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,177,CloudSolrClient solrClient = new CloudSolrClient(zkConnectString);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,56,if (! missingGroupDependencies.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,72,component, cardinality, autoDeploy));
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,77,if (! missingDependencies.isEmpty() || ! cardinalityFailures.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,85,Map<String, Map<String, Collection<String>>> missingProperties =
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,86,new HashMap<String, Map<String, Collection<String>>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,92,if(clusterConfigurations != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,103,errorMessage.append("  Config:" + configType + " Property:" + propertyName+"\n");
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,110,if(containsSecretReferences) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,128,&& hiveEnvConfig.get("hive_database").startsWith("Existing")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,136,if (hiveEnvConfig != null && !hiveEnvConfig.isEmpty() && hiveEnvConfig.get("hive_database") !=null
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,138,&& VersionUtils.compareVersions(stack.getVersion(), "2.3.0.0") < 0
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,139,&& stack.getName().equalsIgnoreCase("HDP")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,147,if (oozieEnvConfig != null && !oozieEnvConfig.isEmpty() && oozieEnvConfig.get("oozie_database") !=null
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,149,&& VersionUtils.compareVersions(stack.getVersion(), "2.3.0.0") < 0
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,150,&& stack.getName().equalsIgnoreCase("HDP")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,157,if (! component.equals("AMBARI_SERVER")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,158,String serviceName = stack.getServiceForComponent(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,159,if (processedServices.add(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,160,Collection<Stack.ConfigProperty> requiredServiceConfigs =
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,161,stack.getRequiredConfigurationProperties(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,163,for (Stack.ConfigProperty requiredConfig : requiredServiceConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,164,String configCategory = requiredConfig.getType();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,165,String propertyName = requiredConfig.getName();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,166,if (! stack.isPasswordProperty(serviceName, configCategory, propertyName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,167,Collection<String> typeRequirements = allRequiredProperties.get(configCategory);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,168,if (typeRequirements == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,169,typeRequirements = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,170,allRequiredProperties.put(configCategory, typeRequirements);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,172,typeRequirements.add(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,178,for (Map.Entry<String, Collection<String>> requiredTypeProperties : allRequiredProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,179,String requiredCategory = requiredTypeProperties.getKey();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,180,Collection<String> requiredProperties = requiredTypeProperties.getValue();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,181,Collection<String> operationalTypeProps = operationalConfiguration.containsKey(requiredCategory) ?
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,182,operationalConfiguration.get(requiredCategory).keySet() :
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,183,Collections.<String>emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,185,requiredProperties.removeAll(operationalTypeProps);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,186,if (! requiredProperties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,187,String hostGroupName = hostGroup.getName();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,188,Map<String, Collection<String>> hostGroupMissingProps = missingProperties.get(hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,189,if (hostGroupMissingProps == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,190,hostGroupMissingProps = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,191,missingProperties.put(hostGroupName, hostGroupMissingProps);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,193,hostGroupMissingProps.put(requiredCategory, requiredProperties);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,198,if (! missingProperties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,199,throw new InvalidTopologyException("Missing required properties.  Specify a value for these " +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyValidator.java,25,public void validate(ClusterTopology topology) throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,310,String targetType = target.getNotificationType();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,311,NotificationDispatcher dispatcher = m_dispatchFactory.getDispatcher(targetType);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,314,if (dispatcher.isDigestSupported()) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,315,AlertNotification notification = buildNotificationFromTarget(target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,316,notification.CallbackIds = new ArrayList<String>(notices.size());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,317,List<AlertHistoryEntity> histories = new ArrayList<AlertHistoryEntity>(
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,318,notices.size());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,322,for (AlertNoticeEntity notice : notices) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,323,AlertHistoryEntity history = notice.getAlertHistory();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,324,histories.add(history);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,326,notification.CallbackIds.add(notice.getUuid());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,331,try {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,332,renderDigestNotificationContent(dispatcher, notification, histories, target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,335,DispatchRunnable runnable = new DispatchRunnable(dispatcher, notification);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,336,m_executor.execute(runnable);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,338,LOG.error("Unable to create notification for alerts", exception);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,343,notification.Callback.onFailure(notification.CallbackIds);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,348,for (AlertNoticeEntity notice : notices) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,349,AlertNotification notification = buildNotificationFromTarget(target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,350,AlertHistoryEntity history = notice.getAlertHistory();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,351,notification.CallbackIds = Collections.singletonList(notice.getUuid());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,356,renderNotificationContent(dispatcher, notification, history, target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,362,LOG.error("Unable to create notification for alert", exception);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,59,import org.apache.ambari.server.orm.dao.TopologyHostRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,61,import org.apache.ambari.server.orm.dao.TopologyRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,71,import org.apache.ambari.server.orm.entities.TopologyHostRequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,72,import org.apache.ambari.server.orm.entities.TopologyLogicalRequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,74,import org.apache.ambari.server.orm.entities.TopologyRequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,152,private TopologyHostRequestDAO topologyHostRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,154,private TopologyRequestDAO topologyRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,35,import org.apache.ambari.server.state.host.HostImpl;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,132,public synchronized HostOfferResponse offer(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,287,private void setHostOnTasks(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,382,public boolean matchesHost(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,589,public HostResourceAdapter(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,618,private void buildPropertyMap(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,46,import org.apache.ambari.server.state.host.HostImpl;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,97,public HostOfferResponse offer(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,340,public void removeHostRequestByHostName(String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,354,Iterator<HostRequest> allHostRequesIterator = allHostRequests.iterator();
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,355,while (allHostRequesIterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,357,allHostRequesIterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedState.java,25,import org.apache.ambari.server.controller.internal.ProvisionClusterRequest;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,664,SPACES;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1231,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1232,return addAdditionalConfigurations(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1233,calculateExistingConfigurations(cluster, hostname),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1234,hostname, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,38,private static final Pattern PATTERN_VARIABLE = Pattern.compile("\\$\\{(?:([\\w\\-\\.]+)/)?([\\w\\-\\.]+)(?:\\s*\\|\\s*(.+?))?\\}");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RequestDAO.java,42,public class RequestDAO {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ExecutionCommandEntity.java,21,import javax.persistence.*;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostTaskEntity.java,70,return topologyHostRequestEntity != null ? topologyHostRequestEntity.getId() : null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyLogicalTaskEntity.java,61,public Long getHostTaskId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyLogicalTaskEntity.java,62,return topologyHostTaskEntity != null ? topologyHostTaskEntity.getId() : null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1657,configs.add(cluster.getConfig(configType, cr.getVersionTag()));
ambari-server/src/main/java/org/apache/ambari/server/stack/QuickLinksConfigurationModule.java,132,errors.addAll(errors);
ambari-server/src/main/java/org/apache/ambari/server/stack/ThemeModule.java,132,errors.addAll(errors);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2388,if (osSpecific.getKey().contains(osFamily)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2389,foundedOSSpecifics.add(osSpecific.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2392,return foundedOSSpecifics;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,298,public boolean isStackUpgradeAllowedToBypassPreChecks() {
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,299,return config.isUpgradePrecheckBypass();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,71,.equals(RoleCommand.SERVICE_CHECK.name()).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,138,if (command.getCommandDetail().contains(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,192,for (PrerequisiteCheck prerequisiteCheck : checkHelper.performChecks(upgradeCheckRequest, upgradeChecksToRun)) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,89,List<AbstractCheckDescriptor> checksRegistry) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,92,final List<PrerequisiteCheck> prerequisiteCheckResults = new ArrayList<PrerequisiteCheck>();
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,101,boolean canBypassPreChecks = checkDescriptor.isStackUpgradeAllowedToBypassPreChecks();
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,103,if (prerequisiteCheck.getStatus() == PrereqCheckStatus.FAIL && canBypassPreChecks) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,104,LOG.error("Check {} failed but stack upgrade is allowed to bypass failures. Error to bypass: {}. Failed on: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,105,checkDescriptor.getDescription().name(),
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,106,prerequisiteCheck.getFailReason(),
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,107,StringUtils.join(prerequisiteCheck.getFailedOn(), ", "));
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,108,prerequisiteCheck.setStatus(PrereqCheckStatus.BYPASS);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,110,prerequisiteCheckResults.add(prerequisiteCheck);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,112,request.addResult(checkDescriptor.getDescription(), prerequisiteCheck.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,114,prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,116,prerequisiteCheckResults.add(prerequisiteCheck);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,118,request.addResult(checkDescriptor.getDescription(), prerequisiteCheck.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,121,prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,123,prerequisiteCheckResults.add(prerequisiteCheck);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,125,request.addResult(checkDescriptor.getDescription(), prerequisiteCheck.getStatus());
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,257,byte[] chunk = new byte[1024];
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,258,while (in.read(chunk) != -1) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,259,output.write(chunk);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,261,LOG.info("concated file : {}", path);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/DeathWatch.java,45,if(message instanceof Terminated){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/NonPersistentCursor.java,123,Inbox inbox = Inbox.create(system);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1663,Logger logger = LoggerFactory.getLogger("configchange");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1665,logger.info("cluster '" + request.getClusterName() + "' "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1666,+ "changed by: '" + authName + "'; "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1667,+ "type='" + config.getType() + "' "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1668,+ "tag='" + config.getTag() + "'");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,650,if (serviceName != null && requestServiceName !=null && !StringUtils.equals(serviceName, requestServiceName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,809,logger.info("cluster '" + cluster.getClusterName() + "', "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2506,configChangeLog.info("Cluster '{}' changed by: '{}'; service_name='{}' config_group='{}' config_group_id='{}' " +
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2508,configGroup == null ? ServiceConfigVersionResponse.DEFAULT_CONFIG_GROUP_NAME : configGroup.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2509,configGroup == null ? "-1" : configGroup.getId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2510,serviceConfigEntity.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2512,String configGroupName = configGroup != null ? configGroup.getName() : ServiceConfigVersionResponse.DEFAULT_CONFIG_GROUP_NAME;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,19,package org.apache.ambari.server.serveraction.kerberos;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,21,import javax.net.SocketFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,22,import javax.net.ssl.SSLContext;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,23,import javax.net.ssl.SSLSocketFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,24,import javax.net.ssl.TrustManager;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,25,import javax.net.ssl.X509TrustManager;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,29,import java.net.UnknownHostException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,34,public class TrustingSSLSocketFactory extends SSLSocketFactory {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,37,public TrustingSSLSocketFactory() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,39,SSLContext ctx = SSLContext.getInstance("TLS");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,40,ctx.init(null, new TrustManager[]{new LenientTrustManager()}, new SecureRandom());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,47,public static SocketFactory getDefault() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,48,return new TrustingSSLSocketFactory();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,67,public Socket createSocket(String string, int i) throws IOException, UnknownHostException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,72,public Socket createSocket(String string, int i, InetAddress ia, int i1) throws IOException, UnknownHostException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,97,return new java.security.cert.X509Certificate[0];
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,22,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,23,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,24,import org.apache.ambari.server.security.credential.PrincipalKeyCredential;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,25,import org.apache.commons.codec.digest.DigestUtils;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,26,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,27,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,28,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,29,import org.apache.velocity.VelocityContext;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,30,import org.apache.velocity.app.Velocity;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,31,import org.apache.velocity.exception.MethodInvocationException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,32,import org.apache.velocity.exception.ParseErrorException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,33,import org.apache.velocity.exception.ResourceNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,54,import java.io.StringWriter;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,55,import java.io.UnsupportedEncodingException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,56,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,57,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,58,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,59,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,60,import java.util.Properties;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,108,private Gson gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,173,this.gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,187,this.gson = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,445,properties.put("java.naming.ldap.factory.socket", TrustingSSLSocketFactory.class.getName());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,452,throw new KerberosKDCConnectionException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,214,Map<Long, Map<Long, HostRoleCommandStatusSummaryDTO>> cache =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,215,new HashMap<Long, Map<Long, HostRoleCommandStatusSummaryDTO>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,236,Resource stageResource = toResource(entity, propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,245,Resource stageResource = toResource(entity, propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,364,private Resource toResource(StageEntity entity, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,366,Resource resource = new ResourceImpl(Resource.Type.Stage);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,368,Long clusterId = entity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,369,if (clusterId != null && !clusterId.equals(Long.valueOf(-1L))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,370,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,371,Cluster cluster = clustersProvider.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,373,setResourceProperty(resource, STAGE_CLUSTER_NAME, cluster.getClusterName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,375,LOG.error("Can not get information for cluster " + clusterId + ".", e );
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,379,Map<Long, HostRoleCommandStatusSummaryDTO> summary =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,380,topologyManager.getStageSummaries(entity.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,382,setResourceProperty(resource, STAGE_STAGE_ID, entity.getStageId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,383,setResourceProperty(resource, STAGE_REQUEST_ID, entity.getRequestId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,384,setResourceProperty(resource, STAGE_CONTEXT, entity.getRequestContext(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,392,if (isPropertyRequested(STAGE_COMMAND_PARAMS, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,393,resource.setProperty(STAGE_COMMAND_PARAMS, entity.getCommandParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,397,if (isPropertyRequested(STAGE_HOST_PARAMS, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,398,resource.setProperty(STAGE_HOST_PARAMS, entity.getHostParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,401,setResourceProperty(resource, STAGE_SKIPPABLE, entity.isSkippable(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,403,Long startTime = Long.MAX_VALUE;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,404,Long endTime = 0L;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,405,if (summary.containsKey(entity.getStageId())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,406,startTime = summary.get(entity.getStageId()).getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,407,endTime = summary.get(entity.getStageId()).getEndTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,410,setResourceProperty(resource, STAGE_START_TIME, startTime, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,411,setResourceProperty(resource, STAGE_END_TIME, endTime, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,413,CalculatedStatus status = CalculatedStatus.statusFromStageSummary(summary, Collections.singleton(entity.getStageId()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,415,setResourceProperty(resource, STAGE_PROGRESS_PERCENT, status.getPercent(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,416,setResourceProperty(resource, STAGE_STATUS, status.getStatus(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,417,setResourceProperty(resource, STAGE_DISPLAY_STATUS, status.getDisplayStatus(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,419,return resource;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,885,RequestStageContainer req = createRequest(direction, version);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1291,private RequestStageContainer createRequest(Direction direction, String version) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,183,FSDataOutputStream output = getSharedObjectsFactory().getHdfsApi().create(filePath, true);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,184,output.writeBytes(request.file.getFileContent());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,185,output.close();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,207,output.writeBytes(request.file.getFileContent());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,224,if (fileName == null || fileName.isEmpty()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,225,fileName = "results.csv";
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,229,header("Content-Disposition", String.format("attachment; filename=\"%s\"", fileName)).
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,656,ViewEntity viewEntity = getDefinition(instanceEntity.getViewName());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,658,if (viewEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,659,String instanceName = instanceEntity.getName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,663,if (getInstanceDefinition(viewName, version, instanceName) != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,664,if (instanceEntity.isXmlDriven()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,665,throw new IllegalStateException("View instances defined via xml can't be deleted through api requests");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,667,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,668,LOG.debug("Deleting view instance " + viewName + "/" +
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,671,List<PrivilegeEntity> instancePrivileges = privilegeDAO.findByResourceId(instanceEntity.getResource().getId());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,672,for (PrivilegeEntity privilegeEntity : instancePrivileges) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,673,removePrivilegeEntity(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,675,instanceDAO.remove(instanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,676,viewEntity.removeInstanceDefinition(instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,677,removeInstanceDefinition(viewEntity, instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,680,handlerList.removeViewInstance(instanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1511,private void removePrivilegeEntity(PrivilegeEntity privilegeEntity) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1513,PrincipalEntity principalEntity = privilegeEntity.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1514,if (principalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1515,principalEntity.removePrivilege(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1518,privilegeDAO.remove(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,80,public void sendActions(List<Stage> stages, ExecuteActionRequest actionRequest) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,81,Request request = requestFactory.createNewFromStages(stages, actionRequest);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,441,processHostRole(stage, cmd, commandsToStart, commandsToUpdate);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1034,private void processHostRole(Stage s, ExecutionCommand cmd, List<ExecutionCommand> commandsToStart,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1051,cmd.setHostname(hostsMap.getHostMap(hostname));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1056,Map<String, Set<String>> clusterHostInfo = clusterHostInfoCache.getIfPresent(stagePk);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1060,clusterHostInfo = StageUtils.getGson().fromJson(s.getClusterHostInfo(), type);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1061,clusterHostInfoCache.put(stagePk, clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,112,public Request(@Assisted Collection<Stage> stages, Clusters clusters){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,145,public Request(@Assisted Collection<Stage> stages, @Assisted ExecuteActionRequest actionRequest,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,147,this(stages, clusters);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/RequestFactory.java,32,Request createNewFromStages(Collection<Stage> stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/RequestFactory.java,34,Request createNewFromStages(Collection<Stage> stages, ExecuteActionRequest actionRequest);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,75,private String clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,117,this.clusterHostInfo = clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,152,clusterHostInfo = stageEntity.getClusterHostInfo();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,191,stageEntity.setClusterHostInfo(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,238,public String getClusterHostInfo() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,239,return clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,242,public void setClusterHostInfo(String clusterHostInfo) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,243,this.clusterHostInfo = clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,885,builder.append("clusterHostInfo="+clusterHostInfo+"\n");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/StageFactoryImpl.java,60,return new Stage(requestId, logDir, clusterName, clusterId, requestContext, clusterHostInfo, commandParamsStage, hostParamsStage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,899,stage.setClusterHostInfo(clusterHostInfoJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1014,String requestContext, String clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1021,requestContext, clusterHostInfo, commandParamsStage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2475,requestStages.getId(), requestProperties.get(REQUEST_CONTEXT_PROPERTY),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2476,clusterHostInfoJson, "{}", hostParamsJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2892,Stage stage = createNewStage(0, cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2893,1, "",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2894,clusterHostInfoJson, "{}", "");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3802,jsons.getClusterHostInfo(), commandParamsForStage, jsons.getHostParamsForStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2146,String requestContext, String clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2147,String commandParams, String hostParams) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2153,clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2181,String requestContext, String clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2188,Stage stage = createNewStage(id, cluster, requestId, requestContext, clusterHostInfo, commandParams, hostParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2685,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2708,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2731,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2754,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2777,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2800,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2823,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2849,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2915,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2955,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2986,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3008,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,483,cluster.getClusterId(), stageName, clusterHostInfoJson, "{}", hostParamsJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,443,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestStageContainer.java,206,: requestFactory.createNewFromStages(stages, actionRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,94,public static final String STAGE_CLUSTER_HOST_INFO = "Stage/cluster_host_info";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,122,PROPERTY_IDS.add(STAGE_CLUSTER_HOST_INFO);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,305,if (isPropertyRequested(STAGE_CLUSTER_HOST_INFO, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,306,resource.setProperty(STAGE_CLUSTER_HOST_INFO, entity.getClusterHostInfo());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,387,if (isPropertyRequested(STAGE_CLUSTER_HOST_INFO, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,388,resource.setProperty(STAGE_CLUSTER_HOST_INFO, entity.getClusterHostInfo());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1404,cluster.getClusterName(), cluster.getClusterId(), entity.getText(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1405,jsons.getClusterHostInfo(), jsons.getCommandParamsForStage(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1501,cluster.getClusterName(), cluster.getClusterId(), entity.getText(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1502,jsons.getClusterHostInfo(), jsons.getCommandParamsForStage(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1562,cluster.getClusterName(), cluster.getClusterId(), entity.getText(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1563,jsons.getClusterHostInfo(), jsons.getCommandParamsForStage(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1699,cluster.getClusterName(), cluster.getClusterId(), stageText, jsons.getClusterHostInfo(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1700,jsons.getCommandParamsForStage(), jsons.getHostParamsForStage());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,85,private byte[] clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,148,public String getClusterHostInfo() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,149,return clusterHostInfo == null ? new String() : new String(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,152,public void setClusterHostInfo(String clusterHostInfo) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,153,this.clusterHostInfo = clusterHostInfo.getBytes();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity_.java,43,public static volatile SingularAttribute<StageEntity, byte[]> clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity_.java,76,mapping.put(StageResourceProvider.STAGE_CLUSTER_HOST_INFO,
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity_.java,77,Collections.singletonList(clusterHostInfo));
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,164,origStage.getRequestContext(), origStage.getClusterHostInfo(),
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,197,public static Stage getATestStage(long requestId, long stageId, String clusterHostInfo, String commandParamsStage, String hostParamsStage) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,204,return getATestStage(requestId, stageId, hostname, clusterHostInfo, commandParamsStage, hostParamsStage);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,209,public static Stage getATestStage(long requestId, long stageId, String hostname, String clusterHostInfo, String commandParamsStage, String hostParamsStage) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,210,Stage s = stageFactory.createNew(requestId, "/tmp", "cluster1", 1L, "context", clusterHostInfo, commandParamsStage, hostParamsStage);
contrib/views/storm/src/main/java/org/apache/ambari/storm/ProxyServlet.java,53,String urlToRead = URLDecoder.decode(request.getParameter("url"));
contrib/views/storm/src/main/java/org/apache/ambari/storm/ProxyServlet.java,62,String urlToRead = URLDecoder.decode(request.getParameter("url"));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,495,viewDirectoryWatcher.start();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1647,private void readViewArchive(ViewEntity viewDefinition,
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,240,return namenodeIDs != null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,188,ScheduledFuture<?> handle = scheduler.scheduleWithFixedDelay(statusCollector,
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,189,0, 10, TimeUnit.SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,357,handle.cancel(true);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,135,throw new IllegalArgumentException("Invalid renderer name: " + name +
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,176,BlueprintConfigurations blueprintConfig = filterBlueprintConfig(configType, configEntry.getValue(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,178,topology.getAdvisedConfigurations().put(configType, new AdvisedConfiguration(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,335,setMissingConfigurations(clusterConfig, configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2705,void setMissingConfigurations(Configuration configuration, Set<String> configTypesUpdated) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2709,setRetryConfiguration(configuration, configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2714,if (services.contains("OOZIE")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2715,userProps.put("oozie_user", "oozie-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2718,if (services.contains("HIVE")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2719,userProps.put("hive_user", "hive-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2720,userProps.put("hcat_user", "hive-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2723,if (services.contains("HBASE")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2724,userProps.put("hbase_user", "hbase-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2727,if (services.contains("FALCON")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2728,userProps.put("falcon_user", "falcon-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2731,String proxyUserHosts  = "hadoop.proxyuser.%s.hosts";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2732,String proxyUserGroups = "hadoop.proxyuser.%s.groups";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2734,Map<String, Map<String, String>> existingProperties = configuration.getFullProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2735,for (String property : userProps.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2736,String configType = userProps.get(property);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2737,Map<String, String> configs = existingProperties.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2738,if (configs != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2739,String user = configs.get(property);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2740,if (user != null && !user.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2741,ensureProperty(configuration, "core-site", String.format(proxyUserHosts, user), "*", configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2742,ensureProperty(configuration, "core-site", String.format(proxyUserGroups, user), "*", configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2745,LOG.debug("setMissingConfigurations: no user configuration found for type = " + configType +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2751,addExcludedConfigProperties(configuration, configTypesUpdated, services, clusterTopology.getBlueprint().getStack());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2765,private void addExcludedConfigProperties(Configuration configuration, Set<String> configTypesUpdated, Collection<String> blueprintServices, Stack stack) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,106,private void removeOrphanConfigTypes(Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,107,Blueprint blueprint = clusterTopology.getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,109,Collection<String> configTypes = configuration.getAllConfigTypes();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,110,for (String configType : configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,111,if (!"cluster-env".equals(configType) && !"global".equals(configType)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,112,String service = blueprint.getStack().getServiceForConfigType(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,113,if (!blueprint.getServices().contains(service)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,114,configuration.removeConfigType(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,115,LOG.info("Removing config type '{}' as service '{}' is not present in either Blueprint or cluster creation template.", configType, service);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,121,public ClusterConfigurationRequest(AmbariContext ambariContext, ClusterTopology topology, boolean setInitial, StackAdvisorBlueprintProcessor stackAdvisorBlueprintProcessor, boolean configureSecurity) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,122,this(ambariContext, topology, setInitial, stackAdvisorBlueprintProcessor);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,123,this.configureSecurity = configureSecurity;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,28,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,31,final public void onReceive(Object message) throws Exception {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,32,HiveMessage hiveMessage = new HiveMessage(message);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,33,if(LOG.isDebugEnabled()){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,34,LOG.debug("Received message: " + message.getClass().getName() + ", generated id: " + hiveMessage.getId() +
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,38,handleMessage(hiveMessage);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,40,if(LOG.isDebugEnabled()){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,41,LOG.debug("Message submitted: " + hiveMessage.getId());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,46,public abstract void handleMessage(HiveMessage hiveMessage);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,79,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,493,if (!isAsync()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,495,stopTerminateInactivityScheduler();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,496,return;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/OperationController.java,66,private final Logger LOG = LoggerFactory.getLogger(getClass());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,339,List<StageEntity> stageEntities = new ArrayList<StageEntity>(request.getStages().size());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,361,assert hostRoleCommandEntity.getTaskId() != null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,476,Map<Long, CommandReport> taskReports = new HashMap<Long, CommandReport>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,483,List<Long> requestsToCheck = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,484,List<Long> abortedCommandUpdates = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,688,List<HostRoleCommand> commands = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,693,List<Long> absent = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,782,List<Request> requests = new ArrayList<Request>(requestEntities.size());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,658,entityManager.remove(merge(entity));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,121,return updateDesiredStack(clusterName, originalStackId, targetStackId, version, direction, upgradePack, userName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,136,String clusterName, StackId originalStackId, StackId targetStackId,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,143,Cluster cluster = clusters.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1256,String effectiveVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1257,switch (upgradeEntity.getUpgradeType()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1258,case NON_ROLLING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1259,if (upgradeEntity.getDirection() == Direction.UPGRADE) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1260,boolean pastChangingStack = isNonRollingUpgradePastUpgradingStack(upgradeEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1261,effectiveVersion = pastChangingStack ? upgradeEntity.getToVersion() : upgradeEntity.getFromVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1266,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1267,case ROLLING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1268,default:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1270,effectiveVersion = upgradeEntity.getToVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1271,break;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,101,public void setUserName(String userName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,102,this.userName = userName;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,304,userEntity.setUserName(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,650,userEntity.setUserName(userName);
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,36,private String securityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,83,public String getSecurityState() {
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,84,return securityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,93,public void setSecurityState(String securityState) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,94,this.securityState = securityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,161,+ ", status=" + status + ", securityState=" + securityState
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,61,import org.apache.ambari.server.state.SecurityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,621,SecurityState prevSecurityState = scHost.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,622,SecurityState currentSecurityState = SecurityState.valueOf(status.getSecurityState());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,623,if((prevSecurityState != currentSecurityState)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,624,if(prevSecurityState.isEndpoint()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,625,scHost.setSecurityState(currentSecurityState);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,626,LOG.info(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,628,componentName, status.getServiceName(), status.getClusterName(), prevSecurityState,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,629,currentSecurityState, hostname));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,631,else {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,632,LOG.debug(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,635,componentName, status.getServiceName(), status.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,636,prevSecurityState, currentSecurityState, hostname, prevSecurityState));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,150,protected AbstractUpgradeCatalog() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog212.java,89,protected UpgradeCatalog212() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,173,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,39,import org.apache.ambari.server.topology.TopologyValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,117,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,118,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,39,import org.apache.ambari.server.topology.TopologyValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,241,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,33,import org.apache.ambari.server.topology.TopologyValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,93,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,94,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,26,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,51,private Map<String, AdvisedConfiguration> advisedConfigurations = new HashMap<String, AdvisedConfiguration>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,52,private final Map<String, HostGroupInfo> hostGroupInfoMap = new HashMap<String, HostGroupInfo>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,68,validateTopology(topologyRequest.getTopologyValidators());
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,69,this.ambariContext = ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,73,public ClusterTopologyImpl(AmbariContext ambariContext,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,74,Long clusterId,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,75,Blueprint blueprint,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,76,Configuration configuration,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,78,throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,80,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,81,this.blueprint = blueprint;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,82,this.configuration = configuration;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,84,registerHostGroupInfo(hostGroupInfo);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,121,Collection<String> resultGroups = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,173,Collection<String> hosts = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,214,throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,216,for (TopologyValidator validator : validators) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,217,validator.validate(this);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,353,Set<String> hosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,354,Set<String> duplicates = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,358,Collection<String> groupHostsCopy = new HashSet<String>(group.getHostNames());
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,21,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,22,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,27,import org.apache.ambari.server.controller.internal.ProvisionClusterRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,48,import javax.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,49,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,50,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,51,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,52,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,53,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,54,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,173,Map<ClusterTopology, List<LogicalRequest>> allRequests = new HashMap<ClusterTopology, List<LogicalRequest>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,176,Map<Long, ClusterTopology> topologyRequests = new HashMap<Long, ClusterTopology>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,240,Collection<TopologyHostGroupEntity> hostGroupEntities = new ArrayList<TopologyHostGroupEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,258,Collection<TopologyHostRequestEntity> hostRequests = new ArrayList<TopologyHostRequestEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,277,Collection<TopologyHostTaskEntity> hostRequestTaskEntities = new ArrayList<TopologyHostTaskEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,286,Collection<TopologyLogicalTaskEntity> logicalTaskEntities = new ArrayList<TopologyLogicalTaskEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,314,Collection<TopologyHostInfoEntity> hostInfoEntities = new ArrayList<TopologyHostInfoEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,357,private final Map<String, HostGroupInfo> hostGroupInfoMap = new HashMap<String, HostGroupInfo>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,401,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,402,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,224,boolean configureSecurity = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,227,configureSecurity = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,231,topology.getBlueprint().getConfiguration().setParentConfiguration(stack.getConfiguration(topology.getBlueprint
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,232,().getServices()));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,236,ambariContext.createAmbariResources(topology, clusterName, SecurityType.KERBEROS, repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,237,if (securityConfiguration.getDescriptor() != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,238,submitKerberosDescriptorAsArtifact(clusterName, securityConfiguration.getDescriptor());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,241,Credential credential = request.getCredentialsMap().get(KDC_ADMIN_CREDENTIAL);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,247,ambariContext.createAmbariResources(topology, clusterName, null, repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,267,addClusterConfigRequest(topology, new ClusterConfigurationRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,268,ambariContext, topology, true, stackAdvisorBlueprintProcessor, configureSecurity));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,31,public enum Type { PROVISION, SCALE, EXPORT }
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,38,public Long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,45,public Type getType();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,56,public Blueprint getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,63,public Configuration getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,70,public Map<String, HostGroupInfo> getHostGroupInfo();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,77,public List<TopologyValidator> getTopologyValidators();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,84,public String getDescription();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,43,import org.apache.ambari.server.topology.Blueprint;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,46,import org.apache.ambari.server.topology.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,74,public void adviseConfiguration(ClusterTopology clusterTopology, Map<String, Map<String, String>> existingConfigurations) throws ConfigurationTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,78,addAdvisedConfigurationsToTopology(response, clusterTopology, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,91,hgHostsMap);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,163,ClusterTopology topology, Map<String, Map<String, String>> existingConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,177,userProvidedProperties, topology);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,186,private Map<String, Map<String, String>> getUserProvidedProperties(ClusterTopology topology, Map<String, Map<String, String>> existingConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,187,Map<String, Map<String, String>> userProvidedProperties = Maps.newHashMap();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,188,Blueprint blueprint = topology.getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,189,Configuration stackDefaults = blueprint.getStack().getConfiguration(blueprint.getServices());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,190,Map<String, Map<String, String>> stackDefaultProps = stackDefaults.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,192,for (Map.Entry<String, Map<String, String>> configGroup : existingConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,193,String configType = configGroup.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,194,Map<String, String> configsToAdd = Maps.newHashMap();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,195,for (Map.Entry<String, String> configProp : configGroup.getValue().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,196,if (stackDefaultProps.containsKey(configType) && stackDefaultProps.get(configType).containsKey(configProp.getKey())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,197,String originalValue = stackDefaultProps.get(configType).get(configProp.getKey());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,198,if (originalValue != null && !originalValue.equals(configProp.getValue())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,199,configsToAdd.put(configProp.getKey(), configProp.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,202,configsToAdd.put(configProp.getKey(), configProp.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,205,if (!configsToAdd.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,206,userProvidedProperties.put(configGroup.getKey(), configsToAdd);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,210,return userProvidedProperties;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,218,Map<String, Map<String, String>> userProvidedProperties,
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,223,if (userProvidedProperties.containsKey(configType)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,226,Predicates.not(Predicates.in(userProvidedProperties.get(configType).keySet())));
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,231,Predicates.not(Predicates.in(userProvidedProperties.get(configType).keySet())));
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,140,Configuration clusterConfiguration = clusterTopology.getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,141,Map<String, Map<String, String>> existingConfigurations = clusterConfiguration.getFullProperties();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,150,stackAdvisorBlueprintProcessor.adviseConfiguration(this.clusterTopology, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,410,String commandTimeout = configs.getDefaultAgentTaskTimeout(isInstallCommand);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,424,commandTimeout = String.valueOf(script.getTimeout());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,435,commandParams.put(COMMAND_TIMEOUT, commandTimeout);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1396,actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1490,actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1550,actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,211,TaskWrapper expandedTW = new TaskWrapper(tw.getService(), tw.getComponent(), hostSubset, tw.getParams(), tw.getTasks());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapper.java,43,public TaskWrapper(String s, String c, Set<String> hosts, Task... tasks) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapper.java,44,this(s, c, hosts, null, Arrays.asList(tasks));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,412,ComponentInfo componentInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,413,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,414,serviceName, componentName);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,43,import org.apache.ambari.server.agent.AgentCommand.AgentCommandType;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,344,LOG.debug("Processing {} in progress stages ", stages.size());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,347,if (stages.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,359,HashSet<String> hostsWithTasks = getListOfHostsWithPendingTask(stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,360,actionQueue.updateListOfHostsWithPendingTask(hostsWithTasks);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,362,stages = filterParallelPerHostStages(stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,529,private HashSet<String> getListOfHostsWithPendingTask(List<Stage> stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,530,HashSet<String> hostsWithTasks = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,531,for (Stage s : stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,532,hostsWithTasks.addAll(s.getHosts());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,534,return hostsWithTasks;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,562,private List<Stage> filterParallelPerHostStages(List<Stage> stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,563,List<Stage> retVal = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,564,Set<String> affectedHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,565,Set<Long> affectedRequests = new HashSet<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,567,for (Stage s : stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,568,long requestId = s.getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,571,LOG.trace("==> Processing stage: {}/{} ({}) for {}", requestId, s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,579,for (String host : s.getHosts()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,582,if (affectedHosts.contains(host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,584,LOG.trace("===>  Skipping stage since it utilizes at least one host that a previous stage requires: {}/{} ({})", s.getRequestId(), s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,587,addStage &= false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,589,if (!Stage.INTERNAL_HOSTNAME.equalsIgnoreCase(host) && !isStageHasBackgroundCommandsOnly(s, host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,590,LOG.trace("====>  Adding host to affected hosts: {}", host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,591,affectedHosts.add(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,594,addStage &= true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,602,if (affectedRequests.contains(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,603,if (LOG.isTraceEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,604,LOG.trace("===>  Skipping stage since the request it is in has been processed already: {}/{} ({})", s.getRequestId(), s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,607,addStage = false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,609,if (LOG.isTraceEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,610,LOG.trace("====>  Adding request to affected requests: {}", requestId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,613,affectedRequests.add(requestId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,614,addStage &= true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,622,LOG.trace("===>  Adding stage to return value: {}/{} ({})", s.getRequestId(), s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,625,retVal.add(s);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,632,private boolean isStageHasBackgroundCommandsOnly(Stage s, String host) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,633,for (ExecutionCommandWrapper c : s.getExecutionCommands(host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,634,if (c.getCommandType() != AgentCommandType.BACKGROUND_EXECUTION_COMMAND) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,635,return false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,638,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,219,results.add(toResource(cache, entity, propertyIds));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,276,private Resource toResource(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,56,import org.apache.ambari.server.state.UpgradeHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,91,private static UpgradeHelper s_upgradeHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,237,Map<Long, Resource> resultMap = new HashMap<Long, Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,240,Resource r = toResource(entity, requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,241,resultMap.put(entity.getStageId(), r);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,244,if (!resultMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,245,if (null != clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,246,Set<Resource> stages = s_upgradeHelper.getStageResources(clusterName,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,247,requestId, new ArrayList<Long>(resultMap.keySet()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,249,for (Resource stage : stages) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,250,Long l = (Long) stage.getPropertyValue(StageResourceProvider.STAGE_STAGE_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,252,Resource r = resultMap.get(l);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,253,if (null != r) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,254,for (String propertyId : StageResourceProvider.PROPERTY_IDS) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,256,Object value = stage.getPropertyValue(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,257,if (StageResourceProvider.PROPERTIES_TO_MASK_PASSWORD_IN.contains(propertyId) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,258,value.getClass().equals(String.class) && !StringUtils.isBlank((String) value)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,259,value = SecretReference.maskPasswordInPropertyMap((String) value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,261,setResourceProperty(r, STAGE_MAPPED_IDS.get(propertyId), value, requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,266,results.addAll(resultMap.values());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,39,private Long stageId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,52,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,53,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,54,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,56,StageEntityPK that = (StageEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,58,if (requestId != null ? !requestId.equals(that.requestId) : that.requestId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,59,if (stageId != null ? !stageId.equals(that.stageId) : that.stageId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,61,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,66,int result = requestId != null ? requestId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,67,result = 31 * result + (stageId != null ? stageId.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,68,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,33,import org.apache.ambari.server.controller.internal.StageResourceProvider;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,675,throws UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException, SystemException {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,676,ClusterController clusterController = ClusterControllerHelper.getClusterController();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,678,Request request = PropertyHelper.getReadRequest();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,681,Predicate p1 = new PredicateBuilder().property(StageResourceProvider.STAGE_CLUSTER_NAME).equals(clusterName).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,682,Predicate p2 = new PredicateBuilder().property(StageResourceProvider.STAGE_REQUEST_ID).equals(requestId).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,683,Predicate p3 = null;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,685,if (1 == stageIds.size()) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,686,p3 = new PredicateBuilder().property(StageResourceProvider.STAGE_STAGE_ID).equals(stageIds.get(0)).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,688,PredicateBuilder pb = new PredicateBuilder();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,690,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,691,for (Long stageId : stageIds) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,692,if (i++ < stageIds.size()-1) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,693,pb = pb.property(StageResourceProvider.STAGE_STAGE_ID).equals(stageId).or();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,695,pb.property(StageResourceProvider.STAGE_STAGE_ID).equals(stageId);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,699,p3 = pb.toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,702,QueryResponse response = clusterController.getResources(Resource.Type.Stage,
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,703,request, new AndPredicate(p1, p2, p3));
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,705,return response.getResources();
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,69,return collectorUri;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,291,String attributeName, Double attributeValue) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,326,cluster = getManagementController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,397,cluster = getManagementController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,460,cluster = getManagementController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,479,long clusterId = cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,520,setUpgradeRequestStatus(clusterId, requestId, status, propertyMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,523,upgradeEntity.setSuspended(suspended);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,524,s_upgradeDAO.merge(upgradeEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1026,upgradeEntity.setRequestId(request.getId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1763,private void setUpgradeRequestStatus(long clusterId, long requestId, HostRoleStatus status,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1764,Map<String, Object> propertyMap) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1792,if (HostRoleStatus.ABORTED == status) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1793,if (!internalStatus.isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1794,actionManager.cancelRequest(requestId, reason);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1796,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1797,Cluster cluster = clusters.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1802,cluster.setUpgradeEntity(null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1804,LOG.warn("Could not clear upgrade entity for cluster with id {}", clusterId, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1819,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1820,Cluster cluster = clusters.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1821,UpgradeEntity lastUpgradeItemForCluster = s_upgradeDAO.findLastUpgradeOrDowngradeForCluster(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1822,lastUpgradeItemForCluster.setSuspended(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1823,s_upgradeDAO.merge(lastUpgradeItemForCluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1825,cluster.setUpgradeEntity(lastUpgradeItemForCluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1827,LOG.warn("Could not clear upgrade entity for cluster with id {}", clusterId, e);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertStateChangedListener.java,230,if (null != cluster.getUpgradeEntity() || cluster.isUpgradeSuspended()) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,197,if (cluster.getUpgradeEntity() != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UpgradeDAO.java,112,entityManager.flush();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,46,table = "ambari_sequences", pkColumnName = "sequence_name", valueColumnName = "sequence_value",
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,164,public void setRequestId(Long id) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,165,requestId = id;
ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java,687,UpgradeEntity getUpgradeEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java,716,UpgradeEntity getUpgradeInProgress();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1215,public UpgradeEntity getUpgradeInProgress() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1217,UpgradeEntity upgradeInProgress = getUpgradeEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1218,if (null != upgradeInProgress) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1219,return upgradeInProgress;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1224,UpgradeEntity mostRecentUpgrade = upgradeDAO.findLastUpgradeOrDowngradeForCluster(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1225,if (mostRecentUpgrade != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1226,if (mostRecentUpgrade.isSuspended()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1227,return mostRecentUpgrade;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1234,List<HostRoleCommandEntity> commands = hostRoleCommandDAO.findByRequestIdAndStatuses(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1237,if (!commands.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1238,return mostRecentUpgrade;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1242,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3663,public UpgradeEntity getUpgradeEntity() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3691,String msg = "Unable to set upgrade entiry " + upgradeEntity + " for cluster "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3692,+ getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3693,LOG.warn(msg);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3694,throw new AmbariException(msg, e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3706,if (null != lastUpgradeItemForCluster) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3707,return lastUpgradeItemForCluster.isSuspended();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,175,UpgradeEntity currentUpgrade = cluster.getUpgradeEntity();
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/services/HelpService.java,24,import org.apache.ambari.view.pig.persistence.InstanceKeyValueStorage;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/services/HelpService.java,27,import org.apache.commons.lang.exception.ExceptionUtils;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,163,public List<StageWrapper> build(UpgradeContext upgradeContext,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,164,List<StageWrapper> stageWrappers) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,165,List<StageWrapper> results = new ArrayList<StageWrapper>(stageWrappers);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,172,List<StageWrapper> befores = fromProxies(upgradeContext.getDirection(), initialBatch);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,192,results.addAll(fromProxies(upgradeContext.getDirection(), finalBatches));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,198,Map<String, List<TaskProxy>> wrappers) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,199,List<StageWrapper> results = new ArrayList<StageWrapper>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,216,wrapper = new StageWrapper(t.type, t.message, t.getTasksArray());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,219,execwrappers.add(new StageWrapper(StageWrapper.Type.RESTART, t.message, t.getTasksArray()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,348,private TaskWrapper[] getTasksArray() {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,349,return tasks.toArray(new TaskWrapper[0]);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,57,if (t.getType().equals(Task.Type.CONFIGURE) || t.getType().equals(Task.Type.MANUAL)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,59,if (null != hostsType.hosts && !hostsType.hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,60,collection.add(new TaskWrapper(service, component, Collections.singleton(ambariServerHostname), params, t));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,86,public List<Stage> getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,273,public List<Stage> getStagesInProgress() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,274,List<StageEntity> stageEntities = stageDAO.findByCommandStatuses(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,341,List<Stage> stages = db.getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,24,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,63,private static Map<HostRoleStatus, EnumSet<HostRoleStatus>> manualTransitionMap = new HashMap<HostRoleStatus, EnumSet<HostRoleStatus>>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,138,public List<Long> findIdsByRequestId(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,139,TypedQuery<Long> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,155,public List<StageEntity> findByStageIds(Long requestId, Set<Long> stageIds) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,156,List<StageEntity> stageEntities = new LinkedList<StageEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,158,for (StageEntity stage : findByRequestId(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,159,if (stageIds.contains(stage.getStageId())) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,160,stageEntities.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,163,return stageEntities;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,167,public List<StageEntity> findByCommandStatuses(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,168,Collection<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,169,TypedQuery<StageEntity> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,172,query.setParameter("statuses", statuses);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,173,return daoUtils.selectList(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,178,Map<Long, String> resultMap = new HashMap<Long, String>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,252,JpaSortBuilder<StageEntity> sortBuilder = new JpaSortBuilder<StageEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,44,name = "StageEntity.findByCommandStatuses",
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,47,name = "StageEntity.findIdsByRequestId",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,35,import org.apache.ambari.server.actionmanager.Request;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,39,import org.apache.ambari.server.controller.internal.CalculatedStatus;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,41,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,47,import org.springframework.security.core.context.SecurityContextHolder;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,84,new HashMap<Long, ConcurrentMap<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,91,private final String serverHostName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,137,serverHostName = StageUtils.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,236,map = new ConcurrentHashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,249,private void cleanRequestShareDataContexts() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,251,if (requestSharedDataMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,252,return;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,255,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,257,synchronized (requestSharedDataMap) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,258,Set<Long> requestIds = requestSharedDataMap.keySet();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,259,List<Request> requests = db.getRequests(requestIds);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,260,for (Request request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,263,CalculatedStatus calculatedStatus = CalculatedStatus.statusFromStages(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,264,request.getStages());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,267,HostRoleStatus status = calculatedStatus.getStatus();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,271,switch (status) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,272,case FAILED:
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,273,case COMPLETED:
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,274,requestSharedDataMap.remove(request.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,275,break;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,276,default:
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,277,break;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,282,LOG.warn("Unable to clear the server-side action request cache", exception);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,454,cleanRequestShareDataContexts();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,21,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,236,list.add(identityToAdd);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosIdentityDescriptor.java,23,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,171,Map<String, Map<String, String>> userProvidedProperties = getUserProvidedProperties(topology, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,179,blueprintConfig.getProperties(), blueprintConfig.getPropertyAttributes()));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,171,startTime = hostRoleCommandEntity.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,172,originalStartTime = hostRoleCommandEntity.getOriginalStartTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,174,lastAttemptTime = hostRoleCommandEntity.getLastAttemptTime();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,202,hrc.getTaskId(), hrc.getOriginalStartTime(), now);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,210,if (canRetryCommand(hrc) && hrc.getOriginalStartTime() > 0 && hrc.getOriginalStartTime() < now) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,211,Long retryTimeWindow = hrc.getOriginalStartTime() + MAX_TIMEOUT_MS;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,212,Long deltaMS = retryTimeWindow - now;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,214,if (deltaMS > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,217,LOG.info("Retrying task with id: {}, attempts: {}, original start time: {}, time til timeout: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,218,hrc.getTaskId(), hrc.getAttemptCount(), originalStartTimeString, deltaString);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,154,waitForConfig();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,219,private void waitForConfig() throws SolrServerException, IOException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,220,if (!LogFeederUtil.getBooleanProperty("logfeeder.log.filter.enable", false)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,221,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,224,while (true) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,225,LOG.info("Checking if config is available");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,227,LOG.info("Config is available");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,228,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,230,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,231,Thread.sleep(RETRY_INTERVAL * 1000);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,233,LOG.error(e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,21,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,37,import org.apache.ambari.server.topology.RequiredPasswordValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,165,(Collection<Map<String, String>>) properties.get(CONFIGURATIONS_PROPERTY));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,242,return Collections.<TopologyValidator>singletonList(new RequiredPasswordValidator(defaultPassword));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,277,(Collection<Map<String, Object>>) properties.get(HOSTGROUPS_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,307,hostGroupProperties.get(HOSTGROUP_HOSTS_PROPERTY), hostGroupInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,311,(Collection<Map<String, String>>) hostGroupProperties.get(CONFIGURATIONS_PROPERTY)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,323,throws InvalidTopologyTemplateException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,327,hostGroupProperties.get(HOSTGROUP_HOST_COUNT_PROPERTY))));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,329,hostGroupInfo.getRequestedHostCount(), hostGroupInfo.getHostGroupName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,336,hostGroupInfo.getHostGroupName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,346,String.format("Unable to compile host predicate '%s': %s", hostPredicate, e), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,361,throws InvalidTopologyTemplateException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,381,hostProperties.get(HOSTGROUP_HOST_FQDN_PROPERTY),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,382,hostProperties.get(HOSTGROUP_HOST_RACK_INFO_PROPERTY));
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,20,package org.apache.ambari.server.topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,22,import org.apache.ambari.server.controller.internal.Stack;
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,23,import org.apache.ambari.server.state.PropertyInfo;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,165,if (!id.equals(that.id)) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,166,if (permission != null ? !permission.equals(that.permission) : that.permission != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,167,if (principal != null ? !principal.equals(that.principal) : that.principal != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,168,if (resource != null ? !resource.equals(that.resource) : that.resource != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,170,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,175,int result = id != null ? id.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,176,result = 31 * result + (permission != null ? permission.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,177,result = 31 * result + (resource != null ? resource.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,178,result = 31 * result + (principal != null ? principal.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PrivilegeEntity.java,179,return result;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,21,import javax.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,22,import javax.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,23,import javax.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,24,import javax.xml.bind.JAXBException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActiveWidgetLayoutResourceProvider.java,161,Set<Map<String, String>> activeWidgetLayouts = gson.fromJson(userDAO.findUserByName(userName).getActiveWidgetLayouts(), type);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,105,UserEntity userEntity = userDAO.findUserByNameAndType(userName, UserType.LOCAL);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,106,if (userEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,107,userEntity = userDAO.findUserByNameAndType(userName, UserType.LDAP);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,109,if (userEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,110,userEntity = userDAO.findUserByNameAndType(userName, UserType.JWT);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,36,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,37,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,38,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,39,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,40,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,297,Map<String, Map<String, String>> propertiesToInsert,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,490,Map<String, Map<String, String>> propertiesToInsert,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,581,addRecommendedPropertiesForConfigType(kerberosEnabled, kerberosConfigurations, configType,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,582,recommendedConfigProperties,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,583,existingConfigProperties, kerberosConfigProperties, ignoreProperties, propertiesToInsert);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,585,removeRecommendedPropertiesForConfigType(kerberosEnabled, configType,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,586,recommendedConfigPropertyAttributes,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,587,existingConfigProperties,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,588,kerberosConfigurations, ignoreProperties, propertiesToRemove);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,605,private void addRecommendedPropertiesForConfigType(boolean kerberosEnabled, Map<String, Map<String, String>> kerberosConfigurations,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,609,Set<String> ignoreProperties,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,610,Map<String, Map<String, String>> propertiesToInsert) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,617,if (kerberosEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,618,if (kerberosConfigProperties == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,621,if ((existingConfigProperties == null) || !existingConfigProperties.containsKey(propertyName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,622,LOG.debug("Adding Kerberos configuration based on StackAdvisor recommendation:" +
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,624,configType, propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,626,HashMap<String, String> properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,627,properties.put(propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,628,kerberosConfigurations.put(configType, properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,631,String value = kerberosConfigProperties.get(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,632,if (value == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,635,if ((existingConfigProperties == null) || !existingConfigProperties.containsKey(propertyName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,636,LOG.debug("Adding Kerberos configuration based on StackAdvisor recommendation:" +
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,638,configType, propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,640,kerberosConfigProperties.put(propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,644,LOG.debug("Updating Kerberos configuration based on StackAdvisor recommendation:" +
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,646,configType, propertyName, value, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,648,kerberosConfigProperties.put(propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,652,.containsKey(propertyName))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,653,Map<String, String> properties = propertiesToInsert.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,654,if (properties == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,655,properties = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,656,propertiesToInsert.put(configType, properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,659,LOG.debug("Property to add to configuration based on StackAdvisor recommendation:" +
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,661,configType, propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,663,properties.put(propertyName, recommendedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,676,private void removeRecommendedPropertiesForConfigType(boolean kerberosEnabled, String configType,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,680,Set<String> ignoreProperties, Map<String, Set<String>>
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,681,propertiesToRemove) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,698,if (kerberosEnabled && propertiesToRemove != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,21,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,22,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,36,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,37,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,38,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,39,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,40,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,41,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,42,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,43,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,44,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,45,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,64,protected void processServiceComponentHosts(Cluster cluster, KerberosDescriptor kerberosDescriptor, List<ServiceComponentHost> schToProcess,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,65,Collection<String> identityFilter, String dataDirectory,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,66,Map<String, Map<String, String>> kerberosConfigurations,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,67,Map<String, Map<String, String>> propertiesToInsert,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,68,Map<String, Set<String>> propertiesToRemove,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,69,boolean kerberosEnabled, boolean includeAmbariIdentity) throws
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,70,AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,75,if(dataDirectory == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,84,Map<String, String> kerberosDescriptorProperties = kerberosDescriptor.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,89,Map<String, Map<String, String>> configurations = kerberosHelper.calculateConfigurations(cluster, null, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,93,filterContext.put("configurations", configurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,108,Set<String> services = cluster.getServices().keySet();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,111,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,116,for (ServiceComponentHost sch : schToProcess) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,117,String hostName = sch.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,119,String serviceName = sch.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,120,String componentName = sch.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,122,KerberosServiceDescriptor serviceDescriptor = kerberosDescriptor.getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,124,if (serviceDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,125,List<KerberosIdentityDescriptor> serviceIdentities = serviceDescriptor.getIdentities(true, filterContext);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,128,kerberosHelper.addIdentities(kerberosIdentityDataFileWriter, serviceIdentities,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,129,identityFilter, hostName, serviceName, componentName, kerberosConfigurations, configurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,130,propertiesToIgnore = gatherPropertiesToIgnore(serviceIdentities, propertiesToIgnore);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,132,KerberosComponentDescriptor componentDescriptor = serviceDescriptor.getComponent(componentName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,134,if (componentDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,135,List<KerberosIdentityDescriptor> componentIdentities = componentDescriptor.getIdentities(true, filterContext);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,139,kerberosHelper.mergeConfigurations(kerberosConfigurations,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,140,componentDescriptor.getConfigurations(true), configurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,143,kerberosHelper.addIdentities(kerberosIdentityDataFileWriter, componentIdentities,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,144,identityFilter, hostName, serviceName, componentName, kerberosConfigurations, configurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,145,propertiesToIgnore = gatherPropertiesToIgnore(componentIdentities, propertiesToIgnore);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,165,String message = String.format("Failed to write index file - %s", identityDataFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,166,LOG.error(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,167,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,168,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,169,throw new AmbariException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,172,kerberosHelper.applyStackAdvisorUpdates(cluster, services, configurations, kerberosConfigurations,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,173,propertiesToIgnore, propertiesToInsert, propertiesToRemove, kerberosEnabled);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,175,finally {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,198,else {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,210,else {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,222,else {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,229,Map<String,Map<String,String>> identityConfigurations = kerberosHelper.getIdentityConfigurations(identities);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,231,if(propertiesToIgnore == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,36,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,37,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,38,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,39,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,40,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,41,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,42,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,43,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,44,import java.util.concurrent.ConcurrentMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,45,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,58,private KerberosHelper kerberosHelper;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,64,private KerberosConfigDataFileWriterFactory kerberosConfigDataFileWriterFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,99,return (sch.getDesiredSecurityState() == SecurityState.UNSECURED) &&  (sch.getSecurityState() != SecurityState.UNSECURED);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,116,Map<String, Map<String, String>> propertiesToInsert = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,118,kerberosConfigurations, propertiesToInsert, null, false, true);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,122,if(authToLocalProperties != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,155,if(dataDirectory == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,161,Map<String, Collection<String>> configurationsToRemove = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,162,File configFile = new File(dataDirectory, KerberosConfigDataFileWriter.DATA_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,163,KerberosConfigDataFileWriter kerberosConfDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,177,for (Map.Entry<String, Map<String, String>> typeEntry : propertiesToInsert.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,178,String configType = typeEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,179,Map<String, String> propertiesMap = typeEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,181,Map<String, String> kerberosPropertiesMap = kerberosConfigurations.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,182,if (kerberosPropertiesMap == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,183,kerberosConfigurations.put(configType, propertiesMap);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,185,for (Map.Entry<String, String> propertyEntry : propertiesMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,186,kerberosPropertiesMap.put(propertyEntry.getKey(), propertyEntry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,231,actionLog.writeStdOut(String.format("Writing configuration changes metadata file to %s", configFile.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,232,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,233,kerberosConfDataFileWriter = kerberosConfigDataFileWriterFactory.createKerberosConfigDataFileWriter(configFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,235,for (Map.Entry<String, Map<String, String>> entry : kerberosConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,236,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,237,Map<String, String> properties = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,238,Collection<String> propertiesToRemove = configurationsToRemove.get(type);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,240,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,241,for (Map.Entry<String, String> configTypeEntry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,242,String propertyName = configTypeEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,245,if ((propertiesToRemove == null) || !propertiesToRemove.contains(propertyName)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,246,String value = configTypeEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,248,? KerberosConfigDataFileWriter.OPERATION_TYPE_REMOVE
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,249,: KerberosConfigDataFileWriter.OPERATION_TYPE_SET;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,251,kerberosConfDataFileWriter.addRecord(type, propertyName, value, operation);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,258,for (Map.Entry<String, Collection<String>> entry : configurationsToRemove.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,259,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,260,Collection<String> properties = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,262,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,263,for (String propertyName : properties) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,264,kerberosConfDataFileWriter.addRecord(type, propertyName, null, KerberosConfigDataFileWriter.OPERATION_TYPE_REMOVE);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,269,String message = String.format("Failed to write kerberos configurations file - %s", configFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,270,LOG.error(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,271,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,272,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,273,throw new AmbariException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,275,if (kerberosConfDataFileWriter != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,276,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,277,kerberosConfDataFileWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,279,String message = "Failed to close the kerberos configurations file writer";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,280,LOG.warn(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,281,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,282,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,29,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,30,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,31,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,32,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,33,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,34,import java.util.concurrent.ConcurrentMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,82,Map<String, Set<String>> propertiesToBeRemoved = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,84,kerberosConfigurations, null, propertiesToBeRemoved, true, true);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,95,processConfigurationChanges(dataDirectory, kerberosConfigurations, propertiesToBeRemoved);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,32,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,33,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,34,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,35,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,36,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,37,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,38,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,39,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,40,import java.util.concurrent.ConcurrentMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,53,private KerberosHelper kerberosHelper;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,56,private KerberosConfigDataFileWriterFactory kerberosConfigDataFileWriterFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,98,Map<String, Set<String>> propertiesToBeRemoved = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,100,kerberosConfigurations, null, propertiesToBeRemoved, true, "true".equalsIgnoreCase(getCommandParameterValue(commandParameters,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,101,KerberosServerAction.INCLUDE_AMBARI_IDENTITY)));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,105,processConfigurationChanges(dataDirectory, kerberosConfigurations, propertiesToBeRemoved);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,137,return kerberosHelper.getServiceComponentHostsToProcess(cluster,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,159,return kerberosHelper.getKerberosDescriptor(cluster);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,182,Map<String,Set<String>> services = new HashMap<String, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,183,for(ServiceComponentHost sch: schToProcess) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,185,if(components == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,210,protected void processConfigurationChanges(String dataDirectory,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,211,Map<String, Map<String, String>> kerberosConfigurations,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,213,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,214,actionLog.writeStdOut("Determining configuration changes");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,218,if (!kerberosConfigurations.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,219,if (dataDirectory == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,220,String message = "The data directory has not been set.  Generated data can not be stored.";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,221,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,222,throw new AmbariException(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,225,File configFile = new File(dataDirectory, KerberosConfigDataFileWriter.DATA_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,226,KerberosConfigDataFileWriter kerberosConfDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,228,actionLog.writeStdOut(String.format("Writing configuration changes metadata file to %s", configFile.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,229,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,230,kerberosConfDataFileWriter = kerberosConfigDataFileWriterFactory.createKerberosConfigDataFileWriter(configFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,232,for (Map.Entry<String, Map<String, String>> entry : kerberosConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,233,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,234,Map<String, String> properties = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,236,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,237,for (Map.Entry<String, String> configTypeEntry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,238,kerberosConfDataFileWriter.addRecord(type,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,239,configTypeEntry.getKey(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,240,configTypeEntry.getValue(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,241,KerberosConfigDataFileWriter.OPERATION_TYPE_SET);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,246,if (propertiesToBeRemoved != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,247,for (Map.Entry<String, Set<String>> entry : propertiesToBeRemoved.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,248,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,249,Set<String> properties = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,251,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,252,for (String property : properties) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,253,kerberosConfDataFileWriter.addRecord(type,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,254,property,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,256,KerberosConfigDataFileWriter.OPERATION_TYPE_REMOVE);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,262,String message = String.format("Failed to write kerberos configurations file - %s", configFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,263,LOG.error(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,264,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,265,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,266,throw new AmbariException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,268,if (kerberosConfDataFileWriter != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,269,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,270,kerberosConfDataFileWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,272,String message = "Failed to close the kerberos configurations file writer";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,273,LOG.warn(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,274,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,275,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,21,import java.io.FilenameFilter;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,39,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,40,import java.util.regex.Pattern;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,79,import org.apache.ambari.server.view.ViewArchiveUtility;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,80,import org.apache.ambari.server.view.configuration.ViewConfig;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,103,protected ViewArchiveUtility archiveUtility;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,900,updateTezHistoryUrlBase();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,909,private void updateTezHistoryUrlBase() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,910,AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,911,Clusters clusters = ambariManagementController.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,913,if (clusters != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,914,Map<String, Cluster> clusterMap = clusters.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,915,if (clusterMap != null && !clusterMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,916,for (final Cluster cluster : clusterMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,917,Set<String> installedServices = cluster.getServices().keySet();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,918,if (installedServices.contains("TEZ")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,919,Config tezSite = cluster.getDesiredConfigByType("tez-site");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,920,if (tezSite != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,921,String currentTezHistoryUrlBase = tezSite.getProperties().get("tez.tez-ui.history-url.base");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,922,if (!StringUtils.isEmpty(currentTezHistoryUrlBase)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,923,String newTezHistoryUrlBase = getUpdatedTezHistoryUrlBase(currentTezHistoryUrlBase);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,924,updateConfigurationProperties("tez-site", Collections.singletonMap("tez.tez-ui.history-url.base", newTezHistoryUrlBase), true, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,939,protected String getUpdatedTezHistoryUrlBase(String currentTezHistoryUrlBase) throws AmbariException{
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,941,Pattern regex = Pattern.compile(pattern);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,942,Matcher matcher = regex.matcher(currentTezHistoryUrlBase);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,943,String prefix;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,944,String suffix;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,945,String oldVersion;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,946,if (matcher.find()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,947,prefix = matcher.group(1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,948,oldVersion = matcher.group(2);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,949,suffix = matcher.group(3);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,951,throw new AmbariException("Cannot prepare the new value for property: 'tez.tez-ui.history-url.base' using the old value: '" + currentTezHistoryUrlBase + "'");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,954,String latestTezViewVersion = getLatestTezViewVersion(oldVersion);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,956,return prefix + latestTezViewVersion + suffix;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,965,protected String getLatestTezViewVersion(String oldVersion) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,966,File viewsDirectory = configuration.getViewsDir();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,967,File[] files = viewsDirectory.listFiles(new FilenameFilter() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,969,public boolean accept(File dir, String name) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,970,return name.startsWith("tez-view");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,974,if(files == null || files.length == 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,975,LOG.error("Could not file tez-view jar file in '{}'. Returning the old version", viewsDirectory.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,976,return oldVersion;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,978,File tezViewFile = files[0];
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,979,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,980,ViewConfig viewConfigFromArchive = archiveUtility.getViewConfigFromArchive(tezViewFile);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,981,return viewConfigFromArchive.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,983,LOG.error("Failed to read the tez view version from: {}. Returning the old version", tezViewFile);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,984,return oldVersion;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,148,protected boolean emitMetrics(TimelineMetrics metrics) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,79,private final boolean isClientOnlyService;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,277,List<String> columnsList = new ArrayList<String>(Arrays.asList(columnName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,368,List<String> pkColumns = new ArrayList<String>(referenceColumns.length);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,372,List<String> fkColumns = new ArrayList<String>(keyColumns.length);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,883,Configuration.DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,884,if (databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,885,query = dbmsHelper.getDropIndexStatement(constraintName, tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,890,LOG.warn("Constraint {} from {} table not found, nothing to drop", constraintName, tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,1111,List<String> indexList = new ArrayList<String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,22,import java.io.OutputStream;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,43,import javax.ws.rs.WebApplicationException;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AlertEventPublisher.java,20,import java.util.concurrent.LinkedBlockingQueue;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AlertEventPublisher.java,58,int poolsize = config.getAlertEventPublisherPoolSize();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AlertEventPublisher.java,59,ThreadPoolExecutor executor = new ThreadPoolExecutor(2, poolsize, 0L,
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AlertEventPublisher.java,60,TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(),
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AlertEventPublisher.java,61,new AlertEventBusThreadFactory(),
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AlertEventPublisher.java,62,new ThreadPoolExecutor.CallerRunsPolicy());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/LoadRunner.java,73,workers = prepareWorkers(hostName, threadCount, metricsHostName, createMaster);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/LoadRunner.java,79,Boolean createMaster) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/LoadRunner.java,83,int startIndex = 0;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/LoadRunner.java,85,String simHost = hostName + "0";
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/LoadRunner.java,90,for (int i = startIndex; i < threadCount; i++) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/LoadRunner.java,153,new LoadRunner("local", 2, "metrics", 10000, 20000, false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/data/AppID.java,32,public static final AppID[] MASTER_APPS = {HOST, NAMENODE, RESOURCEMANAGER, MASTER_HBASE, KAFKA_BROKER, NIMBUS};
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1211,jmxProtocolString = getJMXProtocolString(protocolMap.get(componentName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1239,private String getJMXProtocolString(String value) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1240,if (PROPERTY_HDFS_HTTP_POLICY_VALUE_HTTPS_ONLY.equals(value)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1241,return "https";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1243,return "http";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/MysqlQuerySetAmbariDB.java,37,return "INSERT INTO DS_JOBIMPL_" + id + " values (?,'','','','','default',?,0,'','','',?,?,?,'','job','','','UNKNOWN',?,'','Worksheet');";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/MysqlQuerySetAmbariDB.java,41,return "INSERT INTO DS_JOBIMPL_" + id + " values (?,'','','','','default',?,0,'','','','',?,?,?,'','job','','','UNKNOWN',?,'','Worksheet');";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/OracleQuerySetAmbariDB.java,38,return "INSERT INTO ds_jobimpl_" + id + " values (?,'','','','','default',?,0,'','','',?,?,?,'','job','','','UNKNOWN',?,'','Worksheet')";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/OracleQuerySetAmbariDB.java,42,return "INSERT INTO ds_jobimpl_" + id + " values (?,'','','','','default',?,0,'','','','',?,?,?,'','job','','','UNKNOWN',?,'','Worksheet')";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/QuerySetAmbariDB.java,57,public PreparedStatement insertToHiveHistoryForHive(Connection connection, int id, String maxcount, long epochtime, String dirname,String username) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/QuerySetAmbariDB.java,69,prSt.setString(6, dirname);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/QuerySetAmbariDB.java,74,public PreparedStatement insertToHiveHistoryForHiveNext(Connection connection, int id, String maxcount, long epochtime, String dirname,String username) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/QuerySetAmbariDB.java,86,prSt.setString(6, dirname);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/QuerySetAmbariDB.java,113,return "INSERT INTO ds_jobimpl_" + id + " values (?,'','','','','default',?,0,'','','',?,?,?,'','job','','','UNKNOWN',?,'','Worksheet');";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/QuerySetAmbariDB.java,117,return "INSERT INTO ds_jobimpl_" + id + " values (?,'','','','','default',?,0,'','','','',?,?,?,'','job','','','UNKNOWN',?,'','Worksheet');";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,133,public void insertRowinAmbaridb(String dirname, int maxcount, long epochtime, Connection c, int id, String instance, int i, QuerySetAmbariDB ambaridatabase, String versionName, String username) throws SQLException, IOException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,143,prSt = ambaridatabase.insertToHiveHistoryForHive(c, id, maxcount1, epochtime, dirname, username);
ambari-server/src/main/java/org/apache/ambari/server/alerts/AmbariPerformanceRunnable.java,32,import org.apache.ambari.server.api.query.render.DefaultRenderer;
ambari-server/src/main/java/org/apache/ambari/server/alerts/AmbariPerformanceRunnable.java,165,query.setRenderer(new DefaultRenderer());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,72,void timeoutHostRole(String host, long requestId, long stageId,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,73,String role, boolean skipSupported);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,239,timeoutHostRole(host, requestId, stageId, role, false);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,243,public void timeoutHostRole(String host, long requestId, long stageId,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,244,String role, boolean skipSupported) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,247,hostRoleCommandDAO.findByHostRole(host, requestId, stageId, role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,252,command.setStatus(command.isRetryAllowed() ? HostRoleStatus.HOLDING_TIMEDOUT : HostRoleStatus.TIMEDOUT);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,795,if (s.getAttemptCount(host, roleStr) >= maxAttempts) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,806,db.timeoutHostRole(host, s.getRequestId(), s.getStageId(), c.getRole(), isSkipSupported);
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,347,if (hostRequestIterator.next().getHostName().equals(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,356,if (allHostRequesIterator.next().getHostName().equals(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,191,throw new RuntimeException("Failed to create Cluster resource: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,24,import org.apache.ambari.server.controller.RequestStatusResponse;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,25,import org.apache.ambari.server.controller.ShortTaskStatus;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,183,topologyTasks.add(new PersistHostResourcesTask());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,184,topologyTasks.add(new RegisterWithConfigGroupTask());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,186,InstallHostTask installTask = new InstallHostTask(skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,194,startTask = new StartHostTask(skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,238,topologyTasks.add(new PersistHostResourcesTask());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,239,topologyTasks.add(new RegisterWithConfigGroupTask());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,240,InstallHostTask installTask = new InstallHostTask(skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,247,StartHostTask startTask = new StartHostTask(skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,426,topology.getAmbariContext().getPersistedTopologyState().
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,427,registerPhysicalTask(logicalTaskId, physicalTaskId);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,443,private class PersistHostResourcesTask implements TopologyTask {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,444,private AmbariContext ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,447,public Type getType() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,448,return Type.RESOURCE_CREATION;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,452,public void init(ClusterTopology topology, AmbariContext ambariContext) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,453,this.ambariContext = ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,457,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,458,HostGroup group = topology.getBlueprint().getHostGroup(getHostgroupName());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,459,Map<String, Collection<String>> serviceComponents = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,460,for (String service : group.getServices()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,461,serviceComponents.put(service, new HashSet<String> (group.getComponents(service)));
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,463,ambariContext.createAmbariHostResources(getClusterId(), getHostName(), serviceComponents);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,467,private class RegisterWithConfigGroupTask implements TopologyTask {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,468,private ClusterTopology clusterTopology;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,469,private AmbariContext ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,472,public Type getType() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,473,return Type.CONFIGURE;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,477,public void init(ClusterTopology topology, AmbariContext ambariContext) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,478,clusterTopology = topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,479,this.ambariContext = ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,483,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,484,ambariContext.registerHostWithConfigGroup(getHostName(), clusterTopology, getHostgroupName());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,489,private class InstallHostTask implements TopologyTask {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,490,private ClusterTopology clusterTopology;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,491,private final boolean skipFailure;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,493,public InstallHostTask(boolean skipFailure) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,494,this.skipFailure = skipFailure;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,498,public Type getType() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,499,return Type.INSTALL;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,503,public void init(ClusterTopology topology, AmbariContext ambariContext) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,504,clusterTopology = topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,508,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,512,List<ShortTaskStatus> underlyingTasks = response.getTasks();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,513,for (ShortTaskStatus task : underlyingTasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,514,Long logicalInstallTaskId = logicalTaskMap.get(this).get(task.getRole());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,515,if(logicalInstallTaskId == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,516,LOG.info("Skipping physical install task registering, because component {} cannot be found", task.getRole());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,517,continue;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,520,long taskId = task.getTaskId();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,521,registerPhysicalTaskId(logicalInstallTaskId, taskId);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,527,for (HostRoleCommand logicalTask : logicalTasks.values()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,528,if (logicalTask.getTaskId() == logicalInstallTaskId) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,529,logicalTask.incrementAttemptCount();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,539,private class StartHostTask implements TopologyTask {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,540,private ClusterTopology clusterTopology;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,541,private final boolean skipFailure;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,543,public StartHostTask(boolean skipFailure) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,544,this.skipFailure = skipFailure;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,548,public Type getType() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,549,return Type.START;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,553,public void init(ClusterTopology topology, AmbariContext ambariContext) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,554,clusterTopology = topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,558,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,560,RequestStatusResponse response = clusterTopology.startHost(hostname, skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,562,List<ShortTaskStatus> underlyingTasks = response.getTasks();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,563,for (ShortTaskStatus task : underlyingTasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,564,String component = task.getRole();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,565,Long logicalStartTaskId = logicalTaskMap.get(this).get(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,566,if(logicalStartTaskId == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,567,LOG.info("Skipping physical start task registering, because component {} cannot be found", task.getRole());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,568,continue;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,571,registerPhysicalTaskId(logicalStartTaskId, task.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,575,for (HostRoleCommand logicalTask : logicalTasks.values()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,576,if (logicalTask.getTaskId() == logicalStartTaskId) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,577,logicalTask.incrementAttemptCount();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,881,ConfigureClusterTask configureClusterTask = new ConfigureClusterTask(topology, configurationRequest);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,889,static class ConfigureClusterTask implements Callable<Boolean> {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,891,private ClusterConfigurationRequest configRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,892,private ClusterTopology topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,894,public ConfigureClusterTask(ClusterTopology topology, ClusterConfigurationRequest configRequest) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,895,this.configRequest = configRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,896,this.topology = topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,900,public Boolean call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,901,LOG.info("TopologyManager.ConfigureClusterTask: Entering");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,903,Collection<String> requiredHostGroups = getTopologyRequiredHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,905,if (!areRequiredHostGroupsResolved(requiredHostGroups)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,906,LOG.debug("TopologyManager.ConfigureClusterTask - prerequisites for config request processing not yet " +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,908,throw new IllegalArgumentException("TopologyManager.ConfigureClusterTask - prerequisites for config " +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,912,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,913,LOG.info("TopologyManager.ConfigureClusterTask: All Required host groups are completed, Cluster " +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,915,configRequest.process();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,917,LOG.error("TopologyManager.ConfigureClusterTask: " +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,921,throw new Exception(e);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,924,LOG.info("TopologyManager.ConfigureClusterTask: Exiting");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,925,return true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,933,private Collection<String> getTopologyRequiredHostGroups() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,934,Collection<String> requiredHostGroups;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,935,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,936,requiredHostGroups = configRequest.getRequiredHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,939,LOG.error("TopologyManager.ConfigureClusterTask: An exception occurred while attempting to determine required" +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,941,requiredHostGroups = Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,943,return requiredHostGroups;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,952,private boolean areRequiredHostGroupsResolved(Collection<String> requiredHostGroups) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,953,boolean configTopologyResolved = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,954,Map<String, HostGroupInfo> hostGroupInfo = topology.getHostGroupInfo();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,955,for (String hostGroup : requiredHostGroups) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,956,HostGroupInfo groupInfo = hostGroupInfo.get(hostGroup);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,957,if (groupInfo == null || groupInfo.getHostNames().size() < groupInfo.getRequestedHostCount()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,958,configTopologyResolved = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,959,if (groupInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,960,LOG.info("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} requires {} hosts to be mapped, but only {} are available.",
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,961,groupInfo.getHostGroupName(), groupInfo.getRequestedHostCount(), groupInfo.getHostNames().size());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,963,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,965,LOG.info("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} has been fully resolved, as all {} required hosts are mapped to {} physical hosts.",
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,966,groupInfo.getHostGroupName(), groupInfo.getRequestedHostCount(), groupInfo.getHostNames().size());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,969,return configTopologyResolved;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyTask.java,20,package org.apache.ambari.server.topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyTask.java,39,public void init(ClusterTopology topology, AmbariContext ambariContext);
ambari-server/src/main/java/org/apache/ambari/server/audit/AuditLoggerModule.java,43,protected List<Class> getSelectors() {
ambari-server/src/main/java/org/apache/ambari/server/audit/AuditLoggerModule.java,44,List<Class> selectorList = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/audit/AuditLoggerModule.java,54,protected List<Class> getExclusions() {
ambari-server/src/main/java/org/apache/ambari/server/audit/AuditLoggerModule.java,76,Set<Class> bindingSet = ClasspathScannerUtils.findOnClassPath(getPackageToScan(), getExclusions(), getSelectors());
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,23,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,48,public static Set<Class> findOnClassPath(String packageName, List<Class> exclusions, List<Class> selectors) {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,50,Set<Class> bindingSet = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,56,Class candidate = classInfo.load();
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,64,LOGGER.info("Found class [{}]", candidate);
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,85,private static boolean isEligible(Class candidate, List<Class> selectors) {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,95,private static boolean checkAnnotations(Class candidate, List<Class> selectors) {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,99,if (selectors.contains(candidateAnn)) {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/ClasspathScannerUtils.java,113,private static boolean checkSubClasses(Class candidate, List<Class> selectors) {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/CleanupModule.java,41,protected List<Class> getSelectors() {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/CleanupModule.java,42,List<Class> selectorList = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/cleanup/CleanupModule.java,52,protected List<Class> getExclusions() {
ambari-server/src/main/java/org/apache/ambari/server/cleanup/CleanupModule.java,70,Set<Class> bindingSet = ClasspathScannerUtils.findOnClassPath(getPackageToScan(), getExclusions(), getSelectors());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,22,import java.lang.annotation.Annotation;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,25,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,126,import org.springframework.core.type.filter.AnnotationTypeFilter;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,495,protected Set<BeanDefinition> bindByAnnotation(Set<BeanDefinition> beanDefinitions) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,496,List<Class<? extends Annotation>> classes = Arrays.asList(
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,497,EagerSingleton.class, StaticallyInject.class, AmbariService.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,499,if (null == beanDefinitions || beanDefinitions.size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,500,ClassPathScanningCandidateComponentProvider scanner =
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,501,new ClassPathScanningCandidateComponentProvider(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,504,for (Class<? extends Annotation> cls : classes) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,505,scanner.addIncludeFilter(new AnnotationTypeFilter(cls));
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,508,beanDefinitions = scanner.findCandidateComponents(AMBARI_PACKAGE);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,511,if (null == beanDefinitions || beanDefinitions.size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,512,LOG.warn("No instances of {} found to register", classes);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,513,return beanDefinitions;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,516,Set<com.google.common.util.concurrent.Service> services =
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,517,new HashSet<com.google.common.util.concurrent.Service>();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,519,for (BeanDefinition beanDefinition : beanDefinitions) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,520,String className = beanDefinition.getBeanClassName();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,521,Class<?> clazz = ClassUtils.resolveClassName(className,
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,522,ClassUtils.getDefaultClassLoader());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,526,LOG.debug("Binding singleton {} eagerly", clazz);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,542,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,552,LOG.debug("Registering service {} ", clazz);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,563,return beanDefinitions;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,663,LOG.debug("Registered pre-upgrade check {}", upgradeCheck.getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,40,private Map<String, Thread> jobs = new HashMap<String, Thread>();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,41,public void startJob(String key, Runnable runnable) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,43,interrupt(key);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,45,jobs.get(key).join();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,50,jobs.put(key, t);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,59,Thread.State state = jobs.get(key).getState();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,73,jobs.get(key).interrupt();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/backgroundjobs/BackgroundJobController.java,82,return jobs.get(key).isInterrupted();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,293,throw new ServiceFormattedException("F010 Could not write CSV to HDFS for job#" + jobController.getJob().getId(), e);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,295,throw new ServiceFormattedException("F010 Could not write CSV to HDFS for job#" + jobController.getJob().getId(), e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/historyqueryset/OracleQuerySetAmbariDB.java,33,return "select id from viewentity where class_name LIKE 'org.apache.ambari.view.hive.resources.jobs.viewJobs.JobImpl' and view_instance_name=?";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/instancedetail/OracleQuerySetAmbariDB.java,25,return "select distinct(view_instance_name) as instancename from viewentity where view_name='HIVE{1.0.0}'";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/instancedetail/OracleQuerySetAmbariDB.java,29,return "select distinct(view_instance_name) as instancename from viewentity where view_name='HIVE{1.0.0}' or view_name='PIG{1.0.0}';";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,38,return "select id from viewentity where class_name LIKE 'org.apache.ambari.view.hive.resources.jobs.viewJobs.JobImpl' and view_instance_name=?";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/pig/instancedetail/OracleQuerySetAmbariDB.java,27,return  "select distinct(view_instance_name) as instancename from viewentity where view_name='PIG{1.0.0}'";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/pig/jobqueryset/OracleQuerySetAmbariDB.java,35,return "INSERT INTO ds_pigjob_" + id + " values (?,?,0,'','f','','',?,0,?,'',?,'','',?,?,'',?)";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/pig/jobqueryset/QuerySetAmbariDB.java,88,return "INSERT INTO ds_pigjob_" + id + " values (?,?,0,'','f','','',?,0,?,'',?,'','',?,?,'',?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/pig/savedscriptqueryset/OracleQuerySetAmbariDB.java,34,return "INSERT INTO ds_pigscript_" + id + " values (?,'1970-01-17 20:28:55.586000 +00:00:00','f',?,?,'','',?)";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/pig/savedscriptqueryset/QuerySetAmbariDB.java,79,return "INSERT INTO ds_pigscript_" + id + " values (?,'1970-01-17 20:28:55.586000 +00:00:00','f',?,?,'','',?);";
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/viewJobs/JobControllerImpl.java,42,import org.apache.commons.lang3.ArrayUtils;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/viewJobs/JobControllerImpl.java,116,String[] queries = query.split(";");
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/viewJobs/JobControllerImpl.java,119,String[] strings = {"use " + jobDatabase};
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/viewJobs/JobControllerImpl.java,120,return ArrayUtils.addAll(strings, queries);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/ResultSetIterator.java,126,sender().tell(new NoMoreItems(), self());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/message/job/NoMoreItems.java,21,public class NoMoreItems {}
ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java,30,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java,31,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,116,LOG.error("ServiceComponent {0} doesn't advertise version, " +
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,520,public void refresh() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,216,ClusterTopology topology = new ClusterTopologyImpl(ambariContext, request);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,221,Long provisionId = ambariContext.getNextRequestId();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,223,final Stack stack = topology.getBlueprint().getStack();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,258,PersistedTopologyRequest persistedRequest = RetryHelper.executeWithRetry(new Callable<PersistedTopologyRequest>() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,260,public PersistedTopologyRequest call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,261,return persistedState.persistTopologyRequest(request);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,269,LogicalRequest logicalRequest = processRequest(persistedRequest, topology, provisionId);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,375,ClusterTopology topology = clusterTopologyMap.get(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,386,PersistedTopologyRequest persistedRequest = persistedState.persistTopologyRequest(request);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,389,return getRequestStatus(processRequest(persistedRequest, topology,
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,390,ambariContext.getNextRequestId()).getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,601,finalizeTopology(request.getRequest(), topology);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,602,LogicalRequest logicalRequest = createLogicalRequest(request, topology, requestId);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,666,return logicalRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,675,RetryHelper.executeWithRetry(new Callable<Object>() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,677,public Object call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,678,persistedState.persistLogicalRequest(logicalRequest, request.getId());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,679,return null;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,712,RetryHelper.executeWithRetry(new Callable<Object>() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,714,public Object call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,715,persistedState.registerHostName(response.getHostRequestId(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,716,persistedState.registerInTopologyHostInfo(host);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,128,Utils.logErrorMessageWithCounter(LOG, errorLogCounterForLogSearchConnectionExceptions,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,220,if (hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME) || kerberosPrincipalHostDAO
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,221,.exists(evaluatedPrincipal, hostEntity.getHostId())) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,178,static final String DEFAULT_COMPACTION_POLICY_CLASS =
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,491,boolean enableNormalizer = hbaseConf.getBoolean("hbase.normalizer.enabled", false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,492,boolean enableFifoCompaction = metricsConf.getBoolean("timeline.metrics.hbase.fifo.compaction.enabled", true);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,513,if (METRICS_RECORD_TABLE_NAME.equals(tableName)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,514,if (!timelineMetricsPrecisionTableDurability.isEmpty()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,515,LOG.info("Setting WAL option " + timelineMetricsPrecisionTableDurability + " for table : " + tableName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,516,boolean validDurability = true;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,517,if ("SKIP_WAL".equals(timelineMetricsPrecisionTableDurability)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,518,tableDescriptor.setDurability(Durability.SKIP_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,520,tableDescriptor.setDurability(Durability.SYNC_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,522,tableDescriptor.setDurability(Durability.ASYNC_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,524,tableDescriptor.setDurability(Durability.FSYNC_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,526,LOG.info("Unknown value for " + TIMELINE_METRICS_PRECISION_TABLE_DURABILITY + " : " + timelineMetricsPrecisionTableDurability);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,527,validDurability = false;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,529,if (validDurability) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,530,modifyTable = true;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,534,if (!timelineMetricsTablesDurability.isEmpty()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,535,LOG.info("Setting WAL option " + timelineMetricsTablesDurability + " for table : " + tableName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,536,boolean validDurability = true;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,537,if ("SKIP_WAL".equals(timelineMetricsTablesDurability)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,538,tableDescriptor.setDurability(Durability.SKIP_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,540,tableDescriptor.setDurability(Durability.SYNC_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,542,tableDescriptor.setDurability(Durability.ASYNC_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,544,tableDescriptor.setDurability(Durability.FSYNC_WAL);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,546,LOG.info("Unknown value for " + TIMELINE_METRICS_AGGREGATE_TABLES_DURABILITY + " : " + timelineMetricsTablesDurability);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,547,validDurability = false;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,549,if (validDurability) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,550,modifyTable = true;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,555,Map<String, String> config = tableDescriptor.getConfiguration();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,556,if (enableFifoCompaction &&
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,557,!FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,558,tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,559,FIFO_COMPACTION_POLICY_CLASS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,560,LOG.info("Setting config property " + HSTORE_COMPACTION_CLASS_KEY +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,563,int blockingStoreFiles = hbaseConf.getInt(HBASE_BLOCKING_STORE_FILES, 1000);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,564,if (blockingStoreFiles < 1000) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,565,blockingStoreFiles = 1000;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,567,tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY, String.valueOf(blockingStoreFiles));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,568,LOG.info("Setting config property " + BLOCKING_STORE_FILES_KEY +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,570,modifyTable = true;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,573,if (!enableFifoCompaction &&
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,574,FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,575,tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,576,DEFAULT_COMPACTION_POLICY_CLASS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,577,LOG.info("Setting config property " + HSTORE_COMPACTION_CLASS_KEY +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,580,int blockingStoreFiles = hbaseConf.getInt(HBASE_BLOCKING_STORE_FILES, 300);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,581,if (blockingStoreFiles > 300) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,582,LOG.warn("HBase blocking store file set too high without FIFO " +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,584,blockingStoreFiles = 300;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,586,tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY, String.valueOf(blockingStoreFiles));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,587,LOG.info("Setting config property " + BLOCKING_STORE_FILES_KEY +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,589,modifyTable = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1126,Map<String, ServiceInfo> stackServicesMap = ambariMetaInfo.getServices(targetStack.getStackName(), targetStack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,180,Map<String, Map<String, String>> resolved = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,197,Map<String, String> tags = new LinkedHashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,232,Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,239,propertyMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,242,Map<String, String> tags = new HashMap<String, String>(entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,282,Map<String, Map<String, Map<String, String>>> attributes = new HashMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,290,Map<String, String> tags = new HashMap<String, String>(entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,296,attributesMap = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,326,Map<String, String> finalConfig = new HashMap<String, String>(persistedClusterConfig);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,473,Set<String> result = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,496,Set<String> result = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,649,Set<PropertyInfo> properties = new HashSet<PropertyInfo>(service.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,719,Map<String, String> properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,721,new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,815,Map<String, Set<Config>> serviceMapped = new HashMap<String, Set<Config>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,847,Config createConfig(Cluster cluster, AmbariManagementController controller, String type, String tag,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,848,Map<String, String> properties, Map<String, Map<String, String>> propertyAttributes) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,953,Map<String, Map<String, String>> defaultPropertiesByType = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1154,Map<String, String> desiredValues = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1155,Map<String, String> actualValues = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1171,List<String> keys = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1191,Map<String, String> map = new LinkedHashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1216,Set<String> desiredSet = new HashSet<String>(desiredTags.values());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1217,Set<String> actualSet = new HashSet<String>(actualTags.values());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1227,Set<String> names = new HashSet<String>();
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,86,String filePath = path + contentDisposition.getFileName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,727,throw new AmbariException(error);
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,344,cacheSanitizedTimelineMetric(currentTimeMillis, sanitizedName, "", Double.parseDouble(String.valueOf(gauge.value())));
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,346,populateMetricsList(context, MetricType.GAUGE, sanitizedName);
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,118,LOG.info("Collector Uri: " + collectorUri);
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,416,LOG.info("Closing HadoopTimelineMetricSink. Flushing metrics to collector...");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,196,? KDCType.MIT_KDC
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,41,import javax.ws.rs.Produces;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1506,if (stateToHosts == null || stateToHosts.keySet().size() < 1) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1543,if (totalInstalled + totalNotRequired == totalHosts) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1544,return RepositoryVersionState.INSTALLED;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1547,if (totalInstalling + totalInstalled + totalNotRequired == totalHosts) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1554,LOG.warn("have a mix of CURRENT and INSTALLING|INSTALLED host versions, " +
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,302,if (commandDetail != null && commandDetail.contains("null")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,51,import org.apache.ambari.server.security.authorization.ResourceType;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,133,EnumSet<RoleAuthorization> requiredAuthorizations = EnumSet.of(RoleAuthorization.CLUSTER_MANAGE_ALERTS);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,255,protected ResourceType getResourceType(Request request, Predicate predicate) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,256,return ResourceType.AMBARI;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,82,public static void resetErrorWarningFlags() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,147,public static void checkForNotMappedConfigsToCluster() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,155,if (connection == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,156,if (dbAccessor == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,157,dbAccessor = injector.getInstance(DBAccessor.class);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,159,connection = dbAccessor.getConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,171,LOG.warn("You have config(s): {} that is(are) not mapped (in clusterconfigmapping table) to any cluster!", StringUtils.join(nonSelectedConfigs, ","));
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,201,public static void checkForConfigsSelectedMoreThanOnce() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,212,if (connection == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,213,if (dbAccessor == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,214,dbAccessor = injector.getInstance(DBAccessor.class);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,216,connection = dbAccessor.getConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,228,LOG.error("You have config(s), in cluster {}, that is(are) selected more than once in clusterconfigmapping table: {}",
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,260,public static void checkForHostsWithoutState() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,268,if (connection == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,269,if (dbAccessor == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,270,dbAccessor = injector.getInstance(DBAccessor.class);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,272,connection = dbAccessor.getConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,284,LOG.error("You have host(s) without state (in hoststate table): " + StringUtils.join(hostsWithoutStatus, ","));
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,316,public static void checkHostComponentStatesCountEqualsHostComponentsDesiredStates() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,329,if (connection == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,330,if (dbAccessor == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,331,dbAccessor = injector.getInstance(DBAccessor.class);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,333,connection = dbAccessor.getConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,361,LOG.error("Your host component states (hostcomponentstate table) count not equals host component desired states (hostcomponentdesiredstate table) count!");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,396,public static void checkServiceConfigs()  {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,430,if (connection == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,431,if (dbAccessor == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,432,dbAccessor = injector.getInstance(DBAccessor.class);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,434,connection = dbAccessor.getConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,478,LOG.error("In cluster {}, service config mapping is unavailable (in table serviceconfigmapping) for service {} with version(s) {}! ", clName, servName, StringUtils.join(serviceVersion.get(servName), ","));
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,561,LOG.error("Required config(s): {} is(are) not available for service {} with service config version {} in cluster {}",
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,599,LOG.error("You have non selected configs: {} for service {} from cluster {}!", StringUtils.join(serviceConfig.get(serviceName), ","), serviceName, clusterName);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,223,e1);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,339,throws ClassNotFoundException, IOException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,206,logger.error("Sql exception while doing roll back", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,229,migrationresult.setJobtype("hivehistoryquerymigration");
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PermissionEntity.java,35,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PermissionEntity.java,116,private Collection<RoleAuthorizationEntity> authorizations;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PermissionEntity.java,230,public void setAuthorizations(Collection<RoleAuthorizationEntity> authorizations) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/PermissionEntity.java,231,this.authorizations = authorizations;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,24,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,30,import org.apache.ambari.server.orm.entities.RoleAuthorizationEntity;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,63,pe.setAuthorizations(createAdminAuthorizations());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,81,private static Collection<RoleAuthorizationEntity> createAdminAuthorizations() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,82,List<RoleAuthorizationEntity> authorizations = new ArrayList<RoleAuthorizationEntity>();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,84,for (RoleAuthorization roleAuthorization : RoleAuthorization.values()) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,85,RoleAuthorizationEntity re = new RoleAuthorizationEntity();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,86,re.setAuthorizationId(roleAuthorization.getId());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,87,re.setAuthorizationName(roleAuthorization.name());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,88,authorizations.add(re);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/internal/InternalAuthenticationToken.java,91,return authorizations;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,838,role.getAuthorizations().add(roleAuthorization);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,21,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,22,import java.net.ServerSocket;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,25,import java.net.URL;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,64,private static final String WEB_RESOURCE_FOLDER = "webapps/app";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,118,checkPort(Integer.parseInt(port));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,138,checkPort(Integer.parseInt(port));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,150,.getResource(WEB_RESOURCE_FOLDER);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,151,if (fileCompleteUrl != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,152,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,153,return fileCompleteUrl.toURI().normalize();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,156,System.exit(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,160,System.exit(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,165,private void checkPort(int port) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,166,ServerSocket serverSocket = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,167,boolean portBusy = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,168,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,169,serverSocket = new ServerSocket(port);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,171,portBusy = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,174,if (serverSocket != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,175,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,176,serverSocket.close();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,181,if (portBusy) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,182,System.exit(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,249,final List<GrantedAuthority> grantedAuths = getAuthorities(authentication
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,250,.getName().toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,261,private List<GrantedAuthority> getAuthorities(String username) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,278,password, getAuthorities(username));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,987,if (null != host &&
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,988,(host.getState().equals(HostState.HEARTBEAT_LOST) || wasAgentRestartedDuringOperation(host, stage, role))) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,989,LOG.debug("Timing out action since agent is not heartbeating or agent was restarted.");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,990,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,324,AlertGroupEntity group = dispatchDao.findDefaultServiceGroup(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,325,alertDefinition.getClusterId(), alertDefinition.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,332,group = dispatchDao.createDefaultGroup(alertDefinition.getClusterId(),
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,333,serviceName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,86,private final Lock m_groupLock = new ReentrantLock();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,203,public AlertGroupEntity findGroupByName(String groupName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,204,TypedQuery<AlertGroupEntity> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,207,query.setParameter("groupName", groupName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,209,return daoUtils.selectSingle(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,390,JpaSortBuilder<AlertNoticeEntity> sortBuilder = new JpaSortBuilder<AlertNoticeEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,481,AlertGroupEntity group = new AlertGroupEntity();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,483,m_groupLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,492,m_groupLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,495,return group;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,200,alertDefinitions = new HashSet<AlertDefinitionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,237,alertDefinitions = new HashSet<AlertDefinitionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,282,alertTargets = new HashSet<AlertTargetEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,94,Section parentSection = mergedSections.get(childSection.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,95,childSection.mergeWithParent(parentSection);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,62,public void abortOperation(long requestId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,205,public void abortOperation(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,229,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,863,if (c.getRoleCommand().equals(RoleCommand.ACTIONEXECUTE)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,864,String clusterName = c.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,865,processActionDeath(clusterName,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,866,c.getHostname(),
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,867,c.getRole());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,871,db.abortOperation(stage.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,210,String protocol = resolveProtocol();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,223,port = resolvePort(cluster, hostname, resourceComponentName, metricsProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,296,metricsProperties.containsKey(PORT_PROPERTY_NAME_PROPERTY)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,298,portPropertyName = metricsProperties.get(PORT_PROPERTY_NAME_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,300,String portStr = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,301,if (portConfigType != null && portPropertyName != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,302,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,303,Map<String, Map<String, String>> configTags =
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,304,amc.findConfigurationTagsWithOverrides(cluster, hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,305,if (configTags.containsKey(portConfigType)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,306,Map<String, Map<String, String>> properties = amc.getConfigHelper().getEffectiveConfigProperties(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,307,Collections.singletonMap(portConfigType, configTags.get(portConfigType)));
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,308,Map<String, String> config = properties.get(portConfigType);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,309,if (config != null && config.containsKey(portPropertyName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,310,portStr = config.get(portPropertyName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,314,String message = String.format("Can not extract configs for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,316,hostname, portConfigType, portPropertyName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,317,LOG.warn(message, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,319,if (portStr == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,320,String message = String.format(
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,326,componentName, portConfigType,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,327,portPropertyName, hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,328,LOG.debug(message);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java,352,private String resolveProtocol() {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewDAO.java,63,public ViewEntity findByCommonName(String viewCommonName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewDAO.java,67,return viewEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewDAO.java,71,return null;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,169,new HashMap<ViewEntity, Map<String, ViewInstanceEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,175,new ConcurrentHashMap<String, Set<SubResourceDefinition>>();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,181,new ConcurrentHashMap<Resource.Type, ResourceProvider>();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,187,new ConcurrentHashMap<String, Set<Listener>>();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,436,viewInstanceDefinitions.get(getDefinition(viewName, version));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,509,String viewName, String version) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,544,(getInstanceDefinition(viewEntity.getCommonName(), viewEntity.getVersion(), instanceEntity.getName()) != null);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,558,throws ValidationException, IllegalArgumentException, SystemException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,569,version + "/" + instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,597,instanceEntity.getViewName() + ".";
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,613,throws ValidationException, SystemException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,836,instanceName == null ? null : getInstanceDefinition(viewName, version, instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1023,serviceNames.containsAll(autoCreateServices)) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1080,throws ClassNotFoundException, IntrospectionException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1114,new ViewExternalSubResourceProvider(externalResourceType, viewDefinition);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1120,new ViewExternalSubResourceDefinition(externalResourceType));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1200,throws ValidationException, ClassNotFoundException, SystemException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1211,throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1213,new ViewInstanceEntity(viewDefinition, instanceConfig);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1230,throws ClassNotFoundException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1236,new ViewExternalSubResourceService(viewDefinition.getExternalResourceType(), viewInstanceDefinition);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1257,getProvider(resourceConfig.getProviderClass(cl), viewInstanceContext));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1298,.toInstance(viewResourceHandler);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1300,.toInstance(viewInstanceContext);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1308,Class<? extends org.apache.ambari.view.ResourceProvider> clazz,
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1309,final ViewContext viewInstanceContext) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1314,.toInstance(viewInstanceContext);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1327,.toInstance(viewContext);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1340,.toInstance(viewContext);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1381,throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1499,: AuthorizationHelper.isAuthorized(ResourceType.VIEW, resourceId, RoleAuthorization.VIEW_USE);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1559,File.separator + EXTRACTED_ARCHIVES_DIR;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1665,configuration.isViewValidationEnabled());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1708,instance.getInstanceName() + ".");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1715,latestUnregisteredView.getViewEntity().getName() + "/" + latestUnregisteredView.getName());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1889,view.getName() + " is not valid.";
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1930,throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1940,File.separator + EXTRACTED_ARCHIVES_DIR;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1989,configuration.getViewExtractionThreadPoolCoreSize(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1990,configuration.getViewExtractionThreadPoolMaxSize(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1991,configuration.getViewExtractionThreadPoolTimeout(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1992,TimeUnit.MILLISECONDS,
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1993,queue);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2011,new org.apache.ambari.server.controller.internal.URLStreamProvider(
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2012,configuration.getRequestConnectTimeout(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2013,configuration.getRequestReadTimeout(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2014,sslConfiguration.getTruststorePath(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2015,sslConfiguration.getTruststorePassword(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2016,sslConfiguration.getTruststoreType());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2028,new org.apache.ambari.server.controller.internal.URLStreamProvider(
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2029,configuration.getViewAmbariRequestConnectTimeout(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2030,configuration.getViewAmbariRequestReadTimeout(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2031,sslConfiguration.getTruststorePath(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2032,sslConfiguration.getTruststorePassword(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2033,sslConfiguration.getTruststoreType());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2076,throws JAXBException, IOException, SAXException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2080,File.separator + EXTRACTED_ARCHIVES_DIR;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2131,latestPrevInstance.getViewEntity().getName() + "/" + latestPrevInstance.getName());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/CSVParams.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,24,import org.apache.ambari.view.hive.resources.uploads.CSVParams;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/query/QueryGenerator.java,21,import org.apache.ambari.view.hive.resources.uploads.query.RowFormat;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/query/RowFormat.java,19,package org.apache.ambari.view.hive.resources.uploads.query;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/query/TableInfo.java,21,import org.apache.ambari.view.hive.resources.uploads.query.RowFormat;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,190,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,234,new RequestImpl(null, Collections.singleton(startProps), null, null), predicate);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,241,public void createAmbariHostResources(long  clusterId, String hostName, Map<String, Collection<String>> components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,251,String clusterName = null;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,253,clusterName = getClusterName(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,255,LOG.error("Cannot get cluster name for clusterId = " + clusterId, e);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,267,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,277,if (!component.equals("AMBARI_SERVER")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,278,requests.add(new ServiceComponentHostRequest(clusterName, service, component, hostName, null));
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,291,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,347,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,410,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,454,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,663,e.printStackTrace();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,139,if (versionName.contains("1.5")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,140,prSt = ambaridatabase.insertToHiveHistoryForHiveNext(c, id, maxcount1, epochtime, dirname, username);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,204,Properties customDatabaseDriverProperties = configuration.getDatabaseCustomProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,205,properties.putAll(customDatabaseDriverProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,208,Properties customPersistenceProperties = configuration.getPersistenceCustomProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,209,properties.putAll(customPersistenceProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2284,Map<String, DesiredConfig> desiredConfigs = cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2775,findConfigurationTagsWithOverrides(cluster, host.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,438,boolean stale = calculateIsStaleConfigs(sch, requestDesiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,441,sch.getHostName(), sch.getServiceComponentName(), stale);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1009,if (sch.isRestartRequired()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1021,desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1027,desired.hashCode(),
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1028,sch.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1029,sch.getServiceComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1030,sch.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1042,stackId.getStackVersion(), sch.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1317,&& !serviceComponent.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1882,private HostComponentDesiredStateEntity getDesiredStateEntity() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,33,import org.apache.commons.lang3.StringUtils;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,38,private static final String LOG_MESSAGE_PREFIX = "Simulated log message for testing, line";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,40,private static final String LOG_TEXT_PATTERN =
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,58,private final String logText;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,64,this.logText = getLogText();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,83,private String getLogText() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,84,int logTextSize = LogFeederUtil.getIntProperty("logfeeder.simulate.log_message_size", 100);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,85,int fillerSize = Math.max(logTextSize - LOG_MESSAGE_PREFIX.length() - 10, 0);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,86,String filler = StringUtils.repeat("X", fillerSize);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,87,String logMessagePattern = LOG_MESSAGE_PREFIX + " %08d " + filler;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,89,return LOG_TEXT_PATTERN.replaceAll("<LOG_MESSAGE_PATTERN>", logMessagePattern);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,112,String line = getLine(marker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,116,try { Thread.sleep(sleepMillis); } catch(Exception e) {}
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,154,private String getLine(InputMarker marker) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,156,return String.format(logText, d.getTime(), level, marker.lineNumber);
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,46,private String collectorUri;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,85,if (collectorUri.toLowerCase().startsWith("https://")) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,53,import org.apache.commons.io.filefilter.AgeFileFilter;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,54,import org.apache.commons.io.filefilter.FalseFileFilter;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,55,import org.apache.commons.io.filefilter.TrueFileFilter;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,59,import org.apache.derby.iapi.util.StringUtil;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,215,properties.setProperty(DDL_GENERATION, DROP_AND_CREATE);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,57,query = "SELECT u FROM UpgradeEntity u JOIN RequestEntity r ON u.requestId = r.requestId WHERE u.clusterId = :clusterId AND u.direction = :direction ORDER BY r.startTime DESC"),
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,50,private final HiveStatement statement;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,58,public LogAggregator(HdfsApi hdfsApi, HiveStatement statement, String logFile) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,60,this.statement = statement;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,68,start();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,83,private void start() {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,98,String allLogs = Joiner.on("\n").skipNulls().join(logs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,99,stopLogAggregation();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,127,logAggregator.tell(new StartLogAggregation(sqlStatement), getSelf());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/message/StartLogAggregation.java,27,public StartLogAggregation(String statement) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1061,stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1063,String family = os_family.find(host.getOsType());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1065,family = host.getOsFamily();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1071,if (repos.containsKey(host.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1072,gsonList = gson.toJsonTree(repos.get(host.getOsType()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1079,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2111,String osFamily = clusters.getHost(hostname).getOsFamily();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2124,Host host = clusters.getHost(scHost.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2237,String repoInfo = customCommandExecutionHelper.getRepoInfo(cluster, host);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2286,Set<String> userSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.USER, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2290,Set<String> groupSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.GROUP, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2294,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2298,DatabaseType databaseType = configs.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,493,Cluster cluster, Map<String, DesiredConfig> desiredConfigs) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,505,Set<PropertyInfo> serviceProperties = ambariMetaInfo.getServiceProperties(stack.getName(), stack.getVersion(), service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,517,Set<PropertyInfo> stackProperties = ambariMetaInfo.getStackProperties(stack.getName(), stack.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3130,if (!components.containsKey(componentName) ||
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3131,components.get(componentName).getServiceComponentHosts().size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3135,return components.get(componentName).getServiceComponentHosts().keySet();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,878,String majorVersion = hostAttributes.get(OS_RELEASE_VERSION).split("\\.")[0];
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,879,return hostAttributes.get(OSFAMILY) + majorVersion;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,21,import backtype.storm.generated.ClusterSummary;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,22,import backtype.storm.generated.SupervisorSummary;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,23,import backtype.storm.generated.TopologySummary;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,24,import backtype.storm.metric.IClusterReporter;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,25,import backtype.storm.utils.NimbusClient;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,26,import backtype.storm.utils.Utils;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,33,import java.net.InetAddress;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,34,import java.net.UnknownHostException;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,35,import java.util.ArrayList;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,36,import java.util.List;
ambari-metrics/ambari-metrics-storm-sink-legacy/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,37,import java.util.Map;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,32,import java.net.InetAddress;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,33,import java.net.UnknownHostException;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,34,import java.util.ArrayList;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,35,import java.util.Collection;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,36,import java.util.List;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsReporter.java,37,import java.util.Map;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/ResultSetIterator.java,119,while (resultSet.next() && index < batchSize) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,64,+ "\n./solrCloudCli.sh --setup-kerberos-plugin -z host1:2181,host2:2181 -zn /ambari-solr\n";
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/EnableKerberosPluginSolrZkCommand.java,31,private static final String SECURE_CONTENT = "{\"authentication\":{\"class\": \"org.apache.solr.security.KerberosPlugin\"}}";
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/EnableKerberosPluginSolrZkCommand.java,42,String fileContent = getFileContent(zkClient, filePath);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/EnableKerberosPluginSolrZkCommand.java,44,if (!fileContent.equals(SECURE_CONTENT)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/EnableKerberosPluginSolrZkCommand.java,45,putFileContent(zkClient, filePath, SECURE_CONTENT);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/EnableKerberosPluginSolrZkCommand.java,47,result = SECURE_CONTENT;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/EnableKerberosPluginSolrZkCommand.java,65,private String getFileContent(SolrZkClient zkClient, String fileName) throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,91,.debug("============================Server Dump=======================================");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,94,.debug("==============================================================================");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,68,import javax.persistence.RollbackException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2100,boolean skipFailure
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2202,ClusterVersionEntity effectiveClusterVersion = cluster.getEffectiveClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2254,ClusterVersionEntity effectiveClusterVersion = cluster.getEffectiveClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2320,if (cluster.isUpgradeSuspended()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2787,roleCommand, requestParameters, event, skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2905,roleCommand, null, null, false);
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,62,private static final String TIMELINE_METRICS_SEND_INTERVAL_PROPERTY = "kafka.timeline.metrics.sendInterval";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,63,private static final String TIMELINE_METRICS_MAX_ROW_CACHE_SIZE_PROPERTY = "kafka.timeline.metrics.maxRowCacheSize";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,65,private static final String TIMELINE_PORT_PROPERTY = "kafka.timeline.metrics.port";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,66,private static final String TIMELINE_PROTOCOL_PROPERTY = "kafka.timeline.metrics.protocol";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,67,private static final String TIMELINE_REPORTER_ENABLED_PROPERTY = "kafka.timeline.metrics.reporter.enabled";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,68,private static final String EXCLUDED_METRICS_PROPERTY = "external.kafka.metrics.exclude.prefix";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,69,private static final String INCLUDED_METRICS_PROPERTY = "external.kafka.metrics.include.prefix";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,129,String trustStorePath = props.getString(SSL_KEYSTORE_PATH_PROPERTY).trim();
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,130,String trustStoreType = props.getString(SSL_KEYSTORE_TYPE_PROPERTY).trim();
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,131,String trustStorePwd = props.getString(SSL_KEYSTORE_PASSWORD_PROPERTY).trim();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,193,String userName = authentication.getName();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,199,LOG.info("user not found ");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,204,LOG.debug("User account is disabled");
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,99,logFileNameCache = CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.HOURS).build();
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,101,logFileTailURICache = CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.HOURS).build();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,281,parseProperties();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,282,setAuthParams(buildAuthenticationConfig());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariAuthorizationFilter.java,69,private static final String API_CLUSTERS_PATTERN = API_VERSION_PREFIX + "/clusters/(\\w+)?";
ambari-server/src/main/java/org/apache/ambari/server/cleanup/CleanupDriver.java,82,Injector injector = Guice.createInjector(new ControllerModule(), new CleanupModule());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,55,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,57,import org.xml.sax.SAXException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2922,private static class StackPasswordPropertyFilter implements PropertyFilter {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2942,return !stack.isPasswordProperty(serviceName, configType, propertyName);
ambari-server/src/main/java/org/apache/ambari/server/state/PropertyInfo.java,258,VALUE_FROM_PROPERTY_FILE
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapUtils.java,25,import org.springframework.ldap.core.DistinguishedName;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapUtils.java,26,import org.springframework.security.ldap.LdapUtils;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapUtils.java,65,DistinguishedName full = LdapUtils.getFullDn((DistinguishedName) dn, adapter);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapUtils.java,66,DistinguishedName base = new DistinguishedName(baseDn);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapUtils.java,67,if (full.startsWith(base)) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,35,import com.google.common.collect.Lists;
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,96,private List<String> baseOrganizationUnits = Lists.newArrayList();
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,99,private static final String UID_ATTRIBUTE          = "uid";
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,374,for (String memberAttributeValue: group.getMemberAttributes()) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,393,for (String externalMember: externalMembers) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,415,for (Entry<String, User> userToBeUnsynced: internalMembers.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,456,Set<LdapUserDto> filteredLdapUsers = new HashSet<LdapUserDto>();
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,459,ldapServerProperties.getSyncUserMemberReplacePattern());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,461,ldapServerProperties.getSyncUserMemberFilter());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,465,syncMemberFilter.encode(), ldapServerProperties.getBaseDN());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,475,.and(new EqualsFilter(ldapServerProperties.getUsernameAttribute(), memberAttributeValue));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,489,Set<LdapGroupDto> filteredLdapGroups = new HashSet<LdapGroupDto>();
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,492,ldapServerProperties.getSyncGroupMemberReplacePattern());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,494,ldapServerProperties.getSyncGroupMemberFilter());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,498,syncMemberFilter.encode(), ldapServerProperties.getBaseDN());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,507,new EqualsFilter(OBJECT_CLASS_ATTRIBUTE, ldapServerProperties.getGroupObjectClass()),
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,508,getMemberFilter(memberAttributeValue));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,557,for (User user: allUsers) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,587,ldapServerProperties.getUsernameAttribute(), ldapServerProperties.getGroupNamingAttr()));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,607,or(new EqualsFilter(UID_ATTRIBUTE, memberAttributeValue));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,610,private Set<LdapGroupDto> getFilteredLdapGroups(String baseDn, Filter...filters) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,623,new LdapGroupContextMapper(groups, ldapServerProperties));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,638,private Set<LdapUserDto> getFilteredLdapUsers(String baseDn, Filter...filters) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,659,ldapTemplate.search(baseDn, encodedFilter, searchControls, ldapUserContextMapper, processor) :
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,660,ldapTemplate.search(baseDn, encodedFilter, searchControls, ldapUserContextMapper);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,663,users.add((LdapUserDto)dto);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,667,&& processor.getCookie().getCookie() != null);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,816,for (String uniqueMember: uniqueMembers) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,836,final DirContextAdapter adapter  = (DirContextAdapter) ctx;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3195,LOG.info("Received a delete cluster request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3196,+ ", clusterName=" + request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3220,if(!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, cluster.getResourceId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3248,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3249,LOG.debug("Received a hostComponent DELETE request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3254,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,449,configLogger.info("Deleting Config group, "
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,452,+ ", user = " + getManagementController().getAuthName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,487,throw new IllegalArgumentException("Cluster name, " +
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,243,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,103,private static final Logger LOG = LoggerFactory.getLogger(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,104,ClustersImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,359,modifyResources(new Command<Void>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,361,public Void invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,362,getManagementController().deleteCluster(clusterRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,363,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,262,Set<String> candidateHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,384,Map<String, String> commandParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,425,Map<String, Map<String, String>> configTags = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,432,execCmd.setCommandParams(commandParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,453,roleParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,467,roleParams.put(KeyNames.UPGRADE_SUSPENDED, Boolean.TRUE.toString().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,125,public static final Map<String, String> masterToSlaveMappingForDecom = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,273,Set<String> candidateHosts = new HashSet<String>(resourceFilter.getHostNames());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,339,new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,341,new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,342,Map<String, Map<String, String>> configTags = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,377,Map<String, String> hostLevelParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,402,Map<String, String> commandParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,444,execCmd.setCommandParams(commandParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,448,roleParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,454,roleParams.put(KeyNames.UPGRADE_SUSPENDED, Boolean.TRUE.toString().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,515,candidateHosts = new HashSet<String>(candidateHostsList);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,546,Set<String> hostsInMaintenanceMode = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,607,new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,609,new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,610,Map<String, Map<String, String>> configTags = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,641,Map<String, String> commandParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,687,Set<String> hosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,724,Set<String> cloneSet = new HashSet<String>(excludedHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,809,Set<String> filteredExcludedHosts = new HashSet<String>(excludedHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,821,Set<String> filteredIncludedHosts = new HashSet<String>(includedHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,845,List<String> listOfExcludedHosts = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,888,List<RequestResourceFilter> resourceFilters = new ArrayList<RequestResourceFilter>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,901,Map<String, String> commandParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,998,Map<String, String> extraParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1165,Map<String, String> hostParamsStage = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1186,clientsToUpdateConfigsList = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1220,TreeMap<String, String> hostLevelParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1359,Set<String> removedHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,171,import org.apache.ambari.server.state.ServiceFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,236,private ServiceFactory serviceFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,284,private AmbariEventPublisher ambariEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,500,new HashMap<String, Map<String, Map<String, Set<String>>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,501,Set<String> duplicates = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,833,configs = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,840,Map<String, Map<String, String>> propertiesAttributes = new HashMap<String, Map<String,String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,966,final Set<MemberResponse> responses = new HashSet<MemberResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,998,final List<String> requiredMembers = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1030,Set<ClusterResponse> response = new HashSet<ClusterResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1166,Set<Service> services = new HashSet<Service>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1174,new HashSet<ServiceComponentHostResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1210,Set<ServiceComponent> components = new HashSet<ServiceComponent>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1347,Set<ConfigurationResponse> responses = new HashSet<ConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1436,Map<String, Object> cleanedSessionAttributes = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1507,new LinkedList<ConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1608,Set<Config> configs = new HashSet<Config>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1762,new HashMap<String, Collection<ServiceConfigVersionResponse>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1910,Set<String> smokeTestServices = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1929,new HashMap<String, Map<String, Integer>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1999,Set<String> services = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2016,List<ServiceComponentHost> serviceComponentHosts = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2037,Map<String, List<ServiceComponentHost>> clientSchs = new HashMap<String, List<ServiceComponentHost>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2042,List<ServiceComponentHost> potentialHosts = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2064,Map<State, List<ServiceComponentHost>> schMap = new EnumMap<State, List<ServiceComponentHost>>(State.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2131,Map<String, String> commandParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2235,execCmd.setCommandParams(commandParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2246,Map<String, String> hostParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2307,clientsToUpdateConfigsList = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2315,Map<String, String> roleParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2321,roleParams.put(KeyNames.UPGRADE_SUSPENDED, Boolean.TRUE.toString().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2373,new ArrayList<ServiceOsSpecific.Package>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2386,List<ServiceOsSpecific> foundedOSSpecifics = new ArrayList<ServiceOsSpecific>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2559,Map<String, Collection<String>> serviceFilter = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2566,componentFilter = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2756,requestParameters = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2763,requestParameters = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2768,Map<String, Map<String, String>> configurations = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2771,new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2823,Map<String, Collection<String>> serviceFilter = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2824,Set<String> hostFilter = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2831,componentFilter = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2902,new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2948,= new HashSet<StackConfigurationDependencyResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2974,new HashSet<StackConfigurationDependencyResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3399,List<ShortTaskStatus> tasks = new ArrayList<ShortTaskStatus>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3411,Set<ClusterResponse> response = new HashSet<ClusterResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3431,new HashSet<ServiceComponentHostResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3492,new HashSet<ConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3502,Set<ServiceConfigVersionResponse> responses = new LinkedHashSet<ServiceConfigVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3520,Set<ServiceConfigVersionResponse> result = new LinkedHashSet<ServiceConfigVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3522,List<ServiceConfigVersionResponse> serviceConfigVersionResponses =  new ArrayList<ServiceConfigVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3550,Set<UserResponse> responses = new HashSet<UserResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3580,resp.setGroups(new HashSet<String>(u.getGroups()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3596,resp.setGroups(new HashSet<String>(u.getGroups()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3608,final Set<GroupResponse> responses = new HashSet<GroupResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3849,Set<StackResponse> response = new HashSet<StackResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3878,response = new HashSet<StackResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3904,Set<ExtensionResponse> response = new HashSet<ExtensionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3933,response = new HashSet<ExtensionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3944,Set<ExtensionVersionResponse> response = new HashSet<ExtensionVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3977,response = new HashSet<ExtensionVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3992,Set<RepositoryResponse> response = new HashSet<RepositoryResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4040,Set<RepositoryResponse> responses = new HashSet<RepositoryResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4211,Set<StackVersionResponse> response = new HashSet<StackVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4245,response = new HashSet<StackVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4261,Set<StackServiceResponse> response = new HashSet<StackServiceResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4300,response = new HashSet<StackServiceResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4311,Set<StackConfigurationResponse> response = new HashSet<StackConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4333,Set<StackConfigurationResponse> response = new HashSet<StackConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4355,Set<StackConfigurationResponse> response = new HashSet<StackConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4379,Set<StackConfigurationResponse> response = new HashSet<StackConfigurationResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4402,Set<StackServiceComponentResponse> response = new HashSet<StackServiceComponentResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4446,response = new HashSet<StackServiceComponentResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4458,Set<OperatingSystemResponse> response = new HashSet<OperatingSystemResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4489,Set<OperatingSystemResponse> responses = new HashSet<OperatingSystemResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4567,Set<RootServiceResponse> response = new HashSet<RootServiceResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4590,Set<RootServiceComponentResponse> response = new HashSet<RootServiceComponentResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4710,Map<String, String> rcaParameters = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4893,List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4924,layoutUserWidgetEntities = new LinkedList<WidgetLayoutUserWidgetEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4994,Map<String,String> properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,5026,Set<String> propertiesToCheck = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,22,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,195,private static final String COMMAND_PARAM_VERSION = VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,196,private static final String COMMAND_PARAM_CLUSTER_NAME = "clusterName";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,197,private static final String COMMAND_PARAM_DIRECTION = "upgrade_direction";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,198,private static final String COMMAND_PARAM_UPGRADE_PACK = "upgrade_pack";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,199,private static final String COMMAND_PARAM_REQUEST_ID = "request_id";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,204,private static final String COMMAND_PARAM_TASKS = "tasks";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,205,private static final String COMMAND_PARAM_STRUCT_OUT = "structured_out";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,206,private static final String COMMAND_DOWNGRADE_FROM_VERSION = "downgrade_from_version";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,213,private static final String COMMAND_PARAM_ORIGINAL_STACK = "original_stack";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,220,private static final String COMMAND_PARAM_TARGET_STACK = "target_stack";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,384,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,403,List<UpgradeEntity> upgrades = new ArrayList<UpgradeEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,787,final String version = (String) requestMap.get(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,796,StackId sourceStackId = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,797,StackId targetStackId = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,802,switch (direction) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,803,case UPGRADE:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,804,sourceStackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,806,RepositoryVersionEntity targetRepositoryVersion = s_repoVersionDAO.findByStackNameAndVersion(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,807,sourceStackId.getStackName(), version);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,813,targetStackId = targetRepositoryVersion.getStackId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,814,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,815,case DOWNGRADE:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,816,sourceStackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,817,targetStackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,818,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1122,Set<String> skipConfigTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1123,Set<String> upgradePackServices = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1124,Set<String> upgradePackConfigTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1146,Set<String> servicesNotInUpgradePack = new HashSet<String>(stackServicesMap.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1358,new ArrayList<String>(wrapper.getHosts()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1361,Map<String, String> params = getNewParameterMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1362,params.put(COMMAND_PARAM_TASKS, entity.getTasks());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1363,params.put(COMMAND_PARAM_VERSION, context.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1364,params.put(COMMAND_PARAM_DIRECTION, context.getDirection().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1365,params.put(COMMAND_PARAM_ORIGINAL_STACK, context.getOriginalStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1366,params.put(COMMAND_PARAM_TARGET_STACK, context.getTargetStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1367,params.put(COMMAND_DOWNGRADE_FROM_VERSION, context.getDowngradeFromVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1448,List<RequestResourceFilter> filters = new ArrayList<RequestResourceFilter>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1453,new ArrayList<String>(tw.getHosts())));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1469,Map<String, String> commandParams = getNewParameterMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1479,commandParams.put(COMMAND_PARAM_VERSION, context.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1480,commandParams.put(COMMAND_PARAM_DIRECTION, context.getDirection().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1481,commandParams.put(COMMAND_PARAM_ORIGINAL_STACK, context.getOriginalStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1482,commandParams.put(COMMAND_PARAM_TARGET_STACK, context.getTargetStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1483,commandParams.put(COMMAND_DOWNGRADE_FROM_VERSION, context.getDowngradeFromVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1516,Map<String, String> requestParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1529,List<RequestResourceFilter> filters = new ArrayList<RequestResourceFilter>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1537,Map<String, String> commandParams = getNewParameterMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1538,commandParams.put(COMMAND_PARAM_VERSION, context.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1539,commandParams.put(COMMAND_PARAM_DIRECTION, context.getDirection().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1540,commandParams.put(COMMAND_PARAM_ORIGINAL_STACK, context.getOriginalStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1541,commandParams.put(COMMAND_PARAM_TARGET_STACK, context.getTargetStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1542,commandParams.put(COMMAND_DOWNGRADE_FROM_VERSION, context.getDowngradeFromVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1577,Map<String, String> requestParams = getNewParameterMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1604,Map<String, String> commandParams = getNewParameterMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1605,commandParams.put(COMMAND_PARAM_CLUSTER_NAME, cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1606,commandParams.put(COMMAND_PARAM_VERSION, context.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1607,commandParams.put(COMMAND_PARAM_DIRECTION, context.getDirection().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1608,commandParams.put(COMMAND_PARAM_ORIGINAL_STACK, context.getOriginalStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1609,commandParams.put(COMMAND_PARAM_TARGET_STACK, context.getTargetStackId().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1610,commandParams.put(COMMAND_DOWNGRADE_FROM_VERSION, context.getDowngradeFromVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1611,commandParams.put(COMMAND_PARAM_UPGRADE_PACK, upgradePack.getName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1632,commandParams.put(COMMAND_PARAM_STRUCT_OUT, mt.structuredOut);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1738,private Map<String, String> getNewParameterMap(RequestStageContainer requestStageContainer) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1739,Map<String, String> parameters = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1740,parameters.put(KeyNames.REFRESH_CONFIG_TAGS_BEFORE_EXECUTION, "true");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1741,parameters.put(COMMAND_PARAM_REQUEST_ID, String.valueOf(requestStageContainer.getId()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1809,List<Long> taskIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,40,private String m_version;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,67,private List<ServiceComponentHost> m_unhealthy = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,68,private Map<String, String> m_serviceNames = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,69,private Map<String, String> m_componentNames = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,568,Map<Long, ConfigGroup> configGroups = new HashMap<Long, ConfigGroup>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,931,Map<String, Set<String>> componentHostMap = new HashMap<String, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,951,componentHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,968,ArrayList<ServiceComponentHost> foundItems = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1347,Map<String, HostVersionEntity> existingHostToHostVersionEntity = new HashMap<String, HostVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1414,Set<String> existingHostsWithClusterStackAndVersion = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1415,HashMap<String, HostVersionEntity> existingHostStackVersions = new HashMap<String, HostVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1622,Set<String> hostsWithoutHostVersion = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1623,Map<RepositoryVersionState, Set<String>> stateToHosts = new HashMap<RepositoryVersionState, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1630,Set<String> hostsWithState = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1645,Set<String> hostsInState = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1855,Set<RepositoryVersionState> allowedStates = new HashSet<RepositoryVersionState>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2124,List<Config> list = new ArrayList<Config>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2427,Map<Long, String> hostIdToName = new HashMap<Long, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2434,List<DesiredConfig.HostOverride> hostOverrides = new ArrayList<DesiredConfig.HostOverride>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2575,Map<String, Collection<ServiceConfigVersionResponse>> map = new HashMap<String, Collection<ServiceConfigVersionResponse>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2596,List<ServiceConfigVersionResponse> serviceConfigVersionResponses = new ArrayList<ServiceConfigVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2652,Set<ServiceConfigVersionResponse> responses = new HashSet<ServiceConfigVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2665,List<ServiceConfigEntity> activeServiceConfigVersions = new ArrayList<ServiceConfigEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2681,List<ServiceConfigEntity> activeServiceConfigVersionEntities = new ArrayList<ServiceConfigEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2682,List<ServiceConfigVersionResponse> activeServiceConfigVersionResponses = new ArrayList<ServiceConfigVersionResponse>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2778,Map<String, Config> groupDesiredConfigs = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2785,Map<Long, Host> groupDesiredHosts = new HashMap<Long, Host>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2963,Map<Long, Map<String, DesiredConfig>> desiredConfigsByHost = new HashMap<Long, Map<String, DesiredConfig>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3029,Map<ServiceComponentHostEvent, String> failedEvents = new HashMap<ServiceComponentHostEvent, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3265,Map<String, Object>  sessionAttributes = new HashMap<String, Object>(getSessionAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3274,Map<String, Object> sessionAttributes = new HashMap<String, Object>(getSessionAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3283,Map<String, Object> sessionAttributes = new HashMap<String, Object>(getSessionAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3442,List<ClusterConfigEntity> removedClusterConfigs = new ArrayList<ClusterConfigEntity>(50);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,76,intializeLogFeederFilter();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,86,private void intializeLogFeederFilter() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,87,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,88,getUserFilter();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,24,import org.apache.ambari.logsearch.solr.commands.CreateSaslUsersZkCommand;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,40,import org.apache.commons.lang.StringUtils;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,139,public String addSaslUsers() throws Exception {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,140,LOG.info("Add sasl user to znode: {}", this.saslUsers);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,141,String newUsers = new CreateSaslUsersZkCommand(getRetryTimes(), getInterval()).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,142,if (StringUtils.isNotEmpty(newUsers)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,143,LOG.info("New sasl users added to znode: {}", newUsers);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,145,return newUsers;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,19,package org.apache.ambari.logsearch.solr.commands;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,21,import org.apache.ambari.logsearch.solr.AmbariSolrCloudClient;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,22,import org.apache.ambari.logsearch.solr.util.AclUtils;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,23,import org.apache.commons.lang.StringUtils;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,24,import org.apache.solr.common.cloud.SolrZkClient;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,25,import org.apache.solr.common.cloud.SolrZooKeeper;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,26,import org.apache.zookeeper.ZooDefs;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,27,import org.apache.zookeeper.data.ACL;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,28,import org.apache.zookeeper.data.Id;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,29,import org.apache.zookeeper.data.Stat;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,32,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,33,import java.util.List;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,34,import java.util.Set;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,36,public class CreateSaslUsersZkCommand extends AbstractZookeeperRetryCommand<String> {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,38,public CreateSaslUsersZkCommand(int maxRetries, int interval) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,39,super(maxRetries, interval);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,43,protected String executeZkCommand(AmbariSolrCloudClient client, SolrZkClient zkClient, SolrZooKeeper solrZooKeeper) throws Exception {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,44,List<ACL> acls = solrZooKeeper.getACL(client.getZnode(), new Stat());
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,45,List<String> newUsers = new ArrayList<>();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,46,Set<String> existingUsers = AclUtils.getUsersFromAclData(acls);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,47,String saslUsers = client.getSaslUsers();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,48,if (StringUtils.isNotEmpty(saslUsers)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,49,String[] saslUserNames = saslUsers.split(",");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,50,for (String saslUser : saslUserNames) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,51,if (!existingUsers.contains(saslUser)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,53,acls.add(new ACL(ZooDefs.Perms.ALL, new Id("sasl", saslUser)));
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,54,newUsers.add(saslUser);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,58,solrZooKeeper.setACL(client.getZnode(), acls, -1);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,59,return StringUtils.join(newUsers, ",");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,30,public static Set<String> getUsersFromAclData(List<ACL> acls) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,31,Set<String> result = new HashSet<>();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,32,if (!acls.isEmpty()) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,33,for (ACL acl : acls) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,34,String username = "";
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,35,String id = acl.getId().getId();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,36,String[] splitted = id.split(":");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,37,if (splitted.length > 1) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,38,username = splitted[0];
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,40,username = id;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,42,result.add(username);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,45,return result;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,48,public static List<ACL> updatePermissionForScheme(List<ACL> acls, String scheme, int permission) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,49,List<ACL> aclResult = new ArrayList<>();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,50,if (!acls.isEmpty()) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,51,for (ACL acl : acls) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,52,int permissionToAdd = scheme.equals(acl.getId().getScheme()) ? permission : acl.getPerms();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,53,acl.setPerms(permissionToAdd);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,54,aclResult.add(acl);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,57,return aclResult;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,125,withChangedConfigurations(changedConfigurations).build();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,127,LOG.warn("Error occured during preparation of stack advisor request", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,216,if (keyValuePairs.isEmpty() && transfers.isEmpty() && replacements.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,217,String message = "cluster={0}, type={1}, transfers={2}, replacements={3}, configurations={4}";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,219,keyValuePairs);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,232,|| (keyValuePairs.isEmpty() && transfers.isEmpty() && replacements.isEmpty())) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,233,String message = "cluster={0}, type={1}, transfers={2}, replacements={3}, configurations={4}";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,234,message = MessageFormat.format(message, clusterName, configType, transfers, replacements, keyValuePairs);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,254,Map<String, String> newValues = new HashMap<String, String>(base);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,290,List<String> quotedValues = new ArrayList<String>(splitValues.length);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,309,outputBuffer.append(MessageFormat.format("Created {0}/{1} = \"{2}\"\n", configType,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,322,outputBuffer.append(MessageFormat.format("Renamed {0}/{1} to {2}/{3}\n", configType,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,329,outputBuffer.append(MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,340,outputBuffer.append(MessageFormat.format("Deleted all keys from {0}\n", configType));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,347,outputBuffer.append(MessageFormat.format("Preserved {0}/{1} after delete\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,348,configType, keeper));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,361,outputBuffer.append(MessageFormat.format("Preserved {0}/{1} after delete\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,372,outputBuffer.append(MessageFormat.format("Deleted {0}/{1}\n", configType,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,392,outputBuffer.append(MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,412,message = MessageFormat.format("{0}/{1} changed to \"{2}\"\n", configType, key,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,416,outputBuffer.append(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,428,outputBuffer.append(MessageFormat.format("String \"{0}\" was not found in {1}/{2}\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,435,outputBuffer.append(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,439,outputBuffer.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,442,outputBuffer.append(MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,445,outputBuffer.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,495,List<String> result = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,522,Set<String> stackPropertiesForType = new HashSet<String>(50);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,109,private Gson m_gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,258,return "Set{" +
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,380,public List<String> keepKeys = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,385,return "Transfer{" +
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,430,return "Replace{" +
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,33,import org.apache.ambari.server.state.Config;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,34,import org.apache.ambari.server.state.DesiredConfig;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,337,private String getDesiredConfigurationValue(Cluster cluster,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,338,String configType, String propertyKey) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,340,Map<String, DesiredConfig> desiredConfigs = cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,341,DesiredConfig desiredConfig = desiredConfigs.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,342,if (null == desiredConfig) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,343,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,346,Config config = cluster.getConfig(configType, desiredConfig.getTag());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,347,if (null == config) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,348,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,351,return config.getProperties().get(propertyKey);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,922,s_upgradeHelper.putComponentsToUpgradingState(version, targetComponents);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,58,private static final String UNKNOWN_VERSION = State.UNKNOWN.toString();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,772,Map<Service, Set<ServiceComponent>> targetServices) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,776,if (serviceComponent.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,777,for (ServiceComponentHost serviceComponentHost: serviceComponent.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,778,serviceComponentHost.setUpgradeState(UpgradeState.IN_PROGRESS);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,780,serviceComponent.setDesiredVersion(version);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,249,List<Replace> replacements = definition.getReplacements();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,987,LOG.info("Auto creating instance of view " + viewName + " for cluster " + clusterName + ".");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,988,ViewInstanceEntity viewInstanceEntity = createViewInstanceEntity(viewEntity, viewConfig, autoConfig);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,989,viewInstanceEntity.setClusterHandle(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,990,installViewInstance(viewInstanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1811,LOG.info("Auto creating instance of view " + viewName + " for cluster " + clusterName + ".");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1812,ViewInstanceEntity viewInstanceEntity = createViewInstanceEntity(viewEntity, viewConfig, autoInstanceConfig);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1813,viewInstanceEntity.setClusterHandle(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1814,installViewInstance(viewInstanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ClusterImpl.java,23,import org.apache.ambari.view.ClusterType;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,63,response.put("files", getApi(context).fileStatusToJSON(getApi(context).listdir(path)));
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,64,response.put("meta", getApi(context).fileStatusToJSON(getApi(context).getFileStatus(path)));
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,86,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,89,result = Response.ok(getApi(context).fileStatusToJSON(api
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,113,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,116,result = Response.ok(getApi(context).fileStatusToJSON(api
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,141,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,195,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,243,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,246,result = Response.ok(getApi(context).fileStatusToJSON(api.getFileStatus(request.path)));
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,267,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,289,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,346,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/HdfsService.java,21,import javax.ws.rs.WebApplicationException;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/HdfsService.java,22,import javax.xml.bind.annotation.XmlRootElement;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/HdfsService.java,90,public HdfsApi getApi(ViewContext context) {
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/HdfsService.java,93,_api = HdfsUtil.connectToHDFSApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,21,import java.io.IOException;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,22,import java.io.InputStream;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,23,import java.util.zip.ZipEntry;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,24,import java.util.zip.ZipInputStream;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,26,import javax.ws.rs.*;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,27,import javax.ws.rs.core.MediaType;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,28,import javax.ws.rs.core.Response;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,32,import org.apache.ambari.view.commons.hdfs.HdfsService;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,36,import com.sun.jersey.core.header.FormDataContentDisposition;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,37,import com.sun.jersey.multipart.FormDataParam;
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,58,out = getApi(context).create(filePath, false);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,120,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UploadService.java,130,return Response.ok(getApi(context).fileStatusToJSON(api.listdir(path))).build();
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UserService.java,56,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UserService.java,76,HdfsApi api = getApi(context);
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/UserService.java,94,HdfsApi api = getApi(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,21,import java.io.File;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,22,import java.io.FileNotFoundException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,23,import java.io.IOException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,24,import java.io.OutputStream;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,25,import java.net.FileNameMap;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,26,import java.net.URLConnection;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,27,import java.util.Arrays;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,28,import java.util.LinkedList;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,29,import java.util.Queue;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,30,import java.util.UUID;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,31,import java.util.zip.ZipEntry;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,32,import java.util.zip.ZipOutputStream;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,50,import com.google.gson.Gson;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,51,import org.apache.ambari.view.commons.exceptions.MisconfigurationFormattedException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,52,import org.apache.ambari.view.commons.exceptions.NotFoundFormattedException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,53,import org.apache.ambari.view.commons.exceptions.ServiceFormattedException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,54,import org.apache.ambari.view.commons.hdfs.HdfsService;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,55,import org.apache.ambari.view.utils.hdfs.HdfsApi;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,56,import org.apache.ambari.view.utils.hdfs.HdfsApiException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,57,import org.apache.ambari.view.utils.hdfs.HdfsUtil;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,58,import org.apache.hadoop.fs.FSDataInputStream;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,59,import org.apache.hadoop.fs.FileStatus;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,60,import org.apache.ambari.view.ViewContext;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,61,import org.apache.hadoop.security.AccessControlException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,62,import org.json.simple.JSONObject;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,63,import org.slf4j.Logger;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,64,import org.slf4j.LoggerFactory;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,95,HdfsApi api = getApi(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,130,FSDataInputStream in = getApi(context).open(path);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,188,HdfsApi api = getApi(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,252,in = getApi(context).open(path);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,383,String json = HdfsUtil.readFile(getApi(context), fileName);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,402,HdfsUtil.putStringToFile(getApi(context), fileName, json);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,419,getApi(context).delete(fileName, true);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,21,import javax.ws.rs.Path;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,23,import org.apache.ambari.view.ViewContext;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,44,return new DownloadService(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,53,return new UploadService(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,62,return new FileOperationService(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,71,return new HelpService(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,79,public UserService userService() { return new UserService(context); }
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileBrowserService.java,87,return new FilePreviewService(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FilePreviewService.java,66,HdfsApi api = getApi(context);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HelpService.java,27,import org.apache.ambari.view.ViewContext;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HelpService.java,28,import org.apache.ambari.view.commons.hdfs.HdfsService;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HelpService.java,29,import org.json.simple.JSONObject;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/internal/HdfsApiSupplier.java,47,HdfsApi api = HdfsUtil.connectToHDFSApi(context);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,229,HdfsApi api = HdfsUtil.connectToHDFSApi(context);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,244,UserService userservice = new UserService(context);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/utils/SharedObjectsFactory.java,126,localObjects.get(HdfsApi.class).put(getTagName(), HdfsUtil.connectToHDFSApi(context));
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/files/FileService.java,216,HdfsApi api = HdfsUtil.connectToHDFSApi(context);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/files/FileService.java,234,UserService  userservice = new UserService(context);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/utils/UserLocalObjects.java,58,return HdfsUtil.connectToHDFSApi(context);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,22,import org.apache.ambari.view.utils.ambari.AmbariApi;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,23,import org.apache.ambari.view.utils.ambari.NoClusterAssociatedException;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,26,import org.apache.hadoop.fs.LocalFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,27,import org.apache.hadoop.fs.azure.NativeAzureFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,28,import org.apache.hadoop.fs.azure.Wasb;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,29,import org.apache.hadoop.hdfs.DistributedFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,30,import org.apache.hadoop.hdfs.web.SWebHdfsFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,31,import org.apache.hadoop.hdfs.web.WebHdfsFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,50,public static final String DEFAULT_FS_CLUSTER_PROPERTY  = "fs.defaultFS";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,53,public static final String NAMESERVICES_CLUSTER_PROPERTY  = "dfs.nameservices";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,56,public static final String HA_NAMENODES_CLUSTER_PROPERTY  = "dfs.ha.namenodes.%s";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,59,public static final String NAMENODE_RPC_NN_CLUSTER_PROPERTY   = "dfs.namenode.rpc-address.%s.%s";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,63,public static final String NAMENODE_HTTP_NN_CLUSTER_PROPERTY   = "dfs.namenode.http-address.%s.%s";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,67,public static final String NAMENODE_HTTPS_NN_CLUSTER_PROPERTY   = "dfs.namenode.https-address.%s.%s";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,70,public static final String FAILOVER_PROXY_PROVIDER_CLUSTER_PROPERTY  = "dfs.client.failover.proxy.provider.%s";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,131,if(context.getCluster() != null){
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,137,Boolean webHdfsEnabled = Boolean.valueOf(getProperty(HDFS_SITE,DFS_WEBHDFS_ENABLED));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,138,Boolean isHttps = DFS_HTTP_POLICY_HTTPS_ONLY.equals(getProperty(HDFS_SITE,DFS_HTTP_POLICY));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,142,if(webHdfsEnabled && isHttps){
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,144,String httpAddr = getProperty(HDFS_SITE,DFS_NAMENODE_HTTPS_ADDERSS);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,145,if(!isHA && httpAddr != null) hostWithPort = httpAddr ;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,148,String httpsAddr = getProperty(HDFS_SITE,DFS_NAMENODE_HTTP_ADDERSS);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,149,if(!isHA) hostWithPort = httpsAddr;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,152,return protocol + "://" +hostWithPort;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,154,throw new HdfsApiException("Invalid URI format."+e.getMessage(),e);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,163,if(context.getCluster() != null) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,171,private String getProperty(String type,String key){
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,172,if(context.getCluster() != null){
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,173,return context.getCluster().getConfigurationValue(type,key);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,181,if(context.getCluster() != null) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,200,HA_NAMENODES_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,208,NAMENODE_RPC_NN1_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,210,NAMENODE_HTTP_NN1_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,216,NAMENODE_RPC_NN2_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,218,NAMENODE_HTTP_NN2_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,223,FAILOVER_PROXY_PROVIDER_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,239,HA_NAMENODES_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,285,if(umask != null && !umask.isEmpty()) conf.set(UMASK_CLUSTER_PROPERTY,umask);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,287,conf.set("fs.hdfs.impl", DistributedFileSystem.class.getName());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,288,conf.set("fs.webhdfs.impl", WebHdfsFileSystem.class.getName());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,289,conf.set("fs.file.impl", LocalFileSystem.class.getName());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,290,conf.set("fs.swebhdfs.impl", SWebHdfsFileSystem.class.getName());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,292,configureWASB();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,293,configureADL();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,301,public void configureWASB() {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,302,LOG.debug("defaultFsUri.getScheme() == " + defaultFsUri.getScheme());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,303,if (defaultFsUri.getScheme().equals("wasb")) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,304,conf.set("fs.AbstractFileSystem.wasb.impl", Wasb.class.getName());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,305,conf.set("fs.wasb.impl", NativeAzureFileSystem.class.getName());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,307,String account = defaultFsUri.getHost();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,308,LOG.debug("WASB account == " + account);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,309,copyPropertyIfExists(CORE_SITE, "fs.azure.account.key." + account);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,310,copyPropertyIfExists(CORE_SITE, "fs.azure.account.keyprovider." + account);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,311,copyPropertyIfExists(CORE_SITE, "fs.azure.shellkeyprovider.script");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,318,public void configureADL() {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,319,if (defaultFsUri.getScheme().equals("adl")) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,320,conf.set("fs.adl.impl", "com.microsoft.azure.datalake.store.AdlFileSystem");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,321,copyPropertyIfExists(CORE_SITE,"dfs.webhdfs.oauth2.access.token.provider");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,322,copyPropertyIfExists(CORE_SITE,"fs.azure.datalake.token.provider.service.urls");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,323,copyPropertyIfExists(CORE_SITE,"fs.azure.datalake.token.provider.script");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,22,import org.apache.hadoop.fs.*;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,26,import java.io.FileNotFoundException;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,27,import java.io.IOException;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,28,import java.net.URI;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,29,import java.net.URISyntaxException;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,30,import java.security.PrivilegedExceptionAction;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,31,import java.util.*;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,33,import org.apache.hadoop.hdfs.DistributedFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,34,import org.apache.hadoop.hdfs.web.WebHdfsFileSystem;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,35,import org.apache.hadoop.security.Credentials;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,41,import javax.security.auth.Subject;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,30,import java.util.HashMap;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,116,HdfsApi api = null;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,118,Thread.currentThread().setContextClassLoader(null);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,121,AuthConfigurationBuilder authConfigurationBuilder = new AuthConfigurationBuilder(context);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,123,Map<String, String> authParams = authConfigurationBuilder.build();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,124,configurationBuilder.setAuthParams(authParams);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,126,try {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,127,api = new HdfsApi(configurationBuilder, getHdfsUsername(context));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,128,LOG.info("HdfsApi connected OK");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,130,String message = "HDFS040 Couldn't open connection to HDFS";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,131,LOG.error(message);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,132,throw new HdfsApiException(message, e);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,134,String message = "HDFS041 Couldn't open connection to HDFS";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,135,LOG.error(message);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,136,throw new HdfsApiException(message, e);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,138,return api;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,140,finally {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/FileServices.java,20,import javax.ws.rs.Path;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/FileServices.java,41,return new UploadService(context);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/FileServices.java,50,return new FileOperationService(context);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/FileServices.java,59,return new UserService(context);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapperBuilder.java,216,interim = preTasks ?
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapperBuilder.java,217,(null == pc.preDowngradeTasks ? pc.preTasks : pc.preDowngradeTasks) :
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapperBuilder.java,218,(null == pc.postDowngradeTasks ? pc.postTasks : pc.postDowngradeTasks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapperBuilder.java,221,if (null == interim || interim.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,399,Map<String, RoleStats> roleStats = processInProgressStage(stage, commandsToSchedule);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,498,actionQueue.enqueue(cmd.getHostname(), cmd);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,826,cancelCommandOnTimeout(Collections.singletonList(s.getHostRoleCommand(host, roleStr)));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1200,void cancelCommandOnTimeout(Collection<HostRoleCommand> hostRoleCommands) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1209,actionQueue.enqueue(hostRoleCommand.getHostName(), cancelCommand);
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,74,q.add(cmd);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,21,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,32,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,33,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,34,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/UpgradeResourceDefinition.java,31,public static String DOWNGRADE_DIRECTIVE           = "downgrade";
ambari-server/src/main/java/org/apache/ambari/server/api/resources/UpgradeResourceDefinition.java,42,Collections.singletonMap(DirectiveType.CREATE, Arrays.asList(DOWNGRADE_DIRECTIVE, SKIP_SERVICE_CHECKS_DIRECTIVE)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,50,import org.apache.ambari.server.api.resources.UpgradeResourceDefinition;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,338,final Map<String, String> requestInfoProps = request.getRequestInfoProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1798,UpgradeEntity lastUpgradeItemForCluster = s_upgradeDAO.findLastUpgradeOrDowngradeForCluster(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1799,lastUpgradeItemForCluster.setSuspended(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1800,s_upgradeDAO.merge(lastUpgradeItemForCluster);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1230,List<HostRoleStatus> UNFINISHED_STATUSES = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1231,UNFINISHED_STATUSES.add(HostRoleStatus.PENDING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1232,UNFINISHED_STATUSES.add(HostRoleStatus.ABORTED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1235,mostRecentUpgrade.getRequestId(), UNFINISHED_STATUSES);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,115,public void setForeignKeys(TreeMap<String, String> foreignKeys) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,137,public static String serializeForeignKeys(TreeMap<String, String> foreignKeys) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,87,public HostVersionOutOfSyncListener(AmbariEventPublisher ambariEventPublisher) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,105,StackId hostStackId = new StackId(hostStackEntity.getStackName(), hostStackEntity.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,118,if (hostVersionEntity.getState().equals(RepositoryVersionState.INSTALLED)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,119,hostVersionEntity.setState(RepositoryVersionState.OUT_OF_SYNC);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,120,hostVersionDAO.get().merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,121,cluster.recalculateClusterVersionState(hostVersionEntity.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,44,public class RoleCommandOrder {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,53,private final static String GLUSTERFS_DEPS_KEY = "optional_glusterfs";
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,54,private final static String NO_GLUSTERFS_DEPS_KEY = "optional_no_glusterfs";
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,55,private final static String NAMENODE_HA_DEPS_KEY = "namenode_optional_ha";
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,56,private final static String RESOURCEMANAGER_HA_DEPS_KEY = "resourcemanager_optional_ha";
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,57,private final static String COMMENT_STR = "_comment";
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,62,private static final Set<RoleCommand> independentCommands =
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,63,new HashSet<RoleCommand>() {{
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,64,add(RoleCommand.START);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,65,add(RoleCommand.EXECUTE);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,66,add(RoleCommand.SERVICE_CHECK);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,130,RoleCommand blockedCommand, Role blockerRole, RoleCommand blockerCommand) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,133,if (this.dependencies.get(rcp1) == null) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,134,this.dependencies.put(rcp1, new HashSet<RoleCommandPair>());
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,136,this.dependencies.get(rcp1).add(rcp2);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,140,if(jsonSection == null) // in case we don't have a certain section or role_command_order.json at all.
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,158,addDependency(
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,159,Role.valueOf(blockedRole), RoleCommand.valueOf(blockedCommand),
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,160,Role.valueOf(blockerRole), RoleCommand.valueOf(blockerCommand));
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,165,public void initialize(Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,207,if (hasGLUSTERFS) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,208,Map<String,Object> glusterfsSection =
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,209,(Map<String, Object>) userData.get(GLUSTERFS_DEPS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,210,addDependencies(glusterfsSection);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,212,Map<String,Object> noGlusterFSSection =
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,213,(Map<String, Object>) userData.get(NO_GLUSTERFS_DEPS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,214,addDependencies(noGlusterFSSection);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,216,if (isNameNodeHAEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,217,Map<String,Object> NAMENODEHASection =
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,218,(Map<String, Object>) userData.get(NAMENODE_HA_DEPS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,219,addDependencies(NAMENODEHASection);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,221,if (isResourceManagerHAEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,222,Map<String,Object> ResourceManagerHASection =
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,223,(Map<String, Object>) userData.get(RESOURCEMANAGER_HA_DEPS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,224,addDependencies(ResourceManagerHASection);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,242,&& (this.dependencies.get(rcp1).contains(rcp2))) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,245,&& (this.dependencies.get(rcp2).contains(rcp1))) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,267,Set<RoleCommandPair> deps = this.dependencies.get(rcp);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,291,for (Map.Entry<RoleCommandPair, Set<RoleCommandPair>> roleCommandPairSetEntry : this.dependencies.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,294,for (RoleCommandPair directlyBlockedOn : this.dependencies.get(roleCommandPairSetEntry.getKey())) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,299,this.dependencies.get(roleCommandPairSetEntry.getKey()).addAll(transitiveDependencies);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,306,if (this.dependencies.get(rcp) != null) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,307,for (RoleCommandPair blockedOn : this.dependencies.get(rcp)) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,357,if (!this.dependencies.keySet().equals(rco.dependencies.keySet())){
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,365,for (Map.Entry<RoleCommandPair, Set<RoleCommandPair>> roleCommandPairSetEntry : this.dependencies.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,366,v1 = this.dependencies.get(roleCommandPairSetEntry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,100,List<String> keys = Arrays.asList(GENERAL_DEPS_KEY, GLUSTERFS_DEPS_KEY,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,101,NO_GLUSTERFS_DEPS_KEY, NAMENODE_HA_DEPS_KEY, RESOURCEMANAGER_HA_DEPS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,122,else
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,123,valueList.add(value.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,125,values = valueList;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,137,this.content = mergedRoleCommandOrders;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/StackRoleCommandOrder.java,156,buffer.append(",");
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,29,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,30,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,31,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,32,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,55,this.roleDependencies = rd;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,65,graph = new TreeMap<String, RoleGraphNode>();
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,123,LOG.debug(this.stringifyGraph());
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,138,if (this.sameHostOptimization) {
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,153,for (RoleGraphNode edgeNode: nodeToRemove.getEdges()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapper.java,20,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapper.java,98,return service + ":" + component + ":" + tasks + ":" + hosts;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,49,private static final String SETUP_KERBEROS = "setup-kerberos";
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,51,private static final String CREATE_SASL_USERS = "create-sasl-users";
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,62,+ "\n./solrCloudCli.sh --create-sasl-users -z host1:2181,host2:2181 -zn /ambari-solr -csu logsearch,atlas,ranger"
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,63,+ "\n./solrCloudCli.sh --setup-kerberos -z host1:2181,host2:2181 --secure -zn /ambari-solr-secure -cfz /ambari-solr-unsecure -jf /etc/path/my_jaas.conf"
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,345,options.addOption(setupKerberosOption);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,348,options.addOption(createSaslUsersOption);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,384,command = SETUP_KERBEROS;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,385,validateRequiredOptions(cli, command, zkConnectStringOption, copyFromZnodeOption);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,387,command = CREATE_SASL_USERS;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,388,validateRequiredOptions(cli, command, zkConnectStringOption, znodeOption, jaasFileOption);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,397,DOWNLOAD_CONFIG_COMMAND, CONFIG_CHECK_COMMAND, SET_CLUSTER_PROP, CREATE_ZNODE, SETUP_KERBEROS,
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,398,CHECK_ZNODE, CREATE_SASL_USERS, SETUP_KERBEROS_PLUGIN);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,427,String copyFromZnode = cli.hasOption("cfz") ? cli.getOptionValue("cfz") : null;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,428,String saslUsers = cli.hasOption("su") ? cli.getOptionValue("su") : null;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,457,AmbariSolrCloudClient solrCloudClient = null;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,498,case SETUP_KERBEROS:
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,499,solrCloudClient = clientBuilder.build();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,500,if (solrCloudClient.isSecure()) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,501,solrCloudClient.enableKerberos();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,503,solrCloudClient.disableKerberos();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,505,break;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,506,case CREATE_SASL_USERS:
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,507,solrCloudClient = clientBuilder.build();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,508,solrCloudClient.addSaslUsers();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudCLI.java,509,break;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,22,import org.apache.ambari.logsearch.solr.commands.CopyZnodeZkCommand;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,31,import org.apache.ambari.logsearch.solr.commands.GetStateFileZkCommand;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,35,import org.apache.ambari.logsearch.solr.commands.UpdateStateFileZkCommand;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,38,import org.apache.ambari.logsearch.solr.domain.AmbariSolrState;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,77,private final String copyFromZnode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,100,this.copyFromZnode = builder.copyFromZnode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,183,public void enableKerberos() throws Exception {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,184,LOG.info("Trying to enable kerberos from solr-client");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,185,AmbariSolrState actualState = new GetStateFileZkCommand(getRetryTimes(), getInterval(), this.copyFromZnode).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,186,if (AmbariSolrState.UNSECURE.equals(actualState)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,187,LOG.info("Enable kerberos. Copy unsecure znode ('{}') content to secure ('{}')", this.znode, this.copyFromZnode);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,188,new CopyZnodeZkCommand(getRetryTimes(), getInterval()).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,189,LOG.info("Copying contents from unsecure znode to secure znode has done.");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,190,setupKerberosPlugin();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,191,new SecureZNodeZkCommand(getRetryTimes(), getInterval()).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,192,LOG.info("Set world:anyone permission to READ only.");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,193,AmbariSolrState state = new UpdateStateFileZkCommand(getRetryTimes(), getInterval(), this.copyFromZnode).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,194,LOG.info("Enabling kerberos successful, state: {}", state);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,196,LOG.info("It is not needed to enable kerberos.");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,200,public void disableKerberos() throws Exception {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,201,LOG.info("Trying to disable kerberos from solr-client");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,202,AmbariSolrState actualState = new GetStateFileZkCommand(getRetryTimes(), getInterval(), this.znode).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,203,if (AmbariSolrState.SECURE.equals(actualState)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,204,LOG.info("Disable kerberos. Copy secure znode ('{}') content to unsecure ('{}')");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,205,new CopyZnodeZkCommand(getRetryTimes(), getInterval()).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,206,LOG.info("Copying contents from secure znode to unsecure znode has done.");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,207,AmbariSolrState state = new UpdateStateFileZkCommand(getRetryTimes(), getInterval(), this.znode).run(this);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,208,LOG.info("Set new state: {}", state);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,210,LOG.info("It is not needed to disable kerberos.");
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,365,public String getCopyFromZnode() {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClient.java,366,return copyFromZnode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClientBuilder.java,55,String copyFromZnode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClientBuilder.java,204,public AmbariSolrCloudClientBuilder withCopyFromZnode(String copyFromZnode) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClientBuilder.java,205,this.copyFromZnode = copyFromZnode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/AmbariSolrCloudClientBuilder.java,206,return this;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,19,package org.apache.ambari.logsearch.solr.commands;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,21,import org.apache.ambari.logsearch.solr.AmbariSolrCloudClient;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,22,import org.apache.solr.common.cloud.SolrZkClient;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,23,import org.apache.solr.common.cloud.SolrZooKeeper;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,24,import org.apache.zookeeper.CreateMode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,25,import org.slf4j.Logger;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,26,import org.slf4j.LoggerFactory;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,28,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,29,import java.util.List;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,31,public class CopyZnodeZkCommand extends AbstractZookeeperRetryCommand<Boolean> {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,33,private static final Logger LOG = LoggerFactory.getLogger(CopyZnodeZkCommand.class);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,35,public CopyZnodeZkCommand(int maxRetries, int interval) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,36,super(maxRetries, interval);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,41,throws Exception {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,42,String znode = client.getZnode();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,43,String znodeCopyFromZnode = client.getCopyFromZnode();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,44,List<String> children = solrZooKeeper.getChildren(znodeCopyFromZnode, true);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,45,children = filterRootChildren(children);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,46,copyConent(znodeCopyFromZnode, znode, children, zkClient);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,47,return true;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,51,throws Exception {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,52,if (!children.isEmpty()) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,53,for (String child : children) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,54,String srcPath = String.format("%s/%s", srcParentPath, child);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,55,String destPath = String.format("%s/%s", destParentPath, child);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,56,byte[] data = zkClient.getData(srcPath, null, null, true);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,57,if (zkClient.exists(destPath, true)) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,58,zkClient.setData(destPath, data, true);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,60,zkClient.create(destPath, data, CreateMode.PERSISTENT, true);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,62,LOG.info("Copy file from '{}' to '{}'", srcPath, destPath);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,63,copyConent(srcPath, destPath, zkClient.getChildren(srcPath, null, true), zkClient);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,68,private List<String> filterRootChildren(List<String> children) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,69,List<String> filteredResult = new ArrayList<>();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,70,if (!children.isEmpty()) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,71,for (String child : children) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,72,if (!child.equals("security.json") && !child.equals(AbstractStateFileZkCommand.STATE_FILE)){
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,73,filteredResult.add(child);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CopyZnodeZkCommand.java,77,return filteredResult;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/CreateSaslUsersZkCommand.java,31,import java.nio.charset.StandardCharsets;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,27,import org.apache.zookeeper.data.Stat;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,39,List<ACL> acls = solrZooKeeper.getACL(client.getZnode(), new Stat());
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,40,boolean isSecure = client.isSecure();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,41,boolean isPermissionDiffers = AclUtils.isPermissionDiffersForScheme(acls, "world", ZooDefs.Perms.READ);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,42,if (isSecure && isPermissionDiffers) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,43,acls = AclUtils.updatePermissionForScheme(acls, "world", ZooDefs.Perms.READ);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,44,solrZooKeeper.setACL(client.getZnode(), acls, -1);
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/SecureZNodeZkCommand.java,46,return isSecure;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,60,public static boolean isPermissionDiffersForScheme(List<ACL> acls, String scheme, int permission) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,61,boolean result = false;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,62,if (!acls.isEmpty()) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,63,for (ACL acl : acls) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,64,if (scheme.equals(acl.getId().getScheme()) && acl.getPerms() == permission) {
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,65,result = true;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/util/AclUtils.java,69,return result;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,439,ClusterVersionEntity effectiveClusterVersion = cluster.getEffectiveClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,453,if (cluster.isUpgradeSuspended()) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,530,conf.set("hadoop.security.authentication", "Kerberos");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,535,ugi.doAs(new PrivilegedExceptionAction<Void>() {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,537,public Void run() throws Exception {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,541,fs.mkdirs(src);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,543,return null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,547,logger.error("Webhdfs: ", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,587,final Configuration conf = new Configuration();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,589,conf.set("fs.hdfs.impl",
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,591,);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,592,conf.set("fs.file.impl",
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,594,);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,595,conf.set("fs.defaultFS", namenodeuri);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,596,conf.set("hadoop.job.ugi", "hdfs");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,597,conf.set("hadoop.security.authentication", "Kerberos");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,599,UserGroupInformation.setConfiguration(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,465,conf.set("hadoop.security.authentication", "Kerberos");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,470,ugi.doAs(new PrivilegedExceptionAction<Void>() {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,472,public Void run() throws Exception {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,476,fs.mkdirs(src);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,478,return null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,482,logger.error("Webhdfs: ", e);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/HelpService.java,103,ATSRequestsDelegateImpl atsimpl = new ATSRequestsDelegateImpl(context, ATSParserFactory.getATSUrl(context));
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/atsJobs/ATSParserFactory.java,23,import java.util.HashMap;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/atsJobs/ATSParserFactory.java,24,import java.util.Map;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/atsJobs/ATSParserFactory.java,35,ATSRequestsDelegateImpl delegate = new ATSRequestsDelegateImpl(context, getATSUrl(context));
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/atsJobs/ATSParserFactory.java,39,public static String getATSUrl(ViewContext context) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/atsJobs/ATSParserFactory.java,40,return context.getProperties().get("yarn.ats.url");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,22,import com.sun.security.auth.callback.TextCallbackHandler;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,36,private static final String HTTP_SPNEGO_STANDARD_ENTRY =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,43,static Logger LOG = LoggerFactory.getLogger(KerberosChecker.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,62,javax.security.auth.login.Configuration.getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,65,jaasConf.getAppConfigurationEntry(HTTP_SPNEGO_STANDARD_ENTRY);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,69,jaasConfPath);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,85,System.getProperty("user.name"));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,90,jaasConfPath);              }
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,95,jaasConfPath);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,102,HTTP_SPNEGO_STANDARD_ENTRY + " entry in " + jaasConfPath);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,106,TextCallbackHandler textHandler = new TextCallbackHandler();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,108,LoginContext loginContext = new LoginContext(HTTP_SPNEGO_STANDARD_ENTRY,
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,109,textHandler);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosChecker.java,114,catch (LoginException le) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/MigrationResponse.java,43,private int ProgressPercentage;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/MigrationResponse.java,129,return ProgressPercentage;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/MigrationResponse.java,133,ProgressPercentage = progressPercentage;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,23,import org.apache.ambari.server.actionmanager.HostRoleStatus;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,25,import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,26,import org.apache.ambari.server.orm.dao.RequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,28,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,31,import org.apache.ambari.server.orm.entities.RequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,60,public static final String FINALIZE_ACTION_CLASS_NAME = "org.apache.ambari.server.serveraction.upgrades.FinalizeUpgradeAction";
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,61,public static final String SET_CURRENT_COMMAND = "ambari-server set-current --cluster-name=$CLUSTERNAME --version-display-name=$VERSION_NAME";
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,64,Provider<RequestDAO> requestDaoProvider;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,67,Provider<HostRoleCommandDAO> hostRoleCommandDaoProvider;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,83,List<UpgradeEntity> upgrades= upgradeDaoProvider.get().findAll();
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,84,if (upgrades != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,85,Long lastStartTime = 0L;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,86,UpgradeEntity mostRecentUpgrade = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,87,UpgradeEntity correspondingDowngrade = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,88,for (UpgradeEntity upgrade : upgrades) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,90,if (upgrade.getClusterId() == cluster.getClusterId() && upgrade.getDirection() == Direction.UPGRADE) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,91,Long requestId = upgrade.getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,92,RequestEntity upgradeRequest = requestDaoProvider.get().findByPK(requestId);
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,93,if (upgradeRequest != null && upgradeRequest.getStartTime() > lastStartTime) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,94,mostRecentUpgrade = upgrade;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,95,lastStartTime = upgradeRequest.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,101,if (mostRecentUpgrade != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,102,for (UpgradeEntity downgrade : upgrades) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,104,if (downgrade.getClusterId() == cluster.getClusterId() && downgrade.getDirection() == Direction.DOWNGRADE &&
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,105,downgrade.getFromVersion().equals(mostRecentUpgrade.getFromVersion())) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,106,correspondingDowngrade = downgrade;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,107,break;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,112,if (correspondingDowngrade == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,114,List<HostRoleCommandEntity> finalizeCommandList = hostRoleCommandDaoProvider.get().
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,115,findSortedCommandsByRequestIdAndCustomCommandName(mostRecentUpgrade.getRequestId(), FINALIZE_ACTION_CLASS_NAME);
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,118,if (finalizeCommandList != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,119,for (HostRoleCommandEntity command : finalizeCommandList) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,120,if (command.getStatus() != HostRoleStatus.COMPLETED) {
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,121,errorMessage = MessageFormat.format("Upgrade attempt (id: {0}, request id: {1}, from version: {2}, " +
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,123,mostRecentUpgrade.getId(), mostRecentUpgrade.getRequestId(), mostRecentUpgrade.getFromVersion(),
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,124,mostRecentUpgrade.getToVersion(), command.getTaskId(), command.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,125,errorMessage += " Please ensure that you called:\n" + SET_CURRENT_COMMAND;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,126,errorMessage += MessageFormat.format("\nFurther, change the status of host_role_command with " +
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,128,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,830,UpgradeEntity lastUpgradeItemForCluster = s_upgradeDAO.findLastUpgradeForCluster(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UpgradeDAO.java,182,public UpgradeEntity findLastUpgradeForCluster(long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UpgradeDAO.java,187,query.setParameter("direction", Direction.UPGRADE);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3705,UpgradeEntity lastUpgradeItemForCluster = upgradeDAO.findLastUpgradeForCluster(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,46,import org.apache.ambari.server.events.HostRemovedEvent;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,815,public void invalidateCommandCacheOnHostRemove(HostRemovedEvent event) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,470,clusters.mapHostsToCluster(request.getHostNames(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1693,clusters.mapHostsToCluster(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,716,clusters.mapHostToCluster(request.getHostname(), clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,901,if (null != hostRequest.getClusterName()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,902,clusters.getCluster(hostRequest.getClusterName()).recalculateAllClusterVersionStates();
ambari-server/src/main/java/org/apache/ambari/server/events/HostAddedEvent.java,23,public class HostAddedEvent extends ClusterEvent {
ambari-server/src/main/java/org/apache/ambari/server/events/HostAddedEvent.java,28,protected final String m_hostName;
ambari-server/src/main/java/org/apache/ambari/server/events/HostAddedEvent.java,38,public HostAddedEvent(long clusterId, String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/events/HostAddedEvent.java,40,m_hostName = hostName;
ambari-server/src/main/java/org/apache/ambari/server/events/HostAddedEvent.java,48,public String getHostName() {
ambari-server/src/main/java/org/apache/ambari/server/events/HostAddedEvent.java,49,return m_hostName;
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,23,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,29,public class HostRemovedEvent extends HostEvent {
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,41,public HostRemovedEvent(String hostName, Set<Cluster> clusters) {
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,42,super(AmbariEventType.HOST_REMOVED, hostName);
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,64,StringBuilder buffer = new StringBuilder("HostRemovedEvent{");
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,65,buffer.append("hostName=").append(m_hostName);
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,66,buffer.append("}");
ambari-server/src/main/java/org/apache/ambari/server/events/HostRemovedEvent.java,67,return buffer.toString();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,28,import org.apache.ambari.server.events.HostAddedEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,29,import org.apache.ambari.server.events.HostRemovedEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,118,public void onAmbariEvent(HostAddedEvent event) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,158,AlertHashInvalidationEvent invalidationEvent = new AlertHashInvalidationEvent(
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,159,event.getClusterId(), Collections.singletonList(event.getHostName()));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,161,m_eventPublisher.publish(invalidationEvent);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,172,public void onAmbariEvent(HostRemovedEvent event) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,176,m_alertsDao.removeCurrentByHost(event.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,31,import org.apache.ambari.server.events.HostAddedEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,32,import org.apache.ambari.server.events.HostRemovedEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,190,public void onHostEvent(HostAddedEvent event) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,201,String hostName = event.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,202,HostEntity hostEntity = hostDAO.get().findByName(hostName);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,204,HostVersionEntity missingHostVersion = new HostVersionEntity(hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,205,repositoryVersion, RepositoryVersionState.OUT_OF_SYNC);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,206,hostVersionDAO.get().create(missingHostVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,227,public void onHostEvent(HostRemovedEvent event) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostVersionDAO.java,281,for (HostVersionEntity hostVersion : hostVersions) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostVersionDAO.java,282,this.remove(hostVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,42,import org.apache.ambari.server.events.HostAddedEvent;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,44,import org.apache.ambari.server.events.HostRemovedEvent;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,559,public void mapHostsToCluster(Set<String> hostnames, String clusterName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,580,public void mapHostToCluster(String hostname, String clusterName,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,581,ClusterVersionEntity currentClusterVersion) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,605,+ " support host's os type" + ", clusterName=" + clusterName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,607,+ ", hostname=" + hostname + ", hostOsFamily=" + host.getOsFamily();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,615,clusterId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,627,cluster.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,640,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,643,ClusterVersionEntity clusterVersionEntity = clusterVersionDAO.findByClusterAndStateCurrent(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,644,mapHostToCluster(hostname, clusterName, clusterVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,659,HostAddedEvent event = new HostAddedEvent(clusterId, hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,660,eventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,872,Set<Cluster> hostsClusters = new HashSet<>(clusters);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,878,HostRemovedEvent event = new HostRemovedEvent(hostname, hostsClusters);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,59,import org.apache.ambari.server.events.HostRemovedEvent;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,979,public void processHostRemovedEvent(HostRemovedEvent hostRemovedEvent) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,981,if (null == hostRemovedEvent.getHostName()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,982,LOG.warn("Missing host name from host removed event [{}] !", hostRemovedEvent);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,986,LOG.info("Removing host [{}] from available hosts on host removed event.", hostRemovedEvent.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,987,HostImpl toBeRemoved = null;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,992,if (hostRemovedEvent.getHostName().equals(hostImpl.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,993,toBeRemoved = hostImpl;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,994,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,998,if (null != toBeRemoved) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,999,availableHosts.remove(toBeRemoved);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1000,LOG.info("Removed host: [{}] from available hosts", toBeRemoved.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1002,LOG.debug("Host [{}] not found in available hosts", hostRemovedEvent.getHostName());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/MysqlQuerySetAmbariDB.java,32,protected String getTableIdSqlFromInstanceNameSavedQuery() {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/MysqlQuerySetAmbariDB.java,33,return "select id from viewentity where class_name LIKE 'org.apache.ambari.view.%hive%.resources.savedQueries.SavedQuery' and view_instance_name=?;";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/MysqlQuerySetAmbariDB.java,66,protected String getSqlSequenceNoFromAmbariSequence(int id) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/MysqlQuerySetAmbariDB.java,67,return "select sequence_value from ambari_sequences where sequence_name ='ds_savedquery_"+id+"_id_seq';";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/MysqlQuerySetAmbariDB.java,70,protected String getSqlUpdateSequenceNo(int id) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/MysqlQuerySetAmbariDB.java,71,return "update ambari_sequences set sequence_value=? where sequence_name='ds_savedquery_"+id+"_id_seq';";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,28,protected String getTableIdSqlFromInstanceNameSavedQuery() {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,29,return "select id from viewentity where class_name LIKE 'org.apache.ambari.view.hive.resources.savedQueries.SavedQuery' and view_instance_name=?";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,59,protected String getSqlSequenceNoFromAmbariSequence(int id) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,60,return "select sequence_value from ambari_sequences where sequence_name ='ds_savedquery_"+id+"_id_seq'";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,63,protected String getSqlUpdateSequenceNo(int id) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/OracleQuerySetAmbariDB.java,64,return "update ambari_sequences set sequence_value=? where sequence_name='ds_savedquery_"+id+"_id_seq'";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,30,public PreparedStatement getTableIdFromInstanceNameSavedquery(Connection connection, String instance) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,32,PreparedStatement prSt = connection.prepareStatement(getTableIdSqlFromInstanceNameSavedQuery());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,37,public PreparedStatement updateSequenceNoInAmbariSequence(Connection connection, int seqNo, int id) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,39,PreparedStatement prSt = connection.prepareStatement(getSqlUpdateSequenceNo(id));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,46,public PreparedStatement getSequenceNoFromAmbariSequence(Connection connection,int id) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,47,PreparedStatement prSt = connection.prepareStatement(getSqlSequenceNoFromAmbariSequence(id));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,118,protected String getTableIdSqlFromInstanceNameSavedQuery() {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,119,return "select id from viewentity where class_name LIKE 'org.apache.ambari.view.%hive%.resources.savedQueries.SavedQuery' and view_instance_name=?;";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,146,protected String getSqlSequenceNoFromAmbariSequence(int id) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,147,return "select sequence_value from ambari_sequences where sequence_name ='ds_savedquery_"+id+"_id_seq';";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,150,protected String getSqlUpdateSequenceNo(int id) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/ambariqueryset/hive/savedqueryset/QuerySetAmbariDB.java,151,return "update ambari_sequences set sequence_value=? where sequence_name='ds_savedquery_"+id+"_id_seq';";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/MysqlQuerySet.java,21,public class MysqlQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/OracleQuerySet.java,21,public class OracleQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/PostgressQuerySet.java,21,public class PostgressQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,25,public abstract class QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,96,return "select query from beeswax_queryhistory where owner_id =?;";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,100,return "select query from beeswax_queryhistory where owner_id =? AND submission_date <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,104,return "select query from beeswax_queryhistory where owner_id =? AND submission_date >= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,108,return "select query from beeswax_queryhistory where owner_id =? AND submission_date >= date(?) AND submission_date <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,112,return "select query from beeswax_queryhistory;";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,116,return "select query from beeswax_queryhistory where submission_date <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,120,return "select query from beeswax_queryhistory where submission_date >= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/QuerySet.java,125,return "select query from beeswax_queryhistory where submission_date >= date(?) AND submission_date <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/historyqueryset/SqliteQuerySet.java,21,public class SqliteQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/savedqueryset/MysqlQuerySet.java,22,public class MysqlQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/savedqueryset/OracleQuerySet.java,21,public class OracleQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/savedqueryset/SqliteQuerySet.java,21,public class SqliteQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/savedqueryset/QuerySet.java,26,public  abstract class QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/hive/savedqueryset/PostgressQuerySet.java,21,public class PostgressQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/jobqueryset/OracleQuerySet.java,21,public class OracleQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/jobqueryset/QuerySet.java,25,public abstract class QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/MysqlQuerySet.java,21,public class MysqlQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/OracleQuerySet.java,21,public class OracleQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/PostgressQuerySet.java,21,public class PostgressQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,25,public abstract class QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,95,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1 AND user_id =?;";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,99,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1 AND user_id =? AND  date_created <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,104,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1 AND user_id =? AND date_created >= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,110,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1 AND user_id =? AND date_created >= date(?) AND date_created <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,115,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1 ;";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,119,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1  AND  date_created <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,124,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1  AND date_created >= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/QuerySet.java,129,return "select pig_script,title,date_created,saved,arguments from pig_pigscript where saved=1  AND date_created >= date(?) AND date_created <= date(?);";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/savedscriptqueryset/SqliteQuerySet.java,21,public class SqliteQuerySet extends QuerySet {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/jobqueryset/MysqlQuerySet.java,18,package org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.pig.jobqueryset;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/jobqueryset/PostgressQuerySet.java,18,package org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.pig.jobqueryset;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/datasource/queryset/huequeryset/pig/jobqueryset/SqliteQuerySet.java,18,package org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.pig.jobqueryset;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,86,ArrayList<HiveModel> dbpojoHiveHistoryQuery = new ArrayList<HiveModel>();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,90,QuerySet huedatabase = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,97,huedatabase = new MysqlQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,99,huedatabase = new PostgressQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,101,huedatabase = new SqliteQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,103,huedatabase = new OracleQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,121,connectionHuedb = DataSourceHueDatabase.getInstance(view.getProperties().get("huedrivername"), view.getProperties().get("huejdbcurl"), view.getProperties().get("huedbusername"), view.getProperties().get("huedbpassword")).getConnection();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,123,dbpojoHiveHistoryQuery = hiveHistoryQueryImpl.fetchFromHue(username, startDate, endDate, connectionHuedb, huedatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,125,for (int j = 0; j < dbpojoHiveHistoryQuery.size(); j++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,126,logger.info("the query fetched from hue" + dbpojoHiveHistoryQuery.get(j).getQuery());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,132,if (dbpojoHiveHistoryQuery.size() == 0) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,133,migrationresult.setIsNoQuerySelected("yes");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,134,migrationresult.setProgressPercentage(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,135,migrationresult.setNumberOfQueryTransfered(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,136,migrationresult.setTotalNoQuery(dbpojoHiveHistoryQuery.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,137,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,138,logger.info("No queries has been selected acccording to your criteria");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,143,connectionAmbaridb = DataSourceAmbariDatabase.getInstance(view.getProperties().get("ambaridrivername"), view.getProperties().get("ambarijdbcurl"), view.getProperties().get("ambaridbusername"), view.getProperties().get("ambaridbpassword")).getConnection();// connecting to ambari db
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,144,connectionAmbaridb.setAutoCommit(false);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,149,int id = 0;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,151,id = hiveHistoryQueryImpl.fetchInstanceTablename(connectionAmbaridb, instance, ambaridatabase); // feching table name according to the given instance name
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,152,sequence = hiveHistoryQueryImpl.fetchSequenceno(connectionAmbaridb, id, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,154,for (i = 0; i < dbpojoHiveHistoryQuery.size(); i++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,156,float calc = ((float) (i + 1)) / dbpojoHiveHistoryQuery.size() * 100;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,157,int progressPercentage = Math.round(calc);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,158,migrationresult.setIsNoQuerySelected("no");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,159,migrationresult.setProgressPercentage(progressPercentage);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,160,migrationresult.setNumberOfQueryTransfered(i + 1);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,161,migrationresult.setTotalNoQuery(dbpojoHiveHistoryQuery.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,162,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,164,logger.info("_____________________");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,165,logger.info("Loop No." + (i + 1));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,166,logger.info("_____________________");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,167,logger.info("Hue query that has been fetched" + dbpojoHiveHistoryQuery.get(i).getQuery());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,169,logger.info("Table name has been fetched from intance name");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,171,hiveHistoryQueryImpl.writetoFileQueryhql(dbpojoHiveHistoryQuery.get(i).getQuery(), ConfigurationCheckImplementation.getHomeDir());// writing to .hql file to a temp file on local disk
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,173,logger.info(".hql file created in Temp directory");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,175,hiveHistoryQueryImpl.writetoFileLogs(ConfigurationCheckImplementation.getHomeDir());// writing to logs file to a temp file on local disk
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,177,logger.info("Log file created in Temp directory");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,179,maxCountOfAmbariDb = i + sequence + 1;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,181,time = hiveHistoryQueryImpl.getTime();// getting the system current time.
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,183,epochTime = hiveHistoryQueryImpl.getEpochTime();// getting system time as epoch format
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,185,dirNameforHiveHistroy = "/user/"+username+"/hive/jobs/hive-job-" + maxCountOfAmbariDb + "-" + time + "/";// creating the directory name
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,187,logger.info("Directory name where .hql will be saved: " + dirNameforHiveHistroy);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,189,String versionName = hiveHistoryQueryImpl.getAllHiveVersionInstance(connectionAmbaridb, ambaridatabase, instance);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,191,hiveHistoryQueryImpl.insertRowinAmbaridb(dirNameforHiveHistroy, maxCountOfAmbariDb, epochTime, connectionAmbaridb, id, instance, i, ambaridatabase, versionName, username);// inserting in ambari database
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,193,if (view.getProperties().get("KerberoseEnabled").equals("y")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,195,logger.info("kerberose enabled");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,196,hiveHistoryQueryImpl.createDirKerberorisedSecured(dirNameforHiveHistroy, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));// creating directory in kerborized secured hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,197,logger.info("Directory created in hdfs");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,198,hiveHistoryQueryImpl.putFileinHdfsKerborizedSecured(ConfigurationCheckImplementation.getHomeDir() + "query.hql", dirNameforHiveHistroy, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));// copying the .hql file to kerborized hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,199,hiveHistoryQueryImpl.putFileinHdfsKerborizedSecured(ConfigurationCheckImplementation.getHomeDir() + "logs", dirNameforHiveHistroy, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));// copying the log file to kerborized hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,202,logger.info("kerberose not enabled");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,203,hiveHistoryQueryImpl.createDir(dirNameforHiveHistroy, view.getProperties().get("namenode_URI_Ambari"),username);// creating directory in hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,204,logger.info("Directory created in hdfs");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,205,hiveHistoryQueryImpl.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + "query.hql", dirNameforHiveHistroy, view.getProperties().get("namenode_URI_Ambari"),username);// copying the .hql file to hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,206,hiveHistoryQueryImpl.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + "logs", dirNameforHiveHistroy, view.getProperties().get("namenode_URI_Ambari"),username);// copying the log file to hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,210,hiveHistoryQueryImpl.updateSequenceno(connectionAmbaridb, maxCountOfAmbariDb, id, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryMigrationUtility.java,211,connectionAmbaridb.commit();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,22,import org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.hive.historyqueryset.QuerySet;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,261,public ArrayList<HiveModel> fetchFromHue(String username, String startdate, String endtime, Connection connection, QuerySet huedatabase) throws ClassNotFoundException, SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,271,String query;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,439,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,443,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,473,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,476,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,517,if (fileSystem.exists(path)) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,533,fileSystem.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,579,if (fileSystem.exists(path)) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/historyquery/HiveHistoryQueryMigrationImplementation.java,595,fileSystem.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,23,import org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.hive.savedqueryset.QuerySet;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,47,import java.util.ArrayList;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,48,import java.util.Calendar;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,50,import java.util.GregorianCalendar;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,154,public int fetchSequenceno(Connection c, int id, QuerySetAmbariDB ambaridatabase) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,162,ResultSet rs = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,165,prSt = ambaridatabase.getSequenceNoFromAmbariSequence(c, id);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,177,public void updateSequenceno(Connection c, int seqNo, int id, QuerySetAmbariDB ambaridatabase) throws SQLException, IOException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,180,prSt = ambaridatabase.updateSequenceNoInAmbariSequence(c, seqNo, id);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,186,public int fetchInstancetablenameForSavedqueryHive(Connection c, String instance, QuerySetAmbariDB ambaridatabase) throws SQLException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,197,prSt = ambaridatabase.getTableIdFromInstanceNameSavedquery(c, instance);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,199,logger.info("sql statement to fetch is from ambari instance:= =  " + prSt);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,400,String name = rs1.getString("name");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,408,json = new JSONObject(resources);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,416,hivepojo.setOwner(name);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,539,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,542,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,571,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,574,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,616,if (fileSystem.exists(path)) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,631,fileSystem.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationImplementation.java,693,fileSystem.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,68,int i = 0;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,80,QuerySet huedatabase = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,83,huedatabase = new MysqlQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,85,huedatabase = new PostgressQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,87,huedatabase = new SqliteQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,89,huedatabase = new OracleQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,104,int maxcountForHivehistroryAmbaridb, maxCountforSavequeryAmbaridb = 0;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,117,for (int j = 0; j < dbpojoHiveSavedQuery.size(); j++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,118,logger.info("the query fetched from hue" + dbpojoHiveSavedQuery.get(j).getQuery());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,123,if (dbpojoHiveSavedQuery.size() == 0) /* if no data has been fetched from hue db according to search criteria */ {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,125,migrationresult.setIsNoQuerySelected("yes");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,126,migrationresult.setProgressPercentage(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,127,migrationresult.setNumberOfQueryTransfered(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,128,migrationresult.setTotalNoQuery(dbpojoHiveSavedQuery.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,129,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,130,logger.info("No queries has been selected acccording to your criteria");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,132,logger.info("no hive saved query has been selected from hue according to your criteria of searching");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,138,connectionAmbaridb.setAutoCommit(false);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,141,int sequence = hivesavedqueryimpl.fetchSequenceno(connectionAmbaridb, tableIdSavedQuery, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,143,for (i = 0; i < dbpojoHiveSavedQuery.size(); i++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,145,logger.info("_____________________");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,146,logger.info("Loop No." + (i + 1));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,147,logger.info("_____________________");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,149,float calc = ((float) (i + 1)) / dbpojoHiveSavedQuery.size() * 100;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,150,int progressPercentage = Math.round(calc);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,152,migrationresult.setIsNoQuerySelected("no");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,153,migrationresult.setProgressPercentage(progressPercentage);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,154,migrationresult.setNumberOfQueryTransfered(i + 1);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,155,migrationresult.setTotalNoQuery(dbpojoHiveSavedQuery.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,156,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,158,logger.info("query fetched from hue:-  " + dbpojoHiveSavedQuery.get(i).getQuery());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,160,logger.info("Table name are fetched from instance name.");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,166,logger.info(".hql and logs file are saved in temporary directory");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,168,maxCountforSavequeryAmbaridb = i + sequence + 1;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,172,dirNameforHiveSavedquery = "/user/"+username+"/hive/scripts/hive-query-" + maxCountforSavequeryAmbaridb + "-"
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,173,+ time + "/"; // creating hdfs directory name
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,175,logger.info("Directory will be creted in HDFS" + dirNameforHiveSavedquery);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,177,logger.info("Row inserted in hive History table.");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,179,if (view.getProperties().get("KerberoseEnabled").equals("y")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,181,logger.info("Kerberose Enabled");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,182,hivesavedqueryimpl.createDirHiveSecured(dirNameforHiveSavedquery, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));// creating directory in hdfs in kerborized cluster
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,183,hivesavedqueryimpl.putFileinHdfsSecured(ConfigurationCheckImplementation.getHomeDir() + "query.hql", dirNameforHiveSavedquery, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));// putting .hql file in hdfs in kerberoroized cluster
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,184,hivesavedqueryimpl.putFileinHdfsSecured(ConfigurationCheckImplementation.getHomeDir() + "logs", dirNameforHiveSavedquery, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));// putting logs file in hdfs in kerberoroized cluster
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,187,logger.info("Kerberose Not Enabled");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,188,hivesavedqueryimpl.createDirHive(dirNameforHiveSavedquery, view.getProperties().get("namenode_URI_Ambari"),username);// creating directory in hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,189,hivesavedqueryimpl.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + "query.hql", dirNameforHiveSavedquery, view.getProperties().get("namenode_URI_Ambari"),username);// putting .hql file in hdfs directory
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,190,hivesavedqueryimpl.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + "logs", dirNameforHiveSavedquery, view.getProperties().get("namenode_URI_Ambari"),username);// putting logs file in hdfs
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,195,hivesavedqueryimpl.insertRowinSavedQuery(maxCountforSavequeryAmbaridb, dbpojoHiveSavedQuery.get(i).getDatabase(), dirNameforHiveSavedquery, dbpojoHiveSavedQuery.get(i).getQuery(), dbpojoHiveSavedQuery.get(i).getOwner(), connectionAmbaridb, tableIdSavedQuery, instance, i, ambaridatabase, username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,198,hivesavedqueryimpl.updateSequenceno(connectionAmbaridb, maxCountforSavequeryAmbaridb, tableIdSavedQuery, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/hive/savedquery/HiveSavedQueryMigrationUtility.java,199,connectionAmbaridb.commit();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,36,import org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.pig.jobqueryset.QuerySet;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,262,public ArrayList<PigModel> fetchFromHueDB(String username, String startdate, String endtime, Connection connection, QuerySet huedatabase) throws ClassNotFoundException, IOException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,404,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,407,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,437,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,440,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,497,fileSystemAmbari.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationImplementation.java,562,fileSystemAmbari.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,20,package org.apache.ambari.view.huetoambarimigration.migration.pig.pigjob;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,22,import java.beans.PropertyVetoException;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,23,import java.io.IOException;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,24,import java.net.URISyntaxException;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,25,import java.sql.Connection;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,26,import java.sql.SQLException;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,27,import java.text.ParseException;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,28,import java.util.ArrayList;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,30,import org.apache.ambari.view.ViewContext;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,32,import org.apache.ambari.view.huetoambarimigration.persistence.utils.ItemNotFound;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,33,import org.apache.ambari.view.huetoambarimigration.resources.PersonalCRUDResourceManager;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,34,import org.apache.ambari.view.huetoambarimigration.resources.scripts.MigrationResourceManager;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,35,import org.apache.ambari.view.huetoambarimigration.resources.scripts.models.MigrationResponse;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,36,import org.apache.ambari.view.huetoambarimigration.resources.scripts.models.PigModel;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,37,import org.apache.log4j.Logger;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,39,import org.apache.ambari.view.huetoambarimigration.datasource.DataSourceAmbariDatabase;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,40,import org.apache.ambari.view.huetoambarimigration.datasource.DataSourceHueDatabase;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,41,import org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.pig.jobqueryset.*;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,42,import org.apache.ambari.view.huetoambarimigration.datasource.queryset.ambariqueryset.pig.jobqueryset.*;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,44,public class PigJobMigrationUtility {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,46,protected MigrationResourceManager resourceManager = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,48,public synchronized PersonalCRUDResourceManager<MigrationResponse> getResourceManager(ViewContext view) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,49,if (resourceManager == null) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,50,resourceManager = new MigrationResourceManager(view);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,52,return resourceManager;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,55,public void pigJobMigration(String username, String instance, String startDate, String endDate, ViewContext view, MigrationResponse migrationresult, String jobid) throws IOException, ItemNotFound {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,57,long startTime = System.currentTimeMillis();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,59,final Logger logger = Logger.getLogger(PigJobMigrationUtility.class);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,60,Connection connectionHuedb = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,61,Connection connectionAmbaridb = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,63,logger.info("------------------------------");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,64,logger.info("pig Jobs Migration started");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,65,logger.info("------------------------------");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,66,logger.info("start date: " + startDate);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,67,logger.info("enddate date: " + endDate);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,68,logger.info("instance is: " + username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,69,logger.info("hue username is : " + instance);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,71,PigJobMigrationImplementation pigjobimpl = new PigJobMigrationImplementation();// creating the implementation object
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,73,QuerySet huedatabase = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,75,if (view.getProperties().get("huedrivername").contains("mysql")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,76,huedatabase = new MysqlQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,78,huedatabase = new PostgressQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,80,huedatabase = new SqliteQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,82,huedatabase = new OracleQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,85,QuerySetAmbariDB ambaridatabase = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,87,if (view.getProperties().get("ambaridrivername").contains("mysql")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,88,ambaridatabase = new MysqlQuerySetAmbariDB();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,90,ambaridatabase = new PostgressQuerySetAmbariDB();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,92,ambaridatabase = new OracleQuerySetAmbariDB();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,94,int maxCountforPigScript = 0, i = 0;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,96,String time = null, timeIndorder = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,97,Long epochtime = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,98,String pigJobDirName;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,99,ArrayList<PigModel> pigJobDbPojo = new ArrayList<PigModel>();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,101,try {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,103,connectionHuedb = DataSourceHueDatabase.getInstance(view.getProperties().get("huedrivername"), view.getProperties().get("huejdbcurl"), view.getProperties().get("huedbusername"), view.getProperties().get("huedbpassword")).getConnection();//connecting to hue database
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,105,pigJobDbPojo = pigjobimpl.fetchFromHueDB(username, startDate, endDate, connectionHuedb, huedatabase);// fetching the PigJobs details from hue
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,107,for (int j = 0; j < pigJobDbPojo.size(); j++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,108,logger.info("the query fetched from hue=" + pigJobDbPojo.get(i).getScript());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,113,if (pigJobDbPojo.size() == 0) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,115,migrationresult.setIsNoQuerySelected("yes");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,116,migrationresult.setProgressPercentage(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,117,migrationresult.setNumberOfQueryTransfered(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,118,migrationresult.setTotalNoQuery(pigJobDbPojo.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,119,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,120,logger.info("no pig Job has been selected from hue according to your criteria of searching");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,124,connectionAmbaridb = DataSourceAmbariDatabase.getInstance(view.getProperties().get("ambaridrivername"), view.getProperties().get("ambarijdbcurl"), view.getProperties().get("ambaridbusername"), view.getProperties().get("ambaridbpassword")).getConnection();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,125,connectionAmbaridb.setAutoCommit(false);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,127,int fetchPigTablenameInstance = pigjobimpl.fetchInstanceTablename(connectionAmbaridb, instance, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,128,int sequence = pigjobimpl.fetchSequenceno(connectionAmbaridb, fetchPigTablenameInstance, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,130,for (i = 0; i < pigJobDbPojo.size(); i++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,132,float calc = ((float) (i + 1)) / pigJobDbPojo.size() * 100;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,133,int progressPercentage = Math.round(calc);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,134,migrationresult.setIsNoQuerySelected("no");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,135,migrationresult.setProgressPercentage(progressPercentage);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,136,migrationresult.setNumberOfQueryTransfered(i + 1);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,137,migrationresult.setTotalNoQuery(pigJobDbPojo.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,138,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,140,logger.info("Loop No." + (i + 1));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,141,logger.info("________________");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,142,logger.info("the title of script " + pigJobDbPojo.get(i).getTitle());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,144,maxCountforPigScript = i + sequence + 1;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,146,time = pigjobimpl.getTime();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,147,timeIndorder = pigjobimpl.getTimeInorder();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,148,epochtime = pigjobimpl.getEpochTime();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,150,pigJobDirName = "/user/"+username+"/pig/jobs/" + pigJobDbPojo.get(i).getTitle() + "_" + time + "/";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,152,pigjobimpl.insertRowPigJob(pigJobDirName, maxCountforPigScript, time, timeIndorder, epochtime, pigJobDbPojo.get(i).getTitle(), connectionAmbaridb, fetchPigTablenameInstance, pigJobDbPojo.get(i).getStatus(), instance, i, ambaridatabase, username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,154,if (view.getProperties().get("KerberoseEnabled").equals("y")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,155,pigjobimpl.createDirPigJobSecured(pigJobDirName, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,156,pigjobimpl.copyFileBetweenHdfsSecured(pigJobDbPojo.get(i).getDir() + "/script.pig", pigJobDirName, view.getProperties().get("namenode_URI_Ambari"), view.getProperties().get("namenode_URI_Hue"),username,view.getProperties().get("PrincipalUserName"));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,157,pigjobimpl.copyFileBetweenHdfsSecured(pigJobDbPojo.get(i).getDir() + "/stderr", pigJobDirName, view.getProperties().get("namenode_URI_Ambari"), view.getProperties().get("namenode_URI_Hue"),username,view.getProperties().get("PrincipalUserName"));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,158,pigjobimpl.copyFileBetweenHdfsSecured(pigJobDbPojo.get(i).getDir() + "/stdout", pigJobDirName, view.getProperties().get("namenode_URI_Ambari"), view.getProperties().get("namenode_URI_Hue"),username,view.getProperties().get("PrincipalUserName"));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,162,pigjobimpl.createDirPigJob(pigJobDirName, view.getProperties().get("namenode_URI_Ambari"),username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,163,pigjobimpl.copyFileBetweenHdfs(pigJobDbPojo.get(i).getDir() + "/script.pig", pigJobDirName, view.getProperties().get("namenode_URI_Ambari"), view.getProperties().get("namenode_URI_Hue"),username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,164,pigjobimpl.copyFileBetweenHdfs(pigJobDbPojo.get(i).getDir() + "/stderr", pigJobDirName, view.getProperties().get("namenode_URI_Ambari"), view.getProperties().get("namenode_URI_Hue"),username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,165,pigjobimpl.copyFileBetweenHdfs(pigJobDbPojo.get(i).getDir() + "/stdout", pigJobDirName, view.getProperties().get("namenode_URI_Ambari"), view.getProperties().get("namenode_URI_Hue"),username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,169,logger.info(pigJobDbPojo.get(i).getTitle() + "has been migrated to Ambari");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,172,pigjobimpl.updateSequenceno(connectionAmbaridb, maxCountforPigScript, fetchPigTablenameInstance, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,173,connectionAmbaridb.commit();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,177,logger.error("sql exception in ambari database:", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,178,try {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,179,connectionAmbaridb.rollback();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,180,logger.info("roll back done");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,182,logger.error("roll back  exception:", e1);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,185,logger.error("class not found exception:", e2);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,187,logger.error("ParseException: ", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,189,logger.error("URISyntaxException", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,191,logger.error("PropertyVetoException", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,195,connectionAmbaridb.close();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,197,logger.error("connection closing exception ", e);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,201,logger.info("------------------------------");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,202,logger.info("pig Job Migration End");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,203,logger.info("------------------------------");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,205,long stopTime = System.currentTimeMillis();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,206,long elapsedTime = stopTime - startTime;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,208,migrationresult.setJobtype("hivehistoryquerymigration");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,209,migrationresult.setTotalTimeTaken(String.valueOf(elapsedTime));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigjob/PigJobMigrationUtility.java,210,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,22,import org.apache.ambari.view.huetoambarimigration.migration.pig.pigjob.PigJobMigrationImplementation;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,26,import org.apache.ambari.view.huetoambarimigration.datasource.queryset.huequeryset.pig.savedscriptqueryset.QuerySet;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,55,static final Logger logger = Logger.getLogger(PigJobMigrationImplementation.class);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,289,public ArrayList<PigModel> fetchFromHueDatabase(String username, String startdate, String endtime, Connection connection, QuerySet huedatabase) throws ClassNotFoundException, IOException {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,439,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,442,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,474,FileSystem fs = FileSystem.get(conf);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,477,fs.setOwner(src,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,521,if (fileSystem.exists(path)) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,536,fileSystem.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,582,if (fileSystem.exists(path)) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationImplementation.java,598,fileSystem.setOwner(path,username,"hadoop");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,72,logger.info("instance is: " + username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,73,logger.info("hue username is : " + instance);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,78,QuerySet huedatabase = null;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,81,huedatabase = new MysqlQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,83,huedatabase = new PostgressQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,86,huedatabase = new SqliteQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,88,huedatabase = new OracleQuerySet();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,111,connectionHuedb = DataSourceHueDatabase.getInstance(view.getProperties().get("huedrivername"), view.getProperties().get("huejdbcurl"), view.getProperties().get("huedbusername"), view.getProperties().get("huedbpassword")).getConnection();//connection to Hue DB
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,112,dbpojoPigSavedscript = pigsavedscriptmigration.fetchFromHueDatabase(username, startDate, endDate, connectionHuedb, huedatabase);// Fetching pig script details from Hue DB
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,114,for (int j = 0; j < dbpojoPigSavedscript.size(); j++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,115,logger.info("the query fetched from hue=" + dbpojoPigSavedscript.get(j).getScript());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,121,if (dbpojoPigSavedscript.size() == 0) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,123,migrationresult.setIsNoQuerySelected("yes");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,124,migrationresult.setProgressPercentage(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,125,migrationresult.setNumberOfQueryTransfered(0);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,126,migrationresult.setTotalNoQuery(dbpojoPigSavedscript.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,127,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,129,logger.info("no pig script has been selected from hue according to your criteria of searching");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,134,connectionAmbaridb = DataSourceAmbariDatabase.getInstance(view.getProperties().get("ambaridrivername"), view.getProperties().get("ambarijdbcurl"), view.getProperties().get("ambaridbusername"), view.getProperties().get("ambaridbpassword")).getConnection();// connecting to ambari db
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,135,connectionAmbaridb.setAutoCommit(false);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,137,logger.info("loop will continue for " + dbpojoPigSavedscript.size() + "times");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,141,pigInstanceTableName = pigsavedscriptmigration.fetchInstanceTablenamePigScript(connectionAmbaridb, instance, ambaridatabase);// finding the table name in ambari from the given instance
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,143,sequence = pigsavedscriptmigration.fetchSequenceno(connectionAmbaridb, pigInstanceTableName, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,145,for (i = 0; i < dbpojoPigSavedscript.size(); i++) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,148,float calc = ((float) (i + 1)) / dbpojoPigSavedscript.size() * 100;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,149,int progressPercentage = Math.round(calc);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,150,migrationresult.setIsNoQuerySelected("no");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,151,migrationresult.setProgressPercentage(progressPercentage);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,152,migrationresult.setNumberOfQueryTransfered(i + 1);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,153,migrationresult.setTotalNoQuery(dbpojoPigSavedscript.size());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,154,getResourceManager(view).update(migrationresult, jobid);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,156,logger.info("Loop No." + (i + 1));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,157,logger.info("________________");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,158,logger.info("the title of script:  " + dbpojoPigSavedscript.get(i).getTitle());
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,160,time = pigsavedscriptmigration.getTime();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,162,timetobeInorder = pigsavedscriptmigration.getTimeInorder();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,164,epochTime = pigsavedscriptmigration.getEpochTime();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,166,maxcountforpigsavedscript = i + sequence + 1;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,168,dirNameForPigScript = "/user/"+username+"/pig/scripts/";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,170,pigscriptFilename = dbpojoPigSavedscript.get(i).getTitle() + "-" + time + ".pig";
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,172,completeDirandFilePath = dirNameForPigScript + pigscriptFilename;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,174,pigsavedscriptmigration.writetPigScripttoLocalFile(dbpojoPigSavedscript.get(i).getScript(), dbpojoPigSavedscript.get(i).getTitle(), dbpojoPigSavedscript.get(i).getDt(), ConfigurationCheckImplementation.getHomeDir(), pigscriptFilename);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,176,pigsavedscriptmigration.insertRowForPigScript(completeDirandFilePath, maxcountforsavequery, maxcountforpigsavedscript, time, timetobeInorder, epochTime, dbpojoPigSavedscript.get(i).getTitle(), connectionAmbaridb, pigInstanceTableName, instance, i, ambaridatabase, username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,178,if (view.getProperties().get("KerberoseEnabled").equals("y")) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,180,pigsavedscriptmigration.createDirPigScriptSecured(dirNameForPigScript, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,181,pigsavedscriptmigration.putFileinHdfsSecured(ConfigurationCheckImplementation.getHomeDir() + pigscriptFilename, dirNameForPigScript, view.getProperties().get("namenode_URI_Ambari"),username,view.getProperties().get("PrincipalUserName"));
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,184,pigsavedscriptmigration.createDirPigScript(dirNameForPigScript, view.getProperties().get("namenode_URI_Ambari"),username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,185,pigsavedscriptmigration.putFileinHdfs(ConfigurationCheckImplementation.getHomeDir() + pigscriptFilename, dirNameForPigScript, view.getProperties().get("namenode_URI_Ambari"),username);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,188,logger.info(dbpojoPigSavedscript.get(i).getTitle() + "Migrated to Ambari");
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,190,pigsavedscriptmigration.deletePigScriptLocalFile(ConfigurationCheckImplementation.getHomeDir(), pigscriptFilename);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,193,pigsavedscriptmigration.updateSequenceno(connectionAmbaridb, maxcountforpigsavedscript, pigInstanceTableName, ambaridatabase);
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/migration/pig/pigscript/PigScriptMigrationUtility.java,194,connectionAmbaridb.commit();
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/HiveModel.java,24,private String owner;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/HiveModel.java,35,public String getOwner() {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/HiveModel.java,36,return owner;
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/HiveModel.java,39,public void setOwner(String owner) {
contrib/views/hueambarimigration/src/main/java/org/apache/ambari/view/huetoambarimigration/resources/scripts/models/HiveModel.java,40,this.owner = owner;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,26,import org.apache.ambari.view.hive2.persistence.utils.OnlyOwnersFilteringStrategy;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,40,import java.util.HashMap;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,87,public List<Job> readAllForUserByTime(String username, long startTime, long endTime) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,88,List<HiveQueryId> queryIdList = ats.getHiveQueryIdsForUserByTime(username, startTime, endTime);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,89,List<Job> allJobs = fetchDagsAndMergeJobs(queryIdList);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,90,List<Job> dbOnlyJobs = readDBOnlyJobs(username, queryIdList, startTime, endTime);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,91,allJobs.addAll(dbOnlyJobs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,93,return allJobs;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,101,public List<Job> readJobsByIds(List<JobInfo> jobInfos) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,103,List<String> jobsWithHiveIds = new LinkedList<>();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,104,List<String> dbOnlyJobs = new LinkedList<>();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,106,for (JobInfo jobInfo : jobInfos) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,107,if (null == jobInfo.getHiveId() || jobInfo.getHiveId().trim().isEmpty()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,108,dbOnlyJobs.add(jobInfo.getJobId());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,110,jobsWithHiveIds.add(jobInfo.getHiveId());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,114,List<HiveQueryId> queryIdList = ats.getHiveQueryIdByEntityList(jobsWithHiveIds);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,115,List<Job> allJobs = fetchDagsAndMergeJobs(queryIdList);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,116,List<Job> dbJobs = readJobsFromDbByJobId(dbOnlyJobs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,118,allJobs.addAll(dbJobs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,119,return allJobs;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,127,private List<Job> readJobsFromDbByJobId(List<String> jobsIds) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,128,List<Job> jobs = new LinkedList<>();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,129,for (final String jid : jobsIds) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,130,try {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,131,Job job = getJobFromDbByJobId(jid);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,132,jobs.add(job);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,134,LOG.error("Error while finding job with id : {}", jid, itemNotFound);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,175,List<HiveQueryId> queries = ats.getHiveQueryIdsForUser(username);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,176,LOG.debug("HiveQueryIds fetched : {}", queries);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,177,List<Job> allJobs = fetchDagsAndMergeJobs(queries);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,178,List<Job> dbOnlyJobs = readDBOnlyJobs(username, queries, null, null);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,179,LOG.debug("Jobs only present in DB: {}", dbOnlyJobs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,180,allJobs.addAll(dbOnlyJobs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,181,return allJobs;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,192,private List<Job> readDBOnlyJobs(String username, List<HiveQueryId> queries, Long startTime, Long endTime) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,193,List<Job> dbOnlyJobs = new LinkedList<>();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,194,HashMap<String, String> operationIdVsHiveId = new HashMap<>();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,196,for (HiveQueryId hqid : queries) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,197,operationIdVsHiveId.put(hqid.operationId, hqid.entity);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,199,LOG.debug("operationIdVsHiveId : {} ", operationIdVsHiveId);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,202,List<Job> jobs = viewJobResourceManager.readAll(new OnlyOwnersFilteringStrategy(username));
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,203,for (Job job : jobs) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,206,) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,207,continue; // don't include this in the result
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,209,dbOnlyJobs.add(job);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/Aggregator.java,212,return dbOnlyJobs;
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,27,OK,
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,33,WARNING,
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,38,CRITICAL,
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,43,UNKNOWN,
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,49,SKIPPED;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,290,public Boolean isRequired(){
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,291,return getClass().getAnnotation(UpgradeCheck.class).required();
ambari-server/src/main/java/org/apache/ambari/server/checks/HardcodedStackVersionPropertiesCheck.java,35,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,21,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,27,import org.apache.ambari.server.orm.entities.ClusterVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,29,import org.apache.ambari.server.orm.entities.HostVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,30,import org.apache.ambari.server.orm.entities.RepositoryVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,34,import org.apache.ambari.server.state.Host;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,35,import org.apache.ambari.server.state.MaintenanceState;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,36,import org.apache.ambari.server.state.RepositoryVersionState;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,37,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,41,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,43,import javax.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,44,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,45,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,46,import java.util.LinkedHashSet;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,47,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/checks/PreviousUpgradeCompleted.java,48,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,18,package org.apache.ambari.server.checks;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,21,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,22,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,23,import org.apache.ambari.server.ServiceComponentNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,24,import org.apache.ambari.server.ServiceNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,25,import org.apache.ambari.server.controller.PrereqCheckRequest;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,26,import org.apache.ambari.server.orm.dao.HostComponentStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,27,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,28,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,29,import org.apache.ambari.server.state.ServiceComponent;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,30,import org.apache.ambari.server.state.stack.PrereqCheckStatus;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,31,import org.apache.ambari.server.state.stack.PrerequisiteCheck;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,33,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,34,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,35,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,36,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,44,public class StormRestAPIDeletedCheck extends AbstractCheckDescriptor {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,47,HostComponentStateDAO hostComponentStateDao;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,52,public StormRestAPIDeletedCheck() {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,53,super(CheckDescription.STORM_REST_API_MUST_BE_DELETED);
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,60,public boolean isApplicable(PrereqCheckRequest request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,61,if (!super.isApplicable(request, Arrays.asList("STORM"), true)) {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,62,return false;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,65,return true;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,72,public void perform(PrerequisiteCheck prerequisiteCheck, PrereqCheckRequest request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,73,Set<String> hosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,74,final String STORM = "STORM";
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,75,final String STORM_REST_API = "STORM_REST_API";
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,77,final String clusterName = request.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,78,final Cluster cluster = clustersProvider.get().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,79,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,80,ServiceComponent serviceComponent = cluster.getService(STORM).getServiceComponent(STORM_REST_API);
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,81,if (serviceComponent != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,82,hosts = serviceComponent.getServiceComponentHosts().keySet();
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,86,;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,89,;
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,93,if (hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,94,List<HostComponentStateEntity> allHostComponents = hostComponentStateDao.findAll();
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,95,for (HostComponentStateEntity hc : allHostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,96,if (hc.getServiceName().equalsIgnoreCase(STORM) && hc.getComponentName().equalsIgnoreCase(STORM_REST_API)) {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,97,hosts.add(hc.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,102,if (!hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,103,prerequisiteCheck.getFailedOn().add(STORM_REST_API);
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,104,prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
ambari-server/src/main/java/org/apache/ambari/server/checks/StormRestAPIDeletedCheck.java,105,prerequisiteCheck.setFailReason(getFailReason(prerequisiteCheck, request));
ambari-server/src/main/java/org/apache/ambari/server/checks/UpgradeCheck.java,65,boolean required() default false;
ambari-server/src/main/java/org/apache/ambari/server/checks/UpgradeCheckRegistry.java,71,if (descriptor.isRequired()){
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,25,import java.util.ArrayList;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,27,import java.util.List;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,47,import javax.ws.rs.core.MultivaluedMap;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,22,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,28,import org.apache.ambari.server.orm.entities.MemberEntity;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,29,import org.apache.ambari.server.orm.entities.PrincipalEntity;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,53,UserDAO userDAO, MemberDAO memberDAO, PrivilegeDAO privilegeDAO) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,78,List<PrincipalEntity> principalEntities = new LinkedList<PrincipalEntity>();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,80,principalEntities.add(user.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,82,List<MemberEntity> memberEntities = memberDAO.findAllMembersByUser(user);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,84,for (MemberEntity memberEntity : memberEntities) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,85,principalEntities.add(memberEntity.getGroup().getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,88,List<PrivilegeEntity> privilegeEntities = privilegeDAO.findAllByPrincipal(principalEntities);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,313,for (AlertTargetEntity target : this.alertTargets) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,318,this.alertTargets = alertTargets;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,342,if (groupId != null ? !groupId.equals(that.groupId) : that.groupId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,343,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,346,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,354,int result = null != groupId ? groupId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertGroupEntity.java,355,return result;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertTargetEntity.java,384,: that.targetId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertTargetEntity.java,385,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertTargetEntity.java,388,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertTargetEntity.java,396,int result = null != targetId ? targetId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertTargetEntity.java,397,return result;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,143,if (!new File(keytabFilePath).delete()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,144,LOG.debug(String.format("Failed to remove ambari keytab for %s", evaluatedPrincipal));
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,224,return runCommand(command.toArray(new String[command.size()]), null, null, sudo);
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,259,return runCommand(command.toArray(new String[command.size()]), null, null, sudo);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,225,private boolean rollbackIfNecessary(Transactional transactional, Exception e,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,62,import org.apache.ambari.view.URLStreamProvider;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,69,import org.apache.hadoop.fs.FSDataInputStream;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ClusterService.java,665,return new LoggingService(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,29,import org.apache.ambari.server.controller.logging.LoggingRequestHelperFactoryImpl;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,39,import javax.ws.rs.GET;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,40,import javax.ws.rs.Path;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,41,import javax.ws.rs.Produces;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,42,import javax.ws.rs.core.Context;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,43,import javax.ws.rs.core.HttpHeaders;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,44,import javax.ws.rs.core.MediaType;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,45,import javax.ws.rs.core.MultivaluedMap;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,46,import javax.ws.rs.core.Response;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,47,import javax.ws.rs.core.UriInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,48,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,49,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,50,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,51,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,52,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,70,private final LoggingRequestHelperFactory helperFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,76,this(clusterName, new DefaultControllerFactory(), new LoggingRequestHelperFactoryImpl());
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,79,public LoggingService(String clusterName, ControllerFactory controllerFactory, LoggingRequestHelperFactory helperFactory) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/LoggingService.java,82,this.helperFactory = helperFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,41,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,42,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,118,private static List<Map<String, String>> createTestData(Resource resource) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,120,Map<String, String> levelCounts = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,121,levelCounts.put("INFO", "100");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,122,levelCounts.put("WARN", "250");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,123,levelCounts.put("DEBUG", "300");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,125,resource.setProperty("logLevels", levelCounts);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,127,List<Map <String, String>> listOfResults = new LinkedList<Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,128,Map<String, String> resultOne = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,129,resultOne.put("data", "This is a test sentence.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,130,resultOne.put("score", "100");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,131,resultOne.put("level", "INFO");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,132,resultOne.put("type", "hdfs_namenode");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,133,resultOne.put("host", "c6401.ambari.apache.org");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,134,resultOne.put("LoggerName", "NameNodeLogger");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,136,listOfResults.add(resultOne);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/LoggingResourceProvider.java,137,return listOfResults;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,20,import com.google.common.cache.Cache;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,21,import com.google.common.cache.CacheBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,22,import com.google.common.util.concurrent.AbstractService;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,23,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,31,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,32,import java.util.concurrent.Executor;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,33,import java.util.concurrent.Executors;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,34,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperFactoryImpl.java,29,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,22,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,23,import org.apache.ambari.server.security.credential.Credential;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,24,import org.apache.ambari.server.security.credential.PrincipalKeyCredential;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,25,import org.apache.ambari.server.security.encryption.CredentialStoreService;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,26,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,27,import org.apache.ambari.server.state.Config;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,28,import org.apache.commons.codec.binary.Base64;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,29,import org.apache.http.client.utils.URIBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,30,import org.apache.log4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,31,import org.codehaus.jackson.map.AnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,32,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,33,import org.codehaus.jackson.map.ObjectReader;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,34,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,35,import org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,57,private static Logger LOG = Logger.getLogger(LoggingRequestHelperImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,115,httpURLConnection.setConnectTimeout(DEFAULT_LOGSEARCH_CONNECT_TIMEOUT_IN_MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,116,httpURLConnection.setReadTimeout(DEFAULT_LOGSEARCH_READ_TIMEOUT_IN_MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,205,if ((response != null) && (!response.getListOfResults().isEmpty())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,38,import org.apache.log4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,40,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,41,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,42,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,43,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,44,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,45,import java.util.concurrent.atomic.AtomicInteger;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,49,private static final Logger LOG = Logger.getLogger(LoggingSearchPropertyProvider.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,70,public LoggingSearchPropertyProvider() {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,71,loggingRequestHelperFactory = new LoggingRequestHelperFactoryImpl();
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,218,protected void setLogSearchDataRetrievalService(LogSearchDataRetrievalService logSearchDataRetrievalService) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java,222,protected void setLoggingRequestHelperFactory(LoggingRequestHelperFactory loggingRequestHelperFactory) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/Utils.java,20,import org.apache.log4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,424,if (!tableHasIndex(tableName, false, indexName)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,425,String query = dbmsHelper.getCreateIndexStatement(indexName, tableName, columnNames);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,426,executeQuery(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,428,LOG.info("Index {} already exist, skipping creation, table = {}", indexName, tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,29,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,49,public HostComponentDesiredStateEntity findByPK(HostComponentDesiredStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,50,return entityManagerProvider.get().find(HostComponentDesiredStateEntity.class, primaryKey);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,113,public void removeByPK(HostComponentDesiredStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,114,remove(findByPK(primaryKey));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,195,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,199,if (componentName != null ? !componentName.equals(that.componentName) : that.componentName != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,204,: that.desiredStack != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,208,if (desiredState != null ? !desiredState.equals(that.desiredState) : that.desiredState != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,212,if (hostEntity != null ? !hostEntity.equals(that.hostEntity) : that.hostEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,216,if (serviceName != null ? !serviceName.equals(that.serviceName) : that.serviceName != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,225,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,18,package org.apache.ambari.server.orm.entities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,20,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,21,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,22,import java.io.Serializable;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,25,public class HostComponentDesiredStateEntityPK implements Serializable {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,26,private Long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,30,public Long getClusterId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,31,return clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,34,public void setClusterId(Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,35,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,38,private String serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,42,public String getServiceName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,43,return serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,46,public void setServiceName(String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,47,this.serviceName = serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,50,private Long hostId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,54,public Long getHostId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,55,return hostId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,58,public void setHostId(Long hostId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,59,this.hostId = hostId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,62,private String componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,66,public String getComponentName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,67,return componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,70,public void setComponentName(String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,71,this.componentName = componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,75,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,76,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,77,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,79,HostComponentDesiredStateEntityPK that = (HostComponentDesiredStateEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,81,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,82,if (componentName != null ? !componentName.equals(that.componentName) : that.componentName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,83,if (hostId != null ? !hostId.equals(that.hostId) : that.hostId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,85,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,89,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,90,int result = clusterId !=null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,91,result = 31 * result + (hostId != null ? hostId.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,92,result = 31 * result + (componentName != null ? componentName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,93,return result;
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/GenericDbmsHelper.java,247,String createIndex = databasePlatform.buildCreateIndex(tableName, indexName, columnNames);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,41,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,158,HostComponentDesiredStateEntityPK pk = new HostComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,159,pk.setClusterId(hostComponentStateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,160,pk.setServiceName(hostComponentStateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,161,pk.setComponentName(hostComponentStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,162,pk.setHostId(hostComponentStateEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,164,HostComponentDesiredStateEntity hostComponentDesiredStateEntity = hostComponentDesiredStateDAO.findByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,49,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,149,private final HostComponentDesiredStateEntityPK desiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,796,desiredStateEntityPK = getHostComponentDesiredStateEntityPK(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,813,desiredStateEntityPK = getHostComponentDesiredStateEntityPK(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1904,private static HostComponentDesiredStateEntityPK getHostComponentDesiredStateEntityPK(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1905,HostComponentDesiredStateEntity desiredStateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1907,HostComponentDesiredStateEntityPK dpk = new HostComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1908,dpk.setClusterId(desiredStateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1909,dpk.setComponentName(desiredStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1910,dpk.setServiceName(desiredStateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1911,dpk.setHostId(desiredStateEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1912,return dpk;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,77,query = "SELECT viewInstance FROM ViewInstanceEntity viewInstance"),
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,245,this.alterNames = 1;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,255,this.name = instanceConfig.getName();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,258,this.viewName = view.getName();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,259,this.description = instanceConfig.getDescription();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,260,this.clusterHandle = null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,261,this.visible = instanceConfig.isVisible() ? 'Y' : 'N';
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,262,this.alterNames = 1;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,263,this.clusterType = ClusterType.LOCAL_AMBARI;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,294,this.instanceConfig = null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,296,this.viewName = view.getName();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,297,this.description = null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,298,this.clusterHandle = null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,299,this.visible = 'Y';
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,300,this.alterNames = 1;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,960,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,961,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,995,this.viewUrl = null;
ambari-server/src/main/java/org/apache/ambari/server/stack/BaseModule.java,75,mergedModules.add(module);
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionModule.java,256,serviceModules.put(module.getId(), module);
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionModule.java,257,extensionInfo.getServices().add(module.getModuleInfo());
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceModule.java,563,componentModules.put(module.getId(), module);
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceModule.java,564,serviceInfo.getComponents().add(module.getModuleInfo());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,319,serviceModules.put(module.getId(), module);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,320,stackInfo.getServices().add(module.getModuleInfo());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,669,configurationModules.put(module.getId(), module);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,670,stackInfo.getProperties().addAll(module.getModuleInfo().getProperties());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,671,stackInfo.setConfigTypeAttributes(module.getConfigType(), module.getModuleInfo().getAttributes());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,551,newTag = "version1";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,33,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,47,private static final Logger logger = Logger.getLogger(LogSearch.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,75,logger.error("Error running logsearch server", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,90,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,92,logger.debug(server.dump());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,93,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,116,logger.info("Building https server...........");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,136,logger.info("Building http server...........");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,144,logger.info("Starting logsearch server URI=" + logsearchURI);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,172,logger.error(ex.getLocalizedMessage() + " PORT :" + port);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,111,replacement = applyReplacementFunction(function, replacement);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,145,private String applyReplacementFunction(String function, String replacement) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,164,return f.perform(argsList, replacement);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,185,String perform(String[] args, String data);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,201,public String perform(String[] args, String data) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,235,public String perform(String[] args, String data) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKrbFilter.java,509,if(headerName.equalsIgnoreCase("Set-Cookie") && value.startsWith("JSESSIONID")){
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,316,while (!interactiveHandler.done()) {
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,317,StringBuilder query = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,319,while (reader.ready()) {
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,320,query.append((char) reader.read());
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,323,String response = interactiveHandler.getResponse(query.toString());
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,325,if (response != null) {
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,326,writer.write(response);
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,327,writer.newLine();
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,328,writer.flush();
ambari-server/src/main/java/org/apache/ambari/server/utils/ShellCommandUtil.java,332,writer.close();
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperFactoryImpl.java,89,return new LoggingRequestHelperImpl(logSearchHostName, logSearchPortNumber, ambariManagementController.getCredentialStoreService(), cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,95,public LoggingRequestHelperImpl(String hostName, String portNumber, CredentialStoreService credentialStoreService, Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,96,this(hostName, portNumber, credentialStoreService, cluster, new DefaultNetworkConnection());
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,99,protected LoggingRequestHelperImpl(String hostName, String portNumber, CredentialStoreService credentialStoreService, Cluster cluster, NetworkConnection networkConnection) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,110,URI logSearchURI = createLogSearchQueryURI("http", queryParameters);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,221,URI logLevelQueryURI = createLogLevelQueryURI("http", componentName, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,224,HttpURLConnection httpURLConnection = (HttpURLConnection) logLevelQueryURI.toURL().openConnection();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3344,List<ClusterConfigMappingEntity> clusterConfigMappingsForStack = clusterDAO.getClusterConfigMappingsByStack(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3347,Collection<ClusterConfigMappingEntity> latestConfigMappingByStack = getLatestConfigMapping(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3348,clusterConfigMappingsForStack);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3352,for(ClusterConfigMappingEntity configMappingEntity: configMappingEntities){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3353,String type = configMappingEntity.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3354,String tag =  configMappingEntity.getTag();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3356,for (ClusterConfigMappingEntity latest : latestConfigMappingByStack) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3357,String latestType = latest.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3358,String latestTag = latest.getTag();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3361,if (StringUtils.equals(type, latestType) && StringUtils.equals(tag, latestTag)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3362,LOG.info("{} with version tag {} is selected for stack {}", type, tag, stackId.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3363,configMappingEntity.setSelected(1);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3389,public Collection<ClusterConfigMappingEntity> getLatestConfigMapping(List<ClusterConfigMappingEntity> clusterConfigMappingEntities){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3390,Map<String, ClusterConfigMappingEntity> temp = new HashMap<String, ClusterConfigMappingEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3391,for (ClusterConfigMappingEntity e : clusterConfigMappingEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3392,String type = e.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3393,if(temp.containsKey(type)){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3394,ClusterConfigMappingEntity entityStored = temp.get(type);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3395,Long timestampStored = entityStored.getCreateTimestamp();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3396,Long timestamp = e.getCreateTimestamp();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3397,if(timestamp > timestampStored){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3398,temp.put(type, e); //find a newer config for the given type
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3401,temp.put(type, e); //first time encounter a type, add it
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3405,return temp.values();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1270,r.setMaintenanceState(maintenanceStateHelper.getEffectiveState(sch, host).name());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1321,r.setMaintenanceState(maintenanceStateHelper.getEffectiveState(sch, host).name());
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,113,HttpURLConnection httpURLConnection  = (HttpURLConnection)logSearchURI.toURL().openConnection();
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,124,StringReader stringReader =
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,125,new StringReader(buffer.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,25,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,66,private Configuration configuration;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,564,LOG.info("Applying configuration with tag '{}' to " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,442,String namenodes = properties.get(String.format("dfs.ha.namenodes.%s", nameServices));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,443,if (!StringUtils.isEmpty(namenodes)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,444,return (namenodes.split(",").length > 1);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/GroupEntity.java,94,public void setLdapGroup(Boolean ldapGroup) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,249,groupEntity.setLdapGroup(true);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,633,groupEntity.setLdapGroup(true);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,669,groupEntity.setLdapGroup(true);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,290,if (type == UpgradeType.ROLLING) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,291,list = getDowngradeGroupsForRolling();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,293,list = getDowngradeGroupsForNonrolling();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,580,if (status.getStatus().isInProgress()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,85,public static CalculatedStatus getCompletedStatus() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,86,return new CalculatedStatus(HostRoleStatus.COMPLETED, HostRoleStatus.COMPLETED, 100.0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,418,private static HostRoleStatus calculateSummaryStatusOfUpgrade(Map<HostRoleStatus, Integer> counters, int total) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,431,private static HostRoleStatus calculateSummaryDisplayStatus(Map<HostRoleStatus, Integer> counters,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,432,int total, boolean skippable) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,75,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,561,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,562,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,736,CalculatedStatus status = CalculatedStatus.statusFromStageSummary(summary, summary.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,737,if (summary.isEmpty() && logicalRequest == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,742,status = CalculatedStatus.getCompletedStatus();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,342,status = CalculatedStatus.getCompletedStatus();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,216,HOST_COMPONENT_STATE_TABLE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,225,String updateSQL = MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,227,HOST_COMPONENT_STATE_TABLE, HOST_COMPONENT_STATE_ID_COLUMN, m_hcsId.getAndIncrement(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,228,clusterId, serviceName, componentName, hostId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,230,dbAccessor.executeQuery(updateSQL);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,497,private final Queue<String> responses = new LinkedList<String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,520,return responses.size() == 0;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,525,return responses.poll();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,332,LOG.info("HeartBeatHandler.sendCommands: sending ExecutionCommand for host {}, role {}, roleCommand {}, and command ID {}, task ID {}",
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,555,+ schName + ", host: " + hostname + " Action id " + report.getActionId() + " and Task id " + report.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,201,LOG.debug("Comparing task id: {}, original start time: {}, now: {}",
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,135,public void setEventPublisher(AmbariEventPublisher ambariEventPublisher) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,77,if (archiveDir.exists() && viewArchive.lastModified() > archiveDir.lastModified()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,147,protected static final int DEFAULT_REQUEST_READ_TIMEOUT    = 10000;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,342,String     archivePath = args[1];
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,343,ViewModule viewModule  = new ViewModule();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,520,readViewArchives(false, false, ALL_VIEWS_REG_EXP);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,563,String viewName     = viewEntity.getCommonName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,564,String version      = viewEntity.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,629,public void updateView(ViewInstanceEntity instanceEntity){
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,631,if(null != viewEntity && null != viewEntity.getView()){
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,660,String viewName     = viewEntity.getCommonName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,661,String version      = viewEntity.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,669,version + "/" +instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,711,targetInstanceEntity.getName());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,880,for (ViewInstanceEntity instanceEntity: definitionEntity.getInstances()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,881,if (checkPermission(instanceEntity, true) ) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,908,String name  = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,968,Clusters clusters  = clustersProvider.get();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,969,Long     clusterId = event.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,975,StackId     stackId       = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,976,Set<String> serviceNames  = cluster.getServices().keySet();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,980,String             viewName   = viewEntity.getName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,981,ViewConfig         viewConfig = viewEntity.getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1032,String stackVersion       = stackId.getStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1093,ViewParameterEntity viewParameterEntity =  new ViewParameterEntity();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1147,Class<?> clazz      = resourceConfiguration.getResourceClass(cl);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1148,String   idProperty = resourceConfiguration.getIdProperty();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1168,PermissionEntity permissionEntity =  new PermissionEntity();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1243,Resource.Type  type           = resourceDefinition.getType();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1255,viewInstanceDefinition.addService(viewDefinition.getResourceDefinition(type).getPluralName(),service);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1266,ViewConfig viewConfig     = viewDefinition.getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1335,final ViewContext viewContext) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1383,String      viewName      = view.getName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1384,ViewEntity  persistedView = viewDAO.findByName(viewName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1399,for( ViewInstanceEntity instance : view.getInstances()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1411,for (ViewInstanceEntity persistedInstance : persistedView.getInstances()){
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1413,String             instanceName = persistedInstance.getName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1414,ViewInstanceEntity instance     = view.getInstanceDefinition(instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1440,String viewName     = instanceEntity.getViewDefinition().getViewName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1441,String version      = instanceEntity.getViewDefinition().getVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1530,File.separator + EXTRACTED_ARCHIVES_DIR;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1534,try {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1535,final ViewConfig viewConfig = archiveUtility.getViewConfigFromArchive(archiveFile);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1536,String viewName = ViewEntity.getViewName(viewConfig.getName(), viewConfig.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1537,final String extractedArchiveDirPath = extractedArchivesPath + File.separator + viewName;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1538,final File extractedArchiveDirFile = archiveUtility.getFile(extractedArchiveDirPath);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1539,final ViewEntity viewDefinition = new ViewEntity(viewConfig, configuration, extractedArchiveDirPath);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1540,addDefinition(viewDefinition);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1541,readViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile, ambariMetaInfoProvider.get().getServerVersion());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1543,LOG.error("Could not process archive at path "+path, e);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1563,File[] files  = viewDir.listFiles();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1578,String version    = viewConfig.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1579,String viewName   = ViewEntity.getViewName(commonName, version);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1618,for(ViewEntity view : getDefinitions()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1803,Long clusterId= cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1876,checkViewVersion(view, config.getMaxAmbariVersion(), serverVersion, "maximum", 1, "greater than");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1899,index > 0 ? VersionUtils.compareVersions(serverVersion, version.substring(0, index), index) : 0;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1933,ViewExtractor      extractor      = injector.getInstance(ViewExtractor.class);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1935,Configuration      configuration  = injector.getInstance(Configuration.class);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1949,String version    = viewConfig.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1950,String viewName   = ViewEntity.getViewName(commonName, version);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1953,File   extractedArchiveDirFile = archiveUtility.getFile(extractedArchiveDirPath);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1966,((ViewClassLoader)classLoader).close();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2043,protected AmbariStreamProvider createRemoteAmbariStreamProvider(Long clusterId){
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2045,if(clusterEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2047,clusterEntity.getUsername(),clusterEntity.getPassword(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2048,configuration.getViewAmbariRequestConnectTimeout(),configuration.getViewAmbariRequestReadTimeout());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2060,private String getBaseurl(String url){
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2062,return url.substring(0,index);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,75,private static final String KERBEROS_ENABLE="logsearch.spnego.kerberos.enable";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,101,ServerConnector connector = new ServerConnector(server);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,119,HttpConfiguration https = new HttpConfiguration();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,120,https.addCustomizer(new SecureRequestCustomizer());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,132,new HttpConnectionFactory(https));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2763,clusterDAO.getClusterConfigMappingEntitiesByCluster(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2765,if (configTypes.contains(entity.getType()) && entity.isSelected() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2766,entity.setSelected(0);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2767,entity = clusterDAO.mergeConfigMapping(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2828,clusterDAO.getClusterConfigMappingEntitiesByCluster(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2832,if (e.isSelected() > 0 && e.getType().equals(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2833,e.setSelected(0);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2834,e = clusterDAO.mergeConfigMapping(e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2901,List<ClusterConfigEntity> configEntities = new ArrayList<ClusterConfigEntity>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2905,for (ClusterConfigMappingEntity mappingEntity : clusterDAO.getClusterConfigMappingEntitiesByCluster(getClusterId())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2906,if (mappingEntity.isSelected() > 0 && configTypes.contains(mappingEntity.getType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2907,ClusterConfigEntity configEntity =
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2908,clusterDAO.findConfig(getClusterId(), mappingEntity.getType(), mappingEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2909,if (configEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2910,configEntities.add(configEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2912,LOG.error("Desired cluster config type={}, tag={} is not present in database," +
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2917,return configEntities;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1208,cancelCommand.setReason("");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,27,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,75,LOG.debug("Got exception during LDAP authentification attempt", e);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,78,if (cause != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,82,if ((cause != e) && (cause instanceof
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,83,org.springframework.ldap.AuthenticationException)) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,35,import org.springframework.security.ldap.authentication.BindAuthenticator;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,42,public class AmbariLdapBindAuthenticator extends BindAuthenticator {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,58,DirContextOperations user = super.authenticate(authentication);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,59,LdapServerProperties ldapServerProperties =
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,60,configuration.getLdapServerProperties();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,68,String loginName  = authentication.getName(); // user login name the user has logged in
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,70,if (!ldapUserName.equals(loginName)) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,97,groupBase = indexOfBaseDn <= 0 ? "" : groupBase.substring(0,indexOfBaseDn - 1);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,100,? user.getStringAttribute(adminGroupMappingMemberAttr) : user.getNameInNamespace();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,117,List<String> ambariAdminGroups = ldapTemplate.search(
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,118,groupBase, setAmbariAdminAttrFilter, attributesMapper);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,133,ldapServerProperties.getAdminGroupMappingRules();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,135,ldapServerProperties.getGroupNamingAttr();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,142,groupMembershipAttr,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,143,memberValue,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,144,groupObjectClass,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,145,adminGroupMappingRegex);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,148,groupMembershipAttr,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,149,memberValue,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,150,groupSearchFilter);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,36,private ViewContext viewContext;
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,37,private final static Logger LOG = LoggerFactory.getLogger(ZeppelinServlet.class);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,40,public void init(ServletConfig config) throws ServletException {
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,41,super.init(config);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,43,ServletContext context = config.getServletContext();
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,44,viewContext = (ViewContext) context.getAttribute(ViewContext.CONTEXT_ATTRIBUTE);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,48,protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,49,response.setContentType("text/html");
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,50,response.setStatus(HttpServletResponse.SC_OK);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,51,String publicName = "";
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,52,String port = "";
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,53,try {
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,54,port = viewContext.getProperties().get("zeppelin.server.port");
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,55,if (viewContext.getCluster() != null) {
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,56,List<String> hostsForServiceComponents = viewContext.getCluster().getHostsForServiceComponent("ZEPPELIN", "ZEPPELIN_MASTER");
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,57,publicName = hostsForServiceComponents.get(0);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,59,publicName = viewContext.getProperties().get("zeppelin.host.publicname");
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,62,LOG.error("Zeppelin view servlet failed", e);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,65,String serviceCheckResponse = ZeppelinServiceCheck.check(publicName, port);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,66,request.setAttribute("serviceCheckResponse", serviceCheckResponse);
contrib/views/zeppelin/src/main/java/org/apache/ambari/view/zeppelin/ZeppelinServlet.java,68,request.getRequestDispatcher("WEB-INF/index.jsp").forward(request, response);
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,171,ServiceComponentHost sch = event.getServiceComponentHost();
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,173,if (sch != null && sch.isRecoveryEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,174,invalidateRecoveryTimestamp(sch.getClusterName(), sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,284,private List<String> getEnabledComponents(String hostname) {
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,287,if (cluster != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,288,List<ServiceComponentHost> scHosts = cluster.getServiceComponentHosts(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,290,for (ServiceComponentHost sch : scHosts) {
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryConfigHelper.java,291,if (sch.isRecoveryEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/events/MaintenanceModeEvent.java,66,this(state, service, null, null);
ambari-server/src/main/java/org/apache/ambari/server/events/MaintenanceModeEvent.java,77,public MaintenanceModeEvent(MaintenanceState state, Host host) {
ambari-server/src/main/java/org/apache/ambari/server/events/MaintenanceModeEvent.java,78,this(state, null, host, null);
ambari-server/src/main/java/org/apache/ambari/server/events/MaintenanceModeEvent.java,91,this(state, null, null, serviceComponentHost);
ambari-server/src/main/java/org/apache/ambari/server/events/MaintenanceModeEvent.java,106,private MaintenanceModeEvent(MaintenanceState state, Service service,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,93,.getAttribute(LOGSEARCH_SC_SESSION_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,860,handleGlobalsBackwardsCompability(request, propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,868,private void handleGlobalsBackwardsCompability(ConfigurationRequest request,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,869,Map<String, Map<String, String>> propertiesAttributes) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,870,Cluster cluster = clusters.getCluster(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,871,if(request.getType().equals(Configuration.GLOBAL_CONFIG_TAG)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,872,Map<String, Map<String, String>> configTypes = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,873,configTypes.put(Configuration.GLOBAL_CONFIG_TAG, request.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,874,configHelper.moveDeprecatedGlobals(cluster.getCurrentStackVersion(), configTypes, cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,876,for(Map.Entry<String, Map<String, String>> configType : configTypes.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,877,String configTypeName = configType.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,878,Map<String, String> properties = configType.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,880,if(configTypeName.equals(Configuration.GLOBAL_CONFIG_TAG)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,881,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,884,String tag;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,885,if(cluster.getConfigsByType(configTypeName) == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,886,tag = "version1";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,888,tag = "version" + System.currentTimeMillis();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,891,Config config = createConfig(cluster, configTypeName, properties, tag, propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,893,if (config != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,894,String authName = getAuthName();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,896,if (cluster.addDesiredConfig(authName, Collections.singleton(config)) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,897,LOG.info("cluster '" + cluster.getClusterName() + "' "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,898,+ "changed by: '" + authName + "'; "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,899,+ "type='" + config.getType() + "' "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,900,+ "tag='" + config.getTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2388,if (configurationTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2389,configHelper.applyCustomConfig(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2390,configurations, Configuration.GLOBAL_CONFIG_TAG,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2391,Configuration.RCA_ENABLED_PROPERTY, "false", false);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,43,import org.apache.ambari.server.upgrade.UpgradeCatalog170;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,879,public void moveDeprecatedGlobals(StackId stackId, Map<String, Map<String, String>> configurations, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,880,Map<String, String> globalConfigurations = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,882,if (configurations.get(Configuration.GLOBAL_CONFIG_TAG) == null ||
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,883,configurations.get(Configuration.GLOBAL_CONFIG_TAG).size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,884,return;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,887,globalConfigurations.putAll(configurations.get(Configuration.GLOBAL_CONFIG_TAG));
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,889,if (globalConfigurations != null && globalConfigurations.size() != 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,890,LOG.warn("Global configurations are deprecated, "
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,891,+ "please use *-env");
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,894,for (Map.Entry<String, String> property : globalConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,895,String propertyName = property.getKey();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,896,String propertyValue = property.getValue();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,898,Set<String> newConfigTypes = null;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,899,try {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,900,newConfigTypes = findConfigTypesByPropertyName(stackId, propertyName, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,902,LOG.error("Exception while getting configurations from the stacks", e);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,903,return;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,906,newConfigTypes.remove(Configuration.GLOBAL_CONFIG_TAG);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,908,String newConfigType = null;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,909,if (newConfigTypes.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,910,newConfigType = newConfigTypes.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,912,newConfigType = UpgradeCatalog170.getAdditionalMappingGlobalToEnv().get(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,915,if (newConfigType == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,916,LOG.warn("Cannot find where to map " + propertyName + " from " + Configuration.GLOBAL_CONFIG_TAG +
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,918,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,921,LOG.info("Mapping config " + propertyName + " from " + Configuration.GLOBAL_CONFIG_TAG +
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,925,configurations.get(Configuration.GLOBAL_CONFIG_TAG).remove(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,927,if (!configurations.containsKey(newConfigType)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,928,configurations.put(newConfigType, new HashMap<String, String>());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,930,configurations.get(newConfigType).put(propertyName, propertyValue);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,933,if (configurations.get(Configuration.GLOBAL_CONFIG_TAG).size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,934,configurations.remove(Configuration.GLOBAL_CONFIG_TAG);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1069,Collection<String> keys = mergeKeyNames(cluster, type, tags.values());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1071,if (serviceInfo.hasDependencyAndPropertyFor(type, keys) || !hasPropertyFor(stackId, type, keys)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1072,stale = true;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1088,Collection<String> changed = findChangedKeys(cluster, type,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1089,tags.values(), actualTags.values());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1090,if (serviceInfo.hasDependencyAndPropertyFor(type, changed)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1091,stale = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,304,public void convertGlobalProperties(ClusterTopology topology,
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,305,Map<String, Map<String, String>> blueprintConfigurations) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,307,Stack stack = topology.getBlueprint().getStack();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,308,StackId stackId = new StackId(stack.getName(), stack.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,309,getController().getConfigHelper().moveDeprecatedGlobals(
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,310,stackId, blueprintConfigurations, getClusterName(topology.getClusterId()));
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,605,convertGlobalProperties(topology, userProvidedGroupProperties);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,177,catalogBinder.addBinding().to(UpgradeCatalog150.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,178,catalogBinder.addBinding().to(UpgradeCatalog151.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,179,catalogBinder.addBinding().to(UpgradeCatalog160.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,180,catalogBinder.addBinding().to(UpgradeCatalog161.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,181,catalogBinder.addBinding().to(UpgradeCatalog170.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,18,package org.apache.ambari.server.upgrade;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,20,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,21,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,22,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,23,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,24,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,25,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,26,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,27,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,28,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,29,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,31,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,32,import javax.persistence.Query;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,33,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,34,import javax.persistence.criteria.CriteriaBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,35,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,36,import javax.persistence.criteria.Expression;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,37,import javax.persistence.criteria.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,38,import javax.persistence.criteria.Root;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,40,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,41,import org.apache.ambari.server.actionmanager.HostRoleStatus;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,42,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,43,import org.apache.ambari.server.configuration.Configuration.DatabaseType;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,44,import org.apache.ambari.server.orm.DBAccessor.DBColumnInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,45,import org.apache.ambari.server.orm.dao.ClusterDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,46,import org.apache.ambari.server.orm.dao.ClusterServiceDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,47,import org.apache.ambari.server.orm.dao.ClusterStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,48,import org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,49,import org.apache.ambari.server.orm.dao.HostComponentStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,50,import org.apache.ambari.server.orm.dao.HostDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,51,import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,52,import org.apache.ambari.server.orm.dao.KeyValueDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,53,import org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,54,import org.apache.ambari.server.orm.entities.ClusterConfigEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,55,import org.apache.ambari.server.orm.entities.ClusterConfigMappingEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,56,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,57,import org.apache.ambari.server.orm.entities.ClusterServiceEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,58,import org.apache.ambari.server.orm.entities.ClusterServiceEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,59,import org.apache.ambari.server.orm.entities.ClusterStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,60,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,61,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,62,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,63,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,64,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,65,import org.apache.ambari.server.orm.entities.KeyValueEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,66,import org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,67,import org.apache.ambari.server.orm.entities.StackEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,68,import org.apache.ambari.server.state.HostComponentAdminState;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,69,import org.apache.ambari.server.state.PropertyInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,70,import org.apache.ambari.server.state.ServiceInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,71,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,72,import org.eclipse.persistence.jpa.JpaEntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,73,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,74,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,76,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,77,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,78,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,80,public class UpgradeCatalog150 extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,81,private static final Logger LOG = LoggerFactory.getLogger(UpgradeCatalog150.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,82,private static final String quartzScriptFilePattern = "quartz.%s.sql";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,83,private Injector injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,86,public UpgradeCatalog150(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,87,super(injector);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,88,this.injector = injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,92,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,93,return "1.5.0";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,97,public void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,98,LOG.debug("Upgrading schema...");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,99,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,100,List<DBColumnInfo> columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,106,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,107,columns.add(new DBColumnInfo("type_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,108,columns.add(new DBColumnInfo("version_tag", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,109,columns.add(new DBColumnInfo("create_timestamp", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,110,columns.add(new DBColumnInfo("selected", Integer.class, 0, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,111,columns.add(new DBColumnInfo("user_name", String.class, 255, "_db", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,113,dbAccessor.createTable("clusterconfigmapping", columns, "cluster_id", "type_name", "create_timestamp");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,116,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,117,columns.add(new DBColumnInfo("request_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,118,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,119,columns.add(new DBColumnInfo("request_schedule_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,120,columns.add(new DBColumnInfo("command_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,121,columns.add(new DBColumnInfo("create_time", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,122,columns.add(new DBColumnInfo("end_time", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,123,columns.add(new DBColumnInfo("inputs", byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,124,columns.add(new DBColumnInfo("request_context", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,125,columns.add(new DBColumnInfo("request_type", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,126,columns.add(new DBColumnInfo("start_time", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,127,columns.add(new DBColumnInfo("status", String.class, 255));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,129,dbAccessor.createTable("request", columns, "request_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,132,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,133,columns.add(new DBColumnInfo("schedule_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,134,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,135,columns.add(new DBColumnInfo("description", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,136,columns.add(new DBColumnInfo("status", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,137,columns.add(new DBColumnInfo("batch_separation_seconds", Integer.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,138,columns.add(new DBColumnInfo("batch_toleration_limit", Integer.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,139,columns.add(new DBColumnInfo("create_user", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,140,columns.add(new DBColumnInfo("create_timestamp", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,141,columns.add(new DBColumnInfo("update_user", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,142,columns.add(new DBColumnInfo("update_timestamp", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,143,columns.add(new DBColumnInfo("minutes", String.class, 10, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,144,columns.add(new DBColumnInfo("hours", String.class, 10, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,145,columns.add(new DBColumnInfo("days_of_month", String.class, 10, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,146,columns.add(new DBColumnInfo("month", String.class, 10, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,147,columns.add(new DBColumnInfo("day_of_week", String.class, 10, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,148,columns.add(new DBColumnInfo("yearToSchedule", String.class, 10, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,149,columns.add(new DBColumnInfo("startTime", String.class, 50, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,150,columns.add(new DBColumnInfo("endTime", String.class, 50, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,151,columns.add(new DBColumnInfo("last_execution_status", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,153,dbAccessor.createTable("requestschedule", columns, "schedule_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,156,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,157,columns.add(new DBColumnInfo("schedule_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,158,columns.add(new DBColumnInfo("batch_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,159,columns.add(new DBColumnInfo("request_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,160,columns.add(new DBColumnInfo("request_type", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,161,columns.add(new DBColumnInfo("request_uri", String.class, 1024, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,162,columns.add(new DBColumnInfo("request_body", byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,163,columns.add(new DBColumnInfo("request_status", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,164,columns.add(new DBColumnInfo("return_code", Integer.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,165,columns.add(new DBColumnInfo("return_message", String.class, 2000, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,167,dbAccessor.createTable("requestschedulebatchrequest", columns, "schedule_id", "batch_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,170,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,171,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,172,columns.add(new DBColumnInfo("host_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,173,columns.add(new DBColumnInfo("type_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,174,columns.add(new DBColumnInfo("version_tag", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,175,columns.add(new DBColumnInfo("service_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,176,columns.add(new DBColumnInfo("create_timestamp", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,177,columns.add(new DBColumnInfo("selected", Integer.class, 0, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,179,dbAccessor.createTable("hostconfigmapping", columns, "cluster_id", "host_name", "type_name", "create_timestamp");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,182,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,183,columns.add(new DBColumnInfo("sequence_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,184,columns.add(new DBColumnInfo("value", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,186,dbAccessor.createTable("ambari_sequences", columns, "sequence_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,190,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,191,columns.add(new DBColumnInfo("metainfo_key", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,192,columns.add(new DBColumnInfo("metainfo_value", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,194,dbAccessor.createTable("metainfo", columns, "metainfo_key");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,197,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,198,columns.add(new DBColumnInfo("group_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,199,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,200,columns.add(new DBColumnInfo("group_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,201,columns.add(new DBColumnInfo("tag", String.class, 1024, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,202,columns.add(new DBColumnInfo("description", String.class, 1024, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,203,columns.add(new DBColumnInfo("create_timestamp", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,205,dbAccessor.createTable("configgroup", columns, "group_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,208,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,209,columns.add(new DBColumnInfo("config_group_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,210,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,211,columns.add(new DBColumnInfo("config_type", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,212,columns.add(new DBColumnInfo("version_tag", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,213,columns.add(new DBColumnInfo("user_name", String.class, 255, "_db", true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,214,columns.add(new DBColumnInfo("create_timestamp", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,216,dbAccessor.createTable("confgroupclusterconfigmapping", columns, "config_group_id", "cluster_id", "config_type");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,219,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,220,columns.add(new DBColumnInfo("config_group_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,221,columns.add(new DBColumnInfo("host_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,223,dbAccessor.createTable("configgrouphostmapping", columns, "config_group_id", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,226,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,227,columns.add(new DBColumnInfo("blueprint_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,228,columns.add(new DBColumnInfo("stack_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,229,columns.add(new DBColumnInfo("stack_version", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,231,dbAccessor.createTable("blueprint", columns, "blueprint_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,234,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,235,columns.add(new DBColumnInfo("blueprint_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,236,columns.add(new DBColumnInfo("type_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,237,columns.add(new DBColumnInfo("config_data", byte[].class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,239,dbAccessor.createTable("blueprint_configuration", columns, "blueprint_name", "type_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,242,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,243,columns.add(new DBColumnInfo("blueprint_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,244,columns.add(new DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,245,columns.add(new DBColumnInfo("cardinality", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,247,dbAccessor.createTable("hostgroup", columns, "blueprint_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,250,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,251,columns.add(new DBColumnInfo("blueprint_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,252,columns.add(new DBColumnInfo("hostgroup_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,253,columns.add(new DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,255,dbAccessor.createTable("hostgroup_component", columns, "blueprint_name", "hostgroup_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,258,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,259,columns.add(new DBColumnInfo("filter_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,260,columns.add(new DBColumnInfo("request_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,261,columns.add(new DBColumnInfo("service_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,262,columns.add(new DBColumnInfo("component_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,263,columns.add(new DBColumnInfo("hosts", byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,265,dbAccessor.createTable("requestresourcefilter", columns, "filter_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,267,createQuartzTables();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,272,dbAccessor.addColumn("hostcomponentdesiredstate", new DBColumnInfo("maintenance_state", String.class, 32, "OFF", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,273,dbAccessor.addColumn("servicedesiredstate", new DBColumnInfo("maintenance_state", String.class, 32, "OFF", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,274,dbAccessor.addColumn("hoststate", new DBColumnInfo("maintenance_state", String.class, 512, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,275,dbAccessor.addColumn("hostcomponentdesiredstate", new DBColumnInfo("admin_state", String.class, 32, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,276,dbAccessor.addColumn("hosts", new DBColumnInfo("ph_cpu_count", Integer.class, 32, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,277,dbAccessor.addColumn("clusterstate", new DBColumnInfo("current_stack_version", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,278,dbAccessor.addColumn("hostconfigmapping", new DBColumnInfo("user_name", String.class, 255, "_db", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,279,dbAccessor.addColumn("stage", new DBColumnInfo("request_context", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,280,dbAccessor.addColumn("stage", new DBColumnInfo("cluster_host_info", byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,281,dbAccessor.addColumn("clusterconfigmapping", new DBColumnInfo("user_name", String.class, 255, "_db", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,282,dbAccessor.addColumn("host_role_command", new DBColumnInfo("end_time", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,283,dbAccessor.addColumn("host_role_command", new DBColumnInfo("structured_out", byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,284,dbAccessor.addColumn("host_role_command", new DBColumnInfo("command_detail", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,285,dbAccessor.addColumn("host_role_command", new DBColumnInfo("custom_command_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,289,if (databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,290,if (dbAccessor.tableExists("hostcomponentdesiredconfigmapping")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,291,dbAccessor.executeQuery("ALTER TABLE hostcomponentdesiredconfigmapping rename to hcdesiredconfigmapping", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,293,dbAccessor.executeQuery("ALTER TABLE users ALTER column user_id DROP DEFAULT", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,294,dbAccessor.executeQuery("ALTER TABLE users ALTER column ldap_user TYPE INTEGER USING CASE WHEN ldap_user=true THEN 1 ELSE 0 END", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,297,if (databaseType == DatabaseType.ORACLE || databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,298,if (dbAccessor.tableHasColumn("hosts", "disks_info")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,299,dbAccessor.executeQuery("ALTER TABLE hosts DROP COLUMN disks_info", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,305,if (databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,306,String dbName = configuration.getServerJDBCPostgresSchemaName();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,307,moveRCATableInMySQL("workflow", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,308,moveRCATableInMySQL("job", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,309,moveRCATableInMySQL("task", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,310,moveRCATableInMySQL("taskAttempt", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,311,moveRCATableInMySQL("hdfsEvent", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,312,moveRCATableInMySQL("mapreduceEvent", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,313,moveRCATableInMySQL("clusterEvent", dbName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,314,dbAccessor.executeQuery("DROP DATABASE IF EXISTS ambarirca");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,319,String tableName = "request";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,320,if (!dbAccessor.tableExists(tableName)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,321,String msg = String.format("Table \"%s\" was not created during schema upgrade", tableName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,322,LOG.error(msg);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,323,throw new AmbariException(msg);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,325,String query = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,326,if (databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,327,query = getPostgresRequestUpgradeQuery();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,329,query = getOracleRequestUpgradeQuery();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,331,query = getMysqlRequestUpgradeQuery();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,334,if (query != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,335,dbAccessor.executeQuery(query);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,338,LOG.info("Table {} already filled", tableName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,343,if (databaseType == DatabaseType.POSTGRES
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,344,|| databaseType == DatabaseType.MYSQL
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,345,|| databaseType == DatabaseType.DERBY) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,348,dbAccessor.dropFKConstraint("clusterconfigmapping", "FK_clusterconfigmapping_cluster_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,349,dbAccessor.dropFKConstraint("hostcomponentdesiredstate", "FK_hostcomponentdesiredstate_host_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,350,dbAccessor.dropFKConstraint("hostcomponentdesiredstate", "FK_hostcomponentdesiredstate_component_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,351,dbAccessor.dropFKConstraint("hostcomponentstate", "FK_hostcomponentstate_component_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,352,dbAccessor.dropFKConstraint("hostcomponentstate", "FK_hostcomponentstate_host_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,353,dbAccessor.dropFKConstraint("servicecomponentdesiredstate", "FK_servicecomponentdesiredstate_service_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,354,dbAccessor.dropFKConstraint("servicedesiredstate", "FK_servicedesiredstate_service_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,355,dbAccessor.dropFKConstraint("role_success_criteria", "FK_role_success_criteria_stage_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,356,dbAccessor.dropFKConstraint("ClusterHostMapping", "FK_ClusterHostMapping_host_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,357,dbAccessor.dropFKConstraint("ClusterHostMapping", "FK_ClusterHostMapping_cluster_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,359,dbAccessor.addFKConstraint("clusterconfigmapping", "clusterconfigmappingcluster_id", "cluster_id", "clusters", "cluster_id", false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,360,dbAccessor.addFKConstraint("hostcomponentdesiredstate", "hstcmponentdesiredstatehstname", "host_name", "hosts", "host_name", false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,361,dbAccessor.addFKConstraint("hostcomponentdesiredstate", "hstcmpnntdesiredstatecmpnntnme",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,362,new String[] {"component_name", "cluster_id", "service_name"}, "servicecomponentdesiredstate",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,363,new String[] {"component_name", "cluster_id", "service_name"}, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,364,dbAccessor.addFKConstraint("hostcomponentstate", "hstcomponentstatecomponentname",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,365,new String[] {"component_name", "cluster_id", "service_name"}, "servicecomponentdesiredstate",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,366,new String[] {"component_name", "cluster_id", "service_name"}, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,367,dbAccessor.addFKConstraint("hostcomponentstate", "hostcomponentstate_host_name", "host_name", "hosts", "host_name", false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,368,dbAccessor.addFKConstraint("servicecomponentdesiredstate", "srvccmponentdesiredstatesrvcnm",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,369,new String[] {"service_name", "cluster_id"}, "clusterservices",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,370,new String[] {"service_name", "cluster_id"}, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,371,dbAccessor.addFKConstraint("servicedesiredstate", "servicedesiredstateservicename",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,372,new String[] {"service_name", "cluster_id"}, "clusterservices",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,373,new String[] {"service_name", "cluster_id"}, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,374,dbAccessor.addFKConstraint("role_success_criteria", "role_success_criteria_stage_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,375,new String[] {"stage_id", "request_id"}, "stage",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,376,new String[] {"stage_id", "request_id"}, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,377,dbAccessor.addFKConstraint("ClusterHostMapping", "ClusterHostMapping_cluster_id", "cluster_id", "clusters", "cluster_id", false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,378,dbAccessor.addFKConstraint("ClusterHostMapping", "ClusterHostMapping_host_name", "host_name", "hosts", "host_name", false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,382,dbAccessor.dropFKConstraint("confgroupclusterconfigmapping", "FK_confgroupclusterconfigmapping_config_tag", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,383,dbAccessor.dropFKConstraint("confgroupclusterconfigmapping", "FK_confgroupclusterconfigmapping_group_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,384,dbAccessor.dropFKConstraint("configgrouphostmapping", "FK_configgrouphostmapping_configgroup_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,385,dbAccessor.dropFKConstraint("configgrouphostmapping", "FK_configgrouphostmapping_host_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,393,dbAccessor.addFKConstraint("stage", "FK_stage_request_id", "request_id", "request", "request_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,394,dbAccessor.addFKConstraint("request", "FK_request_cluster_id", "cluster_id", "clusters", "cluster_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,395,dbAccessor.addFKConstraint("request", "FK_request_schedule_id", "request_schedule_id", "requestschedule", "schedule_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,396,dbAccessor.addFKConstraint("requestschedulebatchrequest", "FK_rsbatchrequest_schedule_id", "schedule_id", "requestschedule", "schedule_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,397,dbAccessor.addFKConstraint("hostconfigmapping", "FK_hostconfmapping_cluster_id", "cluster_id", "clusters", "cluster_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,398,dbAccessor.addFKConstraint("hostconfigmapping", "FK_hostconfmapping_host_name", "host_name", "hosts", "host_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,399,dbAccessor.addFKConstraint("configgroup", "FK_configgroup_cluster_id", "cluster_id", "clusters", "cluster_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,400,dbAccessor.addFKConstraint("confgroupclusterconfigmapping", "FK_confg", new String[] {"version_tag", "config_type", "cluster_id"}, "clusterconfig", new String[] {"version_tag", "type_name", "cluster_id"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,401,dbAccessor.addFKConstraint("confgroupclusterconfigmapping", "FK_cgccm_gid", "config_group_id", "configgroup", "group_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,402,dbAccessor.addFKConstraint("configgrouphostmapping", "FK_cghm_cgid", "config_group_id", "configgroup", "group_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,403,dbAccessor.addFKConstraint("configgrouphostmapping", "FK_cghm_hname", "host_name", "hosts", "host_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,404,dbAccessor.addFKConstraint("clusterconfigmapping", "FK_clustercfgmap_cluster_id", "cluster_id", "clusters", "cluster_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,405,dbAccessor.addFKConstraint("requestresourcefilter", "FK_reqresfilter_req_id", "request_id", "request", "request_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,406,dbAccessor.addFKConstraint("hostgroup", "FK_hostgroup_blueprint_name", "blueprint_name", "blueprint", "blueprint_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,407,dbAccessor.addFKConstraint("hostgroup_component", "FK_hg_blueprint_name", "blueprint_name", "hostgroup", "blueprint_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,408,dbAccessor.addFKConstraint("hostgroup_component", "FK_hgc_blueprint_name", "hostgroup_name", "hostgroup", "name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,409,dbAccessor.addFKConstraint("blueprint_configuration", "FK_cfg_blueprint_name", "blueprint_name", "blueprint", "blueprint_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,412,private void moveRCATableInMySQL(String tableName, String dbName) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,413,if (!dbAccessor.tableExists(tableName)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,414,dbAccessor.executeQuery(String.format("RENAME TABLE ambarirca.%s TO %s.%s", tableName, dbName, tableName), true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,422,public void executePreDMLUpdates() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,423,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,427,public void executeDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,429,String tableName = "serviceconfigmapping";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,430,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,432,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,438,&& dbAccessor.tableExists("clusterconfigmapping")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,440,if (databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,444,dbAccessor.executeQuery(getPostgresServiceConfigMappingQuery());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,446,dbAccessor.truncateTable(tableName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,449,LOG.warn("Unsupported database for service config mapping query. " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,455,if (dbAccessor.tableExists("ambari_sequences")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,456,if (databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,457,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,458,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,459,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,460,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,461,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,462,rs = statement.executeQuery("select * from ambari_sequences where sequence_name in " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,464,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,465,if (!rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,466,dbAccessor.executeQuery(getPostgresSequenceUpgradeQuery(), true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,468,dbAccessor.dropSequence("host_role_command_task_id_seq");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,469,dbAccessor.dropSequence("users_user_id_seq");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,470,dbAccessor.dropSequence("clusters_cluster_id_seq");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,475,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,476,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,478,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,479,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,486,String valueColumnName = "sequence_value";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,488,dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, " + valueColumnName + ") " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,490,dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, " + valueColumnName + ") " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,492,dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, " + valueColumnName + ") " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,496,((JpaEntityManager)em.getDelegate()).getServerSession().getIdentityMapAccessor().invalidateAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,502,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,504,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,505,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,506,Query nativeQuery = em.createNativeQuery("UPDATE hostcomponentstate SET current_state=?1 WHERE current_state in (?2, ?3)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,507,nativeQuery.setParameter(1, "INSTALLED");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,508,nativeQuery.setParameter(2, "STOP_FAILED");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,509,nativeQuery.setParameter(3, "START_FAILED");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,510,nativeQuery.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,515,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,517,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,518,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,519,CriteriaBuilder cb = em.getCriteriaBuilder();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,520,CriteriaQuery<HostRoleCommandEntity> c2 = cb.createQuery(HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,521,Root<HostRoleCommandEntity> hrc = c2.from(HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,522,List<HostRoleStatus> statuses = new ArrayList<HostRoleStatus>() {{
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,523,add(HostRoleStatus.PENDING);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,524,add(HostRoleStatus.QUEUED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,525,add(HostRoleStatus.IN_PROGRESS);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,527,Expression<String> exp = hrc.get("status");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,528,Predicate predicate = exp.in(statuses);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,529,c2.select(hrc).where(predicate);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,531,TypedQuery<HostRoleCommandEntity> q2 = em.createQuery(c2);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,532,List<HostRoleCommandEntity> r2 = q2.getResultList();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,534,HostRoleCommandDAO hostRoleCommandDAO = injector.getInstance(HostRoleCommandDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,535,if (r2 != null && !r2.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,536,for (HostRoleCommandEntity entity : r2) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,537,entity.setStatus(HostRoleStatus.ABORTED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,538,hostRoleCommandDAO.merge(entity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,545,stackUpgradeUtil.updateStackDetails("HDP", null);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,548,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,550,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,551,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,552,ClusterStateDAO clusterStateDAO = injector.getInstance(ClusterStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,553,List<ClusterEntity> clusterEntities = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,554,for (ClusterEntity clusterEntity : clusterEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,555,if (clusterStateDAO.findByPK(clusterEntity.getClusterId()) == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,556,ClusterStateEntity clusterStateEntity = new ClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,557,clusterStateEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,558,clusterStateEntity.setCurrentStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,560,clusterStateDAO.create(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,562,clusterEntity.setClusterStateEntity(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,564,clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,571,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,573,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,574,addHistoryServer();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,579,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,581,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,582,addMissingLog4jConfigs();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,587,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,589,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,590,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,591,processDecommissionedDatanodes();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,593,LOG.warn("Updating decommissioned datanodes to new format threw " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,600,protected void addHistoryServer() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,601,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,602,ClusterServiceDAO clusterServiceDAO = injector.getInstance(ClusterServiceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,603,ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO = injector.getInstance(ServiceComponentDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,604,HostDAO hostDao = injector.getInstance(HostDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,606,List<ClusterEntity> clusterEntities = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,607,for (final ClusterEntity clusterEntity : clusterEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,608,ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntityHS = serviceComponentDesiredStateDAO.findByName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,609,clusterEntity.getClusterId(), "MAPREDUCE", "HISTORYSERVER");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,612,if(serviceComponentDesiredStateEntityHS != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,613,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,616,ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntityJT = serviceComponentDesiredStateDAO.findByName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,617,clusterEntity.getClusterId(), "MAPREDUCE", "JOBTRACKER");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,620,if(serviceComponentDesiredStateEntityJT == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,621,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,625,HostComponentStateEntity jtHostComponentStateEntity = serviceComponentDesiredStateEntityJT.getHostComponentStateEntities().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,626,HostComponentDesiredStateEntity jtHostComponentDesiredStateEntity = serviceComponentDesiredStateEntityJT.getHostComponentDesiredStateEntities().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,627,String jtHostname = jtHostComponentStateEntity.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,628,State jtCurrState = jtHostComponentStateEntity.getCurrentState();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,629,State jtHostComponentDesiredState = jtHostComponentDesiredStateEntity.getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,630,State jtServiceComponentDesiredState = serviceComponentDesiredStateEntityJT.getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,632,ClusterServiceEntityPK pk = new ClusterServiceEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,633,pk.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,634,pk.setServiceName("MAPREDUCE");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,636,ClusterServiceEntity clusterServiceEntity = clusterServiceDAO.findByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,638,final ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity = new ServiceComponentDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,639,serviceComponentDesiredStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,640,serviceComponentDesiredStateEntity.setComponentName("HISTORYSERVER");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,641,serviceComponentDesiredStateEntity.setDesiredStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,642,serviceComponentDesiredStateEntity.setDesiredState(jtServiceComponentDesiredState);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,643,serviceComponentDesiredStateEntity.setClusterServiceEntity(clusterServiceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,644,serviceComponentDesiredStateEntity.setHostComponentDesiredStateEntities(new ArrayList<HostComponentDesiredStateEntity>());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,645,serviceComponentDesiredStateEntity.setHostComponentStateEntities(new ArrayList<HostComponentStateEntity>());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,647,serviceComponentDesiredStateDAO.create(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,649,final HostEntity host = hostDao.findByName(jtHostname);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,650,if (host == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,651,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,654,final HostComponentStateEntity stateEntity = new HostComponentStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,655,stateEntity.setHostEntity(host);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,656,stateEntity.setCurrentState(jtCurrState);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,657,stateEntity.setCurrentStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,658,stateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,660,final HostComponentDesiredStateEntity desiredStateEntity = new HostComponentDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,661,desiredStateEntity.setDesiredState(jtHostComponentDesiredState);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,662,desiredStateEntity.setDesiredStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,663,desiredStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,665,persistComponentEntities(stateEntity, desiredStateEntity, serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,669,private void persistComponentEntities(HostComponentStateEntity stateEntity,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,670,HostComponentDesiredStateEntity desiredStateEntity,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,671,ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,672,ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO = injector.getInstance(ServiceComponentDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,673,HostComponentStateDAO hostComponentStateDAO = injector.getInstance(HostComponentStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,674,HostComponentDesiredStateDAO hostComponentDesiredStateDAO = injector.getInstance(HostComponentDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,675,HostDAO hostDAO = injector.getInstance(HostDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,677,HostEntity hostEntity = stateEntity.getHostEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,679,desiredStateEntity.setHostEntity(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,680,desiredStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,681,serviceComponentDesiredStateEntity.getHostComponentDesiredStateEntities().add(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,682,hostComponentDesiredStateDAO.create(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,684,stateEntity.setHostEntity(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,685,stateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,686,serviceComponentDesiredStateEntity.getHostComponentStateEntities().add(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,687,hostComponentStateDAO.create(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,689,serviceComponentDesiredStateDAO.merge(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,691,hostEntity.addHostComponentDesiredStateEntity(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,692,hostEntity.addHostComponentStateEntity(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,694,hostDAO.merge(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,697,protected void addMissingLog4jConfigs() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,699,final String log4jConfigTypeContains = "log4j";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,700,final String defaultVersionTag = "version1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,701,final String defaultUser = "admin";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,703,LOG.debug("Adding missing configs into Ambari DB.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,704,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,705,ClusterServiceDAO clusterServiceDAO = injector.getInstance(ClusterServiceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,707,AmbariMetaInfo ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,708,Gson gson = injector.getInstance(Gson.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,710,List <ClusterEntity> clusterEntities = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,711,for (final ClusterEntity clusterEntity : clusterEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,712,Long clusterId = clusterEntity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,713,StackEntity stackEntity = clusterEntity.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,714,String stackName = stackEntity.getStackName();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,715,String stackVersion = stackEntity.getStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,717,List<ClusterServiceEntity> clusterServiceEntities = clusterServiceDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,718,for (final ClusterServiceEntity clusterServiceEntity : clusterServiceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,719,String serviceName = clusterServiceEntity.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,720,ServiceInfo serviceInfo = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,721,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,722,serviceInfo = ambariMetaInfo.getService(stackName, stackVersion, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,724,LOG.error("Service " + serviceName + " not found for " + stackName + stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,725,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,727,List<String> configTypes = serviceInfo.getConfigDependencies();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,728,if (configTypes != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,729,for (String configType : configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,730,if (configType.contains(log4jConfigTypeContains)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,731,ClusterConfigEntity configEntity = clusterDAO.findConfig(clusterId, configType, defaultVersionTag);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,733,if (configEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,734,String filename = configType + ".xml";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,735,Map<String, String> properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,736,for (PropertyInfo propertyInfo : serviceInfo.getProperties()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,737,if (filename.equals(propertyInfo.getFilename())) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,738,properties.put(propertyInfo.getName(), propertyInfo.getValue());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,741,if (!properties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,742,String configData = gson.toJson(properties);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,743,configEntity = new ClusterConfigEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,744,configEntity.setClusterId(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,745,configEntity.setType(configType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,746,configEntity.setTag(defaultVersionTag);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,747,configEntity.setData(configData);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,748,configEntity.setVersion(1L);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,749,configEntity.setTimestamp(System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,750,configEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,751,configEntity.setStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,753,LOG.debug("Creating new " + configType + " config...");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,754,clusterDAO.createConfig(configEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,756,Collection<ClusterConfigMappingEntity> entities =
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,757,clusterEntity.getConfigMappingEntities();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,759,ClusterConfigMappingEntity clusterConfigMappingEntity =
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,760,new ClusterConfigMappingEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,761,clusterConfigMappingEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,762,clusterConfigMappingEntity.setClusterId(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,763,clusterConfigMappingEntity.setType(configType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,764,clusterConfigMappingEntity.setCreateTimestamp(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,765,Long.valueOf(System.currentTimeMillis()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,766,clusterConfigMappingEntity.setSelected(1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,767,clusterConfigMappingEntity.setUser(defaultUser);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,768,clusterConfigMappingEntity.setTag(configEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,769,entities.add(clusterConfigMappingEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,770,clusterDAO.persistConfigMapping(clusterConfigMappingEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,771,clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,781,LOG.debug("Missing configs have been successfully added into Ambari DB.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,784,protected void processDecommissionedDatanodes() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,785,KeyValueDAO keyValueDAO = injector.getInstance(KeyValueDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,786,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,787,HostDAO hostDAO = injector.getInstance(HostDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,788,Gson gson = injector.getInstance(Gson.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,789,HostComponentDesiredStateDAO desiredStateDAO = injector.getInstance
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,790,(HostComponentDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,792,KeyValueEntity keyValueEntity = keyValueDAO.findByKey("decommissionDataNodesTag");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,793,String value = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,794,if (keyValueEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,795,value = keyValueEntity.getValue();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,796,if (value != null && !value.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,797,List<ClusterEntity> clusterEntities = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,798,for (ClusterEntity clusterEntity : clusterEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,799,Long clusterId = clusterEntity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,800,ClusterConfigEntity configEntity = clusterDAO.findConfig(clusterId, "hdfs-exclude-file", value.trim());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,801,if (configEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,802,String configData = configEntity.getData();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,803,if (configData != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,804,Map<String, String> properties = gson.<Map<String, String>>fromJson(configData, Map.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,805,if (properties != null && !properties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,806,String decommissionedNodes = properties.get("datanodes");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,807,if (decommissionedNodes != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,808,String[] nodes = decommissionedNodes.split(",");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,809,if (nodes.length > 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,810,for (String node : nodes) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,811,HostEntity hostEntity = hostDAO.findByName(node.trim());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,812,HostComponentDesiredStateEntityPK entityPK =
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,813,new HostComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,814,entityPK.setClusterId(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,815,entityPK.setServiceName("HDFS");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,816,entityPK.setComponentName("DATANODE");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,817,entityPK.setHostId(hostEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,818,HostComponentDesiredStateEntity desiredStateEntity =
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,819,desiredStateDAO.findByPK(entityPK);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,820,desiredStateEntity.setAdminState(HostComponentAdminState.DECOMMISSIONED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,821,desiredStateDAO.merge(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,831,KeyValueEntity newEntity = new KeyValueEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,832,newEntity.setKey("decommissionDataNodesTag-Moved");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,833,newEntity.setValue(value);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,834,keyValueDAO.create(newEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,835,keyValueDAO.remove(keyValueEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,839,private String getPostgresServiceConfigMappingQuery() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,840,return "INSERT INTO clusterconfigmapping " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,849,private String getPostgresSequenceUpgradeQuery() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,850,return "INSERT INTO ambari_sequences(sequence_name, sequence_value) " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,858,private String getPostgresRequestUpgradeQuery() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,859,return "insert into ambari.request(request_id, cluster_id, request_context, start_time, end_time, create_time) (\n" +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,869,private String getOracleRequestUpgradeQuery() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,870,return "INSERT INTO request" +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,882,private String getMysqlRequestUpgradeQuery() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,883,return "insert into request" +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,895,private void createQuartzTables() throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,896,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,899,String scriptPath = configuration.getResourceDirPath() +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,900,File.separator + "upgrade" + File.separator + "ddl" +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,901,File.separator + String.format(quartzScriptFilePattern, databaseType.getName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,903,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,904,dbAccessor.executeScript(scriptPath);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,906,LOG.error("Error reading file.", e);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,18,package org.apache.ambari.server.upgrade;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,20,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,22,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,24,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,25,import org.apache.ambari.server.configuration.Configuration.DatabaseType;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,26,import org.apache.ambari.server.orm.DBAccessor;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,28,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,29,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,34,public class UpgradeCatalog151 extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,38,public String getSourceVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,39,return "1.5.0";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,43,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,44,return "1.5.1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,50,public UpgradeCatalog151(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,51,super(injector);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,58,protected void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,59,List<DBAccessor.DBColumnInfo> columns = new ArrayList<DBAccessor.DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,60,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,66,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,67,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,68,columns.add(new DBAccessor.DBColumnInfo("label", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,69,columns.add(new DBAccessor.DBColumnInfo("version", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,70,columns.add(new DBAccessor.DBColumnInfo("archive", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,72,dbAccessor.createTable("viewmain", columns, "view_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,75,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,76,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,77,columns.add(new DBAccessor.DBColumnInfo("view_instance_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,78,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,79,columns.add(new DBAccessor.DBColumnInfo("value", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,81,dbAccessor.createTable("viewinstancedata", columns, "view_name", "view_instance_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,84,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,85,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,86,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,88,dbAccessor.createTable("viewinstance", columns, "view_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,91,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,92,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,93,columns.add(new DBAccessor.DBColumnInfo("view_instance_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,94,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,95,columns.add(new DBAccessor.DBColumnInfo("value", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,97,dbAccessor.createTable("viewinstanceproperty", columns, "view_name", "view_instance_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,100,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,101,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,102,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,103,columns.add(new DBAccessor.DBColumnInfo("description", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,104,columns.add(new DBAccessor.DBColumnInfo("required", Character.class, 1, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,106,dbAccessor.createTable("viewparameter", columns, "view_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,109,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,110,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,111,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,112,columns.add(new DBAccessor.DBColumnInfo("plural_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,113,columns.add(new DBAccessor.DBColumnInfo("id_property", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,114,columns.add(new DBAccessor.DBColumnInfo("subResource_names", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,115,columns.add(new DBAccessor.DBColumnInfo("provider", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,116,columns.add(new DBAccessor.DBColumnInfo("service", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,117,if (databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,118,columns.add(new DBAccessor.DBColumnInfo("`resource`", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,122,columns.add(new DBAccessor.DBColumnInfo("\"resource\"", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,125,dbAccessor.createTable("viewresource", columns, "view_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,129,dbAccessor.addFKConstraint("viewparameter", "FK_viewparam_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,130,dbAccessor.addFKConstraint("viewresource", "FK_viewres_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,131,dbAccessor.addFKConstraint("viewinstance", "FK_viewinst_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,132,dbAccessor.addFKConstraint("viewinstanceproperty", "FK_viewinstprop_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,133,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,134,dbAccessor.addFKConstraint("viewinstancedata", "FK_viewinstdata_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,135,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,145,public void executePreDMLUpdates() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,146,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog151.java,150,public void executeDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,19,package org.apache.ambari.server.upgrade;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,21,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,22,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,23,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,24,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,26,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,27,import org.apache.ambari.server.configuration.Configuration.DatabaseType;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,28,import org.apache.ambari.server.orm.DBAccessor;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,30,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,31,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,36,public class UpgradeCatalog160 extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,40,public String getSourceVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,41,return "1.5.1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,45,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,46,return "1.6.0";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,52,public UpgradeCatalog160(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,53,super(injector);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,60,protected void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,61,fixViewTablesForMysql();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,63,List<DBAccessor.DBColumnInfo> columns = new ArrayList<DBAccessor.DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,66,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,67,columns.add(new DBAccessor.DBColumnInfo("blueprint_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,68,columns.add(new DBAccessor.DBColumnInfo("hostgroup_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,69,columns.add(new DBAccessor.DBColumnInfo("type_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,70,columns.add(new DBAccessor.DBColumnInfo("config_data", char[].class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,72,dbAccessor.createTable("hostgroup_configuration", columns, "blueprint_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,76,columns = new ArrayList<DBAccessor.DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,77,columns.add(new DBAccessor.DBColumnInfo("id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,78,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,79,columns.add(new DBAccessor.DBColumnInfo("view_instance_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,80,columns.add(new DBAccessor.DBColumnInfo("class_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,81,columns.add(new DBAccessor.DBColumnInfo("id_property", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,83,dbAccessor.createTable("viewentity", columns, "id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,90,DBAccessor.DBColumnInfo restartRequiredColumn = new DBAccessor.DBColumnInfo(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,93,dbAccessor.addColumn("hostcomponentdesiredstate", restartRequiredColumn);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,97,dbAccessor.addFKConstraint("hostgroup_configuration", "FK_hg_config_blueprint_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,98,new String[] {"blueprint_name", "hostgroup_name"}, "hostgroup", new String[] {"blueprint_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,100,dbAccessor.addFKConstraint("viewentity", "FK_viewentity_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,101,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,105,protected void fixViewTablesForMysql() throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,108,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,110,|| "ambari".equals(configuration.getServerDBName())) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,112,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,115,List<DBAccessor.DBColumnInfo> columns = new ArrayList<DBAccessor.DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,121,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,122,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,123,columns.add(new DBAccessor.DBColumnInfo("label", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,124,columns.add(new DBAccessor.DBColumnInfo("version", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,125,columns.add(new DBAccessor.DBColumnInfo("archive", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,127,dbAccessor.createTable("viewmain", columns, "view_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,130,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,131,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,132,columns.add(new DBAccessor.DBColumnInfo("view_instance_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,133,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,134,columns.add(new DBAccessor.DBColumnInfo("value", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,136,dbAccessor.createTable("viewinstancedata", columns, "view_name", "view_instance_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,139,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,140,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,141,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,143,dbAccessor.createTable("viewinstance", columns, "view_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,146,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,147,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,148,columns.add(new DBAccessor.DBColumnInfo("view_instance_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,149,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,150,columns.add(new DBAccessor.DBColumnInfo("value", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,152,dbAccessor.createTable("viewinstanceproperty", columns, "view_name", "view_instance_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,155,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,156,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,157,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,158,columns.add(new DBAccessor.DBColumnInfo("description", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,159,columns.add(new DBAccessor.DBColumnInfo("required", Character.class, 1, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,161,dbAccessor.createTable("viewparameter", columns, "view_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,164,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,165,columns.add(new DBAccessor.DBColumnInfo("view_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,166,columns.add(new DBAccessor.DBColumnInfo("name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,167,columns.add(new DBAccessor.DBColumnInfo("plural_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,168,columns.add(new DBAccessor.DBColumnInfo("id_property", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,169,columns.add(new DBAccessor.DBColumnInfo("subResource_names", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,170,columns.add(new DBAccessor.DBColumnInfo("provider", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,171,columns.add(new DBAccessor.DBColumnInfo("service", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,172,columns.add(new DBAccessor.DBColumnInfo("`resource`", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,173,dbAccessor.createTable("viewresource", columns, "view_name", "name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,177,dbAccessor.addFKConstraint("viewparameter", "FK_viewparam_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,178,dbAccessor.addFKConstraint("viewresource", "FK_viewres_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,179,dbAccessor.addFKConstraint("viewinstance", "FK_viewinst_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,180,dbAccessor.addFKConstraint("viewinstanceproperty", "FK_viewinstprop_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,181,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,182,dbAccessor.addFKConstraint("viewinstancedata", "FK_viewinstdata_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,183,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,192,public void executePreDMLUpdates() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,193,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,197,protected void executeDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,199,dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog160.java,203,updateConfigurationProperties("global", Collections.singletonMap("jobhistory_heapsize", "900"), false, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,19,package org.apache.ambari.server.upgrade;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,21,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,22,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,23,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,24,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,25,import java.sql.Types;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,26,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,27,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,28,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,30,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,31,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,33,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,34,import org.apache.ambari.server.configuration.Configuration.DatabaseType;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,35,import org.apache.ambari.server.orm.DBAccessor;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,36,import org.apache.ambari.server.orm.DBAccessor.DBColumnInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,37,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,38,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,39,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,40,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,42,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,43,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,48,public class UpgradeCatalog161 extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,52,public String getSourceVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,53,return "1.6.0";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,58,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,59,return "1.6.1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,65,private static final Logger LOG = LoggerFactory.getLogger
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,66,(UpgradeCatalog161.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,71,public UpgradeCatalog161(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,72,super(injector);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,79,protected void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,80,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,82,List<DBColumnInfo> columns;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,85,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,86,columns.add(new DBColumnInfo("operation_level_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,87,columns.add(new DBColumnInfo("request_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,88,columns.add(new DBColumnInfo("level_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,89,columns.add(new DBColumnInfo("cluster_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,90,columns.add(new DBColumnInfo("service_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,91,columns.add(new DBColumnInfo("host_component_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,92,columns.add(new DBColumnInfo("host_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,94,dbAccessor.createTable("requestoperationlevel", columns, "operation_level_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,98,if (databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,99,int columnType = dbAccessor.getColumnType("hostcomponentdesiredstate",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,102,if (columnType == Types.BOOLEAN || columnType == Types.BIT) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,103,dbAccessor.executeQuery(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,105,true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,109,if (databaseType == DatabaseType.ORACLE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,110,dbAccessor.executeQuery(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,112,true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,115,dbAccessor.executeQuery(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,117,true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,122,dbAccessor.addColumn("viewmain",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,123,new DBAccessor.DBColumnInfo("icon", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,125,dbAccessor.addColumn("viewmain",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,126,new DBAccessor.DBColumnInfo("icon64", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,128,dbAccessor.addColumn("viewinstancedata",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,129,new DBAccessor.DBColumnInfo("user_name", String.class, 255, " ", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,131,dbAccessor.dropFKConstraint("viewinstancedata", "FK_viewinstdata_view_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,132,dbAccessor.dropFKConstraint("viewinstanceproperty", "FK_viewinstprop_view_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,133,dbAccessor.dropFKConstraint("viewentity", "FK_viewentity_view_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,134,dbAccessor.dropFKConstraint("viewinstance", "FK_viewinst_view_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,137,if (databaseType == DatabaseType.ORACLE
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,138,|| databaseType == DatabaseType.MYSQL
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,139,|| databaseType == DatabaseType.DERBY) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,140,dbAccessor.executeQuery("ALTER TABLE viewinstance DROP PRIMARY KEY", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,141,dbAccessor.executeQuery("ALTER TABLE viewinstancedata DROP PRIMARY KEY", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,143,dbAccessor.executeQuery("ALTER TABLE viewinstance DROP CONSTRAINT viewinstance_pkey CASCADE", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,144,dbAccessor.executeQuery("ALTER TABLE viewinstancedata DROP CONSTRAINT viewinstancedata_pkey CASCADE", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,148,dbAccessor.addColumn("viewinstance", new DBAccessor.DBColumnInfo("view_instance_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,149,dbAccessor.addColumn("viewinstancedata",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,150,new DBAccessor.DBColumnInfo("view_instance_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,152,if (databaseType == DatabaseType.ORACLE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,154,if (dbAccessor.tableHasData("viewinstancedata")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,155,dbAccessor.executeQuery("CREATE SEQUENCE TEMP_SEQ " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,162,dbAccessor.executeQuery("UPDATE viewinstance SET view_instance_id = TEMP_SEQ.NEXTVAL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,163,dbAccessor.dropSequence("TEMP_SEQ");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,166,if (dbAccessor.tableHasData("viewinstance")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,167,dbAccessor.executeQuery("UPDATE viewinstance " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,171,if (dbAccessor.tableHasData("viewinstance")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,173,dbAccessor.executeQuery("CREATE SEQUENCE temp_seq START WITH 1");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,174,dbAccessor.executeQuery("UPDATE viewinstance SET view_instance_id = nextval('temp_seq')");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,175,dbAccessor.dropSequence("temp_seq");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,181,if (databaseType == DatabaseType.DERBY) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,182,dbAccessor.executeQuery("ALTER TABLE viewinstance ALTER COLUMN view_instance_id DEFAULT 0");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,183,dbAccessor.executeQuery("ALTER TABLE viewinstance ALTER COLUMN view_instance_id NOT NULL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,184,dbAccessor.executeQuery("ALTER TABLE viewinstancedata ALTER COLUMN view_instance_id DEFAULT 0");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,185,dbAccessor.executeQuery("ALTER TABLE viewinstancedata ALTER COLUMN view_instance_id NOT NULL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,186,dbAccessor.executeQuery("ALTER TABLE viewinstancedata ALTER COLUMN user_name DEFAULT ' '");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,187,dbAccessor.executeQuery("ALTER TABLE viewinstancedata ALTER COLUMN user_name NOT NULL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,190,dbAccessor.executeQuery("alter table viewinstance add primary key (view_instance_id)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,191,dbAccessor.executeQuery("ALTER TABLE viewinstance ADD CONSTRAINT UQ_viewinstance_name UNIQUE (view_name, name)", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,192,dbAccessor.executeQuery("ALTER TABLE viewinstance ADD CONSTRAINT UQ_viewinstance_name_id UNIQUE (view_instance_id, view_name, name)", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,194,dbAccessor.addFKConstraint("viewinstanceproperty", "FK_viewinstprop_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,195,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,196,dbAccessor.addFKConstraint("viewentity", "FK_viewentity_view_name",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,197,new String[]{"view_name", "view_instance_name"}, "viewinstance", new String[]{"view_name", "name"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,198,dbAccessor.addFKConstraint("viewinstance", "FK_viewinst_view_name", "view_name", "viewmain", "view_name", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,200,if (databaseType == DatabaseType.POSTGRES) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,201,dbAccessor.executeQuery("UPDATE viewinstancedata " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,205,dbAccessor.executeQuery("UPDATE viewinstancedata vid SET view_instance_id = (" +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,208,dbAccessor.executeQuery("UPDATE viewinstancedata AS vid JOIN viewinstance AS vi " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,213,dbAccessor.executeQuery("alter table viewinstancedata add primary key (view_instance_id, name, user_name)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,215,dbAccessor.addFKConstraint("viewinstancedata", "FK_viewinstdata_view_name", new String[]{"view_instance_id", "view_name", "view_instance_name"},
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,219,long count = 1;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,220,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,221,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,222,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,223,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,224,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,225,rs = statement.executeQuery("SELECT count(*) FROM viewinstance");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,226,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,227,if (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,228,count = rs.getLong(1) + 2;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,233,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,234,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,236,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,237,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,241,String valueColumnName = "\"value\"";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,242,if (databaseType == DatabaseType.ORACLE
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,243,|| databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,244,valueColumnName = "value";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,247,dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, " + valueColumnName + ") " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,250,dbAccessor.addColumn("viewinstance",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,251,new DBAccessor.DBColumnInfo("label", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,253,dbAccessor.addColumn("viewinstance",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,254,new DBAccessor.DBColumnInfo("description", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,256,dbAccessor.addColumn("viewinstance",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,257,new DBAccessor.DBColumnInfo("visible", Character.class, 1, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,259,dbAccessor.addColumn("viewinstance",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,260,new DBAccessor.DBColumnInfo("icon", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,262,dbAccessor.addColumn("viewinstance",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,263,new DBAccessor.DBColumnInfo("icon64", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,267,dbAccessor.addFKConstraint("requestoperationlevel", "FK_req_op_level_req_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,271,dbAccessor.addColumn("clusters", new DBColumnInfo("provisioning_state", String.class, 255, State.INIT.name(), false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,273,dbAccessor.dropFKConstraint("stage", "FK_stage_cluster_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,274,dbAccessor.dropFKConstraint("request", "FK_request_cluster_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,283,public void executePreDMLUpdates() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,284,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,288,protected void executeDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,290,dbAccessor.executeQuery("INSERT INTO ambari_sequences(sequence_name, sequence_value) " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,294,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,296,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,300,final EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,301,final TypedQuery<ClusterEntity> query = em.createQuery(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,303,ClusterEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,305,query.setParameter("provisioningState", State.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,306,final int updatedClusterProvisionedStateCount = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,308,LOG.info("Updated {} cluster provisioning states to {}",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,309,updatedClusterProvisionedStateCount, State.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,313,addMissingConfigs();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,316,protected void addMissingConfigs() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,317,updateConfigurationProperties("hbase-site", Collections.singletonMap("hbase.regionserver.info.port", "60030"), false, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,318,updateConfigurationProperties("hbase-site", Collections.singletonMap("hbase.master.info.port", "60010"), false, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,319,updateConfigurationProperties("hive-site", Collections.singletonMap("hive.heapsize", "1024"), false, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog161.java,320,updateConfigurationProperties("pig-properties", Collections.singletonMap("pig-content", "\n# Licensed to the Apache " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,19,package org.apache.ambari.server.upgrade;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,21,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,22,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,23,import java.sql.PreparedStatement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,24,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,25,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,26,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,27,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,28,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,29,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,30,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,31,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,32,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,33,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,34,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,35,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,36,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,37,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,39,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,40,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,41,import javax.persistence.criteria.CriteriaBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,42,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,43,import javax.persistence.criteria.Expression;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,44,import javax.persistence.criteria.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,45,import javax.persistence.criteria.Root;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,47,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,48,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,49,import org.apache.ambari.server.configuration.Configuration.DatabaseType;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,50,import org.apache.ambari.server.controller.AmbariManagementController;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,51,import org.apache.ambari.server.orm.DBAccessor.DBColumnInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,52,import org.apache.ambari.server.orm.dao.ClusterDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,53,import org.apache.ambari.server.orm.dao.ClusterServiceDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,54,import org.apache.ambari.server.orm.dao.ConfigGroupConfigMappingDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,55,import org.apache.ambari.server.orm.dao.DaoUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,56,import org.apache.ambari.server.orm.dao.HostDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,57,import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,58,import org.apache.ambari.server.orm.dao.KeyValueDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,59,import org.apache.ambari.server.orm.dao.PermissionDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,60,import org.apache.ambari.server.orm.dao.PrincipalDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,61,import org.apache.ambari.server.orm.dao.PrincipalTypeDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,62,import org.apache.ambari.server.orm.dao.PrivilegeDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,63,import org.apache.ambari.server.orm.dao.ResourceDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,64,import org.apache.ambari.server.orm.dao.ResourceTypeDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,65,import org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,66,import org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,67,import org.apache.ambari.server.orm.dao.UserDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,68,import org.apache.ambari.server.orm.dao.ViewDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,69,import org.apache.ambari.server.orm.dao.ViewInstanceDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,70,import org.apache.ambari.server.orm.entities.ClusterConfigEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,71,import org.apache.ambari.server.orm.entities.ClusterConfigMappingEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,72,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,73,import org.apache.ambari.server.orm.entities.ClusterServiceEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,74,import org.apache.ambari.server.orm.entities.ClusterServiceEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,75,import org.apache.ambari.server.orm.entities.ConfigGroupConfigMappingEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,76,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,77,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,78,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,79,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,80,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity_;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,81,import org.apache.ambari.server.orm.entities.KeyValueEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,82,import org.apache.ambari.server.orm.entities.PermissionEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,83,import org.apache.ambari.server.orm.entities.PrincipalEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,84,import org.apache.ambari.server.orm.entities.PrincipalTypeEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,85,import org.apache.ambari.server.orm.entities.PrivilegeEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,86,import org.apache.ambari.server.orm.entities.ResourceEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,87,import org.apache.ambari.server.orm.entities.ResourceTypeEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,88,import org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,89,import org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,90,import org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,91,import org.apache.ambari.server.orm.entities.StackEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,92,import org.apache.ambari.server.orm.entities.UserEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,93,import org.apache.ambari.server.orm.entities.ViewEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,94,import org.apache.ambari.server.orm.entities.ViewInstanceEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,95,import org.apache.ambari.server.security.authorization.ResourceType;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,96,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,97,import org.apache.ambari.server.state.Clusters;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,98,import org.apache.ambari.server.state.Config;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,99,import org.apache.ambari.server.state.ConfigHelper;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,100,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,101,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,102,import org.apache.ambari.server.state.alert.Scope;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,103,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,104,import org.apache.ambari.server.view.ViewRegistry;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,105,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,106,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,108,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,109,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,110,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,115,public class UpgradeCatalog170 extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,116,private static final String CONTENT_FIELD_NAME = "content";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,117,private static final String PIG_CONTENT_FIELD_NAME = "pig-content";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,118,private static final String ENV_CONFIGS_POSTFIX = "-env";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,120,private static final String PIG_PROPERTIES_CONFIG_TYPE = "pig-properties";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,122,private static final String ALERT_TABLE_DEFINITION = "alert_definition";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,123,private static final String ALERT_TABLE_HISTORY = "alert_history";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,124,private static final String ALERT_TABLE_CURRENT = "alert_current";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,125,private static final String ALERT_TABLE_GROUP = "alert_group";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,126,private static final String ALERT_TABLE_TARGET = "alert_target";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,127,private static final String ALERT_TABLE_GROUP_TARGET = "alert_group_target";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,128,private static final String ALERT_TABLE_GROUPING = "alert_grouping";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,129,private static final String ALERT_TABLE_NOTICE = "alert_notice";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,130,public static final String JOBS_VIEW_NAME = "JOBS";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,131,public static final String VIEW_NAME_REG_EXP = JOBS_VIEW_NAME + "\\{.*\\}";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,132,public static final String JOBS_VIEW_INSTANCE_NAME = "JOBS_1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,133,public static final String SHOW_JOBS_FOR_NON_ADMIN_KEY = "showJobsForNonAdmin";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,134,public static final String JOBS_VIEW_INSTANCE_LABEL = "Jobs";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,135,public static final String YARN_TIMELINE_SERVICE_WEBAPP_ADDRESS_PROPERTY = "yarn.timeline-service.webapp.address";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,136,public static final String YARN_RESOURCEMANAGER_WEBAPP_ADDRESS_PROPERTY = "yarn.resourcemanager.webapp.address";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,137,public static final String YARN_SITE = "yarn-site";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,138,public static final String YARN_ATS_URL_PROPERTY = "yarn.ats.url";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,139,public static final String YARN_RESOURCEMANAGER_URL_PROPERTY = "yarn.resourcemanager.url";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,141,public static final StackId CLUSTER_STATE_STACK_HDP_2_1 = new StackId("HDP",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,146,public String getSourceVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,147,return "1.6.1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,151,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,152,return "1.7.0";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,158,private static final Logger LOG = LoggerFactory.getLogger
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,159,(UpgradeCatalog170.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,164,public UpgradeCatalog170(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,165,super(injector);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,166,this.injector = injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,170,DaoUtils daoUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,175,protected void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,176,DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,179,renameSequenceValueColumnName();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,182,List<DBColumnInfo> columns;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,185,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,186,columns.add(new DBColumnInfo("group_id", Integer.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,187,columns.add(new DBColumnInfo("principal_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,188,columns.add(new DBColumnInfo("group_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,189,columns.add(new DBColumnInfo("ldap_group", Integer.class, 1, 0, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,190,dbAccessor.createTable("groups", columns, "group_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,192,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,193,columns.add(new DBColumnInfo("member_id", Integer.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,194,columns.add(new DBColumnInfo("group_id", Integer.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,195,columns.add(new DBColumnInfo("user_id", Integer.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,196,dbAccessor.createTable("members", columns, "member_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,199,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,200,columns.add(new DBColumnInfo("principal_type_id", Integer.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,201,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,202,columns.add(new DBColumnInfo("principal_type_name", String.class, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,203,null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,205,dbAccessor.createTable("adminprincipaltype", columns, "principal_type_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,207,dbAccessor.insertRow("adminprincipaltype", new String[]{"principal_type_id", "principal_type_name"}, new String[]{"1", "'USER'"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,208,dbAccessor.insertRow("adminprincipaltype", new String[]{"principal_type_id", "principal_type_name"}, new String[]{"2", "'GROUP'"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,210,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,211,columns.add(new DBColumnInfo("principal_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,212,columns.add(new DBColumnInfo("principal_type_id", Integer.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,213,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,215,dbAccessor.createTable("adminprincipal", columns, "principal_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,217,dbAccessor.insertRow("adminprincipal", new String[]{"principal_id", "principal_type_id"}, new String[]{"1", "1"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,219,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,220,columns.add(new DBColumnInfo("resource_type_id", Integer.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,221,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,222,columns.add(new DBColumnInfo("resource_type_name", String.class, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,223,null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,225,dbAccessor.createTable("adminresourcetype", columns, "resource_type_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,227,dbAccessor.insertRow("adminresourcetype", new String[]{"resource_type_id", "resource_type_name"}, new String[]{"1", "'AMBARI'"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,228,dbAccessor.insertRow("adminresourcetype", new String[]{"resource_type_id", "resource_type_name"}, new String[]{"2", "'CLUSTER'"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,229,dbAccessor.insertRow("adminresourcetype", new String[]{"resource_type_id", "resource_type_name"}, new String[]{"3", "'VIEW'"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,231,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,232,columns.add(new DBColumnInfo("resource_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,233,columns.add(new DBColumnInfo("resource_type_id", Integer.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,234,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,236,dbAccessor.createTable("adminresource", columns, "resource_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,238,dbAccessor.insertRow("adminresource", new String[]{"resource_id", "resource_type_id"}, new String[]{"1", "1"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,240,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,241,columns.add(new DBColumnInfo("permission_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,242,columns.add(new DBColumnInfo("permission_name", String.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,243,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,244,columns.add(new DBColumnInfo("resource_type_id", Integer.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,245,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,247,dbAccessor.createTable("adminpermission", columns, "permission_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,249,dbAccessor.insertRow("adminpermission", new String[]{"permission_id", "permission_name", "resource_type_id"}, new String[]{"1", "'AMBARI.ADMIN'", "1"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,250,dbAccessor.insertRow("adminpermission", new String[]{"permission_id", "permission_name", "resource_type_id"}, new String[]{"2", "'CLUSTER.READ'", "2"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,251,dbAccessor.insertRow("adminpermission", new String[]{"permission_id", "permission_name", "resource_type_id"}, new String[]{"3", "'CLUSTER.OPERATE'", "2"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,252,dbAccessor.insertRow("adminpermission", new String[]{"permission_id", "permission_name", "resource_type_id"}, new String[]{"4", "'VIEW.USE'", "3"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,254,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,255,columns.add(new DBColumnInfo("privilege_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,256,columns.add(new DBColumnInfo("permission_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,257,columns.add(new DBColumnInfo("resource_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,258,columns.add(new DBColumnInfo("principal_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,260,dbAccessor.createTable("adminprivilege", columns, "privilege_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,262,dbAccessor.insertRow("adminprivilege", new String[]{"privilege_id", "permission_id", "resource_id", "principal_id"}, new String[]{"1", "1", "1", "1"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,264,String [] configAttributesTableNames = {"clusterconfig", "hostgroup_configuration", "blueprint_configuration"};
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,266,for(String tableName : configAttributesTableNames) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,267,addConfigAttributesColumn(tableName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,271,dbAccessor.addColumn("viewmain", new DBColumnInfo("mask",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,272,String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,273,dbAccessor.addColumn("viewmain", new DBColumnInfo("system_view",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,274,Character.class, 1, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,275,dbAccessor.addColumn("viewmain", new DBColumnInfo("resource_type_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,276,Integer.class, null, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,277,dbAccessor.addColumn("viewmain", new DBColumnInfo("description",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,278,String.class, 2048, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,279,dbAccessor.addColumn("viewparameter", new DBColumnInfo("masked",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,280,Character.class, 1, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,281,dbAccessor.addColumn("users", new DBColumnInfo("active",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,282,Integer.class, 1, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,283,dbAccessor.addColumn("users", new DBColumnInfo("principal_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,284,Long.class, null, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,285,dbAccessor.addColumn("viewinstance", new DBColumnInfo("resource_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,286,Long.class, null, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,287,dbAccessor.addColumn("viewinstance", new DBColumnInfo("xml_driven",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,288,Character.class, 1, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,289,dbAccessor.addColumn("clusters", new DBColumnInfo("resource_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,290,Long.class, null, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,292,dbAccessor.addColumn("host_role_command", new DBColumnInfo("output_log",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,293,String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,295,dbAccessor.addColumn("stage", new DBColumnInfo("command_params",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,296,byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,297,dbAccessor.addColumn("stage", new DBColumnInfo("host_params",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,298,byte[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,300,dbAccessor.addColumn("host_role_command", new DBColumnInfo("error_log",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,301,String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,303,addAlertingFrameworkDDL();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,306,dbAccessor.addColumn("request", new DBColumnInfo(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,313,if (dbAccessor.tableExists("componentconfigmapping")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,314,dbAccessor.dropTable("componentconfigmapping");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,316,if (dbAccessor.tableExists("hostcomponentconfigmapping")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,317,dbAccessor.dropTable("hostcomponentconfigmapping");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,319,if (dbAccessor.tableExists("hcdesiredconfigmapping")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,320,dbAccessor.dropTable("hcdesiredconfigmapping");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,322,if (dbAccessor.tableExists("serviceconfigmapping")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,323,dbAccessor.dropTable("serviceconfigmapping");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,326,dbAccessor.dropFKConstraint("confgroupclusterconfigmapping", "FK_confg");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,328,if (databaseType == DatabaseType.ORACLE
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,329,|| databaseType == DatabaseType.MYSQL
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,330,|| databaseType == DatabaseType.DERBY) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,331,dbAccessor.executeQuery("ALTER TABLE clusterconfig DROP PRIMARY KEY", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,333,dbAccessor.executeQuery("ALTER TABLE clusterconfig DROP CONSTRAINT clusterconfig_pkey CASCADE", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,336,dbAccessor.addColumn("clusterconfig", new DBColumnInfo("config_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,338,if (databaseType == DatabaseType.ORACLE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,340,if (dbAccessor.tableHasData("clusterconfig")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,341,dbAccessor.executeQuery("CREATE SEQUENCE TEMP_SEQ " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,348,dbAccessor.executeQuery("UPDATE clusterconfig SET config_id = TEMP_SEQ.NEXTVAL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,349,dbAccessor.dropSequence("TEMP_SEQ");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,352,if (dbAccessor.tableHasData("clusterconfig")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,353,dbAccessor.executeQuery("UPDATE clusterconfig " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,357,if (dbAccessor.tableHasData("clusterconfig")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,359,dbAccessor.executeQuery("CREATE SEQUENCE temp_seq START WITH 1");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,360,dbAccessor.executeQuery("UPDATE clusterconfig SET config_id = nextval('temp_seq')");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,361,dbAccessor.dropSequence("temp_seq");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,366,if (databaseType == DatabaseType.ORACLE
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,367,|| databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,368,dbAccessor.executeQuery("ALTER TABLE viewinstance MODIFY description VARCHAR(2048)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,369,dbAccessor.executeQuery("ALTER TABLE viewparameter MODIFY description VARCHAR(2048)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,371,dbAccessor.executeQuery("ALTER TABLE viewinstance ALTER COLUMN description TYPE VARCHAR(2048)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,372,dbAccessor.executeQuery("ALTER TABLE viewparameter ALTER COLUMN description TYPE VARCHAR(2048)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,374,dbAccessor.executeQuery("ALTER TABLE viewinstance ALTER COLUMN description SET DATA TYPE VARCHAR(2048)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,375,dbAccessor.executeQuery("ALTER TABLE viewparameter ALTER COLUMN description SET DATA TYPE VARCHAR(2048)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,379,if (databaseType == DatabaseType.DERBY) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,380,dbAccessor.executeQuery("ALTER TABLE clusterconfig ALTER COLUMN config_id DEFAULT 0");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,381,dbAccessor.executeQuery("ALTER TABLE clusterconfig ALTER COLUMN config_id NOT NULL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,384,dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD PRIMARY KEY (config_id)");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,387,dbAccessor.addColumn("clusterconfig", new DBColumnInfo("version", Long.class, null));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,389,populateConfigVersions();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,391,dbAccessor.setColumnNullable("clusterconfig", new DBColumnInfo("version", Long.class, null), false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,393,dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD CONSTRAINT UQ_config_type_tag UNIQUE (cluster_id, type_name, version_tag)", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,394,dbAccessor.executeQuery("ALTER TABLE clusterconfig ADD CONSTRAINT UQ_config_type_version UNIQUE (cluster_id, type_name, version)", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,396,if (databaseType != DatabaseType.ORACLE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,397,dbAccessor.alterColumn("clusterconfig", new DBColumnInfo("config_data", char[].class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,398,dbAccessor.alterColumn("blueprint_configuration", new DBColumnInfo("config_data", char[].class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,399,dbAccessor.alterColumn("hostgroup_configuration", new DBColumnInfo("config_data", char[].class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,402,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,403,columns.add(new DBColumnInfo("service_config_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,404,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,405,columns.add(new DBColumnInfo("service_name", String.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,406,columns.add(new DBColumnInfo("version", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,407,columns.add(new DBColumnInfo("create_timestamp", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,408,columns.add(new DBColumnInfo("user_name", String.class, null, "_db", false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,409,columns.add(new DBColumnInfo("note", char[].class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,410,columns.add(new DBColumnInfo("group_id", Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,411,dbAccessor.createTable("serviceconfig", columns, "service_config_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,413,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,414,columns.add(new DBColumnInfo("service_config_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,415,columns.add(new DBColumnInfo("hostname", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,416,dbAccessor.createTable("serviceconfighosts", columns, "service_config_id", "hostname");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,418,dbAccessor.executeQuery("ALTER TABLE serviceconfig ADD CONSTRAINT UQ_scv_service_version UNIQUE (cluster_id, service_name, version)", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,420,columns.clear();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,421,columns.add(new DBColumnInfo("service_config_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,422,columns.add(new DBColumnInfo("config_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,423,dbAccessor.createTable("serviceconfigmapping", columns, "service_config_id", "config_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,425,dbAccessor.addFKConstraint("confgroupclusterconfigmapping", "FK_confg",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,426,new String[]{"cluster_id", "config_type", "version_tag"}, "clusterconfig",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,427,new String[]{"cluster_id", "type_name", "version_tag"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,429,dbAccessor.addFKConstraint("serviceconfighosts", "FK_scvhosts_scv",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,430,new String[]{"service_config_id"}, "serviceconfig",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,431,new String[]{"service_config_id"}, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,433,dbAccessor.addColumn("configgroup", new DBColumnInfo("service_name", String.class, 255));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,435,addSequences(Arrays.asList(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,442,), 0L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,443,addSequence("group_id_seq", 1L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,444,addSequence("member_id_seq", 1L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,445,addSequence("resource_type_id_seq", 4L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,446,addSequence("resource_id_seq", 2L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,447,addSequence("principal_type_id_seq", 3L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,448,addSequence("principal_id_seq", 2L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,449,addSequence("permission_id_seq", 5L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,450,addSequence("privilege_id_seq", 1L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,451,addSequence("service_config_id_seq", 1L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,452,addSequence("service_config_application_id_seq", 1L, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,454,long count = 1;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,456,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,457,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,458,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,459,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,460,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,461,rs = statement.executeQuery("SELECT count(*) FROM clusterconfig");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,462,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,463,if (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,464,count = rs.getLong(1) + 2;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,469,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,470,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,472,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,473,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,477,addSequence("config_id_seq", count, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,479,dbAccessor.addFKConstraint("users", "FK_users_principal_id", "principal_id", "adminprincipal", "principal_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,480,dbAccessor.addFKConstraint("clusters", "FK_clusters_resource_id", "resource_id", "adminresource", "resource_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,481,dbAccessor.addFKConstraint("viewinstance", "FK_viewinstance_resource_id", "resource_id", "adminresource", "resource_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,482,dbAccessor.addFKConstraint("adminresource", "FK_resource_resource_type_id", "resource_type_id", "adminresourcetype", "resource_type_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,483,dbAccessor.addFKConstraint("adminprincipal", "FK_principal_principal_type_id", "principal_type_id", "adminprincipaltype", "principal_type_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,484,dbAccessor.addFKConstraint("adminpermission", "FK_permission_resource_type_id", "resource_type_id", "adminresourcetype", "resource_type_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,485,dbAccessor.addFKConstraint("adminprivilege", "FK_privilege_permission_id", "permission_id", "adminpermission", "permission_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,486,dbAccessor.addFKConstraint("adminprivilege", "FK_privilege_resource_id", "resource_id", "adminresource", "resource_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,488,dbAccessor.addFKConstraint("groups", "FK_groups_principal_id", "principal_id", "adminprincipal", "principal_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,489,dbAccessor.addFKConstraint("members", "FK_members_user_id", "user_id", "users", "user_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,490,dbAccessor.addFKConstraint("members", "FK_members_group_id", "group_id", "groups", "group_id", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,492,dbAccessor.addUniqueConstraint("groups", "UNQ_groups_0", "group_name", "ldap_group");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,493,dbAccessor.addUniqueConstraint("members", "UNQ_members_0", "group_id", "user_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,494,dbAccessor.addUniqueConstraint("adminpermission", "UQ_perm_name_resource_type_id", "permission_name", "resource_type_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,501,private void addConfigAttributesColumn(String tableName) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,502,final DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,503,if (databaseType == DatabaseType.ORACLE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,504,dbAccessor.addColumn(tableName, new DBColumnInfo("config_attributes", char[].class));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,506,DBColumnInfo clusterConfigAttributesColumn = new DBColumnInfo(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,508,dbAccessor.addColumn(tableName, clusterConfigAttributesColumn);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,516,private void renameSequenceValueColumnName() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,517,final DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,518,if (dbAccessor.tableHasColumn("ambari_sequences", "sequence_value")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,519,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,521,if (databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,522,dbAccessor.executeQuery("ALTER TABLE ambari_sequences CHANGE value sequence_value DECIMAL(38) NOT NULL");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,524,dbAccessor.executeQuery("RENAME COLUMN ambari_sequences.\"value\" to sequence_value");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,526,dbAccessor.executeQuery("ALTER TABLE ambari_sequences RENAME COLUMN value to sequence_value");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,529,dbAccessor.executeQuery("ALTER TABLE ambari_sequences RENAME COLUMN \"value\" to sequence_value");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,533,private void populateConfigVersions() throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,534,ResultSet resultSet = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,535,Set<String> configTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,538,Connection connection = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,539,PreparedStatement orderedConfigsStatement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,540,Map<String, List<Long>> configVersionMap = new HashMap<String, List<Long>>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,541,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,542,connection = dbAccessor.getNewConnection();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,544,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,545,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,546,statement = connection.createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,547,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,548,resultSet = statement.executeQuery("SELECT DISTINCT type_name FROM clusterconfig ");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,549,if (resultSet != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,550,while (resultSet.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,551,configTypes.add(resultSet.getString("type_name"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,556,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,557,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,561,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,562,orderedConfigsStatement
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,563,= connection.prepareStatement("SELECT config_id FROM clusterconfig WHERE type_name = ? ORDER BY create_timestamp");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,565,for (String configType : configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,566,List<Long> configIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,567,orderedConfigsStatement.setString(1, configType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,568,resultSet = orderedConfigsStatement.executeQuery();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,569,if (resultSet != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,570,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,571,while (resultSet.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,572,configIds.add(resultSet.getLong("config_id"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,575,resultSet.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,578,configVersionMap.put(configType, configIds);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,581,if (orderedConfigsStatement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,582,orderedConfigsStatement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,586,connection.setAutoCommit(false); //disable autocommit
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,587,PreparedStatement configVersionStatement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,588,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,589,configVersionStatement = connection.prepareStatement("UPDATE clusterconfig SET version = ? WHERE config_id = ?");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,591,for (Entry<String, List<Long>> entry : configVersionMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,592,long version = 1L;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,593,for (Long configId : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,594,configVersionStatement.setLong(1, version++);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,595,configVersionStatement.setLong(2, configId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,596,configVersionStatement.addBatch();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,598,configVersionStatement.executeBatch();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,600,connection.commit(); //commit changes manually
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,602,connection.rollback();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,603,throw e;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,605,if (configVersionStatement != null){
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,606,configVersionStatement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,610,if (connection != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,611,connection.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,623,public void executePreDMLUpdates() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,624,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,628,protected void executeDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,630,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,632,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,633,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,634,moveHcatalogIntoHiveService();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,635,moveWebHcatIntoHiveService();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,637,LOG.warn("Integrating HCatalog and WebHCat services into Hive threw " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,644,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,646,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,647,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,648,HostRoleCommandDAO hostRoleCommandDAO = injector.getInstance(HostRoleCommandDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,649,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,650,CriteriaBuilder cb = em.getCriteriaBuilder();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,651,CriteriaQuery<HostRoleCommandEntity> cq1 = cb.createQuery(HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,652,CriteriaQuery<HostRoleCommandEntity> cq2 = cb.createQuery(HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,653,Root<HostRoleCommandEntity> hrc1 = cq1.from(HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,654,Root<HostRoleCommandEntity> hrc2 = cq1.from(HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,658,Expression<Long> taskID1 = hrc1.get(HostRoleCommandEntity_.taskId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,659,Expression<Long> taskID2 = hrc2.get(HostRoleCommandEntity_.taskId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,660,Expression<String> outputLog = hrc1.get(HostRoleCommandEntity_.outputLog);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,661,Expression<String> errorLog = hrc2.get(HostRoleCommandEntity_.errorLog);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,663,Predicate p1 = cb.isNull(outputLog);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,664,Predicate p2 = cb.equal(outputLog, "");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,665,Predicate p1_or_2 = cb.or(p1, p2);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,667,Predicate p3 = cb.isNull(errorLog);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,668,Predicate p4 = cb.equal(errorLog, "");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,669,Predicate p3_or_4 = cb.or(p3, p4);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,671,if (daoUtils == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,672,daoUtils = new DaoUtils();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,676,cq1.select(hrc1).where(p1_or_2).orderBy(cb.desc(taskID1));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,677,TypedQuery<HostRoleCommandEntity> q1 = em.createQuery(cq1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,678,q1.setMaxResults(1000);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,679,List<HostRoleCommandEntity> r1 = daoUtils.selectList(q1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,680,for (HostRoleCommandEntity entity : r1) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,681,entity.setOutputLog("/var/lib/ambari-agent/data/output-" + entity.getTaskId() + ".txt");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,682,hostRoleCommandDAO.merge(entity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,686,cq2.select(hrc2).where(p3_or_4).orderBy(cb.desc(taskID2));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,687,TypedQuery<HostRoleCommandEntity> q2 = em.createQuery(cq2);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,688,q2.setMaxResults(1000);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,689,List<HostRoleCommandEntity> r2 = daoUtils.selectList(q2);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,690,for (HostRoleCommandEntity entity : r2) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,691,entity.setErrorLog("/var/lib/ambari-agent/data/errors-" + entity.getTaskId() + ".txt");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,692,hostRoleCommandDAO.merge(entity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,695,LOG.warn("Could not populate historic records with output_log and error_log in host_role_command table. ", e);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,700,moveGlobalsToEnv();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,701,addEnvContentFields();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,702,renamePigProperties();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,703,upgradePermissionModel();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,704,addJobsViewPermissions();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,705,moveConfigGroupsGlobalToEnv();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,706,addMissingConfigs();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,707,updateClusterProvisionState();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,708,removeMapred2Log4jConfig();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,711,private void removeMapred2Log4jConfig() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,712,final ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,714,List<ClusterEntity> clusters = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,715,for (ClusterEntity cluster : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,716,for (ClusterConfigMappingEntity configMapping : cluster.getConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,717,if (configMapping.getType().equals(Configuration.MAPREDUCE2_LOG4J_CONFIG_TAG)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,718,configMapping.setSelected(0);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,719,configMapping = clusterDAO.mergeConfigMapping(configMapping);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,722,clusterDAO.merge(cluster);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,726,public void updateClusterProvisionState() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,728,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,730,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,731,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,732,final ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,733,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,734,List<ClusterEntity> clusterEntities = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,735,for (ClusterEntity clusterEntity : clusterEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,736,clusterEntity.setProvisioningState(State.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,737,em.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,740,LOG.warn("Updating cluster provisioning_state to INSTALLED threw " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,747,public void moveHcatalogIntoHiveService() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,748,final String serviceName = "HIVE";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,749,final String serviceNameToBeDeleted = "HCATALOG";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,750,final String componentName = "HCAT";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,751,moveComponentsIntoService(serviceName, serviceNameToBeDeleted, componentName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,754,private void moveWebHcatIntoHiveService() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,755,final String serviceName = "HIVE";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,756,final String serviceNameToBeDeleted = "WEBHCAT";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,757,final String componentName = "WEBHCAT_SERVER";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,758,moveComponentsIntoService(serviceName, serviceNameToBeDeleted, componentName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,761,private void moveComponentsIntoService(String serviceName, String serviceNameToBeDeleted, String componentName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,762,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,763,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,764,ClusterServiceDAO clusterServiceDAO = injector.getInstance(ClusterServiceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,765,ServiceDesiredStateDAO serviceDesiredStateDAO = injector.getInstance(ServiceDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,766,ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO = injector.getInstance(ServiceComponentDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,767,HostDAO hostDAO = injector.getInstance(HostDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,769,List<ClusterEntity> clusterEntities = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,770,for (final ClusterEntity clusterEntity : clusterEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,771,ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntityToDelete = serviceComponentDesiredStateDAO.findByName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,772,clusterEntity.getClusterId(), serviceNameToBeDeleted, componentName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,774,if (serviceComponentDesiredStateEntityToDelete == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,775,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,778,ServiceDesiredStateEntityPK serviceDesiredStateEntityPK = new ServiceDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,779,serviceDesiredStateEntityPK.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,780,serviceDesiredStateEntityPK.setServiceName(serviceNameToBeDeleted);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,781,ServiceDesiredStateEntity serviceDesiredStateEntity = serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,783,ClusterServiceEntityPK clusterServiceEntityToBeDeletedPK = new ClusterServiceEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,784,clusterServiceEntityToBeDeletedPK.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,785,clusterServiceEntityToBeDeletedPK.setServiceName(serviceNameToBeDeleted);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,786,ClusterServiceEntity clusterServiceEntityToBeDeleted = clusterServiceDAO.findByPK(clusterServiceEntityToBeDeletedPK);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,788,ClusterServiceEntityPK clusterServiceEntityPK = new ClusterServiceEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,789,clusterServiceEntityPK.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,790,clusterServiceEntityPK.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,793,ClusterServiceEntity clusterServiceEntity = clusterServiceDAO.findByPK(clusterServiceEntityPK);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,795,ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity = new ServiceComponentDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,796,serviceComponentDesiredStateEntity.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,797,serviceComponentDesiredStateEntity.setComponentName(serviceComponentDesiredStateEntityToDelete.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,798,serviceComponentDesiredStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,799,serviceComponentDesiredStateEntity.setDesiredStack(serviceComponentDesiredStateEntityToDelete.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,800,serviceComponentDesiredStateEntity.setDesiredState(serviceComponentDesiredStateEntityToDelete.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,801,serviceComponentDesiredStateEntity.setClusterServiceEntity(clusterServiceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,802,serviceComponentDesiredStateDAO.create(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,804,Iterator<HostComponentDesiredStateEntity> hostComponentDesiredStateIterator = serviceComponentDesiredStateEntityToDelete.getHostComponentDesiredStateEntities().iterator();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,805,Iterator<HostComponentStateEntity> hostComponentStateIterator = serviceComponentDesiredStateEntityToDelete.getHostComponentStateEntities().iterator();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,807,while (hostComponentDesiredStateIterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,808,HostComponentDesiredStateEntity hcDesiredStateEntityToBeDeleted = hostComponentDesiredStateIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,809,HostComponentDesiredStateEntity hostComponentDesiredStateEntity = new HostComponentDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,810,hostComponentDesiredStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,811,hostComponentDesiredStateEntity.setComponentName(hcDesiredStateEntityToBeDeleted.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,812,hostComponentDesiredStateEntity.setDesiredStack(hcDesiredStateEntityToBeDeleted.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,813,hostComponentDesiredStateEntity.setDesiredState(hcDesiredStateEntityToBeDeleted.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,814,hostComponentDesiredStateEntity.setHostEntity(hcDesiredStateEntityToBeDeleted.getHostEntity());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,815,hostComponentDesiredStateEntity.setAdminState(hcDesiredStateEntityToBeDeleted.getAdminState());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,816,hostComponentDesiredStateEntity.setMaintenanceState(hcDesiredStateEntityToBeDeleted.getMaintenanceState());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,817,hostComponentDesiredStateEntity.setRestartRequired(hcDesiredStateEntityToBeDeleted.isRestartRequired());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,818,hostComponentDesiredStateEntity.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,819,hostComponentDesiredStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,820,em.merge(hostComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,821,em.remove(hcDesiredStateEntityToBeDeleted);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,824,while (hostComponentStateIterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,825,HostComponentStateEntity hcStateToBeDeleted = hostComponentStateIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,826,HostEntity hostToBeDeleted = hostDAO.findByName(hcStateToBeDeleted.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,827,if (hostToBeDeleted == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,828,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,831,HostComponentStateEntity hostComponentStateEntity = new HostComponentStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,832,hostComponentStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,833,hostComponentStateEntity.setComponentName(hcStateToBeDeleted.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,834,hostComponentStateEntity.setCurrentStack(hcStateToBeDeleted.getCurrentStack());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,835,hostComponentStateEntity.setCurrentState(hcStateToBeDeleted.getCurrentState());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,836,hostComponentStateEntity.setHostEntity(hcStateToBeDeleted.getHostEntity());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,837,hostComponentStateEntity.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,838,hostComponentStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,839,em.merge(hostComponentStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,840,em.remove(hcStateToBeDeleted);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,842,serviceComponentDesiredStateEntity.setClusterServiceEntity(clusterServiceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,843,em.merge(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,844,em.remove(serviceComponentDesiredStateEntityToDelete);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,845,em.remove(serviceDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,846,em.remove(clusterServiceEntityToBeDeleted);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,851,private void moveConfigGroupsGlobalToEnv() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,852,final ConfigGroupConfigMappingDAO confGroupConfMappingDAO = injector.getInstance(ConfigGroupConfigMappingDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,853,ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,854,final ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,855,AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,856,List<ConfigGroupConfigMappingEntity> configGroupConfigMappingEntities = confGroupConfMappingDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,857,List<ConfigGroupConfigMappingEntity> configGroupsWithGlobalConfigs = new ArrayList<ConfigGroupConfigMappingEntity>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,858,Type type = new TypeToken<Map<String, String>>() {}.getType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,860,for (ConfigGroupConfigMappingEntity entity : configGroupConfigMappingEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,861,if (entity.getConfigType().equals(Configuration.GLOBAL_CONFIG_TAG)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,862,configGroupsWithGlobalConfigs.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,866,for (ConfigGroupConfigMappingEntity entity : configGroupsWithGlobalConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,867,String configData = entity.getClusterConfigEntity().getData();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,868,StackEntity stackEntity = entity.getClusterConfigEntity().getStack();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,870,Map<String, String> properties = StageUtils.getGson().fromJson(configData, type);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,871,Cluster cluster = ambariManagementController.getClusters().getClusterById(entity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,872,HashMap<String, HashMap<String, String>> configs = new HashMap<String, HashMap<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,874,for (Entry<String, String> property : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,875,Set<String> configTypes = configHelper.findConfigTypesByPropertyName(cluster.getCurrentStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,876,property.getKey(), cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,878,if (configTypes != null && configTypes.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,879,String configType = configTypes.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,881,if (configs.containsKey(configType)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,882,HashMap<String, String> config = configs.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,883,config.put(property.getKey(), property.getValue());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,885,HashMap<String, String> config = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,886,config.put(property.getKey(), property.getValue());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,887,configs.put(configType, config);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,892,for (Entry<String, HashMap<String, String>> config : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,894,String tag;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,895,if(cluster.getConfigsByType(config.getKey()) == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,896,tag = "version1";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,898,tag = "version" + System.currentTimeMillis();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,901,ClusterConfigEntity clusterConfigEntity = new ClusterConfigEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,902,clusterConfigEntity.setClusterEntity(entity.getClusterConfigEntity().getClusterEntity());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,903,clusterConfigEntity.setClusterId(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,904,clusterConfigEntity.setType(config.getKey());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,905,clusterConfigEntity.setVersion(cluster.getNextConfigVersion(config.getKey()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,906,clusterConfigEntity.setTag(tag);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,907,clusterConfigEntity.setTimestamp(new Date().getTime());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,908,clusterConfigEntity.setData(StageUtils.getGson().toJson(config.getValue()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,909,clusterConfigEntity.setStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,911,clusterDAO.createConfig(clusterConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,913,ConfigGroupConfigMappingEntity configGroupConfigMappingEntity = new ConfigGroupConfigMappingEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,914,configGroupConfigMappingEntity.setTimestamp(System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,915,configGroupConfigMappingEntity.setClusterId(entity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,916,configGroupConfigMappingEntity.setClusterConfigEntity(clusterConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,917,configGroupConfigMappingEntity.setConfigGroupEntity(entity.getConfigGroupEntity());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,918,configGroupConfigMappingEntity.setConfigGroupId(entity.getConfigGroupId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,919,configGroupConfigMappingEntity.setConfigType(config.getKey());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,920,configGroupConfigMappingEntity.setVersionTag(clusterConfigEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,921,confGroupConfMappingDAO.create(configGroupConfigMappingEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,925,for (ConfigGroupConfigMappingEntity entity : configGroupsWithGlobalConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,926,confGroupConfMappingDAO.remove(entity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,933,private void addAlertingFrameworkDDL() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,935,ArrayList<DBColumnInfo> columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,936,columns.add(new DBColumnInfo("definition_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,937,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,938,columns.add(new DBColumnInfo("definition_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,939,columns.add(new DBColumnInfo("service_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,940,columns.add(new DBColumnInfo("component_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,941,columns.add(new DBColumnInfo("scope", String.class, 255, Scope.ANY.name(), false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,942,columns.add(new DBColumnInfo("label", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,943,columns.add(new DBColumnInfo("enabled", Short.class, 1, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,944,columns.add(new DBColumnInfo("schedule_interval", Integer.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,945,columns.add(new DBColumnInfo("source_type", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,946,columns.add(new DBColumnInfo("alert_source", char[].class, 32672, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,947,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,948,columns.add(new DBColumnInfo("hash", String.class, 64, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,949,dbAccessor.createTable(ALERT_TABLE_DEFINITION, columns, "definition_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,951,dbAccessor.addFKConstraint(ALERT_TABLE_DEFINITION,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,955,dbAccessor.addUniqueConstraint(ALERT_TABLE_DEFINITION, "uni_alert_def_name", "cluster_id", "definition_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,958,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,959,columns.add(new DBColumnInfo("alert_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,960,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,961,columns.add(new DBColumnInfo("alert_definition_id", Long.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,962,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,963,columns.add(new DBColumnInfo("service_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,964,columns.add(new DBColumnInfo("component_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,965,columns.add(new DBColumnInfo("host_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,966,columns.add(new DBColumnInfo("alert_instance", String.class, 255, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,967,true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,968,columns.add(new DBColumnInfo("alert_timestamp", Long.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,969,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,970,columns.add(new DBColumnInfo("alert_label", String.class, 1024, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,971,columns.add(new DBColumnInfo("alert_state", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,972,columns.add(new DBColumnInfo("alert_text", String.class, 4000, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,973,dbAccessor.createTable(ALERT_TABLE_HISTORY, columns, "alert_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,975,dbAccessor.addFKConstraint(ALERT_TABLE_HISTORY, "fk_alert_history_def_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,978,dbAccessor.addFKConstraint(ALERT_TABLE_HISTORY,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,983,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,984,columns.add(new DBColumnInfo("alert_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,985,columns.add(new DBColumnInfo("definition_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,986,columns.add(new DBColumnInfo("history_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,987,columns.add(new DBColumnInfo("maintenance_state", String.class, 255, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,988,true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,989,columns.add(new DBColumnInfo("original_timestamp", Long.class, 0, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,990,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,991,columns.add(new DBColumnInfo("latest_timestamp", Long.class, 0, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,992,columns.add(new DBColumnInfo("latest_text", String.class, 4000, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,993,dbAccessor.createTable(ALERT_TABLE_CURRENT, columns, "alert_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,995,dbAccessor.addFKConstraint(ALERT_TABLE_CURRENT, "fk_alert_current_def_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,998,dbAccessor.addFKConstraint(ALERT_TABLE_CURRENT,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1002,dbAccessor.addUniqueConstraint(ALERT_TABLE_CURRENT, "uni_alert_current_hist_id", "history_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1005,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1006,columns.add(new DBColumnInfo("group_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1007,columns.add(new DBColumnInfo("cluster_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1008,columns.add(new DBColumnInfo("group_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1009,columns.add(new DBColumnInfo("is_default", Short.class, 1, 1, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1010,columns.add(new DBColumnInfo("service_name", String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1011,dbAccessor.createTable(ALERT_TABLE_GROUP, columns, "group_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1013,dbAccessor.addUniqueConstraint(ALERT_TABLE_GROUP, "uni_alert_group_name", "cluster_id", "group_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1016,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1017,columns.add(new DBColumnInfo("target_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1018,columns.add(new DBColumnInfo("target_name", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1019,columns.add(new DBColumnInfo("notification_type", String.class, 64, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1020,columns.add(new DBColumnInfo("properties", char[].class, 32672, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1021,columns.add(new DBColumnInfo("description", String.class, 1024, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1022,dbAccessor.createTable(ALERT_TABLE_TARGET, columns, "target_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1024,dbAccessor.addUniqueConstraint(ALERT_TABLE_TARGET, "uni_alert_target_name", "target_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1027,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1028,columns.add(new DBColumnInfo("group_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1029,columns.add(new DBColumnInfo("target_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1030,dbAccessor.createTable(ALERT_TABLE_GROUP_TARGET, columns, "group_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1033,dbAccessor.addFKConstraint(ALERT_TABLE_GROUP_TARGET,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1035,false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1037,dbAccessor.addFKConstraint(ALERT_TABLE_GROUP_TARGET,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1039,false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1042,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1043,columns.add(new DBColumnInfo("definition_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1044,columns.add(new DBColumnInfo("group_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1045,dbAccessor.createTable(ALERT_TABLE_GROUPING, columns, "group_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1048,dbAccessor.addFKConstraint(ALERT_TABLE_GROUPING,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1052,dbAccessor.addFKConstraint(ALERT_TABLE_GROUPING,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1057,columns = new ArrayList<DBColumnInfo>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1058,columns.add(new DBColumnInfo("notification_id", Long.class, null, null,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1059,false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1060,columns.add(new DBColumnInfo("target_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1061,columns.add(new DBColumnInfo("history_id", Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1062,columns.add(new DBColumnInfo("notify_state", String.class, 255, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1063,columns.add(new DBColumnInfo("uuid", String.class, 64, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1064,dbAccessor.createTable(ALERT_TABLE_NOTICE, columns, "notification_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1066,dbAccessor.addFKConstraint(ALERT_TABLE_NOTICE, "fk_alert_notice_target_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1069,dbAccessor.addFKConstraint(ALERT_TABLE_NOTICE, "fk_alert_notice_hist_id",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1072,dbAccessor.addUniqueConstraint(ALERT_TABLE_NOTICE, "uni_alert_notice_uuid", "uuid");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1074,dbAccessor.createIndex("idx_alert_history_def_id", ALERT_TABLE_HISTORY,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1076,dbAccessor.createIndex("idx_alert_history_service", ALERT_TABLE_HISTORY,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1078,dbAccessor.createIndex("idx_alert_history_host", ALERT_TABLE_HISTORY,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1080,dbAccessor.createIndex("idx_alert_history_time", ALERT_TABLE_HISTORY,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1082,dbAccessor.createIndex("idx_alert_history_state", ALERT_TABLE_HISTORY,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1084,dbAccessor.createIndex("idx_alert_group_name", ALERT_TABLE_GROUP,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1086,dbAccessor.createIndex("idx_alert_notice_state", ALERT_TABLE_NOTICE,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1090,protected void addMissingConfigs() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1091,addNewConfigurationsFromXml();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1092,updateOozieConfigs();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1095,protected void updateOozieConfigs() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1096,final String PROPERTY_NAME = "log4j.appender.oozie.layout.ConversionPattern=";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1097,final String PROPERTY_VALUE_OLD = "%d{ISO8601} %5p %c{1}:%L - %m%n";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1098,final String PROPERTY_VALUE_NEW = "%d{ISO8601} %5p %c{1}:%L - SERVER[${oozie.instance.id}] %m%n";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1100,AmbariManagementController ambariManagementController = injector.getInstance(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1101,AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1102,Clusters clusters = ambariManagementController.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1104,if (clusters != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1105,Map<String, Cluster> clusterMap = clusters.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1106,Map<String, String> prop = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1107,String content = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1109,if (clusterMap != null && !clusterMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1110,for (final Cluster cluster : clusterMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1111,content = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1112,if (cluster.getDesiredConfigByType("oozie-log4j") != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1113,content = cluster.getDesiredConfigByType(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1117,if (content != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1118,content = content.replace(PROPERTY_NAME + PROPERTY_VALUE_OLD,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1119,PROPERTY_NAME + PROPERTY_VALUE_NEW);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1121,prop.put("content", content);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1122,updateConfigurationPropertiesForCluster(cluster, "oozie-log4j",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1123,prop, true, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1127,if(cluster.getDesiredConfigByType("oozie-env") != null &&
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1128,cluster.getDesiredConfigByType("oozie-env").getProperties().containsKey("oozie_heapsize")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1129,Map<String, String> oozieProps = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1130,oozieProps.put("oozie_heapsize","2048m");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1131,oozieProps.put("oozie_permsize","256m");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1132,updateConfigurationPropertiesForCluster(cluster, "oozie-env",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1133,oozieProps, true, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1144,protected void renamePigProperties() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1145,ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1146,AmbariManagementController ambariManagementController = injector.getInstance(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1147,AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1149,Clusters clusters = ambariManagementController.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1150,if (clusters == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1151,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1154,Map<String, Cluster> clusterMap = clusters.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1156,if (clusterMap != null && !clusterMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1157,for (final Cluster cluster : clusterMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1158,Config oldConfig = cluster.getDesiredConfigByType(PIG_PROPERTIES_CONFIG_TYPE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1159,if (oldConfig != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1160,Map<String, String> properties = oldConfig.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1162,if(!properties.containsKey(CONTENT_FIELD_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1163,String value = properties.remove(PIG_CONTENT_FIELD_NAME);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1164,properties.put(CONTENT_FIELD_NAME, value);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1165,configHelper.createConfigType(cluster, ambariManagementController,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1166,PIG_PROPERTIES_CONFIG_TYPE, properties, "ambari-upgrade", null);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1173,protected void addEnvContentFields() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1174,ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1175,AmbariManagementController ambariManagementController = injector.getInstance(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1176,AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1178,Clusters clusters = ambariManagementController.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1179,if (clusters == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1180,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1183,Map<String, Cluster> clusterMap = clusters.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1185,if (clusterMap != null && !clusterMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1186,for (final Cluster cluster : clusterMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1187,Set<String> configTypes = configHelper.findConfigTypesByPropertyName(cluster.getCurrentStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1188,CONTENT_FIELD_NAME, cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1190,for(String configType:configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1191,if(!configType.endsWith(ENV_CONFIGS_POSTFIX) && !configType.equals("pig-properties")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1192,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1195,updateConfigurationPropertiesWithValuesFromXml(configType, Collections.singleton(CONTENT_FIELD_NAME), false, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1201,protected void moveGlobalsToEnv() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1202,ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1204,AmbariManagementController ambariManagementController = injector.getInstance(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1205,AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1206,Clusters clusters = ambariManagementController.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1207,if (clusters == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1208,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1210,Map<String, Cluster> clusterMap = clusters.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1212,if (clusterMap != null && !clusterMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1213,for (final Cluster cluster : clusterMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1214,Config config = cluster.getDesiredConfigByType(Configuration.GLOBAL_CONFIG_TAG);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1215,if (config == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1216,LOG.info("Config " + Configuration.GLOBAL_CONFIG_TAG + " not found. Assuming upgrade already done.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1217,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1220,Map<String, Map<String, String>> newProperties = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1221,Map<String, String> globalProperites = config.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1222,Map<String, String> unmappedGlobalProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1224,for (Map.Entry<String, String> property : globalProperites.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1225,String propertyName = property.getKey();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1226,String propertyValue = property.getValue();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1227,String newPropertyName = getNewPropertyName().get(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1229,Set<String> newConfigTypes = configHelper.findConfigTypesByPropertyName(cluster.getCurrentStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1230,propertyName, cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1232,newConfigTypes.remove(Configuration.GLOBAL_CONFIG_TAG);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1234,String newConfigType = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1235,if(newConfigTypes.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1236,newConfigType = newConfigTypes.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1238,newConfigType = getAdditionalMappingGlobalToEnv().get(((newPropertyName == null)? propertyName : newPropertyName));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1241,if(newConfigType==null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1242,LOG.warn("Cannot find where to map " + propertyName + " from " + Configuration.GLOBAL_CONFIG_TAG +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1244,unmappedGlobalProperties.put(propertyName, propertyValue);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1245,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1248,LOG.info("Mapping config " + propertyName + " from " + Configuration.GLOBAL_CONFIG_TAG +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1252,if(!newProperties.containsKey(newConfigType)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1253,newProperties.put(newConfigType, new HashMap<String, String>());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1255,newProperties.get(newConfigType).put(((newPropertyName == null)? propertyName : newPropertyName), propertyValue);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1258,for (Entry<String, Map<String, String>> newProperty : newProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1259,updateConfigurationProperties(newProperty.getKey(), newProperty.getValue(), false, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1263,if(unmappedGlobalProperties.size() != 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1264,LOG.info("Not deleting globals because have custom properties");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1265,configHelper.createConfigType(cluster, ambariManagementController,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1266,Configuration.GLOBAL_CONFIG_TAG, unmappedGlobalProperties,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1269,configHelper.removeConfigsByType(cluster, Configuration.GLOBAL_CONFIG_TAG);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1275,public static Map<String, String> getAdditionalMappingGlobalToEnv() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1276,Map<String, String> result = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1278,result.put("smokeuser_keytab","hadoop-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1279,result.put("hdfs_user_keytab","hadoop-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1280,result.put("hdfs_principal_name","hadoop-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1281,result.put("kerberos_domain","hadoop-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1282,result.put("hbase_user_keytab","hbase-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1283,result.put("hbase_principal_name", "hbase-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1284,result.put("nagios_principal_name","nagios-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1285,result.put("nagios_keytab_path","nagios-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1286,result.put("oozie_keytab","oozie-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1287,result.put("zookeeper_principal_name","zookeeper-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1288,result.put("zookeeper_keytab_path","zookeeper-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1289,result.put("storm_principal_name","storm-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1290,result.put("storm_keytab","storm-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1291,result.put("hive_hostname","hive-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1292,result.put("oozie_hostname","oozie-env");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1293,result.put("dataDir","zoo.cfg");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1295,return result;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1298,public Map<String, String> getNewPropertyName() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1299,Map<String, String> result = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1300,result.put("zk_data_dir","dataDir");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1301,return result;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1304,private void upgradePermissionModel() throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1305,final UserDAO userDAO = injector.getInstance(UserDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1306,final PrincipalDAO principalDAO = injector.getInstance(PrincipalDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1307,final PrincipalTypeDAO principalTypeDAO = injector.getInstance(PrincipalTypeDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1308,final ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1309,final ResourceTypeDAO resourceTypeDAO = injector.getInstance(ResourceTypeDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1310,final ResourceDAO resourceDAO = injector.getInstance(ResourceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1311,final ViewDAO viewDAO = injector.getInstance(ViewDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1312,final ViewInstanceDAO viewInstanceDAO = injector.getInstance(ViewInstanceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1313,final PermissionDAO permissionDAO = injector.getInstance(PermissionDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1314,final PrivilegeDAO privilegeDAO = injector.getInstance(PrivilegeDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1316,final PrincipalTypeEntity userPrincipalType = principalTypeDAO.findById(PrincipalTypeEntity.USER_PRINCIPAL_TYPE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1317,for (UserEntity user: userDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1318,final PrincipalEntity principalEntity = new PrincipalEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1319,principalEntity.setPrincipalType(userPrincipalType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1320,principalDAO.create(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1321,user.setPrincipal(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1322,userDAO.merge(user);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1325,final ResourceTypeEntity clusterResourceType = resourceTypeDAO.findById(ResourceType.CLUSTER.getId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1326,for (ClusterEntity cluster: clusterDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1327,final ResourceEntity resourceEntity = new ResourceEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1328,resourceEntity.setResourceType(clusterResourceType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1329,resourceDAO.create(resourceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1330,cluster.setResource(resourceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1331,clusterDAO.merge(cluster);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1334,for (ViewEntity view: viewDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1335,final ResourceTypeEntity resourceType = new ResourceTypeEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1336,resourceType.setName(ViewEntity.getViewName(view.getCommonName(), view.getVersion()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1337,resourceTypeDAO.create(resourceType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1340,for (ViewInstanceEntity viewInstance: viewInstanceDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1341,final ResourceEntity resourceEntity = new ResourceEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1342,viewInstance.getViewEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1343,resourceEntity.setResourceType(resourceTypeDAO.findByName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1344,ViewEntity.getViewName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1345,viewInstance.getViewEntity().getCommonName(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1346,viewInstance.getViewEntity().getVersion())));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1347,viewInstance.setResource(resourceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1348,resourceDAO.create(resourceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1349,viewInstanceDAO.merge(viewInstance);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1352,final PermissionEntity adminPermission = permissionDAO.findAmbariAdminPermission();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1353,final PermissionEntity clusterOperatePermission = permissionDAO.findClusterOperatePermission();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1354,final PermissionEntity clusterReadPermission = permissionDAO.findClusterReadPermission();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1355,final ResourceEntity ambariResource = resourceDAO.findAmbariResource();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1357,final Map<UserEntity, List<String>> roles = new HashMap<UserEntity, List<String>>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1358,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1359,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1360,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1361,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1362,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1363,rs = statement.executeQuery("SELECT role_name, user_id FROM user_roles");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1364,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1365,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1366,final String roleName = rs.getString(1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1367,final int userId = rs.getInt(2);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1369,final UserEntity user = userDAO.findByPK(userId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1370,List<String> userRoles = roles.get(user);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1371,if (userRoles == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1372,userRoles = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1373,roles.put(user, userRoles);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1375,userRoles.add(roleName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1380,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1381,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1383,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1384,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1387,for (UserEntity user: userDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1388,List<String> userRoles = roles.get(user);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1389,if (userRoles.contains("admin")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1390,final PrivilegeEntity privilege = new PrivilegeEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1391,privilege.setPermission(adminPermission);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1392,privilege.setPrincipal(user.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1393,privilege.setResource(ambariResource);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1394,user.getPrincipal().getPrivileges().add(privilege);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1395,privilegeDAO.create(privilege);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1396,for (ClusterEntity cluster: clusterDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1397,final PrivilegeEntity clusterPrivilege = new PrivilegeEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1398,clusterPrivilege.setPermission(clusterOperatePermission);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1399,clusterPrivilege.setPrincipal(user.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1400,clusterPrivilege.setResource(cluster.getResource());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1401,privilegeDAO.create(clusterPrivilege);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1402,user.getPrincipal().getPrivileges().add(clusterPrivilege);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1404,userDAO.merge(user);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1406,for (ClusterEntity cluster: clusterDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1407,final PrivilegeEntity privilege = new PrivilegeEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1408,privilege.setPermission(clusterReadPermission);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1409,privilege.setPrincipal(user.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1410,privilege.setResource(cluster.getResource());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1411,privilegeDAO.create(privilege);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1412,user.getPrincipal().getPrivileges().add(privilege);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1414,userDAO.merge(user);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1418,dbAccessor.dropTable("user_roles");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1419,dbAccessor.dropTable("roles");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1422,protected void addJobsViewPermissions() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1424,final UserDAO userDAO = injector.getInstance(UserDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1425,final ResourceTypeDAO resourceTypeDAO = injector.getInstance(ResourceTypeDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1426,final ResourceDAO resourceDAO = injector.getInstance(ResourceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1427,final ViewDAO viewDAO = injector.getInstance(ViewDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1428,final ViewInstanceDAO viewInstanceDAO = injector.getInstance(ViewInstanceDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1429,final KeyValueDAO keyValueDAO = injector.getInstance(KeyValueDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1430,final PermissionDAO permissionDAO = injector.getInstance(PermissionDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1431,final PrivilegeDAO privilegeDAO = injector.getInstance(PrivilegeDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1432,final ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1433,final ViewRegistry viewRegistry = injector.getInstance(ViewRegistry.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1435,List<ClusterEntity> clusters = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1436,if (!clusters.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1437,ClusterEntity currentCluster = clusters.get(0);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1438,StackEntity currentStack = currentCluster.getClusterStateEntity().getCurrentStack();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1440,boolean isStackHdp21 = CLUSTER_STATE_STACK_HDP_2_1.getStackName().equals(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1442,&& CLUSTER_STATE_STACK_HDP_2_1.getStackVersion().equals(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1443,currentStack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1445,if (isStackHdp21) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1446,ViewRegistry.initInstance(viewRegistry);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1447,viewRegistry.readViewArchives(VIEW_NAME_REG_EXP);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1448,ViewEntity jobsView = viewDAO.findByCommonName(JOBS_VIEW_NAME);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1450,if (jobsView != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1451,ViewInstanceEntity jobsInstance = jobsView.getInstanceDefinition(JOBS_VIEW_INSTANCE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1452,if (jobsInstance == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1453,jobsInstance = new ViewInstanceEntity(jobsView, JOBS_VIEW_INSTANCE_NAME, JOBS_VIEW_INSTANCE_LABEL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1454,ResourceEntity resourceEntity = new ResourceEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1455,resourceEntity.setResourceType(resourceTypeDAO.findByName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1456,ViewEntity.getViewName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1457,jobsView.getCommonName(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1458,jobsView.getVersion())));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1459,String atsHost;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1460,String rmHost;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1461,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1462,ClusterConfigEntity currentYarnConfig = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1463,for (ClusterConfigMappingEntity configMappingEntity : currentCluster.getConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1464,if (YARN_SITE.equals(configMappingEntity.getType()) && configMappingEntity.isSelected() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1465,currentYarnConfig = clusterDAO.findConfig(currentCluster.getClusterId(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1466,configMappingEntity.getType(), configMappingEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1467,break;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1470,Type type = new TypeToken<Map<String, String>>() {}.getType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1471,Map<String, String> yarnSiteProps = StageUtils.getGson().fromJson(currentYarnConfig.getData(), type);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1472,atsHost = yarnSiteProps.get(YARN_TIMELINE_SERVICE_WEBAPP_ADDRESS_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1473,rmHost = yarnSiteProps.get(YARN_RESOURCEMANAGER_WEBAPP_ADDRESS_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1476,return;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1478,jobsInstance.setResource(resourceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1479,jobsInstance.putProperty(YARN_ATS_URL_PROPERTY, "http://" + atsHost);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1480,jobsInstance.putProperty(YARN_RESOURCEMANAGER_URL_PROPERTY, "http://" + rmHost);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1481,jobsView.addInstanceDefinition(jobsInstance);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1482,resourceDAO.create(resourceEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1483,viewInstanceDAO.create(jobsInstance);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1484,viewDAO.merge(jobsView);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1487,boolean showJobsForNonAdmin = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1488,KeyValueEntity showJobsKeyValueEntity = keyValueDAO.findByKey(SHOW_JOBS_FOR_NON_ADMIN_KEY);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1489,if (showJobsKeyValueEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1490,String value = showJobsKeyValueEntity.getValue();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1491,showJobsForNonAdmin = Boolean.parseBoolean(value);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1492,keyValueDAO.remove(showJobsKeyValueEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1494,if (showJobsForNonAdmin) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1495,ResourceEntity jobsResource = jobsInstance.getResource();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1496,long jobsResourceId = jobsResource.getId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1497,PermissionEntity viewUsePermission = permissionDAO.findViewUsePermission();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1498,PermissionEntity adminPermission = permissionDAO.findAmbariAdminPermission();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1499,int viewUsePermissionId = viewUsePermission.getId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1500,int adminPermissionId = adminPermission.getId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1501,for (UserEntity userEntity : userDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1503,List<PrivilegeEntity> privilegeEntities = privilegeDAO.findAllByPrincipal(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1504,Collections.singletonList(userEntity.getPrincipal()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1505,boolean hasJobsUsePrivilege = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1506,for (PrivilegeEntity privilegeEntity : privilegeEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1507,int privilegePermissionId = privilegeEntity.getPermission().getId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1508,Long privilegeResourceId = privilegeEntity.getResource().getId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1510,|| privilegePermissionId == adminPermissionId) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1511,hasJobsUsePrivilege = true;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1512,break;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1516,if (!hasJobsUsePrivilege) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1517,PrivilegeEntity privilegeEntity = new PrivilegeEntity();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1518,privilegeEntity.setResource(jobsResource);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1519,privilegeEntity.setPermission(viewUsePermission);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1520,privilegeEntity.setPrincipal(userEntity.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,1521,privilegeDAO.create(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog200.java,87,public String getSourceVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog200.java,88,return "1.7.0";
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,71,requestId += 1;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,106,requestId += 1;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,108,StackAdvisorCommand<RecommendationResponse> command = createRecommendationCommand(request
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2684,int metricsCollectorsCount = topology.getHostAssignmentsForComponent("METRICS_COLLECTOR").size();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2685,if (metricsCollectorsCount == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2686,String value = origValue;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2688,if (isSpecialNetworkAddress(origValue)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2689,value = origValue.replace(BIND_ALL_IP_ADDRESS, "localhost");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2691,return super.updateForClusterCreate(propertyName, value, properties, topology);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2694,return origValue.replace("localhost", BIND_ALL_IP_ADDRESS);
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,64,private static final String TIMELINE_HOST_PROPERTY = "kafka.timeline.metrics.host";
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,77,private String collectorUri;
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,120,String metricCollectorHost = props.getString(TIMELINE_HOST_PROPERTY, TIMELINE_DEFAULT_HOST);
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,152,LOG.debug("CollectorUri = " + collectorUri);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,481,throw new KerberosOperationException("Unexpected error condition executing the kadmin command");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,137,List<UpgradeCatalog> upgradeCatalogs = new ArrayList<UpgradeCatalog>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,138,List<UpgradeCatalog> candidateCatalogs = new ArrayList<UpgradeCatalog>(allUpgradeCatalogs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,75,LOG.error("SQL Error while getting logs. Tried writing to: {}", logFile);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,77,LOG.warn("HDFS Error while getting writing logs to {}", logFile);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/internal/SafeViewContext.java,92,return viewContext.getProperties();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,101,private Aggregator aggregator;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,113,if (aggregator == null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,116,aggregator = new Aggregator(getResourceManager(), atsParser, operationController);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,118,return aggregator;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,121,protected void setAggregator(Aggregator aggregator) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,122,this.aggregator = aggregator;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,201,Map<String, String> propertyMap = updatedConfigs.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,202,Map<String, String> clusterConfigProperties = existingConfigurations.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,203,Map<String, String> stackDefaultConfigProperties = stackDefaultProps.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,204,for (String property : propertyMap.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,206,if (!propertyHasCustomValue(clusterConfigProperties, stackDefaultConfigProperties, property)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,207,LOG.debug("Update Kerberos related config property: {} {} {}", configType, property, propertyMap.get
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,208,(property));
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,209,clusterConfiguration.setProperty(configType, property, propertyMap.get(property));
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,210,updatedConfigTypes.add(configType);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,122,private Map<String, Map<String, String>> m_hashes = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,141,Map<String, String> clusterMapping = m_hashes.get(hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,144,m_hashes.put(hostName, clusterMapping);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,74,LOG.info("User with {}='{}' logged in with login alias '{}'", ldapUserName, loginName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,76,AuthorizationHelper.addLoginNameAlias(ldapUserName, loginName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,391,ShellCommandUtil.Result result;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,454,result = executeCommand(command.toArray(new String[command.size()]), null, interactiveHandler);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,133,String key = generateKey(component, host);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,144,LOG.debug("LogFileNames result for key = {} not in cache, queueing up remote request", key);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,145,startLogSearchFileNameRequest(host, component, cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,186,executor.execute(new LogSearchFileNameRequestRunnable(host, component, cluster));
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,208,private class LogSearchFileNameRequestRunnable implements Runnable {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,216,private LogSearchFileNameRequestRunnable(String host, String component, String cluster) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,217,this.host = host;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,225,LoggingRequestHelper helper =
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,226,new LoggingRequestHelperFactoryImpl().getHelper(getController(), cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,228,if (helper != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,230,Set<String> logFileNamesResult =
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,231,helper.sendGetLogFileNamesRequest(component, host);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,234,if (logFileNamesResult != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,235,LOG.debug("LogSearchFileNameRequestRunnable: request was successful, updating cache");
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,236,logFileNameCache.put(generateKey(component, host), logFileNamesResult);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,238,LOG.debug("LogSearchFileNameRequestRunnable: remote request was not successful");
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,241,LOG.debug("LogSearchFileNameRequestRunnable: request helper was null.  This may mean that LogSearch is not available, or could be a potential connection problem.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,22,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,23,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,51,import org.apache.ambari.server.orm.dao.WidgetDAO;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,67,import org.apache.ambari.server.orm.entities.WidgetEntity;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,90,import org.apache.ambari.server.state.stack.WidgetLayout;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,91,import org.apache.ambari.server.state.stack.WidgetLayoutInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,103,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,104,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,105,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2221,Map<String, String> updates = Collections.singletonMap("kdc_hosts", value);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2222,Set<String> removes = Collections.singleton("kdc_host");
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceRequest.java,96,+ ", desiredState=" + desiredState);
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java,33,String desiredStackVersion, String desiredState) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,325,(String) properties.get(SERVICE_SERVICE_STATE_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java,191,(String) properties.get(SERVICE_NAME_PROPERTY_ID));
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,499,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,545,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,467,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,513,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,193,String newString = search.trim();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,194,String newSearch = escapeQueryChars(newString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,195,boolean isSingleWord = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,196,for (int i = 0; i < search.length(); i++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,197,if (Character.isWhitespace(search.charAt(i))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,198,isSingleWord = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,201,if (!isSingleWord) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,231,if (search.length() > 1) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,232,search = search.substring(1, search.length() - 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,235,search="";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,239,search = escapeQueryChars(search);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,242,return "*" + search + "*";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,253,if (search.startsWith("*") && search.endsWith("*")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,255,search = escapeForKeyTokenizer(search);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,22,import java.io.File;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,24,import java.util.Date;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,25,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,26,import java.util.Iterator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,27,import java.util.Scanner;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,38,import org.codehaus.jettison.json.JSONArray;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,39,import org.codehaus.jettison.json.JSONException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,40,import org.codehaus.jettison.json.JSONObject;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,41,import com.google.gson.JsonParseException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,120,solrQuery.setFilterQueries(fq);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,149,String hadoopServiceString = getHadoopServiceConfigJSON();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,150,String key = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,151,JSONArray componentArray = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,152,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,153,JSONObject componentList = new JSONObject();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,154,JSONObject jsonValue = new JSONObject();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,158,Iterator<String> hadoopSerivceKeys = hadoopServiceJsonObject.keys();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,159,while (hadoopSerivceKeys.hasNext()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,160,key = hadoopSerivceKeys.next();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,163,for (int i = 0; i < componentArray.length(); i++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,164,JSONObject compJsonObject = (JSONObject) componentArray.get(i);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,165,String componentName = compJsonObject.getString("name");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,166,JSONObject innerContent = new JSONObject();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,167,innerContent.put("label", componentName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,168,innerContent.put("hosts", new JSONArray());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,169,innerContent.put("defaultLevels", levelJsonArray);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,170,componentList.put(componentName, innerContent);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,173,jsonValue.put("filter", componentList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,189,StringBuilder result = new StringBuilder("");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,192,ClassLoader classLoader = getClass().getClassLoader();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,196,try (Scanner scanner = new Scanner(file)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,198,while (scanner.hasNextLine()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,199,String line = scanner.nextLine();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,200,result.append(line).append("\n");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,203,scanner.close();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,209,String hadoopServiceConfig = result.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,211,return hadoopServiceConfig;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,213,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,72,Object valueObj = jsonObj.get(sourceField);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,73,if (valueObj != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,84,jsonObj.put(name, value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,90,public static final String NGRAM_SUFFIX = "ngram_";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,265,String newString = search.trim();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,268,newSearch = newSearch.replace("\n", "*");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,269,newSearch = newSearch.replace("\t", "*");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,270,newSearch = newSearch.replace("\r", "*");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,271,newSearch = newSearch.replace("**", "*");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,272,newSearch = newSearch.replace("***", "*");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,273,return "*" + newSearch + "*";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,151,if (!StringUtils.isEmpty(userName)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,202,&& (!StringUtils.isEmpty(userName))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,240,&& !StringUtils.isEmpty(hostname)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,309,if (!StringUtils.isEmpty(cookie)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,317,if (!StringUtils.isEmpty(userName)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LdapProperties.java,66,if (!StringUtils.isEmpty(secondaryUrl)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,113,public User loadUserByUsername(final String username) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,116,User user = new User();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,118,if (userInfo != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,62,String methodName = method.name().toLowerCase();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,65,return isEnable;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,63,boolean simpleEnabled = super.isEnable(method);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,49,private static final String KEYSTORE_LOCATION_ARG = "javax.net.ssl.keyStore";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,50,private static final String KEYSTORE_PASSWORD_ARG = "javax.net.ssl.keyStorePassword";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,51,private static final String KEYSTORE_TYPE_ARG = "javax.net.ssl.keyStoreType";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,52,private static final String DEFAULT_KEYSTORE_TYPE = "JKS";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,53,private static final String TRUSTSTORE_LOCATION_ARG = "javax.net.ssl.trustStore";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,54,private static final String TRUSTSTORE_PASSWORD_ARG = "javax.net.ssl.trustStorePassword";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,55,private static final String TRUSTSTORE_TYPE_ARG = "javax.net.ssl.trustStoreType";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,56,private static final String DEFAULT_TRUSTSTORE_TYPE = "JKS";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,108,String keystoreLocation = System.getProperty(KEYSTORE_LOCATION_ARG);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,109,String keystorePassword = System.getProperty(KEYSTORE_PASSWORD_ARG);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,110,String keystoreType = System.getProperty(KEYSTORE_TYPE_ARG,DEFAULT_KEYSTORE_TYPE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,111,String trustStoreLocation = System.getProperty(TRUSTSTORE_LOCATION_ARG);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,112,String trustStorePassword = System.getProperty(TRUSTSTORE_PASSWORD_ARG);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,113,String trustStoreType = System.getProperty(TRUSTSTORE_TYPE_ARG,DEFAULT_TRUSTSTORE_TYPE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,115,&& !StringUtils.isEmpty(keystoreLocation) && !StringUtils.isEmpty(keystorePassword)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,121,SslContextFactory sslContextFactory = new SslContextFactory();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,122,sslContextFactory.setKeyStorePath(keystoreLocation);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,123,sslContextFactory.setKeyStorePassword(keystorePassword);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,124,sslContextFactory.setKeyStoreType(keystoreType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,125,if (!StringUtils.isEmpty(trustStoreLocation) && !StringUtils.isEmpty(trustStorePassword)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,126,sslContextFactory.setTrustStorePath(trustStoreLocation);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,127,sslContextFactory.setTrustStorePassword(trustStorePassword);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,128,sslContextFactory.setTrustStoreType(trustStoreType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,142,URI logsearchURI = URI.create(String.format("%s://0.0.0.0:%s", protcolProperty,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,143,port));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,30,public abstract class LogsearchAbstractAuthenticationProvider implements AuthenticationProvider {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,32,public final static String AUTH_METHOD_PROP_START_WITH = "logsearch.auth.";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,34,protected enum AUTH_METHOD {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,49,protected List<GrantedAuthority> getAuthorities(String username) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,50,final List<GrantedAuthority> grantedAuths = new ArrayList<>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,61,public boolean isEnable(AUTH_METHOD method) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,63,String property = AUTH_METHOD_PROP_START_WITH + methodName + ".enable";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,23,import org.apache.ambari.logsearch.dao.UserDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,35,public class LogsearchAuthenticationProvider extends
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,36,LogsearchAbstractAuthenticationProvider {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,37,private static final Logger logger = Logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,38,.getLogger(LogsearchAuthenticationProvider.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,39,private static Logger auditLogger = Logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,40,.getLogger("org.apache.ambari.logsearch.audit");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,65,throws AuthenticationException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,67,+ ", userDetail=" + authentication.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,68,Authentication inAuthentication = authentication;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,69,AuthenticationException authException = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,71,auditRecord.put("user", authentication.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,72,auditRecord.put("principal", authentication.getPrincipal().toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,73,auditRecord.put("auth_class", authentication.getClass().getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,74,logger.info("authentication.class="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,75,+ authentication.getClass().getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,81,auditRecord.put("remote_ip",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,82,webAuthentication.getRemoteAddress());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,88,for (AUTH_METHOD authMethod : AUTH_METHOD.values()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,91,if (authentication != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,92,&& authentication.isAuthenticated()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,93,logger.info("Authenticated using method="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,94,+ authMethod.name() + ", user="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,95,+ authentication.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,107,logger.error(e,e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,111,logger.warn("Authentication failed for user="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,112,+ inAuthentication.getName() + ", userDetail="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,113,+ inAuthentication.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,121,if (isSuccess) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,122,auditLogger.info(jsonStr);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,124,auditLogger.warn(jsonStr);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,134,public Authentication doAuth(Authentication authentication, AUTH_METHOD authMethod) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,135,if (authMethod.equals(AUTH_METHOD.LDAP)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,136,authentication = ldapAuthenticationProvider.authenticate(authentication);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,138,authentication = fileAuthenticationProvider.authenticate(authentication);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,140,authentication = simpleAuthenticationProvider.authenticate(authentication);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,142,authentication = externalServerAuthenticationProvider.authenticate(authentication);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,144,logger.error("Invalid authentication method :" + authMethod.name());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,45,public class LogsearchExternalServerAuthenticationProvider extends
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,46,LogsearchAbstractAuthenticationProvider {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,48,private static Logger LOG = Logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,49,.getLogger(LogsearchExternalServerAuthenticationProvider.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,51,public final static String ALLOWED_ROLE_PROP = "logsearch.roles.allowed";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,53,public static enum PRIVILEGE_INFO {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,54,PERMISSION_LABEL {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,56,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,57,return "permission_label";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,60,PERMISSION_NAME {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,62,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,63,return "permission_name";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,66,PRINCIPAL_NAME {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,68,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,69,return "principal_name";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,72,PRINCIPAL_TYPE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,74,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,75,return "principal_type";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,78,PRIVILEGE_ID {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,80,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,81,return "privilege_id";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,84,TYPE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,86,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,87,return "type";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,90,USER_NAME {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,92,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,93,return "user_name";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,126,throws AuthenticationException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,144,String responseObj = (String) externalServerClient.sendGETRequest(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,145,finalLoginUrl, String.class, null, username, password);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,147,LOG.error(username + " does'nt have permission");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,152,LOG.error("Login failed for username :" + username + " Error :"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,153,+ e.getLocalizedMessage());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,156,authentication = new UsernamePasswordAuthenticationToken(username,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,157,password, getAuthorities(username));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,171,PRIVILEGE_INFO.PERMISSION_NAME.toString(), values);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,40,private static Logger logger = Logger.getLogger(LogsearchFileAuthenticationProvider.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,74,if (password == null || password.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,82,throw new BadCredentialsException("Wrong password");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,35,private static Logger logger = Logger.getLogger(LogsearchSimpleAuthenticationProvider.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,54,authentication = new UsernamePasswordAuthenticationToken(username, password, getAuthorities(username));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,59,public boolean isEnable(AUTH_METHOD method) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,60,boolean ldapEnabled = super.isEnable(AUTH_METHOD.LDAP);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,61,boolean fileEnabled = super.isEnable(AUTH_METHOD.FILE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,62,boolean externalAuthEnabled = super.isEnable(AUTH_METHOD.EXTERNAL_AUTH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,64,if (!ldapEnabled && !fileEnabled && simpleEnabled && !externalAuthEnabled) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,66,return true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,68,return false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,24,import java.util.StringTokenizer;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,76,while (fieldTokenizer.hasMoreTokens()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,77,String nv = fieldTokenizer.nextToken();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,80,while (nvTokenizer.hasMoreTokens()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,81,String name = nvTokenizer.nextToken();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,82,if (nvTokenizer.hasMoreTokens()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,83,String value = nvTokenizer.nextToken();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,39,public static final String ID = "id";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,40,public static final String USER_NAME = "username";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,41,public static final String VALUES = "jsons";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,42,public static final String FILTER_NAME = "filtername";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,43,public static final String ROW_TYPE = "rowtype";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,46,public static final String COMPOSITE_KEY = "composite_filtername-username";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,47,public static final String SHARE_NAME_LIST = "share_username_list";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,50,public static final String BUNDLE_ID = "bundle_id";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,51,public static final String LOGTIME = "logtime";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,52,public static final String SEQUNCE_ID = "seq_num";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,53,public static final String SOLR_COMPONENT = "type";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,54,public static final String SOLR_LOG_MESSAGE = "log_message";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,55,public static final String SOLR_KEY_LOG_MESSAGE = "key_log_message";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,56,public static final String SOLR_HOST = "host";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,57,public static final String SOLR_LEVEL = "level";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,58,public static final String SOLR_THREAD_NAME = "thread_name";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,59,public static final String SOLR_LOGGER_NAME = "logger_name";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,60,public static final String SOLR_FILE = "file";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,61,public static final String SOLR_LINE_NUMBER = "line_number";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,62,public static final String SOLR_PATH = "path";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,65,public static final String AUDIT_COMPONENT = "repo";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,66,public static final String AUDIT_EVTTIME = "evtTime";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,67,public static final String AUDIT_REQUEST_USER = "reqUser";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,70,public static final String MINUS_OPERATOR = "-";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,71,public static final String NO_OPERATOR = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,75,public static final String EXCLUDE_QUERY = "excludeQuery";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,76,public static final String INCLUDE_QUERY = "includeQuery";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,88,public static final String UI_SUFFIX = "@UI@";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,89,public static final String SOLR_SUFFIX = "@Solr@";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,103,public static final String FACET_INDEX = "index";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,104,public static final String FACET_COUNT = "count";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,108,public static final String LIST_SEPARATOR = ",";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,111,public static final String FL = "fl";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,115,public static final String FACET_MINCOUNT = "facet.mincount";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,116,public static final String FACET_JSON_FIELD = "json.facet";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,119,public static final String FACET_DATE = "facet.date";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,120,public static final String FACET_DATE_START = "facet.date.start";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,121,public static final String FACET_DATE_END = "facet.date.end";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,122,public static final String FACET_DATE_GAP = "facet.date.gap";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,123,public static final String FACET_RANGE = "facet.range";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,124,public static final String FACET_RANGE_START = "facet.range.start";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,125,public static final String FACET_RANGE_END = "facet.range.end";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,126,public static final String FACET_RANGE_GAP = "facet.range.gap";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,127,public static final String FACET_GROUP = "group";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,128,public static final String FACET_GROUP_MAIN = "group.main";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VMessage.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VMessage.java,25,public class VMessage implements java.io.Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VMessage.java,155,String str = "VMessage={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,21,import org.apache.ambari.logsearch.view.VMessage;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,57,public VMessage getMessage() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,58,VMessage msg = new VMessage();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,65,public VMessage getMessage(Long objectId, String fieldName) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,66,VMessage msg = new VMessage();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VResponse.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VResponse.java,81,protected List<VMessage> messageList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VResponse.java,137,public void setMessageList(List<VMessage> messageList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VResponse.java,146,public List<VMessage> getMessageList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,30,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,27,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,22,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,23,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,24,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,27,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,58,import org.apache.solr.common.util.NamedList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,545,String event = solrQuery.get("event");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,559,return queryResponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,29,import org.apache.ambari.logsearch.view.VLogfeederFilterWrapper;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,30,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,46,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,99,configDocument.addField(LogSearchConstants.ID, logfeederFilterWrapper.getId());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,100,configDocument.addField(LogSearchConstants.ROW_TYPE, filterName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,101,configDocument.addField(LogSearchConstants.VALUES, json);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,102,configDocument.addField(LogSearchConstants.USER_NAME, filterName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,103,configDocument.addField(LogSearchConstants.FILTER_NAME, filterName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,124,VLogfeederFilterWrapper logfeederFilterWrapper = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,130,String json = (String) configMap.get(LogSearchConstants.VALUES);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,133,logfeederFilterWrapper.setId("" + configDoc.get(LogSearchConstants.ID));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,176,logfeederFilterWrapper.setId(""+new Date().getTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,182,logfeederFilterWrapper = new VLogfeederFilterWrapper();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,185,return logfeederFilterWrapper;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,22,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,27,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,28,import org.apache.ambari.logsearch.common.MessageEnums;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,30,import org.apache.ambari.logsearch.dao.SolrDaoBase;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,31,import org.apache.ambari.logsearch.query.QueryGeneration;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,34,import org.apache.ambari.logsearch.util.RESTErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,39,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,40,import org.apache.solr.client.solrj.SolrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,41,import org.apache.solr.client.solrj.SolrServerException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,46,import org.apache.solr.common.SolrException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,47,import org.apache.solr.common.util.SimpleOrderedMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,49,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,52,public class GraphDataGenerator extends GraphDataGeneratorBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,78,String xAxisField = (String) searchCriteria.getParamValue("xAxis");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,79,String stackField = (String) searchCriteria.getParamValue("stackBy");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,80,String from = (String) searchCriteria.getParamValue("from");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,81,String to = (String) searchCriteria.getParamValue("to");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,82,String unit = (String) searchCriteria.getParamValue("unit");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,88,String yAxisField = (String) searchCriteria.getParamValue("yAxis");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,90,searchCriteria.addParam("type", typeXAxis);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,91,String fieldTime = (String) searchCriteria.getParamValue("fieldTime");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,94,switch (garphType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,95,case NORMAL_GRAPH:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,98,case RANGE_NON_STACK_GRAPH:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,101,case NON_RANGE_STACK_GRAPH:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,104,case RANGE_STACK_GRAPH:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,107,default:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,108,logger.warn("Invalid graph type :" + garphType.name());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,109,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,117,String xAxisField = (String) searchCriteria.getParamValue("xAxis");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,118,String stackField = (String) searchCriteria.getParamValue("stackBy");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,119,String from = (String) searchCriteria.getParamValue("from");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,120,String to = (String) searchCriteria.getParamValue("to");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,121,String xType = (String) searchCriteria.getParamValue("type");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,122,if (xType != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,124,String yAxisField = (String) searchCriteria.getParamValue("yAxis");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,129,&& !(xType.contains("date") || xType.contains("time"))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,134,&& (xType.contains("date") || xType.contains("time"))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,139,&& !(xType.contains("date") || xType.contains("time"))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,144,&& (xType.contains("date") || xType.contains("time"))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,149,return graphType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,166,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,167,QueryResponse response = solrDaoBase.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,168,if (response != null && response.getResults() != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,169,long count = response.getResults().getNumFound();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,170,if (count > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,171,FacetField facetField = response.getFacetField(xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,172,if (facetField != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,173,List<Count> countValues = facetField.getValues();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,174,if (countValues != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,175,for (Count countValue : countValues) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,176,if (countValue != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,178,vNameValue.setName(countValue.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,179,vNameValue.setValue("" + countValue.getCount());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,180,vNameValues.add(vNameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,184,vBarGraphData.setName(xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,185,vBarGraphDatas.add(vBarGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,186,dataList.setGraphData(vBarGraphDatas);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,190,if (xAxisField.equalsIgnoreCase(LogSearchConstants.SOLR_LEVEL)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,201,value.setName(level);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,202,String val = "0";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,204,if (valueLevel.getName().equalsIgnoreCase(level)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,205,val = valueLevel.getValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,206,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,209,value.setValue(val);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,210,sortedVNameValues.add(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,216,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,218,String query = solrQuery != null ? solrQuery.toQueryString() : "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,224,String yAxis = yAxisField.contains("count") ? "sum" : yAxisField;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,228,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,229,QueryResponse response = solrDaoBase.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,233,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,236,String sum = (String) jsonFacetResponse.getVal(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,237,value.setName(xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,238,value.setValue(sum != null ? sum.substring(0, sum.indexOf(".")) : "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,239,vNameValues.add(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,241,vBarGraphData.setName(xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,242,vBarGraphDatas.add(vBarGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,243,dataList.setGraphData(vBarGraphDatas);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,244,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,246,String query = solrQuery != null ? solrQuery.toQueryString() : "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,251,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,264,String jsonQuery = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,266,String function = (yAxisField.contains("count")) ? "sum" : yAxisField;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,273,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,275,dataList.setGraphData(vGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,276,QueryResponse response = solrDaoBase.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,277,if (response == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,278,response = new QueryResponse();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,280,Long count = response.getResults().getNumFound();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,281,if (count <= 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,282,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,288,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,306,String val = "0";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,308,if (value.getName().equalsIgnoreCase(level)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,309,val = value.getValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,310,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,314,v1.setName(level.toUpperCase());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,315,v1.setValue(val);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,316,valueListSorted.add(v1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,321,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,323,String query = solrQuery != null ? solrQuery.toQueryString() : "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,341,queryGenerator.setSingleRangeFilter(solrQuery, fieldTime, from, to);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,345,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,347,QueryResponse response = solrDaoBase.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,348,if (response != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,349,Long count = response.getResults().getNumFound();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,350,if (count > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,352,List<RangeFacet> rangeFacet = response.getFacetRanges();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,353,if (rangeFacet != null && rangeFacet.size() > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,354,List<RangeFacet.Count> listCount = rangeFacet.get(0).getCounts();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,355,if (listCount != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,356,for (RangeFacet.Count cnt : listCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,358,vNameValue.setName(cnt.getValue());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,359,vNameValue.setValue("" + cnt.getCount());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,360,vNameValues.add(vNameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,363,vBarGraphDatas.add(vBarGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,364,vBarGraphData.setName(xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,365,dataList.setGraphData(vBarGraphDatas);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,370,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,376,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,391,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,392,solrQuery.set("json.facet", jsonHistogramQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,394,QueryResponse response = solrDaoBase.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,395,if (response != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,401,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,405,dataList.setGraphData(histogramData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,407,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,412,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,19,package org.apache.ambari.logsearch.graph;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,21,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,22,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,23,import java.util.Date;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,24,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,27,import org.apache.ambari.logsearch.util.DateUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,32,import org.apache.solr.common.util.NamedList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,33,import org.apache.solr.common.util.SimpleOrderedMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,114,if (jsonFacetResponse != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,117,if (stack != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,118,ArrayList<Object> stackBuckets = (ArrayList<Object>) stack.get(BUCKETS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,119,if (stackBuckets != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,120,for (Object stackBucket : stackBuckets) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,122,SimpleOrderedMap<Object> level = (SimpleOrderedMap<Object>) stackBucket;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,123,if (level != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,126,vBarGraphData.setName(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,130,if (innerFiledValue != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,133,if (levelBuckets != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,134,for (Object levelBucket : levelBuckets) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,135,SimpleOrderedMap<Object> countValue = (SimpleOrderedMap<Object>) levelBucket;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,136,if (countValue != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,144,vNameValues.add(vNameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,151,histogramData.add(vBarGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,162,boolean zeroFlag = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,163,if (jsonFacetResponse == null || jsonFacetResponse.get(level) == null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,164,|| jsonFacetResponse.get(level).toString().equals("{count=0}")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,165,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,169,if (levelList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,170,ArrayList<Object> bucketList = (ArrayList<Object>) levelList.get(BUCKETS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,171,if (bucketList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,172,for (int index = 0; index < bucketList.size(); index++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,175,if (valueCount != null && valueCount.size() > 2) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,180,if (isTypeNumber(typeXAxis)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,182,Double sumValue = (Double) valueCount.getVal(2);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,183,String value = "0";// default is zero
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,184,if (sumValue != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,185,value = "" + sumValue.longValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,187,nameValue.setName(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,188,nameValue.setValue(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,189,levelCounts.add(nameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,193,if (valueCountMap != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,196,if (buckets != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,197,for (int innerIndex = 0; innerIndex < buckets.size(); innerIndex++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,200,if (innerValueCount != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,209,levelCounts.add(nameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,215,vGraphData.setName(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,217,vGraphDatas.add(vGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,222,return zeroFlag;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,272,protected boolean isTypeNumber(String typeXAxis) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,274,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,22,import java.util.Set;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,24,public class VHost {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,25,protected String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,26,protected Set<String> components;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,28,public String getName() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,29,return name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,32,public void setName(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,33,this.name = name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,36,public Set<String> getComponents() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,37,return components;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,40,public void setComponents(Set<String> components) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VHost.java,41,this.components = components;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,19,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,24,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,25,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,26,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,36,public class VLogfeederFilter {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,38,private String label;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,39,private List<String> hosts;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,40,private List<String> defaultLevels;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,41,private List<String> overrideLevels;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,44,public VLogfeederFilter() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,45,hosts = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,46,defaultLevels = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilter.java,47,overrideLevels = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,31,public class VUserConfig {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,33,protected String id;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,34,protected String userName;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,35,protected String filtername;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,36,protected String values;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,38,List<String> shareNameList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,39,String rowType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,41,boolean isOverwrite;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,43,public VUserConfig(){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,44,setId(""+new Date().getTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,45,isOverwrite=false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,72,public String getValues() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,73,return values;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,76,public void setValues(String values) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,77,this.values = values;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,101,public void setOverwrite(boolean isOverwrite) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfig.java,102,this.isOverwrite = isOverwrite;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,20,package org.apache.ambari.logsearch.query;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,23,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,24,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,25,import java.util.Locale;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,28,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,33,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,34,import org.apache.solr.client.solrj.SolrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,35,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,38,public class QueryGeneration extends QueryGenerationBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,40,private static Logger logger = Logger.getLogger(QueryGeneration.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,137,applyLogFileFilter(solrQuery, searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,154,setSingleIncludeFilter(solrQuery, LogSearchConstants.SOLR_HOST, urlHostName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,165,setPagination(solrQuery, searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,168,setSortOrderDefaultServiceLog(solrQuery, searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,171,setSingleIncludeFilter(solrQuery, LogSearchConstants.BUNDLE_ID, bundleId);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,175,setSingleIncludeFilter(solrQuery, LogSearchConstants.SOLR_PATH, file_name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,184,return solrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,189,String hostLogFile = (String) searchCriteria.getParamValue("hostLogFile");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,190,String compLogFile = (String) searchCriteria.getParamValue("compLogFile");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,191,String givenQuery = (String) searchCriteria.getParamValue("q");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,192,String logfileQuery = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,202,solrQuery.addFilterQuery(logfileQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,209,String queryString = (String) searchCriteria.getParamValue(paramName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,213,queryString = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,222,List<String> conditionQuries = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,223,List<String> referalConditionQuries = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,224,List<String> elments = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,229,if (queryList != null && queryList.size() > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,238,for (HashMap<String, Object> columnListMap : queryList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,239,String orQuery = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,240,StringBuilder field = new StringBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,241,if (columnListMap != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,242,for (String key : columnListMap.keySet()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,248,boolean isSame = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,249,if (elments.contains(key)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,250,isSame = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,252,if (isSame && !operation.equals(LogSearchConstants.EXCLUDE_QUERY)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,253,for (String tempCondition : conditionQuries) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,257,referalConditionQuries.remove(tempCondition);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,258,referalConditionQuries.add(newCondtion);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,262,conditionQuries.addAll(referalConditionQuries);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,267,field.append(key);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,268,elments.add(field.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,277,for (String filter : referalConditionQuries) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,279,solrQuery.addFilterQuery(filter);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,283,for (String filter : referalConditionQuries) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,285,filter = LogSearchConstants.MINUS_OPERATOR + filter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,286,solrQuery.addFilterQuery(filter);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,295,SolrQuery solrQuery = new SolrQuery();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,296,solrQuery.setQuery("*:*");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,325,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,328,searchCriteria.setSortBy(LogSearchConstants.AUDIT_EVTTIME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,329,searchCriteria.setSortType(SolrQuery.ORDER.desc.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,332,searchCriteria.setSortBy(LogSearchConstants.AUDIT_EVTTIME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,333,searchCriteria.setSortType(SolrQuery.ORDER.desc.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,336,return solrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,341,switch (logType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,342,case AUDIT:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,346,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,347,case SERVICE:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,350,if (key.equalsIgnoreCase(LogSearchConstants.SOLR_LOG_MESSAGE)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,353,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,354,default:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,374,return escapeCharSting;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,378,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,385,private String getOriginalValue(String name, String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,388,return value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,390,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,394,HashMap<String, String> propertyFieldValue = new HashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,395,for (String temp : propertyFieldMappings) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,397,String arrayValue[] = temp.split(":");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,398,if (arrayValue.length > 1) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,402,logger.warn("array length is less than required length 1");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,409,return originalValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,415,return value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,20,package org.apache.ambari.logsearch.query;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,25,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,29,import org.apache.ambari.logsearch.util.SolrUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,31,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,32,import org.apache.solr.client.solrj.SolrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,33,import org.apache.solr.client.solrj.SolrQuery.ORDER;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,36,import com.google.gson.Gson;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,52,OR, AND
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,59,String filterQuery = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,61,StringBuilder queryMsg = new StringBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,62,operator = (operator == null ? LogSearchConstants.NO_OPERATOR : operator);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,65,int count = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,66,for (String temp : msgList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,67,count += 1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,68,if (LogSearchConstants.SOLR_LOG_MESSAGE.equalsIgnoreCase(messageField)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,73,if(temp.startsWith("\"") && temp.endsWith("\"")){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,74,temp = temp.substring(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,75,temp = temp.substring(0, temp.length()-1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,77,temp = "*" + temp + "*";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,81,if (msgList.length > count){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,82,queryMsg.append(" " + condition.name() + " ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,85,filterQuery = queryMsg.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,86,solrQuery.addFilterQuery(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,87,logger.debug("Filter added :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,95,String[] arrayOfSepratedString = commaSepratedString.split(LogSearchConstants.LIST_SEPARATOR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,96,String filterQuery = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,102,logger.warn("Not a valid condition :" + condition.name());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,106,solrQuery.addFilterQuery(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,107,logger.debug("Filter added :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,115,List<SolrQuery.SortClause> defaultSort = new ArrayList<SolrQuery.SortClause>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,118,ORDER order = SolrQuery.ORDER.asc;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,122,order = SolrQuery.ORDER.desc;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,126,defaultSort.add(logtimeSortClause);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,132,defaultSort.add(logtimeSortClause);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,137,defaultSort.add(sequenceNumberSortClause);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,138,solrQuery.setSorts(defaultSort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,139,logger.debug("Sort Order :-" + defaultSort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,146,solrQuery.setFacetSort(searchCriteria.getSortBy());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,147,logger.info("Sorted By :- " + searchCriteria.getSortBy());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,153,List<SolrQuery.SortClause> sort = new ArrayList<SolrQuery.SortClause>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,156,ORDER order = SolrQuery.ORDER.asc;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,161,order = SolrQuery.ORDER.desc;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,165,sort.add(sortOrder);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,166,solrQuery.setSorts(sort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,167,logger.debug("Sort Order :-" + sort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,176,List<SolrQuery.SortClause> sort = new ArrayList<SolrQuery.SortClause>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,177,List<String> sortList = (List<String>) searchCriteria.getParamValue("sort");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,178,if (sortList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,179,for (String sortOrder : sortList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,181,String sortByAndOrder[] = sortOrder.split(" ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,182,if (sortByAndOrder.length > 1) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,187,sort.add(solrSortClause);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,188,logger.debug("Sort Order :-" + sort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,191,logger.warn("Not a valid sort Clause " + sortOrder);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,195,solrQuery.setSorts(sort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,203,String filterQuery = buildFilterQuery(filterType, filterValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,204,solrQuery.addFilterQuery(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,205,logger.debug("Filter added :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,214,solrQuery.addFilterQuery(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,215,logger.debug("Filter added :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,227,solrQuery.addFilterQuery(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,228,logger.debug("Filter added :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,233,public void setPagination(SolrQuery solrQuery, SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,234,Integer startIndex = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,235,Integer maxRows = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,236,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,237,startIndex = (Integer) searchCriteria.getStartIndex();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,242,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,243,maxRows = (Integer) searchCriteria.getMaxRows();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,258,solrQuery.setFilterQueries(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,274,logger.info("Build Filter was :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,275,return filterQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,278,public String buildFilterQuery(String filterType, String filterValue) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,279,String filterQuery = filterType + ":" + filterValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,280,logger.info("Build Filter Query was :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,281,return filterQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,353,return "{x:'" + function + "(" + xAxisField + ")'}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,363,String query = "{";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,367,query += "}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,368,logger.info("Build JSONQuery is :- " + query);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,369,return query;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,396,logger.info("Build JSONQuery is :- " + jsonQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,397,return jsonQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,410,logger.info("Build JSONQuery is :- " + jsonQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,411,return jsonQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,417,String[] values = paramValue.split(LogSearchConstants.LIST_SEPARATOR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,418,switch (condition) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,419,case OR:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,421,case AND:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,423,default:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,424,logger.error("Invalid condition " + condition.name());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,427,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,462,String filterQuery = buildListQuery(paramValue, solrFieldName, condition);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,464,if (solrQuery != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,465,solrQuery.addFilterQuery(filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,19,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,21,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,22,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,23,import java.util.Collections;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,24,import java.util.Comparator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,25,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,26,import java.util.Iterator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,27,import java.util.LinkedHashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,28,import java.util.LinkedHashSet;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,29,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,30,import java.util.Map;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,31,import java.util.Map.Entry;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,32,import java.util.Set;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,34,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,37,import org.apache.ambari.logsearch.view.VHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,39,import org.apache.ambari.logsearch.view.VSummary;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,40,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,41,import org.apache.solr.common.SolrDocument;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,42,import org.apache.solr.common.SolrDocumentList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,43,import org.apache.solr.common.util.SimpleOrderedMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,48,public class BizUtil {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,58,String textToSave = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,59,HashMap<String, String> blankFieldsMap = new HashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,61,return "no data";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,63,if (docList.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,64,return "no data";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,66,SolrDocument docForBlankCaculation = docList.get(0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,67,if(docForBlankCaculation == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,68,return "no data";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,73,int maxLengthOfField = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,75,return "no data";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,79,maxLengthOfField = field.length();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,83,for (String field : fieldsForBlankCaculation) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,92,for (SolrDocument doc : docList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,93,if (doc != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,94,StringBuffer textTowrite = new StringBuffer();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,96,if (doc.getFieldValue(LogSearchConstants.LOGTIME) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,100,if (doc.getFieldValue(LogSearchConstants.SOLR_LEVEL) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,105,if (doc.getFieldValue(LogSearchConstants.SOLR_THREAD_NAME) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,110,if (doc.getFieldValue(LogSearchConstants.SOLR_LOGGER_NAME) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,117,textTowrite
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,125,if (doc.getFieldValue(LogSearchConstants.SOLR_LOG_MESSAGE) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,131,textTowrite.append("\n");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,132,textToSave += textTowrite.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,135,return textToSave;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,139,VSummary vsummary = new VSummary();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,141,return vsummary;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,143,int numLogs = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,144,List<VHost> vHosts = new ArrayList<VHost>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,145,vsummary.setHosts(vHosts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,146,String levels = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,147,for (SolrDocument doc : docList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,148,if (doc != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,150,String hostname = (String) doc.getFieldValue("host");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,151,String comp = (String) doc.getFieldValue("type");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,152,String level = (String) doc.getFieldValue("level");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,154,level = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,156,boolean newHost = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,157,for (VHost host : vHosts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,158,if (host != null && host.getName().equals(hostname)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,159,newHost = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,161,Set<String> compList = host.getComponents();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,162,if (compList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,163,compList.add(comp);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,166,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,169,if (newHost) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,170,VHost vHost = new VHost();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,172,vHost.setName(hostname);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,174,Set<String> component = new LinkedHashSet<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,176,component.add(comp);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,178,vHost.setComponents(component);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,179,vHosts.add(vHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,182,if (!levels.contains(level)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,183,levels = levels + ", " + level;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,185,numLogs += 1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,188,levels = levels.replaceFirst(", ", "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,189,vsummary.setLevels(levels);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,190,vsummary.setNumberLogs("" + numLogs);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,191,return vsummary;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,212,if (jsonFacetResponse == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,213,logger.info("Solr document list in null");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,216,List<Object> userList = jsonFacetResponse.getAll(outerJsonKey);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,217,if (userList.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,222,if (userMap == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,223,logger.info("No top user details found");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,228,if(userUsageList == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,231,for (SimpleOrderedMap usageMap : userUsageList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,232,if (usageMap != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,234,String userName = (String) usageMap.get("val");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,238,SimpleOrderedMap repoMap = (SimpleOrderedMap) usageMap.get(innerJsonKey);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,242,if (repoMap != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,243,for (SimpleOrderedMap repoUsageMap : repoUsageList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,245,if (repoUsageMap.get("val") != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,246,componetCount.setName(repoUsageMap.get("val").toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,248,String eventCount = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,249,if (repoUsageMap.get("eventCount") != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,250,eventCount = repoUsageMap.get("eventCount").toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,252,eventCount = eventCount.replace(".0", "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,253,eventCount = eventCount.replace(".00", "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,255,componetCount.setValue(eventCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,256,componetCountList.add(componetCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,263,logger.info("getting graph data");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,273,HashMap<String, String> sortedMap = new LinkedHashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,274,List<String> mapValues = new ArrayList<String>(passedMap.values());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,275,HashMap<String, String> invertedKeyValue = new HashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,276,Collections.sort(mapValues, new Comparator<String>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,278,public int compare(String s1, String s2) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,279,return s1.compareToIgnoreCase(s2);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,282,Iterator<Entry<String, String>> it = passedMap.entrySet().iterator();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,283,while (it.hasNext()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,285,Map.Entry pair = (Map.Entry) it.next();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,286,invertedKeyValue.put("" + pair.getValue(), "" + pair.getKey());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,289,for (String valueOfKey : mapValues) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,290,sortedMap.put(invertedKeyValue.get(valueOfKey), valueOfKey);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,293,return sortedMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,22,import javax.ws.rs.core.MediaType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,23,import javax.ws.rs.core.Response;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,26,import java.io.FileOutputStream;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,27,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,29,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,30,import java.util.Set;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,32,import org.apache.ambari.logsearch.common.MessageEnums;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,33,import org.apache.ambari.logsearch.view.VHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,34,import org.apache.ambari.logsearch.view.VSummary;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,49,String mainExportedFile = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,50,FileOutputStream fis = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,51,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,61,List<VHost> hosts = vsummary.getHosts();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,62,String blankCharacterForHost = String.format("%-8s", "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,63,int numberHost = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,64,for (VHost host : hosts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,65,numberHost += 1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,66,String h = host.getName();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,67,String c = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,68,Set<String> comp = host.getComponents();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,69,boolean zonetar = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,70,if (comp != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,71,for (String component : comp) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,72,if (zonetar) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,73,c = component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,74,zonetar = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,76,c = c + ", " + component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,80,if (numberHost > 9){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,81,blankCharacterForHost = String.format("%-7s", blankCharacterForHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,83,blankCharacterForHost = String.format("%-6s", blankCharacterForHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,85,blankCharacterForHost = String.format("%-5s", blankCharacterForHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,87,blankCharacterForHost = String.format("%-4s", blankCharacterForHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,89,blankCharacterForHost = String.format("%-3s", blankCharacterForHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,91,if (numberHost == 1) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,106,mainExportedFile = mainExportedFile + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,115,mainExportedFile = mainExportedFile + text + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,116,File file = File.createTempFile(fileName, vsummary.getFormat());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,117,fis = new FileOutputStream(file);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,118,fis.write(mainExportedFile.getBytes());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,119,return Response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,125,logger.error(e.getMessage());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,129,if (fis != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,130,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,131,fis.close();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,29,import org.apache.ambari.logsearch.view.VMessage;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,30,import org.apache.ambari.logsearch.view.VResponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,45,List<VMessage> messageList = new ArrayList<VMessage>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,22,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,23,import java.util.Locale;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,38,if (value == null || value.trim().length() == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,39,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,41,return fieldName + ":" + value.trim().toLowerCase(Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,51,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,53,String expr = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,55,for (int i : values) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,56,expr += i + " ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,58,if (values.length == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,59,return fieldName + ":" + expr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,61,return fieldName + ":(" + expr + ")";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,71,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,73,String expr = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,74,for (Long value : values) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,75,expr += value.toString() + " ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,78,if (values.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,79,return expr.trim();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,81,return "(" + expr.trim() + ")";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,94,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,98,wildCard = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,101,StringBuilder expr = new StringBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,102,int count = -1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,103,for (String value : valueList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,104,count++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,105,if (count > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,106,expr.append(" OR ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,109,expr.append( fieldName + ":"+ wildCard + value + wildCard);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,112,if (valueList.length == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,113,return expr.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,115,return "(" + expr + ")";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,128,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,132,wildCard = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,135,StringBuilder expr = new StringBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,136,int count = -1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,137,for (String value : valueList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,138,count++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,139,if (count > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,140,expr.append(" AND ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,143,expr.append( fieldName + ":"+ wildCard + value + wildCard);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,146,if (valueList.length == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,147,return expr.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,149,return "(" + expr + ")";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,162,int prev = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,166,int ic = (int)c;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,167,if( ic == 10 ) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,168,if( prev != 13) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,170,sb.append('\\');
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,171,sb.append((char)13);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,177,|| c == ')' || c == ':' || c == '^' || c == '[' || c == ']'
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,178,|| c == '\"' || c == '{' || c == '}' || c == '~' || c == '?'
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,179,|| c == '|' || c == '&' || c == ';' || c == '/'
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,180,|| Character.isWhitespace(c)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,190,if (search == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,191,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,202,newSearch = "\"" + newSearch + "\"";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,205,return newSearch;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,254,field = LogSearchConstants.SOLR_KEY_LOG_MESSAGE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,258,field = LogSearchConstants.SOLR_LOG_MESSAGE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,259,search = escapeForWhiteSpaceTokenizer(search);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,261,return field + ":" + search;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,22,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,24,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,27,public abstract class VList implements java.io.Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,28,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,33,protected int startIndex;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,37,protected int pageSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,41,protected long totalCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,45,protected int resultSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,49,protected String sortType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,53,protected String sortBy;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,55,protected long queryTimeMS = System.currentTimeMillis();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,60,public VList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,68,public VList(@SuppressWarnings("rawtypes") List objectList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,69,int size = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,70,if (objectList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,71,size = objectList.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,74,startIndex = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,75,pageSize = size;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,76,totalCount = size;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,77,resultSize = size;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,78,sortType = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,79,sortBy = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,82,abstract public int getListSize();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,84,abstract public List<?> getList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,93,public void setStartIndex(int startIndex) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,94,this.startIndex = startIndex;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,102,public int getStartIndex() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,103,return startIndex;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,113,public void setPageSize(int pageSize) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,114,this.pageSize = pageSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,122,public int getPageSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,123,return pageSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,133,public void setTotalCount(long totalCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,134,this.totalCount = totalCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,142,public long getTotalCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,143,return totalCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,153,public void setResultSize(int resultSize) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,154,this.resultSize = resultSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,162,public int getResultSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,163,return getListSize();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,173,public void setSortType(String sortType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,174,this.sortType = sortType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,182,public String getSortType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,183,return sortType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,193,public void setSortBy(String sortBy) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,194,this.sortBy = sortBy;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,202,public String getSortBy() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,203,return sortBy;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,217,public long getQueryTimeMS() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,218,return queryTimeMS;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,225,public void setQueryTimeMS(long queryTimeMS) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,226,this.queryTimeMS = queryTimeMS;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,235,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,236,return "VList [startIndex=" + startIndex + ", pageSize=" + pageSize
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,237,+ ", totalCount=" + totalCount + ", resultSize=" + resultSize
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,238,+ ","
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VList.java,240,+ "sortBy=" + sortBy + ", queryTimeMS=" + queryTimeMS + "]";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,19,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,21,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,23,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,24,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,25,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,27,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,29,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,35,public class VLogfeederFilterWrapper {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,37,private HashMap<String, VLogfeederFilter> filter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,38,private String id;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,40,public HashMap<String, VLogfeederFilter> getFilter() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,41,return filter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,44,public void setFilter(HashMap<String, VLogfeederFilter> filter) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,45,this.filter = filter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,48,public String getId() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,49,return id;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,52,public void setId(String id) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogfeederFilterWrapper.java,53,this.id = id;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,19,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,21,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,23,public class VSummary {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,25,protected List<VHost> hosts;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,26,protected String levels;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,27,protected String format;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,28,protected String numberLogs;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,29,protected String from;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,30,protected String to;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,31,protected String includeString;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,32,protected String excludeString;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,34,public VSummary(){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,35,includeString = "-";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,36,excludeString = "-";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,39,public String getIncludeString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,40,return includeString;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,43,public void setIncludeString(String includeString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,44,this.includeString = includeString;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,47,public String getExcludeString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,48,return excludeString;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,51,public void setExcludeString(String excludeString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,52,this.excludeString = excludeString;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,55,public String getFrom() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,56,return from;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,59,public void setFrom(String from) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,60,this.from = from;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,63,public String getTo() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,64,return to;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,67,public void setTo(String to) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,68,this.to = to;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,71,public List<VHost> getHosts() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,72,return hosts;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,75,public void setHosts(List<VHost> hosts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,76,this.hosts = hosts;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,79,public String getLevels() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,80,return levels;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,83,public void setLevels(String levels) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,84,this.levels = levels;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,87,public String getFormat() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,88,return format;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,91,public void setFormat(String format) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,92,this.format = format;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,95,public String getNumberLogs() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,96,return numberLogs;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,99,public void setNumberLogs(String numberLogs) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummary.java,100,this.numberLogs = numberLogs;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,19,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,21,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,22,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,24,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,25,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,26,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,36,public class VUserConfigList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,40,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,41,protected String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,42,protected Collection<VUserConfig> userConfigList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,44,public String getName() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,45,return name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,48,public void setName(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,49,this.name = name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,52,public Collection<VUserConfig> getUserConfigList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,53,return userConfigList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,56,public void setUserConfigList(Collection<VUserConfig> historyList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,57,this.userConfigList = historyList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,61,public int getListSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,62,return userConfigList.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,66,public List<VUserConfig> getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VUserConfigList.java,67,return (List<VUserConfig>) userConfigList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,32,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,37,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,167,.getPropertyStringList(ALLOWED_ROLE_PROP);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,169,List<String> values = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,35,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapAuthenticationProvider.java,32,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,30,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,77,public static final String COLUMN_QUERY = "columnQuery";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,23,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,61,connectToSolr(solrUrl, zkConnectString, collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,67,boolean needToPopulateSchemaField = !createAlias;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,74,setupAlias(aliasNameIn, collectionsIn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,40,logger.info("postConstructor() called.");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,55,connectToSolr(solrUrl, zkConnectString, collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,25,import java.util.HashSet;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,38,import org.apache.solr.client.solrj.SolrClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,40,import org.apache.solr.client.solrj.SolrRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,44,import org.apache.solr.client.solrj.impl.HttpClientUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,45,import org.apache.solr.client.solrj.impl.HttpSolrClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,46,import org.apache.solr.client.solrj.impl.Krb5HttpClientConfigurer;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,47,import org.apache.solr.client.solrj.request.CollectionAdminRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,48,import org.apache.solr.client.solrj.request.schema.SchemaRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,49,import org.apache.solr.client.solrj.response.CollectionAdminResponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,51,import org.apache.solr.client.solrj.response.UpdateResponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,52,import org.apache.solr.client.solrj.response.schema.SchemaResponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,53,import org.apache.solr.common.SolrException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,54,import org.apache.solr.common.SolrInputDocument;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,55,import org.apache.solr.common.cloud.Replica;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,56,import org.apache.solr.common.cloud.Slice;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,57,import org.apache.solr.common.cloud.ZkStateReader;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,67,private static final String ROUTER_FIELD = "_router_field_";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,95,private boolean populateFieldsThreadActive = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,109,this.collectionName = collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,113,logger.info("connectToSolr() " + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,118,setupSecurity();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,121,solrDetail = "zkConnectString=" + zkConnectString + ", collection=" + collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,123,solrClouldClient = new CloudSolrClient(zkConnectString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,124,solrClouldClient.setDefaultCollection(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,125,solrClient = solrClouldClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,126,int waitDurationMS = 3 * 60 * 1000;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,127,checkSolrStatus(waitDurationMS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,134,solrDetail = "collection=" + collection + ", url=" + url;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,135,String collectionURL = url + "/" + collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,136,logger.info("Connecting to  solr : " + collectionURL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,137,solrClient = new HttpSolrClient(collectionURL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,141,return solrClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,155,boolean status = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,156,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,157,long beginTimeMS = System.currentTimeMillis();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,158,long waitIntervalMS = 2000;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,159,int pingCount = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,160,while (true) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,161,pingCount++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,162,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,163,List<String> collectionList = getCollections();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,164,if (collectionList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,169,status = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,170,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,173,logger.error("Error while doing Solr check", ex);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,175,if (System.currentTimeMillis() - beginTimeMS > waitDurationMS) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,180,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,188,Thread.sleep(waitIntervalMS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,192,logger.error("Seems Solr is not up. solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,194,return status;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,201,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,208,Thread setupThread = new Thread("setup_alias_" + aliasNameIn) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,210,public void run() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,213,int retryCount = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,214,while (true) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,215,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,217,if (count > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,218,solrClouldClient.setDefaultCollection(aliasNameIn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,222,populateSchemaFields();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,223,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,230,logger.error("Error setting up alias=" + aliasNameIn, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,232,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,233,Thread.sleep(ALIAS_SETUP_RETRY_SECOND * 1000);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,237,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,239,retryCount++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,243,setupThread.setDaemon(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,263,String collectionsCSV = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,272,CollectionAdminRequest.CreateAlias aliasCreateRequest = new CollectionAdminRequest.CreateAlias();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,273,aliasCreateRequest.setAliasName(aliasNameIn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,274,aliasCreateRequest.setAliasedCollections(collectionsCSV);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,275,CollectionAdminResponse createResponse = aliasCreateRequest.process(solrClouldClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,276,if (createResponse.getStatus() != 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,281,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,292,return collectionToAdd.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,297,if (isZkConnectString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,303,Thread setupThread = new Thread("setup_collection_" + collectionName) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,305,public void run() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,309,int retryCount = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,310,while (true) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,311,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,312,Thread.sleep(SETUP_RETRY_SECOND * 1000);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,313,retryCount++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,319,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,324,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,334,setupThread.setDaemon(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,335,setupThread.start();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,339,populateSchemaFields();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,346,boolean result = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,347,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,348,List<String> allCollectionList = getCollections();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,361,return result;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,365,IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,366,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,367,CollectionAdminRequest.List colListReq = new CollectionAdminRequest.List();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,368,CollectionAdminResponse response = colListReq.process(solrClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,369,if (response.getStatus() != 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,372,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,378,return allCollectionList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,380,logger.error(e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,381,return new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,387,List<String> allCollectionList) throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,401,boolean returnValue = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,403,List<String> shardsList = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,404,for (int i = 0; i < numberOfShards; i++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,417,CollectionAdminRequest.Create collectionCreateRequest = new CollectionAdminRequest.Create();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,419,collectionCreateRequest.setRouterName("implicit");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,420,collectionCreateRequest.setShards(shardsListStr);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,422,collectionCreateRequest.setReplicationFactor(replicationFactor);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,423,collectionCreateRequest.setConfigName(configName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,424,collectionCreateRequest.setRouterField(ROUTER_FIELD);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,430,if (createResponse.getStatus() != 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,431,returnValue = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,444,Collection<String> existingShards = getShards();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,445,for (String shard : shardsList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,446,if (!existingShards.contains(shard)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,447,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,450,CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest.CreateShard();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,451,createShardRequest.setCollectionName(collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,452,createShardRequest.setShardName(shard);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,455,if (response.getStatus() != 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,460,returnValue = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,461,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,470,returnValue = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,471,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,476,return returnValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,480,Collection<String> list = new HashSet<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,482,if (solrClouldClient == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,483,logger.error("getShards(). Only supporting in SolrCloud mode");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,484,return list;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,487,ZkStateReader reader = solrClouldClient.getZkStateReader();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,494,for (Replica replica : slice.getReplicas()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,499,list.add(slice.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,502,return list;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,513,return true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,520,CollectionAdminRequest.Create collectionCreateRequest = new CollectionAdminRequest.Create();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,522,collectionCreateRequest.setNumShards(numberOfShards);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,523,collectionCreateRequest.setReplicationFactor(replicationFactor);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,524,collectionCreateRequest.setConfigName(configName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,529,if (createResponse.getStatus() != 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,533,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,538,return true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,544,if (solrClient != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,569,UpdateResponse updateResoponse = solrClient.add(doc);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,575,solrClient.commit();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,576,return updateResoponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,581,UpdateResponse updateResoponse = solrClient.deleteByQuery(query);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,582,solrClient.commit();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,588,return updateResoponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,591,private void setupSecurity() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,594,if (securityEnabled) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,595,System.setProperty("java.security.auth.login.config", jaasFile);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,596,HttpClientUtil.setConfigurer(new Krb5HttpClientConfigurer());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,597,logger.info("setupSecurity() called for kerberos configuration, jaas file: " + jaasFile);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,601,private void populateSchemaFields() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,604,populateFieldsThreadActive = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,610,public void run() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,613,int retryCount = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,614,while (true) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,615,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,616,Thread.sleep(SETUP_RETRY_SECOND * 1000);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,617,retryCount++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,618,boolean _result = _populateSchemaFields();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,619,if (_result) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,627,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,642,fieldPopulationThread.setDaemon(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,643,fieldPopulationThread.start();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,650,private boolean _populateSchemaFields() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,651,SolrRequest<SchemaResponse> request = new SchemaRequest();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,652,request.setMethod(METHOD.GET);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,655,if (solrClient != null && !collectionName.equals(historyCollection)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,656,NamedList<Object> namedList = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,657,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,658,namedList = solrClient.request(request);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,667,if (namedList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,670,return true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,673,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,73,connectToSolr(solrUrl, zkConnectString, collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,90,logger.error("not able to save logfeeder filter while initialization", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,206,logger.error("Unable to read HadoopServiceConfig.json", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,39,import org.apache.ambari.logsearch.web.security.LogsearchFileAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,26,import java.util.regex.Pattern;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,67,String advQueryParameters[] = advQuery.split(Pattern.quote("}{"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,68,SolrQuery advSolrQuery = new SolrQuery();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,69,for (String queryParam : advQueryParameters) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,70,String params[] = queryParam.split(Pattern.quote("="));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,72,advSolrQuery.setParam(params[0], params[1]);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,93,setPagination(advSolrQuery, searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,95,return advSolrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,220,queryString = columnQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,234,if (columnQueryList != null && columnQueryList.size() > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,235,queryList.addAll(columnQueryList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,244,String originalKey = getOriginalKey(key, logType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,247,orQuery = putWildCardByType(value, originalKey, logType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,254,if (tempCondition.contains(originalKey)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,261,conditionQuries.removeAll(conditionQuries);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,264,conditionQuries.add(orQuery.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,265,referalConditionQuries.add(orQuery.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,393,if (propertyFieldMappings != null && propertyFieldMappings.length > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,419,String originalKey;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,420,switch (logType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,421,case AUDIT:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,424,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,425,case SERVICE:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,428,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,429,default:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,430,originalKey = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,435,return key;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,437,return originalKey;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,434,Gson gson = new Gson();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,435,String[] arr = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,436,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,437,arr = gson.fromJson(jsonArrStr, String[].class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,439,logger.error("Invaild json array:" + jsonArrStr);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,440,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,442,String query;;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,443,switch (condition) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,444,case OR:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,446,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,447,case AND:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,449,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,450,default:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,451,query=null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,452,logger.error("Invalid condition :" + condition.name());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,455,solrQuery.addFilterQuery(query);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,19,package org.apache.ambari.logsearch.web.listeners;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,21,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,22,import org.springframework.context.ApplicationListener;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,23,import org.springframework.security.authentication.event.AbstractAuthenticationEvent;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,25,public class SpringEventListener implements ApplicationListener<AbstractAuthenticationEvent> {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,26,private static final Logger logger = Logger.getLogger(SpringEventListener.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,29,public void onApplicationEvent(AbstractAuthenticationEvent event) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/listeners/SpringEventListener.java,30,logger.trace(" Inside onApplicationEvent  SpringEventListener");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,29,import org.apache.ambari.logsearch.solr.metrics.SolrMetricsLoader;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,77,SolrMetricsLoader.startSolrMetricsLoaderTasks();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,155,logger.error("Web Resource Folder " + WEB_RESOURCE_FOLDER+ " not found in classpath", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,159,logger.error("Web Resource Folder " + WEB_RESOURCE_FOLDER+ " not found in classpath");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,162,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,69,if (fileAuthenticationProvider.isEnable()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,194,public String encryptPassword(String username, String password) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,197,return saltEncodedpasswd;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,42,public SolrQuery commonServiceFilterQuery(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,45,String treeParams = (String) searchCriteria.getParamValue("treeParams");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,46,String givenQuery = (String) searchCriteria.getParamValue("q");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,47,String level = (String) searchCriteria.getParamValue("level");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,48,String startTime = (String) searchCriteria.getParamValue("from");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,49,String endTime = (String) searchCriteria.getParamValue("to");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,50,String iMessage = (String) searchCriteria.getParamValue("iMessage");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,51,String eMessage = (String) searchCriteria.getParamValue("eMessage");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,53,String selectedComp = (String) searchCriteria.getParamValue("selectComp");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,60,String urlHostName = (String) searchCriteria.getParamValue("host_name");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,63,String file_name = (String) searchCriteria.getParamValue("file_name");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,64,String advQuery = (String) searchCriteria.getParamValue("advanceSearch");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,293,public SolrQuery commonAuditFilterQuery(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,297,String startTime = (String) searchCriteria.getParamValue("startTime");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,298,String endTime = (String) searchCriteria.getParamValue("endTime");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,19,package org.apache.ambari.logsearch.solr.metrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,21,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,22,import java.lang.management.MemoryMXBean;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,23,import java.net.MalformedURLException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,24,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,25,import java.util.Map;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,26,import java.util.Set;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,28,import javax.management.JMX;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,29,import javax.management.MBeanServerConnection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,30,import javax.management.MalformedObjectNameException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,31,import javax.management.ObjectName;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,32,import javax.management.remote.JMXConnector;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,33,import javax.management.remote.JMXConnectorFactory;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,34,import javax.management.remote.JMXServiceURL;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,36,import com.sun.management.OperatingSystemMXBean;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,38,import org.slf4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,39,import org.slf4j.LoggerFactory;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,42,public class SolrJmxAdapter {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,43,private static final Logger LOG = LoggerFactory.getLogger(SolrJmxAdapter.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,45,private static final String JMX_SERVICE_URL = "service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,47,private final JMXServiceURL jmxServiceUrl;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,49,private JMXConnector jmxConnector;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,50,private MBeanServerConnection conn;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,52,public SolrJmxAdapter(String host, int port) throws MalformedURLException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,53,String url = String.format(JMX_SERVICE_URL, host, port);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,54,jmxServiceUrl = new JMXServiceURL(url);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,57,public double getProcessCpuLoad() throws MalformedObjectNameException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,58,ObjectName objectName = new ObjectName("java.lang:type=OperatingSystem");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,59,OperatingSystemMXBean mxBean = JMX.newMXBeanProxy(conn, objectName, OperatingSystemMXBean.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,60,return mxBean.getProcessCpuLoad();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,63,public Map<String, Long> getMemoryData() throws MalformedObjectNameException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,64,Map<String, Long> memoryData = new HashMap<>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,66,ObjectName objectName = new ObjectName("java.lang:type=Memory");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,67,MemoryMXBean mxBean = JMX.newMXBeanProxy(conn, objectName, MemoryMXBean.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,69,memoryData.put("heapMemoryUsed", mxBean.getHeapMemoryUsage().getUsed());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,70,memoryData.put("heapMemoryCommitted", mxBean.getHeapMemoryUsage().getCommitted());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,71,memoryData.put("heapMemoryMax", mxBean.getHeapMemoryUsage().getMax());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,72,memoryData.put("nonHeapMemoryUsed", mxBean.getNonHeapMemoryUsage().getUsed());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,73,memoryData.put("nonHeapMemoryCommitted", mxBean.getNonHeapMemoryUsage().getCommitted());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,74,memoryData.put("nonHeapMemoryMax", mxBean.getNonHeapMemoryUsage().getMax());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,76,return memoryData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,79,public long getIndexSize() throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,80,long indexSize = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,82,ObjectName objectNamePattern = new ObjectName(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,84,Set<ObjectName> objectNames = conn.queryNames(objectNamePattern, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,85,for (ObjectName objectName : objectNames) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,86,String indexSizeString = (String) conn.getAttribute(objectName, "indexSize");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,87,indexSize += getIndexSizeInBytes(indexSizeString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,90,return indexSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,93,private long getIndexSizeInBytes(String indexSizeString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,94,String[] tokens = indexSizeString.split(" ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,95,double number = Double.parseDouble(tokens[0]);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,97,long multiplier = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,98,switch (tokens[1]) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,99,case "bytes":
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,100,multiplier = 1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,101,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,102,case "KB":
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,103,multiplier = 1024;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,104,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,105,case "MB":
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,106,multiplier = 1024 * 1024;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,107,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,108,case "GB":
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,109,multiplier = 1024 * 1024 * 1024;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,110,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,111,default:
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,112,throw new IllegalArgumentException("Unknown unit: " + tokens[1]);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,115,return (long)(number * multiplier);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,118,public void reConnect() throws IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,119,if (jmxConnector != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,120,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,121,jmxConnector.close();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,123,LOG.info("Could not close jmxConnector", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,127,connect();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,130,public void connect() throws IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,131,jmxConnector = JMXConnectorFactory.connect(jmxServiceUrl);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrJmxAdapter.java,132,conn = jmxConnector.getMBeanServerConnection();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,19,package org.apache.ambari.logsearch.solr.metrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,21,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,22,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,23,import java.util.Map;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,24,import java.util.Timer;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,25,import java.util.TimerTask;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,26,import java.util.TreeMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,28,import javax.management.MalformedObjectNameException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,30,import org.apache.ambari.logsearch.solr.AmbariSolrCloudClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,31,import org.apache.ambari.logsearch.solr.AmbariSolrCloudClientBuilder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,33,import org.apache.commons.lang.StringUtils;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,34,import org.apache.hadoop.metrics2.sink.timeline.TimelineMetric;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,35,import org.apache.hadoop.metrics2.sink.timeline.TimelineMetrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,36,import org.slf4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,37,import org.slf4j.LoggerFactory;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,39,public class SolrMetricsLoader extends TimerTask {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,40,private static final Logger LOG = LoggerFactory.getLogger(SolrMetricsLoader.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,42,private static final int RETRY = 3;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,43,private static final int MAX_METRIC_SIZE= 1000;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,45,private final String solrHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,46,private final SolrJmxAdapter solrJmxAdapter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,47,private final SolrAmsClient solrAmsClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,49,private final TimelineMetrics metrics = new TimelineMetrics();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,51,public SolrMetricsLoader(String solrHost, int solrJmxPort, String collectorHost) throws IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,52,this.solrHost = solrHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,53,this.solrJmxAdapter = new SolrJmxAdapter(solrHost, solrJmxPort);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,54,this.solrAmsClient = new SolrAmsClient(collectorHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,56,solrJmxAdapter.connect();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,60,public void run() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,61,LOG.info("Loading Solr Metrics for the host " + solrHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,63,addCpuUsageMetric();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,64,addHeapMemoryUsageMetric();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,65,addIndexSizeMetric();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,67,emitMetrics();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,68,removeOverTheLimitMetrics();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,71,private void addCpuUsageMetric() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,72,Exception lastException = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,73,for (int retries = 0; retries < RETRY; retries++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,74,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,75,double processCpuLoad = solrJmxAdapter.getProcessCpuLoad();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,76,addMetric("logsearch.solr.cpu.usage", "Float", processCpuLoad);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,77,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,79,lastException = e;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,80,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,81,solrJmxAdapter.reConnect();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,87,LOG.info("Could not load solr cpu usage metric, last exception:", lastException);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,90,private void addHeapMemoryUsageMetric() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,91,Exception lastException = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,92,for (int retries = 0; retries < RETRY; retries++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,93,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,94,Map<String, Long> memoryData = solrJmxAdapter.getMemoryData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,95,addMetric("jvm.JvmMetrics.MemHeapUsedM", "Long", memoryData.get("heapMemoryUsed").doubleValue() / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,96,addMetric("jvm.JvmMetrics.MemHeapCommittedM", "Long", memoryData.get("heapMemoryCommitted").doubleValue() / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,97,addMetric("jvm.JvmMetrics.MemHeapMaxM", "Long", memoryData.get("heapMemoryMax").doubleValue() / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,98,addMetric("jvm.JvmMetrics.MemNonHeapUsedM", "Long", memoryData.get("nonHeapMemoryUsed").doubleValue() / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,99,addMetric("jvm.JvmMetrics.MemNonHeapCommittedM", "Long", memoryData.get("nonHeapMemoryCommitted").doubleValue() / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,100,addMetric("jvm.JvmMetrics.MemNonHeapMaxM", "Long", memoryData.get("nonHeapMemoryMax").doubleValue() / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,101,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,103,lastException = e;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,104,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,105,solrJmxAdapter.reConnect();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,111,LOG.info("Could not load solr heap memory usage metric, last exception:", lastException);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,114,private void addIndexSizeMetric() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,115,Exception lastException = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,116,for (int retries = 0; retries < RETRY; retries++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,117,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,118,double indexSize = solrJmxAdapter.getIndexSize();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,119,addMetric("logsearch.solr.index.size", "Long", indexSize / 1024 / 1024 / 1024);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,120,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,122,lastException = e;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,123,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,124,solrJmxAdapter.reConnect();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,130,LOG.info("Could not load solr index size metric, last exception:", lastException);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,133,private void addMetric(String metricName, String type, Double value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,134,Long currMS = System.currentTimeMillis();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,136,TimelineMetric metric = new TimelineMetric();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,137,metric.setMetricName(metricName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,138,metric.setHostName(solrHost);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,139,metric.setAppId("infra-solr");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,140,metric.setStartTime(currMS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,141,metric.setType(type);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,142,metric.setTimestamp(currMS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,143,metric.getMetricValues().put(currMS, value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,145,metrics.addOrMergeTimelineMetric(metric);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,148,private void emitMetrics() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,149,Exception lastException = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,150,for (int retries = 0; retries < RETRY; retries++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,151,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,152,if (solrAmsClient.emitMetrics(metrics)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,153,metrics.getMetrics().clear();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,154,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,157,lastException = e;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,161,LOG.info("Could not emit metrics, last exception:", lastException);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,164,private void removeOverTheLimitMetrics() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,165,for (TimelineMetric metric : metrics.getMetrics()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,166,TreeMap<Long, Double> metricValues = metric.getMetricValues();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,167,while (metricValues.size() > MAX_METRIC_SIZE) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,168,metricValues.remove(metricValues.firstKey());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,173,public static void startSolrMetricsLoaderTasks() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,174,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,176,if (StringUtils.isEmpty(collectorHosts)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,177,LOG.warn("No Ambari Metrics service is available, no Solr metrics will be loaded!");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,178,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,186,.build();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,188,Collection<String> solrHosts = ambariSolrCloudClient.getSolrHosts();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,189,for (String solrHost : solrHosts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,190,SolrMetricsLoader sml = new SolrMetricsLoader(solrHost, solrJmxPort, collectorHosts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,191,Timer timer = new Timer("Solr Metrics Loader - " + solrHost, true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,192,timer.scheduleAtFixedRate(sml, 0, 10000);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,195,LOG.warn("Could not start solr metric loader tasks", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchLogoutSuccessHandler.java,39,response.sendRedirect("/login.html");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,33,class LogsearchAuthenticationEntryPoint extends LoginUrlAuthenticationEntryPoint {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,73,public boolean isEnable() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,75,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,30,import org.springframework.security.core.userdetails.UserDetailsService;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,43,UserDao userDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,46,LogsearchLdapAuthenticationProvider ldapAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,49,LogsearchFileAuthenticationProvider fileAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,52,LogsearchSimpleAuthenticationProvider simpleAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,55,LogsearchExternalServerAuthenticationProvider externalServerAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,24,import javax.annotation.PostConstruct;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,127,if (!this.isEnable()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,192,public boolean isEnable() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,193,return isEnable(AUTH_METHOD.EXTERNAL_AUTH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,53,if (!this.isEnable()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,90,public boolean isEnable() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,91,return isEnable(AUTH_METHOD.FILE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapAuthenticationProvider.java,47,if (this.isEnable()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapAuthenticationProvider.java,57,if (!this.isEnable()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapAuthenticationProvider.java,101,LdapAuthenticationProvider loadLdapAuthenticationProvider() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapAuthenticationProvider.java,177,public boolean isEnable() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapAuthenticationProvider.java,178,return isEnable(AUTH_METHOD.LDAP);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,44,DirContextOperations user = super.authenticate(authentication);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,46,return setAmbariAdminAttr(user);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,56,private DirContextOperations setAmbariAdminAttr(DirContextOperations user) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,57,String baseDn = ldapServerProperties.getBaseDN().toLowerCase();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,58,String groupBase = ldapServerProperties.getGroupBase().toLowerCase();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,59,String groupObjectClass = ldapServerProperties.getGroupObjectClass();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,60,String groupMembershipAttr = ldapServerProperties
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,61,.getGroupMembershipAttr();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,62,String adminGroupMappingRules = ldapServerProperties
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,63,.getAdminGroupMappingRules();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,64,final String groupNamingAttribute = ldapServerProperties
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,65,.getGroupNamingAttr();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,66,String groupSearchFilter = ldapServerProperties.getGroupSearchFilter();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,69,int indexOfBaseDn = groupBase.indexOf(baseDn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,70,groupBase = indexOfBaseDn <= 0 ? "" : groupBase.substring(0,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,71,indexOfBaseDn - 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,73,StringBuilder filterBuilder = new StringBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,75,filterBuilder.append("(&(");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,76,filterBuilder.append(groupMembershipAttr);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,77,filterBuilder.append("=");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,78,filterBuilder.append(user.getNameInNamespace());// DN
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,80,if ((groupSearchFilter == null) || groupSearchFilter.equals("")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,84,filterBuilder.append(")(objectclass=");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,85,filterBuilder.append(groupObjectClass);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,86,filterBuilder.append(")(|");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,87,String[] adminGroupMappingRegexs = adminGroupMappingRules
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,88,.split(",");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,89,for (String adminGroupMappingRegex : adminGroupMappingRegexs) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,90,filterBuilder.append("(");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,91,filterBuilder.append(groupNamingAttribute);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,92,filterBuilder.append("=");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,93,filterBuilder.append(adminGroupMappingRegex);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,94,filterBuilder.append(")");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,96,filterBuilder.append(")");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,98,filterBuilder.append(")");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,99,filterBuilder.append(groupSearchFilter);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,101,filterBuilder.append(")");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,103,logger.info("filter=" + filterBuilder);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchLdapBindAuthenticator.java,105,return user;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,42,if (!this.isEnable()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,73,public boolean isEnable() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,74,return this.isEnable(AUTH_METHOD.SIMPLE);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,23,import java.io.BufferedReader;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,25,import java.io.FileInputStream;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,26,import java.io.IOException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,27,import java.io.InputStreamReader;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,30,import java.util.Collection;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,45,import org.apache.ambari.logfeeder.logconfig.LogfeederScheduler;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,55,private static final Logger logger = Logger.getLogger(LogFeeder.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,59,private Collection<Output> outputList = new ArrayList<Output>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,61,private OutputMgr outMgr = new OutputMgr();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,62,private InputMgr inputMgr = new InputMgr();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,63,private MetricsMgr metricsMgr = new MetricsMgr();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,65,public static Map<String, Object> globalMap = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,66,private String[] inputParams;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,68,private List<Map<String, Object>> globalConfigList = new ArrayList<Map<String, Object>>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,69,private List<Map<String, Object>> inputConfigList = new ArrayList<Map<String, Object>>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,70,private List<Map<String, Object>> filterConfigList = new ArrayList<Map<String, Object>>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,71,private List<Map<String, Object>> outputConfigList = new ArrayList<Map<String, Object>>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,73,private int checkPointCleanIntervalMS = 24 * 60 * 60 * 60 * 1000; // 24 hours
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,76,private static boolean isLogfeederCompleted = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,80,private LogFeeder(String[] args) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,81,inputParams = args;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,86,LogFeederUtil.loadProperties("logfeeder.properties", inputParams);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,88,String configFiles = LogFeederUtil.getStringProperty("logfeeder.config.files");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,89,logger.info("logfeeder.config.files=" + configFiles);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,91,String[] configFileList = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,92,if (configFiles != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,93,configFileList = configFiles.split(",");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,96,String[] cmdLineConfigs = getConfigFromCmdLine();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,98,String mergedConfigList[] = LogFeederUtil.mergeArray(configFileList,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,99,cmdLineConfigs);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,101,if (mergedConfigList == null || mergedConfigList.length == 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,102,mergedConfigList = LogFeederUtil.getStringProperty("config.file",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,105,for (String configFileName : mergedConfigList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,106,logger.info("Going to load config file:" + configFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,108,configFileName= configFileName.replace("\\ ", "%20");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,111,logger.info("Config file exists in path."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,112,+ configFile.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,116,logger.info("Trying to load config file from classloader: "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,117,+ configFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,119,logger.info("Loaded config file from classloader: "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,120,+ configFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,124,addSimulatedInputs();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,126,mergeAllConfigs();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,128,LogfeederScheduler.INSTANCE.start();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,130,outMgr.setOutputList(outputList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,131,for (Output output : outputList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,132,output.init();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,134,inputMgr.init();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,135,metricsMgr.init();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,136,logger.debug("==============");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,139,private void loadConfigsUsingClassLoader(String configFileName) throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,140,BufferedInputStream fileInputStream = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,141,BufferedReader br = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,142,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,143,fileInputStream = (BufferedInputStream) this
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,145,.getResourceAsStream(configFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,146,if (fileInputStream != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,147,br = new BufferedReader(new InputStreamReader(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,148,fileInputStream));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,149,String configData = readFile(br);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,150,loadConfigs(configData);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,152,throw new Exception("Can't find configFile=" + configFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,155,if (br != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,156,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,157,br.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,162,if (fileInputStream != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,163,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,164,fileInputStream.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,175,FileInputStream fileInputStream = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,177,fileInputStream = new FileInputStream(configFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,178,BufferedReader br = new BufferedReader(new InputStreamReader(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,179,fileInputStream));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,180,String configData = readFile(br);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,183,logger.error("Error opening config file. configFilePath="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,184,+ configFile.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,187,if (fileInputStream != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,188,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,189,fileInputStream.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,199,Type type = new TypeToken<Map<String, Object>>() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,201,Map<String, Object> configMap = LogFeederUtil.getGson().fromJson(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,202,configData, type);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,206,if (key.equalsIgnoreCase("global")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,207,globalConfigList.add((Map<String, Object>) configMap.get(key));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,209,List<Map<String, Object>> mapList = (List<Map<String, Object>>) configMap
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,210,.get(key);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,211,inputConfigList.addAll(mapList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,213,List<Map<String, Object>> mapList = (List<Map<String, Object>>) configMap
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,214,.get(key);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,215,filterConfigList.addAll(mapList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,217,List<Map<String, Object>> mapList = (List<Map<String, Object>>) configMap
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,218,.get(key);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,219,outputConfigList.addAll(mapList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,241,globalMap = mergeConfigs(globalConfigList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,243,sortBlocks(filterConfigList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,249,mergeBlocks(globalMap, map);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,252,Output output;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,253,if (value == null || value.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,254,logger.error("Output block doesn't have destination element");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,255,continue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,257,String classFullName = AliasUtil.getInstance().readAlias(value, ALIAS_TYPE.OUTPUT, ALIAS_PARAM.KLASS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,258,if (classFullName == null || classFullName.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,259,logger.error("Destination block doesn't have output element");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,262,output = (Output) LogFeederUtil.getClassInstance(classFullName, ALIAS_TYPE.OUTPUT);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,265,logger.error("Destination Object is null");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,274,boolean isEnabled = output.getBooleanValue("is_enabled", true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,275,if (isEnabled) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,276,outputList.add(output);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,279,logger.info("Output is disabled. So ignoring it. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,280,+ output.getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,289,mergeBlocks(globalMap, map);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,292,Input input;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,293,if (value == null || value.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,294,logger.error("Input block doesn't have source element");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,295,continue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,297,String classFullName = AliasUtil.getInstance().readAlias(value, ALIAS_TYPE.INPUT, ALIAS_PARAM.KLASS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,298,if (classFullName == null || classFullName.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,299,logger.error("Source block doesn't have source element");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,302,input = (Input) LogFeederUtil.getClassInstance(classFullName, ALIAS_TYPE.INPUT);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,305,logger.error("Source Object is null");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,313,input.setOutputMgr(outMgr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,314,input.setInputMgr(inputMgr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,315,inputMgr.add(input);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,318,logger.info("Input is disabled. So ignoring it. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,319,+ input.getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,326,for (Input input : inputMgr.getInputList()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,327,Filter prevFilter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,332,mergeBlocks(globalMap, map);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,335,Filter filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,336,if (value == null || value.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,337,logger.error("Filter block doesn't have filter element");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,338,continue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,341,String classFullName = AliasUtil.getInstance().readAlias(value, ALIAS_TYPE.FILTER, ALIAS_PARAM.KLASS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,342,if (classFullName == null || classFullName.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,343,logger.error("Filter block doesn't have filter element");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,346,filter = (Filter) LogFeederUtil.getClassInstance(classFullName, ALIAS_TYPE.FILTER);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,349,logger.error("Filter Object is null");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,356,filter.setOutputMgr(outMgr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,357,if (prevFilter == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,358,input.setFirstFilter(filter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,360,prevFilter.setNextFilter(filter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,362,prevFilter = filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,365,logger.debug("Ignoring filter "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,366,+ filter.getShortDescription() + " for input "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,367,+ input.getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,376,Set<Output> usedOutputSet = new HashSet<Output>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,377,for (Input input : inputMgr.getInputList()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,378,for (Output output : outputList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,379,boolean ret = LogFeederUtil.isEnabled(output.getConfigs(),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,380,input.getConfigs());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,381,if (ret) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,382,usedOutputSet.add(output);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,383,input.addOutput(output);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,387,outputList = usedOutputSet;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,390,logger.warn("There are no filters, we will ignore this input. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,391,+ toRemoveInput.getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,392,inputMgr.removeInput(toRemoveInput);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,396,private void sortBlocks(List<Map<String, Object>> blockList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,398,Collections.sort(blockList, new Comparator<Map<String, Object>>() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,404,if (o1Sort == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,405,return 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,407,if (o2Sort == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,410,int o1Value = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,411,if (!(o1Sort instanceof Number)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,412,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,413,o1Value = (new Double(Double.parseDouble(o1Sort
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,414,.toString()))).intValue();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,416,logger.error("Value is not of type Number. class="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,417,+ o1Sort.getClass().getName() + ", value="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,418,+ o1Sort.toString() + ", map=" + o1.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,421,o1Value = ((Number) o1Sort).intValue();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,423,int o2Value = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,424,if (!(o2Sort instanceof Integer)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,426,o2Value = (new Double(Double.parseDouble(o2Sort
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,427,.toString()))).intValue();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,429,logger.error("Value is not of type Number. class="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,430,+ o2Sort.getClass().getName() + ", value="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,431,+ o2Sort.toString() + ", map=" + o2.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,436,return o1Value - o2Value;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,441,private Map<String, Object> mergeConfigs(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,442,List<Map<String, Object>> configList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,443,Map<String, Object> mergedConfig = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,444,for (Map<String, Object> config : configList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,445,mergeBlocks(config, mergedConfig);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,447,return mergedConfig;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,450,private void mergeBlocks(Map<String, Object> fromMap,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,451,Map<String, Object> toMap) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,460,Map<String, Object> globalFields = LogFeederUtil
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,461,.cloneObject((Map<String, Object>) fromMap.get(key));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,464,Map<String, Object> localFields = (Map<String, Object>) toMap
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,465,.get(key);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,474,localFields.put(fieldKey,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,475,globalFields.get(fieldKey));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,491,inputMgr.monitor();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,493,ShutdownHookManager.get().addShutdownHook(logfeederJVMHook,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,494,LOGFEEDER_SHUTDOWN_HOOK_PRIORITY);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,509,logger.error(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,511,t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,514,if (System.currentTimeMillis() > (lastCheckPointCleanedMS + checkPointCleanIntervalMS)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,516,inputMgr.cleanCheckPointFiles();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,533,inputMgr.logStats();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,534,outMgr.logStats();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,536,if (metricsMgr.isMetricsEnabled()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,537,List<MetricCount> metricsList = new ArrayList<MetricCount>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,538,inputMgr.addMetricsContainers(metricsList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,539,outMgr.addMetricsContainers(metricsList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,540,metricsMgr.useMetrics(metricsList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,544,private String readFile(BufferedReader br) throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,545,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,546,StringBuilder sb = new StringBuilder();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,547,String line = br.readLine();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,548,while (line != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,549,sb.append(line);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,550,line = br.readLine();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,552,return sb.toString();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,554,logger.error("Error loading properties file.", t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,555,throw t;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,559,public Collection<Output> getOutputList() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,560,return outputList;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,563,public OutputMgr getOutMgr() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,564,return outMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,567,public static void main(String[] args) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,568,LogFeeder logFeeder = new LogFeeder(args);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,569,logFeeder.run();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,572,public void run() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,573,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,574,Date startTime = new Date();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,575,this.init();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,576,Date endTime = new Date();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,578,+ " ms to initialize");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,579,this.monitor();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,581,this.waitOnAllDaemonThreads();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,583,logger.fatal("Caught exception in main.", t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,584,System.exit(1);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,588,private class JVMShutdownHook extends Thread {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,590,public void run() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,591,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,592,logger.info("Processing is shutting down.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,594,inputMgr.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,595,outMgr.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,596,inputMgr.checkInAll();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,598,logStats();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,600,logger.info("LogSearch is exiting.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,608,String foreground = LogFeederUtil.getStringProperty("foreground");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,609,if (foreground != null && foreground.equalsIgnoreCase("true")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,610,inputMgr.waitOnAllInputs();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,622,private String[] getConfigFromCmdLine() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,623,String inputConfigDir = LogFeederUtil.getStringProperty("input_config_dir");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,624,if (inputConfigDir != null && !inputConfigDir.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,625,String[] searchFileWithExtensions = new String[] { "json" };
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,626,File configDirFile = new File(inputConfigDir);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,627,List<File> configFiles = FileUtil.getAllFileFromDir(configDirFile,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,628,searchFileWithExtensions, false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,629,if (configFiles != null && configFiles.size() > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,630,String configPaths[] = new String[configFiles.size()];
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,631,for (int index = 0; index < configFiles.size(); index++) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,632,File configFile = configFiles.get(index);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,633,String configFilePath = configFile.getAbsolutePath();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,634,configPaths[index] = configFilePath;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,636,return configPaths;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,639,return new String[0];
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederConstants.java,19,package org.apache.ambari.logfeeder.logconfig;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,42,private static final Logger logger = Logger.getLogger(Filter.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,46,private OutputMgr outputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,77,Mapper mapper = getMapper(mapClassCode);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,81,if (mapper.init(getInput().getShortDescription(),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,82,fieldName, mapClassCode,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,83,mapObject.get(mapClassCode))) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,84,List<Mapper> fieldMapList = postFieldValueMappers
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,85,.get(fieldName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,97,private Mapper getMapper(String mapClassCode) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,98,String classFullName = AliasUtil.getInstance().readAlias(mapClassCode, ALIAS_TYPE.MAPPER, ALIAS_PARAM.KLASS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,99,if (classFullName != null && !classFullName.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,100,Mapper mapper = (Mapper) LogFeederUtil.getClassInstance(classFullName, ALIAS_TYPE.MAPPER);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,101,return mapper;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,103,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,106,public void setOutputMgr(OutputMgr outputMgr) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,107,this.outputMgr = outputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,134,outputMgr.write(inputStr, inputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,139,if (postFieldValueMappers.size() > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,140,for (String fieldName : postFieldValueMappers.keySet()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,141,Object value = jsonObj.get(fieldName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,142,if (value != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,143,for (Mapper mapper : postFieldValueMappers.get(fieldName)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,144,value = mapper.apply(jsonObj, value);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,152,outputMgr.write(jsonObj, inputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,196,logger.log(level, "input=" + input.getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,201,public void addMetricsContainers(List<MetricCount> metricsList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,48,static private Logger logger = Logger.getLogger(FilterGrok.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,71,private MetricCount grokErrorMetric = new MetricCount();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,78,grokErrorMetric.metricsName = "filter.error.grok";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,85,logger.info("init() done. grokPattern=" + messagePattern
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,86,+ ", multilinePattern=" + multilinePattern + ", "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,87,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,89,logger.error("message_pattern is not set for filter.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,105,logger.fatal(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,107,+ multilinePattern + ", messagePattern="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,126,String grokRegEx = "%\\{" + "(?<name>" + "(?<pattern>[A-z0-9]+)"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,127,+ "(?::(?<subname>[A-z0-9_:]+))?" + ")" + "(?:=(?<definition>"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,128,+ "(?:" + "(?:[^{}]+|\\.+)+" + ")+" + ")" + ")?" + "\\}";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,142,logger.info("Loading pattern file " + GROK_PATTERN_FILE);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,144,BufferedInputStream fileInputStream = (BufferedInputStream) this
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,146,.getResourceAsStream(GROK_PATTERN_FILE);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,148,logger.fatal("Couldn't load grok-patterns file "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,149,+ GROK_PATTERN_FILE + ". Things will not work");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,154,logger.fatal("Error reading grok-patterns file " + GROK_PATTERN_FILE
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,155,+ " from classpath. Grok filtering will not work.", t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,161,logger.fatal(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,163,+ GROK_PATTERN_FILE, e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,180,Map<String, Object> jsonObj = Collections
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,181,.synchronizedMap(new HashMap<String, Object>());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,195,strBuff.append('\r');
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,196,strBuff.append('\n');
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,202,Map<String, Object> jsonObj = Collections
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,203,.synchronizedMap(new HashMap<String, Object>());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,224,private void applyMessage(String inputStr, Map<String, Object> jsonObj,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,225,String multilineJsonStr) throws LogfeederException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,226,String jsonStr = grokParse(inputStr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,242,Map<String, String> jsonSrc = LogFeederUtil.getGson().fromJson(jsonStr,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,243,jsonType);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,263,statMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,266,public String grokParse(String inputStr) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,267,String jsonStr = grokMessage.capture(inputStr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,268,return jsonStr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,272,grokErrorMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,274,+ "_PARSEERROR";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,276,LogFeederUtil.logErrorMessageByInterval(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,277,LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,280,+ ". First upto 100 characters="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,281,+ LogFeederUtil.subString(inputStr, 100), null, logger,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,282,Level.WARN);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,288,Map<String, Object> jsonObj = Collections
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,289,.synchronizedMap(new HashMap<String, Object>());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,293,logger.error(e.getLocalizedMessage(), e.getCause());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,307,public void addMetricsContainers(List<MetricCount> metricsList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterJSON.java,30,private static final Logger logger  = Logger.getLogger(FilterJSON.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterJSON.java,38,logger.error(e.getLocalizedMessage());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterJSON.java,48,String logtime = LogFeederUtil.getDate(timeStampStr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,35,private static final Logger logger = Logger.getLogger(FilterKeyValue.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,41,private MetricCount errorMetric = new MetricCount();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,46,errorMetric.metricsName = "filter.error.keyvalue";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,52,logger.info("init() done. source_field=" + sourceField
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,53,+ ", value_split=" + valueSplit + ", " + ", field_split="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,54,+ fieldSplit + ", " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,56,logger.fatal("source_field is not set for filter. This filter will not be applied");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,74,StringTokenizer fieldTokenizer = new StringTokenizer(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,75,valueObj.toString(), fieldSplit);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,78,StringTokenizer nvTokenizer = new StringTokenizer(nv,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,79,valueSplit);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,86,logParseError("name=" + name + ", pair=" + nv
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,87,+ ", field=" + sourceField + ", field_value="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,88,+ valueObj);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,94,statMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,98,errorMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,100,+ "_PARSEERROR";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,101,LogFeederUtil
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,102,.logErrorMessageByInterval(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,103,LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,106,+ ". First upto 100 characters="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,107,+ LogFeederUtil.subString(inputStr, 100), null, logger,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,117,public void addMetricsContainers(List<MetricCount> metricsList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,24,import java.util.Date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,39,static private Logger logger = Logger.getLogger(Input.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,41,protected OutputMgr outputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,42,protected InputMgr inputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,46,private Filter firstFilter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,48,private boolean isClosed = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,49,protected String filePath = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,50,private String type = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,52,protected boolean tail = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,53,private boolean useEventMD5 = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,54,private boolean genEventMD5 = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,56,protected MetricCount readBytesMetric = new MetricCount();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,63,abstract void start() throws Exception;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,68,tail = getBooleanValue("tail", tail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,69,useEventMD5 = getBooleanValue("use_event_md5_as_id", useEventMD5);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,70,genEventMD5 = getBooleanValue("gen_event_md5", genEventMD5);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,78,public String getNameForThread() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,79,if (filePath != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,80,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,81,return (type + "=" + (new File(filePath)).getName());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,83,logger.warn("Couldn't get basename for filePath=" + filePath,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,84,ex);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,87,return super.getNameForThread() + ":" + type;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,93,logger.info("Started to monitor. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,96,logger.error("Error writing to output.", e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,98,logger.info("Exiting thread. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,102,statMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,103,readBytesMetric.count += (line.length());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,109,logger.error(e.getLocalizedMessage(),e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,124,public boolean monitor() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,125,if (isReady()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,126,logger.info("Starting thread. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,127,thread = new Thread(this, getNameForThread());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,128,thread.start();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,129,return true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,131,return false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,135,public void checkIn(InputMarker inputMarker) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,142,public void checkIn() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,145,public boolean isReady() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,146,return true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,149,public boolean isTail() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,150,return tail;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,153,public void setTail(boolean tail) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,154,this.tail = tail;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,157,public boolean isUseEventMD5() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,158,return useEventMD5;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,161,public void setUseEventMD5(boolean useEventMD5) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,162,this.useEventMD5 = useEventMD5;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,165,public boolean isGenEventMD5() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,166,return genEventMD5;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,169,public void setGenEventMD5(boolean genEventMD5) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,170,this.genEventMD5 = genEventMD5;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,175,logger.info("Request to drain. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,177,;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,185,public Filter getFirstFilter() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,186,return firstFilter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,189,public void setFirstFilter(Filter filter) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,190,firstFilter = filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,193,public void setInputMgr(InputMgr inputMgr) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,194,this.inputMgr = inputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,197,public void setOutputMgr(OutputMgr outputMgr) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,198,this.outputMgr = outputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,201,public String getFilePath() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,202,return filePath;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,205,public void setFilePath(String filePath) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,206,this.filePath = filePath;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,210,logger.info("Close called. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,216,outputMgr.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,224,public void setClosed(boolean isClosed) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,225,this.isClosed = isClosed;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,228,public boolean isClosed() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,229,return isClosed;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,233,public void loadConfig(Map<String, Object> map) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,234,super.loadConfig(map);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,235,String typeValue = getStringValue("type");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,236,if (typeValue != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,238,contextFields.put("type", typeValue);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,240,Map<String, Object> addFields = (Map<String, Object>) map
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,241,.get("add_fields");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,242,if (addFields == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,243,addFields = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,244,map.put("add_fields", addFields);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,246,addFields.put("type", typeValue);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,251,public String getShortDescription() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,252,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,256,public void logStat() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,257,super.logStat();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,258,logStatForMetric(readBytesMetric, "Stat: Bytes Read");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,260,if (firstFilter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,261,firstFilter.logStat();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,266,public String toString() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,267,return getShortDescription();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,270,public void rollOver() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,274,public String getType() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,275,return type;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,278,public void setType(String type) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,279,this.type = type;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,282,public Date getEventTime() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,283,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,290,public void addOutput(Output output) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,291,outputList.add(output);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,294,public void addMetricsContainers(List<MetricCount> metricsList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,295,super.addMetricsContainers(metricsList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,296,if (firstFilter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,297,firstFilter.addMetricsContainers(metricsList);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,299,metricsList.add(readBytesMetric);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,22,import java.io.EOFException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,26,import java.io.IOException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,27,import java.io.RandomAccessFile;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,28,import java.nio.file.Files;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,29,import java.nio.file.Path;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,30,import java.nio.file.Paths;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,31,import java.nio.file.attribute.BasicFileAttributes;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,32,import java.util.Date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,33,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,34,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,39,import org.apache.commons.lang3.StringUtils;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,40,import org.apache.log4j.Level;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,41,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,44,public class InputFile extends Input {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,45,private static final Logger logger = Logger.getLogger(InputFile.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,47,private String logPath = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,48,private boolean isStartFromBegining = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,50,private boolean isReady = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,51,private File[] logPathFiles = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,52,private Object fileKey = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,53,private String base64FileKey = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,55,private boolean isRolledOver = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,56,private boolean addWildCard = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,58,private long lastCheckPointTimeMS = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,59,private int checkPointIntervalMS = 5 * 1000; // 5 seconds
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,60,private RandomAccessFile checkPointWriter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,61,private Map<String, Object> jsonCheckPoint = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,63,private File checkPointFile = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,65,private InputMarker lastCheckPointInputMarker = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,67,private String checkPointExtension = ".cp";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,70,public void init() throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,71,logger.info("init() called");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,72,statMetric.metricsName = "input.files.read_lines";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,73,readBytesMetric.metricsName = "input.files.read_bytes";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,74,checkPointExtension = LogFeederUtil.getStringProperty(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,78,setClosed(true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,79,logPath = getStringValue("path");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,80,tail = getBooleanValue("tail", tail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,81,addWildCard = getBooleanValue("add_wild_card", addWildCard);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,82,checkPointIntervalMS = getIntValue("checkpoint.interval.ms",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,83,checkPointIntervalMS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,85,if (logPath == null || logPath.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,86,logger.error("path is empty for file input. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,87,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,88,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,91,String startPosition = getStringValue("start_position");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,94,|| startPosition.equalsIgnoreCase("begining")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,95,isStartFromBegining = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,98,if (!tail) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,100,isStartFromBegining = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,103,setFilePath(logPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,104,boolean isFileReady = isReady();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,106,logger.info("File to monitor " + logPath + ", tail=" + tail
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,107,+ ", addWildCard=" + addWildCard + ", isReady=" + isFileReady);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,109,super.init();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,116,logPathFiles = getActualFiles(logPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,117,if (logPathFiles != null && logPathFiles.length > 0
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,118,&& logPathFiles[0].isFile()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,120,if (isTail() && logPathFiles.length > 1) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,121,logger.warn("Found multiple files (" + logPathFiles.length
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,122,+ ") for the file filter " + filePath
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,123,+ ". Will use only the first one. Using "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,124,+ logPathFiles[0].getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,126,logger.info("File filter " + filePath + " expanded to "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,127,+ logPathFiles[0].getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,130,logger.debug(logPath + " file doesn't exist. Ignoring for now");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,137,if (addWildCard) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,138,if (!searchPath.endsWith("*")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,139,searchPath = searchPath + "*";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,142,File checkFile = new File(searchPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,143,if (checkFile.isFile()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,144,return new File[]{checkFile};
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,148,File checkFiles[] = findFileForWildCard(searchPath, new File("."));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,149,if (checkFiles == null || checkFiles.length == 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,151,File parentDir = (new File(searchPath)).getParentFile();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,152,if (parentDir != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,153,String wildCard = (new File(searchPath)).getName();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,154,checkFiles = findFileForWildCard(wildCard, parentDir);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,157,return checkFiles;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,160,private File[] findFileForWildCard(String searchPath, File dir) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,161,logger.debug("findFileForWildCard(). filePath=" + searchPath + ", dir="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,162,+ dir + ", dir.fullpath=" + dir.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,163,FileFilter fileFilter = new WildcardFileFilter(searchPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,164,return dir.listFiles(fileFilter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,168,synchronized public void checkIn(InputMarker inputMarker) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,169,super.checkIn(inputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,170,if (checkPointWriter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,171,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,172,int lineNumber = LogFeederUtil.objectToInt(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,173,jsonCheckPoint.get("line_number"), 0, "line_number");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,174,if (lineNumber > inputMarker.lineNumber) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,176,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,179,long currMS = System.currentTimeMillis();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,181,&& (currMS - lastCheckPointTimeMS) < checkPointIntervalMS) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,184,lastCheckPointInputMarker = inputMarker;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,185,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,187,lastCheckPointTimeMS = currMS;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,189,jsonCheckPoint.put("line_number", ""
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,190,+ new Integer(inputMarker.lineNumber));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,191,jsonCheckPoint.put("last_write_time_ms", "" + new Long(currMS));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,192,jsonCheckPoint.put("last_write_time_date", new Date());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,194,String jsonStr = LogFeederUtil.getGson().toJson(jsonCheckPoint);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,197,checkPointWriter.seek(0);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,198,checkPointWriter.writeInt(jsonStr.length());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,199,checkPointWriter.write(jsonStr.getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,201,if (isClosed()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,203,.getSimpleName() + "_FINAL_CHECKIN";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,204,LogFeederUtil.logErrorMessageByInterval(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,205,LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,208,+ ", checkPointFile="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,210,+ ", checkPoint=" + jsonStr, null, logger,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,211,Level.INFO);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,215,+ "_CHECKIN_EXCEPTION";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,216,LogFeederUtil
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,217,.logErrorMessageByInterval(LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,219,+ getShortDescription(), t, logger,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,220,Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,227,public void checkIn() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,228,super.checkIn();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,229,if (lastCheckPointInputMarker != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,230,checkIn(lastCheckPointInputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,235,public void rollOver() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,236,logger.info("Marking this input file for rollover. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,237,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,238,isRolledOver = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,244,if (logPathFiles == null || logPathFiles.length == 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,245,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,249,if (isTail()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,250,processFile(logPathFiles[0]);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,252,for (File file : logPathFiles) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,256,logger.info("isClosed or isDrain. Now breaking loop.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,260,logger.error("Error processing file=" + file.getAbsolutePath(), t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,266,copyFiles(logPathFiles);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,272,public void close() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,273,super.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,274,logger.info("close() calling checkPoint checkIn(). "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,275,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,276,checkIn();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,279,private void processFile(File logPathFile) throws FileNotFoundException,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,280,IOException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,281,logger.info("Monitoring logPath=" + logPath + ", logPathFile="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,282,+ logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,283,BufferedReader br = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,284,checkPointFile = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,285,checkPointWriter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,286,jsonCheckPoint = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,287,int resumeFromLineNumber = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,289,int lineCount = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,290,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,291,setFilePath(logPathFile.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,292,br = new BufferedReader(LogsearchReaderFactory.INSTANCE.getReader(logPathFile));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,295,boolean resume = isStartFromBegining;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,298,fileKey = getFileKey(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,300,.getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,301,logger.info("fileKey=" + fileKey + ", base64=" + base64FileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,302,+ ". " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,304,if (isTail()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,305,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,306,logger.info("Checking existing checkpoint file. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,307,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,309,String fileBase64 = Base64.byteArrayToBase64(fileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,310,.toString().getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,311,String checkPointFileName = fileBase64
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,312,+ checkPointExtension;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,313,File checkPointFolder = inputMgr.getCheckPointFolderFile();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,314,checkPointFile = new File(checkPointFolder,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,315,checkPointFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,316,checkPointWriter = new RandomAccessFile(checkPointFile,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,319,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,320,int contentSize = checkPointWriter.readInt();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,321,byte b[] = new byte[contentSize];
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,322,int readSize = checkPointWriter.read(b, 0, contentSize);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,323,if (readSize != contentSize) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,324,logger.error("Couldn't read expected number of bytes from checkpoint file. expected="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,325,+ contentSize
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,326,+ ", read="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,327,+ readSize
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,328,+ ", checkPointFile="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,329,+ checkPointFile
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,330,+ ", input=" + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,332,String jsonCheckPointStr = new String(b, 0, readSize);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,333,jsonCheckPoint = LogFeederUtil
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,334,.toJSONObject(jsonCheckPointStr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,336,resumeFromLineNumber = LogFeederUtil.objectToInt(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,337,jsonCheckPoint.get("line_number"), 0,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,340,if (resumeFromLineNumber > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,342,resume = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,344,logger.info("CheckPoint. checkPointFile="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,345,+ checkPointFile + ", json="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,346,+ jsonCheckPointStr
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,347,+ ", resumeFromLineNumber="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,348,+ resumeFromLineNumber + ", resume="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,349,+ resume);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,352,logger.info("EOFException. Will reset checkpoint file "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,353,+ checkPointFile.getAbsolutePath() + " for "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,354,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,356,if (jsonCheckPoint == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,359,jsonCheckPoint = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,360,jsonCheckPoint.put("file_path", filePath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,361,jsonCheckPoint.put("file_key", fileBase64);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,365,logger.error(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,367,+ checkPointFile, t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,371,setClosed(false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,372,int sleepStep = 2;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,373,int sleepIteration = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,374,while (true) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,375,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,376,if (isDrain()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,377,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,380,String line = br.readLine();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,381,if (line == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,382,if (!resume) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,383,resume = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,385,sleepIteration++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,386,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,389,if (sleepIteration > 4) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,390,Object newFileKey = getFileKey(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,391,if (newFileKey != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,392,if (fileKey == null
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,393,|| !newFileKey.equals(fileKey)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,394,logger.info("File key is different. Calling rollover. oldKey="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,395,+ fileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,396,+ ", newKey="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,397,+ newFileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,398,+ ". "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,399,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,401,rollOver();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,406,if (!tail && sleepIteration >= 2) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,407,logger.info("End of file. Done with filePath="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,409,+ ", lineCount=" + lineCount);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,410,flush();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,411,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,413,flush();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,415,if (isRolledOver) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,416,isRolledOver = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,418,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,419,logger.info("File is rolled over. Closing current open file."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,421,+ ", lineCount=" + lineCount);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,422,br.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,424,logger.error("Error closing file"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,425,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,426,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,428,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,429,logger.info("Opening new rolled over file."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,430,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,431,br = new BufferedReader(LogsearchReaderFactory.
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,432,INSTANCE.getReader(logPathFile));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,433,lineCount = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,434,fileKey = getFileKey(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,435,base64FileKey = Base64
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,436,.byteArrayToBase64(fileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,437,.toString().getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,438,logger.info("fileKey=" + fileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,439,+ ", base64=" + base64FileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,440,+ ", " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,442,logger.error("Error opening rolled over file. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,443,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,445,logger.info("Added input to not ready list."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,446,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,447,isReady = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,448,inputMgr.addToNotReady(this);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,449,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,451,logger.info("File is successfully rolled over. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,452,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,453,continue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,456,Thread.sleep(sleepStep * 1000);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,457,sleepStep = (sleepStep * 2);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,458,sleepStep = sleepStep > 10 ? 10 : sleepStep;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,460,logger.info("Thread interrupted."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,461,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,464,lineCount++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,465,sleepStep = 1;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,466,sleepIteration = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,468,if (!resume && lineCount > resumeFromLineNumber) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,469,logger.info("Resuming to read from last line. lineCount="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,470,+ lineCount
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,471,+ ", input="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,472,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,473,resume = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,475,if (resume) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,476,InputMarker marker = new InputMarker();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,477,marker.base64FileKey = base64FileKey;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,478,marker.input = this;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,479,marker.lineNumber = lineCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,480,outputLine(line, marker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,485,.getSimpleName() + "_READ_LOOP_EXCEPTION";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,486,LogFeederUtil.logErrorMessageByInterval(LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,488,+ lineCount + ", input="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,489,+ getShortDescription(), t, logger,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,490,Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,495,if (br != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,497,+ ", lineCount=" + lineCount);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,498,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,499,br.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,507,static public Object getFileKey(File file) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,508,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,509,Path fileFullPath = Paths.get(file.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,510,if (fileFullPath != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,511,BasicFileAttributes basicAttr = Files.readAttributes(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,512,fileFullPath, BasicFileAttributes.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,513,return basicAttr.fileKey();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,516,logger.error("Error getting file attributes for file=" + file, ex);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,518,return file.toString();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,522,public String getShortDescription() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,523,return "input:source="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,525,+ ", path="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,526,+ (logPathFiles != null && logPathFiles.length > 0 ? logPathFiles[0]
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,527,.getAbsolutePath() : getStringValue("path"));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,530,public void copyFiles(File[] files) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,535,InputMarker marker = new InputMarker();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,536,marker.input = this;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,537,outputMgr.copyFile(file, marker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,539,logger.info("isClosed or isDrain. Now breaking loop.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,543,logger.error("Error processing file=" + file.getAbsolutePath(), t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputMarker.java,26,public int lineNumber = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputMarker.java,27,public Input input;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputMarker.java,28,public String base64FileKey = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputMarker.java,32,return "InputMarker [lineNumber=" + lineNumber + ", input="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputMarker.java,33,+ input.getShortDescription() + "]";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,22,import java.io.EOFException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,24,import java.io.FileNotFoundException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,26,import java.io.RandomAccessFile;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,27,import java.util.Date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,28,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,29,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,33,import org.apache.commons.lang3.StringUtils;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,34,import org.apache.log4j.Level;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,35,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,38,public class InputS3File extends Input {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,39,private static final Logger logger = Logger.getLogger(InputS3File.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,41,private String logPath = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,42,private boolean isStartFromBegining = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,44,private boolean isReady = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,45,private String[] s3LogPathFiles = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,46,private Object fileKey = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,47,private String base64FileKey = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,49,private boolean isRolledOver = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,50,private boolean addWildCard = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,52,private long lastCheckPointTimeMS = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,53,private int checkPointIntervalMS = 5 * 1000; // 5 seconds
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,54,private RandomAccessFile checkPointWriter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,55,private Map<String, Object> jsonCheckPoint = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,57,private File checkPointFile = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,59,private InputMarker lastCheckPointInputMarker = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,61,private String checkPointExtension = ".cp";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,65,public void init() throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,66,logger.info("init() called");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,67,statMetric.metricsName = "input.files.read_lines";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,68,readBytesMetric.metricsName = "input.files.read_bytes";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,69,checkPointExtension = LogFeederUtil.getStringProperty(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,73,setClosed(true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,74,logPath = getStringValue("path");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,75,tail = getBooleanValue("tail", tail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,76,addWildCard = getBooleanValue("add_wild_card", addWildCard);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,77,checkPointIntervalMS = getIntValue("checkpoint.interval.ms",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,78,checkPointIntervalMS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,79,if (logPath == null || logPath.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,80,logger.error("path is empty for file input. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,81,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,84,String startPosition = getStringValue("start_position");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,87,|| startPosition.equalsIgnoreCase("begining")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,88,isStartFromBegining = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,91,if (!tail) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,93,isStartFromBegining = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,96,setFilePath(logPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,97,boolean isFileReady = isReady();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,99,logger.info("File to monitor " + logPath + ", tail=" + tail
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,100,+ ", addWildCard=" + addWildCard + ", isReady=" + isFileReady);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,102,super.init();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,109,s3LogPathFiles = getActualFiles(logPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,110,if (s3LogPathFiles != null && s3LogPathFiles.length > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,111,if (isTail() && s3LogPathFiles.length > 1) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,112,logger.warn("Found multiple files (" + s3LogPathFiles.length
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,113,+ ") for the file filter " + filePath
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,114,+ ". Will use only the first one. Using " + s3LogPathFiles[0]);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,116,logger.info("File filter " + filePath + " expanded to "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,117,+ s3LogPathFiles[0]);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,120,logger.debug(logPath + " file doesn't exist. Ignoring for now");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,126,private String[] getActualFiles(String searchPath) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,128,return new String[] { searchPath };
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,132,synchronized public void checkIn(InputMarker inputMarker) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,133,super.checkIn(inputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,134,if (checkPointWriter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,135,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,136,int lineNumber = LogFeederUtil.objectToInt(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,137,jsonCheckPoint.get("line_number"), 0, "line_number");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,138,if (lineNumber > inputMarker.lineNumber) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,140,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,143,long currMS = System.currentTimeMillis();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,145,&& (currMS - lastCheckPointTimeMS) < checkPointIntervalMS) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,148,lastCheckPointInputMarker = inputMarker;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,149,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,151,lastCheckPointTimeMS = currMS;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,153,jsonCheckPoint.put("line_number", ""
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,154,+ new Integer(inputMarker.lineNumber));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,155,jsonCheckPoint.put("last_write_time_ms", "" + new Long(currMS));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,156,jsonCheckPoint.put("last_write_time_date", new Date());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,158,String jsonStr = LogFeederUtil.getGson().toJson(jsonCheckPoint);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,161,checkPointWriter.seek(0);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,162,checkPointWriter.writeInt(jsonStr.length());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,163,checkPointWriter.write(jsonStr.getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,165,if (isClosed()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,167,+ "_FINAL_CHECKIN";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,168,LogFeederUtil.logErrorMessageByInterval(LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,171,+ ", checkPoint=" + jsonStr, null, logger, Level.INFO);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,175,+ "_CHECKIN_EXCEPTION";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,176,LogFeederUtil.logErrorMessageByInterval(LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,178,logger, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,185,public void checkIn() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,186,super.checkIn();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,187,if (lastCheckPointInputMarker != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,188,checkIn(lastCheckPointInputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,193,public void rollOver() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,194,logger.info("Marking this input file for rollover. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,195,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,196,isRolledOver = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,201,if (s3LogPathFiles == null || s3LogPathFiles.length == 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,205,if (isTail()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,206,processFile(s3LogPathFiles[0]);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,208,for (String s3FilePath : s3LogPathFiles) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,212,logger.info("isClosed or isDrain. Now breaking loop.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,216,logger.error("Error processing file=" + s3FilePath, t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,224,public void close() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,225,super.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,226,logger.info("close() calling checkPoint checkIn(). "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,227,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,228,checkIn();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,231,private void processFile(String logPathFile) throws FileNotFoundException,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,232,IOException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,233,logger.info("Monitoring logPath=" + logPath + ", logPathFile="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,234,+ logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,235,BufferedReader br = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,236,checkPointFile = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,237,checkPointWriter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,238,jsonCheckPoint = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,239,int resumeFromLineNumber = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,241,int lineCount = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,242,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,243,setFilePath(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,244,String s3AccessKey = getStringValue("s3_access_key");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,245,String s3SecretKey = getStringValue("s3_secret_key");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,246,br = S3Util.INSTANCE.getReader(logPathFile,s3AccessKey,s3SecretKey);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,247,if(br==null){
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,249,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,253,boolean resume = isStartFromBegining;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,256,fileKey = getFileKey(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,257,base64FileKey = Base64.byteArrayToBase64(fileKey.toString().getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,258,logger.info("fileKey=" + fileKey + ", base64=" + base64FileKey + ". "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,259,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,261,if (isTail()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,262,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,264,logger.info("Checking existing checkpoint file. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,265,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,268,.getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,269,String checkPointFileName = fileBase64 + checkPointExtension;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,270,File checkPointFolder = inputMgr.getCheckPointFolderFile();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,271,checkPointFile = new File(checkPointFolder, checkPointFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,272,checkPointWriter = new RandomAccessFile(checkPointFile, "rw");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,274,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,275,int contentSize = checkPointWriter.readInt();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,276,byte b[] = new byte[contentSize];
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,277,int readSize = checkPointWriter.read(b, 0, contentSize);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,278,if (readSize != contentSize) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,279,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,280,.error("Couldn't read expected number of bytes from checkpoint file. expected="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,281,+ contentSize
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,282,+ ", read="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,283,+ readSize
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,284,+ ", checkPointFile="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,285,+ checkPointFile
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,286,+ ", input="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,287,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,289,String jsonCheckPointStr = new String(b, 0, readSize);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,290,jsonCheckPoint = LogFeederUtil.toJSONObject(jsonCheckPointStr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,292,resumeFromLineNumber = LogFeederUtil.objectToInt(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,293,jsonCheckPoint.get("line_number"), 0, "line_number");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,295,if (resumeFromLineNumber > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,297,resume = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,299,logger.info("CheckPoint. checkPointFile=" + checkPointFile
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,300,+ ", json=" + jsonCheckPointStr + ", resumeFromLineNumber="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,301,+ resumeFromLineNumber + ", resume=" + resume);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,304,logger.info("EOFException. Will reset checkpoint file "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,305,+ checkPointFile.getAbsolutePath() + " for "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,306,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,308,if (jsonCheckPoint == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,311,jsonCheckPoint = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,312,jsonCheckPoint.put("file_path", filePath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,313,jsonCheckPoint.put("file_key", fileBase64);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,317,logger.error(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,319,+ checkPointFile, t);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,323,setClosed(false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,324,int sleepStep = 2;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,325,int sleepIteration = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,326,while (true) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,327,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,328,if (isDrain()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,329,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,332,String line = br.readLine();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,333,if (line == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,334,if (!resume) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,335,resume = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,337,sleepIteration++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,338,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,341,if (sleepIteration > 4) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,342,Object newFileKey = getFileKey(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,343,if (newFileKey != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,344,if (fileKey == null || !newFileKey.equals(fileKey)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,345,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,346,.info("File key is different. Calling rollover. oldKey="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,347,+ fileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,348,+ ", newKey="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,349,+ newFileKey
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,350,+ ". "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,351,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,353,rollOver();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,358,if (!tail && sleepIteration >= 2) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,359,logger.info("End of file. Done with filePath=" + logPathFile
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,360,+ ", lineCount=" + lineCount);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,361,flush();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,362,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,364,flush();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,366,if (isRolledOver) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,367,isRolledOver = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,369,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,370,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,371,.info("File is rolled over. Closing current open file."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,372,+ getShortDescription() + ", lineCount="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,373,+ lineCount);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,374,br.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,376,logger.error("Error closing file" + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,377,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,379,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,381,logger.info("Opening new rolled over file."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,382,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,383,br = S3Util.INSTANCE.getReader(logPathFile,s3AccessKey,s3SecretKey);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,384,lineCount = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,385,fileKey = getFileKey(logPathFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,387,.getBytes());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,388,logger.info("fileKey=" + fileKey + ", base64="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,389,+ base64FileKey + ", " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,391,logger.error("Error opening rolled over file. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,392,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,394,logger.info("Added input to not ready list."
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,395,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,396,isReady = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,397,inputMgr.addToNotReady(this);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,398,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,400,logger.info("File is successfully rolled over. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,401,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,402,continue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,405,Thread.sleep(sleepStep * 1000);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,406,sleepStep = (sleepStep * 2);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,407,sleepStep = sleepStep > 10 ? 10 : sleepStep;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,409,logger.info("Thread interrupted." + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,412,lineCount++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,413,sleepStep = 1;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,414,sleepIteration = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,416,if (!resume && lineCount > resumeFromLineNumber) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,417,logger.info("Resuming to read from last line. lineCount="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,418,+ lineCount + ", input=" + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,419,resume = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,421,if (resume) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,422,InputMarker marker = new InputMarker();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,423,marker.base64FileKey = base64FileKey;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,424,marker.input = this;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,425,marker.lineNumber = lineCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,426,outputLine(line, marker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,431,+ "_READ_LOOP_EXCEPTION";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,432,LogFeederUtil.logErrorMessageByInterval(LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,434,+ ", input=" + getShortDescription(), t, logger, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,439,if (br != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,440,logger.info("Closing reader." + getShortDescription() + ", lineCount="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,441,+ lineCount);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,442,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,443,br.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,451,static public Object getFileKey(String s3FilePath) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,452,return s3FilePath.toString();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,456,public String getShortDescription() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,457,return "input:source="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,459,+ ", path="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,460,+ (s3LogPathFiles != null && s3LogPathFiles.length > 0 ? s3LogPathFiles[0]
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,461,: getStringValue("path"));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,21,import java.net.Inet4Address;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,69,setFirstFilter(filter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,93,public String getNameForThread() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,94,return "Simulated input";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,98,public String getShortDescription() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,99,return "Simulated input";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,107,getFirstFilter().setOutputMgr(outputMgr);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,132,InputMarker marker = new InputMarker();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,133,marker.input = this;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,134,marker.lineNumber = getLineNumber(type);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,135,marker.base64FileKey = getBase64FileKey();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,150,String fileKey = Inet4Address.getLocalHost().getHostAddress() + "|" + filePath;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,21,import java.io.File;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,33,private static Logger logger = Logger.getLogger(GZIPReader.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,37,logger.info("Created GZIPReader for file : " + fileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,40,GZIPReader(File file) throws FileNotFoundException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,41,super(getStream(file.getName()));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,51,logger.error(e, e.getCause());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,61,InputStream is = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,62,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,63,is = new FileInputStream(fileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,70,if (is != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,71,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/GZIPReader.java,72,is.close();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/LogsearchReaderFactory.java,30,private static Logger logger = Logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/LogsearchReaderFactory.java,31,.getLogger(LogsearchReaderFactory.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/LogsearchReaderFactory.java,34,logger.debug("Inside reader factory for file:" + file);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/reader/LogsearchReaderFactory.java,36,logger.info("Reading file " + file + " as gzip file");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,20,package org.apache.ambari.logfeeder.logconfig;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,22,import java.text.ParseException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,23,import java.text.SimpleDateFormat;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,24,import java.util.Date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,25,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,26,import java.util.List;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,27,import java.util.TimeZone;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,30,import org.apache.ambari.logfeeder.util.SolrUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,31,import org.apache.ambari.logfeeder.view.VLogfeederFilter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,32,import org.apache.ambari.logfeeder.view.VLogfeederFilterWrapper;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,33,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,35,public class FetchConfigFromSolr extends Thread {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,36,private static Logger logger = Logger.getLogger(FetchConfigFromSolr.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,37,private static VLogfeederFilterWrapper logfeederFilterWrapper = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,38,private static int solrConfigInterval = 5;// 5 sec;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,39,private static long delay;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,40,private static String endTimeDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS";//2016-04-05T04:30:00.000Z
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,41,private static String sysTimeZone = "GMT";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,43,FetchConfigFromSolr(boolean isDaemon) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,44,this.setName(this.getClass().getSimpleName());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,45,this.setDaemon(isDaemon);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,49,public void run() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,50,String zkConnectString = LogFeederUtil.getStringProperty("logfeeder.solr.zk_connect_string");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,51,String solrUrl = LogFeederUtil.getStringProperty("logfeeder.solr.url");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,53,&& (solrUrl == null || solrUrl.trim().length() == 0)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,54,logger.warn("Neither Solr ZK Connect String nor solr Uril for UserConfig/History is set." +
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,56,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,58,solrConfigInterval = LogFeederUtil.getIntProperty("logfeeder.solr.config.interval", solrConfigInterval);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,59,delay = 1000 * solrConfigInterval;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,60,do {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,61,logger.debug("Updating config from solr after every " + solrConfigInterval + " sec.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,62,pullConfigFromSolr();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,63,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,64,Thread.sleep(delay);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,66,logger.error(e.getLocalizedMessage(), e.getCause());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,71,private synchronized void pullConfigFromSolr() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,72,SolrUtil solrUtil = SolrUtil.getInstance();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,73,if(solrUtil!=null){
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,74,HashMap<String, Object> configDocMap = solrUtil.getConfigDoc();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,75,if (configDocMap != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,76,String configJson = (String) configDocMap.get(LogFeederConstants.VALUES);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,77,if (configJson != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,78,logfeederFilterWrapper = LogFeederUtil.getGson().fromJson(configJson, VLogfeederFilterWrapper.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,84,private static boolean isFilterExpired(VLogfeederFilter logfeederFilter) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,85,boolean isFilterExpired = false;// default is false
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,86,if (logfeederFilter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,87,Date filterEndDate = parseFilterExpireDate(logfeederFilter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,88,if (filterEndDate != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,89,Date currentDate = getCurrentDate();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,90,if (currentDate.compareTo(filterEndDate) >= 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,91,logger.debug("Filter for  Component :" + logfeederFilter.getLabel() + " and Hosts :"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,92,+ listToStr(logfeederFilter.getHosts()) + "Filter is expired because of filter endTime : "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,93,+ dateToStr(filterEndDate) + " is older than currentTime :" + dateToStr(currentDate));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,94,isFilterExpired = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,98,return isFilterExpired;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,101,private static String dateToStr(Date date) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,102,if (date == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,103,return "";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,105,SimpleDateFormat formatter = new SimpleDateFormat(endTimeDateFormat);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,106,TimeZone timeZone = TimeZone.getTimeZone(sysTimeZone);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,107,formatter.setTimeZone(timeZone);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,108,return formatter.format(date);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,111,private static Date parseFilterExpireDate(VLogfeederFilter vLogfeederFilter) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,112,String expiryTime = vLogfeederFilter.getExpiryTime();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,113,if (expiryTime != null && !expiryTime.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,114,SimpleDateFormat formatter = new SimpleDateFormat(endTimeDateFormat);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,115,TimeZone timeZone = TimeZone.getTimeZone(sysTimeZone);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,116,formatter.setTimeZone(timeZone);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,117,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,118,return formatter.parse(expiryTime);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,121,+ " and hosts :" + listToStr(vLogfeederFilter.getHosts()));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,124,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,127,public static List<String> getAllowedLevels(String hostName, VLogfeederFilter componentFilter) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,128,String componentName = componentFilter.getLabel();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,129,List<String> hosts = componentFilter.getHosts();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,130,List<String> defaultLevels = componentFilter.getDefaultLevels();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,131,List<String> overrideLevels = componentFilter.getOverrideLevels();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,132,String expiryTime=componentFilter.getExpiryTime();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,136,|| (hosts != null && !hosts.isEmpty())) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,137,if (hosts == null || hosts.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,139,hosts.add(LogFeederConstants.ALL);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,141,if (LogFeederUtil.isListContains(hosts, hostName, false)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,142,if (isFilterExpired(componentFilter)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,143,logger.debug("Filter for component " + componentName + " and host :"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,144,+ hostName + " is expired at " + componentFilter.getExpiryTime());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,145,return defaultLevels;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,147,return overrideLevels;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,151,return defaultLevels;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,154,public static boolean isFilterAvailable() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,155,return logfeederFilterWrapper != null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,158,public static VLogfeederFilter findComponentFilter(String componentName) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,159,if (logfeederFilterWrapper != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,160,HashMap<String, VLogfeederFilter> filter = logfeederFilterWrapper.getFilter();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,161,if (filter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,162,VLogfeederFilter componentFilter = filter.get(componentName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,163,if (componentFilter != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,164,return componentFilter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,168,logger.trace("Filter is not there for component :" + componentName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,169,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,173,public static Date getCurrentDate() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,174,TimeZone.setDefault(TimeZone.getTimeZone(sysTimeZone));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,175,Date date = new Date();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,176,return date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,179,public static String listToStr(List<String> strList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,180,StringBuilder out = new StringBuilder("[");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,181,if (strList != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,182,int counter = 0;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,183,for (Object o : strList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,184,if (counter > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,185,out.append(",");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,187,out.append(o.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,188,counter++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,191,out.append("]");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,192,return out.toString();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,19,package org.apache.ambari.logfeeder.util;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,25,import org.apache.ambari.logfeeder.logconfig.LogFeederConstants;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,41,public class SolrUtil {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,43,private static final Logger logger = Logger.getLogger(SolrUtil.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,45,private static SolrUtil instance = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,47,private SolrClient solrClient = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,48,private CloudSolrClient solrClouldClient = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,52,private SolrUtil() throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,59,public static SolrUtil getInstance() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,60,if (instance == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,61,synchronized (SolrUtil.class) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,62,if (instance == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,63,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,64,instance = new SolrUtil();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,66,final String LOG_MESSAGE_KEY = SolrUtil.class
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,67,.getSimpleName() + "_SOLR_UTIL";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,68,LogFeederUtil.logErrorMessageByInterval(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,69,LOG_MESSAGE_KEY,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,71,Level.WARN);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,76,return instance;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,79,private SolrClient connectToSolr(String url, String zkConnectString,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,80,String collection) throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,81,solrDetail = "zkConnectString=" + zkConnectString + ", collection=" + collection
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,82,+ ", url=" + url;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,84,logger.info("connectToSolr() " + solrDetail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,85,if (collection == null || collection.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,86,throw new Exception("For solr, collection name is mandatory. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,87,+ solrDetail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,89,if (zkConnectString != null && !zkConnectString.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,91,logger.info("Using zookeepr. " + solrDetail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,92,solrClouldClient = new CloudSolrClient(zkConnectString);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,95,int waitDurationMS = 3 * 60 * 1000;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,96,checkSolrStatus(waitDurationMS);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,98,if (url == null || url.trim().isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,99,throw new Exception("Both zkConnectString and URL are empty. zkConnectString="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,100,+ zkConnectString + ", collection=" + collection + ", url="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,101,+ url);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,105,logger.info("Connecting to  solr : " + collectionURL);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,125,logger.error("Con't connect to Solr. solrDetail=" + solrDetail, ex);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,128,logger.info("Solr getCollections() is success. solr=" + solrDetail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,133,logger.error("Solr is not reachable even after "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,139,logger.warn("Solr is not reachable yet. getCollections() attempt count=" + pingCount
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,140,+ ". Will sleep for " + waitIntervalMS + " ms and try again." + " solr=" + solrDetail
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,141,+ ", response=" + response);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,147,logger.error("Seems Solr is not up. solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,152,private QueryResponse process(SolrQuery solrQuery) throws SolrServerException, IOException, SolrException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,153,if (solrClient != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,154,QueryResponse queryResponse = solrClient.query(solrQuery, METHOD.POST);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,155,return queryResponse;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,157,logger.error("solrClient can't be null");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,158,return null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,162,public HashMap<String, Object> getConfigDoc() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,172,if (documentList != null && documentList.size() > 0) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,175,configMap = (HashMap<String, Object>) LogFeederUtil
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,176,.toJSONObject(configJson);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,181,+ "_FETCH_FILTER_CONFIG_ERROR";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,182,LogFeederUtil.logErrorMessageByInterval(logMessageKey,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilter.java,19,package org.apache.ambari.logfeeder.view;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilter.java,36,public class VLogfeederFilter {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilter.java,44,public VLogfeederFilter() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilterWrapper.java,19,package org.apache.ambari.logfeeder.view;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilterWrapper.java,35,public class VLogfeederFilterWrapper {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilterWrapper.java,37,private HashMap<String, VLogfeederFilter> filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilterWrapper.java,40,public HashMap<String, VLogfeederFilter> getFilter() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/view/VLogfeederFilterWrapper.java,44,public void setFilter(HashMap<String, VLogfeederFilter> filter) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,20,package org.apache.ambari.logfeeder.logconfig;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,26,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,28,public enum LogfeederScheduler {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,30,INSTANCE;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,32,private Logger logger = Logger.getLogger(LogfeederScheduler.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,34,private static boolean running = false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,36,public synchronized void start() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,37,boolean filterEnable = LogFeederUtil.getBooleanProperty("logfeeder.log.filter.enable", false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,38,if (!filterEnable) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,39,logger.info("Logfeeder  filter Scheduler is disabled.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,40,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,42,if (!running) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,43,for (Thread thread : getThreadList()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,44,thread.start();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,46,running = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,47,logger.info("Logfeeder Scheduler started!");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,49,logger.warn("Logfeeder Scheduler is already running.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,53,private List<Thread> getThreadList() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,54,List<Thread> tasks = new ArrayList<Thread>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,55,Thread configMonitor = new FetchConfigFromSolr(true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,56,tasks.add(configMonitor);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,57,return tasks;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,20,package org.apache.ambari.logfeeder.logconfig.filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,22,import java.util.List;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,23,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,26,import org.apache.ambari.logfeeder.logconfig.FetchConfigFromSolr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,27,import org.apache.ambari.logfeeder.logconfig.LogFeederConstants;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,28,import org.apache.ambari.logfeeder.view.VLogfeederFilter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,29,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,31,class ApplyLogFilter extends DefaultDataFilter {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,33,private static Logger logger = Logger.getLogger(ApplyLogFilter.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,36,public boolean applyFilter(Map<String, Object> jsonObj, boolean defaultValue) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,37,if (isEmpty(jsonObj)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,38,logger.warn("Output jsonobj is empty");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,39,return defaultValue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,41,String hostName = (String) jsonObj.get(LogFeederConstants.SOLR_HOST);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,42,if (isNotEmpty(hostName)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,43,String componentName = (String) jsonObj.get(LogFeederConstants.SOLR_COMPONENT);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,44,if (isNotEmpty(componentName)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,45,String level = (String) jsonObj.get(LogFeederConstants.SOLR_LEVEL);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,46,if (isNotEmpty(level)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,47,VLogfeederFilter componentFilter = FetchConfigFromSolr.findComponentFilter(componentName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,48,if (componentFilter == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,49,return defaultValue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,51,List<String> allowedLevels = FetchConfigFromSolr.getAllowedLevels(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,52,hostName, componentFilter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,53,if (allowedLevels == null || allowedLevels.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,54,allowedLevels.add(LogFeederConstants.ALL);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,56,return LogFeederUtil.isListContains(allowedLevels, level, false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,60,return defaultValue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,19,package org.apache.ambari.logfeeder.logconfig.filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,21,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,26,class DefaultDataFilter {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,27,public boolean applyFilter(Map<String, Object> outputJsonObj, boolean defaultValue) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,28,return defaultValue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,31,protected boolean isEmpty(Map<String, Object> map) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,32,if (map == null || map.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,33,return true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,35,return false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,38,protected boolean isEmpty(String str) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,39,if (str == null || str.trim().isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,40,return true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,42,return false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,45,protected boolean isNotEmpty(String str) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/DefaultDataFilter.java,46,return !isEmpty(str);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,20,package org.apache.ambari.logfeeder.logconfig.filter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,22,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,25,import org.apache.ambari.logfeeder.logconfig.filter.ApplyLogFilter;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,26,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,31,public enum FilterLogData {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,32,INSTANCE;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,33,private ApplyLogFilter applyLogFilter = new ApplyLogFilter();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,34,private static Logger logger = Logger.getLogger(FilterLogData.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,36,boolean defaultValue = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,38,public boolean isAllowed(String jsonBlock) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,39,if (jsonBlock == null || jsonBlock.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,40,return defaultValue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,42,Map<String, Object> jsonObj = LogFeederUtil.toJSONObject(jsonBlock);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,43,return isAllowed(jsonObj);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,46,public boolean isAllowed(Map<String, Object> jsonObj) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,47,boolean isAllowed = applyLogFilter.applyFilter(jsonObj, defaultValue);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,48,if (!isAllowed) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,49,logger.trace("Filter block the content :" + LogFeederUtil.getGson().toJson(jsonObj));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,51,return isAllowed;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,29,public boolean init(String inputDesc, String fieldName,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,30,String mapClassCode, Object mapConfigs) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,34,return true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,37,public Object apply(Map<String, Object> jsonObj, Object value) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,38,return value;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,43,return "mapClass=" + mapClassCode + ", input=" + inputDesc
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/Mapper.java,44,+ ", fieldName=" + fieldName;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,32,private static final Logger logger = Logger.getLogger(MapperDate.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,39,public boolean init(String inputDesc, String fieldName,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,40,String mapClassCode, Object mapConfigs) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,41,super.init(inputDesc, fieldName, mapClassCode, mapConfigs);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,43,logger.fatal("Can't initialize object. mapConfigs class is not of type Map. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,45,+ ", map="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,46,+ this.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,53,logger.fatal("Date format for map is empty. " + this.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,65,logger.fatal("Error creating date format. format="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,88,.getSimpleName() + ":apply",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,91,+ ", value=" + value + ". " + this.toString(),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,92,t, logger, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,33,private static final Logger logger = Logger.getLogger(MapperFieldName.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,38,public boolean init(String inputDesc, String fieldName,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,39,String mapClassCode, Object mapConfigs) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,40,super.init(inputDesc, fieldName, mapClassCode, mapConfigs);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,42,logger.fatal("Can't initialize object. mapConfigs class is not of type Map. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,43,+ mapConfigs.getClass().getName());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,50,logger.fatal("Map field value is empty.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,63,.getSimpleName() + ":apply",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,65,+ this.toString(), null, logger, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,33,private Logger logger = Logger.getLogger(MapperFieldValue.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,38,public boolean init(String inputDesc, String fieldName,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,39,String mapClassCode, Object mapConfigs) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,40,super.init(inputDesc, fieldName, mapClassCode, mapConfigs);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,42,logger.fatal("Can't initialize object. mapConfigs class is not of type Map. "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,43,+ mapConfigs.getClass().getName());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,51,logger.fatal("Map field value is empty.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,59,if (newValue != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,60,if (prevValue != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,61,if (prevValue.equalsIgnoreCase(value.toString())) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,62,value = newValue;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,63,jsonObj.put(fieldName, value);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,67,LogFeederUtil.logErrorMessageByInterval(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,68,this.getClass().getSimpleName() + ":apply",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,70,+ this.toString(), null, logger, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,34,private static final Logger logger = Logger.getLogger(Output.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,38,protected MetricCount writeBytesMetric = new MetricCount();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,70,logger.info("Calling base close()." + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,94,public void addMetricsContainers(List<MetricCount> metricsList) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputData.java,30,Map<String, Object> jsonObj;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputData.java,31,InputMarker inputMarker;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputData.java,34,super();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputData.java,41,return "OutputData [jsonObj=" + jsonObj + ", inputMarker="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputData.java,42,+ inputMarker + "]";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputDevNull.java,31,private static Logger logger = Logger.getLogger(OutputDevNull.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputDevNull.java,35,logger.trace("Ignore log block: " + block);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputDevNull.java,40,throw new UnsupportedOperationException(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,36,static Logger logger = Logger.getLogger(OutputFile.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,38,PrintWriter outWriter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,39,String filePath = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,40,String codec;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,47,if (filePath == null || filePath.isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,48,logger.error("Filepath config property <path> is not set in config file.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,52,if (codec == null || codec.trim().isEmpty()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,60,logger.error("Unsupported codec type. codec=" + codec
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,61,+ ", will use json");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,65,logger.info("Out filePath=" + filePath + ", codec=" + codec);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,74,outWriter = new PrintWriter(new BufferedWriter(new FileWriter(outFile,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,75,true)));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,77,logger.info("init() is successfull. filePath="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,78,+ outFile.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,83,logger.info("Closing file." + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,96,throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,107,statMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,125,statMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,139,throws UnsupportedOperationException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,140,throw new UnsupportedOperationException(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,43,private final static Logger logger = Logger.getLogger(OutputHDFSFile.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,76,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,77,.error("HDFS config property <hdfs_out_dir> is not set in config file.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,81,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,82,.error("HDFS config property <hdfs_host> is not set in config file.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,86,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,87,.error("HDFS config property <hdfs_port> is not set in config file.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,92,logger.info("hdfs Output dir=" + hdfsOutDir);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,100,logger.info("Closing file." + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,116,throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,196,fileSystem = LogfeederHDFSUtil.INSTANCE.buildFileSystem(hdfsHost,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,197,hdfsPort);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,203,boolean isCopied = LogfeederHDFSUtil.INSTANCE.copyFromLocal(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,204,localFile.getAbsolutePath(), destFilePath, fileSystem,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,207,logger.debug("File copy to hdfs hdfspath :" + destFilePath
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,208,+ " and deleted local file :" + localPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,212,logger.error("Hdfs file copy  failed for hdfspath :"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,213,+ destFilePath + " and localpath :" + localPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,226,logger.error(e.getLocalizedMessage(),e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,230,logger
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,231,.error(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,233,+ e.getLocalizedMessage(), e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,243,logger.info("waiting till copy all local files to hdfs.......");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,248,logger.error(e.getLocalizedMessage(), e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,250,logger.debug("still waiting to copy all local files to hdfs.......");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,252,logger.info("calling interrupt method for hdfsCopyThread to stop it.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,257,+ "' does not have permission to interrupt the Thread: '"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,258,+ hdfsCopyThread.getName() + "'");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,260,LogfeederHDFSUtil.INSTANCE.closeFileSystem(fileSystem);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,284,logger.error(e.getLocalizedMessage(),e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,290,throws UnsupportedOperationException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,291,throw new UnsupportedOperationException(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,68,statMetric.metricsName = "output.kafka.write_logs";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,69,writeBytesMetric.metricsName = "output.kafka.write_bytes";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,127,LOG.error("Kafka is down. messageNumber=" + kafkaCallBack.thisMessageNumber + ". Going to sleep for "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,128,+ FAILED_RETRY_INTERVAL + " seconds");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,134,LogFeederUtil.logErrorMessageByInterval(logMessageKey,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,136,+ (kafkaCallBack == null ? null : kafkaCallBack.message),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,137,t, LOG, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,163,LOG.warn("Kafka is still catching up from previous failed messages. outstanding messages="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,164,+ failedMessages.size() + " Going to sleep for " + CATCHUP_RETRY_INTERVAL + " seconds");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,201,producer.send(new ProducerRecord<String, String>(topic, block),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,202,new KafkaCallBack(this, block, inputMarker, ++messageCount));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,209,statMetric.count++;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,210,writeBytesMetric.count += block.length();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,220,LogFeederUtil.logErrorMessageByInterval(logKeyMessage, "InterruptedException-Error sending message to Kafka", e,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,221,LOG, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,225,LogFeederUtil.logErrorMessageByInterval(logKeyMessage, "ExecutionException-Error sending message to Kafka", e,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,226,LOG, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,230,LogFeederUtil.logErrorMessageByInterval(logKeyMessage, "GenericException-Error sending message to Kafka", t,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,231,LOG, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,263,output.writeBytesMetric.count += message.length();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,267,LogFeederUtil.logErrorMessageByInterval(logKeyMessage, "Error sending message to Kafka. Async Callback",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,268,exception, LOG, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,277,throws UnsupportedOperationException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,278,throw new UnsupportedOperationException(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,137,Map<String, Object> globalConfig = LogFeeder.globalMap;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,174,Map<String, Object> addFields = (Map<String, Object>) globalConfig
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,175,.get("add_fields");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,38,import org.apache.ambari.logfeeder.logconfig.FetchConfigFromSolr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,90,statMetric.metricsName = "output.solr.write_logs";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,91,writeBytesMetric.metricsName = "output.solr.write_bytes";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,207,String.format(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,209,+ "solrUrl=%s, zkConnectString=%s, collection=%s, response=%s",
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,210,count, solrUrl, zkConnectString, collection, response));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,226,if (FetchConfigFromSolr.isFilterAvailable()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,259,jsonObj.put("logtime", LogFeederUtil.getActualDateStr());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,327,private final Map<String, InputMarker> latestInputMarkerList = new HashMap<>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,356,|| (nextDispatchDuration <= 0 || localBuffer.size() >= maxBufferSize))) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,360,LOG.warn("In drain mode and sending to Solr failed. So exiting. output="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,361,+ getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,365,if( localBuffer.size() == 0 ) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,406,LOG.warn("Solr is not reachable. Going to retry after "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,407,+ RETRY_INTERVAL + " seconds. " + "output="
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,417,LogFeederUtil.logErrorMessageByInterval(logMessageKey,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,450,latestInputMarkerList.put(outputData.inputMarker.base64FileKey, outputData.inputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,482,statMetric.count += localBuffer.size();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,483,writeBytesMetric.count += localBufferBytesSize;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,484,for (InputMarker inputMarker : latestInputMarkerList.values()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,502,latestInputMarkerList.clear();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,516,throws UnsupportedOperationException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,517,throw new UnsupportedOperationException(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,40,throw new IllegalArgumentException("Input File:"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,41,+ inputFile.getAbsolutePath() + " is not exist.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,44,throw new IllegalArgumentException("Input File:"
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,45,+ inputFile.getAbsolutePath() + " is a directory.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,51,throw new IllegalAccessException(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,53,+ parent.getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,56,final OutputStream out = new FileOutputStream(outputFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,57,cos = new CompressorStreamFactory().createCompressorOutputStream(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/CompressionUtil.java,58,algoName, out);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/DateUtil.java,27,private static final Logger logger = Logger.getLogger(DateUtil.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/DateUtil.java,37,logger.error("Error in coverting dateToString  format :" + dateFormat, e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,30,private static final Logger logger = Logger.getLogger(FileUtil.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,32,public static List<File> getAllFileFromDir(File directory,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,33,String[] searchFileWithExtensions, boolean checkInSubDir) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,35,logger.error(directory.getAbsolutePath() + " is not exists ");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,37,return (List<File>) FileUtils.listFiles(directory,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,38,searchFileWithExtensions, checkInSubDir);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,40,logger.error(directory.getAbsolutePath() + " is not Directory ");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,28,public enum LogfeederHDFSUtil {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,29,INSTANCE;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,30,private static Logger logger = Logger.getLogger(LogfeederHDFSUtil.class);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,32,public void createHDFSDir(String dirPath, FileSystem dfs) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,33,Path src = new Path(dirPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,34,try {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,35,if (dfs.isDirectory(src)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,36,logger.info("hdfs dir dirPath=" + dirPath + "  is already exist.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,37,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,39,boolean isDirCreated = dfs.mkdirs(src);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,40,if (isDirCreated) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,41,logger.debug("HDFS dirPath=" + dirPath + " created successfully.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,43,logger.warn("HDFS dir creation failed dirPath=" + dirPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,46,logger.error("HDFS dir creation failed dirPath=" + dirPath, e.getCause());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,50,public boolean copyFromLocal(String sourceFilepath, String destFilePath,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,51,FileSystem fileSystem, boolean overwrite, boolean delSrc) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,56,logger.info("copying localfile := " + sourceFilepath + " to hdfsPath := "
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,57,+ destFilePath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,61,logger.error("Error copying local file :" + sourceFilepath
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,62,+ " to hdfs location : " + destFilePath, e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,67,public FileSystem buildFileSystem(String hdfsHost, String hdfsPort) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,73,logger.error("Exception is buildFileSystem :", e);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,78,public void closeFileSystem(FileSystem fileSystem) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,83,logger.error(e.getLocalizedMessage(), e.getCause());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,88,public Configuration buildHdfsConfiguration(String hdfsHost, String hdfsPort) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,89,String url = "hdfs://" + hdfsHost + ":" + hdfsPort + "/";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,90,Configuration configuration = new Configuration();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,91,configuration.set("fs.default.name", url);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/LogfeederHDFSUtil.java,92,return configuration;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,24,public class PlaceholderUtil {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,26,private static Pattern placeHolderPattern;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,27,static {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,28,placeHolderPattern = Pattern.compile("\\$\\s*(\\w+)");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,31,public static String replaceVariables(String inputStr,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,32,HashMap<String, String> contextParam) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,34,String placeholder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,35,String replacement;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,38,placeholder = m.group();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,40,String key = placeholder.replace("$","").toLowerCase();// remove
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,42,replacement = getFromContext(contextParam, placeholder, key);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,49,private static String getFromContext(HashMap<String, String> contextParam,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,50,String defaultValue, String key) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,51,String returnValue = defaultValue;// by default set default value as a
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/PlaceholderUtil.java,55,if (value != null && !value.trim().isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,129,public static final String FACET_GROUP_FIELD = "group.field";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,19,package org.apache.ambari.logsearch.common;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,21,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,22,import java.util.HashSet;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,23,import java.util.Locale;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,24,import java.util.Map;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,25,import java.util.Set;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,27,import javax.servlet.http.HttpServletRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,30,import org.apache.commons.lang.StringEscapeUtils;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,32,public class SearchCriteria {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,33,private int startIndex = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,34,private int maxRows = Integer.MAX_VALUE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,35,private String sortBy = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,36,private String sortType = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,37,private int page = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,39,private String globalStartTime = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,40,private String globalEndTime = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,42,private boolean getCount = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,43,private boolean isDistinct = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,44,private HashMap<String, Object> paramList = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,45,final private Set<String> nullParamList = new HashSet<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,46,final private Set<String> notNullParamList = new HashSet<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,48,private Map<String, Object> urlParamMap = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,50,public SearchCriteria(HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,51,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,59,this.page = new Integer(request.getParameter("page"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,63,this.maxRows = new Integer(request.getParameter("pageSize"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,75,this.sortBy = "" + request.getParameter("sortBy");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,79,this.sortType = "" + request.getParameter("sortType");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,85,this.globalStartTime = "" + request.getParameter("start_time");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,86,this.urlParamMap.put("globalStartTime", request.getParameter("start_time"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,90,this.globalEndTime = "" + request.getParameter("end_time");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,91,this.urlParamMap.put("globalEndTime", request.getParameter("end_time"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,95,public SearchCriteria() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,102,public int getStartIndex() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,103,return startIndex;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,109,public void setStartIndex(int startIndex) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,110,this.startIndex = startIndex;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,116,public int getMaxRows() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,117,return maxRows;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,123,public void setMaxRows(int maxRows) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,124,this.maxRows = maxRows;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,131,public String getSortType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,132,return sortType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,139,public boolean isGetCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,140,return getCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,143,public void setGetCount(boolean getCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,144,this.getCount = getCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,150,public HashMap<String, Object> getParamList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,151,return paramList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,157,public void setParamList(HashMap<String, Object> paramList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,158,this.paramList = paramList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,164,public void addRequiredServiceLogsParams(HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,165,this.addParam("advanceSearch", StringEscapeUtils.unescapeXml(request.getParameter("advanceSearch")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,166,this.addParam("q", request.getParameter("q"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,169,this.addParam("level", request.getParameter("level"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,170,this.addParam("gMustNot", request.getParameter("gMustNot"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,171,this.addParam("from", request.getParameter("from"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,172,this.addParam("to", request.getParameter("to"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,173,this.addParam("selectComp", request.getParameter("mustBe"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,174,this.addParam("unselectComp", request.getParameter("mustNot"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,182,this.addParam(LogSearchConstants.BUNDLE_ID, request.getParameter(LogSearchConstants.BUNDLE_ID));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,183,this.addParam("host_name", request.getParameter("host_name"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,184,this.addParam("component_name", request.getParameter("component_name"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,185,this.addParam("file_name", request.getParameter("file_name"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,186,this.addParam("startDate", request.getParameter("start_time"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,187,this.addParam("endDate", request.getParameter("end_time"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,197,public void addRequiredAuditLogsParams(HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,198,this.addParam("q", request.getParameter("q"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,207,this.addParam("includeString", request.getParameter("mustBe"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,208,this.addParam("unselectComp", request.getParameter("mustNot"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,213,this.addParam("startTime", request.getParameter("from"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,214,this.addParam("endTime", request.getParameter("to"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,221,public void addParam(String name, Object value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,224,paramList.put(name, value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,226,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,227,String propertyFieldMappings[] = solrValue.split(",");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,228,HashMap<String, String> propertyFieldValue = new HashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,229,for (String temp : propertyFieldMappings) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,230,String arrayValue[] = temp.split(":");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,231,propertyFieldValue.put(arrayValue[0].toLowerCase(Locale.ENGLISH), arrayValue[1].toLowerCase(Locale.ENGLISH));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,233,String originalValue = propertyFieldValue.get(value.toString().toLowerCase(Locale.ENGLISH));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,235,paramList.put(name, originalValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,243,public void setNullParam(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,244,nullParamList.add(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,247,public void setNotNullParam(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,248,notNullParamList.add(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,251,public Object getParamValue(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,252,return paramList.get(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,266,public Set<String> getNullParamList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,267,return nullParamList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,273,public Set<String> getNotNullParamList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,274,return notNullParamList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,280,public boolean isDistinct() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,281,return isDistinct;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,284,public String getSortBy() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,285,return sortBy;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,288,public void setSortBy(String sortBy) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,289,this.sortBy = sortBy;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,292,public void setSortType(String sortType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,293,this.sortType = sortType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,299,public void setDistinct(boolean isDistinct) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,300,this.isDistinct = isDistinct;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,303,public int getPage() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,304,return page;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,307,public void setPage(int page) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,308,this.page = page;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,311,public String getGlobalStartTime() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,312,return globalStartTime;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,315,public void setGlobalStartTime(String globalStartTime) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,316,this.globalStartTime = globalStartTime;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,319,public String getGlobalEndTime() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,320,return globalEndTime;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,323,public void setGlobalEndTime(String globalEndTime) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,324,this.globalEndTime = globalEndTime;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,327,public Map<String, Object> getUrlParamMap() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,328,return urlParamMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,331,public void setUrlParamMap(Map<String, Object> urlParamMap) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,332,this.urlParamMap = urlParamMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,35,static private Logger logger = Logger.getLogger(AuditSolrDao.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,52,private static final String DEFAULT_LEVELS = "FATAL,ERROR,WARN,INFO,DEBUG,TRACE";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,69,String splitInterval = "none";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,70,int numberOfShards = 1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,28,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,29,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,36,import org.apache.ambari.logsearch.view.VBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,37,import org.apache.ambari.logsearch.view.VBarGraphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,38,import org.apache.ambari.logsearch.view.VNameValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,48,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,156,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,157,Collection<VBarGraphData> vBarGraphDatas = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,158,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,159,Collection<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,177,VNameValue vNameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,198,Collection<VNameValue> sortedVNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,200,VNameValue value = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,203,for (VNameValue valueLevel : vNameValues) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,212,vBarGraphData.setDataCounts(sortedVNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,214,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,235,VNameValue value = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,240,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,258,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,259,Collection<VBarGraphData> vGraphData = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,294,Collection<VBarGraphData> levelVGraphData = dataList.getGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,302,for (VBarGraphData garphData : levelVGraphData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,303,Collection<VNameValue> valueList = garphData.getDataCount();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,304,Collection<VNameValue> valueListSorted = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,307,for (VNameValue value : valueList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,313,VNameValue v1 = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,318,garphData.setDataCounts(valueListSorted);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,335,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,336,Collection<VBarGraphData> vBarGraphDatas = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,337,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,338,Collection<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,357,VNameValue vNameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,362,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,384,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,385,List<VBarGraphData> histogramData = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,26,import org.apache.ambari.logsearch.manager.MgrBase;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,29,import org.apache.ambari.logsearch.view.VBarGraphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,30,import org.apache.ambari.logsearch.view.VNameValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,113,String innerField, List<VBarGraphData> histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,121,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,127,Collection<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,149,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,161,Collection<VBarGraphData> vGraphDatas, String typeXAxis) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,176,VBarGraphData vGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,177,Collection<VNameValue> levelCounts = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,181,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,216,vGraphData.setDataCounts(levelCounts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,38,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,48,import org.apache.ambari.logsearch.view.VBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,49,import org.apache.ambari.logsearch.view.VBarGraphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,50,import org.apache.ambari.logsearch.view.VGroupList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,51,import org.apache.ambari.logsearch.view.VNameValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,52,import org.apache.ambari.logsearch.view.VNameValueList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,54,import org.apache.ambari.logsearch.view.VSolrLogList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,62,import org.apache.solr.common.SolrDocument;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,63,import org.apache.solr.common.SolrDocumentList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,67,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,71,public class AuditMgr extends MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,95,public String getLogs(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,96,String lastPage = (String)  searchCriteria.getParamValue("isLastPage");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,97,Boolean isLastPage = Boolean.parseBoolean(lastPage);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,98,if (isLastPage) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,99,SolrQuery lastPageQuery = queryGenerator.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,101,if(collection == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,102,collection = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,104,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,109,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,116,SolrDocumentList docList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,141,for (Count compnonet : componentsCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,142,SolrDocument solrDocument = new SolrDocument();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,143,solrDocument.addField("type", compnonet.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,144,docList.add(solrDocument);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,154,public String getAuditComponents(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,155,VGroupList vGroupList = new VGroupList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,156,SolrDocumentList docList = getComponents(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,158,vGroupList.setGroupDocuments(docList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,159,return convertObjToString(vGroupList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,163,public String getAuditLineGraphData(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,164,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,173,List<VBarGraphData> histogramData = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,183,if (response == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,184,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,191,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,198,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,208,public String getTopAuditFieldCount(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,209,int topCounts = 10;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,210,Integer top = (Integer) searchCriteria.getParamValue("top");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,211,String facetField = (String) searchCriteria.getParamValue("field");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,212,if (top == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,213,top = new Integer(topCounts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,217,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,219,List<VNameValue> nameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,221,VNameValueList nameValueList = new VNameValueList(nameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,227,List<Count> countList = new ArrayList<FacetField.Count>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,228,QueryResponse queryResponse = auditSolrDao.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,230,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,233,if (queryResponse.getFacetField(facetField) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,236,if (queryFacetField != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,237,countList = queryFacetField.getValues();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,241,for (Count cnt : countList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,242,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,243,nameValue.setName(cnt.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,245,nameValue.setValue("" + cnt.getCount());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,246,nameValues.add(nameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,248,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,251,logger.error("Error during solrQuery=" + solrQuery, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,258,public String getLiveLogCounts() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,259,VNameValueList nameValueList = new VNameValueList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,278,if (rangeFacet == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,279,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,281,RangeFacet range=rangeFacet.get(0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,283,if(range == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,284,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,289,List<VNameValue> nameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,292,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,298,nameValueList.setVNameValues(nameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,299,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,309,public String topTenUsers(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,317,VBarDataList vBarDataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,320,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,326,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,333,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,336,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,339,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,348,public String topTenResources(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,356,VBarDataList vBarDataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,358,if(queryResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,359,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,364,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,372,return convertObjToString(vBarDataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,382,public String getRequestUserLineGraph(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,391,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,392,List<VBarGraphData> histogramData = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,406,if (response == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,407,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,414,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,419,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,493,public String getAnyGraphData(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,501,result = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,504,return convertObjToString(result);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,517,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,523,Collection<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,524,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,534,VNameValue vNameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,562,if(queryResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,564,response.setMsgDesc("Query was not able to execute "+solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,571,response.setMsgDesc("Query was not able to execute "+solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,574,VBarDataList vBarUserDataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,575,VBarDataList vBarResourceDataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,593,for (VBarGraphData graphData : tableUserData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,607,for (VNameValue vNameValue : vnameValueList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,626,for (VBarGraphData graphData : tableResourceData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,642,for (VNameValue vNameValue : vnameValueList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,703,public String getServiceLoad(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,704,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,705,Collection<VBarGraphData> vaDatas = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,715,if (serviceLoadResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,716,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,721,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,726,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,729,List<VNameValue> valueList = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,730,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,732,VNameValue vNameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,737,vBarGraphData.setDataCounts(valueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,741,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,27,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,31,import org.apache.ambari.logsearch.view.VLogFile;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,32,import org.apache.ambari.logsearch.view.VLogFileList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,33,import org.apache.ambari.logsearch.view.VSolrLogList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,42,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,47,public class LogFileMgr extends MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,67,public String searchLogFiles(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,68,VLogFileList logFileList = new VLogFileList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,69,List<VLogFile> logFiles = new ArrayList<VLogFile>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,103,VLogFile vLogFile = new VLogFile();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,119,String jsonStr = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,120,jsonStr = convertObjToString(logFileList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,122,return jsonStr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,125,public String getLogFileTail(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,156,VSolrLogList solrLogList = getLogAsPaginationProvided(logFileTailQuery, serviceLogsSolrDao);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,157,return convertObjToString(solrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,31,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,39,import org.apache.ambari.logsearch.view.VSolrLogList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,44,import org.apache.solr.common.SolrDocument;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,47,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,49,import com.google.gson.Gson;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,50,import com.google.gson.GsonBuilder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,51,import com.google.gson.JsonDeserializationContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,52,import com.google.gson.JsonDeserializer;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,53,import com.google.gson.JsonElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,54,import com.google.gson.JsonParseException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,55,import com.google.gson.JsonPrimitive;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,56,import com.google.gson.JsonSerializationContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,57,import com.google.gson.JsonSerializer;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,59,public class MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,99,public MgrBase() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,100,jsonDateSerialiazer = new JsonSerializer<Date>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,107,return paramT == null ? null : new JsonPrimitive(paramT.getTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,111,jsonDateDeserialiazer = new JsonDeserializer<Date>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,116,return json == null ? null : new Date(json.getAsLong());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,123,if (obj == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,124,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,129,.registerTypeAdapter(Date.class, jsonDateDeserialiazer).create();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,131,return gson.toJson(obj);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,184,VSolrLogList collection = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,191,if(maxRows != null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,192,startIndex = Integer.parseInt("" + ((totalLogs/maxRows) * maxRows));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,193,numberOfLogsOnLastPage = Integer.parseInt("" + (totalLogs-startIndex));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,195,collection.setStartIndex(startIndex);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,196,collection.setTotalCount(totalLogs);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,197,collection.setPageSize(maxRows);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,198,SolrDocumentList docList = collection.getList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,199,SolrDocumentList lastPageDocList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,200,collection.setSolrDocuments(lastPageDocList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,202,for(SolrDocument doc:docList){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,215,return collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,222,VSolrLogList collection = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,225,collection.setSolrDocuments(docList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,226,collection.setStartIndex((int) docList.getStart());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,227,collection.setTotalCount(docList.getNumFound());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,231,return new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,233,collection.setPageSize(rowNumber);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,235,return collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,25,import org.apache.ambari.logsearch.view.VNameValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,26,import org.apache.ambari.logsearch.view.VNameValueList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,28,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,32,public class PublicMgr extends MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,37,VNameValueList nameValueList = new VNameValueList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,38,List<VNameValue> nameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,39,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,43,nameValueList.setVNameValues(nameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,44,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,52,import org.apache.ambari.logsearch.view.VBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,53,import org.apache.ambari.logsearch.view.VBarGraphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,54,import org.apache.ambari.logsearch.view.VCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,55,import org.apache.ambari.logsearch.view.VCountList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,56,import org.apache.ambari.logsearch.view.VGraphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,57,import org.apache.ambari.logsearch.view.VGraphInfo;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,58,import org.apache.ambari.logsearch.view.VGroupList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,59,import org.apache.ambari.logsearch.view.VNameValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,60,import org.apache.ambari.logsearch.view.VNameValueList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,61,import org.apache.ambari.logsearch.view.VNode;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,62,import org.apache.ambari.logsearch.view.VNodeList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,63,import org.apache.ambari.logsearch.view.VSolrLogList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,78,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,85,public class LogsMgr extends MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,110,public String searchLogs(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,113,String lastPage = (String)  searchCriteria.getParamValue("isLastPage");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,114,Boolean isLastPage = Boolean.parseBoolean(lastPage);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,118,return getPageByKeyword(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,126,return getPageByLogId(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,134,VSolrLogList collection = getLastPage(searchCriteria,LogSearchConstants.LOGTIME,serviceLogsSolrDao,lastPageQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,135,if(collection == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,136,collection = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,138,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,145,VSolrLogList collection = getLogAsPaginationProvided(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,147,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,158,VGroupList collection = new VGroupList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,166,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,171,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,175,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,179,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,181,String temp = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,182,for (Count cnt : fieldList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,183,SolrDocument solrDoc = new SolrDocument();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,184,temp = cnt.getName();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,185,solrDoc.put(field, temp);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,186,docList.add(solrDoc);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,189,collection.setGroupDocuments(docList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,194,return convertObjToString(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,207,public String getAggregatedInfo(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,210,VGraphInfo graphInfo = new VGraphInfo();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,216,return convertObjToString(graphInfo);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,220,List<VGraphData> dataList = new ArrayList<VGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,232,return convertObjToString(graphInfo);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,240,public List<VGraphData> buidGraphData(List<PivotField> pivotFields) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,241,List<VGraphData> logList = new ArrayList<VGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,245,VGraphData logLevel = new VGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,259,VCountList collection = new VCountList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,260,List<VCount> vCounts = new ArrayList<VCount>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,284,VCount vCount = new VCount();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,297,collection.setCounts(vCounts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,313,public List<VNode> buidTreeData(List<PivotField> pivotFields,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,314,List<PivotField> pivotFieldHost, SolrQuery query,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,315,String firstPriority, String secondPriority) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,316,List<VNode> extensionTree = new ArrayList<VNode>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,322,VNode hostNode = new VNode();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,347,Collection<VNameValue> logLevelCount = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,350,VNameValue vnameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,365,Collection<VNode> componentNodes = new ArrayList<VNode>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,368,VNode compNode = new VNode();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,380,Collection<VNameValue> logLevelCount = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,383,VNameValue vnameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,405,public VNodeList getTreeExtension(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,423,VNodeList list = new VNodeList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,454,List<VNode> dataList = buidTreeData(firstHirarchicalPivotFields,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,468,public String getHostListByComponent(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,472,VNodeList list = new VNodeList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,485,return convertObjToString(list);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,508,return convertObjToString(list);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,511,List<VNode> dataList = buidTreeData(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,516,return convertObjToString(list);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,520,return convertObjToString(list);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,528,public VNameValueList getLogsLevelCount(SearchCriteria sc) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,529,VNameValueList nameValueList = new VNameValueList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,532,List<VNameValue> logsCounts = getLogLevelFacets(query);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,533,nameValueList.setVNameValues(logsCounts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,538,public List<VNameValue> getLogLevelFacets(SolrQuery query) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,541,List<VNameValue> logsCounts = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,872,VSolrLogList vSolrLogList = getLogAsPaginationProvided(logIdQuery, serviceLogsSolrDao);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,873,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1087,VSolrLogList vSolrLogList = getLogAsPaginationProvided(logIdQuery, serviceLogsSolrDao);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1088,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1098,private String getPageByLogId(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1099,VSolrLogList vSolrLogList = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1102,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1108,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1187,vSolrLogList = getLogAsPaginationProvided(logIdQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1189,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1199,public List<VNameValue> getHistogramCounts(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1201,List<VNameValue> logsCounts = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1231,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1253,public String getHistogramData(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1255,VBarDataList dataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1262,List<VBarGraphData> histogramData = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1276,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1283,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1288,Collection<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1289,List<VBarGraphData> graphDatas = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1292,VBarGraphData vData1 = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1293,for (VBarGraphData vData2 : histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1301,Collection<VNameValue> vNameValues2 = vData2
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1303,for (VNameValue value : vNameValues2) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1304,VNameValue value2 = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1312,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1314,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1322,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1333,List<VBarGraphData> histogramDataLocal,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1334,List<VBarGraphData> histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1335,for (VBarGraphData histData : histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1517,public String getComponentListWithLevelCounts(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1527,VNodeList list = new VNodeList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1541,return convertObjToString(list);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1545,List<VNode> datatList = new ArrayList<VNode>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1548,VNode comp = new VNode();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1551,List<VNameValue> levelCountList = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1554,for (PivotField levelPivot : levelList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1555,VNameValue level = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1556,level.setName(("" + levelPivot.getValue()).toUpperCase());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1557,level.setValue("" + levelPivot.getCount());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1558,levelCountList.add(level);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1565,return convertObjToString(list);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1573,public String getExtremeDatesForBundelId(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1575,VNameValueList nameValueList = new VNameValueList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1590,List<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1594,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1599,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1606,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1630,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1637,nameValueList.setVNameValues(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1642,nameValueList=new VNameValueList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1644,return convertObjToString(nameValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1648,throws SolrServerException, IOException, SolrException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1649,VGroupList collection = new VGroupList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1650,QueryResponse response = serviceLogsSolrDao.process(query);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1651,if (response == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1652,return collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1654,SolrDocumentList docList = response.getResults();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1655,if (docList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1656,collection.setGroupDocuments(docList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1657,collection.setStartIndex((int) docList.getStart());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1658,collection.setTotalCount(docList.getNumFound());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1661,return collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1666,.getPropertyStringList("logsearch.service.logs.fields");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1667,if (fieldsNameStrArry.length > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1671,for (String field : fieldsNameStrArry) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1673,+ LogSearchConstants.SOLR_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1694,.getPropertyStringList("logsearch.solr.service.logs.exclude.columnlist");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1701,+ LogSearchConstants.SOLR_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1727,String innerField, List<VBarGraphData> histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1733,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1739,Collection<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1740,vBarGraphData.setDataCounts(vNameValues);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1750,VNameValue vNameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1759,public String getAnyGraphData(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1764,VBarDataList result = graphDataGenerator.getAnyGraphData(searchCriteria,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1765,serviceLogsSolrDao, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1767,result = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1769,return convertObjToString(result);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1773,public String getAfterBeforeLogs(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1774,VSolrLogList vSolrLogList = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1775,SolrDocumentList docList = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1779,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1802,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1804,docList = response.getResults();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1806,Date date = (Date) docList.get(0).getFieldValue(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1807,LogSearchConstants.LOGTIME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1810,+ docList.get(0).getFieldValue(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1811,LogSearchConstants.SEQUNCE_ID);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1814,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1821,vSolrLogList = whenScrollUp(searchCriteria, logTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1824,SolrDocumentList solrDocList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1825,for (SolrDocument solrDoc : vSolrLogList.getList()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1828,vSolrLogList.setSolrDocuments(solrDocList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1829,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1832,SolrDocumentList solrDocList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1833,vSolrLogList = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1834,for (SolrDocument solrDoc : whenScrollDown(searchCriteria, logTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1835,sequenceId, maxRows).getList()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1838,vSolrLogList.setSolrDocuments(solrDocList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1839,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1842,vSolrLogList = new VSolrLogList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1843,SolrDocumentList initial = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1844,SolrDocumentList before = whenScrollUp(searchCriteria, logTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1845,sequenceId, maxRows).getList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1846,SolrDocumentList after = whenScrollDown(searchCriteria, logTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1847,sequenceId, maxRows).getList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1848,if (before != null && !before.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1849,for (SolrDocument solrDoc : Lists.reverse(before)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1850,initial.add(solrDoc);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1855,if (after != null && !after.isEmpty()){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1856,for (SolrDocument solrDoc : after) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1861,vSolrLogList.setSolrDocuments(initial);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1863,return convertObjToString(vSolrLogList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1868,private VSolrLogList whenScrollUp(SearchCriteria searchCriteria,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1869,String logTime, String sequenceId, String maxRows) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1899,return getLogAsPaginationProvided(solrQuery, serviceLogsSolrDao);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1902,private VSolrLogList whenScrollDown(SearchCriteria searchCriteria,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1903,String logTime, String sequenceId, String maxRows) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1933,return getLogAsPaginationProvided(solrQuery, serviceLogsSolrDao);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,34,public class SessionMgr {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,38,public SessionMgr() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,29,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,47,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,51,public class UserConfigMgr extends MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,19,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,21,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,24,public class VString {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,29,protected String value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,34,public VString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,37,public String getValue() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,38,return value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,41,public void setValue(String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,42,this.value = value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,45,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,46,String str = "VString={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,47,str += super.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,48,str += "value={" + value + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,49,str += "}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VString.java,50,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,24,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,25,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,26,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,30,public class VBarGraphData {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,31,protected Collection<VNameValue> dataCount = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,32,protected String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,38,public void setName(String level) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,39,this.name = level;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,42,public Collection<VNameValue> getDataCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarGraphData.java,46,public void setDataCounts(Collection<VNameValue> dateValueCounts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,31,public class VBarDataList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,32,protected  Collection<VBarGraphData> graphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,34,public VBarDataList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,35,graphData = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,38,public Collection<VBarGraphData> getGraphData() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,42,public void setGraphData(Collection<VBarGraphData> histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VBarDataList.java,43,this.graphData = histogramData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,22,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,25,public class VCount implements java.io.Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,26,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,28,protected String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,30,protected Long count;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,35,public VCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,54,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,55,String str = "VLogLevel={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,56,str += super.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,57,str += "name={" + name + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,58,str += "count={" + count + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,59,str += "}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCount.java,60,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,24,public class VSummaryCount {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,26,protected String level;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,28,protected List<String> cricticalMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,30,protected List<String> compName;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,32,protected List<Long> countMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,34,public String getLevel() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,35,return level;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,38,public void setLevel(String level) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,39,this.level = level;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,42,public List<String> getCricticalMsg() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,43,return cricticalMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,46,public void setCricticalMsg(List<String> cricticalMsg) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,47,this.cricticalMsg = cricticalMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,50,public List<String> getCompName() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,51,return compName;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,54,public void setCompName(List<String> compName) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,55,this.compName = compName;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,58,public List<Long> getCountMsg() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,59,return countMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,62,public void setCountMsg(List<Long> countMsg) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCount.java,63,this.countMsg = countMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,22,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,23,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,24,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,26,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,27,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,28,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFile.java,34,public class VLogFile {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,31,public class VNodeList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,32,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,33,protected List<VNode> vNodeList = new ArrayList<VNode>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,35,public List<VNode> getvNodeList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,39,public void setvNodeList(List<VNode> vNodeList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,46,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,50,public List<VNode> getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNodeList.java,52,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,29,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,26,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,34,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,19,package org.apache.ambari.logsearch.rest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,21,import javax.servlet.http.HttpServletRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,22,import javax.ws.rs.GET;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,23,import javax.ws.rs.Path;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,24,import javax.ws.rs.Produces;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,25,import javax.ws.rs.core.Context;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,27,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,28,import org.apache.ambari.logsearch.manager.LogFileMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,29,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,30,import org.springframework.context.annotation.Scope;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,31,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,36,public class LogFileREST {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,39,LogFileMgr logFileMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,43,public String searchLogFiles(@Context HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,44,SearchCriteria searchCriteria = new SearchCriteria(request);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,45,searchCriteria.addParam("component", request.getParameter("component"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,46,searchCriteria.addParam("host", request.getParameter("host"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,47,searchCriteria.addParam("logType", request.getParameter("logType"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,48,return logFileMgr.searchLogFiles(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,54,public String getLogFileTail(@Context HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,55,SearchCriteria searchCriteria = new SearchCriteria();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,56,searchCriteria.addParam("host", request.getParameter("host"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,57,searchCriteria.addParam("component", request.getParameter("component"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,58,searchCriteria.addParam("name", request.getParameter("name"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,59,searchCriteria.addParam("tailSize", request.getParameter("tailSize"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/LogFileREST.java,60,return logFileMgr.getLogFileTail(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/PublicREST.java,24,import org.apache.ambari.logsearch.manager.PublicMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/PublicREST.java,25,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/PublicREST.java,32,public class PublicREST {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/PublicREST.java,35,PublicMgr generalMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/PublicREST.java,40,return generalMgr.getGeneralConfig();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,22,import javax.servlet.http.HttpServletRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,30,import javax.ws.rs.core.Context;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,32,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,33,import org.apache.ambari.logsearch.common.SearchCriteria;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,34,import org.apache.ambari.logsearch.manager.UserConfigMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,37,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,44,public class UserConfigREST {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,50,UserConfigMgr userConfigMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,56,return userConfigMgr.saveUserConfig(vhist);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,63,return userConfigMgr.updateUserConfig(vhist);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,69,userConfigMgr.deleteUserConfig(id);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,75,public String getUserConfig(@Context HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,76,SearchCriteria searchCriteria = new SearchCriteria(request);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,77,searchCriteria.addParam(LogSearchConstants.USER_NAME,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,78,request.getParameter("userId"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,79,searchCriteria.addParam(LogSearchConstants.FILTER_NAME,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,80,request.getParameter("filterName"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,81,searchCriteria.addParam(LogSearchConstants.ROW_TYPE,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,82,request.getParameter("rowType"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,83,return userConfigMgr.getUserConfig(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,89,public String getUserFilter(@Context HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,90,return userConfigMgr.getUserFilter();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,97,return userConfigMgr.saveUserFiter(json);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,104,return userConfigMgr.saveUserFiter(json);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,111,return userConfigMgr.getAllUserName();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/service/UserService.java,21,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,23,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,25,public class VSummaryCountList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,27,protected Collection<VSummaryCount> countList = new ArrayList<VSummaryCount>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,29,public Collection<VSummaryCount> getCountList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,30,return countList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,33,public void setCountList(Collection<VSummaryCount> countList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSummaryCountList.java,34,this.countList = countList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,35,import org.apache.ambari.logsearch.view.VBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,36,import org.apache.ambari.logsearch.view.VBarGraphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,38,import org.apache.ambari.logsearch.view.VNameValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,209,VBarDataList vBarDataList = new VBarDataList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,211,Collection<VBarGraphData> dataList = new ArrayList<VBarGraphData>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,214,return vBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,218,return vBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,224,return vBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,229,return vBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,233,VBarGraphData vBarGraphData = new VBarGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,236,vBarGraphData.setName(userName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,239,List<VNameValue> componetCountList = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,244,VNameValue componetCount = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,258,vBarGraphData.setDataCounts(componetCountList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,259,dataList.add(vBarGraphData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,262,vBarDataList.setGraphData(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,265,return vBarDataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,271,return passedMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,30,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,31,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,37,public class VCountList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,38,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,40,protected List<VCount> vCounts;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,42,public VCountList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,43,super();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,44,vCounts = new ArrayList<VCount>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,47,public VCountList(List<VCount> logList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,48,super(logList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,49,this.vCounts = logList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,52,public void setCounts(List<VCount> list) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,53,this.vCounts = list;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,57,public int getListSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,59,return vCounts.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,60,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,64,public List<VCount> getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VCountList.java,65,return vCounts;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,22,import java.io.Serializable;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,30,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,31,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,37,public class VGraphData implements Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,39,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,41,protected String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,43,protected Long count;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,45,protected List<VGraphData> dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,47,public String getName() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,48,return name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,51,public void setName(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,52,this.name = name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,55,public Long getCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,56,return count;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,59,public void setCount(Long info) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,60,this.count = info;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,63,public List<VGraphData> getDataList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,64,return dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,67,public void setDataList(List<VGraphData> dataList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,68,this.dataList = dataList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,72,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,73,String str = "VGraphData={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,74,str += super.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,75,str += "info={ " + count + " } ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,76,str += "dataList={ " + dataList + " } ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphData.java,77,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,22,import java.io.Serializable;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,30,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,31,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,37,public class VGraphInfo implements Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,42,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,44,protected List<VGraphData> graphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,46,public List<VGraphData> getGraphData() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,47,return graphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,50,public void setGraphData(List<VGraphData> graphData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,51,this.graphData = graphData;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,55,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,56,String str = "VGraphInfo={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,57,str += super.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,58,str += "graphData={ " + graphData + " }";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGraphInfo.java,59,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,22,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,23,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,24,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,26,import org.apache.solr.common.SolrDocumentList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,27,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,29,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,35,public class VGroupList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,36,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,38,protected SolrDocumentList groupList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,40,public VGroupList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,41,super();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,42,groupList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,45,public VGroupList(SolrDocumentList logList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,46,super(logList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,47,this.groupList = logList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,50,public void setGroupDocuments(SolrDocumentList list) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,51,this.groupList = list;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,55,public int getListSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,57,return groupList.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,58,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,62,public SolrDocumentList getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VGroupList.java,63,return groupList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,19,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,21,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,22,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,24,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,25,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,26,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,36,public class VLogFileList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,41,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,43,private List<VLogFile> logFiles;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,45,public VLogFileList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,46,logFiles = new ArrayList<VLogFile>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,50,public int getListSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,51,if (logFiles == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,52,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,54,return logFiles.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,58,public List<?> getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,59,return logFiles;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,62,public List<VLogFile> getLogFiles() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,63,return logFiles;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,66,public void setLogFiles(List<VLogFile> logFiles) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VLogFileList.java,67,this.logFiles = logFiles;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,22,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,25,public class VNameValue implements java.io.Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,26,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,31,protected String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,35,protected String value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,40,public VNameValue() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,49,public VNameValue(String name, String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,51,this.name = name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,52,this.value = value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,62,public void setName(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,63,this.name = name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,71,public String getName() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,72,return this.name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,82,public void setValue(String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,83,if(value.contains(".") && (value.contains("e") || value.contains("E"))){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,84,this.value=getExponentialValueReplaced(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,86,this.value = value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,95,public String getValue() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,96,return this.value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,104,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,105,String str = "VNameValue={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,106,str += super.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,107,str += "name={" + name + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,108,str += "value={" + value + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,109,str += "}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,110,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,113,private String getExponentialValueReplaced(String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,114,try{
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,115,Double number = Double.parseDouble(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,116,String newValue = String.format("%.0f", number);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,117,return newValue;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValue.java,120,return value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,31,public class VNameValueList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,32,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,33,protected List<VNameValue> vNameValues = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,35,public VNameValueList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,36,super();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,39,public VNameValueList(List<VNameValue> objList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,40,super(objList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,41,this.vNameValues = objList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,47,public List<VNameValue> getVNameValues() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,48,return vNameValues;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,55,public void setVNameValues(List<VNameValue> vNameValues) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,56,this.vNameValues = vNameValues;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,60,public int getListSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,61,if (vNameValues != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,62,return vNameValues.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,64,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,68,public List<?> getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNameValueList.java,70,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,22,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,24,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,25,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,26,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,36,public class VNode {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,38,private String name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,40,private String type;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,42,private String value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,44,private boolean isRoot;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,46,private Collection<VNode> childs;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,48,private Collection<VNameValue> logLevelCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,50,private boolean isParent;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,52,public String getName() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,53,return name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,56,public void setName(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,57,this.name = name;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,60,public String getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,61,return type;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,64,public void setType(String type) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,65,this.type = type;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,68,public boolean isRoot() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,69,return isRoot;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,72,public void setRoot(boolean isRoot) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,73,this.isRoot = isRoot;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,76,public Collection<VNode> getChilds() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,77,return childs;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,80,public void setChilds(Collection<VNode> childs) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,81,this.childs = childs;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,84,public boolean isParent() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,85,return isParent;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,88,public void setParent(boolean isParent) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,89,this.isParent = isParent;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,92,public Collection<VNameValue> getLogLevelCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,93,return logLevelCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,96,public void setLogLevelCount(Collection<VNameValue> logLevelCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,97,this.logLevelCount = logLevelCount;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,100,public String getValue() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,101,return value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,104,public void setValue(String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,105,this.value = value;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,109,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,110,String str = "VNode={";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,111,str += "name={" + name + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,112,str += "value={" + value + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,113,str += "type={" + type + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,114,str += "isRoot={" + isRoot + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,115,str += "isParent={" + isParent + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,116,str += "logLevelCount={" + logLevelCount + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,117,str += "childs={" + childs + "} ";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,118,str += "}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VNode.java,119,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,20,package org.apache.ambari.logsearch.view;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,22,import javax.xml.bind.annotation.XmlAccessType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,23,import javax.xml.bind.annotation.XmlAccessorType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,24,import javax.xml.bind.annotation.XmlRootElement;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,26,import org.apache.solr.common.SolrDocumentList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,27,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,29,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,35,public class VSolrLogList extends VList {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,36,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,38,protected SolrDocumentList logList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,40,public VSolrLogList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,41,super();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,42,logList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,45,public VSolrLogList(SolrDocumentList logList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,46,super(logList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,47,this.logList = logList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,50,public void setSolrDocuments(SolrDocumentList list) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,51,this.logList = list;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,55,public int getListSize() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,56,if (logList != null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,57,return logList.size();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,59,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,63,public SolrDocumentList getList() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/view/VSolrLogList.java,64,return logList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,34,import org.apache.ambari.logsearch.manager.SessionMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,39,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,53,SessionMgr sessionMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,26,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,32,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,99,ExternalServerClient externalServerClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,107,private String loginAPIURL = "/api/v1/users/$USERNAME/privileges?fields=*";// default
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,110,public void initialization() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,112,+ "external_auth.login_url", loginAPIURL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,143,String finalLoginUrl = loginAPIURL.replace("$USERNAME", username);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,27,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,30,import org.apache.ambari.logsearch.util.ConfigUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,31,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,95,ConfigUtil.initializeApplicationConfig();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,103,String protcolProperty = PropertiesUtil.getProperty(LOGSEARCH_PROTOCOL_PROP,HTTP_PROTOCOL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,20,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,28,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,29,import org.apache.ambari.logsearch.common.MessageEnums;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,35,public class ConfigUtil {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,48,initializeColumnMapping();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,80,private static void initializeColumnMapping() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,19,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,59,hostURL = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,19,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,36,public class PropertiesUtil extends PropertyPlaceholderConfigurer {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,41,private PropertiesUtil() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,29,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,222,String solrValue = PropertiesUtil.getProperty(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,20,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,36,public class XMLPropertiesUtil extends DefaultPropertiesPersister {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,37,private static Logger logger = Logger.getLogger(XMLPropertiesUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,39,public XMLPropertiesUtil() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,46,DocumentBuilderFactory xmlDocumentBuilderFactory = DocumentBuilderFactory
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,47,.newInstance();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,50,DocumentBuilder xmlDocumentBuilder = xmlDocumentBuilderFactory
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,51,.newDocumentBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,63,if (eElement.getElementsByTagName("name") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,64,&& eElement.getElementsByTagName("name").item(0) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,66,.getTextContent().trim();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,68,if (eElement.getElementsByTagName("value") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,69,&& eElement.getElementsByTagName("value").item(0) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/XMLPropertiesUtil.java,71,.getTextContent().trim();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,28,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,43,String solrUrl = PropertiesUtil.getProperty("logsearch.solr.audit.logs.url");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,44,String zkConnectString = PropertiesUtil.getProperty("logsearch.solr.audit.logs.zk_connect_string");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,25,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,41,String solrUrl = PropertiesUtil.getProperty("logsearch.solr.url");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,42,String zkConnectString = PropertiesUtil.getProperty("logsearch.solr.zk_connect_string");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,32,import org.apache.ambari.logsearch.util.ConfigUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,33,import org.apache.ambari.logsearch.util.JSONUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,34,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,59,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,592,String jaasFile = PropertiesUtil.getProperty("logsearch.solr.jaas.file", "/etc/security/keytabs/logsearch_solr.service.keytab");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,593,boolean securityEnabled = PropertiesUtil.getBooleanProperty("logsearch.solr.kerberos.enable", false);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,654,String historyCollection = PropertiesUtil.getProperty("logsearch.solr.collection.history","history");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,44,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,61,String solrUrl = PropertiesUtil.getProperty("logsearch.solr.url");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,62,String zkConnectString = PropertiesUtil.getProperty("logsearch.solr.zk_connect_string");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,97,String json = jsonUtil.objToJson(logfeederFilterWrapper);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,127,String configJson = jsonUtil.objToJson(configDoc);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,210,if (jsonUtil.isJSONValid(hadoopServiceConfig)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,34,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,90,String jsonStr = jsonUtil.mapToJSON(userInfos);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,91,jsonUtil.writeJSONInFile(jsonStr, jsonFile, true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,160,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,165,queryGenerator.setFacetField(solrQuery, xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,223,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,227,queryGenerator.setJSONFacet(solrQuery, jsonQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,262,queryGenerator.setMainQuery(solrQuery, mainQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,263,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_INDEX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,274,queryGenerator.setJSONFacet(solrQuery, jsonQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,339,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,346,queryGenerator.setFacetRange(solrQuery, xAxisField, from, to, unit);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,386,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,387,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_INDEX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,393,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,34,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,42,import org.apache.ambari.logsearch.util.ConfigUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,45,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,120,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_INDEX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,180,queryGenerator.setJSONFacet(solrQuery, jsonHistogramQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,181,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,223,queryGenerator.setFacetField(solrQuery, facetField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,224,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_COUNT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,225,queryGenerator.setFacetLimit(solrQuery, top.intValue());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,269,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,314,queryGenerator.setJSONFacet(solrQuery, jsonUserQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,315,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,338,vBarDataList = bizUtil.buildSummaryForTopCounts(jsonFacetResponse,"Repo","Users");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,353,queryGenerator.setJSONFacet(solrQuery, jsonUserQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,354,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,371,vBarDataList = bizUtil.buildSummaryForTopCounts(jsonFacetResponse,"Repo","Users");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,394,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_INDEX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,403,queryGenerator.setJSONFacet(solrQuery, jsonHistogramQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,404,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,488,uiFieldColumnMapping = bizUtil.sortHashMapByValues(uiFieldColumnMapping);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,555,queryGenerator.setJSONFacet(solrQuery, jsonUserQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,556,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,565,throw restErrorUtil.createRESTException(response);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,572,throw restErrorUtil.createRESTException(response);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,74,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,139,queryGenerator.setMainQuery(logFileTailQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,154,queryGenerator.setRowCount(logFileTailQuery, tail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,161,throw restErrorUtil.createRESTException(ne.getMessage(),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,49,import org.apache.ambari.logsearch.util.ConfigUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,51,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,121,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,129,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,159,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,160,queryGenerator.setFacetField(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,162,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_INDEX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,197,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,212,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,213,queryGenerator.setFacetPivot(solrQuery, 1, hierarchy);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,235,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,262,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,266,queryGenerator.setFacetField(solrQuery, field);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,293,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,426,queryGenerator.setFacetPivot(solrQuery, 1, firstHirarchy,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,461,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,492,queryGenerator.setFacetPivot(solrQuery, 1, firstHirarchy,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,523,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,544,queryGenerator.setFacetField(query, LogSearchConstants.SOLR_LEVEL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,653,throw restErrorUtil.createRESTException("Keyword was not given",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,657,String keyword = solrUtil.escapeForStandardTokenizer(key);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,691,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,697,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,705,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,708,nextPageLogTime = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,727,queryGenerator.setFl(listRemoveIds, LogSearchConstants.ID);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,731,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,737,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,792,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,798,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,809,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,812,String originalKeywordDate = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,824,String keywordDateTime = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,831,String keywordDateTime = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,850,queryGenerator.setFl(sameIdQuery, LogSearchConstants.ID);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,885,throw restErrorUtil.createRESTException("This is first Page Not",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,904,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,910,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,917,lastLogsLogTime = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,933,queryGenerator.setFl(listRemoveIds, LogSearchConstants.ID);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,937,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,943,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1008,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1014,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1024,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1027,String originalKeywordDate = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1039,String keywordDateTime = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1048,String keywordDateTime = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1064,queryGenerator.setFl(sameIdQuery, LogSearchConstants.ID);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1094,throw restErrorUtil.createRESTException("The keyword "+"\""+key+"\""+" was not found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1117,queryGenerator.setMainQuery(logTimeByIdQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1120,queryGenerator.setRowCount(solrQuery, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1139,logTime = dateUtil.convertDateWithMillisecondsToSolrDate(dateOfLogId);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1141,endTimeMinusOneMilli = (String) dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1154,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1194,throw restErrorUtil.createRESTException("LogId not Found",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1204,queryGenerator.setFacetRange(solrQuery, LogSearchConstants.LOGTIME,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1272,queryGenerator.setJSONFacet(solrQuery, jsonHistogramQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1273,queryGenerator.setRowCount(solrQuery,Integer.parseInt(deafalutValue));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1326,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1348,throw restErrorUtil.createRESTException("Unique id is Empty",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1362,throw restErrorUtil.createRESTException("Unique id is Empty",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1388,if (!dateUtil.isDateValid(from) || !dateUtil.isDateValid(to)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1391,throw restErrorUtil.createRESTException("Not valid date format. Valid format should be"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1402,to = dateUtil.addOffsetToDate(to, Long.parseLong(utcOffset),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1404,from = dateUtil.addOffsetToDate(from, Long.parseLong(utcOffset),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1408,String fileName = dateUtil.getCurrentDateInString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1419,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1424,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1428,VSummary vsummary = bizUtil.buildSummaryForLogFile(docList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1491,String logTime = dateUtil.convertSolrDateToNormalDateFormat(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1499,textToSave = bizUtil.convertObjectToNormalText(docList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1503,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1507,return fileUtil.saveToFile(textToSave, fileName, vsummary);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1512,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1530,queryGenerator.setFacetPivot(solrQuery, 1, componentLevelHirachy);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1568,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1586,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1588,queryGenerator.setRowCount(solrQuery, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1614,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1618,queryGenerator.setRowCount(solrQuery, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1665,String fieldsNameStrArry[] = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1672,temp = ConfigUtil.serviceLogsColumnMapping.get(field
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1683,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1693,String excludeArray[] = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1700,String uiField = ConfigUtil.serviceLogsColumnMapping.get(fieldName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1712,Iterator<Entry<String, String>> it = bizUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1745,String value = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1797,queryGenerator.setMainQuery(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1799,queryGenerator.setRowCount(solrQuery, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1808,logTime = dateUtil.convertDateWithMillisecondsToSolrDate(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1817,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1871,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1888,queryGenerator.setRowCount(solrQuery, Integer.parseInt(maxRows));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1905,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1921,queryGenerator.setRowCount(solrQuery, Integer.parseInt(maxRows));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1947,dateUtil.convertDateWithMillisecondsToSolrDate(utc.getTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1948,String from = dateUtil.convertDateWithMillisecondsToSolrDate(utc.getTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1953,String to = dateUtil.convertDateWithMillisecondsToSolrDate(utc.getTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,158,if (jsonUtil.isJSONValid(hadoopServiceConfig)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,186,queryGenerator.setStart(lastPageQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,187,queryGenerator.setRowCount(lastPageQuery, maxRows);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,267,Date date =  dateUtil.getTodayFromDate();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,269,from = dateUtil.convertGivenDateFormatToSolrDateFormat(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,97,queryGenerator.setMainQuery(solrQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,135,filterName = solrUtil.makeSearcableString(filterName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,138,queryGenerator.setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,194,queryGenerator.setMainQuery(userConfigQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,304,queryGenerator.setMainQuery(userListQuery, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,305,queryGenerator.setFacetField(userListQuery, LogSearchConstants.USER_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,31,import org.apache.ambari.logsearch.util.ConfigUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,32,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,98,setMainQuery(solrQuery, givenQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,153,urlHostName = solrUtil.escapeQueryChars(urlHostName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,160,urlComponentName = solrUtil.escapeQueryChars(urlComponentName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,174,file_name = solrUtil.escapeQueryChars(file_name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,351,return solrUtil.escapeForLogMessage(key, str);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,386,String solrValue = PropertiesUtil.getProperty(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,27,import org.apache.ambari.logsearch.util.JSONUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,28,import org.apache.ambari.logsearch.util.QueryBase;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,38,public abstract class QueryGenerationBase extends QueryBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,72,temp = solrUtil.escapeForStandardTokenizer(temp);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,98,filterQuery = solrUtil.orList(operator + field, arrayOfSepratedString,"");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,100,filterQuery = solrUtil.andList(operator + field, arrayOfSepratedString,"");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,238,setStart(solrQuery, startIndex);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,240,setStart(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,244,setRowCount(solrQuery, maxRows);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,246,setRowCount(solrQuery, 10);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,420,return solrUtil.orList(solrFieldName, values,"");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,422,return solrUtil.andList(solrFieldName, values, "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,445,query = solrUtil.orList(solrFieldName, arr,"");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,448,query = solrUtil.andList(solrFieldName, arr, "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,35,import org.apache.ambari.logsearch.util.RESTErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/UserConfigREST.java,47,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,32,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,175,String collectorHosts = PropertiesUtil.getProperty("logsearch.solr.metrics.collector.hosts");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,181,int solrJmxPort = PropertiesUtil.getIntProperty("logsearch.solr.jmx.port");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrMetricsLoader.java,183,String zkConnectString = PropertiesUtil.getProperty("logsearch.solr.zk_connect_string");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,45,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,57,public String convertObjectToNormalText(SolrDocumentList docList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,138,public VSummary buildSummaryForLogFile(SolrDocumentList docList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,196,return field;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,198,if (count > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,199,return String.format("%-" + count + "s", field);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,201,return field;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,27,import java.util.GregorianCalendar;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,35,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,49,public String addOffsetToDate(String date, Long utcOffset, String dateFormat) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,84,return date.getTime() + TimeUnit.MINUTES.toMillis(utcOffset);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,114,public String getCurrentDateInString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,132,public Date getTodayFromDate() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,133,Calendar c = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,135,c.set(Calendar.MINUTE, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,136,c.set(Calendar.SECOND, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,137,return c.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,182,public String convertDateWithMillisecondsToSolrDate(Date date) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,220,public boolean isDateValid(String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,36,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,37,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,48,public Response saveToFile(String text, String fileName, VSummary vsummary) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,142,public File getFileFromClasspath(String filename) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,41,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,42,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,104,public HashMap<String, Object> jsonToMapObject(String jsonStr) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,133,public List<HashMap<String, Object>> jsonToMapObjectList(String jsonStr) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,160,public boolean isJSONValid(String jsonString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,177,public HashMap<String, Object> readJsonFromFile(File jsonFile) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,194,public String mapToJSON(Map<String, Object> map) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,258,public String objToJson(Object obj) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,262,public Object jsonToObj(String json, Class<?> klass) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,20,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,22,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,23,import org.apache.solr.client.solrj.SolrQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,26,public class QueryBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,32,public void setFacetField(SolrQuery solrQuery, String facetField) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,33,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,34,setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,35,solrQuery.set(LogSearchConstants.FACET_FIELD, facetField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,36,setFacetLimit(solrQuery, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,39,public void setJSONFacet(SolrQuery solrQuery, String jsonQuery) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,40,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,41,setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,42,solrQuery.set(LogSearchConstants.FACET_JSON_FIELD, jsonQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,43,setFacetLimit(solrQuery, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,46,public void setFacetSort(SolrQuery solrQuery, String sortType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,47,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,48,solrQuery.setFacetSort(sortType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,53,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,54,setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,55,solrQuery.set(LogSearchConstants.FACET_PIVOT, hirarchy);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,56,solrQuery.set(LogSearchConstants.FACET_PIVOT_MINCOUNT, mincount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,57,setFacetLimit(solrQuery, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,62,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,63,setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,64,solrQuery.set(LogSearchConstants.FACET_DATE, facetField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,65,solrQuery.set(LogSearchConstants.FACET_DATE_START, from);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,66,solrQuery.set(LogSearchConstants.FACET_DATE_END, to);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,67,solrQuery.set(LogSearchConstants.FACET_DATE_GAP, unit);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,68,solrQuery.set(LogSearchConstants.FACET_MINCOUNT, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,69,setFacetLimit(solrQuery, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,74,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,75,setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,76,solrQuery.set(LogSearchConstants.FACET_RANGE, facetField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,77,solrQuery.set(LogSearchConstants.FACET_RANGE_START, from);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,78,solrQuery.set(LogSearchConstants.FACET_RANGE_END, to);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,79,solrQuery.set(LogSearchConstants.FACET_RANGE_GAP, unit);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,80,solrQuery.set(LogSearchConstants.FACET_MINCOUNT, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,81,setFacetLimit(solrQuery, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,84,public void setFacetLimit(SolrQuery solrQuery, int limit) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,85,solrQuery.set("facet.limit", limit);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,89,public void setGroupField(SolrQuery solrQuery, String groupField, int rows) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,90,solrQuery.set(LogSearchConstants.FACET_GROUP, true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,91,solrQuery.set(LogSearchConstants.FACET_GROUP_FIELD, groupField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,92,solrQuery.set(LogSearchConstants.FACET_GROUP_MAIN, true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,93,setRowCount(solrQuery, rows);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,97,public void setMainQuery(SolrQuery solrQuery, String query) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,98,String defalultQuery = "*:*";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,100,solrQuery.setQuery(defalultQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,102,solrQuery.setQuery(query);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,106,public void setStart(SolrQuery solrQuery, int start) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,107,int defaultStart = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,108,if (start > defaultStart) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,109,solrQuery.setStart(start);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,111,solrQuery.setStart(defaultStart);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,116,public void setRowCount(SolrQuery solrQuery, int rows) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,117,if (rows > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,118,solrQuery.setRows(rows);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,120,solrQuery.setRows(0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,121,solrQuery.remove(LogSearchConstants.SORT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,126,public void setFacetFieldWithMincount(SolrQuery solrQuery, String facetField, int minCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,127,solrQuery.setFacet(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,128,setRowCount(solrQuery, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,129,solrQuery.set(LogSearchConstants.FACET_FIELD, facetField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,130,solrQuery.set(LogSearchConstants.FACET_MINCOUNT, minCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,131,setFacetLimit(solrQuery, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,134,public void setFl(SolrQuery solrQuery,String field){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,135,solrQuery.set(LogSearchConstants.FL, field);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,32,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,37,private static Logger logger = Logger.getLogger(RESTErrorUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,39,public WebApplicationException createRESTException(VResponse response) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,43,public WebApplicationException createRESTException(String errorMessage,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,44,MessageEnums messageEnum) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,27,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,28,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,37,public String setField(String fieldName, String value) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,49,public String inList(String fieldName, int[] values) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,69,public String inList(Collection<Long> values) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,92,public String orList(String fieldName, String[] valueList, String wildCard) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,126,public String andList(String fieldName, String[] valueList, String wildCard) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,160,public String escapeQueryChars(String s) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,208,public String escapeForStandardTokenizer(String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,252,public String escapeForLogMessage(String field, String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,264,public String makeSolrSearchString(String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,276,public String makeSolrSearchStringWithoutAsterisk(String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,289,public String makeSearcableString(String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchAuthFailureHandler.java,27,import org.apache.ambari.logsearch.util.RESTErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchAuthFailureHandler.java,29,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchAuthFailureHandler.java,38,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchAuthFailureHandler.java,40,public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchAuthFailureHandler.java,41,AuthenticationException exception) throws IOException, ServletException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,27,import org.apache.ambari.logsearch.util.RESTErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,29,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,36,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,42,private static final Logger logger = Logger.getLogger(LogsearchAuthenticationEntryPoint.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,43,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,105,String hostName = PropertiesUtil.getProperty(HOST_NAME, "localhost");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,111,params.put(NAME_RULES_PARAM,PropertiesUtil.getProperty(NAME_RULES, "DEFAULT"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,112,params.put(TOKEN_VALID_PARAM, PropertiesUtil.getProperty(TOKEN_VALID, "30"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,113,params.put(COOKIE_DOMAIN_PARAM, PropertiesUtil.getProperty(COOKIE_DOMAIN, hostName));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,114,params.put(COOKIE_PATH_PARAM, PropertiesUtil.getProperty(COOKIE_PATH, "/"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,115,params.put(PRINCIPAL_PARAM,PropertiesUtil.getProperty(PRINCIPAL,""));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,116,params.put(KEYTAB_PARAM,PropertiesUtil.getProperty(KEYTAB,""));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,199,KerberosName.setRules(PropertiesUtil.getProperty(NAME_RULES, "DEFAULT"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,233,spnegoEnable = PropertiesUtil.getBooleanProperty(KERBEROS_ENABLE, false);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,236,String keytab = PropertiesUtil.getProperty(KEYTAB);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,237,String principal = PropertiesUtil.getProperty(PRINCIPAL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchKRBAuthenticationFilter.java,238,String hostname = PropertiesUtil.getProperty(HOST_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LdapUtil.java,24,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LdapUtil.java,25,import org.apache.ambari.logsearch.util.XMLPropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LdapUtil.java,97,String ldapConfigFileName = PropertiesUtil.getProperty("logsearch.login.ldap.config", "logsearch-admin-site.xml");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LdapUtil.java,103,new XMLPropertiesUtil().loadFromXml(props, resource.getInputStream());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,24,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAbstractAuthenticationProvider.java,64,boolean isEnable = PropertiesUtil.getBooleanProperty(property, false);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,58,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,61,private UserDetailsService userService;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchAuthenticationProvider.java,120,String jsonStr = jsonUtil.mapToJSON(auditRecord);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,26,import org.apache.ambari.logsearch.util.ExternalServerClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,28,import org.apache.ambari.logsearch.util.PropertiesUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,105,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,111,loginAPIURL = PropertiesUtil.getProperty(AUTH_METHOD_PROP_START_WITH
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,166,String allowedRoleList[] = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,170,jsonUtil.getValuesOfKey(responseJson,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,34,private String dateFormat = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,35,private SimpleDateFormat dateFormatter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,51,dateFormat = (String) mapObjects.get("date_pattern");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,52,if (StringUtils.isEmpty(dateFormat)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,55,logger.info("Date mapper format is " + dateFormat);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,57,if (dateFormat.equalsIgnoreCase("epoch")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,62,dateFormatter = new SimpleDateFormat(dateFormat);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,66,+ dateFormat + ". " + this.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,81,value = dateFormatter.parse(value.toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,90,+ isEpoch + ", dateFormat=" + dateFormat
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/DateUtil.java,42,public static void main(String[] args) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/DateUtil.java,43,Date currentDate = new Date();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/DateUtil.java,44,String fileDateFormat = "yyyy-MM-dd-HH-mm-ss";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/DateUtil.java,45,System.out.println(dateToString(currentDate, fileDateFormat));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,21,import java.io.IOException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,22,import java.io.InputStream;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,23,import java.net.UnknownHostException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,25,import java.util.Map.Entry;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,28,import javax.ws.rs.WebApplicationException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,31,import org.apache.commons.io.IOUtils;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,35,import com.sun.jersey.api.client.Client;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,36,import com.sun.jersey.api.client.ClientHandlerException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,37,import com.sun.jersey.api.client.ClientResponse;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,38,import com.sun.jersey.api.client.UniformInterfaceException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,39,import com.sun.jersey.api.client.WebResource;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,40,import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,41,import com.sun.jersey.api.client.filter.LoggingFilter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,42,import com.sun.jersey.client.apache.ApacheHttpClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,43,import com.sun.jersey.client.apache.config.DefaultApacheHttpClientConfig;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,44,import com.sun.jersey.core.util.MultivaluedMapImpl;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,52,private static final ThreadLocal<Client> localJerseyClient = new ThreadLocal<Client>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,53,private DefaultApacheHttpClientConfig defaultConfig = new DefaultApacheHttpClientConfig();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,64,private Client getJerseyClient() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,65,Client jerseyClient = localJerseyClient.get();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,66,if (jerseyClient == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,67,jerseyClient = ApacheHttpClient.create(defaultConfig);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,68,localJerseyClient.set(jerseyClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,70,return jerseyClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,85,public Object sendGETRequest(String url, Class klass,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,87,throws UnknownHostException, Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,90,String parameters = getQueryParameter(queryParam);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,91,LOG.debug("URL: " + url + " query parameters are : " + parameters);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,92,WebResource.Builder builder = buildWebResourceBuilder(url, queryParam,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,93,username, password);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,94,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,95,return builder.get(klass);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,97,String errMsg = webApplicationExceptionHandler(webApplicationException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,98,url);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,99,throw new Exception(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,101,String errMsg = uniformInterfaceExceptionHandler(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,102,uniformInterfaceException, url);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,103,throw new Exception(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,105,String errMsg = clientHandlerExceptionHandler(clientHandlerException, url);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,106,throw new Exception(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,108,Object response = builder.get(Object.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,109,String errMsg = "URL: " + url + response.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,110,LOG.error(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,111,throw new Exception(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,113,cleanup();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,117,private WebResource.Builder buildWebResourceBuilder(String url,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,118,MultivaluedMapImpl queryParam, String username, String password) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,119,WebResource webResource = getJerseyClient().resource(url);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,122,webResource.addFilter(new LoggingFilter());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,124,getJerseyClient().addFilter(new HTTPBasicAuthFilter(username, password));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,126,if (queryParam != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,127,webResource = webResource.queryParams(queryParam);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,129,WebResource.Builder builder = webResource.getRequestBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,130,return builder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,133,private String webApplicationExceptionHandler(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,134,WebApplicationException webApplicationException, String url) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,135,Object object = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,136,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,137,object = webApplicationException.getResponse().getEntity();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,139,LOG.error(e.getLocalizedMessage());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,141,String errMsg = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,142,if (object != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,143,errMsg = object.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,145,errMsg = webApplicationException.getMessage();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,147,errMsg = "URL: " + url + errMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,148,LOG.error(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,149,return errMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,152,private String uniformInterfaceExceptionHandler(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,153,UniformInterfaceException uniformInterfaceException, String url) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,154,Object object = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,155,String errMsg = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,156,ClientResponse clientResponse = uniformInterfaceException.getResponse();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,158,object = clientResponse.getEntity(Object.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,159,if (object != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,160,errMsg = object.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,163,InputStream inputStream = clientResponse.getEntityInputStream();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,164,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,165,errMsg = IOUtils.toString(inputStream);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,167,LOG.error(e.getLocalizedMessage());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,170,if (errMsg == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,171,errMsg = uniformInterfaceException.getLocalizedMessage();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,173,LOG.error("url :" + url + " Response : " + errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,174,return errMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,177,private String clientHandlerExceptionHandler(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,178,ClientHandlerException clientHandlerException, String url) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,179,String errMsg = clientHandlerException.getLocalizedMessage();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,180,errMsg = "URL: " + url + errMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,181,LOG.error(errMsg);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,182,return errMsg;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,185,private String getQueryParameter(MultivaluedMapImpl queryParam) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,186,StringBuilder builder = new StringBuilder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,187,if (queryParam != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,188,builder.append(" Query param :");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,189,for (Entry<String, List<String>> entry : queryParam.entrySet()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,190,String name = entry.getKey();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,191,builder.append(" name : " + name + " " + "values : [");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,192,List<String> valuesList = entry.getValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,193,if (valuesList != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,194,for (int index = 0; index < valuesList.size(); index++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,195,String value = valuesList.get(index);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,196,if (index > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,197,builder.append(",");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,199,builder.append(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,202,builder.append("]");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,205,return builder.toString();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,208,private void cleanup() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ExternalServerClient.java,209,localJerseyClient.remove();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,40,import org.apache.ambari.logfeeder.AliasUtil.ALIAS_PARAM;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,41,import org.apache.ambari.logfeeder.AliasUtil.ALIAS_TYPE;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/ConfigBlock.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/exception/LogfeederException.java,20,package org.apache.ambari.logfeeder.exception;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,27,import org.apache.ambari.logfeeder.AliasUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,28,import org.apache.ambari.logfeeder.ConfigBlock;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,29,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,30,import org.apache.ambari.logfeeder.MetricCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,31,import org.apache.ambari.logfeeder.OutputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,32,import org.apache.ambari.logfeeder.AliasUtil.ALIAS_PARAM;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,33,import org.apache.ambari.logfeeder.AliasUtil.ALIAS_TYPE;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,34,import org.apache.ambari.logfeeder.exception.LogfeederException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,37,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,38,import org.apache.ambari.logfeeder.MetricCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,39,import org.apache.ambari.logfeeder.exception.LogfeederException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterJSON.java,23,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterJSON.java,24,import org.apache.ambari.logfeeder.exception.LogfeederException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,26,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,27,import org.apache.ambari.logfeeder.MetricCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,28,import org.apache.ambari.logfeeder.exception.LogfeederException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,29,import org.apache.ambari.logfeeder.ConfigBlock;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,30,import org.apache.ambari.logfeeder.InputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,31,import org.apache.ambari.logfeeder.MetricCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,32,import org.apache.ambari.logfeeder.OutputMgr;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/Input.java,33,import org.apache.ambari.logfeeder.exception.LogfeederException;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,36,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/InputMgr.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/InputMgr.java,35,import org.apache.ambari.logfeeder.input.Input;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/InputMgr.java,36,import org.apache.ambari.logfeeder.input.InputFile;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,31,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputS3File.java,32,import org.apache.ambari.logfeeder.s3.S3Util;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,30,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/FetchConfigFromSolr.java,29,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogfeederScheduler.java,25,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/ApplyLogFilter.java,25,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/filter/FilterLogData.java,24,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,26,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldName.java,24,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperFieldValue.java,24,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeederAMSClient.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/MetricCount.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/MetricsMgr.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,27,import org.apache.ambari.logfeeder.ConfigBlock;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,28,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/Output.java,29,import org.apache.ambari.logfeeder.MetricCount;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,29,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,33,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,28,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/OutputMgr.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/OutputMgr.java,33,import org.apache.ambari.logfeeder.output.Output;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,30,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,33,import org.apache.ambari.logfeeder.s3.S3Util;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,36,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/s3/AWSUtil.java,19,package org.apache.ambari.logfeeder.s3;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/AliasUtil.java,19,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeederUtil.java,20,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeederUtil.java,44,import org.apache.ambari.logfeeder.util.PlaceholderUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/MurmurHash.java,18,package org.apache.ambari.logfeeder;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/s3/S3Util.java,19,package org.apache.ambari.logfeeder.s3;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/SolrUtil.java,24,import org.apache.ambari.logfeeder.LogFeederUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,26,import java.util.Timer;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,70,Timer timer = new Timer();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,71,timer.schedule(new ManageStartEndTime(), 0, 40000);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,148,private URI findWebResourceBase(ClassLoader classLoader) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,33,public static final String SERVICE = "S";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,44,public static final String USER_CONFIG_DASHBOARD = "dashboard";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,45,public static final String USER_CONFIG_HISTORY = "history";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,80,public static final String GLOBAL_START_TIME = "globalStartTime";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,81,public static final String GLOBAL_END_TIME = "globalEndTime";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,130,public static final String FACET_LIMIT = "facet.limit";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/UserSessionInfo.java,25,public class UserSessionInfo implements Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/UserSessionInfo.java,39,public String getUsername() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/UserSessionInfo.java,40,if (user != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/UserSessionInfo.java,41,return user.getUsername();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,19,package org.apache.ambari.logsearch.common;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,21,import org.apache.ambari.logsearch.security.context.LogsearchContextHolder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,22,import org.apache.ambari.logsearch.security.context.LogsearchSecurityContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,24,public class LogsearchContextUtil {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,29,private LogsearchContextUtil() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,32,public static String getCurrentUsername() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,33,LogsearchSecurityContext context = LogsearchContextHolder.getSecurityContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,34,if (context != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,35,UserSessionInfo userSession = context.getUserSession();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,36,if (userSession != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,37,return userSession.getUsername();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,40,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,43,public static UserSessionInfo getCurrentUserSession() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,44,UserSessionInfo userSession = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,45,LogsearchSecurityContext context = LogsearchContextHolder.getSecurityContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,46,if (context != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,47,userSession = context.getUserSession();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,49,return userSession;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,52,public static RequestContext getCurrentRequestContext() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,53,LogsearchSecurityContext context = LogsearchContextHolder.getSecurityContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,54,if (context != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,55,return context.getRequestContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogsearchContextUtil.java,57,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,23,import java.util.GregorianCalendar;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,26,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,29,static Logger logger = Logger.getLogger(ManageStartEndTime.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,31,public static Date startDate = new Date();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,33,public static Date endDate = new Date();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,35,public ManageStartEndTime() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,36,intailizeStartEndTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,40,public void run() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,41,if (startDate == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,42,intailizeStartEndTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,44,adjustStartEndTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,48,private void adjustStartEndTime() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,49,startDate = addSecondsToDate(startDate, 40);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,50,endDate = addHoursToDate(startDate, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,53,private Date addSecondsToDate(Date date, int i) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,54,GregorianCalendar greorianCalendar = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,55,greorianCalendar.setTime(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,56,greorianCalendar.add(GregorianCalendar.SECOND, i);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,57,return greorianCalendar.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,60,private Date addHoursToDate(Date date, int i) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,61,GregorianCalendar greorianCalendar = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,62,greorianCalendar.setTime(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,63,greorianCalendar.add(GregorianCalendar.HOUR_OF_DAY, i);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,64,return greorianCalendar.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,67,private void intailizeStartEndTime() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,69,endDate = new Date();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ManageStartEndTime.java,70,startDate = addHoursToDate(endDate, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,26,DATA_NOT_FOUND("logsearch.error.data_not_found", "Data not found"), OPER_NOT_ALLOWED_FOR_STATE(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,37,SOLR_ERROR("logsearch.solr.error","Something went wrong, For more details check the logs or configuration."),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,40,INVALID_PASSWORD("logsearch.validation.invalid_password", "Invalid password"), INVALID_INPUT_DATA(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,49,String rbKey;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,50,String messageDesc;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/MessageEnums.java,52,MessageEnums(String rbKey, String messageDesc) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,19,package org.apache.ambari.logsearch.common;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,21,import java.io.Serializable;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,23,public class RequestContext implements Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,24,private static final long serialVersionUID = -7083383106845193385L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,25,String ipAddress = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,26,String msaCookie = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,27,String userAgent = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,28,String requestURL = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,29,String serverRequestId = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,30,String clientTimeOffset;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,31,boolean isSync = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,32,long startTime = System.currentTimeMillis();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,37,public String getIpAddress() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,38,return ipAddress;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,44,public void setIpAddress(String ipAddress) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,45,this.ipAddress = ipAddress;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,51,public String getMsaCookie() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,52,return msaCookie;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,58,public void setMsaCookie(String msaCookie) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,59,this.msaCookie = msaCookie;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,65,public String getUserAgent() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,66,return userAgent;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,72,public void setUserAgent(String userAgent) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,73,this.userAgent = userAgent;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,79,public String getServerRequestId() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,80,return serverRequestId;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,86,public void setServerRequestId(String serverRequestId) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,87,this.serverRequestId = serverRequestId;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,93,public boolean isSync() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,94,return isSync;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,100,public void setSync(boolean isSync) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,101,this.isSync = isSync;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,107,public String getRequestURL() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,108,return requestURL;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,114,public void setRequestURL(String requestURL) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,115,this.requestURL = requestURL;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,121,public long getStartTime() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,122,return startTime;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,128,public void setStartTime(long startTime) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,129,this.startTime = startTime;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,138,public String toString() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,139,return "RequestContext [ipAddress=" + ipAddress + ", msaCookie=" + msaCookie + ", userAgent=" + userAgent
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,140,+ ", requestURL=" + requestURL + ",serverRequestId=" + serverRequestId + ", isSync=" + isSync
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/RequestContext.java,141,+ ", startTime=" + startTime + "]";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,52,if (request.getParameter("startIndex") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,53,&& (!request.getParameter("startIndex").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,54,this.startIndex = new Integer(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,55,request.getParameter("startIndex"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,57,if (request.getParameter("page") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,58,&& (!request.getParameter("page").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,61,if (request.getParameter("pageSize") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,62,&& (!request.getParameter("pageSize").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,65,this.maxRows = PropertiesUtil.getIntProperty("db.maxResults",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,66,50);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,73,if (request.getParameter("sortBy") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,74,&& (!request.getParameter("sortBy").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,77,if (request.getParameter("sortType") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,78,&& (!request.getParameter("sortType").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,83,if (request.getParameter("start_time") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,84,&& (!request.getParameter("start_time").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,88,if (request.getParameter("end_time") != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,89,&& (!request.getParameter("end_time").isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,167,this.addParam("treeParams", StringEscapeUtils
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,168,.unescapeHtml(request.getParameter("treeParams")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,175,this.addParam("iMessage", StringEscapeUtils.unescapeXml(request
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,176,.getParameter("iMessage")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,177,this.addParam("gEMessage", StringEscapeUtils
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,178,.unescapeXml(request.getParameter("gEMessage")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,179,this
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,180,.addParam("eMessage", StringEscapeUtils.unescapeXml(request
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,181,.getParameter("eMessage")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,188,this.addParam("excludeQuery", StringEscapeUtils.unescapeXml(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,189,request.getParameter("excludeQuery")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,190,this.addParam("includeQuery", StringEscapeUtils.unescapeXml(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,191,request.getParameter("includeQuery")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,199,this.addParam("columnQuery", StringEscapeUtils
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,200,.unescapeXml(request.getParameter("columnQuery")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,201,this.addParam("iMessage", StringEscapeUtils.unescapeXml(request
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,202,.getParameter("iMessage")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,203,this.addParam("gEMessage", StringEscapeUtils
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,204,.unescapeXml(request.getParameter("gEMessage")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,205,this.addParam("eMessage", StringEscapeUtils.unescapeXml(request
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,206,.getParameter("eMessage")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,209,this.addParam("excludeQuery", StringEscapeUtils.unescapeXml(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,210,request.getParameter("excludeQuery")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,211,this.addParam("includeQuery", StringEscapeUtils.unescapeXml(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,212,request.getParameter("includeQuery")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,223,if (solrValue == null || solrValue.isEmpty()){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,259,public Object removeParam(String name) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/SearchCriteria.java,260,return paramList.remove(name);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,27,import org.apache.ambari.logsearch.manager.MgrBase.LOG_TYPE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,38,super(LOG_TYPE.AUDIT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,45,String collection = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,47,String aliasNameIn = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,49,String rangerAuditCollection = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,51,String splitInterval = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,53,String configName = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,55,int numberOfShards = PropertiesUtil.getIntProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,57,int replicationFactor = PropertiesUtil.getIntProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,62,boolean createAlias = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,63,if (aliasNameIn != null && rangerAuditCollection != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,64,&& rangerAuditCollection.trim().length() > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,65,createAlias = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,68,setupCollections(splitInterval, configName, numberOfShards,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,69,replicationFactor, needToPopulateSchemaField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,70,if(createAlias) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,71,Collection<String> collectionsIn = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,72,collectionsIn.add(collection);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,73,collectionsIn.add(rangerAuditCollection.trim());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,77,logger.error(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,79,+ solrUrl + ", zkConnectString=" + zkConnectString
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,80,+ ", collection=" + collection, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,24,import org.apache.ambari.logsearch.manager.MgrBase.LOG_TYPE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,32,static private Logger logger = Logger.getLogger(ServiceLogsSolrDao.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,35,super(LOG_TYPE.SERVICE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,43,String collection = PropertiesUtil.getProperty("logsearch.solr.collection.service.logs",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,45,String splitInterval = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,47,String configName = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,49,int numberOfShards = PropertiesUtil.getIntProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,51,int replicationFactor = PropertiesUtil.getIntProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,56,setupCollections(splitInterval, configName, numberOfShards,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,57,replicationFactor,true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,59,logger.error(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,61,+ solrUrl + ", zkConnectString=" + zkConnectString
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,62,+ ", collection=" + collection, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,26,import java.util.Iterator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,29,import org.apache.ambari.logsearch.common.LogsearchContextUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,31,import org.apache.ambari.logsearch.manager.MgrBase.LOG_TYPE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,36,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,62,static private Logger logger = Logger.getLogger(SolrDaoBase.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,64,private static Logger logPerformance = Logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,65,.getLogger("org.apache.ambari.logsearch.performance");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,69,protected LOG_TYPE logType;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,72,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,75,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,78,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,80,String collectionName = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,82,String aliasName = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,83,Collection<String> aliasCollectionList = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,85,private SolrClient solrClient = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,86,CloudSolrClient solrClouldClient = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,88,boolean isSolrCloud = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,89,String solrDetail = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,91,boolean isSolrInitialized = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,93,private boolean setup_status = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,97,int SETUP_RETRY_SECOND = 30;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,98,int ALIAS_SETUP_RETRY_SECOND = 30*60; //30 minutes
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,100,private boolean isZkConnectString=false;//by default its false
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,103,public SolrDaoBase(LOG_TYPE logType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,107,public SolrClient connectToSolr(String url, String zkConnectString,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,108,String collection) throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,110,solrDetail = "zkConnectString=" + zkConnectString + ", collection=" + collection
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,111,+ ", url=" + url;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,114,if (stringUtil.isEmpty(collection)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,115,throw new Exception("For solr, collection name is mandatory. "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,116,+ solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,119,if (!stringUtil.isEmpty(zkConnectString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,120,isZkConnectString=true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,122,logger.info("Using zookeepr. " + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,129,if (stringUtil.isEmpty(url)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,130,throw new Exception("Both zkConnectString and URL are empty. zkConnectString="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,131,+ zkConnectString + ", collection=" + collection + ", url="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,132,+ url);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,144,public SolrClient getSolrClient() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,154,public boolean checkSolrStatus(int waitDurationMS) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,165,logger.info("checkSolrStatus(): Solr getCollections() is success. solr="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,166,+ solrDetail
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,167,+ ", collectionList="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,168,+ collectionList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,176,logger.error("Solr is not reachable even after "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,178,+ " ms. If you are using alias, then you might have to restart LogSearch after Solr is up and running. solr="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,179,+ solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,182,logger.warn("Solr is not not reachable yet. getCollections() attempt count="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,183,+ pingCount
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,184,+ ". Will sleep for "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,185,+ waitIntervalMS
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,186,+ " ms and try again." + " solr=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,197,public void setupAlias(final String aliasNameIn, final Collection<String> collectionListIn ) throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,198,if( aliasNameIn == null || collectionListIn== null || collectionListIn.size() == 0 || solrClouldClient == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,199,logger.info("Will not create alias " + aliasNameIn + " for "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,200,+ (collectionListIn==null?null: collectionListIn.toString()) + ", solrCloudClient=" + solrClouldClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,203,logger.info("setupAlias " + aliasNameIn + " for " + (collectionListIn==null?null: collectionListIn.toString()));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,204,aliasName = aliasNameIn;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,205,aliasCollectionList = collectionListIn;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,211,logger.info("Started monitoring thread to check availability of Solr server. alias="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,212,+ aliasNameIn + ", collections=" + collectionListIn.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,216,int count = createAlias(aliasNameIn,collectionListIn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,219,if( count == collectionListIn.size()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,220,logger.info("Setup for alias " + aliasNameIn
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,221,+ " is successful. Exiting setup retry thread. Collections=" + collectionListIn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,226,logger.warn("Not able to create alias="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,227,+ aliasNameIn + ", retryCount=" + retryCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,235,logger.info("Sleep interrupted while setting up alias "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,236,+ aliasNameIn);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,244,setupThread.start();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,254,protected int createAlias(String aliasNameIn,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,255,Collection<String> collectionListIn) throws SolrServerException, IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,256,List<String> collections = getCollections();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,257,List<String> collectionToAdd = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,258,for (String col : collections) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,259,if( collectionListIn.contains(col)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,260,collectionToAdd.add(col);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,264,if( collectionToAdd.size() > 0 ) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,265,for (String col : collectionToAdd) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,266,if(collectionsCSV == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,267,collectionsCSV = col;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,269,collectionsCSV = collectionsCSV + ","  + col;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,277,logger.error("Error creating alias. alias="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,278,+ aliasNameIn + ", collectionList=" + collectionsCSV
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,279,+ ", solrDetail=" + solrDetail + ", response="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,280,+ createResponse);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,284,if( collectionToAdd.size() == collectionListIn.size()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,285,logger.info("Created alias for all collections. alias=" + aliasNameIn + ", collectionsCSV="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,286,+ collectionsCSV + ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,288,logger.info("Created alias for " + collectionToAdd.size() + " out of " +
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,289,+ collectionListIn.size() + " collections. alias=" + aliasNameIn
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,290,+ ", collectionsCSV=" + collectionsCSV + ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,295,public void setupCollections(final String splitMode, final String configName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,296,final int numberOfShards, final int replicationFactor,boolean needToPopulateSchemaField) throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,298,setup_status = createCollectionsIfNeeded(splitMode, configName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,299,numberOfShards, replicationFactor);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,300,logger.info("Setup status for " + collectionName + " is " + setup_status);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,301,if (!setup_status) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,306,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,307,.info("Started monitoring thread to check availability of Solr server. collection="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,308,+ collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,314,setup_status = createCollectionsIfNeeded(splitMode, configName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,315,numberOfShards, replicationFactor);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,316,if (setup_status) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,317,logger.info("Setup for collection " + collectionName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,318,+ " is successful. Exiting setup retry thread");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,322,logger.info("Sleep interrupted while setting up collection "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,323,+ collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,326,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,327,.error("Error setting up collection=" + collectionName, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,329,logger.error("Error setting collection. collection="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,330,+ collectionName + ", retryCount=" + retryCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,338,if(needToPopulateSchemaField){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,343,public boolean createCollectionsIfNeeded(final String splitMode,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,344,final String configName, final int numberOfShards,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,345,final int replicationFactor) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,349,if (splitMode.equalsIgnoreCase("none")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,351,result = createCollection(collectionName, configName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,352,numberOfShards, replicationFactor, allCollectionList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,354,result = setupCollectionsWithImplicitRouting(splitMode,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,355,configName, numberOfShards, replicationFactor, allCollectionList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,358,logger.error("Error creating collection. collectionName="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,359,+ collectionName, ex);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,364,public List<String> getCollections() throws SolrServerException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,370,logger.error("Error getting collection list from solr.  response="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,371,+ response);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,376,List<String> allCollectionList = (List<String>) response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,377,.getResponse().get("collections");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,385,public boolean setupCollectionsWithImplicitRouting(String splitMode,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,386,String configName, int numberOfShards, int replicationFactor,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,388,logger.info("setupCollectionsWithImplicitRouting(). collectionName="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,389,+ collectionName + ", numberOfShards=" + numberOfShards);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,390,return createCollectionWithImplicitRoute(collectionName, configName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,391,numberOfShards, replicationFactor, allCollectionList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,394,public boolean createCollectionWithImplicitRoute(String colName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,395,String configName, int numberOfShards, int replicationFactor,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,396,List<String> allCollectionList) throws SolrServerException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,397,IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,402,String shardsListStr = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,405,if (i != 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,406,shardsListStr += ",";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,408,String shard = "shard" + i;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,409,shardsListStr += shard;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,410,shardsList.add(shard);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,414,if (!allCollectionList.contains(colName)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,415,logger.info("Creating collection " + colName + ", shardsList="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,416,+ shardsList + ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,418,collectionCreateRequest.setCollectionName(colName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,421,collectionCreateRequest.setMaxShardsPerNode(numberOfShards);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,425,collectionCreateRequest.setMaxShardsPerNode(replicationFactor
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,428,CollectionAdminResponse createResponse = collectionCreateRequest
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,429,.process(solrClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,432,logger.error("Error creating collection. collectionName="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,433,+ colName + ", shardsList=" + shardsList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,434,+ ", solrDetail=" + solrDetail + ", response="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,435,+ createResponse);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,437,logger.info("Created collection " + colName + ", shardsList="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,438,+ shardsList + ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,441,logger.info("Collection "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,442,+ colName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,443,+ " is already there. Will check whether it has the required shards");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,448,logger.info("Going to add Shard " + shard
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,449,+ " to collection " + collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,453,CollectionAdminResponse response = createShardRequest
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,454,.process(solrClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,456,logger.error("Error creating shard " + shard
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,457,+ " in collection " + collectionName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,458,+ ", response=" + response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,459,+ ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,463,logger.info("Successfully created shard " + shard
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,464,+ " in collection " + collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,467,logger.error("Error creating shard " + shard
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,468,+ " in collection " + collectionName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,469,+ ", solrDetail=" + solrDetail, t);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,479,public Collection<String> getShards() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,488,Collection<Slice> slices = reader.getClusterState().getSlices(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,489,collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,490,Iterator<Slice> iter = slices.iterator();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,492,while (iter.hasNext()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,493,Slice slice = iter.next();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,495,logger.info("colName=" + collectionName + ", slice.name="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,498,+ ", replica.state=" + replica.getStr("state"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,505,public boolean createCollection(String colName, String configName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,506,int numberOfShards, int replicationFactor,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,507,List<String> allCollectionList) throws SolrServerException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,508,IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,510,if (allCollectionList.contains(colName)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,511,logger.info("Collection " + colName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,512,+ " is already there. Won't create it");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,516,logger.info("Creating collection " + colName + ", numberOfShards="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,517,+ numberOfShards + ", replicationFactor=" + replicationFactor
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,518,+ ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,521,collectionCreateRequest.setCollectionName(colName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,525,collectionCreateRequest.setMaxShardsPerNode(replicationFactor
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,527,CollectionAdminResponse createResponse = collectionCreateRequest
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,528,.process(solrClient);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,530,logger.error("Error creating collection. collectionName=" + colName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,531,+ ", solrDetail=" + solrDetail + ", response="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,532,+ createResponse);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,535,logger.info("Created collection " + colName + ", numberOfShards="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,536,+ numberOfShards + ", replicationFactor="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,537,+ replicationFactor + ", solrDetail=" + solrDetail);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,543,throws SolrServerException, IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,547,QueryResponse queryResponse = solrClient.query(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,548,METHOD.POST);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,551,logPerformance.info("\n Username :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,553,+ " Event :- " + event + " SolrQuery :- " + solrQuery
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,554,+ "\nQuery Time Execution :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,556,+ " Total Time Elapsed is :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,557,+ queryResponse.getElapsedTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,561,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,568,throws SolrServerException, IOException, SolrException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,570,logPerformance.info("\n Username :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,573,+ " Total Time Elapsed is :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,574,+ updateResoponse.getElapsedTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,579,public UpdateResponse removeDoc(String query) throws SolrServerException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,580,IOException, SolrException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,583,logPerformance.info("\n Username :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,586,+ " Total Time Elapsed is :- "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,587,+ updateResoponse.getElapsedTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,605,logger.info("Creating thread to populated fields for collection="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,607,Thread fieldPopulationThread = new Thread("populated_fields_"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,611,logger.info("Started thread to get fields for collection="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,629,logger.error("Error while populating fields for collection "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,637,logger.info("Exiting thread for populating fields. collection="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,659,logger.info("populateSchemaFields() collection="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,660,+ collectionName + ", fields=" + namedList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,663,logger.error(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,665,+ collectionName, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,668,ConfigUtil.extractSchemaFieldsName(namedList.toString(),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,43,import org.apache.ambari.logsearch.manager.MgrBase.LOG_TYPE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,51,static private Logger logger = Logger.getLogger(UserConfigSolrDao.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,55,super(LOG_TYPE.SERVICE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,63,String collection = PropertiesUtil.getProperty("logsearch.solr.collection.history",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,65,String configName = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,67,int replicationFactor = PropertiesUtil.getIntProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,74,setupCollections(splitInterval, configName, numberOfShards,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,75,replicationFactor,true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,79,logger.error(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,81,+ solrUrl + ", zkConnectString=" + zkConnectString
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,82,+ ", collection=" + collection, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,94,public void saveUserFiter(VLogfeederFilterWrapper logfeederFilterWrapper) throws SolrException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,95,SolrServerException, IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,107,public void deleteUserConfig(String id) throws SolrException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,108,SolrServerException, IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,113,public VLogfeederFilterWrapper getUserFilter() throws SolrServerException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,114,IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,116,String filterName = LogSearchConstants.LOGFEEDER_FILTER_NAME;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,119,String fq = LogSearchConstants.ROW_TYPE + ":" + filterName;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,125,if (documentList != null && documentList.size() > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,128,HashMap<String, Object> configMap = (HashMap<String, Object>) jsonUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,129,.jsonToMapObject(configJson);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,131,logfeederFilterWrapper = (VLogfeederFilterWrapper) jsonUtil.jsonToObj(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,132,json, VLogfeederFilterWrapper.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,136,String logfeederDefaultLevels = PropertiesUtil.getProperty(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,138,JSONArray levelJsonArray = new JSONArray();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,139,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,140,String levelArray[] = logfeederDefaultLevels.split(",");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,141,for (String level : levelArray) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,142,levelJsonArray.put(level.toUpperCase());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,145,logger.error("Error spliting logfeederDefaultLevels="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,146,+ logfeederDefaultLevels, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,157,.getJSONObject("service");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,162,.getJSONArray("components");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,174,logfeederFilterWrapper = (VLogfeederFilterWrapper) jsonUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,175,.jsonToObj(jsonValue.toString(), VLogfeederFilterWrapper.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,177,saveUserFiter(logfeederFilterWrapper);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,180,logger.error("Error parsing JSON. key=" + key + ", componentArray="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,181,+ componentArray, je);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,188,public String getHadoopServiceConfigJSON() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,194,.getFile());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,24,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,29,import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,35,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,48,private static final Md5PasswordEncoder md5Encoder = new Md5PasswordEncoder();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,51,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,54,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,57,FileUtil fileUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,60,LogsearchFileAuthenticationProvider fileAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,62,private HashMap<String, Object> userInfos = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,71,String USER_PASS_JSON_FILE_NAME = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,72,.getProperty("logsearch.login.credentials.file");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,73,logger.info("USER PASS JSON  file NAME:" + USER_PASS_JSON_FILE_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,74,File jsonFile = fileUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,75,.getFileFromClasspath(USER_PASS_JSON_FILE_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,77,logger.fatal("user_pass json file not found in classpath :"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,78,+ USER_PASS_JSON_FILE_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,81,userInfos = jsonUtil.readJsonFromFile(jsonFile);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,82,userList = (ArrayList<HashMap<String, String>>) userInfos
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,83,.get("users");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,98,logger.error("Error while reading user prop file :"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,99,+ exception.getMessage());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,100,userInfos = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,115,HashMap<String, Object> userInfo = this.findByusername(username);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,119,user.setFirstName(userInfo.get(UserInfoAttributes.NAME) != null ? (String) userInfo
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,120,.get(UserInfoAttributes.NAME) : "Unknown");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,121,user.setLastName(userInfo.get(UserInfoAttributes.NAME) != null ? (String) userInfo
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,122,.get(UserInfoAttributes.NAME) : "Unknown");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,123,user.setUsername(userInfo.get(UserInfoAttributes.USER_NAME) != null ? (String) userInfo
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,124,.get(UserInfoAttributes.USER_NAME) : "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,125,user.setPassword(userInfo.get(UserInfoAttributes.ENC_PASSWORD) != null ? (String) userInfo
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,126,.get(UserInfoAttributes.ENC_PASSWORD) : "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,133,ArrayList<Privilege> plist = new ArrayList<Privilege>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,134,plist.add(priv);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,135,r.setPrivileges(plist);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,136,List<GrantedAuthority> roles = new ArrayList<GrantedAuthority>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,137,roles.add(r);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,138,user.setAuthorities(roles);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,146,public HashMap<String, Object> findByusername(final String username) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,147,if (this.userList == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,151,HashMap<String, Object> userInfo = (HashMap<String, Object>) CollectionUtils
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,152,.find(this.userList, new Predicate() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,154,public boolean evaluate(Object args) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,155,HashMap<String, Object> tmpuserInfo = (HashMap<String, Object>) args;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,156,String objUsername = (String) tmpuserInfo
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,157,.get(UserInfoAttributes.USER_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,158,if (objUsername != null && username != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,159,return username.equalsIgnoreCase(objUsername);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,161,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,171,String encPassword = user.get(UserInfoAttributes.ENC_PASSWORD);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,172,String username = user.get(UserInfoAttributes.USER_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,173,String password = user.get(UserInfoAttributes.PASSWORD);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,174,if (!stringUtil.isEmpty(password)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,175,encPassword = encryptPassword(username, password);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,176,user.put(UserInfoAttributes.PASSWORD, "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,177,user.put(UserInfoAttributes.ENC_PASSWORD, encPassword);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,180,if (stringUtil.isEmpty(password) && stringUtil.isEmpty(encPassword)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,182,logger.error("Password is empty or null for username : "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,183,+ username);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,195,String saltEncodedpasswd = md5Encoder
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,196,.encodePassword(password, username);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,32,import org.apache.ambari.logsearch.util.ConfigUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,33,import org.apache.ambari.logsearch.util.DateUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,35,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,55,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,58,QueryGeneration queryGenerator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,61,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,64,DateUtil dateUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,66,private static Logger logger = Logger.getLogger(GraphDataGenerator.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,75,public VBarDataList getAnyGraphData(SearchCriteria searchCriteria,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,76,SolrDaoBase solrDaoBase, SolrQuery solrQuery) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,85,typeXAxis = (stringUtil.isEmpty(typeXAxis)) ? "string" : typeXAxis;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,93,GRAPH_TYPE garphType = getGraphType(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,96,return normalGraph(xAxisField, yAxisField, from, to, solrDaoBase,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,97,typeXAxis, fieldTime, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,99,return rangeNonStackGraph(xAxisField, yAxisField, from, to, unit,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,100,solrDaoBase, typeXAxis, fieldTime, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,102,return nonRangeStackGraph(xAxisField, yAxisField, stackField, from, to,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,103,solrDaoBase, typeXAxis, fieldTime, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,113,private GRAPH_TYPE getGraphType(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,115,GRAPH_TYPE graphType = GRAPH_TYPE.UNKNOWN;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,125,if (stringUtil.isEmpty(xAxisField) || stringUtil.isEmpty(yAxisField)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,126,graphType = GRAPH_TYPE.UNKNOWN;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,131,graphType = GRAPH_TYPE.NORMAL_GRAPH;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,136,graphType = GRAPH_TYPE.RANGE_NON_STACK_GRAPH;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,141,graphType = GRAPH_TYPE.NON_RANGE_STACK_GRAPH;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,146,graphType = GRAPH_TYPE.RANGE_STACK_GRAPH;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,153,private VBarDataList normalGraph(String xAxisField, String yAxisField, String from,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,154,String to, SolrDaoBase solrDaoBase, String typeXAxis, String fieldTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,155,SolrQuery solrQuery) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,161,queryGenerator.setSingleIncludeFilter(solrQuery, fieldTime, "[" + from
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,162,+ " TO " + to + "]");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,164,|| typeXAxis.contains("text")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,219,logger.error("Got exception for solr query :" + query,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,220,e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,225,String jsonQuery = queryGenerator.buildJSONFacetAggregatedFuncitonQuery(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,226,yAxis, xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,230,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,231,.getResponse().get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,232,if (jsonFacetResponse.toString().equals("{count=0}")){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,247,logger.error("Got exception for solr query :" + query,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,248,e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,255,private VBarDataList nonRangeStackGraph(String xAxisField, String yAxisField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,256,String stackField, String from, String to, SolrDaoBase solrDaoBase,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,257,String typeXAxis, String fieldTime, SolrQuery solrQuery) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,260,String mainQuery = queryGenerator.buildInclusiveRangeFilterQuery(fieldTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,261,from, to);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,267,jsonQuery = queryGenerator.buidlJSONFacetRangeQueryForNumber(stackField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,268,xAxisField, function);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,270,jsonQuery = queryGenerator.buildJsonFacetTermsRangeQuery(stackField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,271,xAxisField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,284,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,285,.getResponse().get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,286,if (jsonFacetResponse == null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,287,|| jsonFacetResponse.toString().equals("{count=0}")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,290,extractNonRangeStackValuesFromBucket(jsonFacetResponse, stackField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,291,vGraphData, typeXAxis);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,293,&& LogSearchConstants.SOLR_LEVEL.equalsIgnoreCase(xAxisField)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,324,logger.error("Got exception for solr query :" + query,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,325,e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,326,throw restErrorUtil.createRESTException(MessageEnums.DATA_NOT_FOUND
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,327,.getMessage().getMessage(), MessageEnums.DATA_NOT_FOUND);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,332,private VBarDataList rangeNonStackGraph(String xAxisField, String yAxisField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,333,String from, String to, String unit, SolrDaoBase solrDaoBase,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,334,String typeXAxis, String fieldTime, SolrQuery solrQuery) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,342,return normalGraph(xAxisField, yAxisField, from, to, solrDaoBase,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,343,typeXAxis, fieldTime, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,372,logger.error("Got exception for solr query :" + solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,373,e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,383,SolrQuery solrQuery) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,388,String jsonHistogramQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,389,.buildJSONFacetTermTimeRangeQuery(stackField, xAxisField, from, to,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,390,unit).replace("\\", "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,396,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,397,.getResponse().get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,398,if (jsonFacetResponse == null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,399,|| jsonFacetResponse.toString().equals("{count=0}")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,403,extractRangeStackValuesFromBucket(jsonFacetResponse, "x", "y",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,404,histogramData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,409,logger.error("Got exception for solr query :" + solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,410,e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,28,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,31,import org.apache.solr.client.solrj.response.RangeFacet;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,36,public class GraphDataGeneratorBase extends MgrBase {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,40,DateUtil dateUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,43,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,45,private static String BUCKETS = "buckets";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,47,public static enum DATA_TYPE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,48,LONG {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,50,String getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,51,return "long";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,54,DOUBLE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,56,String getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,57,return "double";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,60,FLOAT {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,62,String getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,63,return "long";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,66,INT {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,68,String getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,69,return "long";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,73,abstract String getType();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,76,public static enum GRAPH_TYPE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,77,UNKNOWN {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,79,int getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,80,return 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,83,NORMAL_GRAPH {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,85,int getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,86,return 1;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,89,RANGE_NON_STACK_GRAPH {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,91,int getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,92,return 2;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,95,NON_RANGE_STACK_GRAPH {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,97,int getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,98,return 3;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,101,RANGE_STACK_GRAPH {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,103,int getType() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,104,return 4;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,107,abstract int getType();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,111,protected void extractRangeStackValuesFromBucket(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,112,SimpleOrderedMap<Object> jsonFacetResponse, String outerField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,115,NamedList<Object> stack = (NamedList<Object>) jsonFacetResponse
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,116,.get(outerField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,125,.toString().toUpperCase() : "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,128,NamedList<Object> innerFiledValue = (NamedList<Object>) level
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,129,.get(innerField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,131,ArrayList<Object> levelBuckets = (ArrayList<Object>) innerFiledValue
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,132,.get(BUCKETS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,137,String innerName = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,138,.convertDateWithMillisecondsToSolrDate((Date) countValue
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,139,.getVal(0));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,140,String innerValue = countValue.getVal(1) != null ? countValue
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,141,.getVal(1).toString() : "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,142,VNameValue vNameValue = new VNameValue(innerName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,143,innerValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,159,protected boolean extractNonRangeStackValuesFromBucket(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,160,SimpleOrderedMap<Object> jsonFacetResponse, String level,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,167,NamedList<Object> levelList = (NamedList<Object>) jsonFacetResponse
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,168,.get(level);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,173,SimpleOrderedMap<Object> valueCount = (SimpleOrderedMap<Object>) bucketList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,174,.get(index);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,179,.toString().trim() : "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,191,SimpleOrderedMap<Object> valueCountMap = (SimpleOrderedMap<Object>) valueCount
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,192,.getVal(2);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,194,ArrayList<Object> buckets = (ArrayList<Object>) valueCountMap
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,195,.get(BUCKETS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,198,SimpleOrderedMap<Object> innerValueCount = (SimpleOrderedMap<Object>) buckets
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,199,.get(innerIndex);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,201,String innerName = innerValueCount.getVal(0) != null ? innerValueCount
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,203,: "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,204,String innerValue = innerValueCount.getVal(1) != null ? innerValueCount
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,206,: "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,207,VNameValue nameValue = new VNameValue(innerName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,208,innerValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,226,protected boolean extractValuesFromJson(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,227,SimpleOrderedMap<Object> jsonFacetResponse, String level,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,228,VBarGraphData histogramData, List<RangeFacet.Count> counts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,229,histogramData.setName(level);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,230,Collection<VNameValue> levelCounts = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,231,histogramData.setDataCounts(levelCounts);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,232,boolean zeroFlag = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,233,if (jsonFacetResponse.get(level).toString().equals("{count=0}")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,234,if (counts != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,235,for (RangeFacet.Count date : counts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,236,VNameValue nameValue = new VNameValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,237,nameValue.setName(date.getValue());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,238,nameValue.setValue("0");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,239,levelCounts.add(nameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,242,return false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,244,NamedList<Object> levelList = (NamedList<Object>) jsonFacetResponse
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,245,.get(level);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,246,if (levelList != null && counts != null && levelList.size() > 1) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,247,NamedList<Object> levelValues = (NamedList<Object>) levelList.getVal(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,248,if (levelValues != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,249,ArrayList<Object> bucketList = (ArrayList<Object>) levelValues
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,250,.get(BUCKETS);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,251,int i = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,252,for (RangeFacet.Count date : counts) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,253,SimpleOrderedMap<Object> valueCount = (SimpleOrderedMap<Object>) bucketList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,254,.get(i);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,255,if (valueCount != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,256,Double count = (Double) valueCount.getVal(1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,257,if (count != null && !count.equals(0D)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,258,zeroFlag = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,260,String name = date.getValue();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,261,String value = count != null ? "" + count.longValue() : "0";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,262,VNameValue nameValue = new VNameValue(name, value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,263,levelCounts.add(nameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,265,i++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,269,return zeroFlag;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,273,if (stringUtil.isEmpty(typeXAxis)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGeneratorBase.java,277,|| typeXAxis.contains(DATA_TYPE.FLOAT.getType()) || typeXAxis.contains(DATA_TYPE.DOUBLE.getType());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,44,import org.apache.ambari.logsearch.util.JSONUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,47,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,72,static Logger logger = Logger.getLogger(AuditMgr.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,75,AuditSolrDao auditSolrDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,78,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,81,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,84,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,87,BizUtil bizUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,90,DateUtil dateUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,93,GraphDataGenerator graphDataGenerator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,100,VSolrLogList collection = getLastPage(searchCriteria,LogSearchConstants.AUDIT_EVTTIME,auditSolrDao,lastPageQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,107,VSolrLogList collection = getLogAsPaginationProvided(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,108,auditSolrDao);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,113,public SolrDocumentList getComponents(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,114,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,115,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,118,queryGenerator.setFacetField(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,119,LogSearchConstants.AUDIT_COMPONENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,149,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,150,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,174,String jsonHistogramQuery = queryGenerator.buildJSONFacetTermTimeRangeQuery(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,175,LogSearchConstants.AUDIT_COMPONENT,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,176,LogSearchConstants.AUDIT_EVTTIME, from, to, unit).replace("\\",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,186,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,187,.getResponse().get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,189,if (jsonFacetResponse == null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,190,|| jsonFacetResponse.toString().equals("{count=0}")){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,194,extractValuesFromBucket(jsonFacetResponse, "x", "y",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,195,histogramData);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,202,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,203,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,215,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,216,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,229,if(queryResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,234,FacetField queryFacetField = queryResponse
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,235,.getFacetField(facetField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,252,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,253,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,263,String startDate = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,264,.convertGivenDateFormatToSolrDateFormat(ManageStartEndTime.startDate);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,266,String endDate = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,267,.convertGivenDateFormatToSolrDateFormat(ManageStartEndTime.endDate);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,270,queryGenerator.setFacetRange(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,271,LogSearchConstants.AUDIT_EVTTIME, startDate, endDate,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,304,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,305,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,311,String jsonUserQuery = "{Users:{type:terms, field:reqUser, facet:{ Repo:{ type:terms, field:repo, facet:{eventCount:\"sum(event_count)\"}}}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,312,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,313,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,319,if(queryResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,330,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) namedList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,331,.get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,332,if(jsonFacetResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,335,if(jsonFacetResponse.toString().equals("{count=0}")){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,343,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,344,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,350,String jsonUserQuery = "{Users:{type:terms,field:resource,facet:{Repo:{type:terms,field:repo,facet:{eventCount:\"sum(event_count)\"}}}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,351,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,352,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,368,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) namedList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,369,.get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,376,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,377,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,388,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,389,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,396,String jsonHistogramQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,397,.buildJSONFacetTermTimeRangeQuery(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,398,LogSearchConstants.AUDIT_REQUEST_USER,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,400,.replace("\\", "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,409,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) response
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,410,.getResponse().get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,412,if (jsonFacetResponse == null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,413,|| jsonFacetResponse.toString().equals("{count=0}")){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,423,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,424,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,429,public SolrDocumentList getRequestUser(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,430,SolrDocumentList docList = new SolrDocumentList();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,431,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,432,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,433,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,434,queryGenerator.setFacetField(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,435,LogSearchConstants.AUDIT_REQUEST_USER);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,436,queryGenerator.setFacetSort(solrQuery, LogSearchConstants.FACET_INDEX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,437,List<FacetField> facetFields = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,438,List<Count> componentsCount = new ArrayList<Count>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,439,FacetField facetField = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,441,QueryResponse queryResponse = auditSolrDao.process(solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,442,if (queryResponse == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,443,return docList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,446,facetFields = queryResponse.getFacetFields();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,447,if (facetFields == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,448,return docList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,450,if (!facetFields.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,451,facetField = facetFields.get(0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,453,if (facetField != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,454,componentsCount = facetField.getValues();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,457,for (Count compnonet : componentsCount) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,458,SolrDocument solrDocument = new SolrDocument();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,459,solrDocument.addField("type", compnonet.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,460,docList.add(solrDocument);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,462,return docList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,464,logger.error("Error during solrQuery=" + solrQuery, e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,465,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,466,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,472,String excludeArray[] = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,473,.getPropertyStringList("logsearch.solr.audit.logs.exclude.columnlist");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,479,String uiField = ConfigUtil.auditLogsColumnMapping.get(fieldName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,480,+ LogSearchConstants.SOLR_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,498,VBarDataList result = graphDataGenerator.getAnyGraphData(searchCriteria,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,499,auditSolrDao, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,509,public void extractValuesFromBucket(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,510,SimpleOrderedMap<Object> jsonFacetResponse, String outerField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,511,String innerField, List<VBarGraphData> histogramData) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,512,NamedList<Object> stack = (NamedList<Object>) jsonFacetResponse
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,513,.get(outerField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,514,ArrayList<Object> stackBuckets = (ArrayList<Object>) stack
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,515,.get("buckets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,525,ArrayList<Object> levelBuckets = (ArrayList<Object>) ((NamedList<Object>) level
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,526,.get(innerField)).get("buckets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,529,String value = dateUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,530,.convertDateWithMillisecondsToSolrDate((Date) countValue
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,531,.getVal(0));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,545,String jsonUserQuery = "{ Users: { type: terms, field: reqUser, facet:  {Repo: {  type: terms, field: repo, facet: {  eventCount: \"sum(event_count)\"}}}},x:{ type: terms,field: resource, facet: {y: {  type: terms, field: repo,facet: {  eventCount: \"sum(event_count)\"}}}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,547,SolrQuery solrQuery = queryGenerator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,548,.commonAuditFilterQuery(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,569,if(namedList == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,577,SimpleOrderedMap<Object> jsonFacetResponse = (SimpleOrderedMap<Object>) namedList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,578,.get("facets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,579,vBarUserDataList = bizUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,580,.buildSummaryForTopCounts(jsonFacetResponse,"Repo","Users");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,581,vBarResourceDataList = bizUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,582,.buildSummaryForTopCounts(jsonFacetResponse,"y","x");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,591,Collection<VBarGraphData> tableUserData = vBarUserDataList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,592,.getGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,603,Collection<VNameValue> vnameValueList = graphData
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,604,.getDataCount();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,608,data += blank + vNameValue.getName() + " "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,609,+ vNameValue.getValue() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,624,Collection<VBarGraphData> tableResourceData = vBarResourceDataList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,625,.getGraphData();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,638,Collection<VNameValue> vnameValueList = graphData
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,639,.getDataCount();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,643,data += blank + vNameValue.getName() + " "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,644,+ vNameValue.getValue() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,667,String fileName = "Users_Resource" + startTime + endTime
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,668,+ ".";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,675,.header("Content-Disposition",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,681,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,682,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,711,queryGenerator.setFacetField(serivceLoadQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,712,LogSearchConstants.AUDIT_COMPONENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,713,QueryResponse serviceLoadResponse = auditSolrDao
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,714,.process(serivceLoadQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,718,FacetField serviceFacetField =serviceLoadResponse.getFacetField(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,719,LogSearchConstants.AUDIT_COMPONENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,720,if(serviceFacetField == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,725,if(serviceLoadFacets == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,745,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,746,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,750,String preDefinedJSON = getHadoopServiceConfigJSON();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,751,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,752,JSONObject serviceJSON = new JSONObject(preDefinedJSON).getJSONObject("service");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,753,HashMap<String, Object> serviceMap = jsonUtil.jsonToMapObject(serviceJSON.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,754,Iterator<Entry<String, Object>> serviceMapIterator= serviceMap.entrySet().iterator();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,755,List<VNameValue> newValueList = new ArrayList<VNameValue>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,756,for (VNameValue vNameValue : valueList) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,757,String name=vNameValue.getName();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,758,while (serviceMapIterator.hasNext()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,759,Map.Entry<String, Object> tempMap = serviceMapIterator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,760,.next();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,762,String keyName = tempMap.getKey();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,764,JSONObject valueObj = new JSONObject(tempMap.toString().replace(keyName+"=", ""));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,765,if(name.contains(keyName.toLowerCase())){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,766,vNameValue.setName(valueObj.getString("label"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,767,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,769,JSONArray componentsArray = valueObj.getJSONArray("components");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,771,for(int i =0;i< componentsArray.length();i++){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,772,JSONObject jObj = componentsArray.getJSONObject(i);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,773,String jsonName = jObj.getString("name");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,774,if(name.contains(jsonName.toLowerCase())){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,775,vNameValue.setName(valueObj.getString("label"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,776,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,781,if(newValueList.isEmpty()){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,782,newValueList.add(vNameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,784,boolean isMatch = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,785,for(VNameValue vValue: newValueList){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,786,if(vValue.getName().equalsIgnoreCase(vNameValue.getName())){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,787,isMatch =true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,788,Integer cnt1 = Integer.parseInt(vValue.getValue());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,789,Integer cnt2 = Integer.parseInt(vNameValue.getValue());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,790,vValue.setValue((cnt1+cnt2)+"");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,794,newValueList.add(vNameValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,797,vBarGraphData.setDataCounts(newValueList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,798,vBarGraphData.setName("ServiceList");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,799,return convertObjToString(dataList);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,802,throw restErrorUtil.createRESTException(e.getMessage(),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,803,MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,49,private static Logger logger = Logger.getLogger(LogFileMgr.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,53,ServiceLogsSolrDao serviceLogsSolrDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,56,AuditSolrDao auditSolrDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,59,LogsMgr logMgr;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,75,queryGenerator.setFacetFieldWithMincount(solrQuery, LogSearchConstants.SOLR_PATH,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,76,minCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,78,queryGenerator.setSingleIncludeFilter(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,79,LogSearchConstants.SOLR_COMPONENT, componentName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,80,queryGenerator.setSingleIncludeFilter(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,81,LogSearchConstants.SOLR_HOST, host);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,84,if (stringUtil.isEmpty(logType)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,85,logType = LOG_TYPE.SERVICE.name();// default is service Log
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,88,if (logType.equalsIgnoreCase(LOG_TYPE.SERVICE.name())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,93,throw restErrorUtil.createRESTException(logType
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,94,+ " is not a valid logType", MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,98,FacetField queryFacetField = queryResponse
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,99,.getFacetField(LogSearchConstants.SOLR_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,114,+ "\n Query :" + solrQuery.toQueryString(), e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,115,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,116,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,130,if (stringUtil.isEmpty(host)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,131,throw restErrorUtil.createRESTException("missing Host Name",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,132,MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,134,tailSize = (stringUtil.isEmpty(tailSize)) ? "10" : tailSize;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,140,queryGenerator.setSingleIncludeFilter(logFileTailQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,141,LogSearchConstants.SOLR_HOST, host);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,142,if (!stringUtil.isEmpty(logFile)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,143,queryGenerator.setSingleIncludeFilter(logFileTailQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,144,LogSearchConstants.SOLR_PATH,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,145,solrUtil.makeSolrSearchString(logFile));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,147,queryGenerator.setSingleIncludeFilter(logFileTailQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,148,LogSearchConstants.SOLR_COMPONENT, component);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,150,throw restErrorUtil.createRESTException("component or logfile parameter must be present",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogFileMgr.java,151,MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,39,import javax.servlet.http.HttpServletRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,86,private static Logger logger = Logger.getLogger(LogsMgr.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,88,public static List<String> cancelByDate = new CopyOnWriteArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,90,public static Map<String, String> mapUniqueId = new ConcurrentHashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,92,public static enum CONDITION {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,97,ServiceLogsSolrDao serviceLogsSolrDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,100,BizUtil bizUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,103,FileUtil fileUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,107,GraphDataGenerator graphDataGenerator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,116,if (!stringUtil.isEmpty(keyword)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,151,public String getHosts(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,152,return getFields(searchCriteria, LogSearchConstants.SOLR_HOST);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,155,public String getFields(SearchCriteria searchCriteria,String field){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,203,public String getComponents(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,204,return getFields(searchCriteria, LogSearchConstants.SOLR_COMPONENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,258,public VCountList getFieldCount(SearchCriteria searchCriteria, String field){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,301,public VCountList getLogLevelCount(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,302,return getFieldCount(searchCriteria, LogSearchConstants.SOLR_LEVEL);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,305,public VCountList getComponentsCount(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,306,return getFieldCount(searchCriteria, LogSearchConstants.SOLR_COMPONENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,309,public VCountList getHostsCount(SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,310,return getFieldCount(searchCriteria, LogSearchConstants.SOLR_HOST);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,325,if(!stringUtil.isEmpty(name)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,328,if(!stringUtil.isEmpty(value)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,331,if(!stringUtil.isEmpty(firstPriority)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,372,if (!stringUtil.isEmpty(secondPriority)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,417,if (!stringUtil.isEmpty(hostName)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,481,if (!stringUtil.isEmpty(componentName)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,652,if(stringUtil.isEmpty(key)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,713,if (stringUtil.isEmpty(nextPageLogID)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,760,if (!stringUtil.isEmpty(filterQueryListIds)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,766,if (!stringUtil.isEmpty(sortByType) && sortByType
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,821,if (!stringUtil.isEmpty(sortByType) && sortByType
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,823,keywordLogDate = dateUtil.addMilliSecondsToDate(keywordLogDate, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,830,keywordLogDate = dateUtil.addMilliSecondsToDate(keywordLogDate, -1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,858,if (stringUtil.isEmpty(id) && id.equals(keywordId)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,972,if (!stringUtil.isEmpty(filterQueryListIds)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,976,if (!stringUtil.isEmpty(sortByType) && sortByType
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1036,if (!stringUtil.isEmpty(sortByType) && sortByType
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1072,if ( stringUtil.isEmpty(id) && id.equals(keywordId)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1101,if(stringUtil.isEmpty(endLogTime)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1107,if(stringUtil.isEmpty(logId)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1140,Date endDate = dateUtil.addMilliSecondsToDate(dateOfLogId, 1);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1173,if (!stringUtil.isEmpty(id)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1346,if (stringUtil.isEmpty(uniqueId)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1360,if (stringUtil.isEmpty(uniqueId)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1384,if(stringUtil.isEmpty(utcOffset)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1434,if (stringUtil.isEmpty(includeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1444,if (!stringUtil.isEmpty(includeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1452,if (stringUtil.isEmpty(excludeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1462,if (!stringUtil.isEmpty(excludeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1469,if (stringUtil.isEmpty(globalExcludeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1480,if (!stringUtil.isEmpty(excludeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1579,if(stringUtil.isEmpty(bundelId)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1778,if (stringUtil.isEmpty(id)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1785,if (stringUtil.isEmpty(maxRows)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1789,if(stringUtil.isEmpty(scrollType)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1813,if (stringUtil.isEmpty(logTime)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1943,utc.set(GregorianCalendar.HOUR, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1944,utc.set(GregorianCalendar.MINUTE, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1945,utc.set(GregorianCalendar.MILLISECOND, 001);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1946,utc.set(GregorianCalendar.SECOND, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1958,LogSearchConstants.SOLR_LEVEL, "", QueryGenerationBase.CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,38,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,60,static private Logger logger = Logger.getLogger(MgrBase.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,63,SolrUtil solrUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,66,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,69,QueryGeneration queryGenerator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,72,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,75,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,78,DateUtil dateUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,80,JsonSerializer<Date> jsonDateSerialiazer = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,81,JsonDeserializer<Date> jsonDateDeserialiazer = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,83,public enum LOG_TYPE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,84,SERVICE {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,86,public String getLabel() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,87,return "Service";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,90,AUDIT {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,92,public String getLabel() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,93,return "Audit";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,96,public abstract String getLabel();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,103,public JsonElement serialize(Date paramT,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,104,java.lang.reflect.Type paramType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,105,JsonSerializationContext paramJsonSerializationContext) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,114,public Date deserialize(JsonElement json, java.lang.reflect.Type typeOfT,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,115,JsonDeserializationContext context) throws JsonParseException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,122,public String convertObjToString(Object obj) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,140,.getFile());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,153,throw restErrorUtil.createRESTException(e.getMessage(),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,154,MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,161,throw restErrorUtil.createRESTException("Improper JSON",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,162,MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,166,protected VSolrLogList getLastPage(SearchCriteria searchCriteria,String logTimeField,SolrDaoBase solrDoaBase,SolrQuery lastPageQuery){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,172,if(givenSortType == null || givenSortType.equals(LogSearchConstants.DESCENDING_ORDER)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,188,collection = getLogAsPaginationProvided(lastPageQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,189,solrDoaBase);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,212,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,213,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,218,public VSolrLogList getLogAsPaginationProvided(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,219,SolrDaoBase solrDaoBase) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,238,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,239,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,244,public Long countQuery(SolrQuery query,SolrDaoBase solrDaoBase) throws SolrException,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,245,SolrServerException, IOException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,259,if (stringUtil.isEmpty(unit)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,266,if (stringUtil.isEmpty(from)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/MgrBase.java,278,if (stringUtil.isEmpty(to)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/PublicMgr.java,34,LogsearchSimpleAuthenticationProvider simpleAuthenticationProvider;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,21,import javax.servlet.http.HttpServletRequest;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,23,import org.apache.ambari.logsearch.common.UserSessionInfo;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,24,import org.apache.ambari.logsearch.security.context.LogsearchContextHolder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,25,import org.apache.ambari.logsearch.security.context.LogsearchSecurityContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,36,static final Logger logger = Logger.getLogger(SessionMgr.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,42,public UserSessionInfo processSuccessLogin(int authType, String userAgent) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,43,return processSuccessLogin(authType, userAgent, null);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,46,public UserSessionInfo processSuccessLogin(int authType, String userAgent, HttpServletRequest httpRequest) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,48,UserSessionInfo userSession = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,49,LogsearchSecurityContext context = LogsearchContextHolder.getSecurityContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,50,if (context != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,51,userSession = context.getUserSession();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,56,if (userSession != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,57,if (validateUserSession(userSession, currentLoginId)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,64,userSession = new UserSessionInfo();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,65,User user = new User();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,67,userSession.setUser(user);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,77,return userSession;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,80,protected boolean validateUserSession(UserSessionInfo userSession, String currentUsername) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,81,if (currentUsername.equalsIgnoreCase(userSession.getUser().getUsername())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/SessionMgr.java,85,+ currentUsername + ", userSession=" + userSession, new Exception());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,34,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,53,static Logger logger = Logger.getLogger(UserConfigMgr.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,56,UserConfigSolrDao userConfigSolrDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,59,SolrUtil solrUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,62,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,65,QueryGeneration queryGenerator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,68,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,74,throw restErrorUtil.createRESTException("No FilterName Specified",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,75,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,79,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,81,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,98,queryGenerator.setSingleIncludeFilter(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,99,LogSearchConstants.FILTER_NAME, solrUtil.makeSearcableString(filterName));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,100,queryGenerator.setSingleIncludeFilter(solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,101,LogSearchConstants.USER_NAME, loggedInUserName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,107,&& !vHistory.isOverwrite()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,109,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,115,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,116,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,124,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,125,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,136,solrQuery.setQuery(LogSearchConstants.COMPOSITE_KEY + ":" + filterName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,137,+ "-" + rowType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,141,.getNumFound();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,156,&& !stringUtil.isEmpty(vHistory.getValues());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,163,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,164,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,174,String rowType = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,175,.getParamValue(LogSearchConstants.ROW_TYPE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,176,if (stringUtil.isEmpty(rowType)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,177,throw restErrorUtil.createRESTException("row type was not specified",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,178,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,181,String userName = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,182,.getParamValue(LogSearchConstants.USER_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,183,if (stringUtil.isEmpty(userName)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,184,throw restErrorUtil.createRESTException("user name was not specified",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,185,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,187,String filterName = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,188,.getParamValue(LogSearchConstants.FILTER_NAME);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,189,filterName = stringUtil.isEmpty(filterName) ? "*" : "*" + filterName + "*";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,196,queryGenerator.setSingleIncludeFilter(userConfigQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,197,LogSearchConstants.ROW_TYPE, rowType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,198,queryGenerator.setSingleORFilter(userConfigQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,199,LogSearchConstants.USER_NAME, userName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,200,LogSearchConstants.SHARE_NAME_LIST, userName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,201,queryGenerator.setSingleIncludeFilter(userConfigQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,202,LogSearchConstants.FILTER_NAME, solrUtil.makeSearcableString(filterName));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,204,if (stringUtil.isEmpty(searchCriteria.getSortBy())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,207,if (stringUtil.isEmpty(searchCriteria.getSortType())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,218,userConfig.setFiltername(""
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,219,+ solrDoc.get(LogSearchConstants.FILTER_NAME));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,224,List<String> shareNameList = (List<String>) solrDoc
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,225,.get(LogSearchConstants.SHARE_NAME_LIST);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,246,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,247,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,270,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,271,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,283,if (!stringUtil.isEmpty(json)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,284,VLogfeederFilterWrapper logfeederFilterWrapper = (VLogfeederFilterWrapper) jsonUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,285,.jsonToObj(json, VLogfeederFilterWrapper.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,290,userConfigSolrDao.saveUserFiter(logfeederFilterWrapper);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,293,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,294,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,310,List<Count> counList = queryResponse.getFacetField(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,311,LogSearchConstants.USER_NAME).getValues();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,319,throw restErrorUtil.createRESTException(MessageEnums.SOLR_ERROR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/UserConfigMgr.java,320,.getMessage().getMessage(), MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,30,import org.apache.ambari.logsearch.manager.MgrBase.LOG_TYPE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,43,LOG_TYPE logType = LOG_TYPE.SERVICE;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,54,String bundleId = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,55,.getParamValue(LogSearchConstants.BUNDLE_ID);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,56,String globalExcludeComp = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,57,.getParamValue("gMustNot");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,58,String unselectedComp = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,59,.getParamValue("unselectComp");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,61,String urlComponentName = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,62,.getParamValue("component_name");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,66,if (!stringUtil.isEmpty(advQuery)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,75,setFilterClauseWithFieldName(advSolrQuery, level,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,76,LogSearchConstants.SOLR_LEVEL, "", CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,79,setSingleRangeFilter(advSolrQuery, LogSearchConstants.LOGTIME, startTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,80,endTime);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,83,setFilterClauseWithFieldName(advSolrQuery, unselectedComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,84,LogSearchConstants.SOLR_COMPONENT, LogSearchConstants.MINUS_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,85,CONDITION.AND);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,88,setFilterClauseWithFieldName(advSolrQuery, selectedComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,89,LogSearchConstants.SOLR_COMPONENT, LogSearchConstants.NO_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,90,CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,101,setSingleRangeFilter(solrQuery, LogSearchConstants.LOGTIME, startTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,102,endTime);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,111,addFilter(solrQuery, selectedComp, LogSearchConstants.SOLR_COMPONENT,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,112,CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,116,addFilterQueryFromArray(solrQuery, treeParams,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,117,LogSearchConstants.SOLR_HOST, CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,120,setFilterClauseWithFieldName(solrQuery, level,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,121,LogSearchConstants.SOLR_LEVEL, LogSearchConstants.NO_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,122,CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,125,setFilterClauseForSolrSearchableString(solrQuery, iMessage, CONDITION.OR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,126,LogSearchConstants.NO_OPERATOR, LogSearchConstants.SOLR_KEY_LOG_MESSAGE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,129,setFilterClauseForSolrSearchableString(solrQuery, gEmessage, CONDITION.AND,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,130,LogSearchConstants.MINUS_OPERATOR, LogSearchConstants.SOLR_KEY_LOG_MESSAGE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,133,setFilterClauseForSolrSearchableString(solrQuery, eMessage, CONDITION.AND,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,134,LogSearchConstants.MINUS_OPERATOR, LogSearchConstants.SOLR_KEY_LOG_MESSAGE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,140,setFilterClauseWithFieldName(solrQuery, globalExcludeComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,141,LogSearchConstants.SOLR_COMPONENT, LogSearchConstants.MINUS_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,142,CONDITION.AND);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,145,setFilterClauseWithFieldName(solrQuery, unselectedComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,146,LogSearchConstants.SOLR_COMPONENT, LogSearchConstants.MINUS_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,147,CONDITION.AND);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,161,setSingleIncludeFilter(solrQuery, LogSearchConstants.SOLR_COMPONENT,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,162,urlComponentName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,177,this.setUserSpecificFilter(searchCriteria, solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,178,LogSearchConstants.INCLUDE_QUERY, LogSearchConstants.INCLUDE_QUERY,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,179,logType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,181,this.setUserSpecificFilter(searchCriteria, solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,182,LogSearchConstants.EXCLUDE_QUERY, LogSearchConstants.EXCLUDE_QUERY,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,183,logType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,187,public void applyLogFileFilter(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,188,SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,193,if (!stringUtil.isEmpty(hostLogFile) && !stringUtil.isEmpty(compLogFile)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,194,logfileQuery = LogSearchConstants.SOLR_HOST + ":" + hostLogFile + " "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,195,+ CONDITION.AND + " " + LogSearchConstants.SOLR_COMPONENT + ":"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,196,+ compLogFile;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,197,if (!stringUtil.isEmpty(givenQuery)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,198,logfileQuery = "(" + givenQuery + ") " + CONDITION.AND + " ("
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,199,+ logfileQuery + ")";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,201,if (!stringUtil.isEmpty(logfileQuery)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,207,public void setUserSpecificFilter(SearchCriteria searchCriteria,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,208,SolrQuery solrQuery, String paramName, String operation, LOG_TYPE logType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,210,String columnQuery = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,211,.getParamValue(LogSearchConstants.COLUMN_QUERY);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,212,if (stringUtil.isEmpty(queryString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,219,&& !paramName.equals(LogSearchConstants.EXCLUDE_QUERY)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,226,List<HashMap<String, Object>> queryList = jsonUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,227,.jsonToMapObjectList(queryString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,231,&& !paramName.equals(LogSearchConstants.EXCLUDE_QUERY)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,232,List<HashMap<String, Object>> columnQueryList = jsonUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,233,.jsonToMapObjectList(columnQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,243,if (!stringUtil.isEmpty(key)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,245,String value = getOriginalValue(originalKey,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,255,String newCondtion = tempCondition + " "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,256,+ CONDITION.OR.name() + " " + orQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,274,if (!referalConditionQuries.isEmpty() && !stringUtil.isEmpty(operation)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,276,|| operation.equals(LogSearchConstants.COLUMN_QUERY)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,278,if (!stringUtil.isEmpty(filter)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,284,if (!stringUtil.isEmpty(filter)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,294,LOG_TYPE logType = LOG_TYPE.AUDIT;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,299,String selectedComp = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,300,.getParamValue("includeString");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,301,this.setFilterClauseWithFieldName(solrQuery, selectedComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,302,LogSearchConstants.AUDIT_COMPONENT, LogSearchConstants.NO_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,303,CONDITION.OR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,304,String globalExcludeComp = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,305,.getParamValue("gMustNot");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,306,this.setUserSpecificFilter(searchCriteria, solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,307,LogSearchConstants.INCLUDE_QUERY, LogSearchConstants.INCLUDE_QUERY,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,308,logType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,309,this.setUserSpecificFilter(searchCriteria, solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,310,LogSearchConstants.EXCLUDE_QUERY, LogSearchConstants.EXCLUDE_QUERY,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,311,logType);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,312,String unselectedComp = (String) searchCriteria
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,313,.getParamValue("unselectComp");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,314,this.setFilterClauseWithFieldName(solrQuery, globalExcludeComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,315,LogSearchConstants.AUDIT_COMPONENT, LogSearchConstants.MINUS_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,316,CONDITION.AND);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,318,this.setFilterClauseWithFieldName(solrQuery, unselectedComp,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,319,LogSearchConstants.AUDIT_COMPONENT, LogSearchConstants.MINUS_OPERATOR,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,320,CONDITION.AND);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,322,this.setSingleRangeFilter(solrQuery, LogSearchConstants.AUDIT_EVTTIME,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,323,startTime, endTime);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,324,this.setPagination(solrQuery, searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,326,if (searchCriteria.getSortBy() == null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,327,|| searchCriteria.getSortBy().isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,335,this.setSortOrderDefaultServiceLog(solrQuery, searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,339,private String putWildCardByType(String str, String key, LOG_TYPE logType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,387,if (stringUtil.isEmpty(solrValue)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,391,String propertyFieldMappings[] = solrValue
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,392,.split(LogSearchConstants.LIST_SEPARATOR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,396,if (!stringUtil.isEmpty(temp)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,399,propertyFieldValue.put(arrayValue[0].toLowerCase(Locale.ENGLISH),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,400,arrayValue[1].toLowerCase(Locale.ENGLISH));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,406,String originalValue = propertyFieldValue.get(value
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,407,.toLowerCase(Locale.ENGLISH));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,408,if (!stringUtil.isEmpty(originalValue)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,418,private String getOriginalKey(String key, LOG_TYPE logType) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,422,originalKey = ConfigUtil.auditLogsColumnMapping.get(key
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,423,+ LogSearchConstants.UI_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,426,originalKey = ConfigUtil.serviceLogsColumnMapping.get(key
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,427,+ LogSearchConstants.UI_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,433,if (stringUtil.isEmpty(originalKey)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,30,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,40,static Logger logger = Logger.getLogger(QueryGenerationBase.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,43,SolrUtil solrUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,46,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,49,JSONUtil jsonUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,51,public static enum CONDITION {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,56,public void setFilterClauseForSolrSearchableString(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,57,String commaSepratedString, CONDITION condition, String operator,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,58,String messageField) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,60,if (!stringUtil.isEmpty(commaSepratedString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,63,String[] msgList = commaSepratedString
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,64,.split(LogSearchConstants.I_E_SEPRATOR);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,69,queryMsg.append(" " + operator
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,70,+ solrUtil.escapeForLogMessage(messageField, temp));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,78,queryMsg.append(" " + operator + messageField + ":"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,79,+ temp);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,91,public void setFilterClauseWithFieldName(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,92,String commaSepratedString, String field, String operator,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,93,CONDITION condition) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,94,if (!stringUtil.isEmpty(commaSepratedString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,97,if (CONDITION.OR.equals(condition)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,105,if(!stringUtil.isEmpty(filterQuery)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,113,public void setSortOrderDefaultServiceLog(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,114,SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,116,if (searchCriteria.getSortBy() != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,117,&& (!searchCriteria.getSortBy().isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,119,if (searchCriteria.getSortType() != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,121,&& !searchCriteria.getSortType().equalsIgnoreCase(order.toString())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,124,SolrQuery.SortClause logtimeSortClause = SolrQuery.SortClause.create(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,125,searchCriteria.getSortBy(), order);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,130,SolrQuery.SortClause logtimeSortClause = SolrQuery.SortClause.create(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,131,LogSearchConstants.LOGTIME, SolrQuery.ORDER.desc);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,135,SolrQuery.SortClause sequenceNumberSortClause = SolrQuery.SortClause
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,136,.create(LogSearchConstants.SEQUNCE_ID, SolrQuery.ORDER.desc);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,142,public void setFilterFacetSort(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,143,SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,144,if (searchCriteria.getSortBy() != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,145,&& (!searchCriteria.getSortBy().isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,151,public void setSingleSortOrder(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,152,SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,154,if (searchCriteria.getSortBy() != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,155,&& (!searchCriteria.getSortBy().isEmpty())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,157,if (searchCriteria.getSortType() != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,159,&& !searchCriteria.getSortType().equalsIgnoreCase(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,160,order.toString())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,163,SolrQuery.SortClause sortOrder = SolrQuery.SortClause.create(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,164,searchCriteria.getSortBy(), order);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,174,public void setMultipleSortOrder(SolrQuery solrQuery,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,175,SearchCriteria searchCriteria) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,180,if (!stringUtil.isEmpty(sortOrder)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,183,ORDER order = sortByAndOrder[1].contains("asc") ? SolrQuery.ORDER.asc
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,184,: SolrQuery.ORDER.desc;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,185,SolrQuery.SortClause solrSortClause = SolrQuery.SortClause.create(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,186,sortByAndOrder[0], order);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,199,public void setSingleIncludeFilter(SolrQuery solrQuery, String filterType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,200,String filterValue) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,201,if (filterType != null && !filterType.isEmpty() && filterValue != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,202,&& !filterValue.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,209,public void setSingleExcludeFilter(SolrQuery solrQuery, String filterType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,210,String filterValue) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,211,if (!stringUtil.isEmpty(filterValue) && !stringUtil.isEmpty(filterType)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,212,String filterQuery = LogSearchConstants.MINUS_OPERATOR
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,213,+ buildFilterQuery(filterType, filterValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,219,public void setSingleRangeFilter(SolrQuery solrQuery, String filterType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,220,String filterFromValue, String filterToValue) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,223,&& !stringUtil.isEmpty(filterFromValue)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,224,String filterQuery = buildInclusiveRangeFilterQuery(filterType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,225,filterFromValue, filterToValue);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,226,if (!stringUtil.isEmpty(filterQuery)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,251,+ " to " + maxRows.intValue());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,254,public void setSingleORFilter(SolrQuery solrQuery, String filterName1,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,255,String value1, String filterName2, String value2) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,257,+ " " + filterName2 + ":" + value2;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,262,public String buildInclusiveRangeFilterQuery(String filterType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,263,String filterFromValue, String filterToValue) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,264,String filterQuery = filterType + ":[" + filterFromValue + " TO "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,265,+ filterToValue + "]";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,266,logger.info("Build Filter was :- " + filterQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,267,return filterQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,270,public String buildExclusiveRangeFilterQuery(String filterType,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,271,String filterFromValue, String filterToValue) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,272,String filterQuery = filterType + ":{" + filterFromValue + " TO "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,273,+ filterToValue + "}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,351,public String buildJSONFacetAggregatedFuncitonQuery(String function,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,352,String xAxisField) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,361,public String buildJSONFacetTermTimeRangeQuery(String fieldName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,362,String fieldTime, String from, String to, String unit) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,364,query += "x" + ":{type:terms,field:" + fieldName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,365,+ ",facet:{y:{type:range,field:" + fieldTime + ",start:\""
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,366,+ from + "\",end:\"" + to + "\",gap:\"" + unit + "\"}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,377,public String buildJsonFacetTermsRangeQuery(String stackField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,378,String xAxisField) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,379,String jsonQuery = "{ " + stackField + ": { type: terms,field:"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,380,+ stackField + "," + "facet: {   x: { type: terms, field:"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,381,+ xAxisField + ",mincount:0,sort:{index:asc}}}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,382,logger.info("Build JSONQuery is :- " + jsonQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,383,return jsonQuery;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,391,public String buidlJSONFacetRangeQueryForNumber(String stackField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,392,String xAxisField, String function) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,393,String jsonQuery = "{ " + stackField + ": { type: terms,field:"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,394,+ stackField + "," + "facet: {   x:'" + function + "("
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,395,+ xAxisField + ")'}}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,405,public String buidlJSONFacetRangeQueryForSuggestion(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,406,String originalFieldName, String valueToSuggest) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,407,String jsonQuery = "{y:{type:query,query:\"" + originalFieldName + ":"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,408,+ valueToSuggest + "\",facet:{x:{type:terms,field:"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,409,+ originalFieldName + "}}}}";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,414,public String buildListQuery(String paramValue, String solrFieldName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,415,CONDITION condition) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,416,if (!stringUtil.isEmpty(paramValue)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,431,public void addFilterQueryFromArray(SolrQuery solrQuery, String jsonArrStr,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,432,String solrFieldName, CONDITION condition) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,433,if (!stringUtil.isEmpty(jsonArrStr) && condition != null && solrQuery!=null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,454,if (!stringUtil.isEmpty(query)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,460,public void addFilter(SolrQuery solrQuery, String paramValue,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,461,String solrFieldName, CONDITION condition) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGenerationBase.java,463,if (!stringUtil.isEmpty(filterQuery)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,19,package org.apache.ambari.logsearch.security.context;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,21,import java.io.Serializable;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,23,import org.apache.ambari.logsearch.common.RequestContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,24,import org.apache.ambari.logsearch.common.UserSessionInfo;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,27,public class LogsearchSecurityContext implements Serializable{
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,28,private static final long serialVersionUID = 1L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,29,private UserSessionInfo userSession;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,30,private RequestContext requestContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,32,public UserSessionInfo getUserSession() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,33,return userSession;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,36,public void setUserSession(UserSessionInfo userSession) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,37,this.userSession = userSession;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,43,public RequestContext getRequestContext() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,44,return requestContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,50,public void setRequestContext(RequestContext requestContext) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchSecurityContext.java,51,this.requestContext = requestContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,44,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,49,static Logger logger = Logger.getLogger(BizUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,52,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,55,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,60,if(docList == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,70,Collection<String> fieldsForBlankCaculation = docForBlankCaculation
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,71,.getFieldNames();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,74,if(fieldsForBlankCaculation == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,77,for (String field : fieldsForBlankCaculation) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,78,if (!stringUtil.isEmpty(field) && field.length() > maxLengthOfField){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,84,if(!stringUtil.isEmpty(field)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,85,blankFieldsMap
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,86,.put(field,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,87,addBlanksToString(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,88,maxLengthOfField - field.length(), field));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,98,.toString() + " ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,101,textTowrite.append(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,103,.append(" ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,106,textTowrite.append(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,108,.trim()).append(" ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,111,textTowrite.append(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,113,.trim()).append(" ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,115,if (doc.getFieldValue(LogSearchConstants.SOLR_FILE) != null
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,116,&& doc.getFieldValue(LogSearchConstants.SOLR_LINE_NUMBER) != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,118,.append(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,121,.append(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,123,.toString()).append(" ");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,127,.append(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,129,.toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,140,if(docList == null || docList.isEmpty()){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,153,if (stringUtil.isEmpty(level)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,160,if (stringUtil.isEmpty(comp)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,171,if (!stringUtil.isEmpty(hostname)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,175,if (stringUtil.isEmpty(comp)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,194,public String addBlanksToString(int count, String field) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,195,if (stringUtil.isEmpty(field)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,206,public VBarDataList buildSummaryForTopCounts(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,207,SimpleOrderedMap<Object> jsonFacetResponse,String innerJsonKey,String outerJsonKey) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,220,SimpleOrderedMap<Map<String, Object>> userMap = (SimpleOrderedMap<Map<String, Object>>) userList
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,221,.get(0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,226,List<SimpleOrderedMap> userUsageList = (List<SimpleOrderedMap>) userMap
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,227,.get("buckets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,235,if (!stringUtil.isEmpty(userName)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,240,List<SimpleOrderedMap> repoUsageList = (List<SimpleOrderedMap>) repoMap
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,241,.get("buckets");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,268,public HashMap<String, String> sortHashMapByValues(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,269,HashMap<String, String> passedMap) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/BizUtil.java,270,if(passedMap == null ){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,21,import java.io.Serializable;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,24,public class CommonUtil implements Serializable {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,28,private static final long serialVersionUID = -7284237762948427019L;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,30,static SecureRandom secureRandom = new SecureRandom();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,31,static int counter = 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,33,static public String genGUI() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,35,+ "_" + counter++;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,38,static public String genGUI(int length) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,39,String str = "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,40,for (int i = 0; i < length; i++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,41,int ascii = genInteger(65, 90);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,42,str += (char) ascii;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,44,return str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,47,static public int genInteger() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,48,return secureRandom.nextInt();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,51,static public int genInteger(int min, int max) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,52,int value = secureRandom.nextInt(max - min);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,53,return value + min;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,59,public static long genLong() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,60,return secureRandom.nextLong();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,63,static public int genInteger(int n) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,64,return secureRandom.nextInt();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,36,static Logger logger = Logger.getLogger(MgrBase.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,51,private static void intializeUISolrColumnMapping(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,52,String columnMappingArray[],
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,53,HashMap<String, String> columnMappingMap) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,62,columnMappingMap.put(solrField + LogSearchConstants.SOLR_SUFFIX,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,63,uiField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,64,columnMappingMap.put(uiField + LogSearchConstants.UI_SUFFIX,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,65,solrField);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,81,String serviceLogsColumnMappingArray[] = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,82,.getPropertyStringList("logsearch.solr.service.logs.column.mapping");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,83,String auditLogsColumnMappingArray[] = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,84,.getPropertyStringList("logsearch.solr.audit.logs.column.mapping");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,87,intializeUISolrColumnMapping(serviceLogsColumnMappingArray,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,88,serviceLogsColumnMapping);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,91,intializeUISolrColumnMapping(auditLogsColumnMappingArray,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,92,auditLogsColumnMapping);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,95,public static void extractSchemaFieldsName(String responseString,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,120,logger.error(e + "Credentials not specified in logsearch.properties "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,152,if (excludeArray != null && excludeArray.length > 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,34,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,40,static Logger logger = Logger.getLogger(DateUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,43,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,50,if (stringUtil.isEmpty(date)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,55,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,56,.debug("Utc offset is null, Return input date without adding offset.");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,59,if (stringUtil.isEmpty(dateFormat)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,60,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,61,.debug("dateFormat is null or empty, Return input date without adding offset.");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,70,SimpleDateFormat formatter = new SimpleDateFormat(dateFormat,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,71,Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,73,long toWithOffset = getTimeWithOffset(startDate, utcOffset, dateFormat);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,83,public long getTimeWithOffset(Date date, Long utcOffset, String dateFormate) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,87,public Date getUTCDate(long epoh) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,88,if (epoh == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,89,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,91,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,92,TimeZone gmtTimeZone = TimeZone.getTimeZone("GMT+0");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,93,Calendar local = Calendar.getInstance();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,94,int offset = local.getTimeZone().getOffset(epoh);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,95,GregorianCalendar utc = new GregorianCalendar(gmtTimeZone);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,96,utc.setTimeInMillis(epoh);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,97,utc.add(Calendar.MILLISECOND, -offset);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,98,return utc.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,100,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,104,public String dateToString(Date date, String dateFormat) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,105,if (date == null || dateFormat == null || dateFormat.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,106,return "";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,108,SimpleDateFormat formatter = new SimpleDateFormat(dateFormat, Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,109,TimeZone timeZone = TimeZone.getTimeZone("GMT");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,110,formatter.setTimeZone(timeZone);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,111,return formatter.format(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,120,public String getTimeInSolrFormat(String timeString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,121,String time;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,122,if (stringUtil.isEmpty(timeString)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,123,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,125,time = timeString.replace(" ", "T");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,126,time = time.replace(",", ".");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,127,time = time + "Z";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,129,return time;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,134,c.set(Calendar.HOUR_OF_DAY, 0);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,140,public Date addHoursToDate(Date date, int hours) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,141,GregorianCalendar greorianCalendar = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,142,greorianCalendar.setTime(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,143,greorianCalendar.add(GregorianCalendar.HOUR_OF_DAY, hours);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,144,return greorianCalendar.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,147,public Date addMinsToDate(Date date, int mins) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,148,GregorianCalendar greorianCalendar = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,149,greorianCalendar.setTime(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,150,greorianCalendar.add(GregorianCalendar.MINUTE, mins);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,151,return greorianCalendar.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,154,public Date addSecondsToDate(Date date, int secs) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,155,GregorianCalendar greorianCalendar = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,156,greorianCalendar.setTime(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,157,greorianCalendar.add(GregorianCalendar.SECOND, secs);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,158,return greorianCalendar.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,161,public Date addMilliSecondsToDate(Date date, int secs) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,162,GregorianCalendar greorianCalendar = new GregorianCalendar();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,163,greorianCalendar.setTime(date);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,164,greorianCalendar.add(GregorianCalendar.MILLISECOND, secs);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,165,return greorianCalendar.getTime();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,169,throws ParseException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,171,SimpleDateFormat input = new SimpleDateFormat(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,173,SimpleDateFormat output = new SimpleDateFormat(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,174,LogSearchConstants.SOLR_DATE_FORMAT_PREFIX_Z, Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,186,SimpleDateFormat formatter = new SimpleDateFormat(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,187,LogSearchConstants.SOLR_DATE_FORMAT_PREFIX_Z, Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,195,throws ParseException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,197,SimpleDateFormat formatter = new SimpleDateFormat(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,198,LogSearchConstants.SOLR_DATE_FORMAT, Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,202,return addOffsetToDate(stringDate, Long.parseLong("" + utcOffset),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,203,LogSearchConstants.SOLR_DATE_FORMAT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,207,public Date convertStringToDate(String dateString) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,208,SimpleDateFormat formatter = new SimpleDateFormat(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,209,LogSearchConstants.SOLR_DATE_FORMAT_PREFIX_Z, Locale.ENGLISH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,210,TimeZone timeZone = TimeZone.getTimeZone("GMT");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,211,formatter.setTimeZone(timeZone);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,212,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,213,return formatter.parse(dateString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,217,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,221,if(stringUtil.isEmpty(value)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,226,SimpleDateFormat sdf = new SimpleDateFormat(LogSearchConstants.SOLR_DATE_FORMAT_PREFIX_Z);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,227,date = sdf.parse(value);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,228,if (!value.equals(sdf.format(date))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/DateUtil.java,229,date = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,42,static Logger logger = Logger.getLogger(FileUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,45,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,52,mainExportedFile = mainExportedFile
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,53,+ "**********************Summary**********************\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,54,mainExportedFile = mainExportedFile + "Number of Logs : "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,55,+ vsummary.getNumberLogs() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,56,mainExportedFile = mainExportedFile + "From           : "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,57,+ vsummary.getFrom() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,58,mainExportedFile = mainExportedFile + "To             : "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,59,+ vsummary.getTo() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,92,mainExportedFile = mainExportedFile + "Host"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,93,+ blankCharacterForHost + "   : " + h + " [" + c
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,94,+ "] " + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,96,mainExportedFile = mainExportedFile + "Host_" + numberHost
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,97,+ blankCharacterForHost + " : " + h + " [" + c
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,98,+ "] " + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,102,mainExportedFile = mainExportedFile + "Levels"+String.format("%-9s", blankCharacterForHost)+": "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,103,+ vsummary.getLevels() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,104,mainExportedFile = mainExportedFile + "Format"+String.format("%-9s", blankCharacterForHost)+": "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,105,+ vsummary.getFormat() + "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,108,mainExportedFile = mainExportedFile + "Included String: ["
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,109,+ vsummary.getIncludeString() + "]\n\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,110,mainExportedFile = mainExportedFile + "Excluded String: ["
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,111,+ vsummary.getExcludeString() + "]\n\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,112,mainExportedFile = mainExportedFile
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,113,+ "************************Logs***********************"
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,114,+ "\n";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,121,.header("Content-Disposition",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,123,+ vsummary.getFormat()).build();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,126,throw restErrorUtil.createRESTException(e.getMessage(),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,127,MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/FileUtil.java,144,.getResource(filename);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,25,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,33,import org.codehaus.jackson.JsonGenerationException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,50,static Logger logger = Logger.getLogger(JSONUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,53,RESTErrorUtil restErrorUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,56,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,58,public final static String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,59,Gson gson = new GsonBuilder().setDateFormat(DATE_FORMAT).create();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,62,public static List<String> JSONToList(JSONArray jarray) throws JSONException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,63,ArrayList<String> list = new ArrayList<String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,64,JSONArray jsonArray = jarray;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,65,if (jsonArray != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,66,int len = jsonArray.length();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,67,for (int i = 0; i < len; i++) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,68,list.add(jsonArray.get(i).toString());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,71,return list;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,75,public HashMap<String, String> jsonToMap(String jsonStr) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,76,if (stringUtil.isEmpty(jsonStr)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,77,logger.info("jsonString is empty, cannot conver to map");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,78,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,80,ObjectMapper mapper = new ObjectMapper();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,81,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,82,Object tempObject = mapper.readValue(jsonStr,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,83,new TypeReference<HashMap<String, String>>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,85,return (HashMap<String, String>) tempObject;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,88,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,90,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,92,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,94,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,96,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,98,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,105,if (stringUtil.isEmpty(jsonStr)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,111,Object tempObject = mapper.readValue(jsonStr,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,112,new TypeReference<HashMap<String, Object>>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,117,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,119,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,121,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,123,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,125,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,127,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,134,if (stringUtil.isEmpty(jsonStr)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,139,Object tempObject = mapper.readValue(jsonStr,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,140,new TypeReference<List<HashMap<String, Object>>>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,145,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,147,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,149,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,151,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,153,throw restErrorUtil.createRESTException(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,155,MessageEnums.INVALID_INPUT_DATA);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,180,HashMap<String, Object> jsonmap = mapper.readValue(jsonFile,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,181,new TypeReference<HashMap<String, Object>>() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,185,logger.error(e, e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,187,logger.error(e, e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,201,logger.error(e, e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,203,logger.error(e, e.getCause());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,217,public synchronized void writeJSONInFile(String jsonStr, File outputFile,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,218,boolean beautify) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,234,jsonStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,235,json);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,239,logger
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,240,.error("Applcation does not have permission to update file to write enc_password. file="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,241,+ outputFile.getAbsolutePath());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,274,public static String getValuesOfKey(String jsonStr, String keyName,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,275,List<String> values) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,322,|| (((JSONObject) jsonObj).optJSONObject(key) != null)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,326,str = getValuesOfKey("" + ((JSONObject) jsonObj).getString(key),
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,327,keyName, values);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,19,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,21,import java.io.File;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,22,import java.net.URL;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,23,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,24,import java.util.Iterator;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,26,import org.apache.commons.configuration.ConfigurationException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,27,import org.apache.commons.configuration.PropertiesConfiguration;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,28,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,30,public class LogsearchPropertiesConfiguration extends PropertiesConfiguration {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,32,Logger logger = Logger.getLogger(LogsearchPropertiesConfiguration.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,34,public LogsearchPropertiesConfiguration() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,35,super();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,39,public static LogsearchPropertiesConfiguration getInstance() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,40,return new LogsearchPropertiesConfiguration();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,43,public void load(File file) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,44,if (!file.exists()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,45,logger.error("File :" + file.getAbsolutePath() + " not exists");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,46,return;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,48,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,49,super.load(file);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,51,logger.error(e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,55,public void load(String fileAbsolutePath) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,56,File file = new File(fileAbsolutePath);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,57,load(file);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,65,public void loadFromClasspath(String fileName) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,66,logger.debug("loading config properties : " + fileName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,68,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,70,.getContextClassLoader().getResource(fileName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,71,logger.debug("File Complete URI :" + fileCompleteUrl);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,72,File file = new File(fileCompleteUrl.toURI());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,73,load(file);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,75,logger.error(e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,79,public HashMap<String, Object> getPropertyMap() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,80,HashMap<String, Object> propertyMap = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,81,Iterator<String> keys = this.getKeys();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,82,while (keys.hasNext()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,83,String key = keys.next();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,84,propertyMap.put(key, this.getProperty(key));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/LogsearchPropertiesConfiguration.java,86,return propertyMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,37,static Logger logger = Logger.getLogger(PropertiesUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,38,private static Map<String, String> propertiesMap;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,49,.getContextClassLoader().getResource(LOGSEARCH_PROP_FILE);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,72,protected void processProperties(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,74,throws BeansException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/PropertiesUtil.java,84,.getProperty(keyStr).trim());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,24,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,29,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,51,public void setFacetPivot(SolrQuery solrQuery, int mincount,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,52,String... hirarchy) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,60,public void setFacetDate(SolrQuery solrQuery, String facetField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,61,String from, String to, String unit) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,72,public void setFacetRange(SolrQuery solrQuery, String facetField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,73,String from, String to, String unit) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/QueryBase.java,99,if (stringUtil.isEmpty(query)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/RESTErrorUtil.java,57,public WebApplicationException createRESTException(VResponse response, int sc) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,26,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,32,static final Logger logger = Logger.getLogger("org.apache.ambari.logsearch");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,35,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,50,if (values == null || values.length == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,70,if (values == null || values.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,93,if (valueList == null || valueList.length == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,97,if(stringUtil.isEmpty(wildCard)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,127,if (valueList == null || valueList.length == 0) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,131,if(stringUtil.isEmpty(wildCard)){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,189,public String escapeForWhiteSpaceTokenizer(String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,227,public String escapeForKeyTokenizer(String search) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,229,&& !stringUtil.isEmpty(search)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,266,String newSearch = newString.replaceAll(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,278,String newSearch = newString.replaceAll(
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,290,if (search == null || search.isEmpty()){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/SolrUtil.java,294,newSearch = newSearch.replaceAll("(?=[]\\[+&|!(){}^~=$/@%?:.\\\\-])",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,20,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,22,import org.apache.log4j.Logger;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,23,import org.springframework.stereotype.Component;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,26,public class StringUtil {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,28,private static  Logger logger = Logger.getLogger(StringUtil.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,30,public boolean isEmpty(String str) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/StringUtil.java,31,return str == null || str.trim().length() == 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,32,import org.apache.ambari.logsearch.common.RequestContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,33,import org.apache.ambari.logsearch.common.UserSessionInfo;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,35,import org.apache.ambari.logsearch.security.context.LogsearchContextHolder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,36,import org.apache.ambari.logsearch.security.context.LogsearchSecurityContext;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,92,LogsearchSecurityContext context = (LogsearchSecurityContext) httpSession
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,95,context = new LogsearchSecurityContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,98,String userAgent = httpRequest.getHeader(USER_AGENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,100,RequestContext requestContext = new RequestContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,101,String reqIP = httpRequest.getRemoteAddr();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,102,requestContext.setIpAddress(reqIP);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,103,requestContext.setMsaCookie(msaCookie);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,104,requestContext.setUserAgent(userAgent);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,105,requestContext.setServerRequestId(CommonUtil.genGUI());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,106,requestContext.setRequestURL(httpRequest.getRequestURI());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,107,context.setRequestContext(requestContext);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,108,LogsearchContextHolder.setSecurityContext(context);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,109,UserSessionInfo userSession = sessionMgr.processSuccessLogin(0, userAgent);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,110,context.setUserSession(userSession);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,116,LogsearchContextHolder.resetSecurityContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,29,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,102,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,133,if (stringUtil.isEmpty(username)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,136,if (stringUtil.isEmpty(password)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,23,import org.apache.ambari.logsearch.dao.UserDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,24,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,43,UserDao userDao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,46,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,59,if (stringUtil.isEmpty(username)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,62,if (stringUtil.isEmpty(password)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,79,String encPassword = userDao.encryptPassword(username, password);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,21,import org.apache.ambari.logsearch.util.StringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,25,import org.springframework.beans.factory.annotation.Autowired;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,38,StringUtil stringUtil;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchSimpleAuthenticationProvider.java,49,if (stringUtil.isEmpty(username)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,19,package org.apache.ambari.logsearch.security.context;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,21,public class LogsearchContextHolder {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,23,private static final ThreadLocal<LogsearchSecurityContext> securityContextThreadLocal = new ThreadLocal<LogsearchSecurityContext>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,25,private LogsearchContextHolder() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,29,public static LogsearchSecurityContext getSecurityContext() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,30,return securityContextThreadLocal.get();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,33,public static void setSecurityContext(LogsearchSecurityContext context) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,34,securityContextThreadLocal.set(context);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,37,public static void resetSecurityContext() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/security/context/LogsearchContextHolder.java,38,securityContextThreadLocal.remove();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserInfoAttributes.java,19,package org.apache.ambari.logsearch.dao;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserInfoAttributes.java,21,public interface UserInfoAttributes {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserInfoAttributes.java,23,public static final String USER_NAME = "username";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserInfoAttributes.java,24,public static final String PASSWORD = "password";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserInfoAttributes.java,25,public static final String ENC_PASSWORD = "en_password";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserInfoAttributes.java,26,public static final String NAME = "name";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,91,public static final String DEFAULT_SERVICE_COLUMN_SUFFIX = "service";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,92,public static final String DEFAULT_AUDIT_COLUMN_SUFFIX = "audit";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,602,boolean result = _populateSchemaFields();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,603,if (!result && !populateFieldsThreadActive) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,606,+ collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,608,+ collectionName) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,612,+ collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,620,logger.info("Populate fields for collection "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,621,+ collectionName + " is success");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,622,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,625,logger.info("Sleep interrupted while populating fields for collection "
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,626,+ collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,630,+ collectionName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,631,+ ", retryCount="
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,632,+ retryCount);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,634,populateFieldsThreadActive = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,638,+ collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,653,request.setPath("/schema/fields");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,669,collectionName);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,83,String suffix = (String) searchCriteria.getParamValue("suffix");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,84,String typeXAxis = ConfigUtil.schemaFieldsName.get(xAxisField + suffix);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,105,return rangeStackGraph(xAxisField, yAxisField, stackField, from, to,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,106,unit, solrDaoBase, typeXAxis, fieldTime, solrQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,265,if (isTypeNumber(typeXAxis)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,340,if (isTypeNumber(typeXAxis)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,380,private VBarDataList rangeStackGraph(String xAxisField, String yAxisField,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,381,String stackField, String from, String to, String unit,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/graph/GraphDataGenerator.java,382,SolrDaoBase solrDaoBase, String typeXAxis, String fieldTime,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,471,String suffix = PropertiesUtil.getProperty("logsearch.solr.collection.audit.logs",LogSearchConstants.DEFAULT_AUDIT_COLUMN_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,476,ConfigUtil.getSchemaFieldsName(suffix, excludeArray, fieldNames);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,495,String suffix = PropertiesUtil.getProperty("logsearch.solr.collection.audit.logs",LogSearchConstants.DEFAULT_AUDIT_COLUMN_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,496,searchCriteria.addParam("suffix", suffix);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1692,String suffix = PropertiesUtil.getProperty("logsearch.solr.collection.service.logs",LogSearchConstants.DEFAULT_SERVICE_COLUMN_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1697,ConfigUtil.getSchemaFieldsName(suffix, excludeArray, fieldNames);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1761,String suffix = PropertiesUtil.getProperty("logsearch.solr.collection.service.logs",LogSearchConstants.DEFAULT_SERVICE_COLUMN_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1762,searchCriteria.addParam("suffix", suffix);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,340,String type;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,343,String auditSuffix = PropertiesUtil
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,344,.getProperty("logsearch.solr.collection.audit.logs",LogSearchConstants.DEFAULT_AUDIT_COLUMN_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,345,type = ConfigUtil.schemaFieldsName.get(key + auditSuffix);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,348,String serviceLogs = PropertiesUtil.getProperty("logsearch.solr.collection.service.logs",LogSearchConstants.DEFAULT_SERVICE_COLUMN_SUFFIX);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,349,type = ConfigUtil.schemaFieldsName.get(key + serviceLogs);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,356,type = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,358,if (type == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,359,return key + ":" + "*" + str + "*";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,361,return key + ":" + solrUtil.escapeForStandardTokenizer(str);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,363,|| "string".equalsIgnoreCase(type)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,364,return key + ":" + solrUtil.makeSolrSearchStringWithoutAsterisk(str);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,366,return key + ":" + str;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,368,return key + ":" + putEscapeCharacterForNumber(str);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,371,private String putEscapeCharacterForNumber(String str) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,372,String escapeCharSting = "" + returnDefaultIfValueNotNumber(str);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,373,escapeCharSting = str.replace("-", "\\-");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,377,private String returnDefaultIfValueNotNumber(String str) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,379,return "" + Integer.parseInt(str);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/query/QueryGeneration.java,381,return "0";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,44,public static HashMap<String, String> schemaFieldsName = new HashMap<String, String>();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,96,String suffix) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,99,JSONArray jsonArrayList = jsonObject.getJSONArray("fields");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,101,if(jsonArrayList == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,113,&& !name.contains("tags") && !name.contains("_str")) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,114,schemaFieldsName.put(name + suffix, type);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,121,+ MessageEnums.ERROR_SYSTEM);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,128,public static void getSchemaFieldsName(String suffix, String excludeArray[],
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,129,List<String> fieldNames) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,130,if (!schemaFieldsName.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,132,.iterator();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,136,Map.Entry fieldName = (Map.Entry) iteratorSechmaFieldsName
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,137,.next();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,140,if (field.contains(suffix)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,141,field = field.replace(suffix, "");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,142,if (!isExclude(field, excludeArray)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/ConfigUtil.java,143,fieldNames.add(field);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1892,+ LogSearchConstants.ASCENDING_ORDER;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,550,if (event != null && !"/getLiveLogsCount".equalsIgnoreCase(event)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditMgr.java,261,solrQuery.setParam("event", "/getLiveLogsCount");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,143,solrQuery.setParam("event", "/solr/logs_search");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,470,solrQuery.setParam("event", "/getHostListByComponent");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,531,query.setParam("event", "/getLogLevelCounts");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1126,return convertObjToString(new VSolrLogList());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1257,solrQuery.set("event", "/getHistogramData");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1342,public String cancelFindRequestByDate(HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1343,String uniqueId = null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1345,uniqueId = (String) request.getParameter("token");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/LogsMgr.java,1519,solrQuery.setParam("event", "/getComponentListWithLevelCounts");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,38,public class AuditREST {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,106,public String getTopAuditComponents(@Context HttpServletRequest request) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,107,SearchCriteria searchCriteria = new SearchCriteria(request);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,108,searchCriteria.addRequiredAuditLogsParams(request);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,109,searchCriteria.addParam("field", request.getParameter("field"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,110,searchCriteria.addParam("unit", request.getParameter("unit"));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/AuditREST.java,111,return auditMgr.getTopAuditFieldCount(searchCriteria);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/DashboardREST.java,43,public class DashboardREST {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/DashboardREST.java,179,return logMgr.cancelFindRequestByDate(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,65,private static final String LOGSEARCH_QUERY_PATH = "/service/dashboard/solr/logs_search";
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,67,private static final String LOGSEARCH_GET_LOG_LEVELS_PATH = "/service/dashboard/getLogLevelCounts";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,83,.getClassLoader());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,84,WebAppContext context = new WebAppContext();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,85,context.setBaseResource(Resource.newResource(webResourceBase));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,86,context.setContextPath(ROOT_CONTEXT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,87,context.setParentLoaderPriority(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/LogSearch.java,88,server.setHandler(context);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,411,connectable = message.getConnectable();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/message/Connect.java,53,public Connectable getConnectable(){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/message/Connect.java,54,return new HiveConnectionWrapper(getJdbcUrl(),username,password);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/internal/HiveConnectionWrapper.java,34,public class HiveConnectionWrapper implements Connectable,Supplier<HiveConnection> {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/internal/HiveConnectionWrapper.java,43,public HiveConnectionWrapper(String jdbcUrl, String username, String password) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/internal/HiveConnectionWrapper.java,59,Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/internal/HiveConnectionWrapper.java,60,connection = (HiveConnection)conn;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,84,private static final List<String> STACK_PREFIXES = asList(StackId.HDP_STACK, StackId.HDPWIN_STACK);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,161,for (String stackPrefix : STACK_PREFIXES) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,162,if (version.startsWith(stackPrefix + "-")) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,163,version = version.substring(stackPrefix.length() + 1);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,404,for (String stackPrefix : STACK_PREFIXES) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,405,if (version.startsWith(stackPrefix + "-")) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,406,version = version.substring(stackPrefix.length() + 1);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,410,if (stackId.getStackName().equalsIgnoreCase(StackId.HDP_STACK) ||
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,411,stackId.getStackName().equalsIgnoreCase(StackId.HDPWIN_STACK)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,413,String leading = stackId.getStackVersion();  // E.g, 2.3
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,415,String[] leadingParts = leading.split("\\.");
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,416,if (null != leadingParts && leadingParts.length > 2) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,417,leading = leadingParts[0] + "." + leadingParts[1];
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,419,return version.startsWith(leading);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,422,return true;
ambari-server/src/main/java/org/apache/ambari/server/state/StackId.java,28,public static final String HDP_STACK = "HDP";
ambari-server/src/main/java/org/apache/ambari/server/state/StackId.java,29,public static final String HDPWIN_STACK = "HDPWIN";
ambari-server/src/main/java/org/apache/ambari/server/state/StackId.java,30,public static final String BIGTOP_STACK = "BIGTOP";
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceModule.java,419,themeModules.put(module.getId(), module);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,144,System.out.print(String.format("DB configs consistency check failed. Run \"ambari-server start --skip-database-check\" to skip. " +
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,149,System.out.print("No errors were found.");
ambari-server/src/main/java/org/apache/ambari/server/api/GsonJsonProvider.java,35,import java.io.*;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,386,cleanUpWithTermination();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,52,public static ConnectionConfig create(ViewContext context) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,26,import com.google.common.collect.Multimap;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,352,notifyConnectFailure(new SQLException("Hive connection is not created"));
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/AsyncJobRunner.java,23,import org.apache.ambari.view.hive2.actor.message.job.AsyncExecutionFailed;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/AsyncJobRunnerImpl.java,34,import org.apache.ambari.view.hive2.actor.message.job.AsyncExecutionFailed;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/AsyncJobRunnerImpl.java,40,import org.apache.ambari.view.hive2.utils.ServiceFormattedException;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/ConnectionConfig.java,22,import org.apache.ambari.view.hive2.actor.message.HiveJob;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/ConnectionConfig.java,26,private final String password;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/browser/HiveBrowserService.java,78,List<String> databases = delegator.getDbList(getHiveConnectionConfig(), like);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,141,throw new Exception(error.get().getError());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,552,public Response setupPassword(AuthRequest request) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,553,try {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,555,authCredentials.setPassword(request.password);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,560,return Response.ok().status(200).build();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,562,throw ex;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,564,throw new ServiceFormattedException(ex.getMessage(), ex);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,367,ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,368,AmbariManagementController controller = injector.getInstance(AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,370,Clusters clusters = controller.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,486,AmbariManagementController controller = injector.getInstance(AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,488,Clusters clusters = controller.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1201,if (componentName.equals("NAMENODE") || componentName.equals("DATANODE") || componentName.equals("RESOURCEMANAGER") || componentName.equals("NODEMANAGER") || componentName.equals("JOURNALNODE") || componentName.equals("HISTORYSERVER")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,23,import java.io.StringReader;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,24,import java.io.StringWriter;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,29,import java.util.Map.Entry;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,30,import java.util.Set;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,51,import javax.xml.parsers.DocumentBuilder;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,52,import javax.xml.parsers.DocumentBuilderFactory;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,53,import javax.xml.parsers.ParserConfigurationException;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,54,import javax.xml.transform.OutputKeys;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,55,import javax.xml.transform.Transformer;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,56,import javax.xml.transform.TransformerException;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,57,import javax.xml.transform.TransformerFactory;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,58,import javax.xml.transform.TransformerFactoryConfigurationError;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,59,import javax.xml.transform.dom.DOMSource;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,60,import javax.xml.transform.stream.StreamResult;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,64,import org.apache.ambari.view.utils.ambari.AmbariApi;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,65,import org.apache.ambari.view.utils.hdfs.HdfsApi;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,66,import org.apache.ambari.view.utils.hdfs.HdfsUtil;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,70,import org.apache.hadoop.fs.FSDataOutputStream;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,73,import org.w3c.dom.Document;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,74,import org.w3c.dom.Element;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,75,import org.xml.sax.InputSource;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,76,import org.xml.sax.SAXException;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,84,private static final String OOZIE_WF_APPLICATION_PATH_CONF_KEY = "oozie.wf.application.path";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,85,private static final String OOZIE_WF_RERUN_FAILNODES_CONF_KEY = "oozie.wf.rerun.failnodes";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,86,private static final String OOZIE_USE_SYSTEM_LIBPATH_CONF_KEY = "oozie.use.system.libpath";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,87,private static final String XML_INDENT_SPACES = "4";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,88,private static final String XML_INDENT_AMT_PROP_NAME = "{http://xml.apache.org/xslt}indent-amount";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,89,private ViewContext viewContext;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,90,private AmbariApi ambariApi;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,91,private HdfsApi _hdfsApi = null;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,93,private static final String USER_NAME_HEADER = "user.name";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,94,private static final String USER_OOZIE_SUPER = "oozie";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,95,private static final String DO_AS_HEADER = "doAs";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,97,private static final String SERVICE_URI_PROP = "oozie.service.uri";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,98,private static final String DEFAULT_SERVICE_URI = "http://sandbox.hortonworks.com:11000/oozie";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,100,private final static Logger LOGGER = LoggerFactory
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,101,.getLogger(OozieProxyImpersonator.class);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,104,public OozieProxyImpersonator(ViewContext viewContext) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,105,this.viewContext = viewContext;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,106,this.ambariApi = new AmbariApi(viewContext);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,107,LOGGER.info(String.format(
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,109,viewContext.getInstanceName()));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,113,public FileServices fileServices() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,114,return new FileServices(viewContext);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,120,public Response submitWorkflow(String postBody, @Context HttpHeaders headers,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,123,LOGGER.info("submit workflow job called");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,124,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,125,if (StringUtils.isEmpty(appPath)) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,126,throw new RuntimeException("app path can't be empty.");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,128,appPath = appPath.trim();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,129,if (!overwrite) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,130,boolean fileExists = getHdfsgetApi().exists(appPath);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,131,LOGGER.info("FILE exists for [" + appPath + "] returned [" + fileExists
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,132,+ "]");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,133,if (fileExists) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,134,HashMap<String, String> resp = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,135,resp.put("status", "workflow.folder.exists");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,136,resp.put("message", "Workflow Folder exists");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,138,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,141,String workflowFile = null;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,142,if (appPath.endsWith(".xml")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,143,workflowFile = appPath;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,146,+ "workflow.xml";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,148,postBody = formatXml(postBody);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,149,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,150,String filePath = createWorkflowFile(postBody, workflowFile, overwrite);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,151,LOGGER.info(String.format("submit workflow job done. filePath=[%s]",
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,152,filePath));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,154,HashMap<String, String> resp = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,155,resp.put("status", "workflow.oozie.error");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,156,resp.put("message", "You dont seem to have access to folder path.");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,158,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,161,String response = submitWorkflowJobToOozie(headers, appPath,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,162,ui.getQueryParameters());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,163,if (response != null && response.trim().startsWith("{")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,165,return Response.status(Response.Status.OK).entity(response).build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,167,HashMap<String, String> resp = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,168,resp.put("status", "workflow.oozie.error");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,169,resp.put("message", response);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,171,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,174,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,176,LOGGER.error("Error in submit workflow", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,177,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,183,public Response readWorkflowXxml(
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,185,if (StringUtils.isEmpty(workflowPath)) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,186,throw new RuntimeException("workflowXmlPath can't be empty.");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,188,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,189,final FSDataInputStream is = getHdfsgetApi().open(workflowPath);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,190,StreamingOutput streamer = new StreamingOutput() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,193,public void write(OutputStream os) throws IOException,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,194,WebApplicationException {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,195,IOUtils.copy(is, os);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,196,is.close();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,197,os.close();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,200,return Response.ok(streamer).status(200).build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,202,HashMap<String, String> resp = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,203,resp.put("status", "workflow.oozie.error");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,204,resp.put("message", "Access denied to file path");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,205,return Response.status(Response.Status.FORBIDDEN).entity(resp).build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,207,LOGGER.error("Error in read worfklow file", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,208,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,210,LOGGER.error("Error in read worfklow file", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,211,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,218,public Response submitWorkflow(@Context HttpHeaders headers,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,220,String imgUrl = getServiceUri() + "/v2/job/" + jobid + "?show=graph";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,221,Map<String, String> newHeaders = getHeaders(headers);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,222,final InputStream is = readFromOozie(headers, imgUrl, HttpMethod.GET, null,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,223,newHeaders);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,224,StreamingOutput streamer = new StreamingOutput() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,227,public void write(OutputStream os) throws IOException,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,228,WebApplicationException {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,229,IOUtils.copy(is, os);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,230,is.close();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,231,os.close();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,235,return Response.ok(streamer).status(200).build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,240,public Response handleGet(@Context HttpHeaders headers, @Context UriInfo ui) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,241,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,242,String serviceURI = buildURI(ui);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,243,return consumeService(headers, serviceURI, HttpMethod.GET, null);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,245,LOGGER.error("Error in GET proxy", ex);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,247,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,253,public Response handlePost(String xml, @Context HttpHeaders headers, @Context UriInfo ui) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,254,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,255,String serviceURI = buildURI(ui);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,256,return consumeService(headers, serviceURI, HttpMethod.POST, xml);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,258,LOGGER.error("Error in POST proxy", ex);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,260,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,266,public Response handleDelete(@Context HttpHeaders headers, @Context UriInfo ui) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,267,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,268,String serviceURI = buildURI(ui);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,269,return consumeService(headers, serviceURI, HttpMethod.POST, null);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,271,LOGGER.error("Error in DELETE proxy", ex);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,273,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,279,public Response handlePut(String body, @Context HttpHeaders headers, @Context UriInfo ui) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,281,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,282,String serviceURI = buildURI(ui);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,283,return consumeService(headers, serviceURI, HttpMethod.PUT, body);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,285,LOGGER.error("Error in PUT proxy", ex);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,287,.build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,291,private String submitWorkflowJobToOozie(HttpHeaders headers, String filePath,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,292,MultivaluedMap<String, String> queryParams) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,293,String nameNode = "hdfs://" + viewContext.getCluster().getConfigurationValue("hdfs-site", "dfs.namenode.rpc-address");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,295,if (!queryParams.containsKey("config.nameNode")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,296,ArrayList<String> nameNodes = new ArrayList<String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,297,LOGGER.info("Namenode===" + nameNode);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,298,nameNodes.add(nameNode);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,299,queryParams.put("config.nameNode", nameNodes);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,302,HashMap<String, String> workflowConigs = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,304,&& "useDefault".equals(queryParams.getFirst("resourceManager"))) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,305,String jobTrackerNode = viewContext.getCluster().getConfigurationValue(
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,307,LOGGER.info("jobTrackerNode===" + jobTrackerNode);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,308,workflowConigs.put("resourceManager", jobTrackerNode);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,309,workflowConigs.put("jobTracker", jobTrackerNode);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,311,if (queryParams != null) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,312,for (Map.Entry<String, List<String>> entry : queryParams.entrySet()) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,313,if (entry.getKey().startsWith("config.")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,314,if (entry.getValue() != null && entry.getValue().size() > 0) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,316,.get(0));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,322,if (queryParams.containsKey("oozieconfig.useSystemLibPath")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,323,String useSystemLibPath = queryParams
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,324,.getFirst("oozieconfig.useSystemLibPath");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,325,workflowConigs.put(OOZIE_USE_SYSTEM_LIBPATH_CONF_KEY, useSystemLibPath);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,327,workflowConigs.put(OOZIE_USE_SYSTEM_LIBPATH_CONF_KEY, "true");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,329,if (queryParams.containsKey("oozieconfig.rerunOnFailure")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,330,String rerunFailnodes = queryParams
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,331,.getFirst("oozieconfig.rerunOnFailure");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,332,workflowConigs.put(OOZIE_WF_RERUN_FAILNODES_CONF_KEY, rerunFailnodes);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,334,workflowConigs.put(OOZIE_WF_RERUN_FAILNODES_CONF_KEY, "true");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,337,workflowConigs.put("user.name", viewContext.getUsername());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,338,workflowConigs.put(OOZIE_WF_APPLICATION_PATH_CONF_KEY, nameNode + filePath);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,339,String configXMl = generateConigXml(workflowConigs);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,340,LOGGER.info("Config xml==" + configXMl);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,341,HashMap<String, String> customHeaders = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,342,customHeaders.put("Content-Type", "application/xml;charset=UTF-8");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,344,+ "/v2/jobs", HttpMethod.POST, configXMl, customHeaders);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,346,LOGGER
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,347,.info("REsp from oozie status entity==" + serviceResponse.getEntity());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,348,if (serviceResponse.getEntity() instanceof String) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,349,return (String) serviceResponse.getEntity();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,351,return "success";
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,356,private String createWorkflowFile(String postBody, String workflowFile, boolean overwrite) throws IOException, InterruptedException {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,357,FSDataOutputStream fsOut = getHdfsgetApi().create(workflowFile, overwrite);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,358,fsOut.write(postBody.getBytes());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,359,fsOut.close();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,360,return workflowFile;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,363,private String buildURI(UriInfo ui) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,364,String uiURI = ui.getAbsolutePath().getPath();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,365,int index = uiURI.indexOf("proxy/") + 5;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,366,uiURI = uiURI.substring(index);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,367,String serviceURI = getServiceUri();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,368,serviceURI += uiURI;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,370,MultivaluedMap<String, String> parameters = ui.getQueryParameters();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,371,StringBuilder urlBuilder = new StringBuilder(serviceURI);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,372,boolean firstEntry = true;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,373,for (Map.Entry<String, List<String>> entry : parameters.entrySet()) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,374,if ("user.name".equals(entry.getKey())) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,375,ArrayList<String> vals = new ArrayList<String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,376,vals.add(viewContext.getUsername());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,377,entry.setValue(vals);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,379,if (firstEntry) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,380,urlBuilder.append("?");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,382,urlBuilder.append("&");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,384,boolean firstVal = true;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,385,for (String val : entry.getValue()) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,387,.append("=").append(val);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,388,firstVal = false;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,390,firstEntry = false;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,392,return urlBuilder.toString();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,395,private String getServiceUri() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,396,String serviceURI = viewContext.getProperties().get(SERVICE_URI_PROP) != null ? viewContext
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,397,.getProperties().get(SERVICE_URI_PROP) : DEFAULT_SERVICE_URI;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,398,return serviceURI;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,401,public Response consumeService(HttpHeaders headers, String urlToRead,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,402,String method, String body, Map<String, String> customHeaders) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,403,Response response = null;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,404,InputStream stream = readFromOozie(headers, urlToRead, method, body,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,405,customHeaders);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,406,String stringResponse = null;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,407,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,408,stringResponse = IOUtils.toString(stream);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,410,LOGGER.error("Error while converting stream to string", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,411,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,413,if (stringResponse.contains(Response.Status.BAD_REQUEST.name())) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,415,.entity(stringResponse).type(MediaType.TEXT_PLAIN).build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,418,.type(deduceType(stringResponse)).build();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,420,return response;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,423,private InputStream readFromOozie(HttpHeaders headers, String urlToRead,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,424,String method, String body, Map<String, String> customHeaders) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,425,URLStreamProvider streamProvider = viewContext.getURLStreamProvider();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,426,Map<String, String> newHeaders = getHeaders(headers);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,427,newHeaders.put(USER_NAME_HEADER, USER_OOZIE_SUPER);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,429,newHeaders.put(DO_AS_HEADER, viewContext.getUsername());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,430,newHeaders.put("Accept", MediaType.APPLICATION_JSON);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,431,if (customHeaders != null) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,432,newHeaders.putAll(customHeaders);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,434,LOGGER.info(String.format("Proxy request for url: [%s] %s", method,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,435,urlToRead));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,436,boolean securityEnabled = isSecurityEnabled();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,437,LOGGER.debug(String.format("IS security enabled:[%b]", securityEnabled));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,438,InputStream stream = null;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,439,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,440,if (securityEnabled) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,441,stream = streamProvider.readAsCurrent(urlToRead, method, body, newHeaders);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,444,stream = streamProvider.readFrom(urlToRead, method, body, newHeaders);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,447,LOGGER.error("error talking to oozie", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,448,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,450,return stream;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,453,public Response consumeService(HttpHeaders headers, String urlToRead,
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,454,String method, String body) throws Exception {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,455,return consumeService(headers, urlToRead, method, body, null);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,458,public Map<String, String> getHeaders(HttpHeaders headers) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,459,MultivaluedMap<String, String> requestHeaders = headers.getRequestHeaders();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,460,Set<Entry<String, List<String>>> headerEntrySet = requestHeaders.entrySet();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,461,HashMap<String, String> headersMap = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,462,for (Entry<String, List<String>> headerEntry : headerEntrySet) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,463,String key = headerEntry.getKey();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,464,List<String> values = headerEntry.getValue();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,465,headersMap.put(key, strJoin(values, ","));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,467,return headersMap;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,470,public String strJoin(List<String> strings, String separator) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,471,StringBuilder stringBuilder = new StringBuilder();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,472,for (int i = 0, il = strings.size(); i < il; i++) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,473,if (i > 0) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,474,stringBuilder.append(separator);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,476,stringBuilder.append(strings.get(i));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,478,return stringBuilder.toString();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,481,private MediaType deduceType(String stringResponse) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,482,if (stringResponse.startsWith("{")) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,483,return MediaType.APPLICATION_JSON_TYPE;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,485,return MediaType.TEXT_XML_TYPE;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,487,return MediaType.APPLICATION_JSON_TYPE;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,491,private HdfsApi getHdfsgetApi() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,492,if (_hdfsApi == null) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,493,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,494,_hdfsApi = HdfsUtil.connectToHDFSApi(viewContext);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,496,LOGGER.error("Error in getting HDFS Api", ex);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,497,throw new RuntimeException("HdfsApi connection failed. Check \"webhdfs.url\" property", ex);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,500,return _hdfsApi;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,503,private String generateConigXml(Map<String, String> map) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,504,DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,505,DocumentBuilder db;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,506,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,507,db = dbf.newDocumentBuilder();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,508,Document doc = db.newDocument();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,509,Element configElement = doc.createElement("configuration");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,510,doc.appendChild(configElement);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,511,for (Map.Entry<String, String> entry : map.entrySet()) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,512,Element propElement = doc.createElement("property");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,513,configElement.appendChild(propElement);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,514,Element nameElem = doc.createElement("name");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,515,nameElem.setTextContent(entry.getKey());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,516,Element valueElem = doc.createElement("value");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,517,valueElem.setTextContent(entry.getValue());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,518,propElement.appendChild(nameElem);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,519,propElement.appendChild(valueElem);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,521,DOMSource domSource = new DOMSource(doc);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,522,StringWriter writer = new StringWriter();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,523,StreamResult result = new StreamResult(writer);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,524,TransformerFactory tf = TransformerFactory.newInstance();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,525,Transformer transformer = tf.newTransformer();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,526,transformer.setOutputProperty(OutputKeys.INDENT, "yes");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,527,transformer
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,528,.setOutputProperty(XML_INDENT_AMT_PROP_NAME, XML_INDENT_SPACES);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,529,transformer.transform(domSource, result);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,530,return writer.toString();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,532,LOGGER.error("error in generating config xml", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,533,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,538,private String formatXml(String xml) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,539,DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,540,try {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,541,DocumentBuilder db = dbf.newDocumentBuilder();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,542,StreamResult result = new StreamResult(new StringWriter());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,543,Document document = db.parse(new InputSource(new StringReader(xml)));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,545,.newTransformer();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,546,transformer.setOutputProperty(OutputKeys.INDENT, "yes");
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,547,transformer
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,548,.setOutputProperty(XML_INDENT_AMT_PROP_NAME, XML_INDENT_SPACES);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,549,DOMSource source = new DOMSource(document);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,550,transformer.transform(source, result);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,551,return result.getWriter().toString();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,553,| TransformerFactoryConfigurationError | TransformerException e) {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,554,LOGGER.error("Error in formatting xml", e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,555,throw new RuntimeException(e);
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,559,private boolean isSecurityEnabled() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,560,boolean securityEnabled = Boolean.valueOf(getHadoopConfigs().get(
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,562,return securityEnabled;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,565,private Map<String, String> getHadoopConfigs() {
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,566,return viewContext.getInstanceData();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,191,UserEntity userEntity = userDAO.findLocalUserByName(userName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,192,if (userEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,193,userEntity = userDAO.findLdapUserByName(userName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,196,userEntity = userDAO.findUserByNameAndType(userName, UserType.JWT);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,229,protected Resource toResource(PrivilegeEntity privilegeEntity, Object userName, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,243,final GroupEntity groupEntity = groupDAO.findGroupByPrincipal(privilegeEntity.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,255,final ClusterEntity clusterEntity = clusterDAO.findByResourceId(privilegeEntity.getResource().getId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,259,final ViewInstanceEntity viewInstanceEntity = viewInstanceDAO.findByResourceId(privilegeEntity.getResource().getId());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,123,String previousVersion = sch.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,124,if (previousVersion == null || UNKNOWN_VERSION.equalsIgnoreCase(previousVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,127,sch.setUpgradeState(UpgradeState.NONE);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,128,sch.setVersion(newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,129,bootstrapVersion(cluster, sch);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,131,processComponentVersionChange(cluster, sc, sch, newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/VersionEventPublisher.java,23,import org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/VersionEventPublisher.java,51,public void publish(HostComponentVersionAdvertisedEvent event) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,63,private final String displayName;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,64,private final boolean isClientComponent;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,65,private final boolean isMasterComponent;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,66,private final boolean isVersionAdvertised;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,138,StackId stackId = service.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,139,try {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,140,ComponentInfo compInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,141,stackId.getStackName(), stackId.getStackVersion(), service.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,142,componentName);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,143,isClientComponent = compInfo.isClient();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,144,isMasterComponent = compInfo.isMaster();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,145,isVersionAdvertised = compInfo.isVersionAdvertised();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,146,displayName = compInfo.getDisplayName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,148,throw new AmbariException("Trying to create a ServiceComponent"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,149,+ " not recognized in stack info"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,152,+ ", componentName=" + componentName
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,153,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,224,batchInfo.getUsersToBecomeLdap().add(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,225,LOG.trace("Convert user '{}' to LDAP user.", userName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,296,batchInfo.getUsersToBecomeLdap().add(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,404,batchInfo.getUsersToBecomeLdap().add(externalMember);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog222.java,575,private void updateWidgetDefinitionsForService(String serviceName, Map<String, List<String>> widgetMap,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2663,private void updateWidgetDefinitionsForService(String serviceName, Map<String, List<String>> widgetMap,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2664,Map<String, String> sectionLayoutMap) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2665,AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2666,AmbariMetaInfo ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2667,Type widgetLayoutType = new TypeToken<Map<String, List<WidgetLayout>>>(){}.getType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2668,Gson gson = injector.getInstance(Gson.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2669,WidgetDAO widgetDAO = injector.getInstance(WidgetDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2671,Clusters clusters = ambariManagementController.getClusters();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2673,Map<String, Cluster> clusterMap = getCheckedClusterMap(clusters);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2674,for (final Cluster cluster : clusterMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2675,long clusterID = cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2677,StackId stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2678,Map<String, Object> widgetDescriptor = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2679,StackInfo stackInfo = ambariMetaInfo.getStack(stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2680,ServiceInfo serviceInfo = stackInfo.getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2681,if (serviceInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2682,LOG.info("Skipping updating widget definition, because " + serviceName +  " service is not present in cluster " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2684,continue;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2687,for (String section : widgetMap.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2688,List<String> widgets = widgetMap.get(section);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2689,for (String widgetName : widgets) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2690,List<WidgetEntity> widgetEntities = widgetDAO.findByName(clusterID,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2691,widgetName, "ambari", section);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2693,if (widgetEntities != null && widgetEntities.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2694,WidgetEntity entityToUpdate = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2695,if (widgetEntities.size() > 1) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2696,LOG.info("Found more that 1 entity with name = "+ widgetName +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2699,entityToUpdate = widgetEntities.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2701,if (entityToUpdate != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2702,LOG.info("Updating widget: " + entityToUpdate.getWidgetName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2704,WidgetLayoutInfo targetWidgetLayoutInfo = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2705,File widgetDescriptorFile = serviceInfo.getWidgetsDescriptorFile();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2706,if (widgetDescriptorFile != null && widgetDescriptorFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2707,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2708,widgetDescriptor = gson.fromJson(new FileReader(widgetDescriptorFile), widgetLayoutType);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2710,String msg = "Error loading widgets from file: " + widgetDescriptorFile;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2711,LOG.error(msg, ex);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2712,widgetDescriptor = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2715,if (widgetDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2716,LOG.debug("Loaded widget descriptor: " + widgetDescriptor);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2717,for (Object artifact : widgetDescriptor.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2718,List<WidgetLayout> widgetLayouts = (List<WidgetLayout>) artifact;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2719,for (WidgetLayout widgetLayout : widgetLayouts) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2720,if (widgetLayout.getLayoutName().equals(sectionLayoutMap.get(section))) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2721,for (WidgetLayoutInfo layoutInfo : widgetLayout.getWidgetLayoutInfoList()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2722,if (layoutInfo.getWidgetName().equals(widgetName)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2723,targetWidgetLayoutInfo = layoutInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2730,if (targetWidgetLayoutInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2731,entityToUpdate.setMetrics(gson.toJson(targetWidgetLayoutInfo.getMetricsInfo()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2732,entityToUpdate.setWidgetValues(gson.toJson(targetWidgetLayoutInfo.getValues()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2733,entityToUpdate.setDescription(targetWidgetLayoutInfo.getDescription());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2734,widgetDAO.merge(entityToUpdate);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java,2736,LOG.warn("Unable to find widget layout info for " + widgetName +
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,63,private static boolean errorAvailable = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,64,private static boolean warningAvailable = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,66,public static boolean isErrorAvailable() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,67,return errorAvailable;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,70,public static void setErrorAvailable(boolean errorAvailable) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,71,errorAvailable = errorAvailable;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,74,public static boolean isWarningAvailable() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,75,return warningAvailable;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,78,public static void setWarningAvailable(boolean warningAvailable) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,79,warningAvailable = warningAvailable;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,83,errorAvailable = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,84,warningAvailable = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,87,protected static void setInjector(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,172,warningAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,230,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,285,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,362,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,479,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,563,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,600,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,100,LOG.info("******************************* Check database started *******************************");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,107,DatabaseConsistencyCheckHelper.checkForNotMappedConfigsToCluster();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,109,DatabaseConsistencyCheckHelper.checkForConfigsSelectedMoreThanOnce();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,111,DatabaseConsistencyCheckHelper.checkForHostsWithoutState();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,113,DatabaseConsistencyCheckHelper.checkHostComponentStatesCountEqualsHostComponentsDesiredStates();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,115,DatabaseConsistencyCheckHelper.checkServiceConfigs();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,119,LOG.info("******************************* Check database completed *******************************");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyChecker.java,130,if (DatabaseConsistencyCheckHelper.isErrorAvailable()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,450,for (AlertGroupEntity group : groups) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,451,group.addAlertTarget(entity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,452,s_dao.merge(group);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,21,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,22,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,46,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,47,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,48,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,49,import javax.persistence.criteria.Order;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,50,import javax.persistence.metamodel.SingularAttribute;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,51,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,52,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,53,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,54,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,55,import java.util.concurrent.locks.ReentrantLock;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,571,public void createNotices(List<AlertNoticeEntity> entities) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,572,if (null == entities) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,573,return;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,577,create(entity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,631,entityManagerProvider.get().remove(merge(alertTarget));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,676,entityManagerProvider.get().remove(merge(alertNotice));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertNoticeEntity.java,174,this.historyId = alertHistory.getAlertId();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertNoticeEntity.java,229,: that.notificationId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertNoticeEntity.java,230,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertNoticeEntity.java,233,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertNoticeEntity.java,241,int result = null != notificationId ? notificationId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2176,String key = keyValuePair.split("=")[0];
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2179,key, keyValuePair.split("=")[1], properties, topology);
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,258,Collection<AbstractMetric> metrics = (Collection<AbstractMetric>) record.metrics();
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,263,for (AbstractMetric metric : metrics) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,714,LOG.warn("Old privileges will be removed for " + targetInstanceEntity.getName());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,715,for (PrivilegeEntity privilegeEntity : targetInstancePrivileges) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,716,removePrivilegeEntity(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,726,privilegeDAO.create(targetPrivilege);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,728,targetPrivilege.getPrincipal().getPrivileges().add(sourcePrivilege);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,498,long nowTimestamp = System.currentTimeMillis();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,499,Map<String, String> actionParameters = actionExecutionContext.getParameters();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,500,final Set<String> candidateHosts;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,504,serviceHostComponents = cluster.getService(serviceName).getServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,505,componentName).getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,508,throw new AmbariException("Hosts not found, component="
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,509,+ componentName + ", service = " + serviceName
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,510,+ ", cluster = " + clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,521,Map<String, ServiceComponent> serviceComponents =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,522,cluster.getService(serviceName).getServiceComponents();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,534,throw new AmbariException("Components not found, service = "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,535,+ serviceName + ", cluster = " + clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,562,String hostName = managementController.getHealthyHost(candidateHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,563,if (hostName == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,572,addServiceCheckAction(stage, hostName, smokeTestRole, nowTimestamp, serviceName, componentName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3717,public String getHealthyHost(Set<String> hostList) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3718,String hostName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3720,hostName = candidateHostName;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3721,Host candidateHost = clusters.getHost(hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3723,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3726,return hostName;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,47,String componentName, String displayName, String hostname,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1385,serviceComponentName, displayName, hostName, state,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/JsonHttpPropertyRequest.java,80,if (property == null) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1145,List<Stage> stagesInProgress = db.getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,45,query = "SELECT stage from StageEntity stage WHERE EXISTS (SELECT roleCommand.stageId from HostRoleCommandEntity roleCommand WHERE roleCommand.status IN :statuses AND roleCommand.stageId = stage.stageId AND roleCommand.requestId = stage.requestId ) ORDER by stage.requestId, stage.stageId"),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,71,String AMBARI_IDENTITY_NAME = "ambari-server";
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,406,if (kerberosDetails.createAmbariPrincipal()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,407,KerberosIdentityDescriptor ambariServerIdentityDescriptor = kerberosDescriptor.getIdentity(KerberosHelper.AMBARI_IDENTITY_NAME);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,408,Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,409,if (ambariServerIdentityDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,411,KerberosPrincipalDescriptor principalDescriptor = ambariServerIdentityDescriptor.getPrincipalDescriptor();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,412,if (principalDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,413,putConfiguration(map, principalDescriptor.getConfiguration(), principalDescriptor.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,416,KerberosKeytabDescriptor keytabDescriptor = ambariServerIdentityDescriptor.getKeytabDescriptor();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,417,if (keytabDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,418,putConfiguration(map, keytabDescriptor.getConfiguration(), keytabDescriptor.getFile());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,421,for (Map.Entry<String, Map<String, String>> entry : map.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,422,String configType = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,423,mergeConfigurations(kerberosConfigurations, configType, entry.getValue(), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1402,boolean createAmbariPrincipal = (kerberosEnvProperties == null) || !"false".equalsIgnoreCase(kerberosEnvProperties.get(CREATE_AMBARI_PRINCIPAL));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1405,if (createAmbariPrincipal) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1406,KerberosIdentityDescriptor ambariServerIdentity = kerberosDescriptor.getIdentity(KerberosHelper.AMBARI_IDENTITY_NAME);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1407,if (ambariServerIdentity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1408,identities.add(ambariServerIdentity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,151,Map<String, String> kerberosEnvProperties = configurations.get("kerberos-env");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,152,if (kerberosEnvProperties != null && kerberosEnvProperties.get(KerberosHelper.CREATE_AMBARI_PRINCIPAL) != null
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,154,&& includeAmbariIdentity) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,155,KerberosIdentityDescriptor ambariServerIdentity = kerberosDescriptor.getIdentity(KerberosHelper.AMBARI_IDENTITY_NAME);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,156,if (ambariServerIdentity != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,157,List<KerberosIdentityDescriptor> componentIdentities = Collections.singletonList(ambariServerIdentity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,158,kerberosHelper.addIdentities(kerberosIdentityDataFileWriter, componentIdentities,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,160,propertiesToIgnore = gatherPropertiesToIgnore(componentIdentities, propertiesToIgnore);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2761,configuration.getDefaultServerTaskTimeout());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2784,configuration.getDefaultServerTaskTimeout());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2830,configuration.getDefaultServerTaskTimeout());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,468,ServiceComponentHost serviceComponentHost = cluster.getService(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,469,serviceName).getServiceComponent(componentName).getServiceComponentHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,472,if (currentDesiredState != State.STARTED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,473,LOG.info("Updating desired state to {} on RESTART for {}/{} because it was {}",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,474,State.STARTED, serviceName, componentName, currentDesiredState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,476,serviceComponentHost.setDesiredState(State.STARTED);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2448,LOG.debug("Created 0 stages");
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostRequest.java,185,.append(", adminState=").append(adminState).append("}");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,578,logComponentInfo("Nothing to do for new updateServiceComponentHost", request, oldState, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,592,logComponentInfo("Ignoring ServiceComponentHost", request, sch.getState(), newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,608,logComponentInfo("Ignoring ServiceComponentHost", request, oldState, newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,614,logComponentInfo("Ignoring ServiceComponentHost", request, oldState, newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,630,logComponentInfo("Handling direct transition update to host component", request, oldState, newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,641,logComponentInfo("Handling update to host component", request, oldState, newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,942,private void logComponentInfo(String msg, ServiceComponentHostRequest request, State oldState, State newDesiredState) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,943,LOG.debug("{}, clusterName={}, serviceName={}, componentName={}, hostname={}, currentState={}, newDesiredState={}",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,944,msg,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,945,request.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,946,request.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,947,request.getComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,948,request.getHostname(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,949,oldState == null ? "null" : oldState,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,950,newDesiredState == null ? "null" : newDesiredState);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,86,private static Map<String, Map<String, PropertyUpdater>> singleHostTopologyUpdaters =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,119,private static Map<String, Map<String, PropertyUpdater>> removePropertyUpdaters =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2280,Map<String, PropertyUpdater> oozieEnvOriginalValueMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2315,singleHostTopologyUpdaters.put("oozie-site", oozieSiteMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2360,removePropertyUpdaters.put("oozie-env", oozieEnvOriginalValueMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2361,removePropertyUpdaters.put("oozie-site", oozieSiteOriginalValueMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2540,oozieSiteMap.put("oozie.base.url", new SingleHostTopologyUpdater("OOZIE_SERVER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2541,oozieSiteMap.put("oozie.authentication.kerberos.principal", new SingleHostTopologyUpdater("OOZIE_SERVER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2542,oozieSiteMap.put("oozie.ha.authentication.kerberos.principal", new SingleHostTopologyUpdater("OOZIE_SERVER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2543,oozieSiteMap.put("oozie.service.HadoopAccessorService.kerberos.principal", new SingleHostTopologyUpdater("OOZIE_SERVER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2544,multiCoreSiteMap.put("hadoop.proxyuser.oozie.hosts", new MultipleHostTopologyUpdater("OOZIE_SERVER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2547,oozieEnvOriginalValueMap.put("oozie_existing_mysql_host", new OriginalValuePropertyUpdater());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/savedQueries/SavedQueryService.java,76,public Response getOne(@PathParam("queryId") String queryId) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/savedQueries/SavedQueryService.java,78,SavedQuery savedQuery = getResourceManager().read(queryId);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/savedQueries/SavedQueryService.java,79,JSONObject object = new JSONObject();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/savedQueries/SavedQueryService.java,80,object.put("savedQuery", savedQuery);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/savedQueries/SavedQueryService.java,81,return Response.ok(object).build();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryService.java,76,public Response getOne(@PathParam("queryId") String queryId) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryService.java,77,try {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryService.java,78,SavedQuery savedQuery = getResourceManager().read(queryId);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryService.java,79,JSONObject object = new JSONObject();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryService.java,80,object.put("savedQuery", savedQuery);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryService.java,81,return Response.ok(object).build();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,36,private static final  String AMBARI_HIVE_SERVICE_NAME = "HIVE";
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,92,.append(sessionParams);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,103,if (quorum == null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,104,quorum = context.getCluster().getConfigurationValue(HIVE_INTERACTIVE_SITE, ZK_HIVE_QUORUM);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,108,if (namespace == null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,115,if(Strings.isNullOrEmpty(sessionParams)){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,119,if(!sessionParams.contains(HS2_PROXY_USER)) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionFactory.java,120,sessionParams = sessionParams + ";" + HS2_PROXY_USER + "=" + context.getUsername();
ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java,118,return serviceType;
ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java,122,this.serviceType = serviceType;
ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java,125,public String getServiceDisplayName() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,50,private static final String RANGER_SPNEGO_PRINCIPAL = "ranger.spnego.kerberos.principal";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,173,targetValues.put(RANGER_PLUGINS_STORM_SERVICE_USER, stormUser);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,223,String spnegoPrincipal = hdfsSiteConfig.getProperties().get("dfs.web.authentication.kerberos.principal");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,226,if (null != spnegoPrincipal) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,227,targetValues.put(RANGER_SPNEGO_PRINCIPAL, spnegoPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,228,rangerAdminconfig.setProperties(targetValues);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,229,rangerAdminconfig.persist(false);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,230,sucessMsg = sucessMsg + MessageFormat.format("{0}\n", RANGER_SPNEGO_PRINCIPAL);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerKerberosConfigCalculation.java,232,errMsg = errMsg + MessageFormat.format("{0} not found in {1}\n", "dfs.web.authentication.kerberos.principal", HDFS_SITE_CONFIG_TYPE);
ambari-server/src/main/java/org/apache/ambari/server/api/services/UserService.java,175,Collections.singletonMap(Resource.Type.User, StringUtils.lowerCase(userName)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,38,public class UserResourceProvider extends AbstractControllerResourceProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/ComparisonPredicate.java,92,return stringValue.compareTo(propertyValue.toString());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,49,userName = StringUtils.lowerCase(userEntity.getUserName()); // normalize to lower case
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,286,userName = StringUtils.lowerCase(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,288,if (getUser(userName, userType) != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,289,throw new AmbariException("User " + userName + " already exists");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,716,for (TimelineMetric tm: timelineMetrics) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,57,import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,764,createUserIdentity(identityDescriptor, kerberosConfiguration, kerberosOperationHandler, configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,772,createUserIdentity(identityDescriptor, kerberosConfiguration, kerberosOperationHandler, configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,783,KerberosIdentityDescriptor ambariServerIdentity = kerberosDescriptor.getIdentity(KerberosHelper.AMBARI_IDENTITY_NAME);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,784,if (ambariServerIdentity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,785,createUserIdentity(ambariServerIdentity, kerberosConfiguration, kerberosOperationHandler, configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,786,installAmbariIdentity(ambariServerIdentity, configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,787,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,788,KerberosChecker.checkJaasConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,790,LOG.error("Error in Ambari JAAS configuration: ", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,817,Map<String, Map<String, String>> configurations) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,821,KerberosPrincipalEntity ambariServerPrincipalEntity = kerberosPrincipalDAO.find(principal);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,823,if(ambariServerPrincipalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,824,KerberosKeytabDescriptor keytabDescriptor = ambariServerIdentity.getKeytabDescriptor();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,825,if(keytabDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,826,String keytabFilePath = variableReplacementHelper.replaceVariables(keytabDescriptor.getFile(), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,829,.installAmbariServerIdentity(principal, ambariServerPrincipalEntity.getCachedKeytabPath(), keytabFilePath, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1446,private boolean createUserIdentity(KerberosIdentityDescriptor identityDescriptor,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1447,Map<String, String> kerberosEnvProperties,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1448,KerberosOperationHandler kerberosOperationHandler,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1452,boolean created = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1459,if (KerberosPrincipalType.USER == principalDescriptor.getType()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1469,false,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1481,Keytab keytab = injector.getInstance(CreateKeytabFilesServerAction.class).createKeytab(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1495,created = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1502,return created;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1704,dataDirectory, roleCommandOrder, requestStageContainer);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1906,dataDirectory, roleCommandOrder, requestStageContainer);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2001,private File createTemporaryDirectory() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2004,if ((tempDirectoryPath == null) || tempDirectoryPath.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2005,tempDirectoryPath = System.getProperty("java.io.tmpdir");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2009,if (tempDirectoryPath == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2010,throw new IOException("The System property 'java.io.tmpdir' does not specify a temporary directory");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2018,directory = new File(tempDirectoryPath, String.format("%s%d-%d.d",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2029,throw new IOException(String.format("Failed to create a temporary directory in %s", tempDirectoryPath));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2971,File dataDirectory,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java,103,.build();
ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java,130,text = alertText;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ServiceComponentDesiredStateDAO.java,120,entityManagerProvider.get().remove(merge(serviceComponentDesiredStateEntity));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,344,return deleteHosts(requests, request.isDryRunRequest());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,348,notifyDelete(Resource.Type.Host, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,851,validateHostInDeleteFriendlyState(hostRequest, clusters);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,869,if (deleteStatusMetaData.getDeletedKeys().size() + deleteStatusMetaData.getExceptionForKeys().size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,870,if (deleteStatusMetaData.getDeletedKeys().size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,871,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,873,for (Map.Entry<String, Exception> entry : deleteStatusMetaData.getExceptionForKeys().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,874,Exception ex =  entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,875,if (ex instanceof AmbariException) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,876,throw (AmbariException)ex;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,878,throw new AmbariException(ex.getMessage(), ex);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,907,private void validateHostInDeleteFriendlyState(HostRequest hostRequest, Clusters clusters ) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,910,if (null != hostRequest.getClusterName()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,911,clusterNamesForHost.add(hostRequest.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,913,Set<Cluster> clustersForHost = clusters.getClustersForHost(hostRequest.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,914,if (null != clustersForHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,915,for (Cluster c : clustersForHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,916,clusterNamesForHost.add(c.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,921,for (String clusterName : clusterNamesForHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,922,Cluster cluster = clusters.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,924,List<ServiceComponentHost> list = cluster.getServiceComponentHosts(hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,926,if (!list.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,927,List<String> componentsToRemove = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,928,for (ServiceComponentHost sch : list) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,929,componentsToRemove.add(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,937,.append(".  The following roles exist, and these components must be stopped if running, and then deleted: ");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestImpl.java,88,public RequestImpl(Set<String> propertyIds, Set<Map<String, Object>> properties,
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,69,private static final RequestImpl REQUEST = new RequestImpl(null, null, null, null, null, PAGE_REQUEST);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,123,Long latest = latestTimestamps.get(role).getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,125,if (command.getStartTime() > latest) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,126,latestTimestamps.put(role, command);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,380,bindNotificationDispatchers();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,381,registerUpgradeChecks();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,572,private void bindNotificationDispatchers() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,573,ClassPathScanningCandidateComponentProvider scanner =
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,574,new ClassPathScanningCandidateComponentProvider(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,581,AssignableTypeFilter filter = new AssignableTypeFilter(
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,584,scanner.addIncludeFilter(filter);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,586,Set<BeanDefinition> beanDefinitions = scanner.findCandidateComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,592,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,626,private void registerUpgradeChecks() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,627,ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,634,AssignableTypeFilter filter = new AssignableTypeFilter(AbstractCheckDescriptor.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,635,scanner.addIncludeFilter(filter);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,637,Set<BeanDefinition> beanDefinitions = scanner.findCandidateComponents(AbstractCheckDescriptor.class.getPackage().getName());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,642,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,189,if(clusterName == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,190,String actionName = actionRequest.getActionName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,196,if(StringUtils.isEmpty(actionName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,197,actionName = "_unknown_action_";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,200,ActionDefinition actionDefinition = getManagementController().getAmbariMetaInfo().getActionDefinition(actionName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,201,Set<RoleAuthorization> permissions = (actionDefinition == null) ? null : actionDefinition.getPermissions();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,203,if(permissions == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,204,if (!AuthorizationHelper.isAuthorized(ResourceType.AMBARI, null, RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,205,throw new AuthorizationException(String.format("The authenticated user is not authorized to execute the '%s'command.", actionName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,208,else {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,213,if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, null, permissions)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,214,throw new AuthorizationException(String.format("The authenticated user is not authorized to execute the '%s'command.", actionName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,218,else if(actionRequest.isCommand()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,219,if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,220,getClusterResourceId(clusterName), RoleAuthorization.SERVICE_RUN_CUSTOM_COMMAND)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,221,throw new AuthorizationException("The authenticated user is not authorized to execute custom service commands.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,224,else {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,228,if(actionName.contains("SERVICE_CHECK")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,229,if(!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, getClusterResourceId(clusterName), RoleAuthorization.SERVICE_RUN_SERVICE_CHECK)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,233,else if(actionName.equals("DECOMMISSION")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,234,if(!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, getClusterResourceId(clusterName), RoleAuthorization.SERVICE_DECOMMISSION_RECOMMISSION)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,235,throw new AuthorizationException("The authenticated user is not authorized to decommission services.");
contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java,155,JSONObject configurations = readFromCluster("");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostConfigMappingDAO.java,304,List<HostConfigMappingEntity> list = daoUtils.selectList(query, hostEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostConfigMappingDAO.java,306,for (HostConfigMappingEntity entity : list) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,102,private Map<String, StackInfo> stackMap = new HashMap<String, StackInfo>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,155,Map<String, ServiceModule> commonServiceModules = parseCommonServicesDirectory(commonServicesRoot);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,156,Map<String, StackModule> stackModules = parseStackDirectory(stackRoot);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,157,LOG.info("About to parse extension directories");
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,158,Map<String, ExtensionModule> extensionModules = null;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,159,extensionModules = parseExtensionDirectory(extensionRoot);
ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java,39,private String cardinality = "0+";
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,48,this.actorSystem = ActorSystem.create(ACTOR_SYSTEM_NAME);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,49,;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,66,Props.create(OperationController.class, actorSystem, deathWatch, context,
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,67,new ConnectionSupplier(), new DataStorageSupplier(), new HdfsApiSupplier()));
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,85,if(stringActorRefMap != null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,90,if(stringActorRefMap == null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,103,for (ActorRef ref : refs.values()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,104,Inbox inbox = Inbox.create(getActorSystem());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/ConnectionSystem.java,105,inbox.send(ref, PoisonPill.getInstance());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,357,HostEntity hostEntity = null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,404,hostRoleCommandDAO.merge(hostRoleCommandEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,406,hostDAO.merge(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,414,stageDAO.create(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,39,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,40,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,41,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,42,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,43,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,44,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,46,import static org.apache.ambari.server.controller.internal.ProvisionAction.INSTALL_ONLY;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,344,entity.setRequestId(task.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,345,entity.setStageId(task.getStageId());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,346,entity.setTaskId(task.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,264,if(!clusterConfig.getType().endsWith("-env")) {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,108,String message = "Error while creating database accessor ";
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,110,throw new RuntimeException(e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,240,throw new AmbariException(String.format("The available repository %s does not serialize", definitionName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,562,entity.setOperatingSystems(s_repoVersionHelper.get().serializeOperatingSystems(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,563,holder.xml.repositoryInfo.getRepositories()));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,324,File repositoryFile;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,326,if (subDirs.contains(REPOSITORY_FOLDER_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,327,repoDir = getAbsolutePath() + File.separator + REPOSITORY_FOLDER_NAME;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,328,repositoryFile = new File(getPath()+ File.separator +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,329,REPOSITORY_FOLDER_NAME + File.separator + REPOSITORY_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,331,if (repositoryFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,332,try {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,333,repoFile = unmarshaller.unmarshal(RepositoryXml.class, repositoryFile);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,335,repoFile = new RepositoryXml();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,336,repoFile.setValid(false);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,337,String msg = "Unable to parse repo file at location: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,338,repositoryFile.getAbsolutePath();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,339,repoFile.addError(msg);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,340,LOG.warn(msg);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1026,if (rxml == null) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1027,return;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1030,stackInfo.setRepositoryXml(rxml);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1032,LOG.debug("Adding repositories to stack" +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1037,List<RepositoryInfo> repos = rxml.getRepositories();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1039,for (RepositoryInfo ri : repos) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1040,processRepository(ri);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1043,stackInfo.getRepositories().addAll(repos);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1045,if (null != rxml.getLatestURI() && repos.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackServiceDirectory.java,25,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java,32,import com.google.common.io.Files;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java,103,for (JsonElement repositoryJson: osObj.get(RepositoryVersionResourceProvider.SUBRESOURCE_REPOSITORIES_PROPERTY_ID).getAsJsonArray()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java,105,repositoryEntity.setBaseUrl(repositoryJson.getAsJsonObject().get(RepositoryResourceProvider.REPOSITORY_BASE_URL_PROPERTY_ID).getAsString());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java,106,repositoryEntity.setName(repositoryJson.getAsJsonObject().get(RepositoryResourceProvider.REPOSITORY_REPO_NAME_PROPERTY_ID).getAsString());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/RepositoryVersionHelper.java,107,repositoryEntity.setRepositoryId(repositoryJson.getAsJsonObject().get(RepositoryResourceProvider.REPOSITORY_REPO_ID_PROPERTY_ID).getAsString());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,145,processAggregateClusterMetrics(aggregateClusterMetrics, metric, timeSlices);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,152,processAggregateClusterMetrics(aggregateClusterMetrics, metric, timeSlices);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,165,protected void processAggregateClusterMetrics(Map<TimelineClusterMetric, MetricClusterAggregate> aggregateClusterMetrics,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,204,if (TopNCondition.isTopNHostCondition(metricNames, hostnames) || TopNCondition.isTopNMetricCondition(metricNames, hostnames)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java,464,if (! repositoryEntity.getRepositoryId().startsWith("HDP-UTILS") &&  // HDP-UTILS is shared between repo versions
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java,465,! existingRepoVersion.getId().equals(repositoryVersion.getId())) { // Allow modifying already defined repo version
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/files/FileService.java,167,output.writeBytes(request.file.getFileContent());
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/files/FileService.java,192,output.writeBytes(request.file.getFileContent());
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,451,LOG.error("Service(s): {}, from cluster {} has no config(s) in serviceconfig table!", StringUtils.join(clusterServiceMap.get(clusterName), ","), clusterName);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,452,errorAvailable = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,228,if (!skipStartTaskCreate && stack != null && !stack.getComponentInfo(component).isClient()) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1320,public boolean skipInstallTasks(){
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1323,return Boolean.parseBoolean(areHostsSysPrepped()) && Boolean.parseBoolean(skipInstallCommandsProperty);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,426,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,729,stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2779,if (configs.skipInstallTasks() &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2781,newState == State.INSTALLED && !isClientComponent(cluster, scHost)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2782,LOG.info("Skipping create of INSTALL task for {} on {} because host is sysprepped.", scHost
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2783,.getServiceComponentName(), scHost.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2874,private boolean isClientComponent(Cluster cluster, ServiceComponentHost sch) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2879,return serviceComponent.isClientComponent();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,333,public RequestStatusResponse install(String cluster, String hostname, boolean skipFailure) throws  SystemException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,345,requestInfo.put(Setting.SETTING_NAME_SKIP_FAILURE, Boolean.toString(skipFailure));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,578,install(cluster, hostname, skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,120,public boolean shouldSkipInstallTasks() {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,121,return configs.skipInstallTasks();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,352,public RequestStatusResponse installHost(String hostName, String clusterName, boolean skipFailure) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,354,return getHostResourceProvider().install(clusterName, hostName, skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,356,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,365,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,147,RequestStatusResponse installHost(String hostName, boolean skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,227,public RequestStatusResponse installHost(String hostName, boolean skipFailure) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,229,return ambariContext.installHost(hostName, ambariContext.getClusterName(getClusterId()), skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,218,if (context.shouldSkipInstallTasks() && stack != null && !stack.getComponentInfo(component).isClient()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,219,LOG.info("Skipping create of INSTALL task for {} on {} because host is sysprepped.", component, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,510,RequestStatusResponse response = clusterTopology.installHost(hostname, skipFailure);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,499,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,500,LOG.debug("Creating Blueprint, name=" + blueprint.getName());
ambari-server/src/main/java/org/apache/ambari/annotations/TransactionalLock.java,68,HRC_STATUS_CACHE(Configuration.SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,22,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,23,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,24,import org.apache.ambari.server.controller.spi.ClusterController;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,25,import org.apache.ambari.server.controller.spi.Resource;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,26,import org.apache.ambari.server.controller.utilities.ClusterControllerHelper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,27,import org.apache.ambari.server.orm.GuiceJpaInitializer;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,28,import org.apache.ambari.server.state.ConfigHelper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,30,import javax.ws.rs.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,31,import javax.ws.rs.core.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,236,String tmpDir = configs.getProperty(Configuration.SERVER_TMP_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,28,import javax.ws.rs.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,275,String tmpDir = configs.getProperty(Configuration.SERVER_TMP_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,115,MetainfoEntity schemaVersionEntity = metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/ComponentSSLConfiguration.java,60,truststorePath     = configuration.getProperty(Configuration.SSL_TRUSTSTORE_PATH_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/ComponentSSLConfiguration.java,62,truststoreType     = configuration.getProperty(Configuration.SSL_TRUSTSTORE_TYPE_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/ComponentSSLConfiguration.java,63,httpsEnabled = Boolean.parseBoolean(configuration.getProperty(Configuration.AMRABI_METRICS_HTTPS_ENABLED_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/ComponentSSLConfiguration.java,118,String rawPassword = configuration.getProperty(Configuration.SSL_TRUSTSTORE_PASSWORD_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,82,public static final String CONFIG_FILE = "ambari.properties";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,83,public static final String BOOTSTRAP_DIR = "bootstrap.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,89,public static final String PREFIX_DIR = "/var/lib/ambari-agent/data";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,91,public static final String BOOTSTRAP_DIR_DEFAULT = AmbariPath.getPath("/var/run/ambari-server/bootstrap");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,92,public static final String VIEWS_DIR = "views.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,93,public static final String VIEWS_DIR_DEFAULT = AmbariPath.getPath("/var/lib/ambari-server/resources/views");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,94,public static final String VIEWS_VALIDATE = "views.validate";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,95,public static final String VIEWS_VALIDATE_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,96,public static final String VIEWS_REMOVE_UNDEPLOYED = "views.remove.undeployed";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,97,public static final String VIEWS_REMOVE_UNDEPLOYED_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,98,public static final String WEBAPP_DIR = "webapp.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,99,public static final String BOOTSTRAP_SCRIPT = "bootstrap.script";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,100,public static final String BOOTSTRAP_SCRIPT_DEFAULT = AmbariPath.getPath("/usr/bin/ambari_bootstrap");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,101,public static final String BOOTSTRAP_SETUP_AGENT_SCRIPT = "bootstrap.setup_agent.script";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,102,public static final String BOOTSTRAP_SETUP_AGENT_PASSWORD = "bootstrap.setup_agent.password";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,103,public static final String BOOTSTRAP_MASTER_HOSTNAME = "bootstrap.master_host_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,104,public static final String RECOMMENDATIONS_ARTIFACTS_LIFETIME = "recommendations.artifacts.lifetime";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,105,public static final String RECOMMENDATIONS_ARTIFACTS_LIFETIME_DEFAULT = "1w";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,106,public static final String RECOMMENDATIONS_DIR = "recommendations.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,107,public static final String RECOMMENDATIONS_DIR_DEFAULT = AmbariPath.getPath("/var/run/ambari-server/stack-recommendations");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,108,public static final String STACK_ADVISOR_SCRIPT = "stackadvisor.script";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,109,public static final String STACK_ADVISOR_SCRIPT_DEFAULT = AmbariPath.getPath("/var/lib/ambari-server/resources/scripts/stack_advisor.py");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,110,public static final String AMBARI_PYTHON_WRAP_KEY = "ambari.python.wrap";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,111,public static final String AMBARI_PYTHON_WRAP_DEFAULT = "ambari-python-wrap";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,112,public static final String API_AUTHENTICATED_USER = "api.authenticated.user";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,113,public static final String API_USE_SSL = "api.ssl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,114,public static final String API_CSRF_PREVENTION_KEY = "api.csrfPrevention.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,115,public static final String API_GZIP_COMPRESSION_ENABLED_KEY = "api.gzip.compression.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,116,public static final String API_GZIP_MIN_COMPRESSION_SIZE_KEY = "api.gzip.compression.min.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,117,public static final String AGENT_API_GZIP_COMPRESSION_ENABLED_KEY = "agent.api.gzip.compression.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,118,public static final String AGENT_USE_SSL = "agent.ssl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,119,public static final String SRVR_AGENT_HOSTNAME_VALIDATE_KEY = "security.agent.hostname.validate";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,120,public static final String SRVR_TWO_WAY_SSL_KEY = "security.server.two_way_ssl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,121,public static final String SRVR_TWO_WAY_SSL_PORT_KEY = "security.server.two_way_ssl.port";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,122,public static final String SRVR_ONE_WAY_SSL_PORT_KEY = "security.server.one_way_ssl.port";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,123,public static final String SRVR_KSTR_DIR_KEY = "security.server.keys_dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,124,public static final String SRVR_CRT_NAME_KEY = "security.server.cert_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,125,public static final String SRVR_CSR_NAME_KEY = "security.server.csr_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,126,public static final String SRVR_KEY_NAME_KEY = "security.server.key_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,127,public static final String KSTR_NAME_KEY = "security.server.keystore_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,128,public static final String KSTR_TYPE_KEY = "security.server.keystore_type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,129,public static final String TSTR_NAME_KEY = "security.server.truststore_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,130,public static final String TSTR_TYPE_KEY = "security.server.truststore_type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,131,public static final String SRVR_CRT_PASS_FILE_KEY = "security.server.crt_pass_file";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,132,public static final String SRVR_CRT_PASS_KEY = "security.server.crt_pass";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,133,public static final String SRVR_CRT_PASS_LEN_KEY = "security.server.crt_pass.len";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,134,public static final String PASSPHRASE_ENV_KEY = "security.server.passphrase_env_var";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,135,public static final String PASSPHRASE_KEY = "security.server.passphrase";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,136,public static final String SRVR_DISABLED_CIPHERS = "security.server.disabled.ciphers";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,137,public static final String SRVR_DISABLED_PROTOCOLS = "security.server.disabled.protocols";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,138,public static final String RESOURCES_DIR_KEY = "resources.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,139,public static final String METADATA_DIR_PATH = "metadata.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,140,public static final String COMMON_SERVICES_DIR_PATH = "common.services.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,141,public static final String EXTENSIONS_DIR_PATH = "extensions.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,142,public static final String MPACKS_STAGING_DIR_PATH = "mpacks.staging.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,143,public static final String SERVER_VERSION_FILE = "server.version.file";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,144,public static final String SERVER_VERSION_KEY = "version";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,145,public static final String JAVA_HOME_KEY = "java.home";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,146,public static final String JDK_NAME_KEY = "jdk.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,147,public static final String JCE_NAME_KEY = "jce.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,148,public static final float  JDK_MIN_VERSION = 1.7f;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,149,public static final String CLIENT_SECURITY_KEY = "client.security";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,150,public static final String CLIENT_API_PORT_KEY = "client.api.port";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,151,public static final String CLIENT_API_SSL_PORT_KEY = "client.api.ssl.port";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,152,public static final String CLIENT_API_SSL_KSTR_DIR_NAME_KEY = "client.api.ssl.keys_dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,153,public static final String CLIENT_API_SSL_KSTR_NAME_KEY = "client.api.ssl.keystore_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,154,public static final String CLIENT_API_SSL_KSTR_TYPE_KEY = "client.api.ssl.keystore_type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,155,public static final String CLIENT_API_SSL_TSTR_NAME_KEY = "client.api.ssl.truststore_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,156,public static final String CLIENT_API_SSL_TSTR_TYPE_KEY = "client.api.ssl.truststore_type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,157,public static final String CLIENT_API_SSL_CRT_NAME_KEY = "client.api.ssl.cert_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,158,public static final String CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY = "client.api.ssl.cert_pass_file";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,159,public static final String CLIENT_API_SSL_CRT_PASS_KEY = "client.api.ssl.crt_pass";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,160,public static final String CLIENT_API_SSL_KEY_NAME_KEY = "client.api.ssl.key_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,161,public static final String ENABLE_AUTO_AGENT_CACHE_UPDATE_KEY = "agent.auto.cache.update";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,162,public static final String ENABLE_AUTO_AGENT_CACHE_UPDATE_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,163,public static final String CHECK_REMOTE_MOUNTS_KEY = "agent.check.remote.mounts";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,164,public static final String CHECK_REMOTE_MOUNTS_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,165,public static final String CHECK_MOUNTS_TIMEOUT_KEY = "agent.check.mounts.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,166,public static final String CHECK_MOUNTS_TIMEOUT_DEFAULT = "0";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,167,public static final String SERVER_DB_NAME_KEY = "server.jdbc.database_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,168,public static final String SERVER_DB_NAME_DEFAULT = "ambari";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,169,public static final String REQUEST_READ_TIMEOUT = "views.request.read.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,170,public static final String REQUEST_READ_TIMEOUT_DEFAULT= "10000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,171,public static final String REQUEST_CONNECT_TIMEOUT = "views.request.connect.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,172,public static final String REQUEST_CONNECT_TIMEOUT_DEFAULT = "5000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,173,public static final String AMBARI_REQUEST_READ_TIMEOUT = "views.ambari.request.read.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,174,public static final String AMBARI_REQUEST_READ_TIMEOUT_DEFAULT= "45000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,175,public static final String AMBARI_REQUEST_CONNECT_TIMEOUT = "views.ambari.request.connect.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,176,public static final String AMBARI_REQUEST_CONNECT_TIMEOUT_DEFAULT = "30000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,177,public static final String SERVER_JDBC_POSTGRES_SCHEMA_NAME = "server.jdbc.postgres.schema";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,178,public static final String OJDBC_JAR_NAME_KEY = "db.oracle.jdbc.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,179,public static final String OJDBC_JAR_NAME_DEFAULT = "ojdbc6.jar";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,180,public static final String MYSQL_JAR_NAME_KEY = "db.mysql.jdbc.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,181,public static final String MYSQL_JAR_NAME_DEFAULT = "mysql-connector-java.jar";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,182,public static final String IS_LDAP_CONFIGURED = "ambari.ldap.isConfigured";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,183,public static final String LDAP_USE_SSL_KEY = "authentication.ldap.useSSL";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,184,public static final String LDAP_PRIMARY_URL_KEY = "authentication.ldap.primaryUrl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,185,public static final String LDAP_SECONDARY_URL_KEY = "authentication.ldap.secondaryUrl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,186,public static final String LDAP_BASE_DN_KEY = "authentication.ldap.baseDn";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,187,public static final String LDAP_BIND_ANONYMOUSLY_KEY = "authentication.ldap.bindAnonymously";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,188,public static final String LDAP_MANAGER_DN_KEY = "authentication.ldap.managerDn";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,189,public static final String LDAP_MANAGER_PASSWORD_KEY = "authentication.ldap.managerPassword";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,190,public static final String LDAP_DN_ATTRIBUTE_KEY = "authentication.ldap.dnAttribute";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,191,public static final String LDAP_USERNAME_ATTRIBUTE_KEY = "authentication.ldap.usernameAttribute";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,192,public static final String LDAP_USER_BASE_KEY = "authentication.ldap.userBase";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,193,public static final String LDAP_USER_OBJECT_CLASS_KEY = "authentication.ldap.userObjectClass";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,194,public static final String LDAP_GROUP_BASE_KEY = "authentication.ldap.groupBase";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,195,public static final String LDAP_GROUP_OBJECT_CLASS_KEY = "authentication.ldap.groupObjectClass";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,196,public static final String LDAP_GROUP_NAMING_ATTR_KEY = "authentication.ldap.groupNamingAttr";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,197,public static final String LDAP_GROUP_MEMEBERSHIP_ATTR_KEY = "authentication.ldap.groupMembershipAttr";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,198,public static final String LDAP_ADMIN_GROUP_MAPPING_RULES_KEY = "authorization.ldap.adminGroupMappingRules";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,199,public static final String LDAP_ADMIN_GROUP_MAPPING_MEMBER_ATTR_KEY = "authorization.ldap.adminGroupMappingMemberAttr";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,206,public static final String LDAP_USER_SEARCH_FILTER_KEY = "authentication.ldap.userSearchFilter";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,213,public static final String LDAP_ALT_USER_SEARCH_ENABLED_KEY = "authentication.ldap.alternateUserSearchEnabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,229,public static final String LDAP_ALT_USER_SEARCH_FILTER_KEY = "authentication.ldap.alternateUserSearchFilter"; //TODO: we'll need a more generic solution to support any login name format
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,231,public static final String LDAP_GROUP_SEARCH_FILTER_KEY = "authorization.ldap.groupSearchFilter";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,232,public static final String LDAP_REFERRAL_KEY = "authentication.ldap.referral";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,233,public static final String LDAP_PAGINATION_ENABLED_KEY = "authentication.ldap.pagination.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,234,public static final String LDAP_SYCN_USER_MEMBER_REPLACE_PATTERN = "authentication.ldap.sync.userMemberReplacePattern";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,235,public static final String LDAP_SYCN_GROUP_MEMBER_REPLACE_PATTERN = "authentication.ldap.sync.groupMemberReplacePattern";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,236,public static final String LDAP_SYCN_USER_MEMBER_FILTER = "authentication.ldap.sync.userMemberFilter";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,237,public static final String LDAP_SYCN_GROUP_MEMBER_FILTER = "authentication.ldap.sync.groupMemberFilter";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,238,public static final String SERVER_EC_CACHE_SIZE = "server.ecCacheSize";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,239,public static final String SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED = "server.hrcStatusSummary.cache.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,240,public static final String SERVER_HRC_STATUS_SUMMARY_CACHE_SIZE = "server.hrcStatusSummary.cache.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,241,public static final String SERVER_HRC_STATUS_SUMMARY_CACHE_EXPIRY_DURATION = "server.hrcStatusSummary.cache.expiryDuration";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,242,public static final String SERVER_STALE_CONFIG_CACHE_ENABLED_KEY = "server.cache.isStale.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,243,public static final String SERVER_STALE_CONFIG_CACHE_EXPIRATION_KEY = "server.cache.isStale.expiration";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,244,public static final String SERVER_PERSISTENCE_TYPE_KEY = "server.persistence.type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,245,public static final String SERVER_JDBC_USER_NAME_KEY = "server.jdbc.user.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,246,public static final String SERVER_JDBC_USER_PASSWD_KEY = "server.jdbc.user.passwd";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,247,public static final String SERVER_JDBC_DRIVER_KEY = "server.jdbc.driver";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,248,public static final String SERVER_JDBC_URL_KEY = "server.jdbc.url";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,249,public static final String SERVER_JDBC_PROPERTIES_PREFIX = "server.jdbc.properties.";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,250,public static final String SERVER_PERSISTENCE_PROPERTIES_PREFIX = "server.persistence.properties.";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,252,public static final String SERVER_HTTP_REQUEST_HEADER_SIZE = "server.http.request.header.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,253,public static final String SERVER_HTTP_RESPONSE_HEADER_SIZE = "server.http.response.header.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,254,public static final int SERVER_HTTP_REQUEST_HEADER_SIZE_DEFAULT = 64*1024;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,255,public static final int SERVER_HTTP_RESPONSE_HEADER_SIZE_DEFAULT = 64*1024;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,258,public static final String ROLLING_UPGRADE_SKIP_PACKAGES_PREFIXES_KEY = "rolling.upgrade.skip.packages.prefixes";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,259,public static final String ROLLING_UPGRADE_SKIP_PACKAGES_PREFIXES_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,261,public static final String STACK_UPGRADE_BYPASS_PRECHECKS_KEY = "stack.upgrade.bypass.prechecks";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,262,public static final String STACK_UPGRADE_BYPASS_PRECHECKS_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,271,public static final String STACK_UPGRADE_AUTO_RETRY_TIMEOUT_MINS_KEY = "stack.upgrade.auto.retry.timeout.mins";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,272,public static final String STACK_UPGRADE_AUTO_RETRY_TIMEOUT_MINS_DEFAULT = "0";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,278,public static final String STACK_UPGRADE_AUTO_RETRY_CHECK_INTERVAL_SECS_KEY = "stack.upgrade.auto.retry.check.interval.secs";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,279,public static final String STACK_UPGRADE_AUTO_RETRY_CHECK_INTERVAL_SECS_DEFAULT = "20";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,285,public static final String STACK_UPGRADE_AUTO_RETRY_CUSTOM_COMMAND_NAMES_TO_IGNORE_KEY = "stack.upgrade.auto.retry.command.names.to.ignore";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,286,public static final String STACK_UPGRADE_AUTO_RETRY_CUSTOM_COMMAND_NAMES_TO_IGNORE_DEFAULT = "\"ComponentVersionCheckAction\",\"FinalizeUpgradeAction\"";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,292,public static final String STACK_UPGRADE_AUTO_RETRY_COMMAND_DETAILS_TO_IGNORE_KEY = "stack.upgrade.auto.retry.command.details.to.ignore";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,293,public static final String STACK_UPGRADE_AUTO_RETRY_COMMAND_DETAILS_TO_IGNORE_DEFAULT = "\"Execute HDFS Finalize\"";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,295,public static final String JWT_AUTH_ENBABLED = "authentication.jwt.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,296,public static final String JWT_AUTH_PROVIDER_URL = "authentication.jwt.providerUrl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,297,public static final String JWT_PUBLIC_KEY = "authentication.jwt.publicKey";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,298,public static final String JWT_AUDIENCES = "authentication.jwt.audiences";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,299,public static final String JWT_COOKIE_NAME = "authentication.jwt.cookieName";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,300,public static final String JWT_ORIGINAL_URL_QUERY_PARAM = "authentication.jwt.originalUrlParamName";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,301,public static final String JWT_COOKIE_NAME_DEFAULT = "hadoop-jwt";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,302,public static final String JWT_ORIGINAL_URL_QUERY_PARAM_DEFAULT = "originalUrl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,304,public static final String SERVER_JDBC_CONNECTION_POOL = "server.jdbc.connection-pool";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,305,public static final String SERVER_JDBC_CONNECTION_POOL_MIN_SIZE = "server.jdbc.connection-pool.min-size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,306,public static final String SERVER_JDBC_CONNECTION_POOL_MAX_SIZE = "server.jdbc.connection-pool.max-size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,307,public static final String SERVER_JDBC_CONNECTION_POOL_AQUISITION_SIZE = "server.jdbc.connection-pool.acquisition-size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,308,public static final String SERVER_JDBC_CONNECTION_POOL_MAX_AGE = "server.jdbc.connection-pool.max-age";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,309,public static final String SERVER_JDBC_CONNECTION_POOL_MAX_IDLE_TIME = "server.jdbc.connection-pool.max-idle-time";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,310,public static final String SERVER_JDBC_CONNECTION_POOL_MAX_IDLE_TIME_EXCESS = "server.jdbc.connection-pool.max-idle-time-excess";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,311,public static final String SERVER_JDBC_CONNECTION_POOL_IDLE_TEST_INTERVAL = "server.jdbc.connection-pool.idle-test-interval";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,312,public static final String SERVER_JDBC_CONNECTION_POOL_ACQUISITION_RETRY_ATTEMPTS = "server.jdbc.connection-pool.acquisition-retry-attempts";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,313,public static final String SERVER_JDBC_CONNECTION_POOL_ACQUISITION_RETRY_DELAY = "server.jdbc.connection-pool.acquisition-retry-delay";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,315,public static final String OPERATIONS_RETRY_ATTEMPTS_KEY = "server.operations.retry-attempts";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,316,public static final String OPERATIONS_RETRY_ATTEMPTS_DEFAULT = "0";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,317,public static final int RETRY_ATTEMPTS_LIMIT = 10;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,319,public static final String AMBARI_SERVER_USER = "ambari-server.user";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,321,public static final String SERVER_JDBC_RCA_USER_NAME_KEY = "server.jdbc.rca.user.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,322,public static final String SERVER_JDBC_RCA_USER_PASSWD_KEY = "server.jdbc.rca.user.passwd";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,323,public static final String SERVER_JDBC_RCA_DRIVER_KEY = "server.jdbc.rca.driver";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,324,public static final String SERVER_JDBC_RCA_URL_KEY = "server.jdbc.rca.url";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,325,public static final String SERVER_JDBC_GENERATE_TABLES_KEY = "server.jdbc.generateTables";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,326,public static final String JDBC_UNIT_NAME = "ambari-server";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,327,public static final String JDBC_LOCAL_URL = "jdbc:postgresql://localhost/";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,328,public static final String JDBC_LOCAL_DRIVER = "org.postgresql.Driver";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,329,public static final String DEFAULT_DERBY_SCHEMA = "ambari";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,330,public static final String JDBC_IN_MEMORY_URL = String.format("jdbc:derby:memory:myDB/%s;create=true", DEFAULT_DERBY_SCHEMA);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,331,public static final String JDBC_IN_MEMROY_DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,332,public static final String HOSTNAME_MACRO = "{hostname}";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,333,public static final String JDBC_RCA_LOCAL_URL = "jdbc:postgresql://" + HOSTNAME_MACRO + "/ambarirca";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,334,public static final String JDBC_RCA_LOCAL_DRIVER = "org.postgresql.Driver";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,335,public static final String OS_FAMILY_KEY = "server.os_family";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,336,public static final String OS_VERSION_KEY = "server.os_type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,337,public static final String SRVR_HOSTS_MAPPING = "server.hosts.mapping";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,339,public static final String UPGRADE_FROM_STACK = "source_stack_version";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,340,public static final String UPGRADE_TO_STACK = "target_stack_version";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,341,public static final String SSL_TRUSTSTORE_PATH_KEY = "ssl.trustStore.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,342,public static final String SSL_TRUSTSTORE_PASSWORD_KEY = "ssl.trustStore.password";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,343,public static final String SSL_TRUSTSTORE_TYPE_KEY = "ssl.trustStore.type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,344,public static final String JAVAX_SSL_TRUSTSTORE = "javax.net.ssl.trustStore";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,345,public static final String JAVAX_SSL_TRUSTSTORE_PASSWORD = "javax.net.ssl.trustStorePassword";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,346,public static final String JAVAX_SSL_TRUSTSTORE_TYPE = "javax.net.ssl.trustStoreType";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,347,public static final String SRVR_TWO_WAY_SSL_PORT_DEFAULT = "8441";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,348,public static final String SRVR_ONE_WAY_SSL_PORT_DEFAULT = "8440";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,349,public static final String SRVR_CRT_NAME_DEFAULT = "ca.crt";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,350,public static final String SRVR_KEY_NAME_DEFAULT = "ca.key";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,351,public static final String SRVR_CSR_NAME_DEFAULT = "ca.csr";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,352,public static final String KSTR_NAME_DEFAULT = "keystore.p12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,353,public static final String KSTR_TYPE_DEFAULT = "PKCS12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,356,public static final String TSTR_NAME_DEFAULT = "keystore.p12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,357,public static final String TSTR_TYPE_DEFAULT = "PKCS12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,358,public static final String CLIENT_API_SSL_KSTR_NAME_DEFAULT = "https.keystore.p12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,359,public static final String CLIENT_API_SSL_KSTR_TYPE_DEFAULT = "PKCS12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,362,public static final String CLIENT_API_SSL_TSTR_NAME_DEFAULT = "https.keystore.p12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,363,public static final String CLIENT_API_SSL_TSTR_TYPE_DEFAULT = "PKCS12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,364,public static final String CLIENT_API_SSL_CRT_PASS_FILE_NAME_DEFAULT = "https.pass.txt";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,365,public static final String CLIENT_API_SSL_KEY_NAME_DEFAULT = "https.key";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,366,public static final String CLIENT_API_SSL_CRT_NAME_DEFAULT = "https.crt";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,367,public static final String GLOBAL_CONFIG_TAG = "global";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,368,public static final String MAPREDUCE2_LOG4J_CONFIG_TAG = "mapreduce2-log4j";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,369,public static final String RCA_ENABLED_PROPERTY = "rca_enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,370,public static final String HIVE_CONFIG_TAG = "hive-site";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,371,public static final String HIVE_METASTORE_PASSWORD_PROPERTY = "javax.jdo.option.ConnectionPassword";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,372,public static final String MASTER_KEY_PERSISTED = "security.master.key.ispersisted";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,373,public static final String MASTER_KEY_LOCATION = "security.master.key.location";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,374,public static final String MASTER_KEYSTORE_LOCATION = "security.master.keystore.location";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,375,public static final String MASTER_KEY_ENV_PROP = "AMBARI_SECURITY_MASTER_KEY";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,376,public static final String MASTER_KEY_FILENAME_DEFAULT = "master";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,377,public static final String MASTER_KEYSTORE_FILENAME_DEFAULT = "credentials.jceks";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,378,public static final String TEMPORARY_KEYSTORE_RETENTION_MINUTES = "security.temporary.keystore.retention.minutes";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,379,public static final long TEMPORARY_KEYSTORE_RETENTION_MINUTES_DEFAULT = 90;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,380,public static final String TEMPORARY_KEYSTORE_ACTIVELY_PURGE = "security.temporary.keystore.actibely.purge";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,381,public static final boolean TEMPORARY_KEYSTORE_ACTIVELY_PURGE_DEFAULT = true;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,384,public static final String AMBARI_DISPLAY_URL = "ambari.display.url";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,389,public static final String REPO_SUFFIX_KEY_UBUNTU = "repo.validation.suffixes.ubuntu";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,390,public static final String REPO_SUFFIX_KEY_DEFAULT = "repo.validation.suffixes.default";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,392,public static final String EXECUTION_SCHEDULER_CLUSTERED_KEY = "server.execution.scheduler.isClustered";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,393,public static final String EXECUTION_SCHEDULER_THREADS_KEY = "server.execution.scheduler.maxThreads";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,394,public static final String EXECUTION_SCHEDULER_CONNECTIONS_KEY = "server.execution.scheduler.maxDbConnections";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,395,public static final String EXECUTION_SCHEDULER_MISFIRE_TOLERATION_KEY = "server.execution.scheduler.misfire.toleration.minutes";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,396,public static final String EXECUTION_SCHEDULER_START_DELAY_KEY = "server.execution.scheduler.start.delay.seconds";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,397,public static final String EXECUTION_SCHEDULER_WAIT_KEY = "server.execution.scheduler.wait";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,398,public static final String DEFAULT_SCHEDULER_THREAD_COUNT = "5";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,399,public static final String DEFAULT_SCHEDULER_MAX_CONNECTIONS = "5";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,400,public static final String DEFAULT_EXECUTION_SCHEDULER_MISFIRE_TOLERATION = "480";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,401,public static final String DEFAULT_SCHEDULER_START_DELAY_SECONDS = "120";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,402,public static final String DEFAULT_EXECUTION_SCHEDULER_WAIT_SECONDS = "1";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,403,public static final String SERVER_TMP_DIR_KEY = "server.tmp.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,404,public static final String SERVER_TMP_DIR_DEFAULT = AmbariPath.getPath("/var/lib/ambari-server/tmp");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,405,public static final String EXTERNAL_SCRIPT_TIMEOUT_KEY = "server.script.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,406,public static final String EXTERNAL_SCRIPT_TIMEOUT_DEFAULT = "5000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,407,public static final String DEF_ARCHIVE_EXTENSION;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,408,public static final String DEF_ARCHIVE_CONTENT_TYPE;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,413,public static final String KDC_PORT_KEY = "default.kdcserver.port";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,414,public static final String KDC_PORT_KEY_DEFAULT = "88";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,415,public static final String KDC_CONNECTION_CHECK_TIMEOUT_KEY = "kdcserver.connection.check.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,416,public static final String KDC_CONNECTION_CHECK_TIMEOUT_DEFAULT = "10000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,417,public static final String KERBEROS_KEYTAB_CACHE_DIR_KEY = "kerberos.keytab.cache.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,418,public static final String KERBEROS_KEYTAB_CACHE_DIR_DEFAULT = AmbariPath.getPath("/var/lib/ambari-server/data/cache");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,419,public static final String KERBEROS_CHECK_JAAS_CONFIGURATION_KEY = "kerberos.check.jaas.configuration";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,420,public static final String KERBEROS_CHECK_JAAS_CONFIGURATION_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,425,public static final String RECOVERY_TYPE_KEY = "recovery.type";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,426,public static final String RECOVERY_LIFETIME_MAX_COUNT_KEY = "recovery.lifetime_max_count";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,427,public static final String RECOVERY_MAX_COUNT_KEY = "recovery.max_count";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,428,public static final String RECOVERY_WINDOW_IN_MIN_KEY = "recovery.window_in_minutes";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,429,public static final String RECOVERY_RETRY_GAP_KEY = "recovery.retry_interval";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,430,public static final String RECOVERY_DISABLED_COMPONENTS_KEY = "recovery.disabled_components";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,431,public static final String RECOVERY_ENABLED_COMPONENTS_KEY = "recovery.enabled_components";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,436,public static final String PROXY_ALLOWED_HOST_PORTS = "proxy.allowed.hostports";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,437,public static final String PROXY_ALLOWED_HOST_PORTS_DEFAULT = "*:*";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,444,public static final String PARALLEL_STAGE_EXECUTION_KEY = "server.stages.parallel";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,445,public static final String AGENT_TASK_TIMEOUT_KEY = "agent.task.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,446,public static final String AGENT_PACKAGE_INSTALL_TASK_TIMEOUT_KEY = "agent.package.install.task.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,453,public static final String AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_KEY = "agent.package.parallel.commands.limit";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,454,public static final String AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_DEFAULT = "100";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,456,public static final String AGENT_TASK_TIMEOUT_DEFAULT = "900";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,457,public static final String AGENT_PACKAGE_INSTALL_TASK_TIMEOUT_DEFAULT = "1800";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,462,public static final String SERVER_TASK_TIMEOUT_KEY = "server.task.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,463,public static final String SERVER_TASK_TIMEOUT_DEFAULT = "1200";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,465,public static final String CUSTOM_ACTION_DEFINITION_KEY = "custom.action.definitions";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,466,public static final String SHARED_RESOURCES_DIR_KEY = "shared.resources.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,468,protected static final boolean SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED_DEFAULT = true;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,469,protected static final long SERVER_HRC_STATUS_SUMMARY_CACHE_SIZE_DEFAULT = 10000L;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,470,protected static final long SERVER_HRC_STATUS_SUMMARY_CACHE_EXPIRY_DURATION_DEFAULT = 30; //minutes
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,472,private static final String CUSTOM_ACTION_DEFINITION_DEF_VALUE = AmbariPath.getPath("/var/lib/ambari-server/resources/custom_action_definitions");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,474,private static final long SERVER_EC_CACHE_SIZE_DEFAULT = 10000L;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,475,private static final String SERVER_STALE_CONFIG_CACHE_ENABLED_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,476,private static final String SERVER_STALE_CONFIG_CACHE_EXPIRATION_DEFAULT = "600";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,477,private static final String SERVER_JDBC_USER_NAME_DEFAULT = "ambari";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,478,private static final String SERVER_JDBC_USER_PASSWD_DEFAULT = "bigdata";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,479,private static final String SERVER_JDBC_RCA_USER_NAME_DEFAULT = "mapred";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,480,private static final String SERVER_JDBC_RCA_USER_PASSWD_DEFAULT = "mapred";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,481,private static final String SRVR_AGENT_HOSTNAME_VALIDATE_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,482,private static final String SRVR_TWO_WAY_SSL_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,483,private static final String SRVR_KSTR_DIR_DEFAULT = ".";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,484,private static final String API_CSRF_PREVENTION_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,485,private static final String API_GZIP_COMPRESSION_ENABLED_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,486,private static final String API_GZIP_MIN_COMPRESSION_SIZE_DEFAULT = "10240";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,487,private static final String SRVR_CRT_PASS_FILE_DEFAULT = "pass.txt";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,488,private static final String SRVR_CRT_PASS_LEN_DEFAULT = "50";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,489,private static final String SRVR_DISABLED_CIPHERS_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,490,private static final String SRVR_DISABLED_PROTOCOLS_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,491,private static final String PASSPHRASE_ENV_DEFAULT = "AMBARI_PASSPHRASE";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,492,private static final String RESOURCES_DIR_DEFAULT = AmbariPath.getPath("/var/lib/ambari-server/resources/");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,493,private static final String SHARED_RESOURCES_DIR_DEFAULT = AmbariPath.getPath("/usr/lib/ambari-server/lib/ambari_commons/resources");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,494,private static final String ANONYMOUS_AUDIT_NAME_KEY = "anonymous.audit.name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,496,private static final int CLIENT_API_PORT_DEFAULT = 8080;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,497,private static final int CLIENT_API_SSL_PORT_DEFAULT = 8443;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,498,private static final String LDAP_BIND_ANONYMOUSLY_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,499,private static final String LDAP_PAGINATION_ENABLED_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,506,public static final String SYS_PREPPED_HOSTS_KEY = "packages.pre.installed";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,507,public static final String SYS_PREPPED_HOSTS_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,509,public static final String BLUEPRINT_SKIP_INSTALL_TASKS_KEY = "blueprint.skip_install_tasks";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,510,public static final String BLUEPRINT_SKIP_INSTALL_TASKS_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,515,private static final String LDAP_PRIMARY_URL_DEFAULT = "localhost:33389";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,516,private static final String LDAP_BASE_DN_DEFAULT = "dc=ambari,dc=apache,dc=org";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,517,private static final String LDAP_USERNAME_ATTRIBUTE_DEFAULT = "uid";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,518,private static final String LDAP_DN_ATTRIBUTE_DEFAULT = "dn";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,519,private static final String LDAP_USER_BASE_DEFAULT = "ou=people,dc=ambari,dc=apache,dc=org";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,520,private static final String LDAP_USER_OBJECT_CLASS_DEFAULT = "person";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,521,private static final String LDAP_GROUP_BASE_DEFAULT = "ou=groups,dc=ambari,dc=apache,dc=org";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,522,private static final String LDAP_GROUP_OBJECT_CLASS_DEFAULT = "group";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,523,private static final String LDAP_GROUP_NAMING_ATTR_DEFAULT = "cn";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,524,private static final String LDAP_GROUP_MEMBERSHIP_ATTR_DEFAULT = "member";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,525,private static final String LDAP_ADMIN_GROUP_MAPPING_RULES_DEFAULT = "Ambari Administrators";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,526,private static final String LDAP_ADMIN_GROUP_MAPPING_MEMBER_ATTR_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,537,protected static final String LDAP_ALT_USER_SEARCH_ENABLED_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,543,protected static final String LDAP_USER_SEARCH_FILTER_DEFAULT = "(&({usernameAttribute}={0})(objectClass={userObjectClass}))";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,556,protected static final String LDAP_ALT_USER_SEARCH_FILTER_DEFAULT = "(&(userPrincipalName={0})(objectClass={userObjectClass}))"; //TODO: we'll need a more generic solution to support any login name format
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,558,private static final String LDAP_GROUP_SEARCH_FILTER_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,559,private static final String LDAP_REFERRAL_DEFAULT = "follow";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,561,private static final String LDAP_SYNC_MEMBER_REPLACE_PATTERN_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,562,private static final String LDAP_SYNC_MEMBER_FILTER_DEFAULT = "";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,567,private static final String IS_LDAP_CONFIGURED_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,569,private static final String SERVER_PERSISTENCE_TYPE_DEFAULT = "local";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,570,private static final String SERVER_CONNECTION_MAX_IDLE_TIME = "server.connection.max.idle.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,575,private static final String REPO_SUFFIX_DEFAULT = "/repodata/repomd.xml";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,576,private static final String REPO_SUFFIX_UBUNTU = "/dists/%s/Release";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,578,private static final String PARALLEL_STAGE_EXECUTION_DEFAULT = "true";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,580,private static final String CLIENT_THREADPOOL_SIZE_KEY = "client.threadpool.size.max";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,581,private static final int CLIENT_THREADPOOL_SIZE_DEFAULT = 25;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,582,private static final String AGENT_THREADPOOL_SIZE_KEY = "agent.threadpool.size.max";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,583,private static final int AGENT_THREADPOOL_SIZE_DEFAULT = 25;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,585,private static final String VIEW_EXTRACTION_THREADPOOL_MAX_SIZE_KEY = "view.extraction.threadpool.size.max";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,586,private static final int VIEW_EXTRACTION_THREADPOOL_MAX_SIZE_DEFAULT = 20;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,587,private static final String VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_KEY = "view.extraction.threadpool.size.core";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,588,private static final int VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_DEFAULT = 10;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,589,private static final String VIEW_EXTRACTION_THREADPOOL_TIMEOUT_KEY = "view.extraction.threadpool.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,590,private static final long VIEW_EXTRACTION_THREADPOOL_TIMEOUT_DEFAULT = 100000L;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,591,private static final String VIEW_REQUEST_THREADPOOL_MAX_SIZE_KEY = "view.request.threadpool.size.max";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,592,private static final int VIEW_REQUEST_THREADPOOL_MAX_SIZE_DEFAULT = 0;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,593,private static final String VIEW_REQUEST_THREADPOOL_TIMEOUT_KEY = "view.request.threadpool.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,594,private static final int VIEW_REQUEST_THREADPOOL_TIMEOUT_DEFAULT = 2000;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,600,public static final int PROCESSOR_BASED_THREADPOOL_CORE_SIZE_DEFAULT = 2 * Runtime.getRuntime().availableProcessors();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,605,public static final int PROCESSOR_BASED_THREADPOOL_MAX_SIZE_DEFAULT = 4 * Runtime.getRuntime().availableProcessors();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,607,public static final String PROPERTY_PROVIDER_THREADPOOL_MAX_SIZE_KEY = "server.property-provider.threadpool.size.max";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,608,public static final String PROPERTY_PROVIDER_THREADPOOL_CORE_SIZE_KEY = "server.property-provider.threadpool.size.core";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,609,public static final String PROPERTY_PROVIDER_THREADPOOL_WORKER_QUEUE_SIZE = "server.property-provider.threadpool.worker.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,610,public static final String PROPERTY_PROVIDER_THREADPOOL_COMPLETION_TIMEOUT = "server.property-provider.threadpool.completion.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,612,private static final String SERVER_HTTP_SESSION_INACTIVE_TIMEOUT = "server.http.session.inactive_timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,615,private static final String DEFAULT_JDBC_POOL_MIN_CONNECTIONS = "5";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,616,private static final String DEFAULT_JDBC_POOL_MAX_CONNECTIONS = "32";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,617,private static final String DEFAULT_JDBC_POOL_ACQUISITION_SIZE = "5";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,618,private static final String DEFAULT_JDBC_POOL_MAX_IDLE_TIME_SECONDS = "14400";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,619,private static final String DEFAULT_JDBC_POOL_EXCESS_MAX_IDLE_TIME_SECONDS = "0";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,620,private static final String DEFAULT_JDBC_POOL_MAX_AGE_SECONDS = "0";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,621,private static final String DEFAULT_JDBC_POOL_IDLE_TEST_INTERVAL = "7200";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,622,private static final String DEFAULT_JDBC_POOL_ACQUISITION_RETRY_ATTEMPTS = "30";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,623,private static final String DEFAULT_JDBC_POOL_ACQUISITION_RETRY_DELAY = "1000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,626,private static final String TIMELINE_METRICS_CACHE_DISABLE = "server.timeline.metrics.cache.disabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,627,private static final String TIMELINE_METRICS_CACHE_MAX_ENTRIES = "server.timeline.metrics.cache.max.entries";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,628,private static final String DEFAULT_TIMELINE_METRICS_CACHE_MAX_ENTRIES = "50";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,629,private static final String TIMELINE_METRICS_CACHE_TTL = "server.timeline.metrics.cache.entry.ttl.seconds";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,630,private static final String DEFAULT_TIMELINE_METRICS_CACHE_TTL = "3600";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,631,private static final String TIMELINE_METRICS_CACHE_IDLE_TIME = "server.timeline.metrics.cache.entry.idle.seconds";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,632,private static final String DEFAULT_TIMELINE_METRICS_CACHE_IDLE_TIME = "1800";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,633,private static final String TIMELINE_METRICS_REQUEST_READ_TIMEOUT = "server.timeline.metrics.cache.read.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,634,private static final String DEFAULT_TIMELINE_METRICS_REQUEST_READ_TIMEOUT = "10000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,635,private static final String TIMELINE_METRICS_REQUEST_INTERVAL_READ_TIMEOUT = "server.timeline.metrics.cache.interval.read.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,636,private static final String DEFAULT_TIMELINE_METRICS_REQUEST_INTERVAL_READ_TIMEOUT = "10000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,637,private static final String TIMELINE_METRICS_REQUEST_CONNECT_TIMEOUT = "server.timeline.metrics.cache.connect.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,638,private static final String DEFAULT_TIMELINE_METRICS_REQUEST_CONNECT_TIMEOUT = "5000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,639,private static final String TIMELINE_METRICS_REQUEST_CATCHUP_INTERVAL = "server.timeline.metrics.cache.catchup.interval";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,640,private static final String DEFAULT_TIMELINE_METRICS_REQUEST_CATCHUP_INTERVAL = "300000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,641,private static final String TIMELINE_METRICS_CACHE_HEAP_PERCENT = "server.timeline.metrics.cache.heap.percent";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,642,private static final String DEFAULT_TIMELINE_METRICS_CACHE_HEAP_PERCENT = "15%";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,643,private static final String TIMELINE_METRICS_CACHE_USE_CUSTOM_SIZING_ENGINE = "server.timeline.metrics.cache.use.custom.sizing.engine";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,646,public static final String AMRABI_METRICS_HTTPS_ENABLED_KEY = "server.timeline.metrics.https.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,652,protected static final String EXPERIMENTAL_CONCURRENCY_STAGE_PROCESSING_ENABLED = "experimental.concurrency.stage_processing.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,657,private static final String ALERT_TEMPLATE_FILE = "alerts.template.file";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,662,public static final String ALERTS_EXECUTION_SCHEDULER_THREADS_KEY = "alerts.execution.scheduler.maxThreads";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,667,public static final String ALERTS_EXECUTION_SCHEDULER_THREADS_DEFAULT = "2";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,673,public static final String ALERTS_CACHE_ENABLED = "alerts.cache.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,678,public static final String ALERTS_CACHE_FLUSH_INTERVAL = "alerts.cache.flush.interval";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,684,public static final String ALERTS_CACHE_FLUSH_INTERVAL_DEFAULT = "10";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,689,public static final String ALERTS_CACHE_SIZE = "alerts.cache.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,694,public static final String ALERTS_CACHE_SIZE_DEFAULT = "50000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,699,public static final String HTTP_STRICT_TRANSPORT_HEADER_VALUE_KEY = "http.strict-transport-security";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,700,public static final String HTTP_STRICT_TRANSPORT_HEADER_VALUE_DEFAULT = "max-age=31536000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,701,public static final String HTTP_X_FRAME_OPTIONS_HEADER_VALUE_KEY = "http.x-frame-options";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,702,public static final String HTTP_X_FRAME_OPTIONS_HEADER_VALUE_DEFAULT = "DENY";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,703,public static final String HTTP_X_XSS_PROTECTION_HEADER_VALUE_KEY = "http.x-xss-protection";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,704,public static final String HTTP_X_XSS_PROTECTION_HEADER_VALUE_DEFAULT = "1; mode=block";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,709,public static final String VIEWS_HTTP_STRICT_TRANSPORT_HEADER_VALUE_KEY = "views.http.strict-transport-security";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,710,public static final String VIEWS_HTTP_STRICT_TRANSPORT_HEADER_VALUE_DEFAULT = "max-age=31536000";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,711,public static final String VIEWS_HTTP_X_FRAME_OPTIONS_HEADER_VALUE_KEY = "views.http.x-frame-options";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,712,public static final String VIEWS_HTTP_X_FRAME_OPTIONS_HEADER_VALUE_DEFAULT = "SAMEORIGIN";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,713,public static final String VIEWS_HTTP_X_XSS_PROTECTION_HEADER_VALUE_KEY = "views.http.x-xss-protection";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,714,public static final String VIEWS_HTTP_X_XSS_PROTECTION_HEADER_VALUE_DEFAULT = "1; mode=block";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,722,private static final String VERSION_DEFINITION_CONNECT_TIMEOUT = "server.version_definition.connect.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,726,private static final int VERSION_DEFINITION_CONNECT_TIMEOUT_DEFAULT = 5000;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,730,private static final String VERSION_DEFINITION_READ_TIMEOUT = "server.version_definition.read.timeout.millis";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,734,private static final int VERSION_DEFINITION_READ_TIMEOUT_DEFAULT = 5000;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,739,public static final String AGENT_STACK_RETRY_ON_REPO_UNAVAILABILITY_KEY = "agent.stack.retry.on_repo_unavailability";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,740,public static final String AGENT_STACK_RETRY_ON_REPO_UNAVAILABILITY_DEFAULT = "false";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,741,public static final String AGENT_STACK_RETRY_COUNT_KEY = "agent.stack.retry.tries";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,742,public static final String AGENT_STACK_RETRY_COUNT_DEFAULT = "5";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,744,private static final Set<String> dbConnectorPropertyNames = new HashSet<String>(Arrays.asList("custom.mysql.jdbc.name",
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,751,private static final String AUDIT_LOG_ENABLED = "auditlog.enabled";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,756,private static final String AUDIT_LOGGER_CAPACITY = "auditlog.logger.capacity";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,757,private static final int AUDIT_LOGGER_CAPACITY_DEFAULT = 10000;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,759,public static final String ALERTS_SNMP_DISPATCH_UDP_PORT = "alerts.snmp.dispatcher.udp.port";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,765,public static final String METRIC_RETRIEVAL_SERVICE_CACHE_TIMEOUT = "metrics.retrieval-service.cache.timeout";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,772,public static final String METRIC_RETRIEVAL_SERVICE_THREAD_PRIORITY = "server.metrics.retrieval-service.thread.priority";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,780,public static final String METRIC_RETRIEVAL_SERVICE_THREADPOOL_MAX_SIZE = "server.metrics.retrieval-service.threadpool.size.max";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,785,public static final String METRIC_RETRIEVAL_SERVICE_THREADPOOL_CORE_SIZE = "server.metrics.retrieval-service.threadpool.size.core";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,792,public static final String METRIC_RETRIEVAL_SERVICE_THREADPOOL_WORKER_QUEUE_SIZE = "server.metrics.retrieval-service.threadpool.worker.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,799,private static final String TASK_ID_LIST_LIMIT = "task.query.parameterlist.size";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,800,private static final int TASK_ID_LIST_LIMIT_DEFAULT = 999;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,921,agentConfigsMap.put(CHECK_REMOTE_MOUNTS_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,922,CHECK_REMOTE_MOUNTS_KEY, CHECK_REMOTE_MOUNTS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,923,agentConfigsMap.put(CHECK_MOUNTS_TIMEOUT_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,924,CHECK_MOUNTS_TIMEOUT_KEY, CHECK_MOUNTS_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,926,agentConfigsMap.put(ENABLE_AUTO_AGENT_CACHE_UPDATE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,927,ENABLE_AUTO_AGENT_CACHE_UPDATE_KEY, ENABLE_AUTO_AGENT_CACHE_UPDATE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,931,configsMap.put(AMBARI_PYTHON_WRAP_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,932,AMBARI_PYTHON_WRAP_KEY, AMBARI_PYTHON_WRAP_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,933,configsMap.put(SRVR_AGENT_HOSTNAME_VALIDATE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,934,SRVR_AGENT_HOSTNAME_VALIDATE_KEY, SRVR_AGENT_HOSTNAME_VALIDATE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,935,configsMap.put(SRVR_TWO_WAY_SSL_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,936,SRVR_TWO_WAY_SSL_KEY, SRVR_TWO_WAY_SSL_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,937,configsMap.put(SRVR_TWO_WAY_SSL_PORT_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,938,SRVR_TWO_WAY_SSL_PORT_KEY, SRVR_TWO_WAY_SSL_PORT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,939,configsMap.put(SRVR_ONE_WAY_SSL_PORT_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,940,SRVR_ONE_WAY_SSL_PORT_KEY, SRVR_ONE_WAY_SSL_PORT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,941,configsMap.put(SRVR_KSTR_DIR_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,942,SRVR_KSTR_DIR_KEY, SRVR_KSTR_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,943,configsMap.put(SRVR_CRT_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,944,SRVR_CRT_NAME_KEY, SRVR_CRT_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,945,configsMap.put(SRVR_KEY_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,946,SRVR_KEY_NAME_KEY, SRVR_KEY_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,947,configsMap.put(SRVR_CSR_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,948,SRVR_CSR_NAME_KEY, SRVR_CSR_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,949,configsMap.put(KSTR_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,950,KSTR_NAME_KEY, KSTR_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,951,configsMap.put(KSTR_TYPE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,952,KSTR_TYPE_KEY, KSTR_TYPE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,953,configsMap.put(TSTR_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,954,TSTR_NAME_KEY, TSTR_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,955,configsMap.put(TSTR_TYPE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,956,TSTR_TYPE_KEY, TSTR_TYPE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,957,configsMap.put(SRVR_CRT_PASS_FILE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,958,SRVR_CRT_PASS_FILE_KEY, SRVR_CRT_PASS_FILE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,959,configsMap.put(PASSPHRASE_ENV_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,960,PASSPHRASE_ENV_KEY, PASSPHRASE_ENV_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,961,configsMap.put(PASSPHRASE_KEY, System.getenv(configsMap.get(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,962,PASSPHRASE_ENV_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,963,configsMap.put(RESOURCES_DIR_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,964,RESOURCES_DIR_KEY, RESOURCES_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,965,configsMap.put(SRVR_CRT_PASS_LEN_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,966,SRVR_CRT_PASS_LEN_KEY, SRVR_CRT_PASS_LEN_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,967,configsMap.put(SRVR_DISABLED_CIPHERS, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,968,SRVR_DISABLED_CIPHERS, SRVR_DISABLED_CIPHERS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,969,configsMap.put(SRVR_DISABLED_PROTOCOLS, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,970,SRVR_DISABLED_PROTOCOLS, SRVR_DISABLED_PROTOCOLS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,972,configsMap.put(CLIENT_API_SSL_KSTR_DIR_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,973,CLIENT_API_SSL_KSTR_DIR_NAME_KEY, configsMap.get(SRVR_KSTR_DIR_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,974,configsMap.put(CLIENT_API_SSL_KSTR_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,975,CLIENT_API_SSL_KSTR_NAME_KEY, CLIENT_API_SSL_KSTR_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,976,configsMap.put(CLIENT_API_SSL_KSTR_TYPE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,977,CLIENT_API_SSL_KSTR_TYPE_KEY, CLIENT_API_SSL_KSTR_TYPE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,978,configsMap.put(CLIENT_API_SSL_TSTR_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,979,CLIENT_API_SSL_TSTR_NAME_KEY, CLIENT_API_SSL_TSTR_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,980,configsMap.put(CLIENT_API_SSL_TSTR_TYPE_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,981,CLIENT_API_SSL_TSTR_TYPE_KEY, CLIENT_API_SSL_TSTR_TYPE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,982,configsMap.put(CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,983,CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY, CLIENT_API_SSL_CRT_PASS_FILE_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,984,configsMap.put(CLIENT_API_SSL_KEY_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,985,CLIENT_API_SSL_KEY_NAME_KEY, CLIENT_API_SSL_KEY_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,986,configsMap.put(CLIENT_API_SSL_CRT_NAME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,987,CLIENT_API_SSL_CRT_NAME_KEY, CLIENT_API_SSL_CRT_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,988,configsMap.put(JAVA_HOME_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,989,JAVA_HOME_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,990,configsMap.put(PARALLEL_STAGE_EXECUTION_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,991,PARALLEL_STAGE_EXECUTION_KEY, PARALLEL_STAGE_EXECUTION_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,992,configsMap.put(SERVER_TMP_DIR_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,993,SERVER_TMP_DIR_KEY, SERVER_TMP_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,994,configsMap.put(EXTERNAL_SCRIPT_TIMEOUT_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,995,EXTERNAL_SCRIPT_TIMEOUT_KEY, EXTERNAL_SCRIPT_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,997,configsMap.put(SHARED_RESOURCES_DIR_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,998,SHARED_RESOURCES_DIR_KEY, SHARED_RESOURCES_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1000,configsMap.put(KDC_PORT_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1001,KDC_PORT_KEY, KDC_PORT_KEY_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1003,configsMap.put(AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_KEY, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1004,AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_KEY, AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1005,configsMap.put(PROXY_ALLOWED_HOST_PORTS, properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1006,PROXY_ALLOWED_HOST_PORTS, PROXY_ALLOWED_HOST_PORTS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1008,File passFile = new File(configsMap.get(SRVR_KSTR_DIR_KEY) + File.separator
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1009,+ configsMap.get(SRVR_CRT_PASS_FILE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1016,.parseInt(configsMap.get(SRVR_CRT_PASS_LEN_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1034,configsMap.put(SRVR_CRT_PASS_KEY, password);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1039,+ File.separator + configsMap.get(CLIENT_API_SSL_CRT_PASS_FILE_NAME_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1053,LOG.error("Run \"ambari-server setup-https\" or set " + Configuration.API_USE_SSL + " = false.");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1059,configsMap.put(CLIENT_API_SSL_CRT_PASS_KEY, password);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1079,public String getProperty(String key, String defaultValue) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1080,return properties.getProperty(key, defaultValue);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1097,if (properties.getProperty(SSL_TRUSTSTORE_PATH_KEY) != null) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1098,System.setProperty(JAVAX_SSL_TRUSTSTORE, properties.getProperty(SSL_TRUSTSTORE_PATH_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1100,if (properties.getProperty(SSL_TRUSTSTORE_PASSWORD_KEY) != null) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1102,properties.getProperty(SSL_TRUSTSTORE_PASSWORD_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1107,properties.getProperty(SSL_TRUSTSTORE_PASSWORD_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1110,if (properties.getProperty(SSL_TRUSTSTORE_TYPE_KEY) != null) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1111,System.setProperty(JAVAX_SSL_TRUSTSTORE_TYPE, properties.getProperty(SSL_TRUSTSTORE_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1241,String fileName = properties.getProperty(VIEWS_DIR, VIEWS_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1251,return Boolean.parseBoolean(properties.getProperty(VIEWS_VALIDATE, VIEWS_VALIDATE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1260,return Boolean.parseBoolean(properties.getProperty(VIEWS_REMOVE_UNDEPLOYED, VIEWS_REMOVE_UNDEPLOYED_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1282,String fileName = properties.getProperty(BOOTSTRAP_DIR, BOOTSTRAP_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1287,return properties.getProperty(BOOTSTRAP_SCRIPT, BOOTSTRAP_SCRIPT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1291,return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1292,AmbariPath.getPath("/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py"));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1296,String pass = configsMap.get(PASSPHRASE_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1303,return properties.getProperty(BOOTSTRAP_SETUP_AGENT_PASSWORD, "password");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1307,String fileName = properties.getProperty(RECOMMENDATIONS_DIR, RECOMMENDATIONS_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1312,String lifetime = properties.getProperty(RECOMMENDATIONS_ARTIFACTS_LIFETIME, RECOMMENDATIONS_ARTIFACTS_LIFETIME_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1313,return lifetime;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1317,return properties.getProperty(SYS_PREPPED_HOSTS_KEY, SYS_PREPPED_HOSTS_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1321,String skipInstallCommandsProperty = properties.getProperty
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1322,(BLUEPRINT_SKIP_INSTALL_TASKS_KEY, BLUEPRINT_SKIP_INSTALL_TASKS_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1327,return properties.getProperty(STACK_ADVISOR_SCRIPT, STACK_ADVISOR_SCRIPT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1335,String propertyValue = properties.getProperty(ROLLING_UPGRADE_SKIP_PACKAGES_PREFIXES_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1336,ROLLING_UPGRADE_SKIP_PACKAGES_PREFIXES_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1352,return Boolean.parseBoolean(properties.getProperty(STACK_UPGRADE_BYPASS_PRECHECKS_KEY, STACK_UPGRADE_BYPASS_PRECHECKS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1361,Integer result = NumberUtils.toInt(properties.getProperty(STACK_UPGRADE_AUTO_RETRY_TIMEOUT_MINS_KEY, STACK_UPGRADE_AUTO_RETRY_TIMEOUT_MINS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1371,Integer result = NumberUtils.toInt(properties.getProperty(STACK_UPGRADE_AUTO_RETRY_CHECK_INTERVAL_SECS_KEY, STACK_UPGRADE_AUTO_RETRY_CHECK_INTERVAL_SECS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1381,String value = properties.getProperty(STACK_UPGRADE_AUTO_RETRY_CUSTOM_COMMAND_NAMES_TO_IGNORE_KEY, STACK_UPGRADE_AUTO_RETRY_CUSTOM_COMMAND_NAMES_TO_IGNORE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1393,String value = properties.getProperty(STACK_UPGRADE_AUTO_RETRY_COMMAND_DETAILS_TO_IGNORE_KEY, STACK_UPGRADE_AUTO_RETRY_COMMAND_DETAILS_TO_IGNORE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1456,return "true".equalsIgnoreCase(properties.getProperty(API_CSRF_PREVENTION_KEY, API_CSRF_PREVENTION_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1464,return ClientSecurityType.fromString(properties.getProperty(CLIENT_SECURITY_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1468,properties.setProperty(CLIENT_SECURITY_KEY, type.toString());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1471,public void setLdap(String host, String userClass, String userNameAttr, String groupClass, String groupName, String groupMember,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1472,String baseDN, boolean anon, String managerDN, String managerPass) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1473,properties.setProperty(LDAP_PRIMARY_URL_KEY, host);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1474,properties.setProperty(LDAP_USER_OBJECT_CLASS_KEY, userClass);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1475,properties.setProperty(LDAP_USERNAME_ATTRIBUTE_KEY, userNameAttr);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1476,properties.setProperty(LDAP_GROUP_OBJECT_CLASS_KEY, groupClass);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1477,properties.setProperty(LDAP_GROUP_NAMING_ATTR_KEY, groupName);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1478,properties.setProperty(LDAP_GROUP_MEMEBERSHIP_ATTR_KEY, groupMember);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1479,properties.setProperty(LDAP_BASE_DN_KEY, baseDN);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1480,properties.setProperty(LDAP_BIND_ANONYMOUSLY_KEY, String.valueOf(anon));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1481,properties.setProperty(LDAP_MANAGER_DN_KEY, managerDN);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1482,properties.setProperty(LDAP_MANAGER_PASSWORD_KEY, managerPass);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1486,LOG.info("Web App DIR test " + properties.getProperty(WEBAPP_DIR));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1487,return properties.getProperty(WEBAPP_DIR, "web");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1495,LOG.info("Hosts Mapping File " + properties.getProperty(SRVR_HOSTS_MAPPING));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1496,return properties.getProperty(SRVR_HOSTS_MAPPING);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1504,return properties.getProperty(METADATA_DIR_PATH);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1512,return properties.getProperty(COMMON_SERVICES_DIR_PATH);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1520,return properties.getProperty(EXTENSIONS_DIR_PATH);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1528,return properties.getProperty(MPACKS_STAGING_DIR_PATH);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1533,return properties.getProperty(SERVER_VERSION_FILE);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1558,return properties.getProperty(API_AUTHENTICATED_USER);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1566,return Integer.parseInt(properties.getProperty(CLIENT_API_SSL_PORT_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1567,String.valueOf(CLIENT_API_SSL_PORT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1575,return ("true".equals(properties.getProperty(API_USE_SSL, "false")));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1583,return ("true".equals(properties.getProperty(AGENT_USE_SSL, "true")));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1600,return properties.getProperty(HTTP_STRICT_TRANSPORT_HEADER_VALUE_KEY, HTTP_STRICT_TRANSPORT_HEADER_VALUE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1615,return properties.getProperty(HTTP_X_FRAME_OPTIONS_HEADER_VALUE_KEY, HTTP_X_FRAME_OPTIONS_HEADER_VALUE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1630,return properties.getProperty(HTTP_X_XSS_PROTECTION_HEADER_VALUE_KEY, HTTP_X_XSS_PROTECTION_HEADER_VALUE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1647,return properties.getProperty(VIEWS_HTTP_STRICT_TRANSPORT_HEADER_VALUE_KEY, VIEWS_HTTP_STRICT_TRANSPORT_HEADER_VALUE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1662,return properties.getProperty(VIEWS_HTTP_X_FRAME_OPTIONS_HEADER_VALUE_KEY, VIEWS_HTTP_X_FRAME_OPTIONS_HEADER_VALUE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1677,return properties.getProperty(VIEWS_HTTP_X_XSS_PROTECTION_HEADER_VALUE_KEY, VIEWS_HTTP_X_XSS_PROTECTION_HEADER_VALUE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1686,return ("true".equals(properties.getProperty(SRVR_AGENT_HOSTNAME_VALIDATE_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1687,SRVR_AGENT_HOSTNAME_VALIDATE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1697,return ("true".equals(properties.getProperty(SRVR_TWO_WAY_SSL_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1698,SRVR_TWO_WAY_SSL_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1706,return "true".equalsIgnoreCase(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1707,API_GZIP_COMPRESSION_ENABLED_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1708,API_GZIP_COMPRESSION_ENABLED_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1716,return "true".equalsIgnoreCase(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1717,AGENT_API_GZIP_COMPRESSION_ENABLED_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1718,API_GZIP_COMPRESSION_ENABLED_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1728,return properties.getProperty(API_GZIP_MIN_COMPRESSION_SIZE_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1729,API_GZIP_MIN_COMPRESSION_SIZE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1739,String value = properties.getProperty(SERVER_PERSISTENCE_TYPE_KEY, SERVER_PERSISTENCE_TYPE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1745,return properties.getProperty(SERVER_JDBC_DRIVER_KEY, JDBC_LOCAL_DRIVER);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1747,return JDBC_IN_MEMROY_DRIVER;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1753,String URI = properties.getProperty(SERVER_JDBC_URL_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1765,String dbName = properties.getProperty(SERVER_DB_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1774,return properties.getProperty(SERVER_JDBC_USER_NAME_KEY, SERVER_JDBC_USER_NAME_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1778,String passwdProp = properties.getProperty(SERVER_JDBC_USER_PASSWD_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1792,return readPasswordFromFile(passwdProp, SERVER_JDBC_USER_PASSWD_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1797,return properties.getProperty(SERVER_JDBC_RCA_DRIVER_KEY, JDBC_RCA_LOCAL_DRIVER);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1801,return properties.getProperty(SERVER_JDBC_RCA_URL_KEY, JDBC_RCA_LOCAL_URL);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1805,return properties.getProperty(SERVER_JDBC_RCA_USER_NAME_KEY, SERVER_JDBC_RCA_USER_NAME_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1809,String passwdProp = properties.getProperty(SERVER_JDBC_RCA_USER_PASSWD_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1816,return readPasswordFromFile(passwdProp, SERVER_JDBC_RCA_USER_PASSWD_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1863,ldapServerProperties.setPrimaryUrl(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1864,LDAP_PRIMARY_URL_KEY, LDAP_PRIMARY_URL_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1865,ldapServerProperties.setSecondaryUrl(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1866,LDAP_SECONDARY_URL_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1867,ldapServerProperties.setUseSsl("true".equalsIgnoreCase(properties.
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1868,getProperty(LDAP_USE_SSL_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1869,ldapServerProperties.setAnonymousBind("true".
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1870,equalsIgnoreCase(properties.getProperty(LDAP_BIND_ANONYMOUSLY_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1871,LDAP_BIND_ANONYMOUSLY_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1872,ldapServerProperties.setManagerDn(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1873,LDAP_MANAGER_DN_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1874,String ldapPasswordProperty = properties.getProperty(LDAP_MANAGER_PASSWORD_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1886,ldapServerProperties.setBaseDN(properties.getProperty
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1887,(LDAP_BASE_DN_KEY, LDAP_BASE_DN_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1888,ldapServerProperties.setUsernameAttribute(properties.
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1889,getProperty(LDAP_USERNAME_ATTRIBUTE_KEY, LDAP_USERNAME_ATTRIBUTE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1891,ldapServerProperties.setUserBase(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1892,LDAP_USER_BASE_KEY, LDAP_USER_BASE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1893,ldapServerProperties.setUserObjectClass(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1894,LDAP_USER_OBJECT_CLASS_KEY, LDAP_USER_OBJECT_CLASS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1895,ldapServerProperties.setDnAttribute(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1896,LDAP_DN_ATTRIBUTE_KEY, LDAP_DN_ATTRIBUTE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1898,ldapServerProperties.setGroupBase(properties.
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1899,getProperty(LDAP_GROUP_BASE_KEY, LDAP_GROUP_BASE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1900,ldapServerProperties.setGroupObjectClass(properties.
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1901,getProperty(LDAP_GROUP_OBJECT_CLASS_KEY, LDAP_GROUP_OBJECT_CLASS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1902,ldapServerProperties.setGroupMembershipAttr(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1903,LDAP_GROUP_MEMEBERSHIP_ATTR_KEY, LDAP_GROUP_MEMBERSHIP_ATTR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1904,ldapServerProperties.setGroupNamingAttr(properties.
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1905,getProperty(LDAP_GROUP_NAMING_ATTR_KEY, LDAP_GROUP_NAMING_ATTR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1906,ldapServerProperties.setAdminGroupMappingRules(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1907,LDAP_ADMIN_GROUP_MAPPING_RULES_KEY, LDAP_ADMIN_GROUP_MAPPING_RULES_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1908,ldapServerProperties.setAdminGroupMappingMemberAttr(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1909,LDAP_ADMIN_GROUP_MAPPING_MEMBER_ATTR_KEY, LDAP_ADMIN_GROUP_MAPPING_MEMBER_ATTR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1910,ldapServerProperties.setUserSearchFilter(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1911,LDAP_USER_SEARCH_FILTER_KEY, LDAP_USER_SEARCH_FILTER_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1912,ldapServerProperties.setAlternateUserSearchFilter(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1913,LDAP_ALT_USER_SEARCH_FILTER_KEY, LDAP_ALT_USER_SEARCH_FILTER_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1914,ldapServerProperties.setGroupSearchFilter(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1915,LDAP_GROUP_SEARCH_FILTER_KEY, LDAP_GROUP_SEARCH_FILTER_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1916,ldapServerProperties.setReferralMethod(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1917,LDAP_REFERRAL_KEY, LDAP_REFERRAL_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1918,ldapServerProperties.setSyncUserMemberReplacePattern(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1919,LDAP_SYCN_USER_MEMBER_REPLACE_PATTERN, LDAP_SYNC_MEMBER_REPLACE_PATTERN_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1920,ldapServerProperties.setSyncGroupMemberReplacePattern(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1921,LDAP_SYCN_GROUP_MEMBER_REPLACE_PATTERN, LDAP_SYNC_MEMBER_REPLACE_PATTERN_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1922,ldapServerProperties.setSyncUserMemberFilter(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1923,LDAP_SYCN_USER_MEMBER_FILTER, LDAP_SYNC_MEMBER_FILTER_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1924,ldapServerProperties.setSyncGroupMemberFilter(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1925,LDAP_SYCN_GROUP_MEMBER_FILTER, LDAP_SYNC_MEMBER_FILTER_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1926,ldapServerProperties.setPaginationEnabled("true".equalsIgnoreCase(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1927,properties.getProperty(LDAP_PAGINATION_ENABLED_KEY, LDAP_PAGINATION_ENABLED_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1929,if (properties.containsKey(LDAP_GROUP_BASE_KEY) ||
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1930,properties.containsKey(LDAP_GROUP_OBJECT_CLASS_KEY) ||
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1931,properties.containsKey(LDAP_GROUP_MEMEBERSHIP_ATTR_KEY) ||
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1932,properties.containsKey(LDAP_GROUP_NAMING_ATTR_KEY) ||
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1933,properties.containsKey(LDAP_ADMIN_GROUP_MAPPING_RULES_KEY) ||
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1934,properties.containsKey(LDAP_GROUP_SEARCH_FILTER_KEY)) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1942,return Boolean.parseBoolean(properties.getProperty(IS_LDAP_CONFIGURED, IS_LDAP_CONFIGURED_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1946,return properties.getProperty(OS_VERSION_KEY, "");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1950,return properties.getProperty(OS_FAMILY_KEY, "");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1954,return properties.getProperty(BOOTSTRAP_MASTER_HOSTNAME, defaultValue);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1958,return Integer.parseInt(properties.getProperty(CLIENT_API_PORT_KEY, String.valueOf(CLIENT_API_PORT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1962,return properties.getProperty(OJDBC_JAR_NAME_KEY, OJDBC_JAR_NAME_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1966,return properties.getProperty(JAVA_HOME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1970,return properties.getProperty(JDK_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1974,return properties.getProperty(JCE_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1978,return properties.getProperty(SERVER_DB_NAME_KEY, SERVER_DB_NAME_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1982,return properties.getProperty(MYSQL_JAR_NAME_KEY, MYSQL_JAR_NAME_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1986,return JPATableGenerationStrategy.fromString(System.getProperty(SERVER_JDBC_GENERATE_TABLES_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1990,return Integer.parseInt(properties.getProperty
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1991,(SERVER_CONNECTION_MAX_IDLE_TIME, String.valueOf("900000")));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1999,return properties.getProperty(ANONYMOUS_AUDIT_NAME_KEY, "_anonymous");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2008,String path = properties.getProperty(SRVR_KSTR_DIR_KEY, SRVR_KSTR_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2030,String path = properties.getProperty(MASTER_KEY_LOCATION);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2061,String path = properties.getProperty(MASTER_KEYSTORE_LOCATION);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2065,LOG.debug("Value of {} is not set, using {}", MASTER_KEYSTORE_LOCATION, location.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2084,String value = properties.getProperty(TEMPORARY_KEYSTORE_RETENTION_MINUTES);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2088,TEMPORARY_KEYSTORE_RETENTION_MINUTES, TEMPORARY_KEYSTORE_RETENTION_MINUTES_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2089,minutes = TEMPORARY_KEYSTORE_RETENTION_MINUTES_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2094,LOG.debug("Value of {} is {}", TEMPORARY_KEYSTORE_RETENTION_MINUTES, value);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2097,TEMPORARY_KEYSTORE_RETENTION_MINUTES, value, TEMPORARY_KEYSTORE_RETENTION_MINUTES_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2098,minutes = TEMPORARY_KEYSTORE_RETENTION_MINUTES_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2115,String value = properties.getProperty(TEMPORARY_KEYSTORE_ACTIVELY_PURGE);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2119,TEMPORARY_KEYSTORE_ACTIVELY_PURGE, TEMPORARY_KEYSTORE_ACTIVELY_PURGE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2120,return TEMPORARY_KEYSTORE_ACTIVELY_PURGE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2122,LOG.debug("Value of {} is {}", TEMPORARY_KEYSTORE_ACTIVELY_PURGE, value);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2125,LOG.debug("Value of {} is {}", TEMPORARY_KEYSTORE_ACTIVELY_PURGE, value);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2129,TEMPORARY_KEYSTORE_ACTIVELY_PURGE, value, TEMPORARY_KEYSTORE_ACTIVELY_PURGE_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2130,return TEMPORARY_KEYSTORE_ACTIVELY_PURGE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2135,String disabledCiphers = properties.getProperty(SRVR_DISABLED_CIPHERS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2136,properties.getProperty(SRVR_DISABLED_CIPHERS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2137,SRVR_DISABLED_CIPHERS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2142,String disabledProtocols = properties.getProperty(SRVR_DISABLED_PROTOCOLS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2143,properties.getProperty(SRVR_DISABLED_PROTOCOLS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2144,SRVR_DISABLED_PROTOCOLS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2149,return Integer.parseInt(properties.getProperty(SRVR_ONE_WAY_SSL_PORT_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2150,String.valueOf(SRVR_ONE_WAY_SSL_PORT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2154,return Integer.parseInt(properties.getProperty(SRVR_TWO_WAY_SSL_PORT_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2155,String.valueOf(SRVR_TWO_WAY_SSL_PORT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2226,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2227,SERVER_HTTP_REQUEST_HEADER_SIZE, String.valueOf(SERVER_HTTP_REQUEST_HEADER_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2234,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2235,SERVER_HTTP_RESPONSE_HEADER_SIZE, String.valueOf(SERVER_HTTP_RESPONSE_HEADER_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2250,String stringValue = properties.getProperty(SERVER_EC_CACHE_SIZE);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2251,long value = SERVER_EC_CACHE_SIZE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2271,String stringValue = properties.getProperty(SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2272,boolean value = SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2294,String stringValue = properties.getProperty(SERVER_HRC_STATUS_SUMMARY_CACHE_SIZE);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2295,long value = SERVER_HRC_STATUS_SUMMARY_CACHE_SIZE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2316,String stringValue = properties.getProperty(SERVER_HRC_STATUS_SUMMARY_CACHE_EXPIRY_DURATION);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2317,long value = SERVER_HRC_STATUS_SUMMARY_CACHE_EXPIRY_DURATION_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2336,String stringValue =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2337,properties.getProperty(SERVER_STALE_CONFIG_CACHE_ENABLED_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2338,SERVER_STALE_CONFIG_CACHE_ENABLED_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2339,return "true".equalsIgnoreCase(stringValue);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2346,return Integer.parseInt(properties.getProperty(SERVER_STALE_CONFIG_CACHE_EXPIRATION_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2347,SERVER_STALE_CONFIG_CACHE_EXPIRATION_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2357,repoSuffixes = properties.getProperty(REPO_SUFFIX_KEY_UBUNTU,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2358,REPO_SUFFIX_UBUNTU);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2360,repoSuffixes = properties.getProperty(REPO_SUFFIX_KEY_DEFAULT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2361,REPO_SUFFIX_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2369,return properties.getProperty(EXECUTION_SCHEDULER_CLUSTERED_KEY, "false");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2373,return properties.getProperty(EXECUTION_SCHEDULER_THREADS_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2374,DEFAULT_SCHEDULER_THREAD_COUNT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2378,return Integer.parseInt(properties.getProperty(REQUEST_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2379,REQUEST_READ_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2383,return Integer.parseInt(properties.getProperty(REQUEST_CONNECT_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2384,REQUEST_CONNECT_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2391,return Integer.parseInt(properties.getProperty(AMBARI_REQUEST_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2392,AMBARI_REQUEST_READ_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2399,return Integer.parseInt(properties.getProperty(AMBARI_REQUEST_CONNECT_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2400,AMBARI_REQUEST_CONNECT_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2404,return properties.getProperty(EXECUTION_SCHEDULER_CONNECTIONS_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2405,DEFAULT_SCHEDULER_MAX_CONNECTIONS);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2409,String limit = properties.getProperty
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2410,(EXECUTION_SCHEDULER_MISFIRE_TOLERATION_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2411,DEFAULT_EXECUTION_SCHEDULER_MISFIRE_TOLERATION);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2412,return Long.parseLong(limit);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2416,String delay = properties.getProperty(EXECUTION_SCHEDULER_START_DELAY_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2417,DEFAULT_SCHEDULER_START_DELAY_SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2418,return Integer.parseInt(delay);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2423,String stringValue = properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2424,EXECUTION_SCHEDULER_WAIT_KEY, DEFAULT_EXECUTION_SCHEDULER_WAIT_SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2425,Long sleepTime = Long.parseLong(DEFAULT_EXECUTION_SCHEDULER_WAIT_SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2432,stringValue, DEFAULT_EXECUTION_SCHEDULER_WAIT_SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2440,EXECUTION_SCHEDULER_WAIT_KEY, sleepTime, 60);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2447,return Integer.parseInt(properties.getProperty(EXTERNAL_SCRIPT_TIMEOUT_KEY, EXTERNAL_SCRIPT_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2451,return "true".equalsIgnoreCase(configsMap.get(PARALLEL_STAGE_EXECUTION_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2455,return properties.getProperty(CUSTOM_ACTION_DEFINITION_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2456,CUSTOM_ACTION_DEFINITION_DEF_VALUE);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2460,int value = Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2461,AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2462,AGENT_PACKAGE_PARALLEL_COMMANDS_LIMIT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2475,String key = isPackageInstallationTask ? AGENT_PACKAGE_INSTALL_TASK_TIMEOUT_KEY : AGENT_TASK_TIMEOUT_KEY;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2476,String defaultValue = isPackageInstallationTask ? AGENT_PACKAGE_INSTALL_TASK_TIMEOUT_DEFAULT : AGENT_TASK_TIMEOUT_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2477,String value = properties.getProperty(key, defaultValue);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2484,return defaultValue;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2492,String value = properties.getProperty(SERVER_TASK_TIMEOUT_KEY, SERVER_TASK_TIMEOUT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2497,SERVER_TASK_TIMEOUT_KEY, value, SERVER_TASK_TIMEOUT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2498,return Integer.parseInt(SERVER_TASK_TIMEOUT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2503,return properties.getProperty(RESOURCES_DIR_KEY, RESOURCES_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2507,return properties.getProperty(SHARED_RESOURCES_DIR_KEY, SHARED_RESOURCES_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2511,return properties.getProperty(SERVER_JDBC_POSTGRES_SCHEMA_NAME, "");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2518,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2519,CLIENT_THREADPOOL_SIZE_KEY, String.valueOf(CLIENT_THREADPOOL_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2526,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2527,AGENT_THREADPOOL_SIZE_KEY, String.valueOf(AGENT_THREADPOOL_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2536,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2537,VIEW_EXTRACTION_THREADPOOL_MAX_SIZE_KEY, String.valueOf(VIEW_EXTRACTION_THREADPOOL_MAX_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2546,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2547,VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_KEY, String.valueOf(VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2559,return Integer.parseInt(properties.getProperty(VIEW_REQUEST_THREADPOOL_MAX_SIZE_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2560,String.valueOf(VIEW_REQUEST_THREADPOOL_MAX_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2572,return Integer.parseInt(properties.getProperty(VIEW_REQUEST_THREADPOOL_TIMEOUT_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2573,String.valueOf(VIEW_REQUEST_THREADPOOL_TIMEOUT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2582,return Integer.parseInt(properties.getProperty(PROPERTY_PROVIDER_THREADPOOL_CORE_SIZE_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2583,String.valueOf(PROCESSOR_BASED_THREADPOOL_CORE_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2592,return Integer.parseInt(properties.getProperty(PROPERTY_PROVIDER_THREADPOOL_MAX_SIZE_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2593,String.valueOf(PROCESSOR_BASED_THREADPOOL_MAX_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2604,return Integer.parseInt(properties.getProperty(PROPERTY_PROVIDER_THREADPOOL_WORKER_QUEUE_SIZE,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2605,String.valueOf(Integer.MAX_VALUE)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2616,return Long.parseLong(properties.getProperty(PROPERTY_PROVIDER_THREADPOOL_COMPLETION_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2617,String.valueOf(5000)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2626,return Long.parseLong(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2627,VIEW_EXTRACTION_THREADPOOL_TIMEOUT_KEY, String.valueOf(VIEW_EXTRACTION_THREADPOOL_TIMEOUT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2639,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2640,SERVER_HTTP_SESSION_INACTIVE_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2651,return StringUtils.strip(properties.getProperty(ALERT_TEMPLATE_FILE));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2658,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2659,ALERTS_EXECUTION_SCHEDULER_THREADS_KEY, ALERTS_EXECUTION_SCHEDULER_THREADS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2667,return properties.getProperty(RECOVERY_TYPE_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2676,return properties.getProperty(RECOVERY_MAX_COUNT_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2685,return properties.getProperty(RECOVERY_LIFETIME_MAX_COUNT_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2693,return properties.getProperty(RECOVERY_WINDOW_IN_MIN_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2701,return properties.getProperty(RECOVERY_DISABLED_COMPONENTS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2709,return properties.getProperty(RECOVERY_ENABLED_COMPONENTS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2717,return properties.getProperty(RECOVERY_RETRY_GAP_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2728,return properties.getProperty(KDC_PORT_KEY, KDC_PORT_KEY_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2739,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2740,KDC_CONNECTION_CHECK_TIMEOUT_KEY, KDC_CONNECTION_CHECK_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2749,String fileName = properties.getProperty(KERBEROS_KEYTAB_CACHE_DIR_KEY, KERBEROS_KEYTAB_CACHE_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2750,return new File(fileName);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2759,return Boolean.parseBoolean(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2760,KERBEROS_CHECK_JAAS_CONFIGURATION_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2761,KERBEROS_CHECK_JAAS_CONFIGURATION_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2827,String connectionPoolType = properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2828,SERVER_JDBC_CONNECTION_POOL, ConnectionPoolType.INTERNAL.getName());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2844,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2845,SERVER_JDBC_CONNECTION_POOL_MIN_SIZE, DEFAULT_JDBC_POOL_MIN_CONNECTIONS));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2855,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2856,SERVER_JDBC_CONNECTION_POOL_MAX_SIZE, DEFAULT_JDBC_POOL_MAX_CONNECTIONS));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2867,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2868,SERVER_JDBC_CONNECTION_POOL_MAX_AGE, DEFAULT_JDBC_POOL_MAX_AGE_SECONDS));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2879,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2880,SERVER_JDBC_CONNECTION_POOL_MAX_IDLE_TIME,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2881,DEFAULT_JDBC_POOL_MAX_IDLE_TIME_SECONDS));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2892,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2893,SERVER_JDBC_CONNECTION_POOL_MAX_IDLE_TIME_EXCESS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2894,DEFAULT_JDBC_POOL_EXCESS_MAX_IDLE_TIME_SECONDS));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2905,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2906,SERVER_JDBC_CONNECTION_POOL_AQUISITION_SIZE,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2907,DEFAULT_JDBC_POOL_ACQUISITION_SIZE));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2917,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2918,SERVER_JDBC_CONNECTION_POOL_ACQUISITION_RETRY_ATTEMPTS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2919,DEFAULT_JDBC_POOL_ACQUISITION_RETRY_ATTEMPTS));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2928,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2929,SERVER_JDBC_CONNECTION_POOL_ACQUISITION_RETRY_DELAY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2930,DEFAULT_JDBC_POOL_ACQUISITION_RETRY_DELAY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2941,return Integer.parseInt(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2942,SERVER_JDBC_CONNECTION_POOL_IDLE_TEST_INTERVAL,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2943,DEFAULT_JDBC_POOL_IDLE_TEST_INTERVAL));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2967,public int getMetricCacheMaxEntries() {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2968,return Integer.parseInt(properties.getProperty(TIMELINE_METRICS_CACHE_MAX_ENTRIES,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2969,DEFAULT_TIMELINE_METRICS_CACHE_MAX_ENTRIES));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2976,return Integer.parseInt(properties.getProperty(TIMELINE_METRICS_CACHE_TTL,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2977,DEFAULT_TIMELINE_METRICS_CACHE_TTL));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2984,return Integer.parseInt(properties.getProperty(TIMELINE_METRICS_CACHE_IDLE_TIME,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2985,DEFAULT_TIMELINE_METRICS_CACHE_IDLE_TIME));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2993,return Integer.parseInt(properties.getProperty(TIMELINE_METRICS_REQUEST_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2994,DEFAULT_TIMELINE_METRICS_REQUEST_READ_TIMEOUT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3004,return Integer.parseInt(properties.getProperty(TIMELINE_METRICS_REQUEST_INTERVAL_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3005,DEFAULT_TIMELINE_METRICS_REQUEST_INTERVAL_READ_TIMEOUT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3013,return Integer.parseInt(properties.getProperty(TIMELINE_METRICS_REQUEST_CONNECT_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3014,DEFAULT_TIMELINE_METRICS_REQUEST_CONNECT_TIMEOUT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3022,return Boolean.parseBoolean(properties.getProperty(TIMELINE_METRICS_CACHE_DISABLE, "false"));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3030,return Long.parseLong(properties.getProperty(TIMELINE_METRICS_REQUEST_CATCHUP_INTERVAL,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3031,DEFAULT_TIMELINE_METRICS_REQUEST_CATCHUP_INTERVAL));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3040,String percent = properties.getProperty(TIMELINE_METRICS_CACHE_HEAP_PERCENT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3041,DEFAULT_TIMELINE_METRICS_CACHE_HEAP_PERCENT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3050,return Boolean.parseBoolean(properties
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3051,.getProperty(TIMELINE_METRICS_CACHE_USE_CUSTOM_SIZING_ENGINE, "true"));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3058,boolean enableJwt = Boolean.valueOf(properties.getProperty(JWT_AUTH_ENBABLED, "false"));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3061,String providerUrl = properties.getProperty(JWT_AUTH_PROVIDER_URL);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3066,String publicKeyPath = properties.getProperty(JWT_PUBLIC_KEY);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3077,jwtProperties.setCookieName(properties.getProperty(JWT_COOKIE_NAME, JWT_COOKIE_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3078,jwtProperties.setAudiencesString(properties.getProperty(JWT_AUDIENCES));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3079,jwtProperties.setOriginalUrlQueryParam(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3080,properties.getProperty(JWT_ORIGINAL_URL_QUERY_PARAM, JWT_ORIGINAL_URL_QUERY_PARAM_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3102,return properties.getProperty(SERVER_TMP_DIR_KEY, SERVER_TMP_DIR_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3115,return Boolean.parseBoolean(properties.getProperty(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3116,EXPERIMENTAL_CONCURRENCY_STAGE_PROCESSING_ENABLED, Boolean.FALSE.toString()));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3131,return Boolean.parseBoolean(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3132,properties.getProperty(ALERTS_CACHE_ENABLED, Boolean.FALSE.toString()));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3144,return Integer.parseInt(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3145,properties.getProperty(ALERTS_CACHE_FLUSH_INTERVAL, ALERTS_CACHE_FLUSH_INTERVAL_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3156,return Integer.parseInt(properties.getProperty(ALERTS_CACHE_SIZE, ALERTS_CACHE_SIZE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3164,return properties.getProperty(AMBARI_DISPLAY_URL, null);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3172,String property = properties.getProperty(OPERATIONS_RETRY_ATTEMPTS_KEY, OPERATIONS_RETRY_ATTEMPTS_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3176,attempts, RETRY_ATTEMPTS_LIMIT, OPERATIONS_RETRY_ATTEMPTS_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3177,attempts = Integer.valueOf(OPERATIONS_RETRY_ATTEMPTS_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3193,return NumberUtils.toInt(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3194,properties.getProperty(VERSION_DEFINITION_CONNECT_TIMEOUT),
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3195,VERSION_DEFINITION_CONNECT_TIMEOUT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3201,return NumberUtils.toInt(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3202,properties.getProperty(VERSION_DEFINITION_READ_TIMEOUT),
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3203,VERSION_DEFINITION_READ_TIMEOUT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3207,return properties.getProperty(AGENT_STACK_RETRY_COUNT_KEY, AGENT_STACK_RETRY_COUNT_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3211,return properties.getProperty(AGENT_STACK_RETRY_ON_REPO_UNAVAILABILITY_KEY, AGENT_STACK_RETRY_ON_REPO_UNAVAILABILITY_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3215,return Boolean.parseBoolean(properties.getProperty(AUDIT_LOG_ENABLED,Boolean.TRUE.toString()));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3222,return NumberUtils.toInt(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3223,properties.getProperty(AUDIT_LOGGER_CAPACITY),
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3224,AUDIT_LOGGER_CAPACITY_DEFAULT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3232,String udpPort = properties.getProperty(ALERTS_SNMP_DISPATCH_UDP_PORT);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3237,return Boolean.parseBoolean(properties.getProperty(LDAP_ALT_USER_SEARCH_ENABLED_KEY, LDAP_ALT_USER_SEARCH_ENABLED_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3254,return Integer.parseInt(properties.getProperty(METRIC_RETRIEVAL_SERVICE_CACHE_TIMEOUT, "30"));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3265,int priority = Integer.parseInt(properties.getProperty(METRIC_RETRIEVAL_SERVICE_THREAD_PRIORITY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3266,String.valueOf(Thread.NORM_PRIORITY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3283,return Integer.parseInt(properties.getProperty(METRIC_RETRIEVAL_SERVICE_THREADPOOL_CORE_SIZE,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3284,String.valueOf(PROCESSOR_BASED_THREADPOOL_CORE_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3298,return Integer.parseInt(properties.getProperty(METRIC_RETRIEVAL_SERVICE_THREADPOOL_MAX_SIZE,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3299,String.valueOf(PROCESSOR_BASED_THREADPOOL_MAX_SIZE_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3310,return Integer.parseInt(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3311,properties.getProperty(METRIC_RETRIEVAL_SERVICE_THREADPOOL_WORKER_QUEUE_SIZE,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3312,String.valueOf(10 * getMetricsServiceThreadPoolMaxSize())));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3321,return Integer.parseInt(properties.getProperty(TASK_ID_LIST_LIMIT,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3322,String.valueOf(TASK_ID_LIST_LIMIT_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,22,import com.google.common.util.concurrent.ServiceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,23,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,24,import com.google.inject.Guice;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,25,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,26,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,27,import com.google.inject.Scopes;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,28,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,29,import com.google.inject.name.Named;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,30,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,31,import com.sun.jersey.spi.container.servlet.ServletContainer;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,146,import javax.crypto.BadPaddingException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,147,import javax.servlet.DispatcherType;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,148,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,149,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,150,import java.net.Authenticator;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,151,import java.net.BindException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,152,import java.net.PasswordAuthentication;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,153,import java.net.URL;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,154,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,155,import java.util.Enumeration;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,156,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,157,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,158,import java.util.logging.LogManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,417,String keystore = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) + File.separator
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,418,+ configsMap.get(Configuration.KSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,420,String truststore = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) + File.separator
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,421,+ configsMap.get(Configuration.TSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,423,String srvrCrtPass = configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,430,sslConnectorTwoWay.setKeystoreType(configsMap.get(Configuration.KSTR_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,431,sslConnectorTwoWay.setTruststoreType(configsMap.get(Configuration.TSTR_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,443,contextFactoryOneWay.setKeyStoreType(configsMap.get(Configuration.KSTR_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,444,contextFactoryOneWay.setTrustStoreType(configsMap.get(Configuration.TSTR_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,539,String httpsKeystore = configsMap.get(Configuration.CLIENT_API_SSL_KSTR_DIR_NAME_KEY) +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,540,File.separator + configsMap.get(Configuration.CLIENT_API_SSL_KSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,541,String httpsTruststore = configsMap.get(Configuration.CLIENT_API_SSL_KSTR_DIR_NAME_KEY) +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,542,File.separator + configsMap.get(Configuration.CLIENT_API_SSL_TSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,545,String httpsCrtPass = configsMap.get(Configuration.CLIENT_API_SSL_CRT_PASS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,556,sapiConnector.setKeystoreType(configsMap.get(Configuration.CLIENT_API_SSL_KSTR_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,557,sapiConnector.setTruststoreType(configsMap.get(Configuration.CLIENT_API_SSL_KSTR_TYPE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,579,throw new RuntimeException(Configuration.OS_VERSION_KEY + " is not "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,802,schemaVersion.setMetainfoName(Configuration.SERVER_VERSION_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,145,import static org.eclipse.persistence.config.PersistenceUnitProperties.CREATE_JDBC_DDL_FILE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,146,import static org.eclipse.persistence.config.PersistenceUnitProperties.CREATE_ONLY;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,147,import static org.eclipse.persistence.config.PersistenceUnitProperties.CREATE_OR_EXTEND;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,148,import static org.eclipse.persistence.config.PersistenceUnitProperties.DDL_BOTH_GENERATION;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,149,import static org.eclipse.persistence.config.PersistenceUnitProperties.DDL_GENERATION;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,150,import static org.eclipse.persistence.config.PersistenceUnitProperties.DDL_GENERATION_MODE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,151,import static org.eclipse.persistence.config.PersistenceUnitProperties.DROP_AND_CREATE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,152,import static org.eclipse.persistence.config.PersistenceUnitProperties.DROP_JDBC_DDL_FILE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,153,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_DRIVER;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,154,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_PASSWORD;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,155,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_URL;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,156,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_USER;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,157,import static org.eclipse.persistence.config.PersistenceUnitProperties.NON_JTA_DATASOURCE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,158,import static org.eclipse.persistence.config.PersistenceUnitProperties.THROW_EXCEPTIONS;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,214,properties.setProperty(JDBC_DRIVER, Configuration.JDBC_IN_MEMROY_DRIVER);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,223,properties.setProperty(JDBC_DRIVER, Configuration.JDBC_LOCAL_DRIVER);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2002,String tempDirectoryPath = configuration.getProperty(Configuration.SERVER_TMP_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,178,String TMP_PATH = configMap.get(Configuration.SERVER_TMP_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,179,String pythonCmd = configMap.get(Configuration.AMBARI_PYTHON_WRAP_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,344,Set<String> groupSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.GROUP, cluster, desiredClusterConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,272,MetainfoEntity schemaVersionEntity = metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY);
ambari-server/src/main/java/org/apache/ambari/server/resources/ResourceManager.java,43,String resDir = configs.getConfigsMap().get(Configuration.RESOURCES_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java,81,private String strictTransportSecurity = Configuration.HTTP_STRICT_TRANSPORT_HEADER_VALUE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java,85,private String xFrameOptionsHeader = Configuration.HTTP_X_FRAME_OPTIONS_HEADER_VALUE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/security/AbstractSecurityHeaderFilter.java,89,private String xXSSProtectionHeader = Configuration.HTTP_X_XSS_PROTECTION_HEADER_VALUE_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,21,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,30,import java.io.BufferedReader;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,31,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,32,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,33,import java.io.InputStreamReader;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,34,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,35,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,36,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,85,String srvrKstrDir = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,86,String srvrCrtName = configsMap.get(Configuration.SRVR_CRT_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,141,String srvrKstrDir = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,142,String srvrCrtName = configsMap.get(Configuration.SRVR_CRT_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,143,String srvrCsrName = configsMap.get(Configuration.SRVR_CSR_NAME_KEY);;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,144,String srvrKeyName = configsMap.get(Configuration.SRVR_KEY_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,145,String kstrName = configsMap.get(Configuration.KSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,146,String srvrCrtPass = configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,171,File certFile = new File(configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) +
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,172,File.separator + configsMap.get(Configuration.SRVR_CRT_NAME_KEY));
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,224,PASSPHRASE_KEY).trim();
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,234,String srvrKstrDir = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,235,String srvrCrtPass = configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,236,String srvrCrtName = configsMap.get(Configuration.SRVR_CRT_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,237,String srvrKeyName = configsMap.get(Configuration.SRVR_KEY_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,21,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,22,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,23,import org.apache.ambari.server.utils.AmbariPath;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,24,import org.apache.commons.codec.binary.Base64;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,25,import org.apache.commons.io.FileUtils;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,26,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,27,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,28,import org.apache.commons.net.ntp.TimeStamp;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,81,this.master = masterKey.toCharArray();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,93,this.master = key.toCharArray();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,98,return this.master != null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,103,return this.master;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,278,String keyPath = envVariables.get(Configuration.MASTER_KEY_LOCATION);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,284,if (this.master != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,285,key = new String(this.master);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,309,this.master = new String(aes.decrypt(Base64.decodeBase64(parts[0]),
ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java,32,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java,33,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java,46,response.put(Configuration.SRVR_TWO_WAY_SSL_KEY,String.valueOf(conf.getTwoWaySsl()));
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,20,import com.google.common.util.concurrent.AbstractScheduledService;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,23,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,37,import java.text.DateFormat;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,38,import java.text.SimpleDateFormat;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,39,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,40,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,41,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,42,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,43,import java.util.TimeZone;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,44,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,93,this.m_fullDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,95,this.m_deltaDateFormat = new SimpleDateFormat("HH:mm:ss");
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,96,this.m_deltaDateFormat.setTimeZone(tz);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,116,this.MAX_TIMEOUT_MINS = m_configuration.getStackUpgradeAutoRetryTimeoutMins();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,117,this.MAX_TIMEOUT_MS = MAX_TIMEOUT_MINS * 60000L;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,119,if (this.MAX_TIMEOUT_MINS < 1) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,122,this.getClass().getSimpleName(), Configuration.STACK_UPGRADE_AUTO_RETRY_TIMEOUT_MINS_KEY, MAX_TIMEOUT_MINS);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,129,this.CUSTOM_COMMAND_NAMES_TO_IGNORE = m_configuration.getStackUpgradeAutoRetryCustomCommandNamesToIgnore();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,130,this.COMMAND_DETAILS_TO_IGNORE = m_configuration.getStackUpgradeAutoRetryCommandDetailsToIgnore();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,134,this.MAX_TIMEOUT_MINS = mins;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,135,this.MAX_TIMEOUT_MS = MAX_TIMEOUT_MINS * 60000L;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,215,String originalStartTimeString = this.m_fullDateFormat.format(new Date(hrc.getOriginalStartTime()));
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,216,String deltaString = this.m_deltaDateFormat.format(new Date(deltaMS));
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,236,for (String s : this.CUSTOM_COMMAND_NAMES_TO_IGNORE) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,243,for (String s : this.COMMAND_DETAILS_TO_IGNORE) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,74,init(properties.getProperty(Configuration.SHARED_RESOURCES_DIR_KEY));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,130,for (String item: fam.getDistro()) data.add(item + pos.get(OS_VERSION));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,179,for (String item: fam.getDistro()) data.add(item + version);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,21,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,22,import org.apache.ambari.server.controller.internal.URLStreamProvider;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,23,import org.apache.ambari.server.proxy.ProxyService;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,24,import org.apache.ambari.view.URLConnectionProvider;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,25,import org.apache.ambari.view.ViewContext;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,26,import org.apache.commons.io.IOUtils;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,27,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,28,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,29,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,30,import org.apache.http.client.utils.URIBuilder;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,90,if (this.hostPortRestrictionHandler == null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,92,new HostPortRestrictionHandler(this.viewContext.getAmbariProperty(Configuration.PROXY_ALLOWED_HOST_PORTS));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,93,this.hostPortRestrictionHandler = hostPortRestrictionHandlerTmp;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,95,return this.hostPortRestrictionHandler;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,248,if (StringUtils.isNotBlank(spec) && this.getHostPortRestrictionHandler().proxyCallRestricted()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,251,return this.getHostPortRestrictionHandler().allowProxy(url.getHost(),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,287,if (this.allowedHostPorts == null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,291,if (this.isProxyCallRestricted) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,292,if (this.allowedHostPorts.containsKey(hostToCompare)) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,293,if (this.allowedHostPorts.get(hostToCompare).contains("*")) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,300,if (this.allowedHostPorts.get(hostToCompare).contains(portToCompare)) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,319,if (!allowedStr.equals(Configuration.PROXY_ALLOWED_HOST_PORTS_DEFAULT)) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,340,this.allowedHostPorts = allowed;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,341,this.isProxyCallRestricted = proxyCallRestricted;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,349,if (this.allowedHostPorts == null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewURLStreamProvider.java,352,return this.isProxyCallRestricted;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptor.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptor.java,68,HashMap<String, Object> dataMap = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,26,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,27,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,218,public List<KerberosIdentityDescriptor> getIdentities(boolean resolveReferences, Map<String,Object> contextForFilter) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,220,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,356,Map<String, KerberosConfigurationDescriptor> mergedConfigurations = new HashMap<String, KerberosConfigurationDescriptor>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,420,configurations = new HashMap<String, KerberosConfigurationDescriptor>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,451,authToLocalProperties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,585,if(path.startsWith("../")) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,591,while(parent != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,697,List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,699,list.add(identity.toMap());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,701,map.put(Type.IDENTITY.getDescriptorPluralName(), list);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,705,List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,707,list.add(configuration.toMap());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,709,map.put(Type.CONFIGURATION.getDescriptorPluralName(), list);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,713,List<String> list = new ArrayList<String>(authToLocalProperties);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,714,map.put(Type.AUTH_TO_LOCAL_PROPERTY.getDescriptorPluralName(), list);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,771,if(identity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,794,else {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosConfigurationDescriptor.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosConfigurationDescriptor.java,140,properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosConfigurationDescriptor.java,176,Map<String, Object> map = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosConfigurationDescriptor.java,177,map.put(getName(), (properties == null) ? null : new HashMap<String, Object>(properties));
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosDescriptor.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosDescriptor.java,185,services = new HashMap<String, KerberosServiceDescriptor>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosDescriptor.java,228,properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosDescriptor.java,307,map.put("properties", new HashMap<String, String>(properties));
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,20,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,419,Map<String, Object> map = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,421,map.put("file", getFile());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,423,map.put("owner", new HashMap<String, Object>() {{
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,424,put("name", getOwnerName());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,425,put("access", getOwnerAccess());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,428,map.put("group", new HashMap<String, Object>() {{
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,429,put("name", getGroupName());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,430,put("access", getGroupAccess());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosKeytabDescriptor.java,433,map.put("configuration", getConfiguration());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,20,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,270,Map<String, Object> map = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosServiceDescriptor.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosServiceDescriptor.java,199,components = new HashMap<String, KerberosComponentDescriptor>();
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,116,private Map<RoleCommandPair, Set<RoleCommandPair>> dependencies =
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,117,new HashMap<RoleCommandPair, Set<RoleCommandPair>>();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,543,Set<String> configTypes = serviceInfo.getConfigTypeAttributes().keySet();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,544,for (String configType : configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,545,stackServiceConfigs.put(serviceName, configType);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,132,List<AlertCurrentEntity> toCreate = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,176,if (StringUtils.isBlank(alert.getHostName()) || definition.isHostIgnored()) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,177,current = m_alertsDao.findCurrentByNameNoHost(clusterId, alert.getName());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,179,current = m_alertsDao.findCurrentByHostAndName(clusterId, alert.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,180,alert.getName());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,183,if (null == current) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,190,AlertHistoryEntity history = createHistory(clusterId, definition, alert);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,194,MaintenanceState maintenanceState = MaintenanceState.OFF;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,196,maintenanceState = m_maintenanceStateHelper.get().getEffectiveState(clusterId, alert);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,198,LOG.error("Unable to determine the maintenance mode state for {}, defaulting to OFF",
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,199,alert, exception);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,202,current = new AlertCurrentEntity();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,203,current.setMaintenanceState(maintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,204,current.setAlertHistory(history);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,205,current.setLatestTimestamp(alert.getTimestamp());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,206,current.setOriginalTimestamp(alert.getTimestamp());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,209,current.setFirmness(AlertFirmness.HARD);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,212,toCreate.add(current);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,215,alertEvents.add(new InitialAlertEvent(clusterId, alert, current));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,322,saveEntities(toCreate, toMerge, toCreateHistoryAndMerge);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,352,void saveEntities(List<AlertCurrentEntity> toCreate, List<AlertCurrentEntity> toMerge,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,354,for (AlertCurrentEntity entity : toCreate) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,355,m_alertsDao.create(entity);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java,348,if (alertId != null ? !alertId.equals(that.alertId) : that.alertId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java,349,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java,352,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java,360,int result = null != alertId ? alertId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java,361,return result;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertDefinitionEntity.java,611,: that.definitionId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertDefinitionEntity.java,612,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertDefinitionEntity.java,615,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertDefinitionEntity.java,623,int result = null != definitionId ? definitionId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertDefinitionEntity.java,624,return result;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertHistoryEntity.java,334,this.alertDefinitionId = alertDefinition.getDefinitionId();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertHistoryEntity.java,368,if (alertId != null ? !alertId.equals(that.alertId) : that.alertId != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertHistoryEntity.java,369,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertHistoryEntity.java,372,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertHistoryEntity.java,380,int result = null != alertId ? alertId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertHistoryEntity.java,381,return result;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,42,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,43,import javax.xml.bind.JAXBException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,44,import javax.xml.parsers.DocumentBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,45,import javax.xml.parsers.DocumentBuilderFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,557,mergeProperties(oldConfigProperties, properties, updateIfExists);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,560,mergedProperties = removeProperties(mergedProperties, removePropertiesList);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,645,boolean updateIfExists) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,649,if (!properties.containsKey(entry.getKey()) || updateIfExists) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,656,private Map<String, String> removeProperties(Map<String, String> originalProperties, Set<String> removeList){
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,20,import com.google.inject.Guice;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,23,import com.google.inject.multibindings.Multibinder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,24,import com.google.inject.persist.PersistService;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,25,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,26,import org.apache.ambari.server.audit.AuditLoggerModule;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,27,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,28,import org.apache.ambari.server.controller.ControllerModule;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,29,import org.apache.ambari.server.orm.DBAccessor;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,30,import org.apache.ambari.server.utils.EventBusSynchronizer;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,31,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,32,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,33,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,228,public void executeDMLUpdates(List<UpgradeCatalog> upgradeCatalogs) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,353,schemaUpgradeHelper.executeDMLUpdates(upgradeCatalogs);
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,155,String msg = "Host seems to be deleted but Config group mapping still " +
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,157,LOG.warn(msg);
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,158,LOG.debug(msg, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,386,File jsonFileName = new File(TMP_PATH + File.separator + componentName + "-configuration.json");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,387,File tmpDirectory = new File(jsonFileName.getParent());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,717,factory.setIncludeProtocols(new String[] { "SSLv2Hello","TLSv1"});
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ConfigGroupHostMappingDAO.java,301,setByHost.clear();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,867,Set<Cluster> clusters = hostClusterMap.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,868,if (clusters == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,869,throw new HostNotFoundException(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,874,deleteHostEntityRelationships(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,879,eventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,892,void deleteHostEntityRelationships(String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,893,checkLoaded();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,895,if (!hosts.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,896,throw new HostNotFoundException("Could not find host " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,899,w.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,901,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,902,HostEntity entity = hostDAO.findByName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,904,if (entity == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,905,return;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,909,Set<Cluster> clusters = hostClusterMap.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,910,Set<Long> clusterIds = Sets.newHashSet();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,911,for (Cluster cluster: clusters) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,912,clusterIds.add(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,918,unmapHostFromClusters(hostname, clusters);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,919,hostDAO.refresh(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,921,hostVersionDAO.removeByHostName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,925,if (entity.getHostRoleCommandEntities() != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,926,for (HostRoleCommandEntity hrcEntity : entity.getHostRoleCommandEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,927,TopologyLogicalTaskEntity topologyLogicalTaskEnity = hrcEntity.getTopologyLogicalTaskEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,928,if (topologyLogicalTaskEnity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,929,topologyLogicalTaskDAO.remove(topologyLogicalTaskEnity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,930,hrcEntity.setTopologyLogicalTaskEntity(null);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,934,for (Long clusterId: clusterIds) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,935,for (TopologyRequestEntity topologyRequestEntity: topologyRequestDAO.findByClusterId(clusterId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,936,TopologyLogicalRequestEntity topologyLogicalRequestEntity = topologyRequestEntity.getTopologyLogicalRequestEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,938,for (TopologyHostRequestEntity topologyHostRequestEntity: topologyLogicalRequestEntity.getTopologyHostRequestEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,939,if (hostname.equals(topologyHostRequestEntity.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,940,topologyHostRequestDAO.remove(topologyHostRequestEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,947,entity.setHostRoleCommandEntities(null);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,948,hostRoleCommandDAO.removeByHostId(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,950,entity.setHostStateEntity(null);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,951,hostStateDAO.removeByHostId(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,952,hostConfigMappingDAO.removeByHostId(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,953,serviceConfigDAO.removeHostFromServiceConfigs(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,954,requestOperationLevelDAO.removeByHostId(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,955,topologyHostInfoDAO.removeByHost(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,958,hosts.remove(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,959,hostsById.remove(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,961,hostDAO.remove(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,966,throw new AmbariException("Could not remove host", e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,968,w.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,298,try {
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,299,ConfigGroupHostMappingEntityPK hostMappingEntityPK = new
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,301,hostMappingEntityPK.setHostId(hostId);
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,302,hostMappingEntityPK.setConfigGroupId(configGroupEntity.getGroupId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,434,if (operatingSystem.isAmbariManagedRepos()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,202,Long logicalId = logicalRequestEntity.getId();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,204,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,208,ambariContext.getNextRequestId();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,209,allRequests.get(clusterTopology).add(logicalRequestFactory.createRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,210,logicalId, replayedRequest, clusterTopology, logicalRequestEntity));
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,212,throw new RuntimeException("Failed to construct logical request during replay: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,772,ConfigurationRequest request) throws AmbariException, AuthorizationException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,863,request.getVersionTag(), propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,910,String versionTag, Map<String, Map<String, String>> propertiesAttributes) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1473,response = updateCluster(request, requestProperties);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,405,getController().updateClusters(Collections.singleton(clusterRequest), null);
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,39,private Short timeout;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,58,Short timeout, String expectedServiceName,
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,103,public Short getTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,107,public void setTimeout(Short timeout) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,659,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1688,actionContext.setTimeout(Short.valueOf((short) -1));
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,39,private Short defaultTimeout;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,57,TargetHostType targetType, Short defaultTimeout, Set<RoleAuthorization> permissions) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,125,public Short getDefaultTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,129,public void setDefaultTimeout(Short defaultTimeout) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,46,public static final Short MIN_TIMEOUT = 60;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,51,private static final Short MAX_TIMEOUT = Short.MAX_VALUE-1;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,114,Short defaultTimeout = MIN_TIMEOUT;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,116,defaultTimeout = Short.parseShort(ad.getDefaultTimeout());
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,140,Short defaultTimeout, StringBuilder reason) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java,134,m_msg = e.toString();
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/AbstractStateFileZkCommand.java,23,import org.codehaus.jackson.JsonNode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/AbstractStateFileZkCommand.java,24,import org.codehaus.jackson.map.ObjectMapper;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/UpdateStateFileZkCommand.java,26,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentEnv.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentEnv.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentRecoveryReport.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentsResponse.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/DiskInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeat.java,25,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HostInfo.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatus.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryReport.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/Register.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/RegistrationResponse.java,25,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertStateSummary.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertStateValues.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertStateValues.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertSummaryGroupedRenderer.java,36,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,34,import org.codehaus.jackson.JsonNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,35,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,60,Iterator<JsonNode> iterator = root.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,115,Iterator<String> iterator = node.getFieldNames();
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,121,Iterator<JsonNode>       arrayIter = child.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,24,import org.apache.ambari.server.api.services.Result;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,27,import org.apache.ambari.server.api.util.TreeNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,28,import org.codehaus.jackson.JsonFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,29,import org.codehaus.jackson.JsonGenerator;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,30,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,31,import org.codehaus.jackson.util.DefaultPrettyPrinter;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,33,import java.io.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,34,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,35,import java.util.LinkedHashMap;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,36,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,100,p.indentArraysWith(new DefaultPrettyPrinter.Lf2SpacesIndenter());
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,251,p.indentArraysWith(new DefaultPrettyPrinter.Lf2SpacesIndenter());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorResponse.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,60,import org.codehaus.jackson.JsonNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,61,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,62,import org.codehaus.jackson.map.SerializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,63,import org.codehaus.jackson.node.ArrayNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,64,import org.codehaus.jackson.node.ObjectNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,65,import org.codehaus.jackson.node.TextNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,121,this.mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,233,Iterator<JsonNode> servicesIter = services.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,238,Iterator<JsonNode> componentsIter = components.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,243,String componentName = componentInfo.get(COMPONENT_NAME_PROPERTY).getTextValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,258,Iterator<JsonNode> servicesIter = services.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,267,String serviceName = serviceVersion.get("service_name").getTextValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,399,Iterator<JsonNode> iterator = root.get("items").getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,402,String hostName = next.get("Hosts").get("host_name").getTextValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,28,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,29,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/validations/ValidationResponse.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/AlertDefinitionResponse.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,23,import java.util.Objects;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,33,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,34,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/WidgetResponse.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceFilter.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceFilter.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,46,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,68,import org.codehaus.jackson.node.ArrayNode;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,69,import org.codehaus.jackson.node.JsonNodeFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,70,import org.codehaus.jackson.node.ObjectNode;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/HostComponentLoggingInfo.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogFileDefinitionInfo.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLevelQueryResponse.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLineResult.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLineResult.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,22,import org.codehaus.jackson.map.util.JSONPObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,24,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,318,mapper.getSerializationConfig().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/NameValuePair.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaMetric.java,25,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaReportPropertyProvider.java,31,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaReportPropertyProvider.java,32,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,27,import org.codehaus.jackson.map.AnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,28,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,29,import org.codehaus.jackson.map.ObjectReader;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,31,import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,59,mapper = new ObjectMapper();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,63,mapper.getSerializationConfig().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,42,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,43,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/stack/QuickLinksConfigurationModule.java,23,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceDirectory.java,26,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceDirectory.java,27,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,29,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,30,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/stack/ThemeModule.java,23,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ChangedConfigInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ClusterHealthReport.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,25,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,26,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,27,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/state/HostConfig.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/HostConfig.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,24,import org.apache.ambari.server.state.svccomphost.*;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,25,import org.codehaus.jackson.annotate.JsonCreator;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,26,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,31,import org.codehaus.jackson.annotate.JsonIgnore;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,32,import org.codehaus.jackson.map.annotate.JsonFilter;
ambari-server/src/main/java/org/apache/ambari/server/state/ValueAttributesInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ValueAttributesInfo.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/ValueEntryInfo.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertGroup.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertTarget.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Check.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Check.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Check.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Port.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Port.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Port.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Protocol.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Protocol.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Protocol.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinks.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinks.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinks.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinksConfiguration.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinksConfiguration.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinksConfiguration.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableService.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableService.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableService.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableVersion.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableVersion.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableVersion.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/ManifestServiceInfo.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Batch.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Batch.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchRequest.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchRequest.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchSettings.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchSettings.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Schedule.java,20,import org.codehaus.jackson.annotate.JsonIgnore;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Schedule.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Schedule.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,41,import org.codehaus.jackson.map.DeserializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,42,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,43,import org.codehaus.jackson.map.ObjectReader;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,152,jmxObjectMapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/MetricDefinition.java,21,import org.codehaus.jackson.annotate.JsonIgnore;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/MetricDefinition.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayout.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayoutInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigCondition.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigCondition.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigCondition.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigPlacement.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigPlacement.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigPlacement.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Layout.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Layout.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Layout.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Placement.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Placement.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Placement.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Section.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Section.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Section.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Subsection.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Subsection.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Subsection.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Tab.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Tab.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Tab.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Theme.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Theme.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Theme.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ThemeConfiguration.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ThemeConfiguration.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ThemeConfiguration.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Unit.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Unit.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Unit.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Widget.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Widget.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Widget.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/WidgetEntry.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/WidgetEntry.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/WidgetEntry.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,61,import org.codehaus.jackson.JsonGenerationException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,62,import org.codehaus.jackson.map.JsonMappingException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,63,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,64,import org.codehaus.jackson.map.SerializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,257,mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,258,mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, true);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,48,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,49,import org.codehaus.jackson.type.TypeReference;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsViewControllerImpl.java,84,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsViewControllerImpl.java,85,import org.codehaus.jackson.type.TypeReference;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/Metric.java,21,import org.codehaus.jackson.annotate.JsonIgnore;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/Metric.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,22,import org.codehaus.jackson.map.DeserializationConfig;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,23,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,24,import org.codehaus.jackson.map.ObjectReader;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,74,jmxObjectMapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,33,import org.codehaus.jackson.map.AnnotationIntrospector;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,34,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,35,import org.codehaus.jackson.map.ObjectReader;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,36,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,37,import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,56,mapper.getSerializationConfig().setSerializationInclusion(
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,57,Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,218,throw new IllegalArgumentException("A view instance " +
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,219,viewName + "/" + instanceName + " can not be found.");
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,225,throw new IllegalArgumentException("A resource type " + resources + " for view instance " +
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,226,viewName + "/" + instanceName + " can not be found.");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,501,final Map<String, ServiceComponentHost> serviceHostComponents;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,507,if (serviceHostComponents.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,513,List<String> candidateHostsList = resourceFilter.getHostNames();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,514,if (candidateHostsList != null && !candidateHostsList.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,517,candidateHosts = serviceHostComponents.keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,525,Iterator<String> serviceComponentNameIterator = serviceComponents.keySet().iterator();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,526,while (serviceComponentNameIterator.hasNext()){
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,527,String componentToCheck = serviceComponentNameIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,528,if (serviceComponents.get(componentToCheck).getServiceComponentHosts().isEmpty()){
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,529,serviceComponentNameIterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,533,if (serviceComponents.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,538,ServiceComponent serviceComponent = serviceComponents.values().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,540,serviceHostComponents = serviceComponent.getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,541,candidateHosts = serviceHostComponents.keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,551,ServiceComponentHost serviceComponentHost = serviceHostComponents.get(candidateHostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,552,Host host = serviceComponentHost.getHost();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1532,filters.add(new RequestResourceFilter(tw.getService(), "", Collections.<String> emptyList()));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/ValidatorUtils.java,32,String[] schemes = {"webhdfs", "hdfs", "s3", "wasb", "swebhdfs", "adl"};
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Runner.java,34,throws IOException, URISyntaxException {
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Runner.java,97,dfs.close();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesMapReduceDistributedCacheCheck.java,49,static final String DFS_PROTOCOLS_REGEX_DEFAULT = "^([^:]*dfs|wasb|ecs):.*";
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesTezDistributedCacheCheck.java,51,static final String DFS_PROTOCOLS_REGEX_DEFAULT = "^([^:]*dfs|wasb|ecs):.*";
