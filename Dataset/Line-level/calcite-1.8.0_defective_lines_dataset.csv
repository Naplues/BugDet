File,Line_number,SRC
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3475,SqlNode selectItem = selectItems.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,66,final List<AbstractConverter> abstractConverters = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,351,planner.checkForSatisfiedConverters(set, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1326,void checkForSatisfiedConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1327,RelSet set,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1328,RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1329,int i = 0;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1330,while (i < set.abstractConverters.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1331,AbstractConverter converter = set.abstractConverters.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1333,changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1334,rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1335,converter.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1336,if (converted == null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1339,if (!isRegistered(converted)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1820,set.abstractConverters.add((AbstractConverter) rel);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,63,final RexExecutorImpl executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,68,RexExecutorImpl executor,
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,213,final RexExecutable exec =
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,62,private String compile(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,105,public RexExecutable getExecutable(RexBuilder rexBuilder, List<RexNode> exps,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,109,RelOptUtil.pushPastProject(topProject.getProjects(), bottomProject);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,53,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexWindow.java,55,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,856,final ImmutableBitSet groupSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,858,final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,37,import org.apache.calcite.rex.RexLiteral;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1199,boolean allowAbstractConverters) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1249,RelTraitSet stepTraits =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1252,rel = getSubset(converted, stepTraits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1320,RelNode changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1321,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1322,RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1323,return changeTraitsUsingConverters(rel, toTraits, false);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,120,if (flatGroupSets.isEmpty()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2573,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2576,false);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,83,public Result visitChild(int i, RelNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,107,protected final Map<String, SqlNode> ordinalMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,113,public abstract Result visitChild(int i, RelNode e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,681,final SqlNode mappedSqlNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,683,if (mappedSqlNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,684,return mappedSqlNode;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,837,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,859,this.rel = rel;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,860,this.clauses = clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,861,this.select = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,862,this.context = context;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,317,if (!inputRels.contains(previous)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2959,convertQueryRecursive(call.getSource(), false, targetRowType).project();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,498,match.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,147,buf.append(", ");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,151,buf.append("]");
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,23,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,36,import org.apache.calcite.sql.type.SqlTypeUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,38,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,39,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,40,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,43,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,129,private List<RelDataType> collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,130,SqlValidator validator,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,131,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,132,SqlCall call) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,133,List<RelDataType> argTypes =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,134,SqlTypeUtil.deriveAndCollectTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,135,validator, scope, call.getOperandList());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,136,return ImmutableNullableList.of(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,137,argTypes.get(VALUE_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,138,argTypes.get(LOWER_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,139,argTypes.get(UPPER_OPERAND));
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,144,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,148,collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,149,callBinding.getValidator(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,150,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,151,callBinding.getCall()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,23,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,316,newFilterArg = filters.get(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,320,newFilterArg =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,321,filters.get(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,324,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,334,remap(fullGroupSet, aggregate.getGroupSet()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,756,final Clause maxClause = maxClause();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,757,boolean needNew = false;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,760,Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,761,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,764,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,796,public Clause maxClause() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,218,return inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,219,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,220,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,259,private RelDataType inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,260,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,261,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,267,thenTypes.add(argTypes.get(j));
core/src/main/java/org/apache/calcite/runtime/Hook.java,65,QUERY_PLAN;
core/src/main/java/org/apache/calcite/rel/core/Project.java,242,&& false) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,243,pw.item("type", rowType);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,279,int trivialCount = 0;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,283,if (level != SqlExplainLevel.DIGEST_ATTRIBUTES) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,284,trivialCount = countTrivial(projects);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,301,pw.item(prefix + outFields.get(i).getName(), projects.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,25,import org.apache.calcite.schema.Table;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,40,final Table table = relOptTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,41,if (!EnumerableTableScan.canHandle(table)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,42,return null;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,261,&& table instanceof QueryableTable) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,272,throw new AssertionError();
core/src/main/java/org/apache/calcite/util/BitString.java,195,assert bytes != null;
core/src/main/java/org/apache/calcite/util/BitString.java,196,int bitCount = bytes.length * 8;
core/src/main/java/org/apache/calcite/util/BitString.java,199,for (int i = 7; i >= 0; --i) {
core/src/main/java/org/apache/calcite/util/BitString.java,200,sb.append(((b & 1) == 0) ? '0' : '1');
core/src/main/java/org/apache/calcite/util/BitString.java,201,b >>= 1;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,626,if (scale > 0) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,627,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,632,value = encodeIntervalOrDecimal(value, decimalType, false);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,59,import java.io.PrintWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,60,import java.io.StringWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,243,StringWriter stringWriter = new StringWriter(query.length());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,244,PrintWriter printWriter = new PrintWriter(stringWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,247,query = stringWriter.toString();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,55,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,130,final SqlNodeList selectList =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,131,new SqlNodeList(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,132,Collections.singletonList(SqlIdentifier.star(SqlParserPos.ZERO)),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,133,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,137,final SqlPrettyWriter writer = new SqlPrettyWriter(jdbcSchema.dialect);
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,75,SqlWriter.FrameTypeEnum.SIMPLE);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,198,final SqlWriter.Frame joinFrame =
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,199,writer.startList(SqlWriter.FrameTypeEnum.JOIN);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,204,String natural = "";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,205,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,206,natural = "NATURAL ";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,213,writer.sep(natural + "CROSS JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,216,writer.sep(natural + "FULL JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,219,writer.sep(natural + "INNER JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,222,writer.sep(natural + "LEFT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,225,writer.sep(natural + "RIGHT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,253,writer.endList(joinFrame);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,122,return toSqlString(null).getSql();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,142,if (dialect == null) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,145,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,146,writer.setAlwaysUseParentheses(forceParens);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,147,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,148,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,149,unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,19,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,108,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,110,: writer.startList("", "");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,111,commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,112,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,119,for (SqlNode node : list) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,120,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,121,node.unparse(writer, 2, 3);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,125,void andOrList(SqlWriter writer, SqlKind sepKind) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,126,SqlBinaryOperator sepOp =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,127,sepKind == SqlKind.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,128,? SqlStdOperatorTable.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,129,: SqlStdOperatorTable.OR;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,130,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,131,SqlNode node = list.get(i);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,132,writer.sep(sepKind.name(), false);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,140,int lprec = (i == 0) ? 0 : sepOp.getRightPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,141,int rprec = (i == (list.size() - 1)) ? 0 : sepOp.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,142,node.unparse(writer, lprec, rprec);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,337,unparseListClause(writer, clause, null);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,344,if (clause instanceof SqlNodeList) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,345,if (sepKind != null) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,346,((SqlNodeList) clause).andOrList(writer, sepKind);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,348,((SqlNodeList) clause).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,351,clause.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,93,final SqlWriter.Frame listFrame =
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,94,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,95,unparseListClause(writer, orderBy.orderList);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,96,writer.endList(listFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,146,SqlNode selectClause = select.selectList;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,147,if (selectClause == null) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,148,selectClause = SqlIdentifier.star(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,150,final SqlWriter.Frame selectListFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,151,writer.startList(SqlWriter.FrameTypeEnum.SELECT_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,152,unparseListClause(writer, selectClause);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,153,writer.endList(selectListFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,178,SqlKind whereSepKind = SqlKind.AND;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,181,whereSepKind = SqlKind.OR;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,186,while (node.getKind() == whereSepKind) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,195,final SqlWriter.Frame whereFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,196,writer.startList(SqlWriter.FrameTypeEnum.WHERE_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,197,unparseListClause(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,198,writer,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,199,new SqlNodeList(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,200,list,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,201,select.where.getParserPosition()),
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,202,whereSepKind);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,203,writer.endList(whereFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,210,final SqlWriter.Frame groupFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,211,writer.startList(SqlWriter.FrameTypeEnum.GROUP_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,212,if (select.groupBy.getList().isEmpty()) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,213,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,214,writer.startList(SqlWriter.FrameTypeEnum.SIMPLE, "(", ")");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,215,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,217,unparseListClause(writer, select.groupBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,219,writer.endList(groupFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,227,final SqlWriter.Frame windowFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,228,writer.startList(SqlWriter.FrameTypeEnum.WINDOW_DECL_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,229,for (SqlNode windowDecl : select.windowDecls) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,230,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,231,windowDecl.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,233,writer.endList(windowFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,237,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,238,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,239,unparseListClause(writer, select.orderBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,240,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,179,SUB_QUERY,
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,214,IDENTIFIER(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,126,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,127,SqlWriter.FrameTypeEnum.create("CASE");
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,296,writer.startList(FRAME_TYPE, "CASE", "END");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,33,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,138,private final StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,139,protected final PrintWriter pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,144,protected boolean alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,145,private boolean keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,147,private boolean quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,148,private int indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,149,private boolean clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,150,private boolean selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,151,private boolean selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,153,private boolean windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,154,private boolean updateSetListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,155,private boolean windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,157,private boolean whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,159,private boolean caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,160,private int lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,161,private int charCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,169,if (pw == null) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,170,pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,172,this.pw = pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,173,this.dialect = dialect;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,174,this.alwaysUseParentheses = alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,175,resetSettings();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,176,reset();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,182,this(dialect, alwaysUseParentheses, null);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,186,this(dialect, true);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,196,this.caseClausesOnNewLines = caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,208,this.windowNewline = windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,212,this.windowDeclListNewline = windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,216,return indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,220,return alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,231,return quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,235,return clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,239,return selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,243,return whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,247,return selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,251,return keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,255,return lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,260,indentation = 4;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,261,clauseStartsLine = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,262,selectListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,263,selectListExtraIndentFlag = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,264,keywordsLowerCase = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,265,quoteAllIdentifiers = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,266,windowDeclListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,267,updateSetListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,268,windowNewline = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,270,alwaysUseParentheses = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,271,whereListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,272,lineLength = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,273,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,277,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,299,this.indentation = indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,347,this.clauseStartsLine = clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,355,this.selectListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,382,public void setSelectListExtraIndentFlag(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,383,this.selectListExtraIndentFlag = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,390,public void setKeywordsLowerCase(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,391,this.keywordsLowerCase = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,400,public void setWhereListItemsOnSeparateLines(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,401,this.whereListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,404,public void setAlwaysUseParentheses(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,405,this.alwaysUseParentheses = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,409,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,410,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,411,indent(currentIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,419,Spaces.append(pw, indent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,420,charCount += indent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,430,public void setQuoteAllIdentifiers(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,431,this.quoteAllIdentifiers = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,451,int indentation = getIndentation();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,452,if (frameType instanceof FrameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,453,FrameTypeEnum frameTypeEnum = (FrameTypeEnum) frameType;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,455,switch (frameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,456,case WINDOW_DECL_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,457,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,458,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,459,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,460,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,461,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,462,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,463,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,464,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,465,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,466,windowDeclListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,467,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,468,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,470,case UPDATE_SET_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,471,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,472,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,473,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,474,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,475,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,476,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,477,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,478,updateSetListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,479,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,480,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,481,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,482,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,484,case SELECT_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,485,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,486,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,487,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,488,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,489,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,490,selectListExtraIndentFlag ? indentation : 0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,491,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,492,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,493,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,494,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,495,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,496,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,498,case ORDER_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,499,case GROUP_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,500,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,501,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,502,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,503,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,504,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,505,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,506,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,507,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,508,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,509,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,510,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,511,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,513,case SUB_QUERY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,515,case BLACK:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,521,open = Spaces.padRight("(", indentation);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,522,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,523,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,524,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,525,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,526,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,527,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,528,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,529,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,530,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,531,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,532,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,533,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,534,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,535,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,538,case HYDE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,544,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,545,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,546,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,547,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,548,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,549,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,550,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,551,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,552,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,553,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,554,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,555,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,556,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,557,nextWhitespace = NL;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,560,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,564,case ORDER_BY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,565,case OFFSET:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,566,case FETCH:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,567,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,568,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,569,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,570,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,571,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,572,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,573,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,574,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,575,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,576,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,577,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,578,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,580,case SELECT:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,581,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,582,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,583,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,584,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,585,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,586,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,587,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,588,isClauseStartsLine(), // newline before FROM, WHERE etc.
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,589,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,590,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,591,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,592,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,594,case SETOP:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,595,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,596,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,597,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,598,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,599,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,600,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,601,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,602,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,603,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,604,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,605,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,606,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,608,case WINDOW:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,609,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,610,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,611,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,612,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,613,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,614,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,615,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,616,windowNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,617,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,618,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,619,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,620,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,622,case FUN_CALL:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,623,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,624,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,625,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,626,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,627,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,628,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,629,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,630,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,631,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,632,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,633,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,634,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,635,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,637,case IDENTIFIER:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,638,case SIMPLE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,639,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,640,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,641,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,642,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,643,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,644,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,645,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,646,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,647,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,648,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,649,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,650,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,652,case WHERE_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,653,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,654,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,655,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,656,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,657,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,658,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,659,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,660,whereListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,661,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,662,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,663,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,664,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,666,case FROM_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,667,case JOIN:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,668,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,669,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,670,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,671,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,672,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,673,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,674,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,675,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,676,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,677,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,678,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,679,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,680,protected void sep(boolean printFirst, String sep) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,681,boolean newlineBefore =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,682,newlineBeforeSep
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,683,&& !sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,684,boolean newlineAfter =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,685,newlineAfterSep && sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,686,if ((itemCount > 0) || printFirst) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,687,if (newlineBefore && (itemCount > 0)) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,688,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,689,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,690,indent(currentIndent + sepIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,691,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,693,keyword(sep);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,694,nextWhitespace = newlineAfter ? NL : " ";
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,696,++itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,699,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,707,if (frameType.getName().equals("CASE")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,708,if (caseClausesOnNewLines) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,709,newlineAfterOpen = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,711,newlineBeforeClose = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,712,sepIndent = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,715,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,716,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,717,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,718,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,719,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,720,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,721,newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,722,newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,723,sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,724,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,725,newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,726,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,745,++frame.itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,752,if (frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,753,currentIndent += frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,791,if (endedFrame.frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,792,currentIndent -= this.frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,805,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,806,return sw.toString();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,824,pw.print(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,826,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,858,pw.print(nextWhitespace);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,859,charCount += nextWhitespace.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,870,&& ((charCount + s.length()) >= lineLength);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,886,pw.print(s);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,887,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,892,pw.print(x);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,893,charCount += String.valueOf(x).length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,903,pw.print(qName);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,904,charCount += qName.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,998,this.lineLength = lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1056,private final boolean newlineBeforeClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1057,private final boolean newlineAfterClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1058,private final boolean newlineAfterOpen;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1060,FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1061,FrameType frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1062,String keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1063,String open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1064,String close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1065,int extraIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1066,boolean newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1067,boolean newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1068,int sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1069,boolean newlineAfterSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1070,boolean newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1071,boolean newlineAfterClose) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1096,|| (newlineAfterOpen && (itemCount == 0))) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1097,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,65,writer.setAlwaysUseParentheses(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,66,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,67,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3728,int iAdjusted = i;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3729,if (query instanceof SqlUpdate) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3730,int nUpdateColumns =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3731,((SqlUpdate) query).getTargetColumnList().size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3732,assert sourceFields.size() >= nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3733,iAdjusted -= sourceFields.size() - nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3735,SqlNode node = getNthExpr(query, iAdjusted, sourceCount);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3776,if (update.getTargetColumnList() != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3777,return update.getTargetColumnList().get(ordinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3828,checkTypeAssignment(sourceRowType, targetRowType, call);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,161,List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,181,RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,182,rel.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,36,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,86,final Map<Integer, Integer> mapInToOutPos = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,87,final List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,88,final Set<ImmutableBitSet> projUniqueKeySet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,94,mapInToOutPos.put(((RexInputRef) projExpr).getIndex(), i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,98,if (mapInToOutPos.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,101,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,107,if (childUniqueKeySet != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,110,for (ImmutableBitSet colMask : childUniqueKeySet) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,111,ImmutableBitSet.Builder tmpMask = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,112,boolean completeKeyProjected = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,113,for (int bit : colMask) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,114,if (mapInToOutPos.containsKey(bit)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,115,tmpMask.set(mapInToOutPos.get(bit));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,119,completeKeyProjected = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,120,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,123,if (completeKeyProjected) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,124,projUniqueKeySet.add(tmpMask.build());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,129,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,65,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,771,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,772,case CASE:
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,320,if (rank.get(target) < rank.get(ordinal1)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,394,SqlNode expanded = expand(selectItem, scope);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,677,final List<RexNode> castExps =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,678,RexUtil.generateCastExpressions(rexBuilder, castRowType, rowType);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,681,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,685,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,226,|| Number.class.isAssignableFrom(elementType))) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,220,protected final List<RelNode> leaves = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1616,leaves.add(resultRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3873,leaves.add(root);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,177,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,178,final CalciteCatalogReader catalogReader = createCatalogReader();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,179,this.validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,180,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,181,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,182,this.validator.setIdentifierExpansion(true);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,55,return (Integer) expression0.evaluate(evaluator) + (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,56,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,59,+ (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,66,return (Integer) expression0.evaluate(evaluator) / (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,67,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,80,return (Integer) expression0.evaluate(evaluator) > (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,81,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,84,> (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,92,>= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,95,>= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,102,return (Integer) expression0.evaluate(evaluator) < (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,103,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,106,< (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,114,<= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,117,<= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,124,return (Integer) expression0.evaluate(evaluator) * (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,125,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,141,return (Integer) expression0.evaluate(evaluator) - (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,142,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,145,- (Double) expression1.evaluate(evaluator);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,469,new SqlSingleOperandTypeChecker() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,470,public boolean checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,471,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,472,SqlNode node,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,473,int iFormalOperand,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,474,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,475,assert 0 == iFormalOperand;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,476,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,477,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,478,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,479,node);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,480,boolean validationError = false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,481,if (!type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,482,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,484,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,486,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,487,type.getFieldList().get(0).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,488,if (typeName != SqlTypeName.MULTISET
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,489,&& typeName != SqlTypeName.ARRAY) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,490,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,494,if (validationError && throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,495,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,497,return !validationError;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,500,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,501,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,502,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,503,return checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,504,callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,505,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,506,0,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,507,throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,510,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,511,return SqlOperandCountRanges.of(1);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,514,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,515,return "UNNEST(<MULTISET>)";
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,518,public boolean isOptional(int i) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,519,return false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,522,public Consistency getConsistency() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,523,return Consistency.NONE;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,533,OperandTypes.or(COLLECTION_OR_MAP, RECORD_COLLECTION);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,231,for (SqlNode node : thenList) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,232,argTypes.add(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,233,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,234,callBinding.getScope(), node));
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,123,join.getTraitSet(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,176,static Expression fromInternal(Expression e, Class<?> targetType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,177,if (e == ConstantUntypedNull.INSTANCE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,178,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,180,if (!(e.getType() instanceof Class)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,181,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,183,if (targetType.isAssignableFrom((Class) e.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,184,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,187,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,189,if (targetType == java.sql.Time.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,190,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,192,if (targetType == java.sql.Timestamp.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,193,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,198,return Expressions.convert_(e,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,201,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,223,static Type toInternal(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,239,static Expression enforce(final Type storageType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,240,final Expression e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,241,if (storageType != null && e.type != storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,242,if (e.type == java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,243,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,244,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,246,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,247,return Expressions.call(BuiltInMethod.DATE_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,250,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,251,return Expressions.call(BuiltInMethod.TIME_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,253,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,254,return Expressions.call(BuiltInMethod.TIME_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,257,if (storageType == long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,258,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,260,if (storageType == Long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,261,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,265,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,143,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,264,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,867,RexToLixTranslator.convert(res, agg.result.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,892,offs = RexToLixTranslator.convert(offs, int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,913,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1096,return RexToLixTranslator.convert(result.accumulator().get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,27,import org.apache.calcite.linq4j.tree.ExpressionType;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,31,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,223,expression = EnumUtils.enforce(storageType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,355,convert = convert(operand, typeFactory.getJavaClass(targetType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,545,convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,732,public static Expression convert(Expression operand, Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,733,final Type fromType = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,735,return operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,739,final Primitive toPrimitive = Primitive.of(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,740,final Primitive toBox = Primitive.ofBox(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,741,final Primitive fromBox = Primitive.ofBox(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,742,final Primitive fromPrimitive = Primitive.of(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,743,final boolean fromNumber = fromType instanceof Class
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,744,&& Number.class.isAssignableFrom((Class) fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,745,if (fromType == String.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,746,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,747,switch (toPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,748,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,749,case SHORT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,750,case INT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,751,case LONG:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,752,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,753,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,755,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,756,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,758,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,759,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,761,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,762,toPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,764,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,767,if (toBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,768,switch (toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,769,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,771,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,772,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,774,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,775,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,777,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,778,toBox.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,780,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,784,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,785,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,787,return Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,788,operand, toPrimitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,790,if (fromNumber || fromBox == Primitive.CHAR) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,792,return Expressions.unbox(operand, toPrimitive);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,796,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,797,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,799,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,804,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,805,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,806,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,807,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,808,Expressions.unbox(operand, toBox),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,809,toBox));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,814,if (operand instanceof UnaryExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,815,UnaryExpression una = (UnaryExpression) operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,816,if (una.nodeType == ExpressionType.Convert
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,817,|| Primitive.of(una.getType()) == toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,818,return Expressions.box(una.expression, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,836,if (fromBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,839,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,840,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,841,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,842,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,843,BigDecimal.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,844,Expressions.unbox(operand, fromBox)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,846,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,854,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,855,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,856,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,857,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,858,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,860,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,862,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,863,switch (fromPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,864,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,865,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,868,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,869,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,871,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,872,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,875,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,876,fromPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,878,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,883,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,884,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,885,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,886,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,887,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,889,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,901,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,170,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,181,Expression nonNull = RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,153,RexToLixTranslator.convert(recFromCtx, Object[].class);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,161,return RexToLixTranslator.convert(recordAccess, storageType);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,19,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,181,RexToLixTranslator.convert(Expressions.constant(o), clazz);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,175,&& token.s.equalsIgnoreCase("ALL")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,488,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,617,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,694,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,774,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,713,public static int mod(int b0, BigDecimal b1) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,714,return mod(b0, b1.intValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4001,if (rowType == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4004,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4011,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4040,if (node.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4049,if (expr.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,29,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,102,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,105,final ImmutableIntList projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,106,final ImmutableList<RexNode> filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,110,filters = bindableScan.filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,111,projects = bindableScan.projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,113,filters = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,114,projects = scan.identity();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,117,final List<Integer> projects2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,118,Mappings.apply((Mapping) mapping, projects);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,119,call.transformTo(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,120,Bindables.BindableTableScan.create(scan.getCluster(), scan.getTable(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,121,filters, projects2));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1053,if (LOGGER.isDebugEnabled()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1069,return subset;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1071,return register(rel, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1094,if (relCost.isLt(subset.bestCost)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,869,rel.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,251,subset.bestCost = otherSubset.bestCost;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,252,subset.best = otherSubset.best;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,280,final Set<RelSubset> activeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,200,if (rel.set == set && traitSet.satisfies(rel.getTraitSet())) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,927,RelOptPlanner planner, Prepare.Materialization materialization) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1001,RelOptPlanner planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1007,this.planner = planner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1009,this.rexBuilder = new RexBuilder(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1086,final RelOptCluster cluster = prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1223,prepare.populateMaterializations(context, planner, materialization);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,260,buff.append(", r");
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,51,super("ITEM", SqlKind.OTHER_FUNCTION, 100, true, null, null, null);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,218,case OTHER_FUNCTION:
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,43,final Properties properties1 = new Properties(properties);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,44,properties1.setProperty(property.camelName(), value);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,45,return new CalciteConnectionConfigImpl(properties1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,620,SqlNode node = field(collation.getFieldIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,776,Context newContext;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,223,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,224,fieldClass(field),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,225,fieldReference(v1, field)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,297,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,298,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,398,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,399,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,557,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,558,returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,559,fieldReference(v1, field0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1018,Types.castIfNecessary(acc.type, add.arguments().get(0)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1518,Types.castIfNecessary(type,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1519,Expressions.constant(timeUnit.multiplier)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,734,if (fromType.equals(toType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,821,return Expressions.box(operand, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,893,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,894,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,895,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,896,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,897,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,25,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,58,Expressions.assign(acc, Types.castIfNecessary(acc.type, next))));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,29,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,126,return Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,127,target.getClass(),
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,132,BuiltInMethod.REFLECTIVE_SCHEMA_GET_TARGET.method));
core/src/main/java/org/apache/calcite/schema/Schemas.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/schema/Schemas.java,200,return Types.castIfNecessary(clazz, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,453,if (Types.isAssignableFrom(returnType, type)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,250,Context rightContext, int leftFieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,264,rightContext, leftFieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,280,node = stripCastFromString(node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,316,private static RexNode stripCastFromString(RexNode node) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,330,final RexNode o0b = ((RexCall) o0).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,331,switch (o0b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,332,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,333,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,334,return call.clone(call.getType(), ImmutableList.of(o0b, o1));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,339,final RexNode o1b = ((RexCall) o1).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,340,switch (o1b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,341,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,342,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,343,return call.clone(call.getType(), ImmutableList.of(o0, o1b));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,517,final RexCall call = (RexCall) stripCastFromString(rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,532,return createLeftCall(op, nodeList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,146,writer.append("new java.math.BigDecimal(").append(exact).append("L");
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,319,subset.propagateCostImprovements0(planner, mq, rel, activeSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,325,RelNode rel, Set<RelSubset> activeSet) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,348,parentSubset.propagateCostImprovements(planner, mq, parent,
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,349,activeSet);
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,28,public static final CyclicMetadataException INSTANCE =
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,29,new CyclicMetadataException();
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,32,private CyclicMetadataException() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,297,if (!predicate.apply(join, joinType, exp)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,84,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,171,return copy(traitSet, getInput(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,172,new RexProgram(program.getInputRowType(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,173,exprs,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,175,(RexLocalRef) condition,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,176,program.getOutputRowType()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,137,throw new AssertionError(); // TODO:
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,107,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,158,.item("requiredColumns", requiredColumns.toString());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,91,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rex/RexProgram.java,242,return collectExplainTerms("", pw, pw.getDetailLevel());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,152,List<RexNode> newOperands = apply(call.getOperands());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,153,if (true) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,156,throw new AssertionError();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,51,RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,68,description == null
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,70,: description);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,234,return table.unwrap(ScannableTable.class).scan(dataContext);
core/src/main/java/org/apache/calcite/rel/core/Project.java,281,mapping.set(((RexInputRef) exp.e).getIndex(), exp.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,99,final Mappings.TargetMapping mapping = project.getMapping();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,100,if (mapping == null
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,101,|| Mappings.isIdentity(mapping)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1149,exprList.add(rexBuilder.makeZeroLiteral(field.getType()));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1154,exprList.set(target,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1155,rexBuilder.ensureType(expr.e.getType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1156,RexInputRef.of(expr.i, input.rowType),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1157,false));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1159,throw MatchFailed.INSTANCE;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,914,if (needsNullIndicator(type)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,918,RelDataType indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,919,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,920,if (type.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,921,indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,922,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,923,indicatorType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,924,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,926,RelDataTypeField nullIndicatorField =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,927,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,929,0,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,930,indicatorType);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,931,list.add(nullIndicatorField);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,932,nested = true;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,180,restructured = false;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,181,List<RexNode> structuringExps = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,184,structuringExps = restructureFields(root.getRowType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,186,if (restructured) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,195,return flattened;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,203,if (field.getType().getSqlTypeName() == SqlTypeName.STRUCTURED) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,205,structuringExps.add(restructure(field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,207,structuringExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,208,new RexInputRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,209,iRestructureInput,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,210,field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,211,++iRestructureInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,217,private RexNode restructure(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,218,RelDataType structuredType) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,220,RexInputRef nullIndicator =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,221,RexInputRef.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,222,iRestructureInput++, flattenedRootType.getFieldList());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,225,List<RexNode> inputExprs = restructureFields(structuredType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,226,RexNode newInvocation =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,227,rexBuilder.makeNewInvocation(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,228,structuredType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,229,inputExprs);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,231,if (!structuredType.isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,233,return newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,238,RexNode[] caseOperands = new RexNode[3];
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,241,caseOperands[0] =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,242,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,243,SqlStdOperatorTable.IS_NULL,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,244,nullIndicator);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,253,caseOperands[2] = newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,255,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,256,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,257,caseOperands);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,277,int newOrdinal = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,281,RelNode oldInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,282,for (RelNode oldInput1 : currentRel.getInputs()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,283,RelDataType oldInputType = oldInput1.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,284,int n = oldInputType.getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,285,if (oldOrdinal < n) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,286,oldInput = oldInput1;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,287,break;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,290,newOrdinal += newInput.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,291,oldOrdinal -= n;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,293,assert oldInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,295,RelDataType oldInputType = oldInput.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,318,private int calculateFlattenedOffset(RelDataType rowType, int ordinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,319,int offset = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,320,if (SqlTypeUtil.needsNullIndicator(rowType)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,322,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,324,List<RelDataTypeField> oldFields = rowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,325,for (int i = 0; i < ordinal; ++i) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,326,RelDataType oldFieldType = oldFields.get(i).getType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,327,if (oldFieldType.isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,330,RelDataType flattened =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,331,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,332,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,333,oldFieldType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,334,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,335,final List<RelDataTypeField> fields = flattened.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,336,offset += fields.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,338,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,341,return offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,392,RelNode newRel =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,393,rel.copy(rel.getTraitSet(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,394,getNewForOldRel(rel.getInput()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,395,rel.getCondition().accept(new RewriteRexShuttle()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,466,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,467,rel.getProjects(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,468,rel.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,470,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,548,String fieldName =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,551,: fieldNames.get(i);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,552,if (!prefix.equals("")) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,553,fieldName = prefix + "$" + fieldName;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,565,RexInputRef inputRef = (RexInputRef) exp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,569,RelDataType flattenedType =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,570,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,571,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,572,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,573,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,574,List<RelDataTypeField> fieldList = flattenedType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,575,int n = fieldList.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,576,for (int j = 0; j < n; ++j) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,578,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,581,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,587,if (exp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,590,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,592,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,594,if (RexLiteral.isNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,595,((RexCall) exp).operands.get(0))) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,598,flattenNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,599,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,600,flattenedExps);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,601,return;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,604,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,613,int j = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,615,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,617,fieldName + "$" + (j++)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,655,flattenInputs(rel.getRowType().getFieldList(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,656,rexBuilder.makeRangeReference(newRel),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,657,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,680,flattenInputs(field.getType().getFieldList(), ref, flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,765,calculateFlattenedOffset(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,777,final UnifyRuleCall call = new UnifyRuleCall(rule, query, target, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,95,private final RexToLixTranslator.InputGetter inputGetter;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,83,boolean allColumnsInAggregate = aggregate.getGroupSet().
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,84,contains(filterColumns);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,593,throw Extensions.todo();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1320,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1324,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1326,collation(node, RelFieldCollation.Direction.ASCENDING, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1338,final boolean addedFields = extraNodes.size() > originalExtraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1340,assert !addedFields;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1371,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1372,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1378,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1379,project(originalExtraNodes);
core/src/main/java/org/apache/calcite/util/Pair.java,203,return new AbstractList<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,204,public Pair<K, V> get(int index) {
core/src/main/java/org/apache/calcite/util/Pair.java,205,return Pair.of(ks.get(index), vs.get(index));
core/src/main/java/org/apache/calcite/util/Pair.java,208,public int size() {
core/src/main/java/org/apache/calcite/util/Pair.java,209,return size;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,124,BINDABLE_WINDOW_RULE);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,20,import java.util.ArrayList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,21,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,28,static final Indent INDENT = new Indent(20);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,31,private int level;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,32,private String indent = "";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,78,indent = INDENT.get(++level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,85,indent = INDENT.get(--level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,95,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,147,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,199,private static class Indent extends ArrayList<String> {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,201,super(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,202,ensureSize(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,205,public synchronized String of(int index) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,206,ensureSize(index + 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,207,return get(index);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,210,private void ensureSize(int targetSize) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,211,if (targetSize < size()) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,212,return;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,214,char[] chars = new char[2 * targetSize];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,215,Arrays.fill(chars, ' ');
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,217,clear();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,218,for (int i = 0; i < targetSize; i++) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,427,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,436,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,437,RexNode second = removeCast(operands.get(1));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,454,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,455,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,456,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,457,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,458,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,459,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,462,return inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,31,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,32,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,114,inputRef = removeCast(inputRef);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,115,literal = removeCast(literal);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,193,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,194,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,195,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,196,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,197,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,198,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,201,return inputRef;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,63,super(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3257,case AND:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3264,final int left2 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3266,final RexNode e =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3267,pushDownEqualJoinConditions(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3268,operand,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3269,leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3270,rightCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3271,extraLeftExprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3273,final List<RexNode> remainingOperands = Util.skip(operands, i + 1);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3274,final int left3 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3275,fix(remainingOperands, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3276,fix(list, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3277,list.add(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,363,final String op = (String) map.get("op");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,364,if (op != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,442,final List<SqlOperator> operatorList =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,443,SqlStdOperatorTable.instance().getOperatorList();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,444,for (SqlOperator operator : operatorList) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,445,if (operator.getName().equals(op)) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,460,private String toJson(SqlOperator operator) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,462,return operator.getName();
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,271,final String aggName = (String) jsonAggCall.get("agg");
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,199,node = SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,200,POS, node, new SqlIdentifier(name, POS));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,416,protected boolean requiresAliasForFromItems() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,76,String stringValue = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,80,assert value instanceof NlsString;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,81,writer.literal(value.toString());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,60,private final String identifierQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,61,private final String identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,62,private final String identifierEscapedQuote;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,284,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,285,buf.append(val); // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,286,return buf;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,288,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,289,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,290,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,291,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,292,buf.append(identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,293,buf.append(val2);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,294,buf.append(identifierEndQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,329,public String quoteStringLiteral(String val) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,330,if (containsNonAscii(val)) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,331,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,333,return buf.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,335,val = FakeUtil.replace(val, "'", "''");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,336,return "'" + val + "'";
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,347,private static boolean containsNonAscii(String s) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,350,if (c < 32 || c >= 128) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,393,&& (val.charAt(val.length() - 1) == '\'')) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,394,if (val.length() > 2) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,395,val = FakeUtil.replace(val, "''", "'");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,396,return val.substring(1, val.length() - 1);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,399,return "";
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,174,writer.literal(nls.asSql(true, false));
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,177,writer.literal(nls.asSql(false, false));
core/src/main/java/org/apache/calcite/util/NlsString.java,156,boolean suffix) {
core/src/main/java/org/apache/calcite/util/NlsString.java,158,if (prefix && (null != charsetName)) {
core/src/main/java/org/apache/calcite/util/NlsString.java,159,ret.append("_");
core/src/main/java/org/apache/calcite/util/NlsString.java,160,ret.append(charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,162,ret.append("'");
core/src/main/java/org/apache/calcite/util/NlsString.java,164,ret.append("'");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,404,final Object literal = map.get("literal");
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,52,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,58,return Expressions.call(target, method, translatedOperands);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,316,List<RelNode> inputRels = input.set.getRelsFromAllSubsets();
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,105,if (!description.matches("[A-Za-z][-A-Za-z0-9_.():]*")) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,69,? "ConverterRule<in=" + in + ",out=" + out + ">"
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,83,materialization.queryRel =
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,84,sqlToRelConverter2.convertQuery(node, true, true).rel;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,476,assert queryDescendant.rowType.equals(targetDescendant.rowType);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,513,MutableRel parent = result.call.query.replaceInParent(result.result);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,524,: Pair.of(result.result, result.call.query);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,963,action.getConfig().getDefaultSchema() != null
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,974,action.getConfig().getContext(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,975,action.getConfig().getCostFactory());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,78,public abstract static class PrepareAction<R> {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,81,this.config = newConfigBuilder() //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,93,public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,94,SchemaPlus rootSchema, CalciteServerStatement statement);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,104,public static <R> R withPlanner(final PlannerAction<R> action, //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,106,return withPrepare(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,107,new Frameworks.PrepareAction<R>(config) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,108,public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,109,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,110,final CalciteSchema schema =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,111,CalciteSchema.from(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,112,Util.first(config.getDefaultSchema(), rootSchema));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,113,return action.apply(cluster, relOptSchema, schema.root().plus());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,137,public static <R> R withPrepare(PrepareAction<R> action) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,140,if (action.config.getTypeSystem() != RelDataTypeSystem.DEFAULT) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,142,action.config.getTypeSystem().getClass().getName());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,149,return new CalcitePrepareImpl().perform(statement, action);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,48,import org.apache.calcite.schema.SchemaPlus;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,49,import org.apache.calcite.server.CalciteServerStatement;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,166,final RelOptCluster[] clusters = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,167,final RelOptSchema[] relOptSchemas = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,168,Frameworks.withPrepare(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,169,new Frameworks.PrepareAction<Void>(config) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,170,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,171,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,172,clusters[0] = cluster;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,173,relOptSchemas[0] = relOptSchema;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,174,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,177,return new RelBuilder(config.getContext(), clusters[0], relOptSchemas[0]);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,557,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,217,RelNode createFilter(RelNode input, RexNode condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,225,public RelNode createFilter(RelNode input, RexNode condition) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,226,return LogicalFilter.create(input, condition);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,484,relBuilder.push(
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,485,filter.copy(filter.getTraitSet(), newInput, newConditionExpr));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,722,return filter(ImmutableList.copyOf(predicates));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1006,return call.result(call.query);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3265,final int right2 = rightCount + extraRightExprs.size();
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,25,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,87,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,194,if (RelOptUtil.classifyFilters(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3193,+ rightCount + extraRightExprs.size(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3194,0, 0, leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3195,leftCount, leftCount + extraLeftExprs.size(), rightCount);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1209,return values(frame.rel.getRowType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,39,public static final RelOptRule ENUMERABLE_SEMI_JOIN_RULE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,40,new EnumerableSemiJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,22,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,25,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,26,import org.apache.calcite.rel.InvalidRelException;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,27,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,31,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,32,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,34,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,43,EnumerableSemiJoin(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,44,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,45,RelTraitSet traits,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,46,RelNode left,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,47,RelNode right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,48,RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,49,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,51,throws InvalidRelException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,57,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,58,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,59,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,82,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,20,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,21,import org.apache.calcite.rel.convert.ConverterRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,24,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,25,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,30,class EnumerableSemiJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,31,EnumerableSemiJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,38,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,39,for (RelNode input : semiJoin.getInputs()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,40,if (!(input.getConvention() instanceof EnumerableConvention)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,41,input =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,42,convert(input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,43,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,45,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,335,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,336,return SemiJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,337,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,17,package org.apache.calcite.rel.core;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,21,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,22,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,23,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,25,import org.apache.calcite.rel.metadata.RelMdUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,26,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,27,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,29,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,30,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,31,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,33,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,34,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,43,public class SemiJoin extends EquiJoin {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,59,public SemiJoin(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,60,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,61,RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,62,RelNode left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,63,RelNode right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,64,RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,65,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,66,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,67,super(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,68,cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,69,traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,70,left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,71,right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,72,condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,73,leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,74,rightKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,76,JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,80,public static SemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,81,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,82,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,83,return new SemiJoin(cluster, cluster.traitSetOf(Convention.NONE), left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,84,right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,90,RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,91,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,92,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,93,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,94,return new SemiJoin(getCluster(), traitSet, left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,95,joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,99,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,101,return planner.getCostFactory().makeTinyCost();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,105,return Util.first(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,106,RelMdUtil.getSemiJoinRowCount(mq, left, right, joinType, condition),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,107,1D);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,118,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,119,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,120,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,121,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,122,null,
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,19,import org.apache.calcite.linq4j.CorrelateJoinType;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,82,public CorrelateJoinType toLinq4j() {
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,85,return CorrelateJoinType.INNER;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,87,return CorrelateJoinType.LEFT;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,89,return CorrelateJoinType.SEMI;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,91,return CorrelateJoinType.ANTI;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,200,return program.getCollations(mq.collations(input));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,91,.push(call.rel(3).getInput(0));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,54,private static final LoadingCache<Object, RelDataType> CACHE =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,338,return CACHE.getUnchecked(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3488,&& targetRowType.getFieldCount() >= i
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1381,permute(query, project.getInput(), mapping.inverse());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1382,final MutableRel result = unifyAggregates(aggregate2, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1383,return result == null ? null : call.result(result);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,915,RelNode aggregate = aggregateFactory.createAggregate(r,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,575,combinedMap.put(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,592,entry.getValue());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,100,info.leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,101,info.rightKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,19,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,20,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,21,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,23,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,28,import org.apache.calcite.rel.core.JoinInfo;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,33,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,35,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,39,public class EnumerableSemiJoin extends SemiJoin implements EnumerableRel {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,52,super(cluster, traits, left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,56,public static EnumerableSemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,66,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,71,RelNode left, RelNode right, JoinRelType joinType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,72,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,73,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,74,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,75,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,76,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,77,return new EnumerableSemiJoin(getCluster(), traitSet, left, right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,78,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,87,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,88,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,91,final double rightRowCount = right.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,92,final double leftRowCount = left.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,93,if (Double.isInfinite(leftRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,94,rowCount = leftRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,96,rowCount += Util.nLogN(leftRowCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,98,if (Double.isInfinite(rightRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,99,rowCount = rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,101,rowCount += rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,103,return planner.getCostFactory().makeCost(rowCount, 0, 0).multiplyBy(.01d);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,106,public Result implement(EnumerableRelImplementor implementor, Prefer pref) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,107,BlockBuilder builder = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,108,final Result leftResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,109,implementor.visitChild(this, 0, (EnumerableRel) left, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,110,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,111,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,113,final Result rightResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,114,implementor.visitChild(this, 1, (EnumerableRel) right, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,115,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,116,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,118,final PhysType physType = leftResult.physType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,119,return implementor.result(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,120,physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,121,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,122,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,123,BuiltInMethod.SEMI_JOIN.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,124,Expressions.list(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,125,leftExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,126,rightExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,127,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,129,.toBlock());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,47,return EnumerableSemiJoin.create(newInputs.get(0), newInputs.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,48,semiJoin.getCondition(), semiJoin.leftKeys, semiJoin.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,31,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,28,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,32,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,278,public Boolean areColumnsUnique(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,279,ImmutableBitSet columns, boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,282,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,27,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,152,public Double getDistinctRowCount(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,153,ImmutableBitSet groupKey, RexNode predicate) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,25,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,88,public Double getPopulationSize(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,89,ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,90,return mq.getPopulationSize(rel.getLeft(), groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,36,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,178,public Double getRowCount(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,181,RexNode semiJoinSelectivity =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,182,RelMdUtil.makeSemiJoinSelectivityRexNode(mq, rel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,184,return NumberUtil.multiply(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,185,mq.getSelectivity(rel.getLeft(), semiJoinSelectivity),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,186,mq.getRowCount(rel.getLeft()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,179,public List<Double> averageColumnSizes(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,26,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,203,public Set<ImmutableBitSet> getUniqueKeys(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,204,boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,207,return mq.getUniqueKeys(rel.getLeft(), ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,28,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,117,public static double computeSemiJoinSelectivity(RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,118,SemiJoin rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,119,return computeSemiJoinSelectivity(mq, rel.getLeft(), rel.getRight(),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,120,rel.getLeftKeys(), rel.getRightKeys());
core/src/main/java/org/apache/calcite/tools/Programs.java,115,EnumerableRules.ENUMERABLE_SEMI_JOIN_RULE,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,643,if (from.getKind() == SqlKind.VALUES) {
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,40,private static void unparseCube(SqlWriter writer, SqlCall call) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,457,final Schema schema = new CalciteConnectionImpl.RootSchema();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,79,super();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,188,DatabaseMetaData metaData = connection.getMetaData();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,189,resultSet = metaData.getTables(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,190,catalog,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,191,schema,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,192,null,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,193,null);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,196,while (resultSet.next()) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,197,final String tableName = resultSet.getString(3);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,198,final String catalogName = resultSet.getString(1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,199,final String schemaName = resultSet.getString(2);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,200,final String tableTypeName = resultSet.getString(4);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,211,tableTypeName == null
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,220,new JdbcTable(this, catalogName, schemaName, tableName, tableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,221,builder.put(tableName, table);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,543,return call(SqlStdOperatorTable.AS, expr, literal(alias));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,765,String digest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,766,HepRelVertex equivVertex = mapDigestToVertex.get(digest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,831,String oldDigest = vertex.getCurrentRel().toString();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,832,if (mapDigestToVertex.get(oldDigest) == vertex) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,833,mapDigestToVertex.remove(oldDigest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,908,Iterator<Map.Entry<String, HepRelVertex>> digestIter =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,79,if (newCalc.getDigest().equals(bottomCalc.getDigest())) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,191,return DatabaseProduct.DERBY;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,70,if (filter.isA(SqlKind.EQUALS)) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,69,static String isItem(RexCall call) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,132,final String name = isItem(call);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,139,return strings.get(0).startsWith("$") ? strings.get(0).substring(1) : strings.get(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,478,if (SqlUtil.isNullLiteral(left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,479,return cx.convertExpression(left);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,481,RexNode arg = cx.convertExpression(left);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,93,final RelDataType operandType = callBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,94,final SqlSingleOperandTypeChecker checker = getChecker(operandType);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,99,private SqlSingleOperandTypeChecker getChecker(RelDataType operandType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,112,throw new AssertionError(operandType.getSqlTypeName());
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,514,return Arrays.equals(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,518,return Arrays.hashCode(t);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,91,for (RelNode input : setOp.getInputs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,102,SetOp newSetOp =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,103,setOp.copy(setOp.getTraitSet(), newSetOpInputs);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,105,call.transformTo(newSetOp);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,444,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,560,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,231,return builder.build();
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,52,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,60,final RelNode input = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,61,if (!aggregate.getAggCallList().isEmpty() || aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,62,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,71,final RelNode newInput = convert(input, aggregate.getTraitSet().simplify());
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,172,return rexBuilder.makeExactLiteral(BigDecimal.ONE);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,174,return rexBuilder.makeCall(SqlStdOperatorTable.CASE, predicate,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,175,rexBuilder.makeExactLiteral(BigDecimal.ONE),
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,176,rexBuilder.makeExactLiteral(BigDecimal.ZERO));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,292,if (operand.ordinalInParent < inputs.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,296,successors = subset.set.subsets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,311,if (ascending) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,40,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,80,final List<RelNode> inputs = call.getChildRels(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,82,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,85,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,89,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,90,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,91,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,92,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,94,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,95,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,96,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,97,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,98,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,99,union.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,100,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,101,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,102,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,103,builder.push(LogicalUnion.create(newInputs, union.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,104,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,111,return node instanceof Values
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,112,&& ((Values) node).getTuples().isEmpty();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,71,private final JdbcSchema jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,72,private final String jdbcCatalogName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,73,private final String jdbcSchemaName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,74,private final String jdbcTableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,75,private final Schema.TableType jdbcTableType;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,78,String jdbcSchemaName, String tableName, Schema.TableType jdbcTableType) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,80,this.jdbcSchema = jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,83,this.jdbcTableName = tableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,142,SqlIdentifier tableName() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,143,final List<String> strings = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,145,strings.add(jdbcSchema.catalog);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,148,strings.add(jdbcSchema.schema);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,150,strings.add(jdbcTableName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,151,return new SqlIdentifier(strings, SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,135,RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,136,RelCollation collation, RexNode offset, RexNode fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,150,public RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,151,RelCollation collation, RexNode offset, RexNode fetch) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,152,return createSort(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,254,RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,256,boolean semiJoinDone);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,271,public RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,272,JoinRelType joinType, Set<String> variablesStopped,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,273,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,274,return createJoin(left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,275,CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,178,final SqlIdentifier identifier =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,179,new SqlIdentifier(e.getTable().getQualifiedName(), SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,47,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2268,assert nTotalFields == (joinRel instanceof SemiJoin
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2269,? nSysFields + nFieldsLeft
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2270,: nSysFields + nFieldsLeft + nFieldsRight);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,89,!corr.getJoinType().toJoinType().generatesNullsOnLeft(),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,90,!corr.getJoinType().toJoinType().generatesNullsOnRight(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2182,LogicalCorrelate corr = LogicalCorrelate.create(leftRel, p.r,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2183,p.id, p.requiredColumns, SemiJoinType.of(joinType));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,401,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,402,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,403,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,404,ImmutableList.of(0),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,405,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,406,0,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,407,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,408,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,409,extraName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,411,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,413,ImmutableBitSet.of(), null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,111,(SqlAggFunction) call.getOperator(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,112,call.getType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,113,clonedOperands,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,354,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,355,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,377,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,378,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,628,getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,629,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,631,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1024,return getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1025,type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1026,valueNullability);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,43,super("FILTER", SqlKind.FILTER, 2, true, ReturnTypes.ARG0_FORCE_NULLABLE,
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,148,if (call.getKind() == SqlKind.FILTER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,149,call.operand(0).accept(this);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,75,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,81,super(cluster, traits);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,21,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,43,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,44,sort.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,55,RelNode x = convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,56,input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,57,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,59,new EnumerableLimit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,60,sort.getCluster(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,61,traitSet,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,62,x,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,235,SortUnionTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,130,public NullDirection defaultNullDirection() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,451,checkRollup:
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,452,if (groupSets.size() == groupSet.cardinality() + 1) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,453,ImmutableBitSet g = groupSet;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,454,for (ImmutableBitSet bitSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,455,if (!bitSet.equals(g)) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,456,break checkRollup;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,458,g = g.clear(g.length() - 1);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,460,assert g.isEmpty();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,152,List<SqlNode> groupByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,154,for (int group : e.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,155,final SqlNode field = builder.context.field(group);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,156,addSelect(selectList, field, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,157,groupByList.add(field);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,274,builder = x.builder(e, Clause.FETCH);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,279,builder = x.builder(e, Clause.OFFSET);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,501,public RelFieldCollation.NullDirection defaultNullDirection(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,452,public RexNode call(SqlOperator operator, RexNode... operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,464,public RexNode call(SqlOperator operator,
core/src/main/java/org/apache/calcite/util/Bug.java,166,public static final boolean CALCITE_461_FIXED = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,90,static Class javaRowClass(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,91,JavaTypeFactory typeFactory, RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,92,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,93,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,95,final Type clazz = typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,96,return clazz instanceof Class ? (Class) clazz : Object[].class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,438,inputPhysType.convertTo(childExp, physType),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollect.java,60,Expressions.call(child_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,203,final RelDataType dummyType = this.rowType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,204,final Expression e3 =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,205,elementPhysType.convertTo(e2,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,206,PhysTypeImpl.of(typeFactory, dummyType, JavaRowFormat.LIST));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,53,import static org.apache.calcite.adapter.enumerable.EnumUtils.javaRowClass;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,75,fieldClasses.add(javaRowClass(typeFactory, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,240,final JavaRowFormat targetFormat = targetPhysType.getFormat();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,247,return Expressions.call(exp, BuiltInMethod.SELECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,248,generateSelector(o_, Util.range(fieldCount), targetFormat));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,168,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,169,return getJavaClass(type.getFieldList().get(0).getType());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1479,return list;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,680,if (id.names.size() == 1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,83,double rowCount = mq.getRowCount(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,84,double percentage = mq.getPercentageOriginalRows(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,103,double left = mq.getPercentageOriginalRows(rel.getLeft());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,104,double right = mq.getPercentageOriginalRows(rel.getRight());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,202,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,203,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,204,final Integer precision = (Integer) map.get("precision");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,205,final Integer scale = (Integer) map.get("scale");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,206,final RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,207,if (precision == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,208,type = typeFactory.createSqlType(sqlTypeName);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,210,type = typeFactory.createSqlType(sqlTypeName, precision);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,212,type = typeFactory.createSqlType(sqlTypeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,214,final boolean nullable = (Boolean) map.get("nullable");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,215,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,228,Object toJson(Object value) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,286,final Map<String, Object> map =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,287,(Map<String, Object>) toJson(node.getType());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,307,final Object value2 = literal.getValue2();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,308,if (value2 == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,312,map = jsonBuilder.map();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,313,map.put("literal", null);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,314,map.put("type", literal.getTypeName().name());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,315,return map;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,317,return value2;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,347,map.put("class", call.getOperator().getClass().getName());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,366,final Object jsonType = map.get("type");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,367,final SqlOperator operator = toOp(op, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,369,RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,370,if (jsonType != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,373,type = rexBuilder.deriveReturnType(operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,375,return rexBuilder.makeCall(type, operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,405,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,406,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,410,return toRex(relInput, literal);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,439,private SqlOperator toOp(String op, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,456,SqlAggFunction toAggregation(String agg, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,457,return (SqlAggFunction) toOp(agg, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,77,Map<String, Object> o = mapper.readValue(s, TYPE_REF);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,168,inputs.add(toAggCall(jsonAggCall));
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,270,private AggregateCall toAggCall(Map<String, Object> jsonAggCall) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,273,relJson.toAggregation(aggName, jsonAggCall);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,40,private final JsonBuilder jsonBuilder;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,41,private final RelJson relJson;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,44,private final List<Object> relList;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,60,static final SqlPostfixOperator FOLLOWING_OPERATOR =
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,67,static final SqlPostfixOperator PRECEDING_OPERATOR =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,63,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,545,if (nodeList.size() == 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,546,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,548,final List<SqlNode> butLast = Util.skipLast(nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,549,final SqlNode last = nodeList.get(nodeList.size() - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,550,final SqlNode call = createLeftCall(op, butLast);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,551,return op.createCall(new SqlNodeList(ImmutableList.of(call, last), POS));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,227,Lists.transform(type.getFieldList(),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,233,type.getFieldNames());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,235,if (type instanceof JavaType) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,238,type.isNullable());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,240,return type;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,295,if (type instanceof RelRecordType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,296,return copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,298,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,299,type,
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,300,type.isNullable());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,316,if (nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,319,newType = copyRecordType((RelRecordType) type, false, true);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,323,newType = copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,351,final List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,49,return false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,439,+ "] could not be implemented; planner state:\n");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,246,private String originalRootString;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,264,private final Deque<VolcanoRuleCall> ruleCallStack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,335,this.originalRootString =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,336,RelOptUtil.toString(root, SqlExplainLevel.ALL_ATTRIBUTES);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1364,pw.println(originalRootString);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1365,pw.println("Sets:");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1421,pw.println();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1962,ruleCallStack.push(ruleCall);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1964,ruleCallStack.pop();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,213,getRule().onMatch(this);
core/src/main/java/org/apache/calcite/tools/Programs.java,265,return hep(
core/src/main/java/org/apache/calcite/tools/Programs.java,266,ImmutableList.of((RelOptRule) SubQueryRemoveRule.FILTER,
core/src/main/java/org/apache/calcite/tools/Programs.java,267,SubQueryRemoveRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,268,SubQueryRemoveRule.JOIN), true, metadataProvider);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,67,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,181,private final Map<Pair<String, RelDataType>, RelNode> mapDigestToRel =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1425,private static Pair<String, RelDataType> key(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1426,return Pair.of(rel.getDigest(), rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1441,final Pair<String, RelDataType> oldKey =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1442,Pair.of(oldDigest, rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1443,final RelNode removed = mapDigestToRel.remove(oldKey);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1447,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1448,final RelNode equivRel = mapDigestToRel.put(key, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1456,mapDigestToRel.put(key, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1501,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1502,RelNode equivRel = mapDigestToRel.get(key);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1709,Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1747,key = key(rel);
core/src/main/java/org/apache/calcite/rel/core/Values.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/core/Values.java,177,.itemIf("tuples", tuples, pw.nest());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,973,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,974,new NlsString(s, null, null),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,975,typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,976,SqlTypeName.CHAR,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,977,s.length()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,978,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexCall.java,80,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,81,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,82,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,179,this.digest = toJavaString(value, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,255,SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,257,return "null";
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,261,printAsJava(value, pw, typeName, false);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,302,printAsJava(value, pw, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,327,boolean java) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,401,return list.get(index).digest;
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,201,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,202,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,203,Coercibility.COERCIBLE);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,205,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,206,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,207,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,211,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,212,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,213,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,220,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,221,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,222,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,225,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,226,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,227,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,233,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,234,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,235,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,246,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,247,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,248,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,257,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,258,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,259,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,262,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,263,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,264,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,84,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,85,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,86,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,85,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,86,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,87,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,202,if (wrappedCharset != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,207,if (collation != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,112,public static Enumerable<Object> of(DataSource dataSource, String sql) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,118,public static Enumerable<Object> of(DataSource dataSource, String sql,
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,125,public static <T> Enumerable<T> of(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,106,columns = getKeyspace().getMaterializedView(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,108,columns = getKeyspace().getTable(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,153,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,155,table = getKeyspace().getTable(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,181,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,183,table = getKeyspace().getTable(columnFamily);
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,105,TIME_ZONE("timeZone", Type.STRING, null, false),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,316,+ "\nexpression is " + newRel.toString();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,128,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,129,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,130,final Join join = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,131,final RexBuilder rexBuilder = aggregate.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,132,final RelBuilder relBuilder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,139,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,141,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,142,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,148,if (join.getJoinType() != JoinRelType.INNER) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,149,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,152,if (!allowFunctions && !aggregate.getAggCallList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,153,return;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,63,filter.getCondition());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,351,assert tempDigest != null : "post: return != null";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,352,String prefix = "rel#" + id + ":";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,356,this.desc = prefix + tempDigest;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,357,this.digest = this.desc.substring(prefix.length());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,409,pw.write(value.left + "=" + value.right);
core/src/main/java/org/apache/calcite/runtime/CalciteException.java,61,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorException.java,59,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,420,inferUnknownTypes(targetType, scope, expanded);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1573,RelDataType inferredType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1574,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1575,SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1652,if (operandTypeInference == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1655,Arrays.fill(operandTypes, unknownType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,434,case INPUT_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,439,if (nullAs == RexImpTable.NullAs.NOT_POSSIBLE
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,440,&& input.type.equals(storageType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,443,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,490,case FIELD_ACCESS:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,883,long l = bd.unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,886,assert BigDecimal.valueOf(l, scale).equals(bd);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,888,if ((l >= Integer.MIN_VALUE) && (l <= Integer.MAX_VALUE)) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,68,return def.canonizeComposite(compositeTrait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,106,RelCompositeTrait<T> canonize(RelTraitDef<T> traitDef) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,107,T[] newTraits = null;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,108,for (int i = 0; i < traits.length; i++) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,109,final T trait = traits[i];
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,110,final T trait2 = traitDef.canonize(trait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,111,if (trait2 != trait) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,112,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,113,newTraits = traits.clone();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,115,newTraits[i] = trait2;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,118,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,119,return this;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,121,assert false;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,22,import com.google.common.cache.CacheBuilder;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,23,import com.google.common.cache.CacheLoader;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,24,import com.google.common.cache.LoadingCache;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,27,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,59,private final LoadingCache<T, T> canonicalMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,76,private final LoadingCache<Object, RelCompositeTrait> canonicalCompositeMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,79,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,80,new CacheLoader<Object, RelCompositeTrait>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,82,if (key instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,83,return (RelCompositeTrait) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,86,final List<RelMultipleTrait> list =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,87,(List<RelMultipleTrait>) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,88,final RelTraitDef def = list.get(0).getTraitDef();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,89,return (RelCompositeTrait) RelCompositeTrait.of(def, list);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,134,if (trait instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,135,RelCompositeTrait relCompositeTrait = (RelCompositeTrait) trait;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,136,return (T) canonizeComposite(relCompositeTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,140,+ " cannot canonize a "
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,141,+ trait.getClass().getName();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,143,return canonicalMap.getUnchecked(trait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,146,final RelCompositeTrait canonizeComposite(RelCompositeTrait compositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,147,return canonicalCompositeMap.getUnchecked(compositeTrait);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1403,final Map<String, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1405,map.put(e.toString(), map.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1409,final Integer integer = map.get(ref.getName());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1417,final Integer integer = map.get(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,60,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,315,RelOptPredicateList info = mq.getPulledUpPredicates(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,397,final Map<String, ImmutableBitSet> exprFields;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,399,final Set<String> equalityPredicates;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,426,if (lPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,431,leftChildPredicates = lPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,435,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,439,if (rPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,445,rightChildPredicates = rPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,449,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,469,new ArrayList<>(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,576,private void infer(RexNode predicates, Set<String> allExprsDigests,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,581,&& equalityPredicates.contains(r.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,610,private void equivalent(int p1, int p2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,640,JoinConditionBasedPredicateInference.this.equivalent(lPos, rPos);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,641,JoinConditionBasedPredicateInference.this.equalityPredicates
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,642,.add(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,51,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,436,final List<RexNode> unionList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,437,final Set<String> strings = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,439,for (RexNode rex : RelOptUtil.conjunctions(pred1)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,440,if (strings.add(rex.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,441,unionList.add(rex);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,444,for (RexNode rex2 : RelOptUtil.conjunctions(pred2)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,445,if (strings.add(rex2.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,446,unionList.add(rex2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,466,final List<RexNode> list1 = RelOptUtil.conjunctions(pred1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,467,final List<RexNode> list2 = RelOptUtil.conjunctions(pred2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,468,final List<RexNode> minusList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,470,for (RexNode rex1 : list1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,471,boolean add = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,472,for (RexNode rex2 : list2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,473,if (rex2.toString().compareTo(rex1.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,474,add = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,475,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,478,if (add) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,479,minusList.add(rex1);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,64,if (join.getCondition().toString().equals(newCondition.toString())) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,617,addExpr(preserveLeft, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,621,addExpr(preserveRight, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,645,private void addExpr(List<RexNode> exprList, RexNode newExpr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,646,String newExprString = newExpr.toString();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,647,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,648,if (newExprString.compareTo(expr.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,649,return;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,652,exprList.add(newExpr);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,721,int match = findExprInList(rex, rexList1);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,727,match = findExprInList(rex, rexList2);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,736,private int findExprInList(RexNode rex, List<RexNode> rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,737,int match = 0;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,738,for (RexNode rexElement : rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,739,if (rexElement.toString().compareTo(rex.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,740,return match;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,742,match++;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,744,return -1;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,122,private final Map<Pair<String, String>, RexNode> irreducible;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,123,private final Map<Pair<String, String>, RexNode> results;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,173,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,185,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,361,return RexUtil.eq(subQuery, this.subQuery) ? replacement : subQuery;
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,109,if (RexUtil.eq(node, seek)) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,72,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,73,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexCall.java,84,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexCall.java,85,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexCall.java,99,public String toString() {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,45,private final Map<Pair<String, String>, RexLocalRef> exprMap =
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,323,final Pair<String, String> key;
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,93,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,96,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,725,public static Pair<String, String> makeKey(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,726,return Pair.of(expr.toString(), expr.getType().getFullTypeString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1318,if (eq(next, e)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1887,final Map<String, RexNode> mapDigestToExpr = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1896,final String key = expr.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1897,final RexNode previous = mapDigestToExpr.put(key, expr);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1905,return mapDigestToExpr.get(expr.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2111,final Map<String, RexNode> factors = commonFactors(operands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2141,private Map<String, RexNode> commonFactors(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2147,map.put(conjunction.toString(), conjunction);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2150,map.keySet().retainAll(strings(RelOptUtil.conjunctions(node)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2156,private RexNode removeFactor(Map<String, RexNode> factors, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2159,if (!factors.containsKey(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexVariable.java,35,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,36,assert name != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,37,this.name = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,38,this.digest = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,39,this.type = type;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,732,int x = findExpr(projectExprs.get(i), projectExprs, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,733,if (x >= 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,797,private int findExpr(RexNode seek, List<RexNode> exprs, int count) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,798,for (int i = 0; i < count; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,799,RexNode expr = exprs.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,800,if (expr.toString().equals(seek.toString())) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,801,return i;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,804,return -1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4674,if (expr.toString().equals(convertedInputExpr.toString())) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1866,SqlOperator nullOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1867,SqlOperator eqOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1869,nullOp = SqlStdOperatorTable.IS_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1870,eqOp = SqlStdOperatorTable.EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1872,nullOp = SqlStdOperatorTable.IS_NOT_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1873,eqOp = SqlStdOperatorTable.NOT_EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1875,RexNode[] whenThenElse = {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1877,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1880,rexBuilder.makeCall(nullOp, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1883,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1886,rexBuilder.makeCall(nullOp, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1891,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1892,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1893,whenThenElse);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2591,(List) rel.getInputs());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,839,if (node != call) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,91,String sql = generateSql(jdbcConvention.dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,153,final Expression enumerable =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,154,builder0.append(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,156,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,157,BuiltInMethod.RESULT_SET_ENUMERABLE_OF.method,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,158,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,159,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,160,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,161,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,162,sql_,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,163,rowBuilderFactory_));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,294,private String generateSql(SqlDialect dialect) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,890,return null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,105,Function1<ResultSet, Function0<T>> rowBuilderFactory) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,138,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,139,statement.setQueryTimeout(10);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,141,LOGGER.debug("Failed to set query timeout.");
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,148,throw new RuntimeException("while executing SQL [" + sql + "]", e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,150,if (statement != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,151,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,152,statement.close();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,157,if (connection != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,158,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,159,connection.close();
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,64,writer.print("?");
core/src/main/java/org/apache/calcite/sql/SqlNode.java,150,final String sql = writer.toString();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,151,return new SqlString(dialect, sql);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,23,import org.apache.calcite.sql.util.SqlBuilder;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,810,return new SqlBuilder(dialect, toString()).toSqlString();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,31,private final String s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,39,public SqlString(SqlDialect dialect, String s) {
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,41,this.s = s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,42,assert s != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,43,assert dialect != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,47,return s.hashCode();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,53,&& s.equals(((SqlString) obj).s);
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,65,return s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,74,return s;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,100,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,101,call.getType(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,102,call.getOperator(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,103,clonedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,258,if (accPhysType.getJavaRowType() instanceof JavaTypeFactoryImpl.SyntheticRecordType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,261,JavaTypeFactoryImpl.SyntheticRecordType synType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,263,final ParameterExpression record0_ =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,265,initBlock.add(Expressions.declare(0, record0_, null));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,266,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,271,List<Types.RecordField> fieldList = synType.getRecordFields();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,272,for (int i = 0; i < initExpressions.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,273,Expression right = initExpressions.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,274,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,282,initBlock.add(record0_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,284,initBlock.add(accPhysType.record(initExpressions));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,288,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,302,final BlockBuilder builder2 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,350,builder2.add(acc_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,351,final Expression accumulatorAdder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,352,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,354,Expressions.lambda(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,355,Function2.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,356,builder2.toBlock(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,357,acc_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,358,inParameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,408,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,409,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,428,Expressions.call(accumulatorInitializer, "apply"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,429,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,430,resultSelector))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,459,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,460,accumulatorAdder,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,706,AggregateCall.create(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,72,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1282,private static List<AggregateCall> apply(final Mapping mapping,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1283,List<AggregateCall> aggCallList) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1284,return Lists.transform(aggCallList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1339,aggregateCall.type, aggregateCall.name));
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,82,private AggregateCall(
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,83,SqlAggFunction aggFunction,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,84,boolean distinct,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,85,List<Integer> argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,86,int filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,87,RelDataType type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,88,String name) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,224,&& filterArg == other.filterArg;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,228,return Objects.hash(aggFunction, distinct, argList, filterArg);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,252,public AggregateCall copy(List<Integer> args, int filterArg) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,259,return copy(args, filterArg);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,281,filterOperand == null ? -1 : filterOperand, type, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,905,orderByList.add(context.toSql(field));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,524,newFilterArg, aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,77,for (int key : aggregate.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,78,final RexNode rex = project.getProjects().get(key);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,79,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,80,final int newKey = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,81,newKeys.add(newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,82,map.put(key, newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,100,final ImmutableList.Builder<Integer> newArgs = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,101,for (int arg : aggregateCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,102,final RexNode rex = project.getProjects().get(arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,103,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,104,newArgs.add(((RexInputRef) rex).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,107,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,110,final int newFilterArg;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,111,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,112,final RexNode rex = project.getProjects().get(aggregateCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,113,if (!(rex instanceof RexInputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,114,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,116,newFilterArg = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,118,newFilterArg = -1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,120,aggCalls.add(aggregateCall.copy(newArgs.build(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,173,ImmutableList.of(groupCount + ord.i), -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,174,aggType, origCall.getName());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,299,aggCall = aggCall.copy(nullableArgs, aggCall.filterArg);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,51,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,65,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,108,validator.validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,71,SqlCall aggCall = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,77,validator.validateAggregateParams(aggCall, condition, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,94,SqlNode agg = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,96,if (!(agg instanceof SqlCall)) {
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,97,throw new IllegalStateException("Argument to SqlOverOperator"
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,98,+ " should be SqlCall, got " + agg.getClass() + ": " + agg);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,101,final SqlCall aggCall = (SqlCall) agg;
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,31,true);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,119,ImmutableIntList.of(), -1,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,148,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,149,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,208,return aggregateCall.copy(ImmutableIntList.of(arg), -1);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,261,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,262,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,49,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlFirstLastValueAggFunction.java,51,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlHistogramAggFunction.java,56,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,85,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,79,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,40,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlSingleValueAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1592,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1604,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlSumAggFunction.java,57,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,294,SqlValidatorScope scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4082,validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,789,for (int i : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,790,inputFieldsUsed.set(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4302,&& (op.isAggregator() || op.getKind() == SqlKind.FILTER)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4556,translateAgg((SqlCall) call.operand(0), call.operand(1), call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4582,translateAgg(call, null, call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4597,private void translateAgg(SqlCall call, SqlNode filter, SqlCall outerCall) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,904,filterArg, groupSet.cardinality(), r, null, aggCall1.alias);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,866,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,629,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,635,if (filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,636,if (filter.getType().getSqlTypeName() != SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,639,if (filter.getType().isNullable()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,640,filter = call(SqlStdOperatorTable.IS_TRUE, filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,644,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,661,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1506,private static class AggCallImpl implements AggCall {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1509,private final RexNode filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1510,private final String alias;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1511,private final ImmutableList<RexNode> operands;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1514,String alias, ImmutableList<RexNode> operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1515,this.aggFunction = aggFunction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1517,this.filter = filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1519,this.operands = operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,101,Expression selector =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,102,EnumUtils.joinSelector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,104,: JoinRelType.INNER, physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,105,ImmutableList.of(leftResult.physType, rightResult.physType));
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,639,assert table != null;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,105,starRelOptTable.toRel(RelOptUtil.getContext(cluster));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,23,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2682,public static RelOptTable.ToRelContext getContext(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2683,final RelOptCluster cluster) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2684,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2685,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2686,return cluster;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2689,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2691,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,31,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,52,class LixToRelTranslator implements RelOptTable.ToRelContext {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,63,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,64,return cluster;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,67,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,58,public class PlannerImpl implements Planner {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,222,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,239,SqlParser parser = SqlParser.create(queryString, parserConfig);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,240,SqlNode sqlNode;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,241,try {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,242,sqlNode = parser.parseQuery();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,244,throw new RuntimeException("parse failed", e);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,247,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,248,final CalciteCatalogReader catalogReader =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,249,createCatalogReader().withSchemaPath(schemaPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,250,final SqlValidator validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,251,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,252,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,253,validator.setIdentifierExpansion(true);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,256,final RexBuilder rexBuilder = createRexBuilder();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,257,final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,258,final SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,259,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,266,root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,269,return PlannerImpl.this.root;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,371,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,373,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,102,return ((TranslatableTable) table).toRel(translator, relOptTable);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,28,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,130,relBuilder.push(aggregateRelOptTable.toRel(RelOptUtil.getContext(cluster)));
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,283,RelOptUtil.getContext(factRel.getCluster()));
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,22,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,48,RelOptUtil.getContext(oldRel.getCluster()));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,123,private RelRoot expandView(RelOptTable.ToRelContext preparingStmt,
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,128,root = root.withRel(RelOptUtil.createCastRel(root.rel, rowType, true));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,129,return root;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,103,import java.util.ArrayDeque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,107,import java.util.Deque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2470,final Deque<RelNode> stack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3042,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3043,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3044,return cluster;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,605,SqlOperator op = aggCall.getAggregation();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,606,if (op instanceof SqlSumEmptyIsZeroAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,607,op = SqlStdOperatorTable.SUM;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,609,final List<SqlNode> operands = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,611,operands.add(field(arg));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,613,return op.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,614,aggCall.isDistinct() ? SqlSelectKeyword.DISTINCT.symbol(POS) : null,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,879,if (s.equals("(")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,880,throw new RuntimeException("Use 'startList'");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,882,if (s.equals(")")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,883,throw new RuntimeException("Use 'endList'");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,610,if (groupSets == null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,611,groupSets = ImmutableList.of(groupSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,616,Lists.transform(groupSets,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,622,return groupKey(nodes, indicator, nodeLists);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,89,public final ImmutableList<Node> nodes;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,97,public final ImmutableList<String> uniqueColumnNames;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,114,private Lattice(CalciteSchema rootSchema, ImmutableList<Node> nodes,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,131,for (int i = 0; i < nodes.size(); i++) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,132,Node node = nodes.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,133,if (i == 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,134,assert node.parent == null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,136,assert nodes.subList(0, i).contains(node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,144,uniqueColumnNames =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,145,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,162,String current) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,306,for (Node node : usedNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,307,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,310,dialect.quoteIdentifier(buf, node.scan.getTable().getQualifiedName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,313,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,316,for (IntPair pair : node.link) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,320,final Column left = columns.get(node.parent.startCol + pair.source);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,321,dialect.quoteIdentifier(buf, left.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,324,dialect.quoteIdentifier(buf, right.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,344,private static void use(List<Node> usedNodes, Node node) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,345,if (!usedNodes.contains(node)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,346,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,347,use(usedNodes, node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,349,usedNodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,355,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,356,tables.add(node.scan.getTable().unwrap(Table.class));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,362,return new Builder(calciteSchema, sql);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,415,public static class Node {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,416,public final TableScan scan;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,417,public final Node parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,418,public final ImmutableList<IntPair> link;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,419,public final int startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,420,public final int endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,421,public final String alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,423,public Node(TableScan scan, Node parent, List<IntPair> link,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,424,int startCol, int endCol, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,426,this.parent = parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,427,this.link = link == null ? null : ImmutableList.copyOf(link);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,428,assert (parent == null) == (link == null);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,429,assert startCol >= 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,430,assert endCol > startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,431,this.startCol = startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,432,this.endCol = endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,433,this.alias = alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,439,public static final DirectedGraph.EdgeFactory<RelNode, Edge> FACTORY =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,452,public RelNode getTarget() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,453,return (RelNode) target;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,456,public RelNode getSource() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,457,return (RelNode) source;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,466,public Measure(SqlAggFunction agg, Iterable<Column> args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,471,public int compareTo(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,472,int c = agg.getName().compareTo(measure.agg.getName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,473,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,474,return c;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,476,return compare(args, measure.args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,480,return "Measure: [agg: " + agg + ", args: " + args + "]";
core/src/main/java/org/apache/calcite/materialize/Lattice.java,491,&& this.args.equals(((Measure) obj).args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,525,public static class Column implements Comparable<Column> {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,527,public final String table;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,528,public final String column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,531,private Column(int ordinal, String table, String column, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,564,private final ImmutableList<Column> columns;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,566,private final ImmutableList.Builder<Measure> defaultMeasureListBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,567,ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,577,public Builder(CalciteSchema schema, String sql) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,594,final DirectedGraph<RelNode, Edge> graph =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,596,for (RelNode node : relNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,597,graph.addVertex(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,600,final RelNode source = relNodes.get(tempLink[0][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,601,final RelNode target = relNodes.get(tempLink[1][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,611,Node previous = null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,613,int previousColumn = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,614,for (RelNode relNode : TopologicalOrderIterator.of(graph)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,615,final List<Edge> edges = graph.getInwardEdges(relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,616,Node node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,617,final int column = previousColumn
core/src/main/java/org/apache/calcite/materialize/Lattice.java,618,+ relNode.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,619,if (previous == null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,622,+ relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,624,node = new Node((TableScan) relNode, null, null,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,625,previousColumn, column, aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,632,node = new Node((TableScan) relNode,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,633,map.get(edge.getSource()), edge.pairs, previousColumn, column,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,634,aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,636,nodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,637,map.put(relNode, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,638,previous = node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,639,previousColumn = column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,642,final ImmutableList.Builder<Column> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,643,final ImmutableListMultimap.Builder<String, Column> aliasBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,644,ImmutableListMultimap.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,645,int c = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,646,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,647,if (node.scan != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,648,for (String name : node.scan.getRowType().getFieldNames()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,649,final Column column = new Column(c++, node.alias, name, name);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,650,builder.add(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,651,aliasBuilder.put(column.alias, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,655,columns = builder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,656,columnsByAlias = aliasBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,699,return new Lattice(rootSchema, ImmutableList.copyOf(nodes), auto,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,701,columns, defaultMeasureListBuilder.build(), tileListBuilder.build());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,708,public ImmutableList<Column> resolveArgs(Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,774,for (Column column1 : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,784,public Measure resolveMeasure(String aggName, Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,787,return new Measure(agg, list);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,801,public void addMeasure(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,802,defaultMeasureListBuilder.add(measure);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,407,latticeBuilder.resolveMeasure(jsonMeasure.agg, jsonMeasure.args);
core/src/main/java/org/apache/calcite/plan/RelOptLattice.java,43,return lattice.nodes.get(0).scan.getTable();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,69,private HepProgram mainProgram;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,77,private Map<String, HepRelVertex> mapDigestToVertex;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,79,private final Set<RelOptRule> allRules;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,87,private boolean noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,94,private DirectedGraph<HepRelVertex, DefaultEdge> graph;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,129,boolean noDAG,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,134,this.onCopyHook =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,136,mapDigestToVertex = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,137,graph = DefaultDirectedGraph.create();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,141,allRules = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,142,this.noDAG = noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,763,if (!noDAG) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,422,public abstract class Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,426,protected Context(int fieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,427,this(fieldCount, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,430,protected Context(int fieldCount, boolean ignoreCast) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,655,return new AliasContext(aliases, qualified);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,659,return new JoinContext(leftContext, rightContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,664,public class AliasContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,670,boolean qualified) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,671,super(computeFieldCount(aliases));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,700,class JoinContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,705,private JoinContext(Context leftContext, Context rightContext) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,706,super(leftContext.fieldCount + rightContext.fieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,779,newContext = new Context(selectList.size()) {
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,92,return typeFactory.createStructType(typeList, lattice.uniqueColumnNames);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,174,private SqlRexConvertletTable convertletTable =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,175,StandardConvertletTable.INSTANCE;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,176,private SqlOperatorTable operatorTable = SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,177,private ImmutableList<Program> programs = ImmutableList.of();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,180,private SqlParser.Config parserConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,181,SqlParser.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,185,private RelDataTypeSystem typeSystem = RelDataTypeSystem.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,187,private ConfigBuilder() {}
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,38,final Map<V, VertexInfo<V, E>> vertexMap =
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,57,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,63,.append(")");
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,64,return buf.toString();
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,27,this.source = source;
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,28,this.target = target;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,959,if (constants.containsKey(inputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,960,stack.add(Constancy.REDUCIBLE_CONSTANT);
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,36,String s = left.toString();
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,40,s += " DESC";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,43,s += " NULLS FIRST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,46,s += " NULLS LAST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,52,return s;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,494,if (!(target instanceof RexCorrelVariable)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,495,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,498,if (correlates == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,499,throw new RuntimeException("Cannot translate " + expr + " since "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,500,+ "correlate variables resolver is not defined");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,502,InputGetter getter =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,503,correlates.apply(((RexCorrelVariable) target).getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,504,return getter.field(list, fieldAccess.getField().getIndex(), storageType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,777,RexCall cast = (RexCall) refExp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,778,refExp = cast.getOperands().get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,780,if (refExp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,781,return ((RexCall) refExp).operands
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,782,.get(fieldAccess.getField().getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,784,if (!(refExp instanceof RexFieldAccess)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,787,fieldAccess = (RexFieldAccess) refExp;
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,368,METADATA_REL(Metadata.class, "rel");
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,32,super(left, ImmutableSet.copyOf(right));
core/src/main/java/org/apache/calcite/rex/RexCall.java,125,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexCall.java,126,case NOT:
core/src/main/java/org/apache/calcite/rex/RexCall.java,127,return operands.get(0).isAlwaysFalse();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1395,assert !generateNullsOnLeft : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1396,assert !generateNullsOnRight : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3272,assert c < 0 : "not sorted";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3288,assert c < 0 : "not sorted";
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,169,implementor.allCorrelateVariables);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,85,(JavaTypeFactory) getCluster().getTypeFactory(), bb, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableThetaJoin.java,183,implementor.allCorrelateVariables)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,275,inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,424,getBlockBuilderWinAggFrameResultContextFunction(typeFactory, result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,425,translatedConstants, comparator_, rows_, i_, startX, endX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,426,minX, maxX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,524,final JavaTypeFactory typeFactory, final Result result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,525,final List<Expression> translatedConstants,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1458,translatedOperands.get(2));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,110,private RexToLixTranslator(RexProgram program, JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,111,Expression root, InputGetter inputGetter, BlockBuilder list) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,112,this(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,114,new RexBuilder(typeFactory));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,117,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,118,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,119,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,120,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,121,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,122,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,123,Map<RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,124,RexBuilder builder) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,125,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,126,builder, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,129,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,130,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,131,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,132,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,133,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,134,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,135,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,136,RexBuilder builder,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,137,RexToLixTranslator parent) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,138,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,139,builder, parent, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,142,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,143,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,152,this.program = program;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,153,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,154,this.root = root;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,156,this.list = list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,157,this.exprNullableMap = exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,158,this.builder = builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,159,this.parent = parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,160,this.correlates = correlates;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,178,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,179,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,180,PhysType outputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,181,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,182,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,183,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,199,BlockBuilder list, InputGetter inputGetter) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,201,return new RexToLixTranslator(null, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,714,public static Expression translateCondition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,715,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,716,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,717,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,718,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,719,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,725,new RexToLixTranslator(program, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,994,nullable, builder, this, correlates);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,102,RexToLixTranslator.translateProjects(program, javaTypeFactory, builder,
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,103,null, root, inputGetter, correlates);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,81,RexToLixTranslator.translateProjects(programBuilder.getProgram(),
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,82,javaTypeFactory, blockBuilder, null, root_, getter, null);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,190,return trim_(s, false, true, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,195,return trim_(s, true, false, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,199,public static String trim(boolean leading, boolean trailing, String seek,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,201,return trim_(s, leading, trailing, seek.charAt(0));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,205,private static String trim_(String s, boolean left, boolean right, char c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,212,if (s.charAt(j - 1) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,224,if (s.charAt(i) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1017,s = trim_(s, true, true, ' ');
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,261,String.class),
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,348,null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,53,this(method.getGenericReturnType(), method, targetExpression, expressions);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,788,RelDataType int8Type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,789,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,790,final RexNode[] casts = new RexNode[2];
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,791,casts[0] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,792,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,793,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,794,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,795,exprs.get(0).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,796,exprs.get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,797,casts[1] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,798,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,799,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,800,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,801,exprs.get(1).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,802,exprs.get(1));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,117,public static String substring(String s, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,118,return s.substring(from - 1, Math.min(from - 1 + for_, s.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,122,public static String substring(String s, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,123,return s.substring(from - 1);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,86,for (String opfield : implementor.list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,88,implementor.list.remove(opfield);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,47,public void add(String findOp) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,51,public void visitChild(int ordinal, RelNode input) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,148,+ "is not supported by ElasticsearchProject");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,31,import org.apache.calcite.util.Util;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,33,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,59,if (!collation.getFieldCollations().isEmpty()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,60,final List<String> keys = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,68,implementor.add("\"sort\": [ " + Util.toString(keys, "{", "}, {", "}") + "]");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,72,implementor.add("\"from\": " + ((RexLiteral) offset).getValue());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,76,implementor.add("\"size\": " + ((RexLiteral) fetch).getValue());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,80,private String direction(RelFieldCollation fieldCollation) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,81,switch (fieldCollation.getDirection()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,82,case DESCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,83,case STRICTLY_DESCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,84,return "\"desc\"";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,85,case ASCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,86,case STRICTLY_ASCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,87,default:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,88,return "\"asc\"";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,34,import org.apache.calcite.prepare.CalcitePrepareImpl;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,39,import org.apache.calcite.runtime.Hook;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,68,final BlockBuilder list = new BlockBuilder();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,69,final ElasticsearchRel.Implementor elasticsearchImplementor =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,70,new ElasticsearchRel.Implementor();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,71,elasticsearchImplementor.visitChild(0, getInput());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,73,final PhysType physType = PhysTypeImpl.of(implementor.getTypeFactory(), rowType,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,75,final Expression fields = list.append("fields",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,88,final Expression table = list.append("table",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,89,elasticsearchImplementor.table
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,91,List<String> opList = elasticsearchImplementor.list;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,92,final Expression ops = list.append("ops", constantArrayList(opList, String.class));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,93,Expression enumerable = list.append("enumerable",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,95,fields));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,96,if (CalcitePrepareImpl.DEBUG) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,97,System.out.println("Elasticsearch: " + opList);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,99,Hook.QUERY_PLAN.run(opList);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,100,list.add(Expressions.return_(null, enumerable));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,101,return implementor.result(physType, list.toBlock());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,85,StringBuilder out, CharSequence ... args) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,110,try (final JsonParser parser = factory.createParser(in)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,216,String bigString = new String(chars);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,219,add(bigString.substring(0, i * 2));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,895,if ((sqlNode instanceof SqlCall) && containsInOperator(sqlNode)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,896,SqlCall sqlCall = (SqlCall) sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,898,|| (sqlCall.getOperator() == SqlStdOperatorTable.OR)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,899,SqlNode[] sqlOperands = ((SqlBasicCall) sqlCall).operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,900,for (int i = 0; i < sqlOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,905,SqlNode childNode = sqlCall.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,906,assert childNode instanceof SqlCall;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,907,SqlBasicCall childSqlCall = (SqlBasicCall) childNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,908,if (childSqlCall.getOperator() == SqlStdOperatorTable.AND) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,909,SqlNode[] andOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,910,SqlNode[] orOperands = new SqlNode[andOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,911,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,917,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,923,SqlNode[] orOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,924,SqlNode[] andOperands = new SqlNode[orOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,925,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,931,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,937,SqlNode[] notOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,938,assert notOperands.length == 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,941,SqlNode[] inOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,942,SqlInOperator inOp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,943,(SqlInOperator) childSqlCall.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,958,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,963,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,967,return sqlNode;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,417,return al;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,182,case RPAREN:
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,183,iter.previous();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,184,return;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,187,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,571,purgeSelectExprsKeepAliases();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,37,UNION, INTERSECT, EXCEPT,
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,335,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,415,return new SqlAdvisor(validator);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,144,final List<SqlMoniker> result;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,145,if (word.length() > 0) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,146,result = new ArrayList<SqlMoniker>();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,147,if (quoted) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,149,word = word.substring(1);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,150,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,151,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,152,if (cname.startsWith(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,153,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,158,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,159,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,161,&& cname.substring(0, word.length()).equalsIgnoreCase(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,162,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,167,result = completionHints;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,218,if (hintList.contains(star) && !isSelectListItem(sqlNode, pos)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,239,final SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,108,&& (sql.charAt(wordStart - 1) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,126,&& (sql.charAt(wordEnd) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,333,SqlSimpleParser simpleParser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,400,SqlSimpleParser parser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,429,SqlParser parser = SqlParser.create("");
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,443,SqlParser parser = SqlParser.create(sql);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,133,Tokenizer tokenizer = new Tokenizer(sql, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,277,case '"':
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,280,start = pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,281,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,282,while (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,283,c = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,284,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,285,if (c == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,286,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,287,char c1 = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,288,if (c1 == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,291,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,293,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,296,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,300,match = sql.substring(start, pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,301,if (match.startsWith("\" " + hintToken + " ")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,302,return new Token(TokenType.ID, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,304,return new Token(TokenType.DQID, match);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4486,SqlNode expandedExpr = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4493,SqlNode[] inputs = new SqlNode[2];
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4494,inputs[0] = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4495,inputs[1] = SqlLiteral.createCharString(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4496,Util.last(id.names),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4497,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4498,SqlBasicCall item_call = new SqlBasicCall(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4502,expandedExpr = item_call;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,289,RelNode newInput = getNewForOldRel(oldInput1);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,296,newOrdinal += calculateFlattenedOffset(oldInputType, oldOrdinal);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,297,return newOrdinal;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,513,programBuilder.addCondition(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,514,new RexLocalRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,515,getNewForOldInput(conditionRef.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,516,conditionRef.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,566,int newOffset = getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,577,RelDataTypeField field = fieldList.get(j);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,580,new RexInputRef(newOffset + j, field.getType()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,737,final int newIndex = getNewForOldInput(oldIndex);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,743,RelDataType fieldType = removeDistinct(input.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,744,RexInputRef newInput = new RexInputRef(newIndex, fieldType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,745,return newInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,759,RelDataType fieldType = removeDistinct(fieldAccess.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,770,iInput += getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,771,return new RexInputRef(iInput, fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,79,import java.util.Iterator;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,780,final List<String> names = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,791,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,799,names);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,806,public RelBuilder project(RexNode... nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,807,return project(ImmutableList.copyOf(nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,815,private String inferAlias(List<RexNode> exprList, RexNode expr) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,821,return inferAlias(exprList, ((RexCall) expr).getOperands().get(0));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,824,for (;;) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,825,final int i = exprList.indexOf(expr);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,826,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,827,break;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,73,final ObjectMapper mapper = new ObjectMapper();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,74,mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,75,mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,76,mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,79,root = mapper.readValue(
core/src/main/java/org/apache/calcite/model/ModelHandler.java,80,uri.substring("inline:".length()), JsonRoot.class);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,124,if (variables.contains(declaration.parameter.name)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,125,Expression x = append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,126,newName(declaration.parameter.name, optimize),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,127,declaration.initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,136,add(statement);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,239,return (decl.modifiers & Modifier.FINAL) != 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,339,final SubstituteVariableVisitor visitor = new SubstituteVariableVisitor(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,488,private final Map<ParameterExpression, Expression> map;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,849,LAST_VALUE, COVAR_POP, COVAR_SAMP, REGR_SXX, REGR_SYY,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,54,SqlValidator.STRICT
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,55,? OperandTypes.ANY
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,56,: OperandTypes.ONE_OR_MORE,
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,52,Preconditions.checkArgument(kind == SqlKind.COVAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,53,|| kind == SqlKind.COVAR_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,54,|| kind == SqlKind.REGR_SXX
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,55,|| kind == SqlKind.REGR_SYY);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,357,exprList.add(cx.convertExpression(whenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,358,exprList.add(cx.convertExpression(thenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,360,exprList.add(cx.convertExpression(call.getElseOperand()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,362,RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,482,RelDataType type = dataType.deriveType(typeFactory);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1303,final SqlNode argSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1304,SqlStdOperatorTable.MULTIPLY.createCall(pos, arg, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1305,final SqlNode sumArgSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1306,SqlStdOperatorTable.SUM.createCall(pos, argSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1307,final SqlNode sum =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1308,SqlStdOperatorTable.SUM.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1310,SqlStdOperatorTable.MULTIPLY.createCall(pos, sum, sum);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1311,final SqlNode count =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1312,SqlStdOperatorTable.COUNT.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1314,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1315,pos, sumSquared, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1317,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1318,pos, sumArgSquared, avgSumSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1321,denominator = count;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1323,final SqlNumericLiteral one =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1324,SqlLiteral.createExactNumeric("1", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1325,denominator =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1326,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1327,pos, count, one);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1330,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1331,pos, diff, denominator);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1334,final SqlNumericLiteral half =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1335,SqlLiteral.createExactNumeric("0.5", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1336,result =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1337,SqlStdOperatorTable.POWER.createCall(pos, div, half);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1124,SqlNode sqlNode1 = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1129,sqlToRelConverter.convertQuery(sqlNode1, true, false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,254,final SqlNode validatedSqlNode = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,265,root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,707,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,708,hintList.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,709,new SqlMonikerImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,710,field.getName(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,711,SqlMonikerType.COLUMN));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,70,implementor.add(match);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,151,private String stripQuotes(String s) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,152,return s.startsWith("'") && s.endsWith("'") ? s.substring(1, s.length() - 1) : s;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,44,import com.google.common.collect.Lists;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,32,import java.io.IOException;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,49,private static final File SRC_DIR = new File("/tmp");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,109,String source = "public class " + className + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,112,+ " {\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,113,+ s + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,114,+ "}\n";
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,116,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,117,System.out.println(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,118,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,122,JaninoCompiler compiler = new JaninoCompiler();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,123,compiler.getArgs().setDestdir(CLASS_DIR.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,124,compiler.getArgs().setSource(source, file.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,125,compiler.getArgs().setFullClassName(className);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,126,compiler.compile();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,37,import net.hydromatic.tpcds.TpcdsColumn;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,38,import net.hydromatic.tpcds.TpcdsEntity;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,39,import net.hydromatic.tpcds.TpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,41,import java.sql.Date;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,50,private final int part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,51,private final int partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,85,this.part = part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,86,this.partCount = partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,89,for (TpcdsTable<?> tpcdsTable : TpcdsTable.getTables()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,102,private class TpcdsQueryableTable<E extends TpcdsEntity>
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,104,private final TpcdsTable<E> tpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,106,TpcdsQueryableTable(TpcdsTable<E> tpcdsTable) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,113,Integer rowCount = TABLE_ROW_COUNTS.get(tpcdsTable.name);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,114,assert rowCount != null : tpcdsTable.name;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,124,final Enumerator<E> iterator =
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,125,Linq4j.iterableEnumerator(
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,126,tpcdsTable.createGenerator(scaleFactor, part, partCount));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,127,return new Enumerator<Object[]>() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,128,public Object[] current() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,129,final List<TpcdsColumn<E>> columns = tpcdsTable.getColumns();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,130,final Object[] objects = new Object[columns.size()];
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,131,int i = 0;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,132,for (TpcdsColumn<E> column : columns) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,133,objects[i++] = value(column, iterator.current());
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,135,return objects;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,138,private Object value(TpcdsColumn<E> tpcdsColumn, E current) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,139,final Class<?> type = realType(tpcdsColumn);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,140,if (type == String.class) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,141,return tpcdsColumn.getString(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,143,return tpcdsColumn.getDouble(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,145,return Date.valueOf(tpcdsColumn.getString(current));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,147,return tpcdsColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,151,public boolean moveNext() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,152,return iterator.moveNext();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,155,public void reset() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,156,iterator.reset();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,159,public void close() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,168,for (TpcdsColumn<E> column : tpcdsTable.getColumns()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,170,typeFactory.createJavaType(realType(column)));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,175,private Class<?> realType(TpcdsColumn<E> column) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,176,if (column.getColumnName().endsWith("date")) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,177,return Date.class;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,179,return column.getType();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,39,Map map = (Map) operand;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,41,int part = Util.first((Integer) map.get("part"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,42,int partCount = Util.first((Integer) map.get("partCount"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,43,boolean columnPrefix = Util.first((Boolean) map.get("columnPrefix"), true);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,44,return new TpcdsSchema(scale, part, partCount);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1434,rexBuilder.makeIntervalLiteral(unit.multiplier,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1435,new SqlIntervalQualifier(unit, null,
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,219,getOperator().unparse(writer, this, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,222,getOperator().unparse(writer, this, leftPrec, rightPrec);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,44,import com.google.common.base.Predicate;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,45,import com.google.common.base.Predicates;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,106,this(clazz, Predicates.<RelNode>alwaysTrue(), description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,128,return RelOptUtil.disjunctions(input.getCondition()).size() == 1;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,279,private static final Predicate<Sort> SORT_PREDICATE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,283,return input.offset == null && input.fetch == null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,286,private static final Predicate<CassandraFilter> FILTER_PREDICATE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,290,return input.isSinglePartition();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,295,operand(CassandraFilter.class, null, FILTER_PREDICATE, any()));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,300,super(operand(Sort.class, null, SORT_PREDICATE, CASSANDRA_OP), "CassandraSortRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,22,import org.apache.calcite.rel.RelNode;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,53,import com.google.common.base.Function;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,96,public Void apply(RelNode node) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,97,CassandraSchema.this.addMaterializedViews();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,98,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,159,List<String> pKeyFields = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,165,List<String> cKeyFields = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,170,return Pair.of((List<String>) ImmutableList.copyOf(pKeyFields),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,171,(List<String>) ImmutableList.copyOf(cKeyFields));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,187,List<RelFieldCollation> keyCollations = new ArrayList<RelFieldCollation>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,216,List<String> columnNames = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,46,import java.util.Collections;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,100,return query(session, Collections.<Map.Entry<String, Class>>emptyList(),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,101,Collections.<Map.Entry<String, String>>emptyList(),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,102,Collections.<String>emptyList(), Collections.<String>emptyList(), 0, -1);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,121,Function1<String, Void> addField = new Function1<String, Void>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,122,public Void apply(String fieldName) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,123,SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,124,fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,125,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,146,selectString = Util.toString(new Iterable<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,147,public Iterator<String> iterator() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,148,final Iterator<Map.Entry<String, String>> selectIterator =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,149,selectFields.iterator();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,151,return new Iterator<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,153,return selectIterator.hasNext();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,157,Map.Entry<String, String> entry = selectIterator.next();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,158,return entry.getKey() + " AS " + entry.getValue();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,162,throw new UnsupportedOperationException();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,42,import com.google.common.base.Function;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,147,return Lists.transform(values,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,148,new Function<T, Expression>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,149,public Expression apply(T a0) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,150,return Expressions.constant(a0);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,75,final List<ImmutableBitSet> keys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,283,return list.toArray(new Comparable[list.size()]);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,819,: ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,88,ImmutableList.<RelCollation>of(), null, queryable);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,96,return createCloneTable(typeFactory, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,97,ImmutableList.<RelCollation>of(), repList, source);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,118,Suppliers.memoize(
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,119,new Supplier<ArrayTable.Content>() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,120,public ArrayTable.Content get() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,121,final ColumnLoader loader =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,122,new ColumnLoader<>(typeFactory, source, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,123,repList);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,124,final List<RelCollation> collation2 =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,126,&& loader.sortField >= 0
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,128,: collations;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,129,return new ArrayTable.Content(loader.representationValues,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,130,loader.size(), collation2);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,56,private static final Function<Timestamp, Long> TIMESTAMP_TO_LONG =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,57,new Function<Timestamp, Long>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,58,public Long apply(Timestamp a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,59,return a0 == null ? null : a0.getTime();
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,63,private static final Function<Time, Integer> TIME_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,64,new Function<Time, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,65,public Integer apply(Time a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,66,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,67,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,68,: (int) (a0.getTime() % DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,72,private static final Function<Date, Integer> DATE_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,73,new Function<Date, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,74,public Integer apply(Date a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,75,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,76,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,77,: (int) (a0.getTime() / DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,267,return Lists.transform(list, TIMESTAMP_TO_LONG);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,274,return Lists.transform(list, TIME_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,281,return Lists.transform(list, DATE_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,32,import org.apache.calcite.util.ImmutableBitSet;
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,67,return Statistics.of(list.size(), ImmutableList.<ImmutableBitSet>of());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,52,private static final Function<RexNode, Type> REX_TO_INTERNAL_TYPE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,53,new Function<RexNode, Type>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,54,public Type apply(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,55,return toInternal(node.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,236,return Lists.transform(operandList, REX_TO_INTERNAL_TYPE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,49,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,386,final List<Expression> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,71,return new Node() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,72,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,73,final Sink sink =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,74,implementor.relSinks.get(EnumerableBindable.this).get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,75,final Enumerable<Object[]> enumerable = bind(implementor.dataContext);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,76,final Enumerator<Object[]> enumerator = enumerable.enumerator();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,77,while (enumerator.moveNext()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,78,sink.send(Row.asCopy(enumerator.current()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,34,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,46,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,94,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,95,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,96,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,100,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,101,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,102,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,33,super(LogicalCalc.class, RelOptUtil.CALC_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,23,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,32,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,34,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,62,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,63,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,64,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,68,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,69,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,70,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,31,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,24,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,26,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,72,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,73,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,74,return RelMdCollation.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,78,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,79,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,80,return RelMdDistribution.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,92,leftKeys, rightKeys, ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,64,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,65,final List<RelCollation> collations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,71,final List<RelFieldCollation> fieldCollations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,31,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,76,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,77,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,78,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,31,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,23,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,24,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,25,import org.apache.calcite.rex.RexUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,26,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,28,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,37,RelFactories.FilterFactory FILTER_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,38,new RelFactories.FilterFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,39,public RelNode createFilter(RelNode child, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,40,return EnumerableFilter.create(child, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,44,RelFactories.ProjectFactory PROJECT_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,45,new RelFactories.ProjectFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,46,public RelNode createProject(RelNode child,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,47,List<? extends RexNode> projects, List<String> fieldNames) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,48,final RelOptCluster cluster = child.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,49,final RelDataType rowType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,50,RexUtil.createStructType(cluster.getTypeFactory(), projects,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,54,return EnumerableProject.create(child, projects, rowType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,48,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,71,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,73,Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,118,new Function<ParameterExpression, Statement>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,119,public Statement apply(ParameterExpression input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,120,return Expressions.declare(Modifier.FINAL, input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,121,Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,122,Expressions.call(DataContext.ROOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,123,BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,124,Expressions.constant(input.name)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,125,input.type));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,149,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,156,Collections.<Type>singletonList(Bindable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,167,ImmutableList.<Type>of(Serializable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,281,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,379,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,434,corrVars.put(name, new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,435,public Expression field(BlockBuilder list, int index, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,436,Expression fieldReference =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,437,physType.fieldReference(pe, index, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,438,return corrBlock.append(name + "_" + index, fieldReference);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,34,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,48,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,79,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,80,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,81,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,82,if (table != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,83,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,85,return ImmutableList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,119,inputTypes.toArray(new FlatProductInputType[inputTypes.size()])));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,26,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,28,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,41,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,65,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,66,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,67,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,71,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,72,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,73,return RelMdDistribution.values(rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,54,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,430,final Function<AggImpState, List<RexNode>> rexArguments =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,431,new Function<AggImpState, List<RexNode>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,432,public List<RexNode> apply(AggImpState agg) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,433,List<Integer> argList = agg.call.getArgList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,434,List<RelDataType> inputTypes =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,435,EnumUtils.fieldRowTypes(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,436,result.physType.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,437,constants,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,438,argList);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,439,List<RexNode> args = new ArrayList<RexNode>(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,440,inputTypes.size());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,441,for (int i = 0; i < argList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,442,Integer idx = argList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,443,args.add(new RexInputRef(idx, inputTypes.get(i)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,445,return args;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,534,return new Function<BlockBuilder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,535,WinAggFrameResultContext>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,536,public WinAggFrameResultContext apply(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,537,final BlockBuilder block) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,538,return new WinAggFrameResultContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,539,public RexToLixTranslator rowTranslator(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,540,Expression row =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,541,getRow(rowIndex);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,542,final RexToLixTranslator.InputGetter inputGetter =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,543,new WindowRelInputGetter(row, inputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,544,result.physType.getRowType().getFieldCount(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,545,translatedConstants);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,547,return RexToLixTranslator.forAggregation(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,548,block, inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,551,public Expression computeIndex(Expression offset,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,552,WinAggImplementor.SeekType seekType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,553,Expression index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,554,if (seekType == WinAggImplementor.SeekType.AGG_INDEX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,555,index = jDecl.parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,557,index = i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,559,index = startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,561,index = endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,563,throw new IllegalArgumentException("SeekSet " + seekType
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,564,+ " is not supported");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,566,if (!Expressions.constant(0).equals(offset)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,567,index = block.append("idx", Expressions.add(index, offset));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,569,return index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,572,private Expression checkBounds(Expression rowIndex,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,573,Expression minIndex, Expression maxIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,574,if (rowIndex == i_ || rowIndex == startX || rowIndex == endX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,576,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,580,Expression res = block.append("rowInFrame",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,581,Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,582,ImmutableList.of(hasRows,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,583,Expressions.greaterThanOrEqual(rowIndex, minIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,584,Expressions.lessThanOrEqual(rowIndex, maxIndex))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,586,return res;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,589,public Expression rowInFrame(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,590,return checkBounds(rowIndex, startX, endX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,593,public Expression rowInPartition(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,594,return checkBounds(rowIndex, minX, maxX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,597,public Expression compareRows(Expression a, Expression b) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,598,return Expressions.call(comparator_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,599,BuiltInMethod.COMPARATOR_COMPARE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,600,getRow(a), getRow(b));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,603,public Expression getRow(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,604,return block.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,606,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,607,Expressions.arrayIndex(rows_, rowIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,608,inputPhysType.getJavaRowType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,611,public Expression index() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,612,return i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,615,public Expression startIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,616,return startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,619,public Expression endIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,620,return endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,623,public Expression hasRows() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,624,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,627,public Expression getFrameRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,628,return frameRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,631,public Expression getPartitionRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,632,return partitionRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,55,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,66,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,49,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,176,final List<Expression> expressions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,263,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,264,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,333,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,367,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,368,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,369,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,370,Comparator.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,371,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,434,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,469,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,58,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,60,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,195,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,301,map.put(DEFAULT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,302,new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,303,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,304,RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,305,return Expressions.constant(null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,363,return new Supplier<T>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,364,public T get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,365,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,366,return constructor.newInstance();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,368,| InvocationTargetException e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,369,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,408,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,409,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,410,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,411,return implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,412,translator, call, nullAs, nullPolicy, harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,413,implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,429,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,430,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,431,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,432,assert call.getOperator() == AND
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,433,: "AND null semantics is supported only for AND operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,434,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,435,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,436,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,437,case NOT_POSSIBLE: // Just foldAnd
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,438,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,441,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,444,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,445,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,446,return Expressions.foldAnd(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,447,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,448,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,449,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,450,final List<Expression> nullAsTrue =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,451,translator.translateList(call2.getOperands(), NullAs.TRUE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,452,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,453,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,454,Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,455,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,456,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,457,Expressions.condition(hasFalse, BOXED_FALSE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,458,Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,459,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,460,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,461,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,474,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,475,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,476,RexToLixTranslator translator, RexCall call, final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,477,assert call.getOperator() == OR
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,478,: "OR null semantics is supported only for OR operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,479,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,480,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,481,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,482,case NOT_POSSIBLE: // Just foldOr
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,483,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,486,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,489,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,490,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,491,return Expressions.foldOr(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,492,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,493,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,494,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,495,final List<Expression> nullAsFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,496,translator.translateList(call2.getOperands(), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,497,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,498,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,499,Expression hasTrue = Expressions.foldOr(nullAsFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,500,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,501,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,502,Expressions.condition(hasTrue, BOXED_TRUE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,503,Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,504,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,505,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,506,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,541,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,542,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,543,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,544,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,545,return implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,546,translator, call2, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1134,return Collections.<Type>singletonList(afi.accumulatorType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1136,return Arrays.<Type>asList(afi.accumulatorType, afi.declaringClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,79,Util.<Method, SqlOperator>mapOf(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,113,Collections.<RexNode, Boolean>emptyMap(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1002,block, ImmutableMap.<RexNode, Boolean>of(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1011,Collections.<RexNode, Boolean>emptyMap(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggAddContextImpl.java,27,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,26,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,32,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,49,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,50,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,84,this.jdbcTableType = Preconditions.checkNotNull(jdbcTableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,115,return Lists.transform(rowType.getFieldList(),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,116,new Function<RelDataTypeField, Pair<ColumnMetaData.Rep, Integer>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,120,final Class clazz = (Class) typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,121,final ColumnMetaData.Rep rep =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,122,Util.first(ColumnMetaData.Rep.of(clazz),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,123,ColumnMetaData.Rep.OBJECT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,124,return Pair.of(rep, type.getSqlTypeName().getJdbcOrdinal());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,121,return new Function1<ResultSet, Function0<Object[]>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,122,public Function0<Object[]> apply(ResultSet resultSet) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,123,try {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,124,return new ObjectArrayRowBuilder(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,125,resultSet,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,126,Pair.left(list).toArray(new ColumnMetaData.Rep[list.size()]),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,127,Ints.toArray(Pair.right(list)));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,129,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,206,CacheBuilder.newBuilder().softValues().build(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,207,new CacheLoader<List<String>, BasicDataSource>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,209,BasicDataSource dataSource = new BasicDataSource();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,210,dataSource.setUrl(key.get(0));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,211,dataSource.setUsername(key.get(1));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,212,dataSource.setPassword(key.get(2));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,213,dataSource.setDriverClassName(key.get(3));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,214,return dataSource;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,79,tables.toArray(new SqlOperatorTable[tables.size()])));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,43,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,60,private final List<Grouping> groups = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,106,return new AccumulatorFactory() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,107,public Accumulator get() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,108,return new CountAccumulator(call);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,274,private final Map<Row, AccumulatorList> accumulators = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,73,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,168,this.filters = Preconditions.checkNotNull(filters);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,169,this.projects = Preconditions.checkNotNull(projects);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,176,return create(cluster, relOptTable, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,187,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,188,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,189,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,190,if (table != null) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,191,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,193,return ImmutableList.of();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,245,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,276,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,277,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,278,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,308,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,23,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,40,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,43,public final Map<RelNode, List<Sink>> relSinks = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,45,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,70,this.dataContext = Preconditions.checkNotNull(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,339,this.enumerator = Preconditions.checkNotNull(enumerator);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,20,import org.apache.calcite.adapter.enumerable.PhysType;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,53,import java.lang.reflect.Type;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,88,Pair.<Expression, PhysType>of(
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,93,final Function1<String, RexToLixTranslator.InputGetter> correlates =
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,94,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,95,public RexToLixTranslator.InputGetter apply(String a0) {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,96,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,120,final List<MemberDeclaration> declarations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,148,ImmutableList.<Type>of(Scalar.class), declarations);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,59,rightList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,25,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,29,import java.util.Collections;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,72,final List<Row> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,76,Collections.sort(list, comparator());
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,95,return comparator(input);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,105,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,106,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,107,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,108,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,109,return RelFieldCollation.compare(c1, c2, nullComparison);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,113,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,114,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,115,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,116,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,117,return RelFieldCollation.compare(c2, c1, -nullComparison);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,23,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,147,rowEnumerable = queryable.select(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,148,new Function1<Object, Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,149,public Row apply(Object o) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,150,final Object[] values = new Object[fields.size()];
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,151,for (int i = 0; i < fields.size(); i++) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,152,Field field = fields.get(i);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,153,try {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,154,values[i] = field.get(o);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,156,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,159,return new Row(values);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,273,enumerable = enumerable.where(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,274,new Predicate1<Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,276,context.values = row.getValues();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,277,Boolean b = (Boolean) condition.execute(context);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,278,return b != null && b;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,22,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,46,final Set<Row> rows = rel.all ? null : Sets.<Row>newHashSet();
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,45,final List<RexNode> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,46,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,67,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,71,import java.sql.PreparedStatement;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,124,Preconditions.checkNotNull(rootSchema != null
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,157,return iface.cast(
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,158,new RelRunner() {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,159,public PreparedStatement prepare(RelNode rel) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,160,try {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,161,return prepareStatement_(CalcitePrepare.Query.of(rel),
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,162,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,163,getHoldability());
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,268,Map<String, Object> map = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,316,final Map<Integer, CalciteServerStatement> statementMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,436,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,496,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,22,import org.apache.calcite.avatica.AvaticaParameter;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,39,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,43,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,57,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,95,return new Predicate1<T>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,96,public boolean apply(T v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,97,return regex.matcher(v1.getName()).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,107,return new Predicate1<String>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,108,public boolean apply(String v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,109,return regex.matcher(v1).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,187,return createResultSet(Collections.<String, Object>emptyMap(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,196,return createResultSet(Collections.<String, Object>emptyMap(), columns,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,208,ImmutableList.<AvaticaParameter>of(), internalParameters, null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,265,typeFilter = new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,266,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,267,return typeList.contains(v1.tableType);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,274,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,275,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,276,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,277,return tables(schema, matcher(tableNamePattern));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,328,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,329,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,330,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,331,return tables(schema, tableNameMatcher);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,334,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,335,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,336,public Enumerable<MetaColumn> apply(MetaTable schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,337,return columns(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,382,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,383,new Function1<CalciteSchema, MetaSchema>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,384,public MetaSchema apply(CalciteSchema calciteSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,385,return new CalciteMetaSchema(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,386,calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,388,calciteSchema.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,391,.orderBy(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,392,new Function1<MetaSchema, Comparable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,393,public Comparable apply(MetaSchema metaSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,394,return (Comparable) FlatLists.of(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,395,Util.first(metaSchema.tableCatalog, ""),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,396,metaSchema.tableSchem);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,403,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,404,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,405,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,406,return tables(schema, Functions.<String>truePredicate1());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,414,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,415,new Function1<String, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,416,public MetaTable apply(String name) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,417,final Table table =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,418,schema.calciteSchema.getTable(name, true).getTable();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,419,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,420,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,421,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,422,name);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,429,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,430,new Function1<Map.Entry<String, Table>, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,431,public MetaTable apply(Map.Entry<String, Table> pair) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,432,final Table table = pair.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,433,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,434,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,435,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,436,pair.getKey());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,445,.where(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,446,new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,447,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,448,return matcher.apply(v1.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,490,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,491,new Function1<RelDataTypeField, MetaColumn>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,492,public MetaColumn apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,493,final int precision =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,498,: -1;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,499,return new MetaColumn(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,500,table.tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,501,table.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,502,table.tableName,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,503,field.getName(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,504,field.getType().getSqlTypeName().getJdbcOrdinal(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,505,field.getType().getFullTypeString(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,506,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,509,: null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,510,10,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,512,? DatabaseMetaData.columnNullable
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,513,: DatabaseMetaData.columnNoNulls,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,514,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,515,field.getIndex() + 1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,516,field.getType().isNullable() ? "YES" : "NO");
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,706,_createIterable(h, signature, ImmutableList.<TypedValue>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,756,this.calciteTable = Preconditions.checkNotNull(calciteTable);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,63,Function0<CalcitePrepare> DEFAULT_FACTORY =
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,64,new Function0<CalcitePrepare>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,65,public CalcitePrepare apply() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,66,return new CalcitePrepareImpl();
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,70,new ThreadLocal<Deque<Context>>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,72,return new ArrayDeque<>();
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,28,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,58,resultSink = new Handler.ResultSink() {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,59,public void toBeCompleted() {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,139,return new TableEntryImpl(this, name, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,144,return add(tableName, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,484,this.schema = Preconditions.checkNotNull(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,485,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,501,this.sqls = Preconditions.checkNotNull(sqls);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,640,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,39,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,38,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,228,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,229,public RelDataType apply(RelDataTypeField a0) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,350,this.syntheticType = Preconditions.checkNotNull(syntheticType);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,351,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,352,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,19,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,21,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,36,ImmutableMap.<String, Table>of(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,42,return meta.tables(catalog).selectMany(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,43,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,44,public Enumerable<MetaColumn> apply(MetaTable table) {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,45,return meta.columns(table);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,40,.build(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,54,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,59,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,61,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,74,private static final Function<Column, String> GET_ALIAS =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,75,new Function<Column, String>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,76,public String apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,77,return input.alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,81,private static final Function<Column, Integer> GET_ORDINAL =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,82,new Function<Column, Integer>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,83,public Integer apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,84,return input.ordinal;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,100,private final Function<Integer, Column> toColumnFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,101,new Function<Integer, Column>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,102,public Column apply(Integer input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,103,return columns.get(input);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,106,private final Function<AggregateCall, Measure> toMeasureFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,107,new Function<AggregateCall, Measure>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,108,public Measure apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,109,return new Measure(input.getAggregation(),
core/src/main/java/org/apache/calcite/materialize/Lattice.java,110,Lists.transform(input.getArgList(), toColumnFunction));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,120,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,121,this.columns = Preconditions.checkNotNull(columns);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,126,this.defaultMeasures = Preconditions.checkNotNull(defaultMeasures);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,127,this.tiles = Preconditions.checkNotNull(tiles);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,140,List<String> nameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,261,final Set<String> columnNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,354,final List<Table> tables = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,366,return Lists.transform(aggCallList, toMeasureFunction);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,425,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,440,new DirectedGraph.EdgeFactory<RelNode, Edge>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,441,public Edge createEdge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,442,return new Edge(source, target);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,446,final List<IntPair> pairs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,467,this.agg = Preconditions.checkNotNull(agg);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,505,return Lists.transform(args, GET_ORDINAL);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,533,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,534,this.column = Preconditions.checkNotNull(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,535,this.alias = Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,563,private final List<Node> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,578,this.rootSchema = Preconditions.checkNotNull(schema.root());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,585,List<RelNode> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,586,List<int[][]> tempLinks = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,590,List<String> aliases = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,612,final Map<RelNode, Node> map = Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,840,private final List<Measure> measureBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,841,private final List<Column> dimensionListBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,24,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,38,final Map<MaterializationKey, Materialization> keyMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,40,final Map<QueryKey, MaterializationKey> keyBySql = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,42,final Map<TileKey, MaterializationKey> keyByTile = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,78,this.rootSchema = Preconditions.checkNotNull(rootSchema);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,21,import org.apache.calcite.avatica.ColumnMetaData;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,41,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,45,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,66,new ThreadLocal<MaterializationService>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,68,return new MaterializationService();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,73,new Comparator<Pair<CalciteSchema.TableEntry, TileKey>>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,74,public int compare(Pair<CalciteSchema.TableEntry, TileKey> o0,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,75,Pair<CalciteSchema.TableEntry, TileKey> o1) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,77,final Table t0 = o0.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,78,final Table t1 = o1.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,79,int c = Double.compare(t0.getStatistic().getRowCount(),
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,80,t1.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,81,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,82,return c;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,85,return o0.left.name.compareTo(o1.left.name);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,204,new TileKey(lattice, groupSet, ImmutableList.<Lattice.Measure>of());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,264,final List<TileKey> obsolete = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,265,final LinkedHashSet<Lattice.Measure> measureSet = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,373,Lists.transform(calciteSignature.columns,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,374,new Function<ColumnMetaData, ColumnMetaData.Rep>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,375,public ColumnMetaData.Rep apply(ColumnMetaData column) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,376,return column.type.rep;
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,41,.createTable(lattice.rootSchema, sql, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,47,private static final Function<Attribute, Lattice.Column> TO_COLUMN =
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,48,new Function<Attribute, Lattice.Column>() {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,49,public Lattice.Column apply(Attribute input) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,50,return ((AttributeImpl) input).column;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,207,return lattice.getRowCount(Lists.transform(attributes, TO_COLUMN));
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,416,return Iterables.filter(classes,
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,419,return clazz.isAssignableFrom(input);
core/src/main/java/org/apache/calcite/plan/Contexts.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/Contexts.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/Contexts.java,85,final List<Context> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/Contexts.java,119,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/Contexts.java,142,this.contexts = Preconditions.checkNotNull(contexts);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,43,this.traits = Preconditions.checkNotNull(traits);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,62,traitList.toArray(new RelMultipleTrait[traitList.size()]);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,77,this.planner = Preconditions.checkNotNull(planner);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,78,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,44,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,159,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,183,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,221,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,28,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,100,this.operand = Preconditions.checkNotNull(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,101,this.relBuilderFactory = Preconditions.checkNotNull(relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,129,return new RelOptRuleOperand(clazz, null, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,148,return new RelOptRuleOperand(clazz, trait, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,164,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,185,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,191,return operand(clazz, trait, predicate, some(first, rest));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,575,new Function<RelNode, RelNode>() {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,576,public RelNode apply(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,577,return convert(rel, rel.getTraitSet().replace(trait));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,622,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleCall.java,225,transformTo(rel, ImmutableMap.<RelNode, RelNode>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,22,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,121,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,124,this.predicate = Preconditions.checkNotNull((Predicate) predicate);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,215,return predicate.apply(rel);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,37,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,42,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,85,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,86,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,112,public static final double EPSILON = 1.0e-5;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,116,public static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,119,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,121,|| RexOver.containsOver(filter.getCondition()));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,127,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,130,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,132,|| RexOver.containsOver(project.getProjects(), null));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,138,public static final Predicate<Calc> CALC_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,141,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,143,|| calc.getProgram().containsAggs());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,147,static final boolean B = false;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,149,private static final Function<RelDataTypeField, RelDataType> GET_TYPE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,150,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,151,public RelDataType apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,152,return field.getType();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,257,return Lists.transform(type.getFieldList(), GET_TYPE);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,525,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,725,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1653,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2278,final List<RexNode> filtersToRemove = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2550,List<BitSet> newProjFields = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2581,Lists.transform(newProjFields, ImmutableBitSet.FROM_BIT_SET),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3040,final List<String> outputNameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3041,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3144,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3168,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,62,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,63,new CacheLoader<T, T>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,65,return key;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,22,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,554,new RelTraitSet(this, traits.toArray(new RelTrait[traits.size()]));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,66,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,67,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,68,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,73,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,149,ImmutableList.<UnifyRule>of(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,448,List<RelNode> sub = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,469,final Map<MutableRel, MutableRel> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,482,final List<Replacement> attempted = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,483,List<List<Replacement>> substitutions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,895,this.rule = Preconditions.checkNotNull(rule);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,896,this.query = Preconditions.checkNotNull(query);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,897,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,898,this.slots = Preconditions.checkNotNull(slots);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1285,new Function<AggregateCall, AggregateCall>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1286,public AggregateCall apply(AggregateCall call) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1287,return call.copy(Mappings.apply2(mapping, call.getArgList()),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1288,Mappings.apply(mapping, call.filterArg));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1302,final List<Integer> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1326,final List<AggregateCall> aggregateCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2396,private static final Predicate<LogicalFilter> PREDICATE =
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2399,return input.getCondition() instanceof RexInputRef;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2408,operand(LogicalFilter.class, null, PREDICATE,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,135,Util.first(onCopyHook, Functions.<RelNode, RelNode, Void>ignore2());
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,493,bindings.toArray(new RelNode[bindings.size()]),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,24,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,50,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,51,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,52,if (!(rel instanceof HepRelVertex)) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,53,return null;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,55,HepRelVertex vertex = (HepRelVertex) rel;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,56,final RelNode rel2 = vertex.getCurrentRel();
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,57,UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,58,rel.getCluster().getMetadataProvider().apply(rel2.getClass(),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,59,metadataClass);
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,60,return function.bind(rel2, mq);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,20,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,46,import java.util.Iterator;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,385,return new Iterable<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,386,public Iterator<RelNode> iterator() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,388,.where(
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,389,new Predicate1<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,390,public boolean apply(RelNode v1) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,391,return v1.getTraitSet().satisfies(traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,394,.iterator();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,40,import java.util.Collections;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,235,Collections.sort(
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,236,boostRemovals,
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,237,new Comparator<RelSubset>() {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,238,public int compare(RelSubset o1, RelSubset o2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,239,int o1children = countChildren(o1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,240,int o2children = countChildren(o2);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,241,int c = compare(o1children, o2children);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,242,if (c == 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,244,c = compare(o1.getId(), o2.getId());
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,246,return c;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,249,private int compare(int i1, int i2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,250,return (i1 < i2) ? -1 : ((i1 == i2) ? 0 : 1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,253,private int countChildren(RelSubset subset) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,254,int count = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,255,for (RelNode rel : subset.getRels()) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,256,count += rel.getInputs().size();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,258,return count;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,457,Collections.sort(matchList, MATCH_COMPARATOR);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,87,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,88,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,91,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,100,import java.util.Comparator;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,256,Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,260,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,309,return new VolcanoPlannerPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,310,public void initialize(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,311,Map<VolcanoPlannerPhase, Set<String>> phaseRuleMap) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,313,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS_MDR).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,314,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,315,phaseRuleMap.get(VolcanoPlannerPhase.CLEANUP).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,880,final Set<RelSubset> subsets = Sets.newHashSet();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1369,new Comparator<RelSet>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1370,public int compare(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1371,RelSet o1,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1372,RelSet o2) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1373,return o1.id - o2.id;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,24,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,55,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,56,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,57,final RelSubset subset = (RelSubset) rel;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,58,final RelMetadataProvider provider =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,59,rel.getCluster().getMetadataProvider();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,69,if (subset.best != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,70,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,71,provider.apply(subset.best.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,72,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,73,final M metadata = function.bind(subset.best, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,74,if (metadata != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,75,return metadata;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,92,if (subset.set.inMetadataQuery) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,93,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,96,subset.set.inMetadataQuery = true;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,97,try {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,98,for (RelNode relCandidate : subset.set.rels) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,99,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,100,provider.apply(relCandidate.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,101,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,102,final M result = function.bind(relCandidate, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,103,if (result != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,104,return result;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,109,subset.set.inMetadataQuery = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,113,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,84,ImmutableMap.<RelNode, List<RelNode>>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,36,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,55,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,56,import com.google.common.collect.Collections2;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,131,final List<Function> functions2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,236,if (functions.isEmpty()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,237,return;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,239,operatorList.addAll(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,240,Collections2.transform(functions,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,241,new com.google.common.base.Function<Function, SqlOperator>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,242,public SqlOperator apply(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,243,return toOp(opName, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,257,final Predicate<Integer> optional =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,260,return function.getParameters().get(input).isOptional();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,264,OperandTypes.family(typeFamilies, optional);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,287,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,288,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,296,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,297,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,298,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,305,return Lists.transform(types,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,306,new com.google.common.base.Function<RelDataType, RelDataType>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,307,public RelDataType apply(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,51,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,126,final List<Callback> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,19,import org.apache.calcite.DataContext;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,39,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,137,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,462,return Collections.<Function1<Context, RelOptPlanner>>singletonList(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,463,new Function1<Context, RelOptPlanner>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,464,public RelOptPlanner apply(Context context) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,465,return createPlanner(context, null, null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,619,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,620,ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,624,ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,625,-1,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,626,new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,627,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,628,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,713,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,714,ImmutableMap.<String, Object>of(), null,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,715,ImmutableList.<ColumnMetaData>of(), Meta.CursorFactory.OBJECT,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,783,: ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,991,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1018,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1019,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1020,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1021,final RelOptCluster cluster =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1022,prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1024,.translate(queryable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1030,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1031,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1032,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1033,return rel;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1221,: ImmutableList.<Prepare.Materialization>of();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1246,return new Bindable() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1247,public Enumerable bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,105,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,113,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,25,import org.apache.calcite.plan.RelOptSchema;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,137,new Frameworks.PlannerAction<Void>() {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,138,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,139,SchemaPlus rootSchema) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,140,Util.discard(rootSchema); // use our own defaultSchema
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,141,typeFactory = (JavaTypeFactory) cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,142,planner = cluster.getPlanner();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,143,planner.setExecutor(executor);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,144,return null;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,59,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,446,Collections.<String>nCopies(4, null));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,514,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,515,this.parameterRowType = Preconditions.checkNotNull(parameterRowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,516,this.fieldOrigins = Preconditions.checkNotNull(fieldOrigins);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,518,this.rootRel = Preconditions.checkNotNull(rootRel);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,55,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,56,import com.google.common.base.Functions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,57,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,91,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,104,final Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,105,(Function) Functions.constant(expression);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,107,expressionFunction, null);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,113,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,114,getClassExpressionFunction(schemaPlus, Util.last(path).left, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,116,expressionFunction, table.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,122,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,123,getClassExpressionFunction(tableEntry, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,125,table, expressionFunction, rowCount);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,146,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,147,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,148,return queryableTable.getExpression(schema, tableName, clazz);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,154,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,155,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,156,return Schemas.tableExpression(schema, Object[].class, tableName,
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,157,table.getClass());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,164,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,165,public Expression apply(Class input) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,166,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/RelCollations.java,40,new RelCollationImpl(ImmutableList.<RelFieldCollation>of()));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,114,new Function<RelFieldCollation, Integer>() {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,115,public Integer apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,116,return input.getFieldIndex();
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,89,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,200,this.direction = Preconditions.checkNotNull(direction);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,201,this.nullDirection = Preconditions.checkNotNull(nullDirection);
core/src/main/java/org/apache/calcite/rel/RelRoot.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelRoot.java,95,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,28,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,71,this.inTrait = Preconditions.checkNotNull(in);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,72,this.outTrait = Preconditions.checkNotNull(out);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,47,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,49,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,75,public static final Predicate<Aggregate> IS_SIMPLE =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,78,return input.getGroupType() == Group.SIMPLE;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,82,public static final Predicate<Aggregate> IS_NOT_GRAND_TOTAL =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,85,return input.getGroupCount() > 0;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,137,this.groupSet = Preconditions.checkNotNull(groupSet);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,343,final Set<String> containedNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,89,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,91,this.aggFunction = Preconditions.checkNotNull(aggFunction);
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,42,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,43,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,61,this.distribution = Preconditions.checkNotNull(distribution);
core/src/main/java/org/apache/calcite/rel/core/Join.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Join.java,105,this.condition = Preconditions.checkNotNull(condition);
core/src/main/java/org/apache/calcite/rel/core/Join.java,107,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,50,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,51,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,129,this.remaining = Preconditions.checkNotNull(remaining);
core/src/main/java/org/apache/calcite/rel/core/Project.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Project.java,195,if (false && !Util.isDistinct(
core/src/main/java/org/apache/calcite/rel/core/Project.java,196,Lists.transform(exps,
core/src/main/java/org/apache/calcite/rel/core/Project.java,197,new Function<RexNode, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Project.java,198,public Object apply(RexNode a0) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,199,return a0.toString();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,38,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,268,semiJoinDone, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,28,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,75,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,123,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,60,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,98,ImmutableSet.<RelColumnMapping>of());
core/src/main/java/org/apache/calcite/rel/core/Values.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Values.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Values.java,50,private static final Function<ImmutableList<RexLiteral>, Object> F =
core/src/main/java/org/apache/calcite/rel/core/Values.java,51,new Function<ImmutableList<RexLiteral>, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,52,public Object apply(ImmutableList<RexLiteral> tuple) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,53,String s = tuple.toString();
core/src/main/java/org/apache/calcite/rel/core/Values.java,54,assert s.startsWith("[");
core/src/main/java/org/apache/calcite/rel/core/Values.java,55,assert s.endsWith("]");
core/src/main/java/org/apache/calcite/rel/core/Values.java,56,return "{ " + s.substring(1, s.length() - 1) + " }";
core/src/main/java/org/apache/calcite/rel/core/Values.java,67,public static final Predicate<? super Values> IS_EMPTY =
core/src/main/java/org/apache/calcite/rel/core/Values.java,70,return values.getTuples().isEmpty();
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,25,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,39,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,98,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,99,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,100,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,104,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,105,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,106,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,24,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,41,import java.util.List;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,72,this.variablesSet = Preconditions.checkNotNull(variablesSet);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,81,this(cluster, traitSet, child, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,90,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,103,return create(input, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,113,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,114,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,115,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,119,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,120,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,121,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,100,this.systemFieldList = Preconditions.checkNotNull(systemFieldList);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,118,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,136,input.getExpression("condition"), ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,138,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,164,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,171,joinType, false, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,118,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,119,RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,120,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,121,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,122,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,30,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,101,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,102,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,103,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,104,if (table != null) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,105,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,107,return ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,34,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,87,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,88,RelCollationTraitDef.INSTANCE, new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,89,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,90,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,106,ImmutableList.<ImmutableList<RexLiteral>>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,27,import org.apache.calcite.rex.RexFieldCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,183,new ArrayList<Map.Entry<String, RelDataType>>(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,184,child.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,70,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,71,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,72,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,73,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,74,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,75,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,76,new CachingInvocationHandler(metadata)));
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,106,this.metadata = Preconditions.checkNotNull(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,89,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,90,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,91,final List<Metadata> metadataList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,92,for (UnboundMetadata<M> function : functions) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,93,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,94,if (metadata != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,95,metadataList.add(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,98,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,99,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,100,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,101,new ChainedInvocationHandler(metadataList)));
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,88,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,39,public static final UnboundMetadata<Metadata> DUMMY =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,40,new UnboundMetadata<Metadata>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,41,public Metadata bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,42,return null;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,55,return new CacheLoader<Pair<Class<RelNode>, Class<Metadata>>,
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,56,UnboundMetadata<Metadata>>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,58,Pair<Class<RelNode>, Class<Metadata>> key) throws Exception {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,59,final UnboundMetadata<Metadata> function =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,60,provider.apply(key.left, key.right);
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,62,return function != null ? function : DUMMY;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,34,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,135,final UnboundMetadata function =
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,136,new UnboundMetadata() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,137,public Metadata bind(final RelNode rel,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,138,final RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,139,return (Metadata) Proxy.newProxyInstance(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,140,space.metadataClass0.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,141,new Class[]{space.metadataClass0},
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,142,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,143,public Object invoke(Object proxy, Method method,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,144,Object[] args) throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,151,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,152,BuiltInMethod.METADATA_REL.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,153,return rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,155,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,156,BuiltInMethod.OBJECT_TO_STRING.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,157,return space.metadataClass0.getSimpleName() + "(" + rel
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,158,+ ")";
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,160,int i = methods.indexOf(method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,161,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,162,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,163,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,165,final Method handlerMethod = handlerMethods.get(i);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,166,if (handlerMethod == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,167,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,168,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,170,final Object[] args1;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,171,final List key;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,172,if (args == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,173,args1 = new Object[]{rel, mq};
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,174,key = FlatLists.of(rel, method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,176,args1 = new Object[args.length + 2];
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,177,args1[0] = rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,178,args1[1] = mq;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,179,System.arraycopy(args, 0, args1, 2, args.length);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,181,final Object[] args2 = args1.clone();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,182,args2[1] = method; // replace RelMetadataQuery with method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,183,for (int j = 0; j < args2.length; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,184,if (args2[j] == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,185,args2[j] = NullSentinel.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,188,args2[j] = args2[j].toString();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,191,key = FlatLists.copyOf(args2);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,193,if (mq.map.put(key, NullSentinel.INSTANCE) != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,194,throw CyclicMetadataException.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,196,try {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,197,return handlerMethod.invoke(target, args1);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,199,| UndeclaredThrowableException e) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,203,mq.map.remove(key);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,319,Preconditions.checkNotNull(relNodeClass);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,50,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,53,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,166,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,299,final List<RelCollation> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,302,Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,57,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,61,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,423,exprFields = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,454,equivalence = Maps.newTreeMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,470,Lists.transform(exprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,471,new Function<RexNode, Void>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,472,public Void apply(RexNode input) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,473,return input.accept(eF);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,599,return new Iterable<Mapping>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,600,public Iterator<Mapping> iterator() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,601,ImmutableBitSet fields = exprFields.get(predicate.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,602,if (fields.cardinality() == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,603,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,605,return new ExprsItr(fields);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,619,exprs = Linq4j.asEnumerable(exprs).where(new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,620,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,621,return expr != null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,221,List<List<Double>> inputColumnSizeList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,33,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,34,import java.lang.reflect.Method;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,105,new ThreadLocal<JaninoRelMetadataProvider>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,106,protected JaninoRelMetadataProvider initialValue() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,107,return JaninoRelMetadataProvider.DEFAULT;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,113,this.metadataProvider = Preconditions.checkNotNull(metadataProvider);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,137,new Class[] {handlerClass},
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,138,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,140,throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,141,final RelNode r = (RelNode) args[0];
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,142,throw new JaninoRelMetadataProvider.NoHandler(r.getClass());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,65,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,110,this.dialect = Preconditions.checkNotNull(dialect);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,615,POS, operands.toArray(new SqlNode[operands.size()]));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,566,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,703,null, ImmutableList.<AggregateCall>of()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,34,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,89,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,90,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,91,return newGroupSet.indexOf(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,126,final List<AggregateCall> topAggCallList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,47,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,48,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,50,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,82,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,83,operand(joinClass, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,169,final List<Integer> leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,170,final List<Integer> rightKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,171,final List<Boolean> filterNulls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,240,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,273,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,274,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,275,return map.get(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,299,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,395,return new SqlSplittableAggFunction.Registry<E>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,396,public int register(E e) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,397,int i = list.indexOf(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,398,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,399,i = list.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,400,list.add(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,402,return i;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,75,final List<Integer> newKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,133,final List<Integer> posList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,92,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,144,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,145,final Map<AggregateCall, RexNode> aggCallMapping = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,147,final List<RexNode> projList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,177,Collections.<String>nCopies(extraArgCount, null)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,47,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,61,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,67,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,146,final List<AggregateCall> aggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,223,List<Integer> newArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,54,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,150,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,128,final RexNode[] exprs = exprList.toArray(new RexNode[exprList.size()]);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,99,final List<RexNode> pushedConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,100,final List<RexNode> remainingConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,36,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,52,public static final Predicate TRUE_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,53,new Predicate() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,54,public boolean apply(Join join, JoinRelType joinType, RexNode exp) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,55,return true;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,93,this.predicate = Preconditions.checkNotNull(predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,140,: Lists.<RexNode>newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,35,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,52,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,57,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,58,return table.unwrap(FilterableTable.class) != null
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,59,|| table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,67,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,81,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,118,final List<RexNode> top = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,119,final List<RexNode> bottom = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,133,final List<RexNode> newBottomList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,189,Collections.<RelDataTypeField>emptyList());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,38,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,128,final List<ImmutableBitSet> projFieldsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,129,final List<int[]> joinFieldRefCountsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,141,final List<Pair<JoinRelType, RexNode>> joinSpecs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,200,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,382,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,473,final Map<Integer, int[]> refCountsMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,524,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,137,List<Integer> treeOrder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,160,this.parent = Preconditions.checkNotNull(parent);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,198,this.left = Preconditions.checkNotNull(left);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,199,this.right = Preconditions.checkNotNull(right);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,37,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,465,fieldsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,466,factorsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,50,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,301,sortedFactors.toArray(new Integer[sortedFactors.size()]);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,494,List<RexNode> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1622,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,76,: ImmutableList.<RelOptMaterialization>of();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,41,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,94,final List<Vertex> vertexes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,104,final List<LoptMultiJoin.Edge> unusedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,126,final List<LoptMultiJoin.Edge> usedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,176,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,225,List<Pair<RelNode, Mappings.TargetMapping>> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,374,this.conditions = Preconditions.checkNotNull(conditions);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,36,public static final ProjectFilterTransposeRule INSTANCE = new ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,37,LogicalProject.class, LogicalFilter.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,38,PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,44,private static final Predicate<Project> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,47,return isTrivial(input);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,33,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,50,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,54,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,55,return table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,63,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,77,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,49,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,50,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,52,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,78,private static final Predicate<Calc> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,81,return RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,85,private static final Predicate<Project> PREDICATE2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,88,return RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,281,final Set<Integer> newSet = Sets.newHashSet(i);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,37,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,38,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,76,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,126,new RemoveEmptySingleRule(Project.class, Predicates.<Project>alwaysTrue(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,127,RelFactories.LOGICAL_BUILDER, "PruneEmptyProject");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,191,new RemoveEmptySingleRule(Aggregate.class, Aggregate.IS_NOT_GRAND_TOTAL,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,208,operand(Values.class, null, Values.IS_EMPTY, none()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,237,operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,256,this(clazz, Predicates.<R>alwaysTrue(), RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,265,operand(clazz, null, predicate,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,266,operand(Values.class, null, Values.IS_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,544,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,765,ExprCondition FALSE =
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,768,return false;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,339,final List<RexNode> expandedExprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,355,final List<RexLocalRef> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,480,final List<RexNode> constExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,481,List<Boolean> addCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,482,final List<RexNode> removableCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,496,final List<RexNode> reducedExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,543,final List<RexNode> reducedValues = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,34,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,103,ImmutableList.<RelNode>of(newSort));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,160,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,265,List<RelNode> inputsToUnion = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/DynamicRecordTypeImpl.java,24,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/type/DynamicRecordTypeImpl.java,74,return new SqlTypeExplicitPrecedenceList(Collections.<SqlTypeName>emptyList());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,57,.build(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,58,new CacheLoader<Object, RelDataType>() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,66,final ImmutableList.Builder<RelDataTypeField> list =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,67,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,69,list.add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,70,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,106,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,308,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,88,final List<Slot> slots = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,316,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,317,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,318,return typeFactory.copyType(protoType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,336,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,337,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,338,final RelDataType type = typeFactory.createSqlType(typeName);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,339,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,358,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,359,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,360,final RelDataType type = typeFactory.createSqlType(typeName, precision);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,361,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,380,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,381,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,382,final RelDataType type =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,383,typeFactory.createSqlType(typeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,384,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,51,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,77,new Function<RelDataTypeField, RexInputRef>() {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,78,public RexInputRef apply(RelDataTypeField input) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,79,return new RexInputRef(input.getIndex(), input.getType());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,126,return Lists.transform(rowType.getFieldList(), TO_INPUT_REF);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,272,ImmutableList.<RelCollation>of()));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,388,ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,41,this.id = Preconditions.checkNotNull(id);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,119,new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,120,public Expression field(BlockBuilder list, int index,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,121,Type storageType) {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,122,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rex/RexPermuteInputsShuttle.java,69,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rex/RexProgram.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,524,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,25,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,263,return Iterables.transform(iterable, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,264,public RexNode apply(@Nullable RexNode t) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,265,return t == null ? null : t.accept(RexShuttle.this);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,208,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,209,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,210,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,211,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,212,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,213,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,214,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,215,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,216,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,218,List<SqlNode> operandList =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,219,new ArrayList<SqlNode>(Arrays.asList(operands));
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,220,SqlDataTypeSpec typeSpec =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,221,SqlTypeUtil.convertTypeToSpec(call.getType());
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,222,operandList.add(typeSpec);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,223,return new SqlBasicCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,224,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,225,operandList.toArray(new SqlNode[operandList.size()]),
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,226,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,239,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,240,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,241,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,242,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,243,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,244,assert op instanceof SqlCaseOperator;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,245,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,246,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,247,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,248,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,250,SqlNodeList whenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,251,SqlNodeList thenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,252,int i = 0;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,253,while (i < operands.length - 1) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,254,whenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,255,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,256,thenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,257,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,259,SqlNode elseExpr = operands[i];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,260,SqlNode[] newOperands = new SqlNode[3];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,261,newOperands[0] = whenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,262,newOperands[1] = thenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,263,newOperands[2] = elseExpr;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,264,return op.createCall(null, SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,70,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,81,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,45,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,49,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,50,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,68,private static final Function<? super RexNode, ? extends RexNode> ADD_NOT =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,69,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,70,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,71,return new RexCall(input.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,72,ImmutableList.of(input));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,76,private static final Predicate1<RexNode> IS_FLAT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,77,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,78,public boolean apply(RexNode v1) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,79,return isFlat(v1);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,83,private static final Function<Object, String> TO_STRING =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,84,new Function<Object, String>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,85,public String apply(Object input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,86,return input.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,90,private static final Function<RexNode, RelDataType> TYPE_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,91,new Function<RexNode, RelDataType>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,92,public RelDataType apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,93,return input.getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,97,private static final Function<RelDataType, RelDataTypeFamily> FAMILY_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,98,new Function<RelDataType, RelDataTypeFamily>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,99,public RelDataTypeFamily apply(RelDataType input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,100,return input.getFamily();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,799,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,853,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,987,return Iterables.transform(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,988,nodes, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,989,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,990,return input.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1094,|| !exists(exprs,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1095,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1096,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1097,return isCallTo(expr, op);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1112,&& all(call.getOperands(), IS_FLAT_PREDICATE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1304,return Lists.transform(nodes, TYPE_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1308,return Lists.transform(types, FAMILY_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1419,return new RexCall(e.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1420,ImmutableList.of(e));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1822,switch (input.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1823,case EQUALS:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1824,RexCall call2 = (RexCall) input;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1827,&& call2.getOperands().get(1) instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1828,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1831,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1857,public static Function<RexNode, RexNode> notFn(final RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1858,return new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1859,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1864,: input.getKind() == SqlKind.NOT
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1866,: rexBuilder.makeCall(SqlStdOperatorTable.NOT, input);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2062,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2115,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2127,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2142,final Map<String, RexNode> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2157,List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2178,return Lists.transform(list, TO_STRING);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2200,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2217,return toDnf(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2220,return toDnf(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2230,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2316,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2319,for (RexNode node : project.getProjects()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2320,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2321,node.accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2323,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2326,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2334,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2335,filter.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2336,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2338,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2344,public static final Predicate<Join> JOIN_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2347,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2348,join.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2349,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2351,return true;
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,52,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,71,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,139,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,161,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,23,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,33,private static final Function1<?, ?> SLICE =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,34,new Function1<Object[], Object>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,35,public Object apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,36,return a0[0];
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,40,private static final Function1<Object[], Row> ARRAY_TO_ROW =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,41,new Function1<Object[], Row>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,42,public Row apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,43,return Row.asCopy(a0);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,53,return enumerable.select((Function1<E[], E>) SLICE);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,59,return enumerable.select(ARRAY_TO_ROW);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,66,return new Supplier<Enumerable<Row>>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,67,public Enumerable<Row> get() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,68,return toRow(supplier.get());
core/src/main/java/org/apache/calcite/runtime/Hook.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/runtime/Hook.java,67,private final List<Function<Object, Object>> handlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,70,private final ThreadLocal<List<Function<Object, Object>>> threadHandlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,71,new ThreadLocal<List<Function<Object, Object>>>() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,72,protected List<Function<Object, Object>> initialValue() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,91,public <T, R> Closeable add(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,93,handlers.add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,94,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,95,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,96,remove(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,102,private boolean remove(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,107,public <T, R> Closeable addThread(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,109,threadHandlers.get().add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,110,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,111,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,112,removeThread(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,118,private boolean removeThread(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,124,for (Function<Object, Object> handler : handlers) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,125,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,127,for (Function<Object, Object> handler : threadHandlers.get()) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,128,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,140,Closeable EMPTY =
core/src/main/java/org/apache/calcite/runtime/Hook.java,141,new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,142,public void close() {}
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,32,import javax.net.ssl.HostnameVerifier;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,34,import javax.net.ssl.SSLSession;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,56,httpsConn.setHostnameVerifier(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,57,new HostnameVerifier() {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,58,public boolean verify(String arg0, SSLSession arg1) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,59,return true;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,54,new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,55,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,56,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,57,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,58,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,59,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,60,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,62,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,64,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,65,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,66,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,67,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,68,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,70,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,76,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,77,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,78,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,79,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,80,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,81,if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,82,long v = resultSet.getLong(i + 1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,83,if (v == 0 && resultSet.wasNull()) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,84,list.add(null);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,86,list.add(v);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,89,list.add(resultSet.getObject(i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,92,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,94,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,223,return new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,224,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,225,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,226,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,228,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,229,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,233,assert columnCount == primitives.length;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,234,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,235,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,236,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,237,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,238,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,240,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,246,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,247,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,248,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,249,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,250,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,251,list.add(primitives[i].jdbcGet(resultSet, i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,253,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,255,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,72,new Function1<List<Object>, Enumerable<Object>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,73,public Enumerable<Object> apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,74,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,80,new Function1<Object[], Enumerable<Object[]>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,81,public Enumerable<Object[]> apply(Object[] lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,82,final List<Enumerator<Object>> enumerators = new ArrayList<>();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,83,for (Object list : lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,84,enumerators.add(Linq4j.enumerator((List) list));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,86,final Enumerator<List<Object>> product = Linq4j.product(enumerators);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,87,return new AbstractEnumerable<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,88,public Enumerator<Object[]> enumerator() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,89,return Linq4j.transform(product,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,90,new Function1<List<Object>, Object[]>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,91,public Object[] apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,92,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,107,new ThreadLocal<Map<String, AtomicLong>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,109,return new HashMap<String, AtomicLong>();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1502,return new Function1<Object, Enumerable<ComparableList<Comparable>>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1503,public Enumerable<ComparableList<Comparable>> apply(Object row) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1504,return p2(new Object[] { row }, fieldCounts, withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1505,inputTypes);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1510,return new Function1<Object, Enumerable<FlatLists.ComparableList<Comparable>>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1511,public Enumerable<FlatLists.ComparableList<Comparable>> apply(Object lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1512,return p2((Object[]) lists, fieldCounts, withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1513,inputTypes);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1533,Linq4j.enumerator(list),
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1534,new Function1<Comparable, List<Comparable>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1535,public List<Comparable> apply(Comparable a0) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1536,return FlatLists.of(a0);
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,30,com.google.common.base.Function<FunctionParameter, String> NAME_FN =
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,31,new com.google.common.base.Function<FunctionParameter, String>() {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,32,public String apply(FunctionParameter p) {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,33,return p.getName();
core/src/main/java/org/apache/calcite/schema/Schemas.java,38,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/schema/Schemas.java,63,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,64,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,65,CalciteSchema.TableEntry> TO_TABLE_ENTRY =
core/src/main/java/org/apache/calcite/schema/Schemas.java,66,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,67,CalciteSchema.TableEntry>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,68,public CalciteSchema.TableEntry apply(
core/src/main/java/org/apache/calcite/schema/Schemas.java,69,CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,70,final CalciteSchema.TableEntry starTable = entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,72,== Schema.TableType.STAR;
core/src/main/java/org/apache/calcite/schema/Schemas.java,73,return entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,77,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,78,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,79,Lattice> TO_LATTICE =
core/src/main/java/org/apache/calcite/schema/Schemas.java,80,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,81,Lattice>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,82,public Lattice apply(CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,83,return entry.getLattice();
core/src/main/java/org/apache/calcite/schema/Schemas.java,247,return table.scan(root, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/schema/Schemas.java,255,return table.scan(root, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/schema/Schemas.java,423,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,424,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,425,return table.getRowType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,434,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,435,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,436,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,447,return Lists.transform(list, TO_TABLE_ENTRY);
core/src/main/java/org/apache/calcite/schema/Schemas.java,455,return Lists.transform(list, TO_LATTICE);
core/src/main/java/org/apache/calcite/schema/Schemas.java,463,final List<CalciteSchema.LatticeEntry> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/schema/Schemas.java,495,String t = Preconditions.checkNotNull(base);
core/src/main/java/org/apache/calcite/schema/Schemas.java,530,list.add(Pair.<String, Schema>of(s.getName(), s));
core/src/main/java/org/apache/calcite/schema/Schemas.java,569,new PathImpl(ImmutableList.<Pair<String, Schema>>of());
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,73,this.initMethod = Preconditions.checkNotNull(initMethod);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,74,this.addMethod = Preconditions.checkNotNull(addMethod);
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,109,this.key = Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,66,this.lattice = Preconditions.checkNotNull(lattice);
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,35,private static final Function<SqlLiteral, BitString> F =
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,36,new Function<SqlLiteral, BitString>() {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,37,public BitString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,38,return ((SqlBinaryStringLiteral) literal).getBitString();
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,73,BitString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,34,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,158,return Lists.transform(operator.getParamNames(),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,159,new Function<String, SqlNode>() {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,160,public SqlNode apply(String paramName) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,161,for (SqlNode operand2 : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,162,final SqlCall call2 = (SqlCall) operand2;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,163,assert operand2.getKind() == SqlKind.ARGUMENT_ASSIGNMENT;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,164,final SqlIdentifier id = call2.operand(1);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,165,if (id.getSimple().equals(paramName)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,166,return call2.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,169,return DEFAULT_CALL;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,37,private static final Function<SqlLiteral, NlsString> F =
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,38,new Function<SqlLiteral, NlsString>() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,39,public NlsString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,40,return ((SqlCharStringLiteral) literal).getNlsString();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,86,NlsString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlDescribeSchema.java,68,return ImmutableNullableList.<SqlNode>of(schema);
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,79,return ImmutableNullableList.<SqlNode>of(table, column);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,618,private String databaseProductName;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,619,private String quoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,620,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,625,this.quoteString = quoteString;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,19,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,41,private static final Function1<Integer, String> ARG_FN =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,42,new Function1<Integer, String>() {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,43,public String apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,44,return "arg" + a0;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,163,return Functions.generate(paramTypes.size(), ARG_FN);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,39,private static final Function<String, String> STAR_TO_EMPTY =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,40,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,41,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,42,return s.equals("*") ? "" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,46,private static final Function<String, String> EMPTY_TO_STAR =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,47,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,48,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,49,return s.equals("") ? "*" : s.equals("*") ? "\"*\"" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,133,return new SqlIdentifier(Lists.transform(names, STAR_TO_EMPTY), null, pos,
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,167,String[] nameArray = names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,111,TimeUnitRange.of(Preconditions.checkNotNull(startUnit), endUnit);
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,593,this.order = Preconditions.checkNotNull(order);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,63,this.natural = Preconditions.checkNotNull(natural);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,64,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,66,this.conditionType = Preconditions.checkNotNull(conditionType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,70,Preconditions.checkNotNull(conditionType.symbolValue(JoinConditionType.class));
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,71,Preconditions.checkNotNull(joinType.symbolValue(JoinType.class));
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,175,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,298,operandList.toArray(new SqlNode[operandList.size()]));
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,113,final List<SqlNode> operandList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,40,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,43,import com.google.common.collect.Iterables;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,71,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,88,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,389,return input.getKind() == sqlKind;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,492,return operator.getSyntax() == syntax;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,504,SqlOperandCountRange od = operator.getOperandCountRange();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,505,return od.isValidCount(argTypes.size());
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,526,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,527,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,529,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,531,final List<RelDataType> permutedArgTypes;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,532,if (argNames != null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,535,final Map<Integer, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,536,for (Ord<String> argName : Ord.zip(argNames)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,537,final int i = function.getParamNames().indexOf(argName.e);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,538,if (i < 0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,539,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,541,map.put(i, argName.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,543,permutedArgTypes = Functions.generate(paramTypes.size(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,544,new Function1<Integer, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,545,public RelDataType apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,546,if (map.containsKey(a0)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,547,return argTypes.get(map.get(a0));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,549,return null;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,554,permutedArgTypes = Lists.newArrayList(argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,555,while (permutedArgTypes.size() < argTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,556,paramTypes.add(null);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,559,for (Pair<RelDataType, RelDataType> p
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,560,: Pair.zip(paramTypes, permutedArgTypes)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,561,final RelDataType argType = p.right;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,562,final RelDataType paramType = p.left;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,563,if (argType != null
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,564,&& !SqlTypeUtil.canCastFrom(paramType, argType, false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,565,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,568,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,592,sqlFunctions =
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,593,Lists.newArrayList(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,594,Iterables.filter(sqlFunctions,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,597,final List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,598,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,599,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,601,final RelDataType paramType = paramTypes.get(argType.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,602,return precList.compareTypePrecedence(paramType, bestMatch) >= 0;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,681,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,930,private final List<SqlNode> ancestors = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,947,if (predicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,954,if (postPredicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,244,return input instanceof SqlIdentifier
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,246,.equals(UPPER_HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,251,return input.getParserPosition().startsAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,21,import org.apache.calcite.adapter.enumerable.NotNullImplementor;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,24,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorHint.java,46,: names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,24,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,47,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,48,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,49,final List<RelDataType> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,50,for (int i = 1, n = opBinding.getOperandCount(); i < n; i++) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,51,if (i < n - 1) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,52,++i;
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,54,list.add(opBinding.getOperandType(i));
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,56,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,57,RelDataType type = typeFactory.leastRestrictive(list);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,58,if (opBinding.getOperandCount() % 2 == 1) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,59,type = typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,61,return type;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,23,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,59,ReturnTypes.cascade(ReturnTypes.ARG0, new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,60,public RelDataType transformType(SqlOperatorBinding binding,
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,61,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,63,SqlTypeTransform transform;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,64,if (binding.getOperandCount() < 3) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,65,transform = SqlTypeTransforms.FORCE_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,67,RelDataType defValueType = binding.getOperandType(2);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,69,? SqlTypeTransforms.FORCE_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,70,: SqlTypeTransforms.TO_NOT_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,72,return transform.transformType(binding, type);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,365,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,222,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,227,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,232,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,247,this.parserFactory = Preconditions.checkNotNull(factory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,283,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,284,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,285,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,286,this.parserFactory = Preconditions.checkNotNull(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,495,return list.toArray(new String[list.size()]);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,499,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1178,return names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,40,this.elementType = Preconditions.checkNotNull(elementType);
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,48,this.consistency = Preconditions.checkNotNull(consistency);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,105,this.allowedRules = Preconditions.checkNotNull(allowedRules);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,106,this.composition = Preconditions.checkNotNull(composition);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,58,return optional.apply(i);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,123,while (min > 0 && optional.apply(min - 1)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,21,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,42,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,43,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,44,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,45,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,46,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,47,final RelDataType unknownType =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,48,callBinding.getValidator().getUnknownType();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,49,RelDataType knownType = unknownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,50,for (SqlNode operand : callBinding.operands()) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,51,knownType = callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,52,callBinding.getScope(), operand);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,53,if (!knownType.equals(unknownType)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,54,break;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,63,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,64,operandTypes[i] = knownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,75,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,76,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,77,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,78,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,79,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,80,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,81,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,84,: returnType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,94,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,95,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,96,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,97,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,98,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,99,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,100,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,101,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,102,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,115,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,116,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,117,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,118,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,119,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,120,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,121,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,122,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,123,typeFactory.createSqlType(SqlTypeName.VARCHAR, 1024);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,28,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,29,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,64,Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,81,return family(families, Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,271,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,447,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,292,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,293,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,294,return opBinding.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,295,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,302,public static final SqlReturnTypeInference MULTISET =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,303,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,304,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,305,final SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,306,ExplicitOperatorBinding newBinding =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,307,new ExplicitOperatorBinding(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,308,opBinding,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,309,new AbstractList<RelDataType>() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,310,public RelDataType get(int index) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,311,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,313,.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,314,assert type != null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,315,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,318,public int size() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,319,return opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,323,RelDataType biggestElementType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,324,LEAST_RESTRICTIVE.inferReturnType(newBinding);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,325,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,326,biggestElementType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,327,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,375,public static final SqlReturnTypeInference DECIMAL_SCALE0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,376,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,377,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,378,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,379,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,380,if (SqlTypeUtil.isDecimal(type1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,381,if (type1.getScale() == 0) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,382,return type1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,384,int p = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,385,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,386,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,387,opBinding.getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,388,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,389,p,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,390,0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,391,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,392,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,394,.createTypeWithNullability(ret, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,396,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,399,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,415,public static final SqlReturnTypeInference DECIMAL_PRODUCT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,416,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,417,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,418,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,419,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,420,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,421,return typeFactory.createDecimalProduct(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,448,public static final SqlReturnTypeInference DECIMAL_QUOTIENT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,449,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,450,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,451,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,452,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,453,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,454,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,455,return typeFactory.createDecimalQuotient(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,492,public static final SqlReturnTypeInference DECIMAL_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,493,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,494,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,495,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,496,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,497,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,499,&& SqlTypeUtil.isExactNumeric(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,501,|| SqlTypeUtil.isDecimal(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,502,int p1 = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,503,int p2 = type2.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,504,int s1 = type1.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,505,int s2 = type2.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,507,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,508,int scale = Math.max(s1, s2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,509,final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,510,assert scale <= typeSystem.getMaxNumericScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,511,int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,512,precision =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,513,Math.min(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,514,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,515,typeSystem.getMaxNumericPrecision());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,516,assert precision > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,518,return typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,519,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,520,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,521,scale);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,525,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,563,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,569,final RelDataType argType0 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,570,final RelDataType argType1 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,572,final boolean containsAnyType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,574,|| (argType1.getSqlTypeName() == SqlTypeName.ANY);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,576,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,578,&& SqlTypeUtil.inCharOrBinaryFamilies(argType1))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,583,SqlCollation pickedCollation = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,584,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,585,&& SqlTypeUtil.inCharFamily(argType0)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,586,if (!SqlTypeUtil.isCharTypeComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,587,opBinding.collectOperandTypes().subList(0, 2))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,588,throw opBinding.newError(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,589,RESOURCE.typeNotComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,590,argType0.getFullTypeString(),
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,591,argType1.getFullTypeString()));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,594,pickedCollation =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,595,SqlCollation.getCoercibilityDyadicOperator(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,596,argType0.getCollation(), argType1.getCollation());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,597,assert null != pickedCollation;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,601,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,602,argType0.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,603,if (SqlTypeUtil.isBoundedVariableWidth(argType1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,604,typeName = argType1.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,607,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,608,int typePrecision;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,613,typePrecision = RelDataType.PRECISION_NOT_SPECIFIED;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,621,if (null != pickedCollation) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,622,RelDataType pickedType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,625,pickedType = argType0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,628,pickedType = argType1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,632,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,639,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,665,public static final SqlReturnTypeInference SCOPE =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,666,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,667,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,668,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,669,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,670,return callBinding.getValidator().getNamespace(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,671,callBinding.getCall()).getRowType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,680,public static final SqlReturnTypeInference MULTISET_PROJECT0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,681,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,682,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,683,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,684,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,685,final RelDataType recordMultisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,686,opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,687,RelDataType multisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,688,recordMultisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,689,assert multisetType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,690,+ recordMultisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,691,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,692,multisetType.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,693,assert fields.size() > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,694,final RelDataType firstColType = fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,695,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,696,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,697,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,705,public static final SqlReturnTypeInference MULTISET_RECORD =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,706,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,707,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,708,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,709,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,710,final RelDataType multisetType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,711,RelDataType componentType = multisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,712,assert componentType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,713,+ multisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,714,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,716,.add(SqlUtil.deriveAliasFromOrdinal(0), componentType).build();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,717,return typeFactory.createMultisetType(type, -1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,724,public static final SqlReturnTypeInference RECORD_TO_SCALAR =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,725,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,726,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,727,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,728,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,730,final RelDataType recordType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,732,boolean isStruct = recordType.isStruct();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,733,int fieldCount = recordType.getFieldCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,735,assert isStruct && (fieldCount == 1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,737,RelDataTypeField fieldType = recordType.getFieldList().get(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,738,assert fieldType != null
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,739,: "expected a record type with one field: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,740,+ recordType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,741,final RelDataType firstColType = fieldType.getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,742,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,743,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,744,true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,755,public static final SqlReturnTypeInference AGG_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,756,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,758,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,759,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,761,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,762,if (opBinding.getGroupCount() == 0 || opBinding.hasFilter()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,763,return typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,765,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,777,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,779,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,780,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,782,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,47,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,48,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,49,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,50,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,51,return SqlTypeUtil.makeNullableIfOperandsAre(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,52,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,54,Preconditions.checkNotNull(typeToTransform));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,63,public static final SqlTypeTransform TO_NULLABLE_ALL =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,64,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,65,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,66,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,67,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,68,return typeFactory.createTypeWithNullability(type,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,69,SqlTypeUtil.allNullable(opBinding.collectOperandTypes()));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,78,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,79,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,80,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,81,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,82,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,83,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,84,false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,93,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,94,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,95,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,96,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,97,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,98,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,99,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,161,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,162,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,163,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,164,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,165,return typeToTransform.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,176,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,177,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,178,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,179,return opBinding.getTypeFactory().createMultisetType(typeToTransform,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,180,-1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,190,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,191,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,192,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,193,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,194,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,195,typeToTransform.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,196,assert fields.size() == 1;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,197,return fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,66,List<RelDataType> argTypes2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,202,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1171,ImmutableList.<RelDataType>of(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1172,ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/sql/util/SqlShuttle.java,111,this.clonedOperands = operands.toArray(new SqlNode[operands.size()]);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,175,.acceptCall(this, call, true, ArgHandlerImpl.<Void>instance());
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,29,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,61,Suppliers.memoize(
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,62,new Supplier<Resolved>() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,63,public Resolved get() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,64,assert temporaryGroupExprList == null;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,65,temporaryGroupExprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,66,try {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,67,return resolve();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,69,temporaryGroupExprList = null;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,25,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,55,.where(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,56,new Predicate1<SqlMoniker>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,57,public boolean apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,58,return input.getType() == SqlMonikerType.SCHEMA;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,61,.select(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,62,new Function1<SqlMoniker, List<String>>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,63,public List<String> apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,64,return input.getFullyQualifiedNames();
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,67,.into(Sets.<List<String>>newHashSet());
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,40,this.names = Preconditions.checkNotNull(names);
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,45,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,32,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,59,new Function<FunctionParameter, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,60,public RelDataType apply(FunctionParameter input) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,61,return input.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,65,return Lists.transform(function.getParameters(), FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,24,import org.apache.calcite.linq4j.tree.ParameterExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,48,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,72,Preconditions.checkNotNull(paramTypes),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,79,FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,129,final List<Object> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,184,Expressions.lambda(bb.toBlock(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,185,Collections.<ParameterExpression>emptyList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,89,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,90,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,265,this.opTab = Preconditions.checkNotNull(opTab);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,266,this.catalogReader = Preconditions.checkNotNull(catalogReader);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,267,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,268,this.conformance = Preconditions.checkNotNull(conformance);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1713,this.nullCollation = Preconditions.checkNotNull(nullCollation);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3471,final Set<String> aliases = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4136,ImmutableList.<RelDataType>of(), null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4276,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4293,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4310,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4327,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,47,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,453,List<ImmutableBitSet> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,549,Set<ImmutableBitSet> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,574,final Set<List<ImmutableBitSet>> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,578,Set<ImmutableBitSet> flattenedBitSets = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,606,: ImmutableList.<SqlValidatorNamespace>of();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,693,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,694,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,695,return Util.first(original, "EXPR$") + attempt;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,700,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,701,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,702,return Util.first(original, "$f") + Math.max(size, attempt);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,39,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,44,this(validator, table, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,82,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,83,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,84,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,85,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,86,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,137,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,141,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,214,alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,215,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,216,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,217,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,218,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,222,final SqlCall newCall =
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,226,return cx.convertExpression(newCall);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,87,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,88,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,93,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,94,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,96,import com.google.common.collect.Multimaps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,117,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,164,private final HashSet<LogicalCorrelate> generatedCorRels = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,262,return new Function2<RelNode, RelNode, Void>() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,263,public Void apply(RelNode oldNode, RelNode newNode) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,268,if (oldNode instanceof LogicalCorrelate
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,269,&& newNode instanceof LogicalCorrelate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,270,LogicalCorrelate oldCor = (LogicalCorrelate) oldNode;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,271,CorrelationId c = oldCor.getCorrelationId();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,276,if (generatedCorRels.contains(oldNode)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,277,generatedCorRels.add((LogicalCorrelate) newNode);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,280,return null;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,319,projectPulledAboveLeftCorrelator, null, ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,330,ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,350,List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,465,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,534,Map<Integer, Integer> combinedMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,546,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,557,List<Integer> aggArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,646,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,768,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,836,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,998,ImmutableSet.<CorrelationId>of(), rel.getJoinType().toJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1030,ImmutableSet.<CorrelationId>of(), rel.getJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1133,List<Pair<RexNode, String>> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1181,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1289,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1718,List<RexNode> tmpRightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1719,List<RexNode> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1818,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1837,operand(LogicalAggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1887,final Set<Integer> isCountStar = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1925,List<RexNode> rightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1926,List<RexNode> tmpCorrelatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1936,List<RexFieldAccess> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1937,List<RexInputRef> correlatedInputRefJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2091,Pair.<RexNode, String>of(rexBuilder.makeLiteral(true),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2096,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2111,List<RexNode> joinOutputProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2142,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2153,argList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2176,List<RexNode> newAggOutputProjectList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2240,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2299,Set<Integer> isCount = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2455,Multimaps.newSortedSetMultimap(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2459,Bug.upgrade("use MultimapBuilder when we're on Guava-16");
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2460,return Sets.newTreeSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2564,this.r = Preconditions.checkNotNull(r);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,66,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,842,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,843,public ImmutableBitSet apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,844,return Mappings.apply(inputMapping, input);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,74,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,76,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,129,private final Map<RelNode, RelNode> oldToNewRelMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,200,final List<RexNode> structuringExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,309,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,310,public Integer apply(Integer oldInput) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,311,return getNewForOldInput(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,465,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,497,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,579,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,591,Pair.<RexNode, String>of(rexBuilder.makeLiteral(false),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,606,Collections.<String>nCopies(call.getOperands().size(), null),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,654,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,822,final List<Pair<RexNode, String>> flattenedExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,162,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,168,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,169,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,299,this.cluster = Preconditions.checkNotNull(cluster);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,745,final Map<Integer, Integer> squished = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,747,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,763,final List<Pair<RexNode, String>> undoProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1051,leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1129,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1432,new Function<Pair<RexNode, SqlNode>, RexNode>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1433,public RexNode apply(Pair<RexNode, SqlNode> pair) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1435,pair.left,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2192,joinCond, ImmutableSet.<CorrelationId>of(), joinType, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2204,final List<CorrelationId> correlNames = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2408,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2514,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3094,Collections.<RexNode>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3097,Collections.<String>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3476,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3774,final List<Integer> leftJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3978,return Pair.<RexNode, Map<String, Integer>>of(c, fields.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4429,private final Map<String, String> nameMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4911,ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,99,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,100,SqlStdOperatorTable.CHARACTER_LENGTH,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,102,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,103,SqlStdOperatorTable.IS_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,105,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,106,SqlStdOperatorTable.IS_NOT_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,110,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,111,SqlStdOperatorTable.CAST,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,112,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,113,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,114,return convertCast(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,117,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,118,SqlStdOperatorTable.IS_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,119,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,120,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,121,return convertIsDistinctFrom(cx, call, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,124,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,125,SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,126,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,127,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,128,return convertIsDistinctFrom(cx, call, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,132,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,133,SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,134,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,135,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,136,return convertPlus(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,149,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,150,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,151,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,152,final RexNode operand0 =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,153,cx.convertExpression(call.getOperandList().get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,154,final RexNode operand1 =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,155,cx.convertExpression(call.getOperandList().get(1));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,156,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,157,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,158,return rexBuilder.makeCall(type, SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,159,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,160,rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,161,operand0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,162,rexBuilder.makeCast(type, operand0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,163,rexBuilder.makeCast(type, operand1)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,168,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,169,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,170,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,171,final List<RexNode> operands = convertExpressionList(cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,172,call.getOperandList(), SqlOperandTypeChecker.Consistency.NONE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,173,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,174,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,176,for (int i = 1; i < operands.size() - 1; i += 2) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,177,exprs.add(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,178,RelOptUtil.isDistinctFrom(rexBuilder, operands.get(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,179,operands.get(i), true));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,180,exprs.add(operands.get(i + 1));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,182,if (operands.size() % 2 == 0) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,183,exprs.add(Util.last(operands));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,187,return rexBuilder.makeCall(type, SqlStdOperatorTable.CASE, exprs);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,192,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,193,SqlStdOperatorTable.NOT_LIKE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,194,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,195,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,196,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,197,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,198,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,199,SqlStdOperatorTable.LIKE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,200,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,201,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,202,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,207,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,208,SqlStdOperatorTable.NOT_SIMILAR_TO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,209,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,210,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,211,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,212,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,213,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,214,SqlStdOperatorTable.SIMILAR_TO.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,215,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,216,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,217,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,222,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,223,SqlStdOperatorTable.UNARY_PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,224,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,225,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,226,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,227,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,232,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,233,SqlStdOperatorTable.AS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,234,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,235,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,236,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,237,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,242,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,243,SqlStdOperatorTable.SQRT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,244,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,245,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,246,SqlNode expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,247,SqlStdOperatorTable.POWER.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,248,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,249,call.operand(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,250,SqlLiteral.createExactNumeric(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,252,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,272,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,273,SqlStdOperatorTable.AVG,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,275,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,276,SqlStdOperatorTable.STDDEV_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,278,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,279,SqlStdOperatorTable.STDDEV_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,281,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,282,SqlStdOperatorTable.VAR_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,284,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,285,SqlStdOperatorTable.VAR_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,299,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,300,SqlStdOperatorTable.ELEMENT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,301,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,302,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,303,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,304,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,305,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,306,cx.getValidator().getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,307,if (!type.getComponentType().isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,308,return cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,309,SqlStdOperatorTable.ELEMENT_SLICE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,310,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,311,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,315,return StandardConvertletTable.this.convertCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,316,cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,317,call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,324,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,325,SqlStdOperatorTable.ELEMENT_SLICE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,326,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,327,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,328,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,329,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,330,final RexNode expr =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,331,cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,332,SqlStdOperatorTable.ELEMENT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,333,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,334,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,335,return cx.getRexBuilder().makeFieldAccess(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,336,expr,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,337,0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,845,ImmutableList.<RexNode>of(cx.getRexBuilder().makeLiteral(key)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,865,new RexCallBinding(cx.getTypeFactory(), fun, exprs, ImmutableList.<RelCollation>of()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,951,final List<RexNode> exprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,979,final List<RelDataType> nonCharacterTypes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,196,this.context = Preconditions.checkNotNull(c);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,201,Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,202,this.executor = executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,208,this.convertletTable = Preconditions.checkNotNull(convertletTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,213,this.operatorTable = Preconditions.checkNotNull(operatorTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,232,this.parserConfig = Preconditions.checkNotNull(parserConfig);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,251,return programs(Programs.listOf(Preconditions.checkNotNull(ruleSets)));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,265,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/tools/Programs.java,65,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/Programs.java,77,private static final Function<RuleSet, Program> RULE_SET_TO_PROGRAM =
core/src/main/java/org/apache/calcite/tools/Programs.java,78,new Function<RuleSet, Program>() {
core/src/main/java/org/apache/calcite/tools/Programs.java,79,public Program apply(RuleSet ruleSet) {
core/src/main/java/org/apache/calcite/tools/Programs.java,80,return of(ruleSet);
core/src/main/java/org/apache/calcite/tools/Programs.java,156,return Lists.transform(Arrays.asList(ruleSets), RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,161,return Lists.transform(ruleSets, RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,192,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,193,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,195,final HepPlanner hepPlanner = new HepPlanner(hepProgram,
core/src/main/java/org/apache/calcite/tools/Programs.java,196,null, noDag, null, RelOptCostImpl.FACTORY);
core/src/main/java/org/apache/calcite/tools/Programs.java,198,List<RelMetadataProvider> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Programs.java,199,if (metadataProvider != null) {
core/src/main/java/org/apache/calcite/tools/Programs.java,200,list.add(metadataProvider);
core/src/main/java/org/apache/calcite/tools/Programs.java,202,hepPlanner.registerMetadataProviders(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,203,RelMetadataProvider plannerChain =
core/src/main/java/org/apache/calcite/tools/Programs.java,204,ChainedRelMetadataProvider.of(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,205,rel.getCluster().setMetadataProvider(plannerChain);
core/src/main/java/org/apache/calcite/tools/Programs.java,207,hepPlanner.setRoot(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,208,return hepPlanner.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,221,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,222,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,224,final int joinCount = RelOptUtil.countJoins(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,225,final Program program;
core/src/main/java/org/apache/calcite/tools/Programs.java,226,if (joinCount < minJoinCount) {
core/src/main/java/org/apache/calcite/tools/Programs.java,227,program = ofRules(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,234,.build();
core/src/main/java/org/apache/calcite/tools/Programs.java,235,final Program program1 =
core/src/main/java/org/apache/calcite/tools/Programs.java,236,of(hep, false, DefaultRelMetadataProvider.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,242,final List<RelOptRule> list = Lists.newArrayList(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,243,list.removeAll(
core/src/main/java/org/apache/calcite/tools/Programs.java,244,ImmutableList.of(JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,245,JoinAssociateRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,246,JoinPushThroughJoinRule.LEFT,
core/src/main/java/org/apache/calcite/tools/Programs.java,247,JoinPushThroughJoinRule.RIGHT));
core/src/main/java/org/apache/calcite/tools/Programs.java,248,list.add(bushy
core/src/main/java/org/apache/calcite/tools/Programs.java,249,? MultiJoinOptimizeBushyRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,250,: LoptOptimizeJoinRule.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,251,final Program program2 = ofRules(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,253,program = sequence(program1, program2);
core/src/main/java/org/apache/calcite/tools/Programs.java,272,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,273,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,275,return null;
core/src/main/java/org/apache/calcite/tools/Programs.java,289,new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,290,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,292,final RelNode rootRel2 =
core/src/main/java/org/apache/calcite/tools/Programs.java,294,? rel
core/src/main/java/org/apache/calcite/tools/Programs.java,295,: planner.changeTraits(rel, requiredOutputTraits);
core/src/main/java/org/apache/calcite/tools/Programs.java,296,assert rootRel2 != null;
core/src/main/java/org/apache/calcite/tools/Programs.java,298,planner.setRoot(rootRel2);
core/src/main/java/org/apache/calcite/tools/Programs.java,299,final RelOptPlanner planner2 = planner.chooseDelegate();
core/src/main/java/org/apache/calcite/tools/Programs.java,300,final RelNode rootRel3 = planner2.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,301,assert rootRel3 != null : "could not implement exp";
core/src/main/java/org/apache/calcite/tools/Programs.java,302,return rootRel3;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,66,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,67,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,104,private static final Function<RexNode, String> FN_TYPE =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,105,new Function<RexNode, String>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,106,public String apply(RexNode input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,107,return input + ": " + input.getType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,193,return new RelBuilderFactory() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,194,public RelBuilder create(RelOptCluster cluster, RelOptSchema schema) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,195,return new RelBuilder(context, cluster, schema);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,354,Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,355,Preconditions.checkNotNull(fieldName);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,458,+ "; operands: " + Lists.transform(operandList, FN_TYPE));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,565,return groupKey(ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,617,new Function<ImmutableBitSet, ImmutableList<RexNode>>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,618,public ImmutableList<RexNode> apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,619,return fields(ImmutableIntList.of(input.toArray()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,753,return project(nodes, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1034,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1038,return join(joinType, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1281,return sortLimit(offset, fetch, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1431,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1441,Lists.transform(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1442,aggregateCalls, new Function<AggregateCall, AggCall>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1443,public AggCall apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1444,return new AggCallImpl2(input);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1488,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1529,this.aggregateCall = Preconditions.checkNotNull(aggregateCall);
core/src/main/java/org/apache/calcite/util/BitSets.java,88,return new Iterable<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,89,public Iterator<Integer> iterator() {
core/src/main/java/org/apache/calcite/util/BitSets.java,90,return new Iterator<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,91,int i = bitSet.nextSetBit(0);
core/src/main/java/org/apache/calcite/util/BitSets.java,93,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/BitSets.java,94,return i >= 0;
core/src/main/java/org/apache/calcite/util/BitSets.java,97,public Integer next() {
core/src/main/java/org/apache/calcite/util/BitSets.java,98,int prev = i;
core/src/main/java/org/apache/calcite/util/BitSets.java,99,i = bitSet.nextSetBit(i + 1);
core/src/main/java/org/apache/calcite/util/BitSets.java,100,return prev;
core/src/main/java/org/apache/calcite/util/BitSets.java,103,public void remove() {
core/src/main/java/org/apache/calcite/util/BitSets.java,104,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/Compatible.java,25,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/util/Compatible.java,73,new Class<?>[] {Compatible.class},
core/src/main/java/org/apache/calcite/util/Compatible.java,74,new InvocationHandler() {
core/src/main/java/org/apache/calcite/util/Compatible.java,76,throws Throwable {
core/src/main/java/org/apache/calcite/util/Compatible.java,77,if (method.getName().equals("asMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,79,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,80,final Method guavaMethod = Maps.class.getMethod(
core/src/main/java/org/apache/calcite/util/Compatible.java,81,method.getName(), method.getParameterTypes());
core/src/main/java/org/apache/calcite/util/Compatible.java,82,return guavaMethod.invoke(null, args);
core/src/main/java/org/apache/calcite/util/Compatible.java,84,Set set = (Set) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,85,Function function = (Function) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,86,return CompatibleGuava11.asMap(set, function);
core/src/main/java/org/apache/calcite/util/Compatible.java,89,if (method.getName().equals("navigableSet")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,90,ImmutableSortedSet set = (ImmutableSortedSet) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,91,return CompatibleGuava11.navigableSet(set);
core/src/main/java/org/apache/calcite/util/Compatible.java,93,if (method.getName().equals("navigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,94,ImmutableSortedMap map = (ImmutableSortedMap) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,95,return CompatibleGuava11.navigableMap(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,97,if (method.getName().equals("immutableNavigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,98,Map map = (Map) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,99,ImmutableSortedMap sortedMap = ImmutableSortedMap.copyOf(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,100,return CompatibleGuava11.navigableMap(sortedMap);
core/src/main/java/org/apache/calcite/util/Compatible.java,102,if (method.getName().equals("setSchema")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,103,Connection connection = (Connection) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,104,String schema = (String) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,106,connection.getClass().getMethod("setSchema", String.class);
core/src/main/java/org/apache/calcite/util/Compatible.java,107,return method1.invoke(connection, schema);
core/src/main/java/org/apache/calcite/util/Compatible.java,109,if (method.getName().equals("getParameterName")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,110,final Method m = (Method) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,111,final int i = (Integer) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,112,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,113,final Method method1 =
core/src/main/java/org/apache/calcite/util/Compatible.java,114,m.getClass().getMethod("getParameters");
core/src/main/java/org/apache/calcite/util/Compatible.java,115,Object parameters = method1.invoke(m);
core/src/main/java/org/apache/calcite/util/Compatible.java,116,final Object parameter = Array.get(parameters, i);
core/src/main/java/org/apache/calcite/util/Compatible.java,117,final Method method3 = parameter.getClass().getMethod("getName");
core/src/main/java/org/apache/calcite/util/Compatible.java,118,return method3.invoke(parameter);
core/src/main/java/org/apache/calcite/util/Compatible.java,120,return "arg" + i;
core/src/main/java/org/apache/calcite/util/Compatible.java,123,return null;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,20,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,41,import static com.google.common.base.Preconditions.checkNotNull;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,65,return super.retainAll(checkNotNull(c)); // GWT compatibility
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,81,checkNotNull(collection); // for GWT
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,231,this.set = checkNotNull(set);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,232,this.function = checkNotNull(function);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,328,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,341,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,378,if (com.google.common.base.Objects.equal(o, entry.getValue())) {
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,389,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,391,Set<K> toRemove = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,403,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,405,Set<K> toRetain = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,437,this.backingIterator = checkNotNull(backingIterator);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,27,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,51,public static final Comparator<ImmutableBitSet> COMPARATOR =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,52,new Comparator<ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,53,public int compare(ImmutableBitSet o1, ImmutableBitSet o2) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,54,if (o1.equals(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,55,return 0;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,57,if (o1.contains(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,58,return -1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,60,if (o2.contains(o1)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,61,return 1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,63,return o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,84,public static final Function<? super BitSet, ImmutableBitSet> FROM_BIT_SET =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,85,new Function<BitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,86,public ImmutableBitSet apply(BitSet input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,87,return ImmutableBitSet.of(BitSets.toIter(input));
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,258,List<List<ImmutableBitSet>> singletons = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,259,for (Integer bit : this) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,264,new Function<List<ImmutableBitSet>, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,265,public ImmutableBitSet apply(List<ImmutableBitSet> input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,266,return ImmutableBitSet.union(input);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,466,public int compareTo(ImmutableBitSet o) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,860,return Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,861,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,862,public ImmutableBitSet apply(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,863,return bitSet.permute(map);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,893,Maps.newTreeMap();
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,205,private final List<E> contents = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,94,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,95,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,96,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,97,if (!exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,98,bounds[0] = Math.min(bounds[0], start);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,99,bounds[1] = Math.max(bounds[1], end);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,139,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,140,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,141,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,142,if (start <= n && n <= end) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,143,bs[0] = !exclude;
core/src/main/java/org/apache/calcite/util/Pair.java,227,return new Iterable<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,228,public Iterator<Pair<K, V>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,229,final Iterator<? extends K> kIterator = ks.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,230,final Iterator<? extends V> vIterator = vs.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,232,return new Iterator<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,233,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,234,return kIterator.hasNext() && vIterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,238,public Pair<K, V> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,239,return (Pair<K, V>) Pair.of(kIterator.next(), vIterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,242,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,243,kIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,244,vIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,286,return new Iterable<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,287,public Iterator<L> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,288,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,289,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,290,return new Iterator<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,291,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,292,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,295,public L next() {
core/src/main/java/org/apache/calcite/util/Pair.java,296,return iterator.next().getKey();
core/src/main/java/org/apache/calcite/util/Pair.java,299,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,300,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,317,return new Iterable<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,318,public Iterator<R> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,319,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,320,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,321,return new Iterator<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,322,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,323,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,326,public R next() {
core/src/main/java/org/apache/calcite/util/Pair.java,327,return iterator.next().getValue();
core/src/main/java/org/apache/calcite/util/Pair.java,330,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,331,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,374,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,375,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,376,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,377,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,378,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/util/Pair.java,380,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,381,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,382,T previous = first;
core/src/main/java/org/apache/calcite/util/Pair.java,384,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,385,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,388,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,389,final T current = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,390,final Pair<T, T> pair = of(previous, current);
core/src/main/java/org/apache/calcite/util/Pair.java,391,previous = current;
core/src/main/java/org/apache/calcite/util/Pair.java,392,return pair;
core/src/main/java/org/apache/calcite/util/Pair.java,395,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,396,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/Pair.java,414,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,415,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,416,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,417,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,418,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/util/Pair.java,420,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,421,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,422,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,423,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,426,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,427,return of(first, iterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,430,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,431,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,504,final Deque<E> unseen = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,505,unseen.addAll(getNonChildren());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,295,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,436,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,53,return new Memo() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,54,public void close() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,55,if (previous == initialValue) {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,56,remove();
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,58,set(previous);
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,43,this.elements = Preconditions.checkNotNull(elements);
core/src/main/java/org/apache/calcite/util/Util.java,31,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/Util.java,89,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/util/Util.java,136,.build(
core/src/main/java/org/apache/calcite/util/Util.java,137,new CacheLoader<Class, Map<String, Enum>>() {
core/src/main/java/org/apache/calcite/util/Util.java,140,return enumConstants(clazz);
core/src/main/java/org/apache/calcite/util/Util.java,1719,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1720,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1721,return cast(iterable.iterator(), clazz);
core/src/main/java/org/apache/calcite/util/Util.java,1747,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1748,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1749,return new Filterator<>(iterable.iterator(), includeFilter);
core/src/main/java/org/apache/calcite/util/Util.java,2015,return v0 != null ? v0 : ImmutableList.<T>of();
core/src/main/java/org/apache/calcite/util/Util.java,2274,public static <K, V> Map<K, V> asIndexMap(
core/src/main/java/org/apache/calcite/util/Util.java,2278,Collections2.transform(values,
core/src/main/java/org/apache/calcite/util/Util.java,2279,new Function<V, Map.Entry<K, V>>() {
core/src/main/java/org/apache/calcite/util/Util.java,2280,public Map.Entry<K, V> apply(@Nullable V input) {
core/src/main/java/org/apache/calcite/util/Util.java,2281,return Pair.of(function.apply(input), input);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,555,translationVector.addAll(Collections.<String>nCopies(count, null));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,566,translationVector.toArray(new String[translationVector.size()]);
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,44,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,45,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,46,return new BreadthFirstIterator<V, E>(graph, root);
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,48,return create(DefaultEdge.<V>factory());
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,43,return new DirectedGraph.EdgeFactory<V, DefaultEdge>() {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,44,public DefaultEdge createEdge(V v0, V v1) {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,45,return new DefaultEdge(v0, v1);
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,19,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,20,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,45,final List<V> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,46,buildListRecurse(list, Sets.<V>newHashSet(), graph, start);
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,45,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,46,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,47,return new TopologicalOrderIterator<V, E>(graph);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,64,setStringArray(list.toArray(new String[list.size()]));
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,93,return argsList.toArray(new String[argsList.size()]);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,101,return fileNameList.toArray(new String[fileNameList.size()]);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,24,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,222,Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,223,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,224,public ImmutableBitSet apply(ImmutableBitSet input1) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,225,return Mappings.apply(mapping, input1);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,349,Function<Integer, Integer> function,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,609,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,610,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,611,int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,613,? null
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,614,: mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,655,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,656,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,657,int target = mapping.getTargetOpt(source);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,658,return target < 0 ? null : target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,684,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,685,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,686,final int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,687,if (source2 < 0 || source2 >= mapping.getSourceCount()) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,688,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,690,int target = mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,691,if (target < 0) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,692,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,694,return target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,719,return new Iterable<IntPair>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,720,public Iterator<IntPair> iterator() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,721,return invert(pairs.iterator());
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,60,new ThreadLocal<Function2<Void, File, String>>() {
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,62,return Functions.ignore2();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,36,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,64,this.url = Preconditions.checkNotNull(url);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,65,this.coordinatorUrl = Preconditions.checkNotNull(coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,63,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,550,this.queryType = Preconditions.checkNotNull(queryType);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,551,this.queryString = Preconditions.checkNotNull(queryString);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,33,import com.google.common.base.Predicate;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,23,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,34,import javax.annotation.Nonnull;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,55,this.url = Preconditions.checkNotNull(url);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,56,this.coordinatorUrl = Preconditions.checkNotNull(coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,70,this.timestampFieldName = Preconditions.checkNotNull(timestampFieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,71,this.schema = Preconditions.checkNotNull(schema);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,72,this.dataSource = Preconditions.checkNotNull(dataSource);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,124,ImmutableList.<RelNode>of(scan));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,305,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[fieldTypes.size()]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,25,import java.io.FilenameFilter;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,69,File[] files = directoryFile.listFiles(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,70,new FilenameFilter() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,71,public boolean accept(File dir, String name) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,72,final String nameSansGz = trim(name, ".gz");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,74,|| nameSansGz.endsWith(".json");
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,83,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,84,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,85,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,89,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,90,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,91,String s = region(c) + "";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,92,return s.length() == 1 ? " " + s : s;
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,116,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,117,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,118,return solutionSet.contains(c) ? "* " : "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,355,CellContent SPACE = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,356,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,357,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,24,import org.apache.calcite.linq4j.function.Function1;
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,105,new Function1<String, Object[]>() {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,106,public Object[] apply(String s) {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,107,return new Object[] {s};
linq4j/src/main/java/org/apache/calcite/linq4j/DefaultQueryable.java,54,this(QueryableRecorder.<T>instance());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,38,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,373,return (int) longCount(enumerable, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,405,return Linq4j.asEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,406,new Iterable<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,407,public Iterator<TSource> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,408,return new Iterator<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,410,private boolean nonFirst;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,412,private Iterator<TSource> rest;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,414,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,415,return !nonFirst || rest.hasNext();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,418,public TSource next() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,419,if (nonFirst) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,420,return rest.next();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,422,final TSource first = os.current();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,423,nonFirst = true;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,424,rest = Linq4j.enumeratorIterator(os);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,425,return first;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,429,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,430,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,683,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,684,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,685,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,701,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,702,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,703,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,719,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,720,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,721,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,739,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,740,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,741,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,909,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,950,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1326,return EnumerableDefaults.where(outer.enumerator(),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1327,new Predicate1<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1328,public boolean apply(TSource v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1329,final TKey key = outerKeySelector.apply(v0);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1330,return innerLookup.contains(key);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1347,final List<TResult> result = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1515,return longCount(source, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1674,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MIN;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1680,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MAX;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1809,Functions.<TSource, TResult>ofTypePredicate(clazz));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1833,Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1844,return orderBy(source, keySelector, Collections.<TKey>reverseOrder());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2307,return skipWhile(source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2308,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2310,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2323,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2451,source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2452,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2454,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2466,source, new Predicate2<TSource, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2467,public boolean apply(TSource v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2469,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2481,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2533,Extensions.<TKey>comparableComparator(), false);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2554,Extensions.<TKey>comparableComparator(), true);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2576,return toMap(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2587,return toMap(source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2658,return toLookup(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2670,source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2764,return new Function1<Wrapped<TSource>, TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2765,public TSource apply(Wrapped<TSource> a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2766,return a0.element;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2773,return new Function1<TSource, Wrapped<TSource>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2774,public Wrapped<TSource> apply(TSource a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2775,return Wrapped.upAs(comparer, a0);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3294,ImmutableList.of(Linq4j.<Object>enumerator(lefts),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3295,Linq4j.<Object>enumerator(rights)));
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,114,new Function2<BigDecimal, BigDecimal, BigDecimal>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,115,public BigDecimal apply(BigDecimal v1, BigDecimal v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,116,return v1.add(v2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,121,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,122,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,123,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,128,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,129,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,130,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,135,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,136,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,137,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,142,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,143,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,144,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,148,static final Function2 COMPARABLE_MIN =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,149,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,150,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,151,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,155,static final Function2 COMPARABLE_MAX =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,156,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,157,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,158,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,163,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,164,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,165,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,170,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,171,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,172,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,177,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,178,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,179,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,184,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,185,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,186,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,191,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,192,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,193,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,198,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,199,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,200,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,205,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,206,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,207,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,212,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,213,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,214,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,231,private static final Comparator<Comparable> COMPARABLE_COMPARATOR =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,232,new Comparator<Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,233,public int compare(Comparable o1, Comparable o2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,235,return o1.compareTo(o2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,241,return (Comparator<T>) (Comparator) COMPARABLE_COMPARATOR;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,19,import com.google.common.base.Preconditions;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,36,this.key = Preconditions.checkNotNull(key);
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,37,this.values = Preconditions.checkNotNull(values);
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,21,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,393,return new Iterable<List<T>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,394,public Iterator<List<T>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,395,final List<Enumerator<T>> enumerators = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,396,for (Iterable<T> iterable : iterables) {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,397,enumerators.add(iterableEnumerator(iterable));
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,399,return enumeratorIterator(
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,400,new CartesianProductListEnumerator<>(enumerators));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,55,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,56,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,57,return zip(iterable.iterator());
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,117,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,118,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,119,return new Iterator<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,120,int i = elementList.size() - 1;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,122,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,123,return i >= 0;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,126,public Ord<E> next() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,127,return Ord.of(i, elementList.get(i--));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,130,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,131,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,900,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1036,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,31,Function1<Object, Object> IDENTITY = new Function1<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,32,public Object apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,33,return v0;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,41,Collections.<Class<? extends Function>, Class>unmodifiableMap(
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,78,private static final Function1 CONSTANT_NULL_FUNCTION1 =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,79,new Function1() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,80,public Object apply(Object s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,81,return null;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,86,new Function1<Object, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,87,public String apply(Object a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,88,return a0.toString();
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,112,return new Function1<T, R>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,113,public R apply(T s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,114,return r;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,198,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,199,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,200,return v1 == null || clazz.isInstance(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,207,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,208,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,209,return p1.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,219,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,220,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,221,return function.apply(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,231,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,232,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,233,return function.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,264,return new Function1<T1, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,265,public Integer apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,266,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,276,return new Function1<T1, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,277,public Double apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,278,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,288,return new Function1<T1, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,289,public Long apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,290,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,300,return new Function1<T1, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,301,public Float apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,302,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,30,Predicate1<Object> TRUE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,31,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,32,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,41,Predicate1<Object> FALSE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,42,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,43,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,31,Predicate2<Object, Object> TRUE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,32,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,33,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,42,Predicate2<Object, Object> FALSE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,43,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,44,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,46,new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,47,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,48,return new DeterministicCodeOptimizer(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,98,return new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,99,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,100,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,101,return constructor.newInstance(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,103,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,106,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,109,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,20,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,152,return writer.append("new java.math.BigDecimal(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,153,bigDecimal.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,158,return writer.append("new java.math.BigInteger(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,159,bigInteger.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,178,Lists.transform(Arrays.asList(value.getClass().getFields()),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,179,new Function<Field, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,180,public Object apply(Field field) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,181,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,182,return field.get(value);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,184,throw new RuntimeException(e);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,67,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,68,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,69,public String apply(ParameterExpression parameter) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,70,final String modifiers =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,71,Modifier.toString(parameter.modifier);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,73,+ Types.className(parameter.getType()) + " "
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,74,+ parameter.name;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeterministicCodeOptimizer.java,71,ImmutableSet.<Class>of(Byte.class, Boolean.class, Short.class,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,527,return new ConditionalExpression(Arrays.<Node>asList(test, ifFalse, ifTrue),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,965,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,974,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue, ifFalse));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1912,return new_(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1913,constructor.getDeclaringClass(), Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1921,return new_(type, Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2835,return new TryStatement(body, Collections.<CatchBlock>emptyList(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2836,finally_);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,22,import java.lang.reflect.InvocationHandler;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,28,import java.util.Collections;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,62,this((Class) function.getClass(), function, null,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,63,Collections.<ParameterExpression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,78,return new Invokable() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,79,public Object dynamicInvoke(Object... args) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,80,final Evaluator evaluator = new Evaluator();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,81,for (int i = 0; i < args.length; i++) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,82,evaluator.push(parameterList.get(i), args[i]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,84,return evaluator.evaluate(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,98,new Class[]{Types.toClass(type)},
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,99,new InvocationHandler() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,101,throws Throwable {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,102,return x.dynamicInvoke(args);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,223,return ((Class) type).getDeclaredMethods()[0];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,68,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,69,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,70,public String apply(ParameterExpression a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,71,return a0.declString();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,19,import com.google.common.base.Preconditions;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,35,this.body = Preconditions.checkNotNull(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,36,this.catchBlocks = Preconditions.checkNotNull(catchBlocks);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,156,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,164,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,560,return typeArguments.toArray(new Type[typeArguments.size()]);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,83,return (Map) a0;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,92,return convert(a0.get(fieldName), fieldClass);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,104,Object[] objects = new Object[fields.size()];
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,105,for (int i = 0; i < fields.size(); i++) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,106,final Map.Entry<String, Class> field = fields.get(i);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,107,final String name = field.getKey();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,108,objects[i] = convert(a0.get(name), field.getValue());
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,110,return objects;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,42,import com.google.common.base.Function;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,154,return Lists.transform(values,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,155,new Function<T, Expression>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,156,public Expression apply(T a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,157,return Expressions.constant(a0);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,26,import com.google.common.base.Preconditions;
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,139,this.op = Preconditions.checkNotNull(op);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,140,this.pos = Preconditions.checkNotNull(pos);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,157,this.target = Preconditions.checkNotNull(target);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,167,this.name = Preconditions.checkNotNull(name);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,335,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,345,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,355,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,410,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,468,this.id = Preconditions.checkNotNull(id);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,469,this.type = Preconditions.checkNotNull(type);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,33,import org.apache.calcite.util.ImmutableBitSet;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,42,import java.util.Collections;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,115,return Statistics.of(rowCount, Collections.<ImmutableBitSet>emptyList());
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,168,return new Iterable<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,169,public Iterator<E> iterator() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,170,return new Iterator<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,171,public boolean hasNext() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,172,return enumeration.hasMoreElements();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,175,public E next() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,176,return enumeration.nextElement();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,179,public void remove() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,180,throw new UnsupportedOperationException();
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,93,primitives.toArray(new Primitive[primitives.size()])));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,397,file.map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,398,new Function<String, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,400,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,405,file.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,406,new Function<String, String>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,408,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,412,).map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,413,new Function<Tuple2<String, Iterable<String>>, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,415,return pair._1() + ":" + Iterables.size(pair._2());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,434,rdd.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,435,new Function<Integer, Integer>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,436,public Integer call(Integer integer) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,437,return integer % 2;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,441,file.flatMap(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,442,new FlatMapFunction<String, Pair<String, Integer>>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,444,if (!x.startsWith("a")) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,447,return Collections.singletonList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,417,return convert;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,120,arguments.add(null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1793,boolean forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1847,SqlValidatorScope usingScope2 = usingScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1848,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1849,usingScope2 = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1855,usingScope2,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1860,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1867,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1887,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1923,forceLeftNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1927,final SqlValidatorScope rightParentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1928,if (rightIsLateral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1929,rightParentScope = joinScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1931,rightParentScope = parentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1935,rightParentScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1941,forceRightNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1956,registerNamespace(usingScope, alias, newNs, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1967,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1980,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1992,case UNNEST:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1999,usingScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2022,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2032,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2045,forceNullable);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2233,boolean correlInCurrentScope = ancestorScope == bb.scope;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1432,cx.convertExpression(call.operand(2)),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1436,unitLiteral.getParserPosition())),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1437,cx.convertExpression(call.operand(1))));
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,405,final String schemaName = con.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,448,final String schemaName = connection.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,95,Meta.Signature signature, TimeZone timeZone, Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,370,ImmutableList.of(new MetaCatalog(connection.getCatalog())));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,379,Enumerable<MetaSchema> schemas(String catalog) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,387,connection.getCatalog(),
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,48,Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,70,Iterable<Object> iterable) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,111,CalciteConnectionImpl getCalciteConnection() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,41,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,53,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,107,final RelOptLattice lattice = call.getPlanner().getLattice(table);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,111,lattice.getAggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,112,call.getPlanner(), aggregate.getGroupSet(), measures);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,27,import org.apache.commons.dbcp.BasicDataSource;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,232,childPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,233,rightPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,43,SqlStdOperatorTable.MULTISET_EXCEPT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,45,SqlStdOperatorTable.MULTISET_INTERSECT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,47,SqlStdOperatorTable.MULTISET_UNION_ALL,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,96,public static final SqlMultisetSetOperator MULTISET_UNION =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,97,new SqlMultisetSetOperator("MULTISET UNION", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,102,public static final SqlMultisetSetOperator MULTISET_UNION_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,108,public static final SqlMultisetSetOperator MULTISET_EXCEPT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,109,new SqlMultisetSetOperator("MULTISET EXCEPT", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,114,public static final SqlMultisetSetOperator MULTISET_EXCEPT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,120,public static final SqlMultisetSetOperator MULTISET_INTERSECT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,121,new SqlMultisetSetOperator("MULTISET INTERSECT", 18, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,126,public static final SqlMultisetSetOperator MULTISET_INTERSECT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1598,public static final SqlFunction FUSION =
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,22,INSTANCE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1866,final Set<SqlKind> flags = EnumSet.noneOf(SqlKind.class);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1868,flags.clear();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1869,RexNode e = bb.convertSortExpression(order, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1870,orderKeys.add(new RexFieldCollation(e, flags));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4207,public RexNode convertSortExpression(SqlNode expr, Set<SqlKind> flags) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4212,flags.add(expr.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4213,final SqlNode operand = ((SqlCall) expr).operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4214,return convertSortExpression(operand, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4216,return convertExpression(expr);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,75,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,81,import java.util.Set;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,973,final Set<RelDataTypeFamily> families =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,974,Sets.newHashSet(RexUtil.families(types));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,975,if (families.size() < 2) {
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,127,rel.getCluster().getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,65,opBinding.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,23,import org.apache.calcite.sql.type.MultisetSqlType;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,62,private RelDataType inferReturnType() {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,63,final SqlNode operand = unnest.operand(0);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,64,RelDataType type = validator.getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,68,if (type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,69,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,71,MultisetSqlType t = (MultisetSqlType) type;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,72,return t.getComponentType();
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,303,return Collections.singletonList(t0).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,410,return Arrays.asList(t0, t1).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,536,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,644,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + "]";
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,681,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,805,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + ", " + t4 + "]";
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,845,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,985,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + ", " + t4
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1029,return o.equals(this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,183,for (Ord<RexNode> o : Ord.zip(project.getProjects())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,184,if (o.e instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,185,int sIdx = ((RexInputRef) o.e).getIndex();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,186,m.set(sIdx, o.i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,187,columnsMappedBuilder.set(sIdx);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,193,final ImmutableBitSet columnsMapped = columnsMappedBuilder.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,194,for (RexNode r : inputInfo.pulledUpPredicates) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,204,if (RexLiteral.isNullLiteral(expr.e)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,48,ReturnTypes.LEAST_RESTRICTIVE,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1214,RelDataTypeFamily family1 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1215,RelDataTypeFamily family2 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1219,if (type1.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1220,family1 = type1.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1222,if (type2.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1223,family2 = type2.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1225,if (family1 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1226,family1 = type1.getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1228,if (family2 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1229,family2 = type2.getFamily();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,112,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,383,List<Map.Entry<String, RelDataType>> types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,386,if (expandStar(selectItems, aliases, types, includeSystemVars, scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,423,types.add(Pair.of(alias, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,428,List<Map.Entry<String, RelDataType>> types, boolean includeSystemVars,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,452,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,510,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,522,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2818,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2819,SqlIdentifier id = (SqlIdentifier) list.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2845,SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2846,leftRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2847,rightRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2917,if (Collections.frequency(rowType.getFieldNames(), name) > 1) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3527,assert fieldList.size() >= aliases.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3621,final List<Map.Entry<String, RelDataType>> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3624,types.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3625,Pair.of(SqlUtil.deriveAliasFromOrdinal(types.size()),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3641,types.add(targetField);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3643,return typeFactory.createStructType(types);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,52,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,348,&& (Collections.frequency(rightNames, name) == 1)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2020,SqlValidatorUtil.deriveNaturalJoinColumnList(leftRowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2021,rightRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2022,conditionExp = convertUsing(leftNamespace, rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2023,columnList);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,19,import org.apache.calcite.avatica.AvaticaResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,88,closed = true;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,89,final CalciteConnectionImpl connection1 =
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,90,(CalciteConnectionImpl) connection;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,91,connection1.server.removeStatement(handle);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,92,if (openResultSet != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,93,AvaticaResultSet c = openResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,94,openResultSet = null;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,95,c.close();
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,99,connection1.getDriver().handler.onStatementClose(this);
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,66,static int nextId = 0;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,98,protected int id;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,115,this.id = nextId++;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,99,new JdbcJoinRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,100,new JdbcCalcRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,101,new JdbcProjectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,102,new JdbcFilterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,103,new JdbcAggregateRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,104,new JdbcSortRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,105,new JdbcUnionRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,106,new JdbcIntersectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,107,new JdbcMinusRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,108,new JdbcTableModificationRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,109,new JdbcValuesRule(out));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,133,super(clazz, in, out, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,276,private JdbcCalcRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,537,super(Sort.class, Convention.NONE, out, "JdbcSortRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,627,private JdbcIntersectRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,671,private JdbcMinusRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,707,private JdbcTableModificationRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,778,private JdbcValuesRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,23,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,54,LogicalFilter oldFilter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,72,RelNode newFilterRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,75,oldFilterCond.accept(rewriteShuttle));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,221,expr = relBuilder.field(source);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,222,++source;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,78,IntervalValue interval = (IntervalValue) value;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,79,writer.keyword("INTERVAL");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,80,if (interval.getSign() == -1) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,81,writer.print("-");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,83,writer.literal("'" + value.toString() + "'");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,84,writer.keyword(interval.intervalQualifier.toString());
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,167,private boolean useDefaultStartPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,215,private boolean useDefaultFractionalSecondPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,264,unparse(RelDataTypeSystem.DEFAULT, writer);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,267,public void unparse(RelDataTypeSystem typeSystem, SqlWriter writer) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,268,final String start = timeUnitRange.startUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,269,final int fractionalSecondPrecision =
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,270,getFractionalSecondPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,271,final int startPrecision = getStartPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,272,if (timeUnitRange.startUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,273,if (!useDefaultFractionalSecondPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,274,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,275,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,276,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,277,writer.print(getFractionalSecondPrecision(typeSystem));
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,278,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,280,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,281,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,282,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,284,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,287,if (!useDefaultStartPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,288,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,289,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,290,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,292,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,295,if (null != timeUnitRange.endUnit) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,296,writer.keyword("TO");
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,297,final String end = timeUnitRange.endUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,299,&& (!useDefaultFractionalSecondPrecision())) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,300,final SqlWriter.Frame frame = writer.startFunCall(end);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,301,writer.print(fractionalSecondPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,302,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,304,writer.keyword(end);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,50,InferTypes.FIRST_KNOWN,
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,51,OperandTypes.MINUS_DATE_OPERATOR);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,65,final SqlWriter.Frame frame = writer.startList("(", ")");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,66,call.operand(0).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,67,writer.sep("-");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,68,call.operand(1).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,69,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,70,call.operand(2).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,443,public static final SqlSingleOperandTypeChecker MINUS_DATE_OPERATOR =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,235,public RelOptPredicateList getPredicates(SemiJoin semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,236,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,237,RexBuilder rB = semiJoin.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,238,final RelNode left = semiJoin.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,239,final RelNode right = semiJoin.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,241,final RelOptPredicateList leftInfo = mq.getPulledUpPredicates(left);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,242,final RelOptPredicateList rightInfo = mq.getPulledUpPredicates(right);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,244,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,245,new JoinConditionBasedPredicateInference(semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,246,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,247,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates, false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,249,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,254,RexBuilder rB = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,255,RelNode left = join.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,256,RelNode right = join.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,261,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,263,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,264,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,265,false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,267,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,312,RexBuilder rB = union.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,398,final Set<String> allExprsDigests;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,404,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,405,this(joinRel, joinRel instanceof SemiJoin, lPreds, rPreds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,409,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,424,allExprsDigests = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,436,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,450,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,496,final Set<String> allExprsDigests = new HashSet<>(this.allExprsDigests);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,501,infer(leftChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,510,infer(rightChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,577,List<RexNode> inferedPredicates, boolean includeEqualityInference,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,590,&& !isAlwaysTrue(tr)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,591,inferedPredicates.add(tr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,592,allExprsDigests.add(tr.toString());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,733,if (x.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,93,new Function<RelFieldCollation, Comparator<? super Row>>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,94,public Comparator<? super Row> apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,277,for (Ord<RexNode> exp : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,304,for (Ord<RexNode> exp : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,214,for (Ord<RexNode> project : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,141,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,284,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,297,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,307,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,373,boolean fixpoint;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,376,fixpoint = true;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,382,if (newVertex != null) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,383,++nMatches;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,384,if (nMatches >= currentProgram.matchLimit) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,385,return;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,387,if (fullRestartAfterTransformation) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,388,iter = getGraphIterator(root);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,393,iter = getGraphIterator(newVertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,397,fixpoint = false;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,399,break;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,226,side.newInput = joinInput;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,232,final Mappings.TargetMapping mapping =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,233,s == 0
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,235,: Mappings.createShiftMapping(fieldCount + offset, 0, offset,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,236,fieldCount);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,26,import org.apache.calcite.linq4j.tree.ClassDeclaration;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,27,import org.apache.calcite.linq4j.tree.MemberDeclaration;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,70,import org.codehaus.commons.compiler.IClassBodyEvaluator;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,74,import java.io.StringReader;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,78,import java.lang.reflect.Type;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,353,ClassDeclaration decl = new ClassDeclaration(0, name, Object.class,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,354,ImmutableList.<Type>of(), ImmutableList.<MemberDeclaration>of());
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,358,return compile(decl, buff.toString(), def, argList);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,420,final IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,421,cbe.setClassName(expr.name);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,422,cbe.setImplementedInterfaces(new Class[]{def.handlerClass});
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,423,cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,426,cbe.setDebuggingInformation(true, true, true);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,429,cbe.cook(new StringReader(s));
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,430,final Constructor constructor = cbe.getClazz().getDeclaredConstructors()[0];
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,436,| InvocationTargetException e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,177,Expressions.parameter(int.class, builder.newName("prevStart"));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,179,Expressions.parameter(int.class, builder.newName("prevEnd"));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,300,for (RexLiteral literal : tuple) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1663,return Expressions.makeUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1664,expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1665,translatedOperands.get(0));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1609,return new UnaryExpression(expressionType, expression.getType(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1610,expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,69,pref = pref.of(result.format);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,848,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,851,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,852,final List<Expression> translatedOperands =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,856,return nullAs.handle(result);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,445,Expression nullHandled = nullAs.handle(input);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,448,if (nullHandled instanceof ConstantExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,449,return nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,454,if (nullHandled == input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,455,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,462,String unboxVarName = "v_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,463,if (input instanceof ParameterExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,464,unboxVarName = ((ParameterExpression) input).name + "_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,466,ParameterExpression unboxed = Expressions.parameter(nullHandled.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,467,list.newName(unboxVarName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,468,list.add(Expressions.declare(Modifier.FINAL, unboxed, nullHandled));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,470,return unboxed;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,20,import org.apache.calcite.sql.SqlFunction;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,22,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,24,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,26,import org.apache.calcite.sql.SqlSyntax;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,27,import org.apache.calcite.sql.util.SqlBasicVisitor;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,38,class AggFinder extends SqlBasicVisitor<Void> {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,41,private final SqlOperatorTable opTab;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,44,private final boolean over;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,47,private boolean aggregate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,49,private final AggFinder delegate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,65,this.opTab = opTab;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,66,this.over = over;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,67,this.aggregate = aggregate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,68,this.delegate = delegate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,101,public Void visit(SqlCall call) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,102,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,105,if (delegate != null) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,108,if (aggregate) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,109,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,128,if (call.isA(SqlKind.QUERY)) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,132,if (call.getKind() == SqlKind.OVER) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,133,if (over) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,134,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,137,return null;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,140,return super.visit(call);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,126,if (isStar(e.getChildExps(), e.getInput().getRowType())) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,205,public static boolean isStar(List<RexNode> exps, RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,214,return i == inputRowType.getFieldCount();
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,572,for (Ord<Node> n : Ord.zip(list)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,122,: listGetter(fields);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,225,distinctAggCalls.add(aggCall.left.rename(aggCall.right));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,23,import org.apache.calcite.interpreter.Interpreter;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,671,DruidQueryNode(Interpreter interpreter, DruidQuery query) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,835,String newDigest = rel.recomputeDigest();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,23,import org.apache.calcite.interpreter.Interpreter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,82,return new EnumerableNode(enumerable, implementor.interpreter, this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,190,Interpreter interpreter, EnumerableInterpretable rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,192,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,33,this.source = interpreter.source(rel, 0);
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,34,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,66,public AggregateNode(Interpreter interpreter, Aggregate rel) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,67,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,68,this.dataContext = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,298,return new FilterNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,348,return new ProjectNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,399,return new SortNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,462,return new JoinNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,507,return new UnionNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,533,return new ValuesNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,604,return new AggregateNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,659,return new WindowNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,31,public FilterNode(Interpreter interpreter, Filter rel) {
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,32,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,34,interpreter.compile(ImmutableList.of(rel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,36,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,38,public final Interpreter interpreter;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,45,public InterpreterImplementor(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,48,this.interpreter = interpreter;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,63,final Map<RelNode, NodeInfo> nodes = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,66,private final Map<RelNode, List<RelNode>> relInputs = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,67,protected final ScalarCompiler scalarCompiler;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,71,this.scalarCompiler =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,72,new JaninoRexCompiler(rootRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,74,final Compiler compiler = new Nodes.CoreCompiler(this);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,75,this.rootRel = compiler.visitRoot(rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,98,final ArrayDeque<Row> queue = ((ListSink) nodeInfo.sink).list;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,126,public Scalar compile(List<RexNode> nodes, RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,127,if (inputRowType == null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,128,inputRowType = dataContext.getTypeFactory().builder().build();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,130,return scalarCompiler.compile(nodes, inputRowType);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,133,RelDataType combinedRowType(List<RelNode> inputs) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,135,dataContext.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,136,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,137,builder.addAll(input.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,139,return builder.build();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,250,public Source source(RelNode rel, int ordinal) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,251,final RelNode input = getInput(rel, ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,252,final NodeInfo nodeInfo = nodes.get(input);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,253,if (nodeInfo == null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,254,throw new AssertionError("should be registered: " + rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,256,if (nodeInfo.rowEnumerable != null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,257,return new EnumeratorSource(nodeInfo.rowEnumerable.enumerator());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,259,Sink sink = nodeInfo.sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,260,if (sink instanceof ListSink) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,261,return new ListSource((ListSink) nodeInfo.sink);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,263,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,267,private RelNode getInput(RelNode rel, int ordinal) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,268,final List<RelNode> inputs = relInputs.get(rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,269,if (inputs != null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,270,return inputs.get(ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,272,return rel.getInput(ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,285,public Sink sink(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,286,final ArrayDeque<Row> queue = new ArrayDeque<>(1);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,287,final Sink sink = new ListSink(queue);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,288,NodeInfo nodeInfo = new NodeInfo(rel, sink, null);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,289,nodes.put(rel, nodeInfo);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,290,return sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,303,public void enumerable(RelNode rel, Enumerable<Row> rowEnumerable) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,304,NodeInfo nodeInfo = new NodeInfo(rel, null, rowEnumerable);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,305,nodes.put(rel, nodeInfo);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,308,public Context createContext() {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,309,return new Context(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,312,public DataContext getDataContext() {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,313,return dataContext;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,319,final Sink sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,325,this.sink = sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,387,this.list = sink.list;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,392,return list.remove();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,416,public static class Compiler extends RelVisitor implements ReflectiveVisitor {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,417,private final ReflectiveVisitDispatcher<Compiler, RelNode> dispatcher =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,418,ReflectUtil.createDispatcher(Compiler.class, RelNode.class);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,427,Compiler(Interpreter interpreter) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,431,public RelNode visitRoot(RelNode p) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,434,return rootRel;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,453,List<RelNode> inputs = interpreter.relInputs.get(parent);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,456,interpreter.relInputs.put(parent, inputs);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,465,final List<RelNode> inputs = interpreter.relInputs.get(p);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,481,new InterpretableRel.InterpreterImplementor(interpreter, null,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,482,null));
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,489,final NodeInfo nodeInfo = interpreter.nodes.get(p);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,38,public JoinNode(Interpreter interpreter, Join rel) {
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,39,this.leftSource = interpreter.source(rel, 0);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,40,this.rightSource = interpreter.source(rel, 1);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,41,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,42,this.condition = interpreter.compile(ImmutableList.of(rel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,43,interpreter.combinedRowType(rel.getInputs()));
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,45,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,41,public static class CoreCompiler extends Interpreter.Compiler {
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,42,CoreCompiler(Interpreter interpreter) {
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,43,super(interpreter);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,47,node = new AggregateNode(interpreter, agg);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,51,node = new FilterNode(interpreter, filter);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,55,node = new ProjectNode(interpreter, project);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,59,node = new ValuesNode(interpreter, value);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,63,node = TableScanNode.create(interpreter, scan,
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,64,ImmutableList.<RexNode>of(), null);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,68,node = TableScanNode.create(interpreter, scan, scan.filters,
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,69,scan.projects);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,73,node = new SortNode(interpreter, sort);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,77,node = new UnionNode(interpreter, union);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,81,node = new JoinNode(interpreter, join);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,85,node = new WindowNode(interpreter, window);
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,30,public ProjectNode(Interpreter interpreter, Project rel) {
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,31,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,33,this.scalar = interpreter.compile(rel.getProjects(),
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,35,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,38,public SortNode(Interpreter interpreter, Sort rel) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,39,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,62,private TableScanNode(Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,64,interpreter.enumerable(rel, enumerable);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,67,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,76,static TableScanNode create(Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,82,return createProjectableFilterable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,88,return createFilterable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,94,return createScannable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,100,return createEnumerable(interpreter, rel, enumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,106,return createQueryable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,113,private static TableScanNode createScannable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,114,TableScan rel, ImmutableList<RexNode> filters, ImmutableIntList projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,117,Enumerables.toRow(scannableTable.scan(interpreter.getDataContext()));
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,118,return createEnumerable(interpreter, rel, rowEnumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,122,private static TableScanNode createQueryable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,125,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,166,return createEnumerable(interpreter, rel, rowEnumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,170,private static TableScanNode createFilterable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,173,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,183,return createEnumerable(interpreter, rel, rowEnumerable, null,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,187,private static TableScanNode createProjectableFilterable(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,188,Interpreter interpreter, TableScan rel, ImmutableList<RexNode> filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,189,ImmutableIntList projects, ProjectableFilterableTable pfTable) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,190,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,237,return createEnumerable(interpreter, rel, rowEnumerable, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,242,private static TableScanNode createEnumerable(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,243,Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,244,Enumerable<Row> enumerable, final ImmutableIntList acceptedProjects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,245,List<RexNode> rejectedFilters, final ImmutableIntList rejectedProjects) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,270,interpreter.compile(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,271,ImmutableList.of(filter2), inputRowType);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,272,final Context context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,295,return new TableScanNode(interpreter, rel, enumerable);
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,35,public UnionNode(Interpreter interpreter, Union rel) {
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,38,builder.add(interpreter.source(rel, i));
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,41,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,37,public ValuesNode(Interpreter interpreter, Values rel) {
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,38,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,40,this.rows = createRows(interpreter, rel.getTuples());
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,43,private ImmutableList<Row> createRows(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,49,final Scalar scalar = interpreter.compile(nodes, null);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,51,final Context context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/WindowNode.java,26,WindowNode(Interpreter interpreter, Window rel) {
core/src/main/java/org/apache/calcite/interpreter/WindowNode.java,27,super(interpreter, rel);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,273,return new DruidQueryNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/plan/hep/HepMatchOrder.java,40,TOP_DOWN
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,369,currentProgram.matchOrder != HepMatchOrder.ARBITRARY;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,417,if (currentProgram.matchOrder == HepMatchOrder.ARBITRARY) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,421,assert start == root;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,428,Iterable<HepRelVertex> iter =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,429,TopologicalOrderIterator.of(graph);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,431,if (currentProgram.matchOrder == HepMatchOrder.TOP_DOWN) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,432,return iter.iterator();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,437,assert currentProgram.matchOrder == HepMatchOrder.BOTTOM_UP;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,438,final List<HepRelVertex> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,439,for (HepRelVertex vertex : iter) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,440,list.add(vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,442,Collections.reverse(list);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,443,return list.iterator();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,836,if (mapDigestToVertex.get(newDigest) == null) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,837,mapDigestToVertex.put(newDigest, vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepProgram.java,69,matchOrder = HepMatchOrder.ARBITRARY;
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,213,class SumSplitter implements SqlSplittableAggFunction {
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,214,public static final SumSplitter INSTANCE = new SumSplitter();
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,69,return clazz.cast(SqlSplittableAggFunction.SumSplitter.INSTANCE);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,244,call1 = splitter.split(aggCall.e, mapping);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,74,new RelFieldCollation(key,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,75,RelFieldCollation.Direction.ASCENDING,
core/src/main/java/org/apache/calcite/rel/RelCollations.java,59,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,63,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,113,return Lists.transform(collation.getFieldCollations(),
core/src/main/java/org/apache/calcite/rel/RelCollations.java,150,if (contains(collation, keys)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2758,convertOrderItem(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2759,select,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2760,orderItem,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2761,extraOrderExprs,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1325,fieldCollations.add(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1327,extraNodes));
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1087,SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1088,new SqlToRelConverter(this, validator, catalogReader, cluster,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1091,return sqlToRelConverter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2194,return RelOptUtil.pushDownJoinConditions(originalJoin);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,30,import java.util.List;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,73,final List<SqlOperatorTable> tables = new ArrayList<>();
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,75,tables.add(operatorTable(s));
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,82,private static SqlOperatorTable operatorTable(String s) {
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,85,return SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,87,return ChainedSqlOperatorTable.of(OracleSqlOperatorTable.instance(),
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,88,SqlStdOperatorTable.instance());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,265,final List<RelDataType> paramTypes = toSql(argTypes);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,286,private SqlReturnTypeInference infer(final ScalarFunction function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,290,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,295,private SqlReturnTypeInference infer(final AggregateFunction function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,299,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,304,private List<RelDataType> toSql(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,308,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,313,private RelDataType toSql(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,101,if (table != null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,102,return table;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,111,CalciteSchema schema =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,113,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,114,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,116,final String name = Util.last(names);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,118,if (entry == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,156,CalciteSchema schema = rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,157,for (String schemaName : schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,159,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,160,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,163,return schema;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,988,if (convertedWhere.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,109,CacheBuilder.newBuilder().build(
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,110,new CacheLoader<Key, MetadataHandler>() {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,111,public MetadataHandler load(@Nonnull Key key) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,113,return load3(key.def, key.provider.handlers(key.def),
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,114,key.relClasses);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1105,if (isAny(type1) || isAny(type2)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1106,return true;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,327,assert (sink != null) != (rowEnumerable != null) : "one or the other";
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,19,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,34,private final LoadingCache<Pair<Lattice, Lattice.Column>, Integer> cache;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,41,new CacheLoader<Pair<Lattice, Lattice.Column>, Integer>() {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,43,throws Exception {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,44,return provider.cardinality(key.left, key.right);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,49,public int cardinality(Lattice lattice, Lattice.Column column) {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,50,try {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,51,return cache.get(Pair.of(lattice, column));
core/src/main/java/org/apache/calcite/materialize/DelegatingLatticeStatisticProvider.java,36,public int cardinality(Lattice lattice, Lattice.Column column) {
core/src/main/java/org/apache/calcite/materialize/DelegatingLatticeStatisticProvider.java,37,return provider.cardinality(lattice, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,63,import java.math.BigInteger;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,116,LatticeStatisticProvider statisticProvider, Double rowCountEstimate,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,117,ImmutableList<Column> columns, ImmutableList<Measure> defaultMeasures,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,118,ImmutableList<Tile> tiles) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,125,this.statisticProvider = Preconditions.checkNotNull(statisticProvider);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,237,final ImmutableBitSet.Builder columnSetBuilder = groupSet.rebuild();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,238,for (Measure call : aggCallList) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,239,for (Column arg : call.args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,240,columnSetBuilder.set(arg.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,243,final ImmutableBitSet columnSet = columnSetBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,247,List<Node> usedNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,248,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,250,.intersects(columnSet)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,251,use(usedNodes, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,254,if (usedNodes.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,255,usedNodes.add(nodes.get(0));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,262,for (int i : groupSet) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,263,if (k++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,264,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,265,groupBuf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,267,final Column column = columns.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,268,dialect.quoteIdentifier(buf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,269,dialect.quoteIdentifier(groupBuf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,270,final String fieldName = uniqueColumnNames.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,271,columnNames.add(fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,272,if (!column.alias.equals(fieldName)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,273,buf.append(" AS ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,274,dialect.quoteIdentifier(buf, fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,277,if (groupSet.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,278,groupBuf.append("()");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,280,int m = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,281,for (Measure measure : aggCallList) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,282,if (k++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,283,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,286,.append("(");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,287,if (measure.args.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,288,buf.append("*");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,290,int z = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,291,for (Column arg : measure.args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,292,if (z++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,293,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,295,dialect.quoteIdentifier(buf, arg.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,298,buf.append(") AS ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,299,String measureName;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,300,while (!columnNames.add(measureName = "m" + m)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,301,++m;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,303,dialect.quoteIdentifier(buf, measureName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,332,buf.append(groupBuf);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,390,BigInteger n = BigInteger.ONE;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,391,for (Column column : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,392,final int cardinality = statisticProvider.cardinality(this, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,393,if (cardinality > 1) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,394,n = n.multiply(BigInteger.valueOf(cardinality));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,397,final double nn = n.doubleValue();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,398,final double f = getFactRowCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,399,final double a = (nn - 1d) / nn;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,402,return f;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,404,final double v = nn * (1d - Math.pow(a, f));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,407,return Math.min(v, f);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,693,LatticeStatisticProvider statisticProvider =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,695,? AvaticaUtils.instantiatePlugin(LatticeStatisticProvider.class,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,818,this.measures = measures;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,819,this.dimensions = dimensions;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,822,final ImmutableBitSet.Builder bitSetBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,823,for (Column dimension : dimensions) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,824,bitSetBuilder.set(dimension.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,826,bitSet = bitSetBuilder.build();
core/src/main/java/org/apache/calcite/materialize/LatticeStatisticProvider.java,24,int cardinality(Lattice lattice, Lattice.Column column);
core/src/main/java/org/apache/calcite/materialize/Lattices.java,26,public static final LatticeStatisticProvider SQL =
core/src/main/java/org/apache/calcite/materialize/Lattices.java,27,SqlLatticeStatisticProvider.INSTANCE;
core/src/main/java/org/apache/calcite/materialize/Lattices.java,30,public static final LatticeStatisticProvider CACHED_SQL =
core/src/main/java/org/apache/calcite/materialize/Lattices.java,31,cache(SqlLatticeStatisticProvider.INSTANCE);
core/src/main/java/org/apache/calcite/materialize/Lattices.java,34,public static LatticeStatisticProvider cache(
core/src/main/java/org/apache/calcite/materialize/Lattices.java,35,LatticeStatisticProvider provider) {
core/src/main/java/org/apache/calcite/materialize/Lattices.java,36,return new CachingLatticeStatisticProvider(provider);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,31,static final SqlLatticeStatisticProvider INSTANCE =
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,32,new SqlLatticeStatisticProvider();
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,35,private SqlLatticeStatisticProvider() {}
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,44,return ((Number) values[0]).intValue();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,19,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,74,private static final boolean DEBUG = Math.random() >= 0;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,82,this(ordering, new HashMap<E, Node<E>>());
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,93,this(ordering, new HashMap<E, Node<E>>(collection.size() * 3 / 2));
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,103,private PartiallyOrderedSet(Ordering<E> ordering, Map<E, Node<E>> map) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,542,return null;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,546,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,548,return new StripList<>(node.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,567,return null;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,571,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,573,return new StripList<>(node.parentList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,577,public List<E> getNonChildren() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,578,if (topNode.childList.size() == 1
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,579,&& topNode.childList.get(0).e == null) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,580,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,582,return new StripList<>(topNode.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,586,if (bottomNode.parentList.size() == 1
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,587,&& bottomNode.parentList.get(0).e == null) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,588,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,590,return new StripList<>(bottomNode.parentList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,734,private static class StripList<E> extends AbstractList<E> {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,735,private final List<Node<E>> list;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,738,this.list = list;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,742,return list.get(index).e;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,746,return list.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,315,unknownType,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,592,CalciteServerStatement statement =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,597,callback.assign(signature, null, -1);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,301,super(columns, sql, parameterList, internalParameters, cursorFactory, null);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,302,this.rowType = rowType;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,303,this.collationList = collationList;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,304,this.maxRowCount = maxRowCount;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,305,this.bindable = bindable;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,707,final Bindable<T> bindable = new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,708,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,709,return Linq4j.emptyEnumerable();
core/src/main/java/org/apache/calcite/rel/type/RelDataType.java,35,public interface RelDataType /*extends Type*/ {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,541,List<RelCollation> outputCollations = new ArrayList<>(1);
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,481,ExInst<CalciteException> insertIntoAlwaysGenerated(String a0);
core/src/main/java/org/apache/calcite/runtime/ConsList.java,40,public static <E> List<E> of(E first, List<E> rest) {
core/src/main/java/org/apache/calcite/runtime/ConsList.java,44,return new ConsList<>(first, rest);
core/src/main/java/org/apache/calcite/schema/impl/AbstractTable.java,27,public abstract class AbstractTable implements Table {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3688,private void checkFieldCount(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3689,SqlNode node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3690,RelDataType logicalSourceRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorTable.java,29,public interface SqlValidatorTable {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,190,import static org.apache.calcite.util.Static.RESOURCE;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2969,if (modifiableTable != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3054,public RelNode toRel(RelOptTable table) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3055,return table.toRel(createToRelContext());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3078,protected RelNode convertColumnList(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3079,SqlInsert call,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3080,RelNode sourceRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3081,RelDataType sourceRowType = sourceRel.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3089,final RelDataType targetRowType = targetTable.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3090,final List<RelDataTypeField> targetFields =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3091,targetRowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3115,if (sourceExps.get(i) != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3117,throw RESOURCE.insertIntoAlwaysGenerated(fieldName).ex();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3119,continue;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3131,return RelOptUtil.createProject(sourceRel, sourceExps, fieldNames, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3168,for (int i = 0; i < targetColumnNames.size(); i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3169,final RexNode expr = rexBuilder.makeFieldAccess(sourceRef, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3670,protected class Blackboard implements SqlRexContext, SqlVisitor<RexNode> {
core/src/main/java/org/apache/calcite/util/Util.java,214,public static boolean discard(boolean b) {
core/src/main/java/org/apache/calcite/util/Util.java,215,return b;
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,19,import org.apache.calcite.runtime.ConsList;
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,83,ConsList.of(graph1.source(edge), arc2Path));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,31,import org.apache.calcite.runtime.ConsList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,217,return dbCollection.aggregate(ConsList.of(first, rest));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,104,new FilterReduceExpressionsRule(LogicalFilter.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,111,new ProjectReduceExpressionsRule(LogicalProject.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,118,new JoinReduceExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,125,new CalcReduceExpressionsRule(LogicalCalc.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,136,super(filterClass, relBuilderFactory, "ReduceExpressionsRule(Filter)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,148,if (reduceExpressions(filter, expList, predicates, true)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,253,super(projectClass, relBuilderFactory, "ReduceExpressionsRule(Project)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,263,if (reduceExpressions(project, expList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,283,super(joinClass, relBuilderFactory, "ReduceExpressionsRule(Join)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,330,super(calcClass, relBuilderFactory, "ReduceExpressionsRule(Calc)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,350,if (reduceExpressions(calc, expandedExprList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,422,RelBuilderFactory relBuilderFactory, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,423,super(operand(clazz, any()), relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,438,return reduceExpressions(rel, expList, predicates, false);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,452,RelOptPredicateList predicates, boolean unknownAsFalse) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,178,ReduceExpressionsRule.reduceExpressions(values, reducibleExps, predicates);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,247,public static final SqlBinaryOperator DOT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,248,new SqlBinaryOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,250,SqlKind.DOT,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,251,80,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,252,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,253,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,254,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,255,OperandTypes.ANY_ANY);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,113,super(clazz, predicate, Convention.NONE, CassandraRel.CONVENTION, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,32,private CassandraToEnumerableConverterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,33,super(RelNode.class, CassandraRel.CONVENTION, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,89,new EnumerableToBindableConverterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,91,private EnumerableToBindableConverterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,92,super(EnumerableRel.class, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,93,BindableConvention.INSTANCE, "EnumerableToBindableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,34,EnumerableConvention.INSTANCE, "EnumerableCalcRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,29,EnumerableCorrelateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,30,super(LogicalCorrelate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,31,EnumerableConvention.INSTANCE, "EnumerableCorrelateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,32,EnumerableConvention.INSTANCE, "EnumerableFilterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,30,EnumerableFilterToCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,31,super(operand(EnumerableFilter.class, any()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,30,new EnumerableInterpreterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,32,private EnumerableInterpreterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,33,super(RelNode.class, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,34,EnumerableConvention.INSTANCE, "EnumerableInterpreterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,32,EnumerableConvention.INSTANCE, "EnumerableProjectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,27,EnumerableProjectToCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,28,super(operand(EnumerableProject.class, any()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,43,new EnumerableCorrelateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,79,new EnumerableValuesRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,97,new EnumerableTableScanRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,31,super(LogicalTableFunctionScan.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,32,EnumerableConvention.INSTANCE, "EnumerableTableFunctionScanRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,31,EnumerableTableModifyRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,32,super(LogicalTableModify.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,33,EnumerableConvention.INSTANCE, "EnumerableTableModificationRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,33,super(LogicalTableScan.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,34,EnumerableConvention.INSTANCE, "EnumerableTableScanRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,29,EnumerableValuesRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,30,super(LogicalValues.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,98,new JdbcToEnumerableConverterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,30,JdbcToEnumerableConverterRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,31,super(RelNode.class, out, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,86,new BindableTableScanRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,89,new BindableFilterRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,92,new BindableProjectRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,95,new BindableSortRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,98,new BindableJoinRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,101,new BindableUnionRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,104,new BindableValuesRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,107,new BindableAggregateRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,110,new BindableWindowRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,139,private static class BindableTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,140,private BindableTableScanRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,141,super(operand(LogicalTableScan.class, none()));
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,243,private static class BindableFilterRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,244,private BindableFilterRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,246,BindableConvention.INSTANCE, "BindableFilterRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,306,private static class BindableProjectRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,307,private BindableProjectRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,309,BindableConvention.INSTANCE, "BindableProjectRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,356,private static class BindableSortRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,357,private BindableSortRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,358,super(Sort.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,407,private static class BindableJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,408,private BindableJoinRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,409,super(LogicalJoin.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,470,private static class BindableUnionRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,471,private BindableUnionRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,472,super(LogicalUnion.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,538,private static class BindableValuesRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,539,private BindableValuesRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,540,super(LogicalValues.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,609,private static class BindableAggregateRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,610,private BindableAggregateRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,611,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,612,BindableConvention.INSTANCE, "BindableAggregateRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,667,private static class BindableWindowRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,668,private BindableWindowRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,669,super(LogicalWindow.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,31,new NoneToBindableConverterRule();
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,33,private NoneToBindableConverterRule() {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,34,super(RelNode.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2404,new FilterOnProjectRule();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2406,private FilterOnProjectRule() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2409,some(operand(LogicalProject.class, any()))));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,306,instruction.ruleSet.add(new TraitMatchingRule(converter));
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,103,new ExpandConversionRule();
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,108,private ExpandConversionRule() {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,109,super(operand(AbstractConverter.class, any()));
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,52,this(clazz, Predicates.<RelNode>alwaysTrue(), in, out, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,66,String description) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,44,public TraitMatchingRule(ConverterRule converterRule) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,58,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,93,protected AggregateReduceFunctionsRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,37,new AggregateRemoveRule(LogicalAggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,44,public AggregateRemoveRule(Class<? extends Aggregate> aggregateClass) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,53,operand(RelNode.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,92,private AggregateStarTableRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,93,String description) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,94,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,39,public static final CalcMergeRule INSTANCE = new CalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,43,private CalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,47,operand(Calc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,39,new CalcRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,43,private CalcRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,44,super(operand(LogicalCalc.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,45,private CalcSplitRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,63,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,75,List<RelNode> newInputs = new ArrayList<RelNode>(inputs);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,41,new FilterCalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,45,private FilterCalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,49,operand(LogicalCalc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,33,new FilterMultiJoinMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,40,private FilterMultiJoinMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,43,operand(MultiJoin.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,43,new FilterRemoveIsNotDistinctFromRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,47,private FilterRemoveIsNotDistinctFromRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,48,super(operand(LogicalFilter.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,42,new FilterTableFunctionTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,49,private FilterTableFunctionTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,52,operand(LogicalTableFunctionScan.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,94,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,46,public static final FilterToCalcRule INSTANCE = new FilterToCalcRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,50,private FilterToCalcRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,51,super(operand(LogicalFilter.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,39,new JoinAddRedundantSemiJoinRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,46,private JoinAddRedundantSemiJoinRule(Class<? extends Join> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,47,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,52,public static final JoinAssociateRule INSTANCE = new JoinAssociateRule();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,59,private JoinAssociateRule() {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,63,operand(RelSubset.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,46,new JoinExtractFilterRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,54,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,71,protected JoinToCorrelateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,105,new JoinToMultiJoinRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,112,public JoinToMultiJoinRule(Class<? extends Join> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,116,operand(RelNode.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,50,private JoinUnionTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,51,String description) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,52,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,58,protected MaterializedViewFilterScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,90,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,47,new ProjectCalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,51,private ProjectCalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,55,operand(LogicalCalc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,42,private ProjectMultiJoinMergeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,51,public static final ProjectRemoveRule INSTANCE = new ProjectRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,56,private ProjectRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,59,super(operand(Project.class, null, PREDICATE, any()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,36,new ProjectSortTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,43,private ProjectSortTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,44,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,45,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,46,operand(Sort.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,89,private ProjectTableScanRule(RelOptRuleOperand operand, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,90,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,43,public static final ProjectToCalcRule INSTANCE = new ProjectToCalcRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,47,private ProjectToCalcRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,48,super(operand(LogicalProject.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,98,public static final ProjectToWindowRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,99,new ProjectToWindowRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,100,operand(Calc.class, null, PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,102,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,103,Calc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,104,assert RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,105,final CalcRelSplitter transform =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,106,new WindowedAggRelSplitter(calc, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,107,RelNode newRel = transform.execute();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,108,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,118,public static final ProjectToWindowRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,119,new ProjectToWindowRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,120,operand(Project.class, null, PREDICATE2, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,123,Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,124,assert RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,125,final RelNode input = project.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,126,final RexProgram program =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,127,RexProgram.create(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,128,input.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,129,project.getProjects(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,130,null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,131,project.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,132,project.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,134,final LogicalCalc calc = LogicalCalc.create(input, program);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,135,final CalcRelSplitter transform = new WindowedAggRelSplitter(calc,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,136,call.builder()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,138,if (!(rel instanceof LogicalCalc)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,139,return rel;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,141,final LogicalCalc calc = (LogicalCalc) rel;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,142,final RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,143,relBuilder.push(calc.getInput());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,144,if (program.getCondition() != null) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,145,relBuilder.filter(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,146,program.expandLocalRef(program.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,148,if (!program.projectsOnlyIdentity()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,149,relBuilder.project(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,150,Lists.transform(program.getProjectList(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,151,new Function<RexLocalRef, RexNode>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,152,public RexNode apply(RexLocalRef a0) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,153,return program.expandLocalRef(a0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,156,calc.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,158,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,161,RelNode newRel = transform.execute();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,162,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,169,private ProjectToWindowRule(RelOptRuleOperand operand, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,170,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,49,new ProjectWindowTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,51,private ProjectWindowTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,54,operand(LogicalWindow.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,68,public static final ReduceDecimalsRule INSTANCE = new ReduceDecimalsRule();
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,75,private ReduceDecimalsRule() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,76,super(operand(LogicalCalc.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,40,new SemiJoinFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,47,private SemiJoinFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,50,some(operand(LogicalFilter.class, any()))));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,48,new SemiJoinJoinTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,55,private SemiJoinJoinTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,58,some(operand(Join.class, any()))));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,36,new SemiJoinRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,41,private SemiJoinRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,42,super(operand(SemiJoin.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,47,LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,56,operand(joinClass, any())));
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,47,new SortProjectTransposeRule(Sort.class, LogicalProject.class, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,55,this(sortClass, projectClass, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,66,description);
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,33,public static final SortRemoveRule INSTANCE = new SortRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,35,private SortRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,36,super(
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,37,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,139,private SubQueryRemoveRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,34,public static final TableScanRule INSTANCE = new TableScanRule();
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,38,private TableScanRule() {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,39,super(operand(LogicalTableScan.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,31,new UnionEliminatorRule(LogicalUnion.class);
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,38,private UnionEliminatorRule(Class<? extends Union> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,39,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,122,private ValuesReduceRule(RelOptRuleOperand operand, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,123,super(operand, desc);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,58,new DeltaProjectTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,59,new DeltaFilterTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,60,new DeltaAggregateTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,61,new DeltaSortTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,62,new DeltaUnionTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,63,new DeltaJoinTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,64,new DeltaTableScanRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,65,new DeltaTableScanToEmptyRule());
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,69,private DeltaProjectTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,72,operand(Project.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,89,private DeltaFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,92,operand(Filter.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,108,private DeltaAggregateTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,130,private DeltaSortTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,133,operand(Sort.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,150,private DeltaUnionTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,153,operand(Union.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,178,private DeltaTableScanRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,181,operand(TableScan.class, none())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,209,private DeltaTableScanToEmptyRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,212,operand(TableScan.class, none())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,243,operand(Join.class, any())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,103,private static class DruidProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,104,private DruidProjectRule() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,34,new CsvProjectTableScanRule();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,36,private CsvProjectTableScanRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,30,new MongoToEnumerableConverterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,32,private MongoToEnumerableConverterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,33,super(RelNode.class, MongoRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,31,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,33,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,34,super(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,35,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,30,JdbcToSparkConverterRule(JdbcConvention out) {
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,31,super(
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,32,RelNode.class,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,33,out, SparkRel.CONVENTION,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,75,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,76,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,77,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,78,LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,79,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,80,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,86,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,87,LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,88,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,89,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,95,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,96,LogicalFilter.class, operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,101,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,102,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,108,super(rule, "SplunkPushDownRule: " + id);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,223,return super.computeSelfCost(planner, mq).multiplyBy(0.01d);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,707,SqlStdOperatorTable.SINGLE_VALUE, false, ImmutableList.of(i), -1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,708,0, rel, null, null));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1337,aggregateCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,69,this(aggFunction, distinct, argList, -1, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,104,return create(aggFunction, distinct, argList, -1, groupCount, input, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,105,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,122,return create(aggFunction, distinct, argList, filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,129,return new AggregateCall(aggFunction, distinct, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,130,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,190,return new AggregateCall(aggFunction, distinct, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,191,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,253,return new AggregateCall(aggFunction, distinct, args, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,254,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,283,return create(aggFunction, distinct, argList, filterArg, newGroupKeyCount,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,284,input, newType, getName());
core/src/main/java/org/apache/calcite/rel/core/Window.java,317,return AggregateCall.create((SqlAggFunction) aggCall.getOperator(),
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,280,return AggregateCall.create(aggregation, distinct, operands,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,327,AggregateCall.create(aggregation, false, newArgList, newFilterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,328,aggregate.getGroupCount(), distinct, null, aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,523,AggregateCall.create(aggCall.getAggregation(), false, newArgs,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,611,AggregateCall.create(aggCall.getAggregation(), false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,141,ImmutableList.of(i++), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,142,aggregateCall.name));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,259,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,260,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,269,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,270,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,316,oldCall.getArgList(), oldCall.filterArg, oldAggRel.getGroupCount(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,317,oldAggRel.getInput(), null, oldCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,319,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,320,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,416,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,417,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,438,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,439,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,216,return AggregateCall.create(roll, false, ImmutableList.of(offset + i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,231,return AggregateCall.create(aggregation, false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,156,builder.aggregateCall(SqlStdOperatorTable.SINGLE_VALUE, false, null,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,157,null, builder.field(0)));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,247,builder.aggregateCall(SqlStdOperatorTable.COUNT, false, null, "ck",
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,248,builder.fields()));
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,118,return AggregateCall.create(SqlStdOperatorTable.COUNT, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,147,return AggregateCall.create(SqlStdOperatorTable.SUM0, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,229,return AggregateCall.create(SqlStdOperatorTable.COUNT, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,260,return AggregateCall.create(SqlStdOperatorTable.SUM, false,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,47,public SqlCountAggFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,48,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,50,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,51,SqlKind.COUNT,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,52,ReturnTypes.BIGINT,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,53,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,57,SqlFunctionCategory.NUMERIC,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,58,false,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,59,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,691,public static final SqlAggFunction COUNT = new SqlCountAggFunction();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,867,aggCall.isDistinct(), filterArg, aggCall.name, args);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1124,ImmutableList.<Integer>of(), -1, longType, null),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1126,args, -1, longType, null)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4641,final SqlAggFunction aggFunction =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4643,RelDataType type = validator.deriveType(bb.scope, call);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,628,return aggregateCall(aggFunction, distinct, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,643,return new AggCallImpl(aggFunction, distinct, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,649,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,650,operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,655,return aggregateCall(SqlStdOperatorTable.COUNT, false, null, alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,660,return aggregateCall(SqlStdOperatorTable.SUM, distinct, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,666,return aggregateCall(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,667,SqlStdOperatorTable.AVG, distinct, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,672,return aggregateCall(SqlStdOperatorTable.MIN, false, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,677,return aggregateCall(SqlStdOperatorTable.MAX, false, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,903,AggregateCall.create(aggCall1.aggFunction, aggCall1.distinct, args,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1513,AggCallImpl(SqlAggFunction aggFunction, boolean distinct, RexNode filter,
core/src/main/java/org/apache/calcite/rel/RelDistribution.java,19,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/rel/RelDistribution.java,38,public interface RelDistribution extends RelTrait {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1853,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1854,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1855,rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BOOLEAN),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1856,ret);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,64,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,581,MYSQL("MySQL", "`", NullCollation.HIGH),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,587,HIVE("Apache Hive", null, NullCollation.HIGH),
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,122,return "{0}([BOTH|LEADING|TRAILING} {1} FROM {2})";
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,84,return dispatch(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,235,for (List<RexLiteral> tuple : e.getTuples()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1924,convertFrom(bb, ((SqlCall) from).operand(0));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,755,calciteTable.getJdbcTableType().name());
core/src/main/java/org/apache/calcite/schema/Schema.java,325,OTHER,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,728,iterationIdx[level] = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,118,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.EXTRACT_DATE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,253,defineMethod(EXTRACT_DATE, BuiltInMethod.UNIX_DATE_EXTRACT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,254,NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1076,public static final SqlSpecialOperator EXTRACT_DATE =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,20,import org.apache.calcite.avatica.util.TimeUnitRange;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,575,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,576,final List<SqlNode> operands = call.getOperandList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,577,final List<RexNode> exprs = convertExpressionList(cx, operands,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,578,SqlOperandTypeChecker.Consistency.NONE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,581,RelDataType resType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,582,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,583,resType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,584,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,585,resType,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,586,exprs.get(1).getType().isNullable());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,587,RexNode res = rexBuilder.makeReinterpretCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,588,resType, exprs.get(1), rexBuilder.makeLiteral(false));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,590,final TimeUnit unit =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,591,((SqlIntervalQualifier) operands.get(0)).getStartUnit();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,592,final SqlTypeName sqlTypeName = exprs.get(1).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,593,switch (unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,594,case YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,595,case MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,596,case DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,597,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,598,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,600,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,601,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,602,res = divide(rexBuilder, res, TimeUnit.DAY.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,604,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,605,return rexBuilder.makeCall(resType, SqlStdOperatorTable.EXTRACT_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,606,ImmutableList.of(exprs.get(0), res));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,607,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,608,throw new AssertionError("unexpected " + sqlTypeName);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,610,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,613,case DECADE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,614,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,615,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,616,res = divide(rexBuilder, res, TimeUnit.DAY.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,618,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,619,res = rexBuilder.makeCall(resType, SqlStdOperatorTable.EXTRACT_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,620,ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), res));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,621,return divide(rexBuilder, res, unit.multiplier.divide(TimeUnit.YEAR.multiplier));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,623,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,639,case EPOCH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,640,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,641,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,643,res = rexBuilder.makeCall(resType, SqlStdOperatorTable.MULTIPLY,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,644,ImmutableList.of(res, rexBuilder.makeExactLiteral(TimeUnit.DAY.multiplier)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,646,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,648,return divide(rexBuilder, res, TimeUnit.SECOND.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,650,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,652,return convertFunction(cx, (SqlFunction) call.getOperator(), call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,654,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,672,res = mod(rexBuilder, resType, res, getFactor(unit));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,673,if (unit == TimeUnit.QUARTER) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,677,res = divide(rexBuilder, res, unit.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,678,if (unit == TimeUnit.QUARTER) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,682,return res;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,716,private static BigDecimal getFactor(TimeUnit unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,717,switch (unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,718,case DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,719,return BigDecimal.ONE;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,720,case HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,721,return TimeUnit.DAY.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,722,case MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,723,return TimeUnit.HOUR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,724,case SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,725,return TimeUnit.MINUTE.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,726,case MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,727,return TimeUnit.YEAR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,728,case QUARTER:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,729,return TimeUnit.YEAR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,730,case YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,731,case DECADE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,732,case CENTURY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,733,case MILLENNIUM:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,734,return BigDecimal.ONE;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,735,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,736,throw Util.unexpected(unit);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,328,private class AccumulatorList extends ArrayList<Accumulator> {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,59,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,66,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,46,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,67,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,68,return new SqlIntervalLiteral(
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,69,(IntervalValue) value,
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,70,getTypeName(),
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,71,pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,220,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,115,clones[i] = (SqlNode) node.clone();
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,68,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,69,return new SqlNumericLiteral(
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,70,(BigDecimal) value,
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,71,getPrec(),
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,72,getScale(),
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,73,isExact,
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,74,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,56,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,57,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,74,for (int i = 0; (i + 1) < operands.size(); ++i) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,76,SqlStdOperatorTable.IS_NOT_NULL.createCall(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,77,pos,
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,78,operands.get(i)));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,79,thenList.add(operands.get(i).clone(operands.get(i).getParserPosition()));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,83,return SqlCase.createSwitched(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,84,pos, null, whenList, thenList, elseExpr);
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,71,return SqlCase.createSwitched(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,72,pos, operands.get(0), whenList, thenList, operands.get(0).clone(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,73,operands.get(0).getParserPosition()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1087,orderList =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1088,orderBy.orderList.clone(orderBy.orderList.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1177,selectList =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1179,.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1201,SqlNode leftJoinTerm = (SqlNode) sourceTableRef.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1227,SqlNode insertSource = (SqlNode) sourceTableRef.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,659,return (SqlNode) literal.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,674,return (SqlNode) type.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,678,return (SqlNode) param.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,682,return (SqlNode) intervalQualifier.clone();
core/src/main/java/org/apache/calcite/util/NlsString.java,38,public class NlsString implements Comparable<NlsString> {
core/src/main/java/org/apache/calcite/util/NlsString.java,93,return new NlsString(value, charsetName, collation);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,21,import java.io.IOException;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,22,import java.io.LineNumberReader;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,24,import java.io.StringReader;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,402,LineNumberReader
core/src/main/java/org/apache/calcite/util/XmlOutput.java,403,in = new LineNumberReader(new StringReader(content));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,404,try {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,405,String line;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,406,while ((line = in.readLine()) != null) {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,408,out.println(line);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,411,throw new AssertionError(ex);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,857,ImmutableBitSet.of(registerExpressions(extraNodes, groupKey_.nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,860,final int sizeBefore = extraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,865,ImmutableBitSet.of(registerExpressions(extraNodes, nodeList));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,873,if (extraNodes.size() > sizeBefore) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,876,+ extraNodes.subList(sizeBefore, extraNodes.size()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,884,registerExpressions(extraNodes, aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,886,registerExpression(extraNodes, aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,899,final List<Integer> args = registerExpressions(extraNodes, aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,901,: registerExpression(extraNodes, aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,930,private static int registerExpression(List<RexNode> exprList, RexNode node) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,931,int i = exprList.indexOf(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,932,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,933,i = exprList.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,934,exprList.add(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,936,return i;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,939,private static List<Integer> registerExpressions(List<RexNode> extraNodes,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,940,Iterable<? extends RexNode> nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,941,final List<Integer> builder = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,942,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,943,builder.add(registerExpression(extraNodes, node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,945,return builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,107,final RelDataType inputRowType = getInput().getRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,181,final int indicatorCount = getIndicatorCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,199,agg.context =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,200,new AggContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,201,public SqlAggFunction aggregation() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,202,return agg.call.getAggregation();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,205,public RelDataType returnRelType() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,206,return agg.call.type;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,209,public Type returnType() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,210,return EnumUtils.javaClass(typeFactory, returnRelType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,213,public List<? extends RelDataType> parameterRelTypes() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,214,return EnumUtils.fieldRowTypes(inputRowType, null,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,215,agg.call.getArgList());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,218,public List<? extends Type> parameterTypes() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,219,return EnumUtils.fieldTypes(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,220,parameterRelTypes());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,223,List<Type> state =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,224,agg.implementor.getStateType(agg.context);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,249,new AggResultContextImpl(initBlock, decls));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,253,PhysTypeImpl.of(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,254,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,374,for (int j = 0; j < groupCount + indicatorCount; j++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,375,results.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,376,keyPhysType.fieldReference(key_, j));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,382,new AggResultContextImpl(resultBlock, agg.state)));
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggAddContextImpl.java,32,super(block, accumulator);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResetContextImpl.java,30,public class AggResetContextImpl extends NestedBlockBuilderImpl
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResultContextImpl.java,37,public AggResultContextImpl(BlockBuilder block,
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResultContextImpl.java,38,List<Expression> accumulator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,48,super(block, accumulator);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,412,LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,711,return LogicalAggregate.create(rel, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,712,ImmutableBitSet.of(), null, aggCalls);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,723,return LogicalAggregate.create(rel, false,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1278,return MutableAggregate.of(input, aggregate.indicator, groupSet, groupSets,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1279,aggregateCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1341,result = MutableAggregate.of(target, false, groupSet.build(), null,
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,135,this.indicator = indicator;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,29,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,30,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,37,import org.apache.calcite.sql.type.SqlTypeName;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,50,import java.math.BigDecimal;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,150,rewriteUsingGroupingSets(call, aggregate, argLists);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,191,relBuilder.groupKey(groupSet, aggregate.indicator, aggregate.getGroupSets());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,207,Aggregate aggregate, Set<Pair<List<Integer>, Integer>> argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,210,groupSetTreeSet.add(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,211,for (Pair<List<Integer>, Integer> argList : argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,212,groupSetTreeSet.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,215,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,232,distinctAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,233,final RelNode distinct = relBuilder.peek();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,237,final RelOptCluster cluster = aggregate.getCluster();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,238,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,239,final RelDataTypeFactory typeFactory = cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,240,final RelDataType booleanType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,241,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,242,typeFactory.createSqlType(SqlTypeName.BOOLEAN), false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,243,final List<Pair<RexNode, String>> predicates = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,244,final Map<ImmutableBitSet, Integer> filters = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,246,class Registrar {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,247,RexNode group = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,249,if (group == null) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,250,group = makeGroup(groupCount - 1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,252,final RexNode node =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,253,rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, group,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,254,rexBuilder.makeExactLiteral(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,255,toNumber(remap(fullGroupSet, groupSet))));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,256,predicates.add(Pair.of(node, toString(groupSet)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,258,+ predicates.size() - 1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,261,private RexNode makeGroup(int i) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,262,final RexInputRef ref =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,263,rexBuilder.makeInputRef(booleanType, groupCount + i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,264,final RexNode kase =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,265,rexBuilder.makeCall(SqlStdOperatorTable.CASE, ref,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,266,rexBuilder.makeExactLiteral(BigDecimal.ZERO),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,267,rexBuilder.makeExactLiteral(TWO.pow(i)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,268,if (i == 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,269,return kase;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,271,return rexBuilder.makeCall(SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,272,makeGroup(i - 1), kase);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,276,private BigDecimal toNumber(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,277,BigDecimal n = BigDecimal.ZERO;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,278,for (int key : bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,279,n = n.add(TWO.pow(key));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,281,return n;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,284,private String toString(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,285,final StringBuilder buf = new StringBuilder("$i");
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,286,for (int key : bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,287,buf.append(key).append('_');
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,289,return buf.substring(0, buf.length() - 1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,292,final Registrar registrar = new Registrar();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,293,for (ImmutableBitSet groupSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,297,if (!predicates.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,298,List<Pair<RexNode, String>> nodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,299,for (RelDataTypeField f : relBuilder.peek().getRowType().getFieldList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,300,final RexNode node = rexBuilder.makeInputRef(f.getType(), f.getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,301,nodes.add(Pair.of(node, f.getName()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,303,nodes.addAll(predicates);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,304,relBuilder.project(Pair.left(nodes), Pair.right(nodes));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,307,int x = groupCount + indicatorCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,335,aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,100,if (allColumnsInAggregate && !aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,113,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,255,.aggregate(relBuilder.groupKey(belowAggregateKey, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,339,aggregate.indicator, Mappings.apply2(mapping, aggregate.getGroupSets())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,91,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,534,oldAggregate.indicator,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,107,relBuilder.aggregate(relBuilder.groupKey(topAggRel.getGroupSet(), false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,128,relBuilder.aggregate(relBuilder.groupKey(aggRel.getGroupSet(), false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,143,relBuilder.groupKey(aggRel.getGroupSet(), aggRel.indicator, aggRel.getGroupSets()),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,134,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,111,operand(Aggregate.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,121,LogicalAggregate.create(newDelta, aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,122,aggregate.getGroupSet(), aggregate.groupSets,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,123,aggregate.getAggCallList());
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,277,ExInst<SqlValidatorException> aggregateIllegalInGroupBy();
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,20,import org.apache.calcite.sql.SqlFunction;
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,40,public class SqlAbstractGroupFunction extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,57,super(name, kind, returnTypeInference, operandTypeInference,
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,58,operandTypeChecker, category);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,251,public final boolean indicator;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,259,this.indicator = !this.groupSets.equals(ImmutableList.of(groupSet));
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,104,public String translate(String name) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,105,return namespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,191,return resolvedNamespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,22,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,37,private final SqlValidatorScope scope;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,44,this.scope = scope;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,59,public List<String> translatedNames() {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,60,if (scope == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,61,return identifier.names;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,63,final ImmutableList.Builder<String> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,64,SqlValidatorNamespace namespace =
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,66,builder.add(identifier.names.get(0));
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,67,for (String name : Util.skip(identifier.names)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,68,if (namespace != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,69,name = namespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,70,namespace = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,72,builder.add(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,74,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,85,public final List<String> suffixTranslated() {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,86,return Util.skip(translatedNames(), prefixLength);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3381,throw newValidationError(agg, RESOURCE.aggregateIllegalInGroupBy());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3425,String keyword) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3434,throw newValidationError(condition, RESOURCE.condMustBeBoolean(keyword));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorNamespace.java,170,String translate(String name);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,581,LogicalAggregate.create(newProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,582,false,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,583,newGroupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,584,null,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,585,newAggCalls));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2170,LogicalAggregate.create(joinOutputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2171,false,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2172,groupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2173,null,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,874,final RelBuilder.GroupKey groupKey = relBuilder.groupKey(newGroupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,875,aggregate.indicator, newGroupSets);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,37,import org.apache.calcite.rel.core.Aggregate;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,556,final RelBuilder relBuilder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,557,RelFactories.LOGICAL_BUILDER.create(cluster, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,788,rel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,789,createAggregate(bb, false, groupSet, ImmutableList.of(groupSet),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,790,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1121,LogicalAggregate.create(seek, false, ImmutableBitSet.of(), null,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2513,RexNode havingExpr = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2574,createAggregate(bb, r.indicator, r.groupSet, r.groupSets,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2579,final Aggregate aggregate = (Aggregate) bb.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2580,if (aggregate.getGroupType() != Aggregate.Group.SIMPLE) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2581,assert aggregate.indicator;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2582,List<Pair<RexNode, String>> projects2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2583,int converted = 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2584,final int groupCount = aggregate.getGroupSet().cardinality();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2585,for (RelDataTypeField field : aggregate.getRowType().getFieldList()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2586,final int i = field.getIndex();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2587,final RexNode rex;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2588,if (i < groupCount && r.isNullable(i)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2589,++converted;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2591,rex = rexBuilder.makeCall(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2592,rexBuilder.makeInputRef(aggregate, groupCount + i),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2593,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2594,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2595,field.getType(), true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2596,rexBuilder.constantNull()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2597,rexBuilder.makeInputRef(aggregate, i));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2599,rex = rexBuilder.makeInputRef(aggregate, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2601,projects2.add(Pair.of(rex, field.getName()));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2603,if (converted > 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2604,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2605,RelOptUtil.createProject(bb.root, projects2, true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2606,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2618,if (havingExpr.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2619,havingExpr = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2671,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2672,RelOptUtil.createProject(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2673,bb.root,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2674,projects,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2675,true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2676,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2705,protected RelNode createAggregate(Blackboard bb, boolean indicator,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2706,ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2707,List<AggregateCall> aggCalls) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2708,return LogicalAggregate.create(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2709,bb.root, indicator, groupSet, groupSets, aggCalls);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3296,for (String name : qualified.suffixTranslated()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3944,return Pair.of(node, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4664,r.indicator,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4704,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4705,case GROUPING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4707,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4708,final RelDataType type = validator.getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4709,if (!aggregatingSelectScope.resolved.get().indicator) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4710,return rexBuilder.makeExactLiteral(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4711,TWO.pow(effectiveArgCount(call)).subtract(BigDecimal.ONE), type);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4713,final List<Integer> operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4714,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4715,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4716,operands = ImmutableIntList.range(0, groupExprs.size());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4717,break;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4718,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4719,operands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4720,for (SqlNode operand : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4721,final int x = lookupGroupExpr(operand);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4722,assert x >= 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4723,operands.add(x);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4726,RexNode node = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4727,int shift = operands.size();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4728,for (int operand : operands) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4729,node = bitValue(node, type, operand, --shift);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4731,return node;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4737,private int effectiveArgCount(SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4738,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4739,case GROUPING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4742,return call.operandCount();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4743,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4744,return groupExprs.size();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4745,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4746,throw new AssertionError(call.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4750,private RexNode bitValue(RexNode previous, RelDataType type, int x,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4751,int shift) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4752,final AggregatingSelectScope.Resolved r =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4753,aggregatingSelectScope.resolved.get();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4754,RexNode node = rexBuilder.makeCall(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4755,rexBuilder.makeInputRef(bb.root, r.groupExprList.size() + x),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4756,rexBuilder.makeExactLiteral(BigDecimal.ONE, type),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4757,rexBuilder.makeExactLiteral(BigDecimal.ZERO, type));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4758,if (shift > 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4759,node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, node,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4760,rexBuilder.makeExactLiteral(TWO.pow(shift), type));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4762,if (previous != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4763,node = rexBuilder.makeCall(SqlStdOperatorTable.PLUS, previous, node);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4765,return node;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,853,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,854,final List<RexNode> extraNodes = projects(inputRowType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,890,if (extraNodes.size() > inputRowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,891,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,921,private List<RexNode> projects(RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,922,final List<RexNode> exprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,923,for (RelDataTypeField field : inputRowType.getFieldList()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,924,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,925,exprList.add(rexBuilder.makeInputRef(field.getType(), field.getIndex()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,927,return exprList;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1321,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1322,final List<RexNode> extraNodes = projects(inputRowType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1323,final List<RexNode> originalExtraNodes = ImmutableList.copyOf(extraNodes);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,113,schema.add(entry.getKey(), entry.getValue());
core/src/main/java/org/apache/calcite/model/ModelHandler.java,120,schema.add(Util.first(functionName, methodName), function);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,859,final int typeOrdinal = getTypeOrdinal(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,69,COLUMN_LIST;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,90,Types.JAVA_OBJECT, SqlTypeFamily.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,738,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,747,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,830,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,289,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,38,public class ScalarFunctionImpl extends ReflectiveFunctionBase implements
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,39,ScalarFunction, ImplementableFunction {
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,116,new ReflectiveCallNotNullImplementor(method), NullPolicy.NONE, false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,125,assert containsType(type1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,126,assert containsType(type2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,518,final SqlOperator op = call.getOperator();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,35,import org.apache.calcite.sql.fun.SqlAvgAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,37,import org.apache.calcite.sql.fun.SqlSumAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,120,if (call.getAggregation() instanceof SqlAvgAggFunction
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,121,|| call.getAggregation() instanceof SqlSumAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,190,if (oldCall.getAggregation() instanceof SqlSumAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,193,return reduceSum(oldAggRel, oldCall, newCalls, aggCallMapping);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,195,if (oldCall.getAggregation() instanceof SqlAvgAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,196,final SqlKind kind = oldCall.getAggregation().getKind();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,200,return reduceAvg(oldAggRel, oldCall, newCalls, aggCallMapping);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,250,Map<AggregateCall, RexNode> aggCallMapping) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,252,RexBuilder rexBuilder = oldAggRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,253,int iAvgInput = oldCall.getArgList().get(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,254,RelDataType avgInputType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,258,AggregateCall sumCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,268,AggregateCall countCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,288,RexNode denominatorRef =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,296,rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,297,numeratorRef,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,298,denominatorRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,384,final RelDataType argType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,385,getFieldType(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,386,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,387,argOrdinal);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,389,final RexNode argRef = inputExprs.get(argOrdinal);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,390,final RexNode argSquared =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,391,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,392,SqlStdOperatorTable.MULTIPLY, argRef, argRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,395,final Aggregate.AggCallBinding binding =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,396,new Aggregate.AggCallBinding(typeFactory, SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,397,ImmutableList.of(argRef.getType()), oldAggRel.getGroupCount(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,398,oldCall.filterArg >= 0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,400,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,401,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,402,oldCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,403,ImmutableIntList.of(argSquaredOrdinal),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,404,oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,405,SqlStdOperatorTable.SUM.inferReturnType(binding),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,406,null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,413,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,431,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,435,SqlStdOperatorTable.MULTIPLY, sumArg, sumArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,444,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,453,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,457,SqlStdOperatorTable.DIVIDE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,458,sumSquaredArg, countArg);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java,75,RelDataType deriveSumType(RelDataTypeFactory typeFactory, RelDataType argumentType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,166,RelDataTypeFactory typeFactory, RelDataType argumentType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,41,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,44,ReturnTypes.ARG0_NULLABLE_IF_EMPTY,
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,50,Preconditions.checkArgument(kind == SqlKind.AVG
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,51,|| kind == SqlKind.STDDEV_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,52,|| kind == SqlKind.STDDEV_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,53,|| kind == SqlKind.VAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,54,|| kind == SqlKind.VAR_SAMP);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,46,ReturnTypes.ARG0_NULLABLE_IF_EMPTY,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1245,expr = expandAvg(arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1248,expr = expandVariance(arg, true, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1251,expr = expandVariance(arg, false, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1254,expr = expandVariance(arg, true, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1257,expr = expandVariance(arg, false, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1262,RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1263,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1269,final SqlNode arg) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1276,pos, sum, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1280,final SqlNode arg,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,992,return IS_FALSE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,994,return IS_TRUE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,998,return IS_NOT_FALSE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1000,return IS_NOT_TRUE;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraEnumerator.java,45,public CassandraEnumerator(ResultSet results, RelProtoDataType protoRowType) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraLimit.java,59,if (offset != null) { implementor.offset = RexLiteral.intValue(offset); }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraLimit.java,60,if (fetch != null) { implementor.fetch = RexLiteral.intValue(fetch); }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,61,CassandraFilterRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,62,CassandraProjectRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,63,CassandraSortRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,64,CassandraLimitRule.INSTANCE
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,103,public CassandraConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,104,Class<? extends RelNode> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,109,public <R extends RelNode> CassandraConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,110,Class<R> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,186,if (fetch >= 0) { limit += fetch; }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,199,while (skip < offset && enumerator.moveNext()) { skip++; }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,54,extends ConverterImpl
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,55,implements EnumerableRel {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,30,new CassandraToEnumerableConverterRule();
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,63,public ArrayTable(Type elementType, RelProtoDataType protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,268,public ObjectArray(int ordinal) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,320,public PrimitiveArray(int ordinal, Primitive primitive, Primitive p) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,367,public PrimitiveDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,409,public ObjectDictionary(
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,478,public StringDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,516,public ByteStringDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,556,public Constant(int ordinal) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,807,public Content(List<? extends Column> columns, int size,
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,815,public Content(List<? extends Column> columns, int size, int sortField) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,843,public ObjectEnumerator(int rowCount, Column column) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,872,public ArrayEnumerator(int rowCount, List<Column> columns) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,53,0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000, 0xFFFFFFFF00000000L};
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,464,public Kev(int source, Comparable key) {
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,51,public ListTable(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,262,(JavaTypeFactoryImpl.SyntheticRecordType) accPhysType.getJavaRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,264,Expressions.parameter(accPhysType.getJavaRowType(), "record0");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,267,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,268,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,269,record0_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,270,Expressions.new_(accPhysType.getJavaRowType()))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,275,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,276,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,277,Expressions.field(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,278,record0_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,279,fieldList.get(i)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,280,right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,189,public EnumerableNode(Enumerable<Object[]> enumerable,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,75,protected final Function1<String, RexToLixTranslator.InputGetter>
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,76,allCorrelateVariables =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,77,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,78,public RexToLixTranslator.InputGetter apply(String name) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,79,return getCorrelVariableGetter(name);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,75,public static final EnumerableTableModifyRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,76,ENUMERABLE_TABLE_MODIFICATION_RULE = new EnumerableTableModifyRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,90,public static final EnumerableFilterToCalcRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,91,ENUMERABLE_FILTER_TO_CALC_RULE = new EnumerableFilterToCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,93,public static final EnumerableProjectToCalcRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,94,ENUMERABLE_PROJECT_TO_CALC_RULE = new EnumerableProjectToCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,99,public static final EnumerableTableFunctionScanRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,100,ENUMERABLE_TABLE_FUNCTION_SCAN_RULE = new EnumerableTableFunctionScanRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,279,inputPhysType.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,523,getBlockBuilderWinAggFrameResultContextFunction(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,196,private final Map<SqlAggFunction, Supplier<? extends WinAggImplementor>>
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,197,winAggMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,595,((SqlUserDefinedFunction) operator).getFunction();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1876,public IsXxxImplementor(Boolean seek, boolean negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1900,public NotImplementor(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/WinAggImplementor.java,38,public enum SeekType {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,131,public JdbcConverterRule(Class<? extends RelNode> clazz, RelTrait in,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,77,public JdbcTable(JdbcSchema jdbcSchema, String jdbcCatalogName,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,117,public Pair<ColumnMetaData.Rep, Integer>
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,118,apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,119,final RelDataType type = field.getType();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,175,public JdbcTableQueryable(QueryProvider queryProvider, SchemaPlus schema,
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,31,public AbstractSingleNode(Interpreter interpreter, T rel) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,323,public NodeInfo(RelNode rel, Sink sink, Enumerable<Row> rowEnumerable) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,338,public EnumeratorSource(final Enumerator<Row> enumerator) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,386,public ListSource(ListSink sink) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,209,<T> CalcitePrepare.CalciteSignature<T>
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,210,parseQuery(CalcitePrepare.Query<T> query,
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,120,public CalciteJdbc41Statement(CalciteConnectionImpl connection,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,752,public CalciteMetaTable(Table calciteTable, String tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,764,public CalciteMetaSchema(CalciteSchema calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,773,public MetadataTable(Class<E> clazz) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,63,syntheticTypes = new HashMap<>();
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,344,public RecordFieldImpl(
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,37,public CachingLatticeStatisticProvider(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,448,public Edge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,100,public SchemaImpl(Lattice lattice, StatisticsProvider statisticsProvider) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,198,public StatisticsProviderImpl(Lattice lattice) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,224,final Multimap<Pair<Convention, Convention>, ConverterRule>
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,225,mapArcToConverterRule =
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,88,public abstract static class RelEvent extends EventObject {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,102,public static class RelChosenEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,110,public static class RelEquivalenceEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,134,public static class RelDiscardedEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,141,public abstract static class RuleEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,158,public static class RuleAttemptedEvent extends RuleEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,176,public static class RuleProductionEvent extends RuleAttemptedEvent {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,228,convertOperand(Class<R> clazz, Predicate<? super R> predicate,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,282,|| type2.getSqlTypeName() == SqlTypeName.ANY) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,342,mapping.set(
core/src/main/java/org/apache/calcite/plan/TableAccessMap.java,41,public static enum Mode {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,47,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,48,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,65,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,66,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,165,classOperands = LinkedListMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,308,getPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,47,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,48,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,118,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,119,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,59,public CalciteMaterializer(CalcitePrepareImpl prepare,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,995,public CalcitePreparingStmt(CalcitePrepareImpl prepare,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1235,public CalcitePreparedExplain(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1267,public EmptyScalarTranslator(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1390,public LambdaScalarTranslator(
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,28,public CalciteSqlValidator(SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,57,public LixToRelTranslator(RelOptCluster cluster, Prepare preparingStmt) {
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,81,public QueryableRelBuilder(LixToRelTranslator translator) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,341,public MySchemaPlus(SchemaPlus parent, String name, Schema schema) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,72,new SortFactoryImpl();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,75,new AggregateFactoryImpl();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,314,public WindowKey(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,349,Lists.newArrayList(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,350,Iterables.filter(aggWindow.orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,355,return rexFieldCollation.left instanceof RexLocalRef;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,59,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,60,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,81,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,82,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,105,public CachingInvocationHandler(Metadata metadata) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,71,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,72,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,107,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,108,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,127,public ChainedInvocationHandler(List<Metadata> metadataList) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,187,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,191,private static <M extends Metadata>
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,192,MetadataHandler<M> load3(MetadataDef<M> def,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,193,Multimap<Method, MetadataHandler<M>> map,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,365,private static String
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,366,findProvider(List<Pair<String, MetadataHandler>> providerList,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,410,static <M extends Metadata> MetadataHandler<M>
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,411,compile(ClassDeclaration expr, String s, MetadataDef<M> def,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,442,synchronized <M extends Metadata, H extends MetadataHandler<M>> H
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,443,create(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,454,synchronized <M extends Metadata, H extends MetadataHandler<M>> H
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,455,revise(Class<? extends RelNode> rClass, MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,118,private static RelMetadataProvider
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,119,reflectiveSource(final MetadataHandler target,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,120,final ImmutableList<Method> methods) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,215,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,216,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,245,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,246,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,247,Class<? extends M> metadataClass) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,256,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,257,apply(Class<? extends RelNode> relClass) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,347,public Space2(Class<Metadata> metadataClass0,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,403,public JoinConditionBasedPredicateInference(Join joinRel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,730,public CardOfProjExpr(RelMetadataQuery mq, Project rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,65,<M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,66,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,67,Class<? extends M> metadataClass);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,69,<M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,70,handlers(MetadataDef<M> def);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,185,revise(Class<? extends RelNode> class_, MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,393,private static <E> SqlSplittableAggFunction.Registry<E>
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,394,registry(final List<E> list) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,59,SUPPORTED_AGGREGATES = new IdentityHashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,829,public ImplementTester(RelType relType) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,882,public InputToCommonExprConverter(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,965,public HighestUsageFinder(RexNode[] exprs, int[] exprLevels) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,88,public RemoveIsNotDistinctFromRexShuttle(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,547,public InputReferenceCounter(int[] refCounts) {
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,829,public LcsIndexOptimizer(LcsTableScan rel) {}
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,181,new RelType("CalcRelType") {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,182,protected boolean canImplement(RexFieldAccess field) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,183,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,186,protected boolean canImplement(RexDynamicParam param) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,187,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,190,protected boolean canImplement(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,191,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,194,protected boolean canImplement(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,195,return !(call instanceof RexOver);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,198,protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,199,RelBuilder relBuilder, RelNode input, RexProgram program) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,200,assert !program.containsAggs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,202,return super.makeRel(cluster, traitSet, relBuilder, input, program);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,205,new RelType("WinAggRelType") {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,206,protected boolean canImplement(RexFieldAccess field) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,207,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,210,protected boolean canImplement(RexDynamicParam param) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,211,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,214,protected boolean canImplement(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,215,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,218,protected boolean canImplement(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,219,return call instanceof RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,222,protected boolean supportsCondition() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,223,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,226,protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,227,RelBuilder relBuilder, RelNode input, RexProgram program) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,230,return LogicalWindow.create(cluster, traitSet, relBuilder, input,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,231,program);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,585,public InputSpecialOpFinder(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,666,public RefAndExprConverter(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,355,public ReplaceSubQueryShuttle(RexSubQuery subQuery, RexNode replacement) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,159,&& getDefaultPrecision(typeName) != -1) {
core/src/main/java/org/apache/calcite/rex/RexCallBinding.java,139,public RexCastCallBinding(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,141,public DataContextInputGetter(RelDataType rowType,
core/src/main/java/org/apache/calcite/rex/RexOver.java,154,public Finder() {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,844,public ExpansionShuttle(List<RexNode> exprs) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,998,public RegisterOutputShuttle(List<RexNode> localExprList) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1981,public ForwardRefFinder(RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2259,public RexShiftShuttle(int offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,94,public int getOrderKey() { return -1; }
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,112,public RexWindowBoundUnbounded(SqlNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,190,public RexWindowBoundBounded(RexNode node) {
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,523,ExInst<CalciteException>
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,524,sQLConformance_MultipleActiveAutocommitStatements();
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,64,public static Supplier<Enumerable<Row>>
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,65,toRow(final Supplier<Enumerable<Object[]>> supplier) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,138,private static <T extends Object & Comparable> ComparableList<T>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,139,flatList_(T[] t, boolean copy) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,209,public static <T extends Comparable> ComparableList<T>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,210,ofComparable(List<T> t) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1212,static <T extends Comparable<T>>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1213,int compare(List<T> list0, List<T> list1) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1226,static <T extends Comparable<T>>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1227,int compare(List<T> list0, List<T> list1, int size) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,52,private static final Function1<ResultSet, Function0<Object>>
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,53,AUTO_ROW_BUILDER_FACTORY =
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,173,public ResultSetEnumerator(
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,222,primitiveRowBuilderFactory(final Primitive[] primitives) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,70,private static final Function1<List<Object>, Enumerable<Object>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,71,LIST_AS_ENUMERABLE =
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,78,private static final Function1<Object[], Enumerable<Object[]>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,79,ARRAY_CARTESIAN_PRODUCT =
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1494,public static Function1<Object, Enumerable<ComparableList<Comparable>>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1495,flatProduct(final int[] fieldCounts, final boolean withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1518,private static Enumerable<FlatLists.ComparableList<Comparable>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1519,p2(Object[] lists, int[] fieldCounts, boolean withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1552,new Function1<Entry<Comparable, Comparable>, List<Comparable>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1553,public List<Comparable> apply(Entry<Comparable, Comparable> entry) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1554,return FlatLists.<Comparable>of(entry.getKey(), entry.getValue());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1580,public static <E extends Comparable>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1581,Enumerable<FlatLists.ComparableList<E>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1582,product(final List<Enumerator<List<E>>> enumerators, final int fieldCount,
core/src/main/java/org/apache/calcite/schema/Schemas.java,444,public static List<CalciteSchema.TableEntry>
core/src/main/java/org/apache/calcite/schema/Schemas.java,445,getStarTables(CalciteSchema schema) {
core/src/main/java/org/apache/calcite/schema/TableFunction.java,43,List<Object> arguments);
core/src/main/java/org/apache/calcite/sql/SqlDescribeSchema.java,71,public SqlIdentifier getSchema() { return schema; }
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,82,public SqlIdentifier getTable() { return table; }
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,84,public SqlIdentifier getColumn() { return column; }
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,371,ZERO,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,383,private static Iterator<SqlOperator>
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,384,filterOperatorRoutinesByKind(Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,385,final SqlKind sqlKind) {
core/src/main/java/org/apache/calcite/sql/SqlWithItem.java,79,public SqlWithItemOperator() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,65,RexImpTable.createImplementor(
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,66,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,67,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,68,RexCall call, List<Expression> operands) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,69,return Expressions.call(GET_COMPLETION_HINTS,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,70,Iterables.concat(Collections.singleton(ADVISOR), operands));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,112,pos, replaced);
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,38,public SqlArgumentAssignmentOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlDefaultOperator.java,36,public SqlDefaultOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlExtendOperator.java,37,public SqlExtendOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupIdFunction.java,33,public SqlGroupIdFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingIdFunction.java,33,public SqlGroupingIdFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,50,public SqlItemOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,93,d, d,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,94,d, i,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,95,i, d,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,96,i, i
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,31,public SqlRollupOperator(String name, SqlKind kind) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,182,&& typeSystem.getDefaultPrecision(typeName) > -1) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,347,public static final SqlOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,348,COMPARABLE_ORDERED_COMPARABLE_ORDERED =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,365,public static final SqlOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,366,COMPARABLE_UNORDERED_COMPARABLE_UNORDERED =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,387,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,388,STRING_STRING_INTEGER_INTEGER =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,417,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,418,INTERVALINTERVAL_INTERVALDATETIME =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,647,public static final SqlReturnTypeInference
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,648,DYADIC_STRING_SUM_PRECISION_NULLABLE_VARYING =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,656,public static final SqlReturnTypeInference
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,657,DYADIC_STRING_SUM_PRECISION_NULLABLE =
core/src/main/java/org/apache/calcite/sql/type/SqlOperandCountRanges.java,48,public RangeImpl(int min, int max) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,70,TYPE_NAME_TO_PRECEDENCE_LIST =
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,111,public Pair<String, SqlValidatorNamespace>
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,112,findQualifyingTableName(String columnName, SqlNode ctx) {
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,106,public Pair<String, SqlValidatorNamespace>
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,107,findQualifyingTableName(String columnName, SqlNode ctx) {
core/src/main/java/org/apache/calcite/sql/validate/ParameterNamespace.java,34,public ParameterNamespace(SqlValidatorImpl validator, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,69,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,70,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,86,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,87,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4273,public InsertNamespace(SqlValidatorImpl validator, SqlInsert node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4290,public UpdateNamespace(SqlValidatorImpl validator, SqlUpdate node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4307,public DeleteNamespace(SqlValidatorImpl validator, SqlDelete node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4324,public MergeNamespace(SqlValidatorImpl validator, SqlMerge node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4344,public DeriveTypeVisitor(SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4499,SqlStdOperatorTable.ITEM,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4500,inputs,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4501,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,321,public static AggregatingSelectScope
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,322,getEnclosingAggregateSelectScope(SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,450,private static List<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,547,public static ImmutableList<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,548,rollup(List<ImmutableBitSet> bitSets) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,570,public static ImmutableList<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,571,cube(List<ImmutableBitSet> bitSets) {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,43,public TableNamespace(SqlValidatorImpl validator, SqlValidatorTable table) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1386,public RemoveCorrelationRexShuttle(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1581,public RemoveSingleAggregateRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1634,public RemoveCorrelationForScalarProjectRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1832,public RemoveCorrelationForScalarAggregateRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2215,public AdjustProjectForCountAggregateRule(boolean flavor) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3708,private final Map<RelNode, Map<Integer, Integer>>
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3709,mapRootRelToFieldProjection = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1235,public AvgVarianceConvertlet(SqlKind kind) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1348,public TrimConvertlet(SqlTrimFunction.Flag flag) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,286,public StdFrameworkConfig(Context context,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1258,private static <E> ImmutableList<ImmutableList<E>>
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1259,copy(Iterable<? extends List<E>> tupleList) {
core/src/main/java/org/apache/calcite/tools/RuleSets.java,48,public ListRuleSet(ImmutableList<RelOptRule> rules) {
core/src/main/java/org/apache/calcite/util/BitSets.java,330,public Closure(SortedMap<Integer, BitSet> equivalence) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,895,public Closure(SortedMap<Integer, ImmutableBitSet> equivalence) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,673,public Node(E e) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,691,public TopBottomNode(boolean top) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,737,public StripList(List<Node<E>> list) {
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,419,public static <R extends ReflectiveVisitor, E>
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,420,ReflectiveVisitDispatcher<R, E> createDispatcher(
core/src/main/java/org/apache/calcite/util/XmlOutput.java,543,public StringEscaper() {
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,39,public static <V, E extends DefaultEdge> List<V>
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,40,predecessorListOf(DirectedGraph<V, E> graph, V vertex) {
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,143,public AccountingClassLoader(
core/src/main/java/org/apache/calcite/util/mapping/MappingType.java,121,private MappingType() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,1552,public PartialFunctionImpl(
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,58,private static final ThreadLocal<Function2<Void, File, String>>
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,59,DYNAMIC_HANDLER =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,67,Translator translator = new Translator(ElasticsearchRules
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,68,.elasticsearchFieldNames(getRowType()));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,69,String match = translator.translateMatch(condition);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,79,HashMultimap.create();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,161,: multimap.asMap().entrySet()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,60,new ElasticsearchRules.RexToElasticsearchTranslator(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,61,(JavaTypeFactory) getCluster().getTypeFactory(),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,62,ElasticsearchRules.elasticsearchFieldNames(getInput().getRowType()));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,74,+ expr.split(":")[1] + "}");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,77,+ expr.replaceAll("\"", "") + "\"}");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,59,ElasticsearchSortRule.INSTANCE,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,60,ElasticsearchFilterRule.INSTANCE,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,61,ElasticsearchProjectRule.INSTANCE
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,77,&& ((RexInputRef) op0).getIndex() == 0
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,78,&& op1 instanceof RexLiteral
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,79,&& ((RexLiteral) op1).getValue2() instanceof String) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,91,GetMappingsResponse response = client.admin().indices().getMappings(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,92,new GetMappingsRequest().indices(index)).get();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,116,+ " for column: " + name
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,117,+ ". Will assume the type of column is string");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,50,private static final Map<String, CsvFieldType> MAP =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,51,new HashMap<String, CsvFieldType>();
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,42,public Maze(int width, int height) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,655,public static <TSource, TKey, TElement> Enumerable<Grouping<TKey, TElement>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,656,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,667,public static <TSource, TKey, TElement> Enumerable<Grouping<TKey, TElement>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,668,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,679,public static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,680,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,696,public static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,697,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,753,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,754,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,772,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,773,groupByMultiple(Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,774,List<Function1<TSource, TKey>> keySelectors,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,795,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,796,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,816,private static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,817,groupBy_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,843,private static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,844,groupByMultiple_(final Map<TKey, TAccumulate> map,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,845,Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,873,private static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,874,groupBy_(final Set<TKey> map, Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1387,public static <TSource, TInner, TKey extends Comparable<TKey>, TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1388,Enumerable<TResult> mergeJoin(final Enumerable<TSource> outer,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1672,private static <TSource extends Comparable<TSource>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1673,Function2<TSource, TSource, TSource> minFunction() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1678,private static <TSource extends Comparable<TSource>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1679,Function2<TSource, TSource, TSource> maxFunction() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1841,public static <TSource, TKey extends Comparable> Enumerable<TSource>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1842,orderByDescending(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2518,public static <TSource, TKey> OrderedEnumerable<TSource>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2519,createOrderedEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2529,public static <TSource, TKey extends Comparable<TKey>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2530,OrderedEnumerable<TSource> thenBy(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2551,OrderedEnumerable<TSource> thenByDescending(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2924,public TakeWhileEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2965,public TakeWhileLongEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3006,public SkipWhileEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3047,public CastingEnumerator(Enumerator<?> enumerator, Class<T> clazz) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3171,public LookupResultEnumerable(Map<TKey, TAccumulate> map,
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,154,public OrdList(List<? extends E> elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,170,public OrdRandomAccessList(List<? extends E> elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,180,public OrdArrayList(E[] elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,714,public static <T, TKey extends Comparable> OrderedQueryable<T>
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,715,orderByDescending(Queryable<T> source,
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1079,public static <T, TKey extends Comparable<TKey>> OrderedQueryable<T>
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1080,thenByDescending(OrderedQueryable<T> source,
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,39,public static final Map<Class<? extends Function>, Class>
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,40,FUNCTION_RESULT_TYPES =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,651,public GeneratingList(int size, Function1<Integer, E> fn) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,492,public SubstituteVariableVisitor(Map<ParameterExpression, Expression> map) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,41,private final Function1<ClassDeclarationFinder, ClassDeclarationFinder>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,42,childFactory;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,93,private static Function1<ClassDeclarationFinder, ClassDeclarationFinder>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,94,newChildCreator(Class<? extends ClassDeclarationFinder> optimizingClass) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,36,public ExpressionWriter() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,40,public ExpressionWriter(boolean generics) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,200,public Indent(int initialCapacity) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1171,lambda(Class<F> type, BlockStatement body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1182,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1183,lambda(Class<F> type, BlockStatement body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1184,ParameterExpression... parameters) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1194,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1195,lambda(Class<F> type, Expression body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1206,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1207,lambda(Class<F> type, Expression body, ParameterExpression... parameters) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3222,public FluentArrayList() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3226,public FluentArrayList(Collection<? extends T> c) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,222,&& ((Class) type).getDeclaredMethods().length == 1) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,43,public MongoEnumerator(Iterator<DBObject> cursor,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,68,MongoSortRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,69,MongoFilterRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,70,MongoProjectRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,71,MongoAggregateRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,250,public MongoConverterRule(
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,251,Class<? extends RelNode> clazz,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,252,RelTrait in,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,253,Convention out,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,254,String description) {
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,181,private ImmutableList<ImmutableList<RexLiteral>>
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,182,tuples(Ast.ValuesStmt valuesStmt, RelDataType rowType) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRel.java,37,public abstract class Implementor extends JavaRelImplementor {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRel.java,49,public class Result {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkToEnumerableConverter.java,98,public SparkImplementorImpl(EnumerableRelImplementor implementor) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkDriver.java,109,public WrappingSplunkConnection(SplunkConnection connection) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkTable.java,81,public SplunkTableQueryable(QueryProvider queryProvider, SchemaPlus schema,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,231,+ "required, list of fields to request, comma delimited",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,233,+ "uri to splunk's mgmt port, default: https://localhost:8089",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,235,+ "username to use for authentication, default: admin",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,237,+ "password to use for authentication, default: changeme",
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,326,private int getIntervalSign(String value) {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,64,this.keywordList = keywordList != null ? keywordList : new SqlNodeList(pos);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,70,this.windowDecls = windowDecls != null ? windowDecls : new SqlNodeList(pos);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,94,keywordList = (SqlNodeList) operand;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,112,windowDecls = (SqlNodeList) operand;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,179,public final SqlNodeList getWindowList() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3167,if ((windowList == null) || (windowList.size() == 0)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3176,for (SqlNode node : windowList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3177,final SqlWindow child = (SqlWindow) node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3178,SqlIdentifier declName = child.getDeclName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3192,for (int i = 0; i < windowList.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3193,SqlNode window1 = windowList.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3194,for (int j = i + 1; j < windowList.size(); j++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3195,SqlNode window2 = windowList.get(j);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1872,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1187,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,127,int nonDistinctCount = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,131,++nonDistinctCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,132,continue;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,134,argLists.add(Pair.of(aggCall.getArgList(), aggCall.filterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,140,if (nonDistinctCount == 0 && argLists.size() == 1) {
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,29,super(kind.name(), null, kind, ReturnTypes.INTEGER, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,35,ReturnTypes.INTEGER,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,866,new SqlRankFunction(true, SqlKind.CUME_DIST);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,872,new SqlRankFunction(true, SqlKind.DENSE_RANK);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,878,new SqlRankFunction(true, SqlKind.PERCENT_RANK);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,884,new SqlRankFunction(true, SqlKind.RANK);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,890,new SqlRankFunction(false, SqlKind.ROW_NUMBER);
core/src/main/java/org/apache/calcite/rel/core/Project.java,333,Permutation permutation = new Permutation(fieldCount);
core/src/main/java/org/apache/calcite/rel/core/Project.java,337,permutation.set(i, ((RexInputRef) exp).getIndex());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,116,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,118,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,214,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,215,typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,101,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,124,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,266,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,125,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,201,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,134,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,260,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,341,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,126,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,195,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,78,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,125,final RelDataTypeFactory.FieldInfoBuilder outputBuilder =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,331,public FieldInfoBuilder(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,332,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,333,assert typeFactory != null;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,351,public FieldInfoBuilder add(String name, RelDataType type) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,361,public FieldInfoBuilder add(String name, SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,370,public FieldInfoBuilder add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,371,String name, SqlTypeName typeName, int precision) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,380,public FieldInfoBuilder add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,381,String name, SqlTypeName typeName, int precision, int scale) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,392,public FieldInfoBuilder nullable(boolean nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,405,public FieldInfoBuilder add(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,413,public FieldInfoBuilder addAll(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,424,public FieldInfoBuilder uniquify() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,213,final FieldInfoBuilder builder = builder();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,676,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,677,typeFactory.builder();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,64,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,44,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,51,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/WithItemNamespace.java,44,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,303,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3959,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3960,typeFactory.builder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1147,final RelDataTypeFactory.FieldInfoBuilder rowTypeBuilder =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1148,cluster.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1152,final RelDataType type = cluster.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1162,rowTypeBuilder.add(name, type);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1164,final RelDataType rowType = rowTypeBuilder.build();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,137,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,70,final RelDataTypeFactory.FieldInfoBuilder builder =
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,235,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,287,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,167,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,140,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkTableScan.java,103,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,381,.put(Variable.TIME_ZONE.camelName, timeZone);
core/src/main/java/org/apache/calcite/util/JsonBuilder.java,81,private void append(StringBuilder buf, int indent, Object o) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,102,final EnumerableRel.Result result = rootRel.implement(this, prefer);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,34,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,69,boolean array = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,76,array = true;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,87,Expression translated = t.translate(getCall());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,88,if (array && rowType.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,89,translated =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,90,Expressions.call(null, BuiltInMethod.SLICE0.method, translated);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,92,bb.add(Expressions.return_(null, translated));
core/src/main/java/org/apache/calcite/model/ModelHandler.java,137,public void visit(JsonRoot root) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,141,for (JsonSchema schema : root.schemas) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,146,if (root.defaultSchema != null) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,148,connection.setSchema(root.defaultSchema);
core/src/main/java/org/apache/calcite/runtime/Like.java,24,private static final String JAVA_REGEX_SPECIALS = "[]()|^-+*?{}$\\";
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,177,THREAD_CONTEXT_STACK.get().push(context);
core/src/main/java/org/apache/calcite/schema/Schemas.java,291,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,309,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,321,final List<String> schemaPath, final String sql, boolean fail) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,326,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,329,return prepare.analyzeView(context, sql, fail);
core/src/main/java/org/apache/calcite/schema/Schemas.java,342,makeContext(connection, schema, schemaPath, map);
core/src/main/java/org/apache/calcite/schema/Schemas.java,352,public static CalcitePrepare.Context makeContext(
core/src/main/java/org/apache/calcite/schema/Schemas.java,353,final CalciteConnection connection, final CalciteSchema schema,
core/src/main/java/org/apache/calcite/schema/Schemas.java,354,final List<String> schemaPath,
core/src/main/java/org/apache/calcite/schema/Schemas.java,361,context0.getDataContext(), schema, schemaPath);
core/src/main/java/org/apache/calcite/schema/Schemas.java,385,final List<String> schemaPath) {
core/src/main/java/org/apache/calcite/rel/core/Sort.java,136,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/rel/core/Sort.java,137,double bytesPerRow = getRowType().getFieldCount() * 4;
core/src/main/java/org/apache/calcite/rel/core/Sort.java,138,return planner.getCostFactory().makeCost(
core/src/main/java/org/apache/calcite/rel/core/Sort.java,139,Util.nLogN(rowCount) * bytesPerRow, rowCount, 0);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,59,final RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,60,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,61,typeFactory.createSqlType(SqlTypeName.BOOLEAN), nullable);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,62,return new RexSubQuery(type, SqlStdOperatorTable.IN, nodes, rel);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,265,LESS_THAN,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,270,GREATER_THAN,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,275,LESS_THAN_OR_EQUAL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,280,GREATER_THAN_OR_EQUAL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,285,EQUALS,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,290,NOT_EQUALS,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,56,private final boolean isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,65,SqlInOperator(boolean isNotIn) {
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,66,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,67,isNotIn ? "NOT IN" : "IN",
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,68,SqlKind.IN,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,74,this.isNotIn = isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,85,return isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,343,public static final SqlBinaryOperator IN = new SqlInOperator(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,350,new SqlInOperator(true);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,816,TRACER.trace("After unconditional rewrite: " + outermostNode.toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,826,TRACER.trace("After validation: " + outermostNode.toString());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,944,if (inOp.isNotIn()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1411,boolean isNotIn) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1434,return rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1445,RexNode result =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1446,RexUtil.composeDisjunction(rexBuilder, comparisons, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1447,assert result != null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1449,if (isNotIn) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1450,result =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1451,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1452,SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1453,result);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1456,return result;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1721,if (((SqlCall) node).getOperator() == SqlStdOperatorTable.NOT_IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1722,logic = logic.negate();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1742,bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1743,operand,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1744,logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1751,bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1752,child,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1753,logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1762,if (kind == SqlKind.IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4102,final SqlInOperator op = (SqlInOperator) call.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4118,final RexSubQuery in = RexSubQuery.in(root.rel, builder.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4121,: in;
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,88,if (operatorBinding.isOperandNull(i, false)) {
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,89,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,90,throw callBinding.getValidator().newValidationError(
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,91,callBinding.operand(i), RESOURCE.nullIllegal());
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,93,return false;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,142,public RelDataType leastRestrictive(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,188,public RelDataType createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,272,unknownType = typeFactory.createSqlType(SqlTypeName.NULL);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1093,RelOptCost relCost = getCost(rel, mq);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,433,return new JsonCardinalityAggregation("cardinality", name, list);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,231,RelOptUtil.conjunctions(filter.getCondition())));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,549,RelOptUtil.conjunctions(joinRel.getCondition()),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,770,final String type;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,772,private JsonFilter(String type) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,783,super(type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,790,generator.writeStringField("type", type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,806,private JsonBound(String type, String dimension, String lower,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,809,super(type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,820,generator.writeStringField("type", type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,839,private JsonCompositeFilter(String type,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,847,generator.writeStringField("type", type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,849,case "NOT":
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,112,return new UdaAccumulatorFactory(
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,397,AggregateCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,119,final RelDataType rowType = protoRowType.apply(typeFactory);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,40,import java.sql.Date;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,41,import java.util.Calendar;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,120,Object value = ((RexLiteral) literal).getValue();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,130,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,131,return Pair.of(index, ((BigDecimal) value).intValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,134,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,135,return Pair.of(index, ((BigDecimal) value).doubleValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,138,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,139,return Pair.of(index, ((BigDecimal) value).floatValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,142,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,143,return Pair.of(index, ((BigDecimal) value).longValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,146,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,147,return Pair.of(index, ((BigDecimal) value).shortValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,150,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,151,return Pair.of(index, (short) ((BigDecimal) value).byteValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,154,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,155,return Pair.of(index, value);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,158,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,159,value = ((RexLiteral) literal).getValue2();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,160,final Date dateValue = Date.valueOf((String) value);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,161,return Pair.of(index, dateValue);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,163,final long timeInMillis = ((Calendar) value).getTimeInMillis();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,164,return Pair.of(index, new Date(timeInMillis));
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,167,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,169,final NlsString nl = (NlsString) value;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,170,return Pair.of(index, nl.getValue().charAt(0));
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,173,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,175,return Pair.of(index, ((NlsString) value).getValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,180,type.getSqlTypeName(), value.getClass());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,181,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,182,return Pair.of(index, ((NlsString) value).getValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,184,return Pair.of(index, value);
core/src/main/java/org/apache/calcite/util/Util.java,41,import java.io.BufferedInputStream;
core/src/main/java/org/apache/calcite/util/Util.java,42,import java.io.BufferedOutputStream;
core/src/main/java/org/apache/calcite/util/Util.java,1551,public static int runApplication(
core/src/main/java/org/apache/calcite/util/Util.java,1552,String[] cmdarray,
core/src/main/java/org/apache/calcite/util/Util.java,1553,Logger logger,
core/src/main/java/org/apache/calcite/util/Util.java,1554,Reader appInput,
core/src/main/java/org/apache/calcite/util/Util.java,1555,Writer appOutput) throws IOException, InterruptedException {
core/src/main/java/org/apache/calcite/util/Util.java,1556,return runAppProcess(
core/src/main/java/org/apache/calcite/util/Util.java,1557,newAppProcess(cmdarray),
core/src/main/java/org/apache/calcite/util/Util.java,1558,logger,
core/src/main/java/org/apache/calcite/util/Util.java,1559,appInput,
core/src/main/java/org/apache/calcite/util/Util.java,1560,appOutput);
core/src/main/java/org/apache/calcite/util/Util.java,1570,public static ProcessBuilder newAppProcess(String[] cmdarray) {
core/src/main/java/org/apache/calcite/util/Util.java,1573,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/Util.java,1574,for (int i = 0; i < cmdarray.length; ++i) {
core/src/main/java/org/apache/calcite/util/Util.java,1575,if (i > 0) {
core/src/main/java/org/apache/calcite/util/Util.java,1576,buf.append(" ");
core/src/main/java/org/apache/calcite/util/Util.java,1578,buf.append('"');
core/src/main/java/org/apache/calcite/util/Util.java,1579,buf.append(cmdarray[i]);
core/src/main/java/org/apache/calcite/util/Util.java,1580,buf.append('"');
core/src/main/java/org/apache/calcite/util/Util.java,1582,String fullcmd = buf.toString();
core/src/main/java/org/apache/calcite/util/Util.java,1583,buf.setLength(0);
core/src/main/java/org/apache/calcite/util/Util.java,1584,return new ProcessBuilder(cmdarray);
core/src/main/java/org/apache/calcite/util/Util.java,1601,public static int runAppProcess(
core/src/main/java/org/apache/calcite/util/Util.java,1602,ProcessBuilder pb,
core/src/main/java/org/apache/calcite/util/Util.java,1603,Logger logger,
core/src/main/java/org/apache/calcite/util/Util.java,1604,Reader appInput,
core/src/main/java/org/apache/calcite/util/Util.java,1605,Writer appOutput) throws IOException, InterruptedException {
core/src/main/java/org/apache/calcite/util/Util.java,1606,pb.redirectErrorStream(true);
core/src/main/java/org/apache/calcite/util/Util.java,1607,if (logger != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1608,logger.info("start process: " + pb.command());
core/src/main/java/org/apache/calcite/util/Util.java,1610,Process p = pb.start();
core/src/main/java/org/apache/calcite/util/Util.java,1621,if (appInput != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1622,OutputStream out =
core/src/main/java/org/apache/calcite/util/Util.java,1623,new BufferedOutputStream(
core/src/main/java/org/apache/calcite/util/Util.java,1624,p.getOutputStream(),
core/src/main/java/org/apache/calcite/util/Util.java,1625,100 * 1024);
core/src/main/java/org/apache/calcite/util/Util.java,1626,int c;
core/src/main/java/org/apache/calcite/util/Util.java,1627,while ((c = appInput.read()) != -1) {
core/src/main/java/org/apache/calcite/util/Util.java,1628,out.write(c);
core/src/main/java/org/apache/calcite/util/Util.java,1630,out.flush();
core/src/main/java/org/apache/calcite/util/Util.java,1632,if (appOutput != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1633,InputStream in =
core/src/main/java/org/apache/calcite/util/Util.java,1634,new BufferedInputStream(
core/src/main/java/org/apache/calcite/util/Util.java,1635,p.getInputStream(),
core/src/main/java/org/apache/calcite/util/Util.java,1636,100 * 1024);
core/src/main/java/org/apache/calcite/util/Util.java,1637,int c;
core/src/main/java/org/apache/calcite/util/Util.java,1638,while ((c = in.read()) != -1) {
core/src/main/java/org/apache/calcite/util/Util.java,1639,appOutput.write(c);
core/src/main/java/org/apache/calcite/util/Util.java,1641,appOutput.flush();
core/src/main/java/org/apache/calcite/util/Util.java,1642,in.close();
core/src/main/java/org/apache/calcite/util/Util.java,1644,p.waitFor();
core/src/main/java/org/apache/calcite/util/Util.java,1646,int status = p.exitValue();
core/src/main/java/org/apache/calcite/util/Util.java,1647,if (logger != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1648,logger.info("exit status=" + status + " from " + pb.command());
core/src/main/java/org/apache/calcite/util/Util.java,1650,return status;
core/src/main/java/org/apache/calcite/sql/fun/SqlMultisetValueConstructor.java,57,null,
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,46,import java.sql.Array;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,201,case ARRAY:
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,202,return Array.class;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1663,inferUnknownTypes(operandTypes[i], scope, operands.get(i));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,611,case MILLENNIUM:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,612,case CENTURY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,624,case QUARTER:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,625,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,626,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,627,res = divide(rexBuilder, res, TimeUnit.DAY.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,629,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,630,res = rexBuilder.makeCall(resType, SqlStdOperatorTable.EXTRACT_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,631,ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), res));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,634,res = divide(rexBuilder, res, unit.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,636,rexBuilder.makeExactLiteral(BigDecimal.ONE));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,638,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,655,case DOW:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,656,case DOY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,657,case WEEK:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,658,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,660,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,663,throw new IllegalArgumentException("Extract " + unit + " from "
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,664,+ sqlTypeName + " type data is not supported");
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,665,case TIMESTAMP: // fall through
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,666,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,668,return convertFunction(cx, (SqlFunction) call.getOperator(), call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,50,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,61,import java.util.Calendar;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,561,final Comparable value = literal.getValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,562,if (value == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,589,return Expressions.constant(value, javaClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,593,Expressions.constant(value.toString()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,596,(((Calendar) value).getTimeInMillis() / DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,597,javaClass = int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,598,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,601,(((Calendar) value).getTimeInMillis() % DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,605,value2 = ((Calendar) value).getTimeInMillis();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,606,javaClass = long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,607,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,609,value2 = ((BigDecimal) value).longValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,612,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,613,value2 = ((BigDecimal) value).intValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,614,javaClass = int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,615,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,618,value2 = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,625,((ByteString) value).getBytes(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,628,value2 = value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,629,javaClass = value.getClass();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,239,return ((RexLiteral) node).getValue();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,28,import java.math.BigDecimal;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,46,: ((BigDecimal) ((RexLiteral) rel.offset).getValue()).intValue();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,50,: ((BigDecimal) ((RexLiteral) rel.fetch).getValue()).intValue();
core/src/main/java/org/apache/calcite/plan/Strong.java,64,return ((RexLiteral) node).getValue() == null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,338,final Comparable c1 = o1.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,339,final Comparable c2 = o2.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,346,final Comparable c1 = o1.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,347,final Comparable c2 = o2.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,301,values.add(NullSentinel.mask(literal.getValue()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,148,d += typeValueSize(field.getType(), literals.get(i).getValue());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,353,return typeValueSize(node.getType(), ((RexLiteral) node).getValue());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,88,RexNode selec =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,89,rexBuilder.makeApproxLiteral(new BigDecimal(selectivity));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,90,return rexBuilder.makeCall(ARTIFICIAL_SELECTIVITY_FUNC, selec);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,99,public static double getSelectivityValue(RexNode artificialSelecFuncNode) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,100,assert artificialSelecFuncNode instanceof RexCall;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,101,RexCall call = (RexCall) artificialSelecFuncNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,104,BigDecimal bd = (BigDecimal) ((RexLiteral) operand).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,105,return bd.doubleValue();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,74,import java.util.Calendar;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,463,return SqlLiteral.createExactNumeric(literal.getValue().toString(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,464,POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,467,literal.getValue().toString(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,469,return SqlLiteral.createBoolean((Boolean) literal.getValue(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,471,return SqlLiteral.createDate((Calendar) literal.getValue(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,473,return SqlLiteral.createTime((Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,476,return SqlLiteral.createTimestamp((Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,31,import org.apache.calcite.runtime.SqlFunctions;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,495,Comparable value = literal.getValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1046,public RexLiteral makeDateLiteral(Calendar date) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1047,assert date != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1048,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1049,date, typeFactory.createSqlType(SqlTypeName.DATE), SqlTypeName.DATE);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1055,public RexLiteral makeTimeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1056,Calendar time,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1057,int precision) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1058,assert time != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1059,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1060,time,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1068,public RexLiteral makeTimestampLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1069,Calendar timestamp,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1071,assert timestamp != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1072,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1073,timestamp,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1268,return makeTimeLiteral((Calendar) value, type.getPrecision());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1270,return makeDateLiteral((Calendar) value);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1272,return makeTimestampLiteral((Calendar) value, type.getPrecision());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1339,final Calendar calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1367,if (o instanceof Calendar) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1371,calendar.setTimeInMillis((Integer) o);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1372,return calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1374,if (o instanceof Calendar) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1378,calendar.setTimeInMillis(0);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1379,calendar.add(Calendar.DAY_OF_YEAR, (Integer) o);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1380,return calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1382,if (o instanceof Calendar) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1386,calendar.setTimeInMillis((Long) o);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1387,return calendar;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,33,import org.apache.calcite.util.ZonelessDate;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,34,import org.apache.calcite.util.ZonelessDatetime;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,35,import org.apache.calcite.util.ZonelessTime;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,36,import org.apache.calcite.util.ZonelessTimestamp;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,378,printDatetime(pw, new ZonelessDate(), value);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,381,printDatetime(pw, new ZonelessTime(), value);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,384,printDatetime(pw, new ZonelessTimestamp(), value);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,415,private static void printDatetime(
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,416,PrintWriter pw,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,417,ZonelessDatetime datetime,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,418,Comparable value) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,419,assert value instanceof Calendar;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,420,datetime.setZonelessTime(
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,421,((Calendar) value).getTimeInMillis());
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,422,pw.print(datetime);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,486,Calendar cal = null;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,487,if (typeName == SqlTypeName.DATE) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,488,cal =
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,489,DateTimeUtils.parseDateFormat(literal, format, tz);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,492,DateTimeUtils.PrecisionTime ts =
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,493,DateTimeUtils.parsePrecisionDateTimeLiteral(literal, format, tz);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,494,if (ts != null) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,495,cal = ts.getCalendar();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,498,if (cal == null) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,503,return new RexLiteral(cal, type, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,504,case SYMBOL:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,542,return value;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,557,return ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,559,return ((BigDecimal) value).unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,562,/ DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,565,% DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,566,case TIMESTAMP:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,567,return ((Calendar) value).getTimeInMillis();
core/src/main/java/org/apache/calcite/rex/RexToSqlNodeConverterImpl.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/rex/RexToSqlNodeConverterImpl.java,86,(Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/rex/RexToSqlNodeConverterImpl.java,95,(Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,23,import org.apache.calcite.util.ZonelessDate;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,24,import org.apache.calcite.util.ZonelessTime;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,25,import org.apache.calcite.util.ZonelessTimestamp;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,27,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,28,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,45,protected final String formatString;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,58,protected SqlAbstractDateTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,59,Calendar d,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,60,boolean tz,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,61,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,62,int precision,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,63,String formatString,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,64,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,68,this.formatString = formatString;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,73,public int getPrec() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,74,return precision;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,77,public String toValue() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,78,return Long.toString(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,81,public Calendar getCal() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,82,return (Calendar) value;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,92,public TimeZone getTimeZone() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,93,assert hasTimeZone : "Attempt to get time zone on Literal date: "
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,94,+ getCal() + ", which has no time zone";
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,95,return getCal().getTimeZone();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,125,protected ZonelessDate getDate() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,126,ZonelessDate zd = new ZonelessDate();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,127,zd.setZonelessTime(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,128,return zd;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,135,protected ZonelessTime getTime() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,136,ZonelessTime zt = new ZonelessTime();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,137,zt.setZonelessTime(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,138,return zt;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,145,protected ZonelessTimestamp getTimestamp() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,146,ZonelessTimestamp zt = new ZonelessTimestamp();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,147,zt.setZonelessTime(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,148,return zt;
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,36,SqlDateLiteral(Calendar d, SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,37,super(d, false, SqlTypeName.DATE, 0, DateTimeUtils.DATE_FORMAT_STRING, pos);
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,40,SqlDateLiteral(Calendar d, String format, SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,41,super(d, false, SqlTypeName.DATE, 0, format, pos);
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,47,return new SqlDateLiteral((Calendar) value, pos);
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,50,public String toString() {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,58,return getDate().toString(formatString);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,199,return value instanceof Calendar;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,350,return literal.toValue();
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,355,return literal.toValue();
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,658,return new SqlDateLiteral(calendar, pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,665,return new SqlTimestampLiteral(calendar, precision, false, pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,672,return new SqlTimeLiteral(calendar, precision, false, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,36,SqlTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,37,Calendar t,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,38,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,39,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,40,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,41,this(t, precision, hasTimeZone, DateTimeUtils.TIME_FORMAT_STRING, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,44,SqlTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,45,Calendar t,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,46,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,47,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,48,String format,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,50,super(t, hasTimeZone, SqlTypeName.TIME, precision, format, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,51,Preconditions.checkArgument(this.precision >= 0 && this.precision <= 3);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,57,return new SqlTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,58,(Calendar) value,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,59,precision,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,60,hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,61,formatString,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,62,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,73,String result = getTime().toString(formatString);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,74,final Calendar cal = getCal();
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,75,if (precision > 0) {
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,77,String digits = Long.toString(cal.getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,78,result =
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,79,result + "."
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,80,+ digits.substring(digits.length() - 3,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,81,digits.length() - 3 + precision);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,83,assert 0 == cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,85,return result;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,36,public SqlTimestampLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,37,Calendar cal,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,38,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,39,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,40,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,41,this(cal, precision, hasTimeZone, DateTimeUtils.TIMESTAMP_FORMAT_STRING,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,42,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,45,public SqlTimestampLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,46,Calendar cal,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,47,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,48,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,49,String format,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,50,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,51,super(cal, hasTimeZone, SqlTypeName.TIMESTAMP, precision, format, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,52,Preconditions.checkArgument(this.precision >= 0 && this.precision <= 3);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,58,return new SqlTimestampLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,59,(Calendar) value,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,60,precision,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,61,hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,62,formatString,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,63,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,74,String result = getTimestamp().toString(formatString);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,75,final Calendar cal = getCal();
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,77,assert precision <= 3;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,80,String digits = Long.toString(cal.getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,81,result =
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,82,result + "."
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,83,+ digits.substring(digits.length() - 3,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,84,digits.length() - 3 + precision);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,86,assert 0 == cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,88,return result;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,767,return SqlLiteral.createDate((Calendar) o, pos);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,769,return SqlLiteral.createTime((Calendar) o, 0 /* todo */, pos);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,771,return SqlLiteral.createTimestamp((Calendar) o, 0 /* todo */, pos);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2656,Calendar calendar = (Calendar) literal.getValue();
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,38,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,81,final Object value = literal.getValue();
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,82,if (value == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,105,BigDecimal bd = (BigDecimal) value;
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,109,case DOUBLE:
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,113,return rexBuilder.makeApproxLiteral((BigDecimal) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,115,return rexBuilder.makeCharLiteral((NlsString) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,117,return rexBuilder.makeLiteral(((Boolean) value).booleanValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,119,bitString = (BitString) value;
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,129,return rexBuilder.makeFlag((Enum) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,132,(Calendar) value,
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,136,(Calendar) value,
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,139,return rexBuilder.makeDateLiteral((Calendar) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,144,((SqlIntervalLiteral.IntervalValue) value).getIntervalQualifier();
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,145,l = (long) SqlLiteral.value(literal);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,147,BigDecimal.valueOf(l),
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,19,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,42,public interface BasicDatetime {
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,48,long getTime();
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,54,void setZonelessTime(long value);
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,60,void setZonedTime(long value, TimeZone zone);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,21,import java.sql.Date;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,23,import java.util.Calendar;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,24,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,29,public class ZonelessDate extends ZonelessDatetime {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,35,private static final long serialVersionUID = -6385775986251759394L;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,39,protected transient Date tempDate;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,46,public ZonelessDate() {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,52,public void setZonelessTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,53,super.setZonelessTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,54,clearTime();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,58,public void setZonedTime(long value, TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,59,super.setZonedTime(value, zone);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,60,clearTime();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,64,public Object toJdbcObject() {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,65,return new Date(getJdbcDate(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,74,public String toString() {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,75,Date jdbcDate = getTempDate(getJdbcDate(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,76,return jdbcDate.toString();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,86,public String toString(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,87,DateFormat formatter = getFormatter(format);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,88,Date jdbcDate = getTempDate(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,89,return formatter.format(jdbcDate);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,99,public static ZonelessDate parse(String s) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,100,return parse(s, DateTimeUtils.DATE_FORMAT_STRING);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,111,public static ZonelessDate parse(String s, String format) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,112,Calendar cal =
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,113,DateTimeUtils.parseDateFormat(s, format, DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,114,if (cal == null) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,115,return null;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,117,ZonelessDate zd = new ZonelessDate();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,118,zd.setZonelessTime(cal.getTimeInMillis());
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,119,return zd;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,125,protected Date getTempDate(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,126,if (tempDate == null) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,127,tempDate = new Date(value);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,129,tempDate.setTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,131,return tempDate;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,21,import java.io.Serializable;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,23,import java.util.Calendar;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,24,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,30,public abstract class ZonelessDatetime implements BasicDatetime, Serializable {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,36,private static final long serialVersionUID = -1274713852537224763L;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,44,public long internalTime;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,48,protected transient Calendar tempCal;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,49,protected transient DateFormat tempFormatter;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,50,protected transient String lastFormat;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,55,public long getTime() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,56,return internalTime;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,60,public void setZonelessTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,61,this.internalTime = value;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,65,public void setZonedTime(long value, TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,66,this.internalTime = value + zone.getOffset(value);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,72,public long getTimeValue() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,76,long timePart = internalTime % DateTimeUtils.MILLIS_PER_DAY;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,77,if (timePart < 0) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,78,timePart += DateTimeUtils.MILLIS_PER_DAY;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,80,return timePart;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,86,public long getDateValue() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,87,return internalTime - getTimeValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,93,public void clearDate() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,94,internalTime = getTimeValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,100,public void clearTime() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,101,internalTime = getDateValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,110,public long getJdbcTime(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,111,long timeValue = getTimeValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,112,return timeValue - zone.getOffset(timeValue);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,121,public long getJdbcDate(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,122,Calendar cal = getCalendar(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,123,cal.setTimeInMillis(getDateValue());
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,125,int year = cal.get(Calendar.YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,126,int doy = cal.get(Calendar.DAY_OF_YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,128,cal.clear();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,129,cal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,130,cal.set(Calendar.YEAR, year);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,131,cal.set(Calendar.DAY_OF_YEAR, doy);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,132,return cal.getTimeInMillis();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,141,public long getJdbcTimestamp(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,142,Calendar cal = getCalendar(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,143,cal.setTimeInMillis(internalTime);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,145,int year = cal.get(Calendar.YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,146,int doy = cal.get(Calendar.DAY_OF_YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,147,int hour = cal.get(Calendar.HOUR_OF_DAY);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,148,int minute = cal.get(Calendar.MINUTE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,149,int second = cal.get(Calendar.SECOND);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,150,int millis = cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,152,cal.clear();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,153,cal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,154,cal.set(Calendar.YEAR, year);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,155,cal.set(Calendar.DAY_OF_YEAR, doy);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,156,cal.set(Calendar.HOUR_OF_DAY, hour);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,157,cal.set(Calendar.MINUTE, minute);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,158,cal.set(Calendar.SECOND, second);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,159,cal.set(Calendar.MILLISECOND, millis);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,160,return cal.getTimeInMillis();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,166,public abstract Object toJdbcObject();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,172,protected Calendar getCalendar(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,173,if (tempCal == null) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,176,tempCal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,178,return tempCal;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,187,protected DateFormat getFormatter(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,188,if ((tempFormatter != null) && lastFormat.equals(format)) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,189,return tempFormatter;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,191,tempFormatter = DateTimeUtils.newDateFormat(format);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,192,tempFormatter.setTimeZone(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,193,lastFormat = format;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,194,return tempFormatter;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,21,import java.sql.Time;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,23,import java.text.SimpleDateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,24,import java.util.Calendar;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,25,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,30,public class ZonelessTime extends ZonelessDatetime {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,36,private static final long serialVersionUID = 906156904798141861L;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,40,protected final int precision;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,41,protected transient Time tempTime;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,48,public ZonelessTime() {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,49,precision = 0;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,61,public ZonelessTime(int precision) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,62,this.precision = precision;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,68,public void setZonelessTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,69,super.setZonelessTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,70,clearDate();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,74,public void setZonedTime(long value, TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,75,super.setZonedTime(value, zone);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,76,clearDate();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,80,public Object toJdbcObject() {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,81,return new Time(getJdbcTime(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,91,public long getJdbcTimestamp(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,92,Calendar cal = getCalendar(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,93,cal.setTimeInMillis(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,94,int hour = cal.get(Calendar.HOUR_OF_DAY);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,95,int minute = cal.get(Calendar.MINUTE);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,96,int second = cal.get(Calendar.SECOND);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,97,int millis = cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,99,cal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,100,cal.setTimeInMillis(System.currentTimeMillis());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,101,cal.set(Calendar.HOUR_OF_DAY, hour);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,102,cal.set(Calendar.MINUTE, minute);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,103,cal.set(Calendar.SECOND, second);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,104,cal.set(Calendar.MILLISECOND, millis);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,105,return cal.getTimeInMillis();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,114,public String toString() {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,115,Time jdbcTime = getTempTime(getJdbcTime(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,116,return jdbcTime.toString();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,125,public String toString(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,126,DateFormat formatter = getFormatter(format);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,127,Time jdbcTime = getTempTime(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,128,return formatter.format(jdbcTime);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,138,public static ZonelessTime parse(String s) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,139,return parse(s, DateTimeUtils.TIME_FORMAT_STRING);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,149,public static ZonelessTime parse(String s, String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,150,DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,151,DateTimeUtils.parsePrecisionDateTimeLiteral(s,
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,152,format,
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,153,DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,154,if (pt == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,155,return null;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,157,ZonelessTime zt = new ZonelessTime(pt.getPrecision());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,158,zt.setZonelessTime(pt.getCalendar().getTime().getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,159,return zt;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,165,protected Time getTempTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,166,if (tempTime == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,167,tempTime = new Time(value);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,169,tempTime.setTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,171,return tempTime;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,21,import java.sql.Timestamp;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,27,public class ZonelessTimestamp extends ZonelessDatetime {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,33,private static final long serialVersionUID = -6829714640541648394L;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,37,protected final int precision;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,39,protected transient Timestamp tempTimestamp;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,46,public ZonelessTimestamp() {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,47,this.precision = 0;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,59,public ZonelessTimestamp(int precision) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,60,this.precision = precision;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,66,public Object toJdbcObject() {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,67,return new Timestamp(getJdbcTimestamp(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,81,public String toString() {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,82,Timestamp ts =
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,83,getTempTimestamp(getJdbcTimestamp(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,98,public String toString(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,99,DateFormat formatter = getFormatter(format);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,100,Timestamp ts = getTempTimestamp(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,101,return formatter.format(ts);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,114,public static ZonelessTimestamp parse(String s) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,115,return parse(s, DateTimeUtils.TIMESTAMP_FORMAT_STRING);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,129,public static ZonelessTimestamp parse(String s, String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,130,DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,131,DateTimeUtils.parsePrecisionDateTimeLiteral(s,
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,132,format,
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,133,DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,134,if (pt == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,135,return null;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,137,ZonelessTimestamp zt = new ZonelessTimestamp(pt.getPrecision());
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,138,zt.setZonelessTime(pt.getCalendar().getTime().getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,139,return zt;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,146,protected Timestamp getTempTimestamp(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,147,if (tempTimestamp == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,148,tempTimestamp = new Timestamp(value);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,150,tempTimestamp.setTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,152,return tempTimestamp;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,485,TimeZone tz = DateTimeUtils.GMT_ZONE;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,80,this.dataSource = dataSource;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,81,this.dialect = dialect;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,85,assert dialect != null;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,86,assert dataSource != null;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,364,return getTableMap(true).keySet();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,48,super(parent, schema, name);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,281,final DataContext dataContext = createDataContext(map);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,285,public DataContext createDataContext(Map<String, Object> parameterValues) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,289,return new DataContextImpl(this, parameterValues);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,360,Map<String, Object> parameters) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,363,this.rootSchema = connection.rootSchema;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,419,return rootSchema.plus();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,444,return connection.rootSchema;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,459,return connection.createDataContext(ImmutableMap.<String, Object>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,209,columns, cursorFactory, ImmutableList.<RelCollation>of(), -1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,571,h.signature =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,573,statement.createPrepareContext(), maxRowCount);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,595,statement.createPrepareContext(), maxRowCount);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,724,.createDataContext(ImmutableMap.<String, Object>of());
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,299,List<RelCollation> collationList, long maxRowCount,
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,300,Bindable<T> bindable) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,84,ImmutableList.<RelCollation>of(), -1, null);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,88,private ImmutableList<ImmutableList<String>> path;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,90,CalciteSchema(CalciteSchema parent, Schema schema, String name) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,496,public final List<String> sqls;
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,38,super(parent, schema, name);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,317,if (materialization.rootSchema == rootSchema
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,382,Schemas.createDataContext(connection);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,400,Schemas.createDataContext(connection);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,123,final String name2 = entry.name;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,124,return RelOptTableImpl.create(this, table.getRowType(typeFactory),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,125,schema.add(name2, table), null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,716,ImmutableList.<RelCollation>of(), -1, bindable);
core/src/main/java/org/apache/calcite/schema/Schemas.java,203,public static DataContext createDataContext(Connection connection) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,204,return new DummyDataContext((CalciteConnection) connection);
core/src/main/java/org/apache/calcite/schema/Schemas.java,366,createDataContext(connection), schema, schemaPath);
core/src/main/java/org/apache/calcite/schema/Schemas.java,540,public DummyDataContext(CalciteConnection connection) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,547,return connection.getRootSchema();
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,58,final SqlWriter.Frame frame = writer.startFunCall(getName());
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,60,call.operand(0).unparse(writer, 0, 100);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,61,writer.sep("TO");
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,62,call.operand(1).unparse(writer, 100, 0);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,64,call.operand(0).unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,164,final SqlNodeList subQuery = new SqlNodeList(POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,165,subQuery.add(unionAll);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,169,elseExpr = SqlStdOperatorTable.SCALAR_QUERY.createCall(POS, subQuery);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,62,this.lineNumber = lineNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,63,this.columnNumber = columnNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,64,this.endLineNumber = lineNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,65,this.endColumnNumber = columnNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,168,public static SqlParserPos sum(SqlNode[] nodes) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,169,final Iterable<SqlParserPos> poses = toPos(Arrays.asList(nodes));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,170,return sum(poses, Integer.MAX_VALUE, Integer.MAX_VALUE, -1, -1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,174,return Iterables.transform(nodes,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,175,new Function<SqlNode, SqlParserPos>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,176,public SqlParserPos apply(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,177,return input.getParserPosition();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,186,public static SqlParserPos sum(List<? extends SqlNode> nodes) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,187,return sum(nodes.toArray(new SqlNode[nodes.size()]));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,195,return sum(poses, Integer.MAX_VALUE, Integer.MAX_VALUE, -1, -1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,95,Class<? extends LogicalAggregate> clazz,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,231,relBuilder.aggregate(relBuilder.groupKey(fullGroupSet, groupSets.size() > 1, groupSets),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,235,final int indicatorCount = groupSets.size() > 1 ? groupCount : 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,294,filters.put(groupSet, registrar.register(groupSet));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,177,case LITERAL:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,902,return whereScopes.get(select);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3342,SqlNode expandedItem = expand(groupItem, groupScope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3443,final SqlNode having = select.getHaving();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4466,private final SqlValidatorImpl validator;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,26,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,27,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,114,final RelDataTypeFactory typeFactory = filter.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,115,if (RexUtil.isNullabilityCast(typeFactory, newCondition)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,116,newCondition = ((RexCall) newCondition).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,120,RelNode newFilterRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,121,copyFilter
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,122,? filter.copy(filter.getTraitSet(), project.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,124,: relBuilder.push(project.getInput()).filter(newCondition).build();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,167,call.transformTo(call.builder().
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,736,if (!x.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,738,final RelNode filter = filterFactory.createFilter(frame.rel, x);
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,47,this.operator = operator;
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,66,this.operator = operator;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,572,calciteConnection.parseQuery(CalcitePrepare.Query.of(sql),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,594,signature = calciteConnection.parseQuery(CalcitePrepare.Query.of(sql),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4131,&& !call.isExpanded()) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,24,import org.apache.calcite.sql.SqlSpecialOperator;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,32,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,33,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,41,public class SqlOverlapsOperator extends SqlSpecialOperator {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,44,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,45,SqlWriter.FrameTypeEnum.create("OVERLAPS");
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,49,public SqlOverlapsOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,50,super("OVERLAPS",
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,51,SqlKind.OVERLAPS,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,52,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,53,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,54,ReturnTypes.BOOLEAN_NULLABLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,56,null);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,61,public void unparse(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,62,SqlWriter writer,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,63,SqlCall call,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,64,int leftPrec,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,67,writer.startList(FRAME_TYPE, "(", ")");
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,68,call.operand(0).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,69,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,70,call.operand(1).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,71,writer.sep(")", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,73,writer.sep("(", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,74,call.operand(2).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,75,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,76,call.operand(3).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,80,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,81,return SqlOperandCountRanges.of(4);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,84,public String getSignatureTemplate(int operandsCount) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,85,assert 4 == operandsCount;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,86,return "({1}, {2}) {0} ({3}, {4})";
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,111,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,112,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,114,SqlValidator validator = callBinding.getValidator();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,115,SqlValidatorScope scope = callBinding.getScope();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,116,if (!OperandTypes.DATETIME.checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,117,callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,118,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,119,0,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,120,throwOnFailure)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,123,if (!OperandTypes.DATETIME.checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,124,callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,125,callBinding.operand(2),
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,126,0,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,127,throwOnFailure)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,128,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,131,RelDataType t0 = validator.deriveType(scope, callBinding.operand(0));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,132,RelDataType t1 = validator.deriveType(scope, callBinding.operand(1));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,133,RelDataType t2 = validator.deriveType(scope, callBinding.operand(2));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,134,RelDataType t3 = validator.deriveType(scope, callBinding.operand(3));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,137,if (!SqlTypeUtil.sameNamedType(t0, t2)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,138,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,139,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,144,if (SqlTypeUtil.isDatetime(t1)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,147,if (!SqlTypeUtil.sameNamedType(t0, t1)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,154,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,155,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,157,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,160,if (SqlTypeUtil.isDatetime(t3)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,163,if (!SqlTypeUtil.sameNamedType(t2, t3)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,164,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,165,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,167,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,170,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,171,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,173,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,988,new SqlOverlapsOperator();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,34,import org.apache.calcite.sql.SqlBasicCall;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1155,final SqlNode[] operands = ((SqlBasicCall) call).getOperands();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1156,assert operands.length == 4;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,188,this(target_, query_, DEFAULT_RULES);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,450,reverseSubstitute(query, matches, sub, 0, matches.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,600,private static void reverseSubstitute(Holder query,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,607,reverseSubstitute(query, rem, sub, replaceCount, maxCount);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,612,reverseSubstitute(query, rem, sub, replaceCount, maxCount);
core/src/main/java/org/apache/calcite/plan/Strong.java,68,case EQUALS:
core/src/main/java/org/apache/calcite/plan/Strong.java,69,case NOT_EQUALS:
core/src/main/java/org/apache/calcite/plan/Strong.java,70,case LESS_THAN:
core/src/main/java/org/apache/calcite/plan/Strong.java,71,case LESS_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/plan/Strong.java,72,case GREATER_THAN:
core/src/main/java/org/apache/calcite/plan/Strong.java,73,case GREATER_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,105,List<RelDataTypeField> projJoinFieldList =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,106,new ArrayList<RelDataTypeField>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,83,List<RelNode> newSetOpInputs = new ArrayList<RelNode>();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,616,if (leftFields.contains(exprArgs)) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,753,public interface ExprCondition {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,766,new ExprCondition() {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,767,public boolean test(RexNode expr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,777,public static class OperatorExprCondition implements ExprCondition {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,785,public OperatorExprCondition(Set<SqlOperator> operatorSet) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,786,this.operatorSet = operatorSet;
core/src/main/java/org/apache/calcite/rel/core/Window.java,318,false, getProjectOrdinals(aggCall.getOperands()), -1,
core/src/main/java/org/apache/calcite/rel/core/Window.java,352,int ordinal) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,159,aggMap.size());
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,114,((Window.RexWinAggCall) call).ordinal);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,336,boolean nullWhenCountZero) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,348,final RexOver over = new RexOver(type, operator, exprs, window);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,364,window),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,371,operator, exprs, window),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,389,window),
core/src/main/java/org/apache/calcite/rex/RexOver.java,63,RexWindow window) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,84,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,85,return super.computeDigest(withType) + " OVER (" + window + ")";
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,53,window);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1888,window);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1889,return rexAgg.accept(visitor);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4864,SqlWindow window) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4925,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4965,needSum0);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,125,type = typeFactory.createJavaType(String.class);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,148,types.add(typeFactory.createJavaType(String.class));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,268,return new java.sql.Date(date.getTime());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,278,return new java.sql.Time(date.getTime());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,288,return new java.sql.Timestamp(date.getTime());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,69,return typeFactory.createJavaType(clazz);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,782,private JsonSelector(String type, String dimension, String value) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,808,boolean alphaNumeric) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,317,boolean dummy, // prevent method from being used
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,207,int i = fieldNames.indexOf(fieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,208,if (i < 0) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,209,return;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,830,generator.writeBooleanField("alphaNumeric", alphaNumeric);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,181,parseFields(fieldNames, fieldTypes, rowBuilder, parser);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,330,final List<String> dimensions = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,366,if (aggregations.isEmpty()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,369,aggregations.add(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,599,final String fieldName =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,600,rowType.getFieldList().get(ref.getIndex()).getName();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,606,return fieldName;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,614,default:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,724,private interface Json {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,138,if (parser.nextToken() == JsonToken.FIELD_NAME
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,140,&& parser.nextToken() == JsonToken.START_OBJECT) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,143,page.pagingIdentifier = parser.getCurrentName();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,144,if (parser.nextToken() == JsonToken.VALUE_NUMBER_INT) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,145,page.offset = parser.getIntValue();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,152,if (parser.nextToken() == JsonToken.FIELD_NAME
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,154,&& parser.nextToken() == JsonToken.START_ARRAY) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,155,while (parser.nextToken() == JsonToken.START_OBJECT) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,156,expectScalarField(parser, "segmentId");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,157,expectScalarField(parser, "offset");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,158,if (parser.nextToken() == JsonToken.FIELD_NAME
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,160,&& parser.nextToken() == JsonToken.START_OBJECT) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,162,sink.send(rowBuilder.build());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,163,rowBuilder.reset();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,165,expect(parser, JsonToken.END_OBJECT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,167,parser.nextToken();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,612,return ((RexLiteral) e).getValue2().toString();
avatica/server/src/main/java/org/apache/calcite/avatica/jdbc/StatementInfo.java,23,import java.util.Objects;
avatica/server/src/main/java/org/apache/calcite/avatica/jdbc/StatementInfo.java,40,this.statement = Objects.requireNonNull(statement);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,149,final RexProgram program =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,150,this.program.normalize(getCluster().getRexBuilder(), true);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,91,import static org.apache.calcite.rex.RexUtil.simplify;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,322,public static RexNode splitFilter(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,323,final RexBuilder rexBuilder, RexNode condition, RexNode target) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,329,RexNode z = splitOr(rexBuilder, condition, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,334,RexNode x = andNot(rexBuilder, target, condition);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,336,RexNode x2 = andNot(rexBuilder, condition, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,337,return simplify(rexBuilder, x2);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1187,createFilter(query, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1194,MutableFilter createFilter(MutableFilter query, MutableFilter target) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1226,FilterToFilterUnifyRule.INSTANCE.createFilter(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1227,query, target);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,201,program = program.normalize(cluster.getRexBuilder(), false);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,453,RexBuilder rexBuilder = rel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,455,boolean reduced = reduceExpressionsInternal(rel, expList, predicates);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,472,protected static boolean reduceExpressionsInternal(RelNode rel, List<RexNode> expList,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,474,RexBuilder rexBuilder = rel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,502,new RexReplacer(
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,503,rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,504,removableCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,505,reducedExprs,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,521,new RexReplacer(
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,522,rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,523,Pair.left(pairs),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,524,Pair.right(pairs),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,544,executor.reduce(rexBuilder, constExps2, reducedValues);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,564,new RexReplacer(
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,565,rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,566,constExps,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,567,reducedValues,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,568,addCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,809,private final RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,815,RexBuilder rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,819,this.rexBuilder = rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,840,node = RexUtil.simplify(rexBuilder, node);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,765,final RexProgram normalizedProgram = normalize(rexBuilder, false);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,784,public RexProgram normalize(RexBuilder rexBuilder, boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,59,assert inputRowType != null;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,60,assert rexBuilder != null;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,61,this.inputRowType = inputRowType;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,62,this.rexBuilder = rexBuilder;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,94,boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,95,this(inputRowType, rexBuilder);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,118,if (simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,119,project = RexUtil.simplify(rexBuilder, pair.left.accept(expander));
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,130,if (simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,131,condition = RexUtil.simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,320,expr = RexUtil.simplify(rexBuilder, expr);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,528,boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,543,outputRowType, normalize, false);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,589,return program.normalize(rexBuilder, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,55,import java.util.Collections;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,59,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1352,switch (e.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1353,case AND:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1354,return simplifyAnd(rexBuilder, (RexCall) e, unknownAsFalse);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1355,case OR:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1356,return simplifyOr(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1357,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1358,return simplifyNot(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1359,case CASE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1363,case IS_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1364,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1365,case IS_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1366,case IS_NOT_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1367,case IS_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1368,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1369,assert e instanceof RexCall;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1370,return simplifyIs(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1371,default:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1372,return e;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1381,return simplifyAnds(rexBuilder, nodes, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1386,final List<RexNode> terms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1387,final List<RexNode> notTerms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1388,for (RexNode e : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1389,RelOptUtil.decomposeConjunction(e, terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1391,if (unknownAsFalse) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1392,return simplifyAnd2ForUnknownAsFalse(rexBuilder, terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1394,return simplifyAnd2(rexBuilder, terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1397,private static RexNode simplifyNot(RexBuilder rexBuilder, RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1398,final RexNode a = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1399,switch (a.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1400,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1402,return simplify(rexBuilder, ((RexCall) a).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1404,final SqlKind negateKind = a.getKind().negate();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1405,if (a.getKind() != negateKind) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1406,return simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1407,rexBuilder.makeCall(op(negateKind),
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1408,ImmutableList.of(((RexCall) a).getOperands().get(0))));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1410,return call;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1424,private static RexNode simplifyIs(RexBuilder rexBuilder, RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1425,final SqlKind kind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1426,final RexNode a = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1438,return simplify(rexBuilder, a);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1443,return simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1444,rexBuilder.makeCall(SqlStdOperatorTable.NOT, a));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1447,switch (a.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1448,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1455,return simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1456,rexBuilder.makeCall(op(kind.negate()),
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1457,((RexCall) a).getOperands().get(0)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1459,RexNode a2 = simplify(rexBuilder, a);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1460,if (a != a2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1461,return rexBuilder.makeCall(op(kind), ImmutableList.of(a2));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1466,private static SqlOperator op(SqlKind kind) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1500,final List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1501,final List<RexNode> newOperands = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1502,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1503,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1504,if (isCasePredicate(call, i)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1505,if (operand.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1508,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1512,++i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1513,continue;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1516,newOperands.add(operand);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1518,assert newOperands.size() % 2 == 1;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1526,trueFalse:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1527,if (call.getType().getSqlTypeName() == SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1538,for (Ord<Pair<RexNode, RexNode>> pair : Ord.zip(pairs)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1541,break trueFalse;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1544,final List<RexNode> terms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1545,final List<RexNode> notTerms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1546,for (Ord<Pair<RexNode, RexNode>> pair : Ord.zip(pairs)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1547,if (pair.e.getValue().isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1548,terms.add(andNot(rexBuilder, pair.e.getKey(), notTerms));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1550,notTerms.add(pair.e.getKey());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1555,if (newOperands.equals(operands)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1556,return call;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1558,return call.clone(call.getType(), newOperands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1563,private static List<Pair<RexNode, RexNode>> casePairs(RexBuilder rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1564,List<RexNode> operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1565,final ImmutableList.Builder<Pair<RexNode, RexNode>> builder =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1566,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1567,for (int i = 0; i < operands.size() - 1; i += 2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1568,builder.add(Pair.of(operands.get(i), operands.get(i + 1)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1570,builder.add(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1571,Pair.of((RexNode) rexBuilder.makeLiteral(true), Util.last(operands)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1572,return builder.build();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1577,final List<RexNode> terms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1578,final List<RexNode> notTerms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1579,RelOptUtil.decomposeConjunction(e, terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1580,if (unknownAsFalse) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1581,return simplifyAnd2ForUnknownAsFalse(rexBuilder, terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1583,return simplifyAnd2(rexBuilder, terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1591,if (terms.isEmpty() && notTerms.isEmpty()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1592,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1594,if (terms.size() == 1 && notTerms.isEmpty()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1596,return simplify(rexBuilder, terms.get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1605,for (RexNode notDisjunction : notTerms) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1606,final List<RexNode> terms2 = RelOptUtil.conjunctions(notDisjunction);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1607,if (terms.containsAll(terms2)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1608,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1612,for (RexNode notDisjunction : notTerms) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1613,terms.add(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1614,simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1615,rexBuilder.makeCall(SqlStdOperatorTable.NOT, notDisjunction)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1617,return composeConjunction(rexBuilder, terms, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1627,if (terms.isEmpty() && notTerms.isEmpty()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1628,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1630,if (terms.size() == 1 && notTerms.isEmpty()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1632,return simplify(rexBuilder, terms.get(0), true);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1635,final Set<String> negatedTerms = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1636,final Set<String> nullOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1637,final Set<RexNode> notNullOperands = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1638,final Set<String> comparedOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1639,for (int i = 0; i < terms.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1641,if (!isDeterministic(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1642,continue;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1644,switch (term.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1645,case EQUALS:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1646,case NOT_EQUALS:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1647,case LESS_THAN:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1648,case GREATER_THAN:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1649,case LESS_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1650,case GREATER_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1651,RexCall call = (RexCall) term;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1652,RexNode left = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1653,comparedOperands.add(left.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1655,if (left.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1656,RexCall leftCast = (RexCall) left;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1657,comparedOperands.add(leftCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1659,RexNode right = call.getOperands().get(1);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1660,comparedOperands.add(right.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1662,if (right.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1663,RexCall rightCast = (RexCall) right;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1664,comparedOperands.add(rightCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1671,RexNode negatedTerm = negate(rexBuilder, call);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1672,if (negatedTerm != null) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1673,negatedTerms.add(negatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1674,RexNode invertNegatedTerm = invert(rexBuilder, (RexCall) negatedTerm);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1675,if (invertNegatedTerm != null) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1676,negatedTerms.add(invertNegatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1679,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1680,case IN:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1681,comparedOperands.add(((RexCall) term).operands.get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1682,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1683,case BETWEEN:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1684,comparedOperands.add(((RexCall) term).operands.get(1).toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1685,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1686,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1687,notNullOperands.add(((RexCall) term).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1688,terms.remove(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1689,--i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1690,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1691,case IS_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1692,nullOperands.add(((RexCall) term).getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1698,if (!Collections.disjoint(nullOperands, comparedOperands)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1699,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1704,for (RexNode operand : notNullOperands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1705,if (!comparedOperands.contains(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1706,terms.add(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1707,rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1718,for (RexNode notDisjunction : notTerms) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1719,if (!isDeterministic(notDisjunction)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1720,continue;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1724,if (termsSet.containsAll(terms2Set)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1725,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1729,for (RexNode notDisjunction : notTerms) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1735,for (String negatedTerm : negatedTerms) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1736,if (termsSet.contains(negatedTerm)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1737,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1740,return composeConjunction(rexBuilder, terms, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1773,assert call.getKind() == SqlKind.OR;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1774,final List<RexNode> terms = RelOptUtil.disjunctions(call);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1775,for (int i = 0; i < terms.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1777,switch (term.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1778,case LITERAL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1779,if (!RexLiteral.isNullLiteral(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1780,if (RexLiteral.booleanValue(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1781,return term; // true
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1783,terms.remove(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1784,--i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1789,return composeDisjunction(rexBuilder, terms, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2172,return composeDisjunction(rexBuilder, nodes, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2249,return composeDisjunction(rexBuilder, nodes, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1399,list.add(RexUtil.composeDisjunction(rexBuilder, orList, false));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,481,return RexUtil.simplifyAnds(cluster.getRexBuilder(), operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,491,return RexUtil.composeDisjunction(cluster.getRexBuilder(), operands, false);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,732,final RexNode x = RexUtil.simplifyAnds(cluster.getRexBuilder(), predicates, true);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,38,import org.apache.calcite.rex.RexInputRef;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,320,map.put("input", ((RexInputRef) node).getIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,116,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,117,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,118,x.builder(e, Clause.WHERE);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,119,builder.setWhere(builder.context.toSql(null, e.getCondition()));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,120,return builder.result();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,829,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,833,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,834,operand);
core/src/main/java/org/apache/calcite/runtime/Like.java,95,javaPattern.append(".");
core/src/main/java/org/apache/calcite/runtime/Like.java,96,javaPattern.append('*');
core/src/main/java/org/apache/calcite/runtime/Like.java,267,javaPattern.append('.');
core/src/main/java/org/apache/calcite/runtime/Like.java,268,javaPattern.append('*');
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,150,return parent.findQualifyingTableName(columnName, ctx);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,104,final String[] strings = reader.readNext();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,584,private static class Translator {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,798,private static class JsonBound extends JsonFilter {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,840,List<? extends JsonFilter> fields) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,842,this.fields = fields;
avatica/core/src/main/java/org/apache/calcite/avatica/AvaticaPreparedStatement.java,118,calendar = Calendar.getInstance(connection.getTimeZone());
avatica/core/src/main/java/org/apache/calcite/avatica/AvaticaResultSet.java,89,this.localCalendar = Calendar.getInstance(timeZone);
avatica/core/src/main/java/org/apache/calcite/avatica/AvaticaSite.java,480,return ((String) x).getBytes();
avatica/core/src/main/java/org/apache/calcite/avatica/BuiltInConnectionProperty.java,86,NAME_TO_PROPS.put(p.camelName.toUpperCase(), p);
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionConfigImpl.java,112,nameToProps.get(name.toUpperCase());
avatica/core/src/main/java/org/apache/calcite/avatica/SqlState.java,1813,PrintWriter pw = new PrintWriter(System.out);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaRemoteConnectionProperty.java,45,NAME_TO_PROPS.put(p.camelName.toUpperCase(), p);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/Driver.java,187,serializationType = Serialization.valueOf(serializationStr.toUpperCase());
avatica/core/src/main/java/org/apache/calcite/avatica/remote/RemoteProtobufService.java,54,LOG.debug("Failed to deserialize reponse to {}. '{}'", request, new String(response));
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,794,return ((String) obj).getBytes();
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,716,return new String( baos.toByteArray() );
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,856,return new String( encoded );
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,920,String.format( "Cannot have offset of %d and length of %d with array of length %d", off,len,source.length));
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,1060,throw new IllegalArgumentException( String.format(
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,1064,throw new IllegalArgumentException( String.format(
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,1174,throw new IllegalArgumentException( String.format(
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,1219,throw new java.io.IOException( String.format(
avatica/core/src/main/java/org/apache/calcite/avatica/util/Base64.java,1269,bytes = s.getBytes();
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,88,ZERO_CALENDAR = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,95,private static final Calendar LOCAL_CALENDAR = Calendar.getInstance();
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,120,SimpleDateFormat df = new SimpleDateFormat(pattern);
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,124,Calendar ret = Calendar.getInstance(tz);
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,207,NumberFormat nf = NumberFormat.getIntegerInstance();
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,251,new SimpleDateFormat(pattern);
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,261,SimpleDateFormat sdf = new SimpleDateFormat(format);
avatica/server/src/main/java/org/apache/calcite/avatica/jdbc/JdbcMeta.java,88,final Calendar calendar = Calendar.getInstance();
avatica/server/src/main/java/org/apache/calcite/avatica/jdbc/JdbcResultSet.java,80,final Calendar calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java,226,return new RpcMetadataResponse(String.format("%s:%d", host, port));
avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java,692,options.put("debug", System.getProperty("sun.security.krb5.debug", "false").toLowerCase());
avatica/standalone-server/src/main/java/org/apache/calcite/avatica/hsqldb/HsqldbServer.java,52,System.exit(ExitCodes.ALREADY_STARTED.ordinal());
avatica/standalone-server/src/main/java/org/apache/calcite/avatica/hsqldb/HsqldbServer.java,74,System.exit(ExitCodes.START_FAILED.ordinal());
avatica/standalone-server/src/main/java/org/apache/calcite/avatica/hsqldb/HsqldbServer.java,120,return Serialization.valueOf(value.toUpperCase());
avatica/tck/src/main/java/org/apache/calcite/avatica/tck/TestRunner.java,80,System.exit(TestRunnerExitCodes.NO_SUCH_DRIVER.ordinal());
avatica/tck/src/main/java/org/apache/calcite/avatica/tck/TestRunner.java,101,System.exit(TestRunnerExitCodes.FAILED_TESTS.ordinal());
avatica/tck/src/main/java/org/apache/calcite/avatica/tck/TestRunner.java,104,System.exit(TestRunnerExitCodes.NORMAL.ordinal());
avatica/tck/src/main/java/org/apache/calcite/avatica/tck/TestRunner.java,135,System.exit(TestRunnerExitCodes.TEST_CASE_INSTANTIATION.ordinal());
avatica/tck/src/main/java/org/apache/calcite/avatica/tck/TestRunner.java,149,System.exit(TestRunnerExitCodes.BAD_JDBC_URL.ordinal());
avatica/tck/src/main/java/org/apache/calcite/avatica/tck/TestRunner.java,152,System.exit(TestRunnerExitCodes.MISSING_DRIVER_CLASS.ordinal());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,213,: tableTypeName.toUpperCase().replace(' ', '_');
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,28,import static org.apache.calcite.avatica.ConnectionConfigImpl.parse;
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,133,NAME_TO_PROPS.put(p.camelName.toUpperCase(), p);
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,164,return new PropEnv(parse(properties, NAME_TO_PROPS), this);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,213,return s0.toUpperCase();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,427,return map.subMap(s.toUpperCase(), true, s.toLowerCase(), true);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,434,return set.subSet(name.toUpperCase(), true, name.toLowerCase(), true);
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,62,final PrintWriter pw = new PrintWriter(System.out);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,191,return Util.enumVal(enumClass, getString(tag).toUpperCase());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,295,if (name.toLowerCase().startsWith("expr$")) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,297,ordinalMap.put(name.toLowerCase(), node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,682,ordinalMap.get(field.getName().toLowerCase());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,72,private final PrintWriter pw =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,73,CalcitePrepareImpl.DEBUG ? new PrintWriter(System.out, true) : null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1370,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1377,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1385,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,75,out.append(URLEncoder.encode(me.getKey(), "UTF-8"));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,66,new DecimalFormat("0.0E0");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,128,return s.toUpperCase();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,133,return s.toLowerCase();
core/src/main/java/org/apache/calcite/sql/SqlAccessType.java,57,for (int i = 0; i < accessNames.length; i++) {
core/src/main/java/org/apache/calcite/sql/SqlAccessType.java,59,SqlAccessEnum.valueOf(
core/src/main/java/org/apache/calcite/sql/SqlAccessType.java,60,accessNames[i].trim().toUpperCase()));
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,90,String c = charset.name().toUpperCase() + "$" + locale.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,186,final String upperProductName = productName.toUpperCase().trim();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,744,ret.append("<").append(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,745,typeList.get(i).toString().toUpperCase()).append(">");
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,753,values[i + 1] = "<" + typeList.get(i).toString().toUpperCase() + ">";
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,755,ret.append(MessageFormat.format(template, values));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,57,private static final String UPPER_HINT_TOKEN = HINT_TOKEN.toUpperCase();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,382,TokenType tokenType = map.get(name.toUpperCase());
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,126,SimpleDateFormat df = new SimpleDateFormat(pattern);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,271,return s.toUpperCase();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,273,return s.toLowerCase();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,278,sw.getBuffer().setLength(0);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,825,isKeywordsLowerCase() ? s.toLowerCase() : s.toUpperCase());
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,535,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,583,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,608,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,154,super(name.toUpperCase(), normalize(syntax));
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,71,StringBuffer ret = new StringBuffer();
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,72,for (int i = 0; i < value.length; i++) {
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,73,ret.append(
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,74,Integer.toString(trick | (0x0ff & value[i]), radix).substring(
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,75,1));
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,78,return ret.toString().toUpperCase();
core/src/main/java/org/apache/calcite/util/NlsString.java,66,charsetName = charsetName.toUpperCase();
core/src/main/java/org/apache/calcite/util/NumberUtil.java,41,FLOAT_FORMATTER = new DecimalFormat();
core/src/main/java/org/apache/calcite/util/NumberUtil.java,42,FLOAT_FORMATTER.applyPattern("0.######E0");
core/src/main/java/org/apache/calcite/util/NumberUtil.java,45,DOUBLE_FORMATTER = new DecimalFormat();
core/src/main/java/org/apache/calcite/util/NumberUtil.java,46,DOUBLE_FORMATTER.applyPattern("0.###############E0");
core/src/main/java/org/apache/calcite/util/Template.java,89,final List<String> parameterNames = new ArrayList<String>();
core/src/main/java/org/apache/calcite/util/Template.java,113,StringBuffer[] segments = new StringBuffer[4];
core/src/main/java/org/apache/calcite/util/Template.java,115,segments[i] = new StringBuffer();
core/src/main/java/org/apache/calcite/util/Template.java,187,StringBuffer[] segments,
core/src/main/java/org/apache/calcite/util/Util.java,615,SimpleDateFormat sdf = new SimpleDateFormat(FILE_TIMESTAMP_FORMAT);
core/src/main/java/org/apache/calcite/util/Util.java,1316,buf.append(tz.getDisplayName(false, TimeZone.SHORT));
core/src/main/java/org/apache/calcite/util/Util.java,1322,buf.append(tz.getDisplayName(true, TimeZone.SHORT));
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,174,tempCal = Calendar.getInstance(zone);
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,72,args.source.getBytes());
core/src/main/java/org/apache/calcite/util/trace/CalciteTimingTracer.java,31,new DecimalFormat("###,###,###,###,###");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,103,System.out.println("Response: " + new String(bytes));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,406,System.out.println("Response: " + new String(bytes));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,643,return new JsonCompositeFilter(e.getKind().toString().toLowerCase(),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,96,return "\"query\" : " + builder.toJsonString(map).replaceAll("\\s+", "").toLowerCase();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,53,flavor = CsvTable.Flavor.valueOf(flavorName.toUpperCase());
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,91,final PrintWriter pw = new PrintWriter(System.out);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,91,builder.put(tpcdsTable.getTableName().toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,169,builder.add(column.getColumnName().toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,60,builder.put(tpchTable.getTableName().toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,143,prefix = columnPrefixes.get(tpchTable.getTableName().toUpperCase());
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,144,assert prefix != null : tpchTable.getTableName().toUpperCase();
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,147,builder.add((prefix + column.getColumnName()).toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,148,typeFactory.createJavaType(realType(column)));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,31,import java.io.FileWriter;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,64,final Calendar calendar = Calendar.getInstance();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,105,try {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,106,String className = "CalciteProgram" + classId.getAndIncrement();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,107,File file = new File(SRC_DIR, className + ".java");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,108,FileWriter fileWriter = new FileWriter(file, false);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,120,fileWriter.write(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,121,fileWriter.close();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,448,Pair.of(x.toUpperCase(), x.length()));
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,91,String.format(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,101,rd = new BufferedReader(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,102,new InputStreamReader(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,103,post(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,104,loginUrl,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,105,data,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,106,requestHeaders)));
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,145,String.format(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,246,System.exit(1);
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,292,System.out.printf(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,319,System.out.printf("%s=%s\n", this.fieldNames[i], values[i]);
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,355,csvReader = new CSVReader(new InputStreamReader(in));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,252,return Util.last(rels).computeSelfCost(planner, mq).multiplyBy(.1);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,429,final boolean b = aggCall.getType().getSqlTypeName() == SqlTypeName.DOUBLE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,438,return new JsonAggregation(b ? "doubleSum" : "longSum", name, only);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,440,return new JsonAggregation(b ? "doubleMin" : "longMin", name, only);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,442,return new JsonAggregation(b ? "doubleMax" : "longMax", name, only);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,35,import com.google.common.collect.Iterables;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,55,private static final Predicate<AggregateCall> BAD_AGG =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,58,switch (aggregateCall.getAggregation().getKind()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,59,case COUNT:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,60,case SUM:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,61,case SUM0:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,62,case MIN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,63,case MAX:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,64,return false;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,65,default:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,66,return true;
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,277,unixTimeToString(buf, time);
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,284,unixTimeToString(buf, time);
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,288,private static void unixTimeToString(StringBuilder buf, int time) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/DateTimeUtils.java,638,milli = Integer.parseInt(v.substring(dot + 1).trim());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,499,case TIMESTAMP:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,500,case TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,501,assert value instanceof Calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,502,final Calendar calendar = (Calendar) value;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,503,int scale = type.getScale();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,504,if (scale == RelDataType.SCALE_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,505,scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,507,calendar.setTimeInMillis(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,508,SqlFunctions.round(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,509,calendar.getTimeInMillis(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,510,DateTimeUtils.powerX(10, 3 - scale)));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,511,break;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,851,if (typeName == SqlTypeName.CHAR) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,88,return ts.toString().substring(0, 19);
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,74,Object[] values = compiledFunction.apply(dataContext);
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,75,assert values.length == constExps.size();
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,76,final List<Object> valueList = Arrays.asList(values);
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,77,for (Pair<RexNode, Object> value : Pair.zip(constExps, valueList)) {
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,78,reducedValues.add(
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,79,rexBuilder.makeLiteral(value.right, value.left.getType(), true));
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,72,private Executor executor;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,269,public void setExecutor(Executor executor) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,273,public Executor getExecutor() {
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,23,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,24,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,320,void setExecutor(Executor executor);
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,323,Executor getExecutor();
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,329,interface Executor {
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,333,void reduce(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,334,List<RexNode> reducedValues);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,70,this.builder = builder;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,71,this.executor = executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,72,this.rowType = rowType;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,78,private RelOptPlanner.Executor executor;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,19,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,530,RelOptPlanner.Executor executor =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,531,rel.getCluster().getPlanner().getExecutor();
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,31,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,47,public class RexExecutorImpl implements RelOptPlanner.Executor {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1346,public static RexNode simplify(RexBuilder rexBuilder, RexNode e) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1347,return simplify(rexBuilder, e, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1351,boolean unknownAsFalse) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1730,terms.add(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1731,simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1732,rexBuilder.makeCall(SqlStdOperatorTable.NOT, notDisjunction), true));
core/src/main/java/org/apache/calcite/tools/FrameworkConfig.java,21,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/tools/FrameworkConfig.java,52,RelOptPlanner.Executor getExecutor();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,183,private RelOptPlanner.Executor executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,200,public ConfigBuilder executor(RelOptPlanner.Executor executor) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,284,private final RelOptPlanner.Executor executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,295,RelOptPlanner.Executor executor) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,316,public RelOptPlanner.Executor getExecutor() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,28,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,29,import java.io.FileInputStream;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,30,import java.io.FileReader;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,32,import java.io.InputStreamReader;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,39,import java.util.zip.GZIPInputStream;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,97,static RelDataType deduceRowType(JavaTypeFactory typeFactory, File file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,103,reader = openCsv(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,154,final Reader fileReader;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,155,if (file.getName().endsWith(".gz")) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,156,final GZIPInputStream inputStream =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,157,new GZIPInputStream(new FileInputStream(file));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,158,fileReader = new InputStreamReader(inputStream);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,160,fileReader = new FileReader(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,31,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,44,CsvFilterableTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,45,super(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,26,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,37,CsvScannableTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,38,super(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,50,null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,33,final File directoryFile;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,84,String tableName = trim(file.getName(), ".gz");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,85,final String tableNameSansJson = trimOrNull(tableName, ".json");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,86,if (tableNameSansJson != null) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,87,JsonTable table = new JsonTable(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,88,builder.put(tableNameSansJson, table);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,91,tableName = trim(tableName, ".csv");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,93,final Table table = createTable(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,94,builder.put(tableName, table);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,100,private Table createTable(File file) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,103,return new CsvTranslatableTable(file, null);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,105,return new CsvScannableTable(file, null);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,107,return new CsvFilterableTable(file, null);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,109,throw new AssertionError("Unknown flavor " + flavor);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,25,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,33,protected final File file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,38,CsvTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,39,this.file = file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,48,fieldTypes = new ArrayList<CsvFieldType>();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,49,return CsvEnumerator.deduceRowType((JavaTypeFactory) typeFactory, file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,52,return CsvEnumerator.deduceRowType((JavaTypeFactory) typeFactory,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,53,file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,44,File file = new File(fileName);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,47,if (base != null && !file.isAbsolute()) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,48,file = new File(base, fileName);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,52,return new CsvScannableTable(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,33,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,42,CsvTranslatableTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,43,super(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,25,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,33,public JsonEnumerator(File file) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,40,List<Object> list = mapper.readValue(file, List.class);
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,29,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,35,private final File file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,38,JsonTable(File file) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,39,this.file = file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,57,return new JsonEnumerator(file);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/ProtobufTranslationImpl.java,299,LOG.trace("Serializing response '{}'", TextFormat.shortDebugString(responseMsg));
avatica/core/src/main/java/org/apache/calcite/avatica/remote/ProtobufTranslationImpl.java,312,LOG.trace("Serializing request '{}'", TextFormat.shortDebugString(requestMsg));
avatica/core/src/main/java/org/apache/calcite/avatica/remote/ProtobufTranslationImpl.java,364,LOG.debug("Failed to parse request message '{}'", TextFormat.shortDebugString(wireMsg));
avatica/core/src/main/java/org/apache/calcite/avatica/remote/ProtobufTranslationImpl.java,383,LOG.debug("Failed to parse response message '{}'", TextFormat.shortDebugString(wireMsg));
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,32,public SqlGroupingFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,33,super("GROUPING", SqlKind.GROUPING, ReturnTypes.INTEGER, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,34,OperandTypes.ANY, SqlFunctionCategory.SYSTEM);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,188,new SqlGroupingFunction();
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,195,public static final SqlGroupingIdFunction GROUPING_ID =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,196,new SqlGroupingIdFunction();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4706,case GROUPING_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4740,return 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4741,case GROUPING_ID:
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,371,type = toType(cluster.getTypeFactory(), jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,400,RelDataType type = toType(cluster.getTypeFactory(), jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,408,return rexBuilder.makeNullLiteral(sqlTypeName);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,603,casted, makeNullLiteral(toType.getSqlTypeName())));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1121,public RexNode makeNullLiteral(SqlTypeName typeName, int precision) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1122,RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1123,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1124,typeFactory.createSqlType(typeName, precision),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1125,true);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1126,return makeCast(type, constantNull());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1141,RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1142,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1143,typeFactory.createSqlType(typeName),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1144,true);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1145,return makeCast(type, constantNull());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1266,rexBuilder.makeNullLiteral(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3027,node = rexBuilder.makeNullLiteral(field.getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,185,exprs.add(rexBuilder.makeNullLiteral(type.getSqlTypeName()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1400,list.add(rexBuilder.makeNullLiteral(type.getSqlTypeName()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,685,rexBuilder.constantNull(), true));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,354,rexBuilder.constantNull(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,472,rexBuilder.makeNullLiteral(countArg.getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,127,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,128,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,132,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,133,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,136,PhysTypeImpl.of(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,137,implementor.getTypeFactory(), getRowType(), pref.preferArray());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,138,final PhysType keyPhysType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,139,leftResult.physType.project(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,140,leftKeys, JavaRowFormat.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,149,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,150,rightResult.physType.generateAccessor(rightKeys),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,94,final Result leftResult = visitChild(0, e.getLeft());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,95,final Result rightResult = visitChild(1, e.getRight());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,97,final Context rightContext =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,98,rightResult.qualifiedContext();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,393,return new Result(node, clauses, alias5,
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,28,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,142,final LogicalJoin join = LogicalJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,143,getCluster().getRexBuilder().makeLiteral(true),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,144,ImmutableSet.<CorrelationId>of(), joinType.toJoinType());
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,145,return join.deriveRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,755,RelNode distinct = RelOptUtil.createDistinctRel(project);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,713,final Frame frame = map.get(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,747,final RelNode newInput = map.get(oldInput).r;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,782,final Frame frame = map.get(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3970,fields.put(field.getName(), field.getIndex() + offset);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,172,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,173,assert value == null || valueMatchesType(value, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,174,assert (value == null) == type.isNullable();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,175,assert typeName != SqlTypeName.ANY;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,177,this.type = type;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,178,this.typeName = typeName;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,217,return value instanceof Calendar;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,29,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,443,format.setTimeZone(TimeZone.getTimeZone("GMT"));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,57,TimeZone gmt = TimeZone.getTimeZone("GMT");
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,326,public static Mappings.TargetMapping permutation(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,340,RexNode operand = ((RexCall) node.e).getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,343,node.i,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,344,((RexInputRef) operand).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,83,RelOptUtil.permutation(
core/src/main/java/org/apache/calcite/rex/RexCallBinding.java,105,((RexCall) operand).getOperator().getMonotonicity(binding);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,188,return areValidFilters(((RexCall) e).getOperands());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,194,private boolean areValidFilters(List<RexNode> es) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,196,if (!isValidFilter(e)) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,286,boolean nullable = resultSet.getBoolean(11);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1365,project(project.getProjects());
avatica/core/src/main/java/org/apache/calcite/avatica/Meta.java,912,public static Frame create(@JsonProperty("offset") int offset,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,454,final List<RexNode> operandList = ImmutableList.copyOf(operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,466,return cluster.getRexBuilder().makeCall(operator,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,467,ImmutableList.copyOf(operands));
avatica/core/src/main/java/org/apache/calcite/avatica/AvaticaUtils.java,205,return clazz.newInstance();
avatica/core/src/main/java/org/apache/calcite/avatica/UnregisteredDriver.java,116,return (AvaticaFactory) clazz.newInstance();
avatica/core/src/main/java/org/apache/calcite/avatica/UnregisteredDriver.java,118,throw handle("Error loading factory " + factoryClassName, e);
avatica/core/src/main/java/org/apache/calcite/avatica/UnregisteredDriver.java,120,throw handle("Error loading factory " + factoryClassName, e);
avatica/core/src/main/java/org/apache/calcite/avatica/UnregisteredDriver.java,122,throw handle("Error loading factory " + factoryClassName, e);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/Service.java,1777,Map<String, String> info = msg.getInfo();
avatica/core/src/main/java/org/apache/calcite/avatica/remote/Service.java,1791,builder.getMutableInfo().putAll(info);
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,706,return decimal.setScale(scale, BigDecimal.ROUND_UNNECESSARY);
avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java,129,private static AvaticaHandler wrapJettyHandler(Handler handler) {
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,34,throws InterruptedException, ClassNotFoundException,
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,35,IllegalAccessException, InstantiationException {
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,67,InstantiationException, IllegalAccessException {
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,87,throws ClassNotFoundException, InstantiationException,
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,88,IllegalAccessException {
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,90,Class<?> factoryClass = Class.forName(factoryClassName);
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,91,Meta.Factory factory = (Meta.Factory) factoryClass.newInstance();
avatica/server/src/main/java/org/apache/calcite/avatica/server/Main.java,94,HttpServer server = new HttpServer(port, handlerFactory.createHandler(service));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,65,final Class clazz;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,151,return new FieldTable<T>(field, elementType, enumerable);
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,188,public ReflectiveTable(Type elementType, Enumerable enumerable) {
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,257,Class clazz;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,280,target = clazz.newInstance();
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,295,public MethodTableMacro(ReflectiveSchema schema, Method method) {
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,312,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,323,public FieldTable(Field field, Type elementType, Enumerable<T> enumerable) {
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,344,public FieldSelector(Class elementType) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,408,instance = aggFunction.declaringClass.newInstance();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,170,return createStructType(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,171,new FieldInfo() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,172,public int getFieldCount() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,173,return fieldList.size();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,176,public String getFieldName(int index) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,180,public RelDataType getFieldType(int index) {
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,61,return (Function1<DataContext, Object[]>) c.newInstance();
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,63,| IllegalAccessException e) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,733,return b0.setScale(0, BigDecimal.ROUND_FLOOR);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,794,return b0.setScale(0, BigDecimal.ROUND_CEILING);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1618,flatElements[i] = (E) new Integer(++ordinality); // 1-based
core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java,146,o = method.getDeclaringClass().newInstance();
core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java,156,).ex(e);
core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java,158,| InstantiationException e) {
core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java,77,o = method.getDeclaringClass().newInstance();
core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java,87,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java,89,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,115,validator.setValidatedNodeType(call, ret);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,116,validator.setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,459,validator.setValidatedNodeType(operand, nodeType);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,437,validator.setValidatedNodeType(call, ret);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,584,validator.setValidatedNodeType(operand, nodeType);
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,108,validator.setValidatedNodeType(call, ret);
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,109,validator.setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,254,callBinding.getValidator().setValidatedNodeType(node, ret);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,124,callBinding.getValidator().setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,125,operand0,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,126,ret);
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,129,validator.setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,130,nodeList,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,131,rightType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,422,setValidatedNodeTypeImpl(expanded, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1433,public void setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1434,SqlNode node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1435,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1436,setValidatedNodeTypeImpl(node, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1439,public void removeValidatedNodeType(SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1440,nodeToTypeMap.remove(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1443,void setValidatedNodeTypeImpl(SqlNode node, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1473,setValidatedNodeTypeImpl(expr, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1600,setValidatedNodeTypeImpl(node, newInferredType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1641,setValidatedNodeTypeImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1642,caseCall.getElseOperand(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1643,returnType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1749,if (forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1750,ns.makeNullable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1752,namespaces.put(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1753,ns.getNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1754,ns);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3399,setValidatedNodeTypeImpl(groupItem, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3590,setValidatedNodeTypeImpl(selectItem, type);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3405,validator.setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3406,list,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,759,BigDecimal.ONE.divide(val, BigDecimal.ROUND_UNNECESSARY);
core/src/main/java/org/apache/calcite/util/NumberUtil.java,84,bd = bd.setScale(scale, BigDecimal.ROUND_HALF_UP);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,42,import org.apache.calcite.util.trace.CalciteTrace;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,44,import org.slf4j.Logger;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,56,protected static final Logger LOGGER = CalciteTrace.getPlannerTracer();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,87,new AbstractList<String>() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,89,final String name = rowType.getFieldList().get(index).getName();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,90,return name.startsWith("$") ? "_" + name.substring(2) : name;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,94,return rowType.getFieldCount();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,255,&& !clazz.isPrimitive()) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,127,Class<?> clazz = Class.forName(className);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,128,Object o = clazz.newInstance();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,129,return (ArrayBindable) o;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,131,throw new RuntimeException(e);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,133,throw new RuntimeException(e);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,135,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,187,final Expression e = format.field(row_, i, physType.getJavaFieldType(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,62,Type fieldType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,68,return Expressions.field(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,69,expression,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,70,recordField.getDeclaringClass(),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,92,public Expression record(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,93,Type javaRowClass, List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,183,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,184,Expressions.call(expression,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,185,BuiltInMethod.LIST_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,186,Expressions.constant(field)),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,187,fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,211,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,212,Expressions.call(expression,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,213,BuiltInMethod.ROW_VALUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,214,Expressions.constant(field)),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,215,fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,241,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,242,Expressions.arrayIndex(expression, Expressions.constant(field)),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,243,fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,284,Type fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,646,return format.field(expression, field, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,825,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, operand);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,99,SqlNode sqlCondition = convertConditionToSqlNode(e.getCondition(),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,100,leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,101,rightContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,102,e.getLeft().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,107,joinType(e.getJoinType()).symbol(POS),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,109,JoinConditionType.ON.symbol(POS),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,47,import java.util.AbstractList;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,68,return SqlValidatorUtil.uniquify(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,69,new AbstractList<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,71,return rowType.getFieldList().get(index).getName();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,75,return rowType.getFieldCount();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,44,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,412,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,434,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,450,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,461,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,64,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,165,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,21,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,53,throw Throwables.propagate(e.getCause());
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,23,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,154,throw Util.newInternal("Converter from " + previous
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,155,+ " to " + arc
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,244,throw Util.newInternal(e, "while visiting tree");
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,317,throw Util.newInternal(s);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1105,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1107,+ leftKey + " (type " + leftKeyType + ") and "
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1108,+ rightKey + " (type " + rightKeyType + ")");
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,927,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,929,+ cyclicVertices);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1131,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1132,e,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1640,throw Util.newInternal("cycle in equivalence tree");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1666,throw Util.newInternal("Relational expression " + rel
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1667,+ " belongs to a different planner than is currently being"
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1668,+ " used.");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1678,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1680,+ " has calling-convention " + convention
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1681,+ " but does not implement the required interface '"
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1682,+ convention.getInterface() + "' of that convention");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1685,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1687,+ " does not have the correct number of traits "
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1688,+ traits.size() + " != " + traitDefs.size());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,25,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,148,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,149,e,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,236,throw Util.newInternal(e,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,238,+ getRule() + ", args " + Arrays.toString(rels));
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,364,throw Util.newInternal("replaceInput called on " + this);
core/src/main/java/org/apache/calcite/rel/BiRel.java,22,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/BiRel.java,73,throw Util.newInternal();
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,27,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,70,return Util.newInternal(
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,71,getClass() + " cannot convert from "
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,72,+ inTraits + " traits");
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,23,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,144,Throwables.propagateIfPossible(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,145,throw e;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,21,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,143,Throwables.propagateIfPossible(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,144,throw e;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,58,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,360,System.out.println(buff);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,361,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,437,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,450,throw Throwables.propagate(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,22,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,53,static CacheLoader<Pair<Class<RelNode>, Class<Metadata>>,
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,76,throw Throwables.propagate(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,29,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,200,Throwables.propagateIfPossible(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,201,throw e;
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,243,Util.permAssert(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,244,doneCondition || (conditionRef == null),
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,374,throw Util.newInternal("cannot implement " + expr);
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,718,throw Util.newInternal("unknown type " + relTypeName);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,37,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,223,throw Util.newInternal("Bad field offset: index="
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,43,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,228,Util.permAssert(program.getCondition() == null,
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,871,throw Util.newInternal(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,170,throw Util.newInternal(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,191,throw Util.newInternal("Field ordinal " + i + " is invalid for "
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,376,Util.permAssert(physical, "DISALLOW PARTIAL over RANGE");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,499,throw Util.newInternal(
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,501,+ literal + "'");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,508,throw Util.newInternal("fromJdbcString: unsupported type");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,521,throw Util.newInternal("getCalendarFormat: unknown type");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,645,throw Util.newInternal("not a literal: " + node);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,25,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,166,throw Util.newInternal("in expression " + expr
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,167,+ ", field reference " + input
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,168,+ " has inconsistent type");
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,172,throw Util.newInternal("in expression " + expr
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,173,+ ", field reference " + input
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,174,+ " is out of bounds");
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,178,throw Util.newInternal("in expression " + expr
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,179,+ ", field reference " + input
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,180,+ " has inconsistent type");
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,956,throw Util.newInternal("expr " + local
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,957,+ " references later expr " + local.index);
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,45,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,131,throw Util.newInternal(
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,132,e, "Error while parsing view definition:  " + queryString);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,32,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,214,throw Util.newInternal("should never come here");
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,360,throw Util.newInternal("invalid string literal: " + node);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,374,throw Util.newInternal("invalid literal: " + node);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,58,Util.pre(pos != null, "pos != null");
core/src/main/java/org/apache/calcite/sql/SqlNode.java,59,this.pos = pos;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,71,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,75,try {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,76,return (SqlNode) super.clone();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,78,throw Util.newInternal(e, "error while cloning " + this);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,72,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,73,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/SqlSyntax.java,144,throw Util.newInternal("Internal operator '" + operator
core/src/main/java/org/apache/calcite/sql/SqlSyntax.java,145,+ "' cannot be un-parsed");
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,701,throw Util.newInternal("Unexpected node type");
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,34,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,124,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,27,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,116,throw Util.newInternal("bad kind: " + minMaxKind);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,128,throw Util.newInternal("bad kind: " + minMaxKind);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,29,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,580,Util.discard(o);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,581,throw Util.newInternal("expected call to fail");
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,608,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,609,e,
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,630,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,632,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,147,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,148,!intervalQualifier.isYearMonth(),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,156,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,157,e, "while parsing day-to-second interval " + literal);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,189,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,190,intervalQualifier.isYearMonth(),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,198,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,199,e, "error parsing year-to-month interval " + literal);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,531,Util.pre(list != null, "list != null");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,532,Util.pre(start < end, "start < end");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,28,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,765,Util.pre(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,766,frame == this.frame,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,768,+ " does not match current frame " + this.frame.frameType);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1161,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1170,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,22,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,105,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,125,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,30,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,623,if (argType0.getCollation().equals(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,624,pickedCollation)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,627,pickedCollation)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,630,throw Util.newInternal("should never come here");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,19,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,342,Set<SqlTypeName> rule = ruleset.get(to);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,343,if (null == rule) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,346,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,82,throw Util.newInternal("RelDataType object should have been assigned a "
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,83,+ "(default) charset when calling deriveType");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,89,throw Util.newInternal("RelDataType object should have been assigned a "
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,90,+ "(default) collation when calling deriveType");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,579,throw Util.newInternal("getMinValue(" + typeName + ")");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,601,throw Util.newInternal("getMaxValue(" + typeName + ")");
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,28,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,75,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,138,if (op instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,139,SqlFunction function = (SqlFunction) op;
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,140,SqlFunctionCategory funcType = function.getFunctionType();
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,141,assert funcType != null
core/src/main/java/org/apache/calcite/sql/util/ReflectiveSqlOperatorTable.java,142,: "Function type for " + function.getName() + " not set";
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,83,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,84,rowType == null,
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,87,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,88,type != null,
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,105,throw Util.newInternal("todo: Cycle detected during type-checking");
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,128,Util.permAssert(rowType != null, "validate must set rowType");
core/src/main/java/org/apache/calcite/sql/validate/SetopNamespace.java,23,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/validate/SetopNamespace.java,110,throw Util.newInternal("Not a query: " + call.getKind());
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,20,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,39,Util.pre(id != null, "id != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,40,this.id = id;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,557,throw Util.newInternal("Not a query: " + outermostNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1444,Util.pre(type != null, "type != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1445,Util.pre(node != null, "node != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1457,Util.pre(scope != null, "scope != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1458,Util.pre(expr != null, "expr != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1470,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2757,Util.pre(targetRowType != null, "targetRowType != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2785,throw Util.newInternal("OVER unexpected in this context");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2802,Util.permAssert(condition == null, "condition == null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2805,Util.permAssert(condition != null, "condition != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2817,Util.permAssert(list.size() > 0, "Empty USING clause");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3289,Util.permAssert(orderScope != null, "orderScope != null");
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,24,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,41,private final Map<Object, Object> map = new HashMap<Object, Object>();
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,80,map.put(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,81,parameterType,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,87,return (RexNode) method.invoke(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,88,ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,89,cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,90,call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,92,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,93,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,96,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,97,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,135,map.put(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,136,opClass,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,138,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,139,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,140,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,142,return (RexNode) method.invoke(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,143,ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,144,cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,145,call.getOperator(),
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,146,call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,148,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,149,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,152,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,153,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,173,Class<? extends Object> clazz = op.getClass();
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,219,Util.permAssert(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,220,call.getOperator() == alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,223,target.createCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,224,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,225,call.getOperandList());
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,910,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,120,Util.permAssert(
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,121,(bitString.getBitCount() % 8) == 0,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1873,Util.permAssert(bb.window == null, "already in window agg mode");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1957,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2092,throw Util.newInternal("not a join operator " + from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2517,Util.permAssert(bb.agg == null, "already in agg mode");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2905,throw Util.newInternal("not a query: " + query);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3649,throw Util.newInternal("empty values clause");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3918,throw Util.newInternal("Unknown identifier '" + qualified.identifier
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4199,Util.permAssert(rex != null, "conversion result not null");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4200,return rex;
core/src/main/java/org/apache/calcite/tools/RelRunners.java,21,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/tools/RelRunners.java,38,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,261,throw Util.newInternal(ex);
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,266,Throwable t = ex.getTargetException();
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,267,if (t instanceof RuntimeException) {
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,268,throw (RuntimeException) t;
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,270,throw (Error) t;
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,272,throw new AssertionError(t.getClass().getName());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,534,throw Util.newInternal(e,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,143,throw Util.newInternal(e, "while reading from " + file);
core/src/main/java/org/apache/calcite/util/Util.java,456,throw newInternal(e);
core/src/main/java/org/apache/calcite/util/Util.java,773,return newInternal("(unknown cause)");
core/src/main/java/org/apache/calcite/util/Util.java,777,return new AssertionError("Internal error: " + s);
core/src/main/java/org/apache/calcite/util/Util.java,781,return newInternal(e, "(unknown cause)");
core/src/main/java/org/apache/calcite/util/Util.java,785,String message = "Internal error: " + s;
core/src/main/java/org/apache/calcite/util/Util.java,786,if (false) {
core/src/main/java/org/apache/calcite/util/Util.java,789,System.err.println(message);
core/src/main/java/org/apache/calcite/util/Util.java,790,e.printStackTrace(System.err);
core/src/main/java/org/apache/calcite/util/Util.java,792,AssertionError ae = new AssertionError(message);
core/src/main/java/org/apache/calcite/util/Util.java,793,ae.initCause(e);
core/src/main/java/org/apache/calcite/util/Util.java,794,return ae;
core/src/main/java/org/apache/calcite/util/Util.java,854,throw newInternal("pre-condition failed: " + description);
core/src/main/java/org/apache/calcite/util/Util.java,877,throw newInternal("post-condition failed: " + description);
core/src/main/java/org/apache/calcite/util/Util.java,889,throw newInternal("invariant violated: " + description);
core/src/main/java/org/apache/calcite/util/Util.java,1533,throw newInternal(
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,19,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,84,throw Util.newInternal(ex, "while compiling " + args.fullClassName);
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,162,Map<String, byte[]> map = super.generateBytecodes(name);
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,164,return map;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,37,import com.google.common.base.Throwables;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,106,throw Throwables.propagate(e);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,190,throw Throwables.propagate(e);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,375,throw Throwables.propagate(e);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,397,throw Throwables.propagate(e);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,409,throw Throwables.propagate(e);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,451,final Throwable throwable = throwableHolder.get();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,452,if (throwable != null) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,454,throw Throwables.propagate(throwable);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,64,import com.google.common.base.Throwables;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,537,throw Throwables.propagate(e);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,24,import com.google.common.base.Throwables;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,98,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,228,List<SqlNode> list = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,231,list.add(result.asSelect());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,233,final SqlCall node = operator.createCall(new SqlNodeList(list, POS));
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,22,import org.apache.calcite.avatica.MetaImpl;
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,31,import java.util.Collections;
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,129,list = (List<Object>) (List) list2(resultSet);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,141,private List<List<Object>> list2(Meta.MetaResultSet resultSet) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,142,final Meta.StatementHandle h = new Meta.StatementHandle(
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,143,resultSet.connectionId, resultSet.statementId, null);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,144,final List<TypedValue> parameterValues = Collections.emptyList();
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,145,final Iterable<Object> iterable = meta.createIterable(h, null,
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,146,resultSet.signature, parameterValues, resultSet.firstFrame);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,147,final List<List<Object>> list = new ArrayList<>();
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,148,return MetaImpl.collect(resultSet.signature.cursorFactory, iterable, list);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,205,try (final Context ctx = prepareTimer.start()) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,215,try (final Context ctx = prepareAndExecuteTimer.start()) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,266,try (final Context ctx = executeTimer.start()) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,311,try (final Context ctx = connectionSyncTimer.start()) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/LocalService.java,343,try (final Context ctx = commitTimer.start()) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,33,import java.util.WeakHashMap;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,58,private final WeakHashMap<RelOptPlanner, ConversionData>
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,59,plannerConversionMap =
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,60,new WeakHashMap<RelOptPlanner, ConversionData>();
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,203,ConversionData conversionData = plannerConversionMap.get(planner);
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,204,if (conversionData == null) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,206,conversionData = new ConversionData();
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,207,plannerConversionMap.put(planner, conversionData);
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,209,return conversionData;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,894,private static SqlNode pushDownNotForIn(SqlNode sqlNode) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,901,sqlOperands[i] = pushDownNotForIn(sqlOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,903,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,912,orOperands[i] =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,913,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,914,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,915,andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,918,orOperands[i] = pushDownNotForIn(orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,920,return SqlStdOperatorTable.OR.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,921,orOperands[0], orOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,926,andOperands[i] =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,927,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,928,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,929,orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,932,andOperands[i] = pushDownNotForIn(andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,934,return SqlStdOperatorTable.AND.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,935,andOperands[0], andOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,939,return pushDownNotForIn(notOperands[0]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,945,return SqlStdOperatorTable.IN.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,946,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,947,inOperands[0],
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,948,inOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,950,return SqlStdOperatorTable.NOT_IN.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,951,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,952,inOperands[0],
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,953,inOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,983,SqlNode newWhere = pushDownNotForIn(where);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2615,SqlNode newHaving = pushDownNotForIn(having);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,124,new Predicate<LogicalFilter>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,125,public boolean apply(LogicalFilter input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,280,new Predicate<Sort>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,281,public boolean apply(Sort input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,287,new Predicate<CassandraFilter>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,288,public boolean apply(CassandraFilter input) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,25,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,417,new Predicate<Class<? extends RelNode>>() {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,418,public boolean apply(Class<? extends RelNode> input) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,117,new Predicate<Filter>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,118,public boolean apply(Filter filter) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,128,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,129,public boolean apply(Project project) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,139,new Predicate<Calc>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,140,public boolean apply(Calc calc) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2397,new Predicate<LogicalFilter>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2398,public boolean apply(LogicalFilter input) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,258,new Predicate<Integer>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,259,public boolean apply(Integer input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,76,new Predicate<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,77,public boolean apply(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,83,new Predicate<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,84,public boolean apply(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,68,new Predicate<Values>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,69,public boolean apply(Values values) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,42,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,351,new Predicate<RexFieldCollation>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,352,public boolean apply(RexFieldCollation rexFieldCollation) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,53,new Predicate<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,54,public boolean apply(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,45,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,46,public boolean apply(Project input) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,51,new Predicate<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,52,public boolean apply(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,79,new Predicate<Calc>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,80,public boolean apply(Calc calc) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,86,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,87,public boolean apply(Project project) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1819,notTerms = Iterables.filter(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1820,notTerms, new Predicate<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1821,public boolean apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1836,return composeConjunction(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1837,rexBuilder, Iterables.concat(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1838,ImmutableList.of(e), Iterables.transform(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1839,notTerms, notFn(rexBuilder))), false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2317,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2318,public boolean apply(Project project) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2332,new Predicate<Filter>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2333,public boolean apply(Filter filter) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2345,new Predicate<Join>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2346,public boolean apply(Join join) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,387,new Predicate<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,388,public boolean apply(SqlOperator input) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,490,new Predicate<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,491,public boolean apply(SqlOperator operator) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,502,new Predicate<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,503,public boolean apply(SqlOperator operator) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,524,new Predicate<SqlFunction>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,525,public boolean apply(SqlFunction function) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,595,new Predicate<SqlFunction>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,596,public boolean apply(SqlFunction function) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,241,new Predicate<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,243,public boolean apply(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,249,new Predicate<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,250,public boolean apply(SqlNode input) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,56,new Predicate<AggregateCall>() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,57,public boolean apply(AggregateCall aggregateCall) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,99,logic = Logic.TRUE_FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1557,RelOptTable table =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1558,Prepare.CatalogReader.THREAD_LOCAL.get().getTable(names);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,459,rootSchema = new CachingCalciteSchema(null, schema, "");
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,461,rootSchema = new SimpleCalciteSchema(null, schema, "");
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,226,return createStructType(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,230,return toSql(a0.getType());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,236,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,237,createSqlType(type.getSqlTypeName()),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,19,import org.apache.calcite.adapter.java.JavaTypeFactory;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,73,final CalciteSchema rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,74,final JavaTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,75,private final List<String> defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,77,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,79,public CalciteCatalogReader(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,80,CalciteSchema rootSchema,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,81,boolean caseSensitive,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,82,List<String> defaultSchema,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,83,JavaTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,84,super();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,85,assert rootSchema != defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,86,this.rootSchema = rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,87,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,88,this.defaultSchema = defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,93,return new CalciteCatalogReader(rootSchema, caseSensitive, schemaPath,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,94,typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,97,public RelOptTableImpl getTable(final List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,99,if (defaultSchema != null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,100,RelOptTableImpl table = getTableFrom(names, defaultSchema);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,106,return getTableFrom(names, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,109,private RelOptTableImpl getTableFrom(List<String> names,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,110,List<String> schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,112,getSchema(Iterables.concat(schemaNames, Util.skipLast(names)));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,117,CalciteSchema.TableEntry entry = schema.getTable(name, caseSensitive);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,119,entry = schema.getTableBasedOnNullaryFunction(name, caseSensitive);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,132,final List<? extends List<String>> schemaNameList;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,135,schemaNameList = ImmutableList.of(ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,137,CalciteSchema schema = getSchema(defaultSchema);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,138,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,139,schemaNameList = ImmutableList.of();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,141,schemaNameList = schema.getPath();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,146,getSchema(Iterables.concat(schemaNames, Util.skipLast(names)));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,155,private CalciteSchema getSchema(Iterable<String> schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,158,schema = schema.getSubSchema(schemaName, caseSensitive);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,171,final CalciteSchema schema = getSchema(names);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,179,result.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,180,new SqlMonikerImpl(schema.path(subSchema), SqlMonikerType.SCHEMA));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,184,result.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,185,new SqlMonikerImpl(schema.path(table), SqlMonikerType.TABLE));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,190,result.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,191,new SqlMonikerImpl(schema.path(function), SqlMonikerType.FUNCTION));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,196,public List<String> getSchemaName() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,197,return defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,200,public RelOptTableImpl getTableForMember(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,215,return Util.matches(caseSensitive, string, name);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,320,return typeFactory.toSql(type);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,389,PreparingTable getTable(List<String> names);
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,608,ExInst<CalciteException> tableNotFound(String tableName);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,143,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,147,public String toString() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,148,return Util.sepList(Lists.transform(names, EMPTY_TO_STAR), ".");
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,163,return validator.catalogReader.field(rowType, name) != null;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,155,final Pair<String, SqlValidatorNamespace> pair =
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,156,findQualifyingTableName(columnName, identifier);
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,157,final String tableName = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,158,final SqlValidatorNamespace namespace = pair.right;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,161,validator.catalogReader.field(namespace.getRowType(), columnName);
core/src/main/java/org/apache/calcite/sql/validate/DelegatingSqlValidatorCatalogReader.java,55,public List<String> getSchemaName() {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingSqlValidatorCatalogReader.java,56,return catalogReader.getSchemaName();
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,80,this.parentScope = parentScope;
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,81,assert parentScope != null;
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,103,public RelDataType validateImpl(RelDataType targetRowType) {
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,104,resolvedNamespace = parentScope.getTableNamespace(id.names);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,105,if (resolvedNamespace == null) {
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,106,throw validator.newValidationError(id,
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,107,RESOURCE.tableNameNotFound(id.toString()));
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,120,new ArrayList<SqlParserPos>(
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,112,final SqlValidatorTable table2 =
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,113,validator.catalogReader.getTable(names);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,114,if (table2 != null
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,115,&& table.getQualifiedName().equals(table2.getQualifiedName())) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,120,return -1;
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,164,final int i = findChild(names);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,165,if (i >= 0) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,187,validator.catalogReader.field(childRowType, columnName);
core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java,77,final RelDataTypeField field = validator.catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java,89,final RelDataTypeField field = validator.catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorCatalogReader.java,75,List<String> getSchemaName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2852,catalogReader.field(leftRowType, name).getType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2854,catalogReader.field(rightRowType, name).getType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2915,final RelDataTypeField field = catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3244,final SqlValidatorNamespace ns = scope.getTableNamespace(id.names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3245,if (ns == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3250,if (!(ns instanceof TableNamespace)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3251,throw newValidationError(id, RESOURCE.notASequence(id.toString()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3253,final SqlValidatorTable table = ns.getTable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3254,final Table table1 = ((RelOptTable) table).unwrap(Table.class);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3255,switch (table1.getJdbcTableType()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3256,case SEQUENCE:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3257,case TEMPORARY_SEQUENCE:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3258,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3259,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3260,throw newValidationError(id, RESOURCE.notASequence(id.toString()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4051,final RelDataTypeField field = catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4429,field = catalogReader.field(type, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4605,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4606,catalogReader.field(rowType, alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,79,Pair<String, SqlValidatorNamespace> findQualifyingTableName(String columnName,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,80,SqlNode ctx);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,170,SqlValidatorNamespace getTableNamespace(List<String> names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,299,List<String> x = catalogReader.getSchemaName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,300,for (;;) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,304,if (x.isEmpty()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,305,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,307,x = Util.skipLast(x);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,517,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,519,originalFieldName);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2415,final RelDataTypeField field = catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3104,RelDataTypeField field = catalogReader.field(targetRowType, p.left);
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,93,for (String functionName : schema.getFunctionNames()) {
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,94,builder.addAll(schema.getFunctions(functionName));
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,123,for (String s : schema.getFunctionNames()) {
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,124,for (Function function : schema.getFunctions(s)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,248,assert getOperand0().matches(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,53,for (RelNode rel : rels) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,54,assert rel != null;
core/src/main/java/org/apache/calcite/rex/RexOver.java,65,assert op.isAggregator() : "precondition: op.isAggregator()";
core/src/main/java/org/apache/calcite/rex/RexOver.java,66,assert window != null : "precondition: window != null";
core/src/main/java/org/apache/calcite/rex/RexOver.java,67,this.window = window;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,120,Util.pre(SqlTypeUtil.inCharFamily(this), "Not an chartype");
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,567,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,568,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,579,Util.pre(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,580,SqlTypeUtil.sameNamedType(argType0, argType1),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1487,return scope.nullifyType(operand, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2147,assert node != null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2148,assert enclosingNode != null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2149,assert usingScope == null || alias != null : usingScope;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3352,assert isRowConstructor(rowConstructor) : rowConstructor;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,23,import org.apache.calcite.util.Compatible;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,33,import java.util.NavigableSet;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,41,private final Cached<NavigableSet<String>> implicitTableCache;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,42,private final Cached<NavigableSet<String>> implicitFunctionCache;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,53,Compatible.INSTANCE.navigableSet(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,54,ImmutableSortedSet.copyOf(COMPARATOR,
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,55,CachingCalciteSchema.this.schema.getSubSchemaNames())));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,59,new AbstractCached<NavigableSet<String>>() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,60,public NavigableSet<String> build() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,61,return Compatible.INSTANCE.navigableSet(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,62,ImmutableSortedSet.copyOf(COMPARATOR,
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,63,CachingCalciteSchema.this.schema.getTableNames()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,67,new AbstractCached<NavigableSet<String>>() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,68,public NavigableSet<String> build() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,69,return Compatible.INSTANCE.navigableSet(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,70,ImmutableSortedSet.copyOf(COMPARATOR,
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,71,CachingCalciteSchema.this.schema.getFunctionNames()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,93,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,95,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,96,final SubSchemaCache subSchemaCache = implicitSubSchemaCache.get(now);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,97,if (subSchemaCache.names.contains(schemaName)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,98,return subSchemaCache.cache.getUnchecked(schemaName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,102,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,103,final SubSchemaCache subSchemaCache =
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,104,implicitSubSchemaCache.get(now);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,105,final String schemaName2 = subSchemaCache.names.floor(schemaName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,106,if (schemaName2 != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,107,return subSchemaCache.cache.getUnchecked(schemaName2);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,123,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,125,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,126,if (implicitTableCache.get(now).contains(tableName)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,127,final Table table = schema.getTable(tableName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,128,if (table != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,129,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,134,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,135,final NavigableSet<String> implicitTableNames =
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,136,implicitTableCache.get(now);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,137,final String tableName2 = implicitTableNames.floor(tableName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,138,if (tableName2 != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,139,final Table table = schema.getTable(tableName2);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,140,if (table != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,141,return tableEntry(tableName2, table);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,153,for (String name : subSchemaCache.names) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,165,builder.addAll(implicitTableCache.get(System.currentTimeMillis()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,168,protected void addImplicitFunctionToBuilder(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,169,ImmutableList.Builder<Function> builder) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,171,for (String name2
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,172,: find(implicitFunctionCache.get(System.currentTimeMillis()), name)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,183,builder.addAll(implicitFunctionCache.get(System.currentTimeMillis()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,190,for (String s : implicitFunctionCache.get(System.currentTimeMillis())) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,207,final NavigableSet<String> set =
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,208,implicitFunctionCache.get(System.currentTimeMillis());
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,209,for (String s : find(set, tableName)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,267,final NavigableSet<String> names;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,273,NavigableSet<String> names) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,274,this.names = names;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,34,import com.google.common.collect.LinkedListMultimap;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,36,import com.google.common.collect.Multimap;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,40,import java.util.Comparator;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,46,import java.util.TreeMap;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,47,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,60,protected static final Comparator<String> COMPARATOR =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,61,new Comparator<String>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,62,public int compare(String o1, String o2) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,63,int c = o1.compareToIgnoreCase(o2);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,64,if (c == 0) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,65,c = o1.compareTo(o2);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,67,return c;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,76,public final NavigableMap<String, TableEntry> tableMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,77,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,78,protected final Multimap<String, FunctionEntry> functionMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,79,LinkedListMultimap.create();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,80,protected final NavigableMap<String, LatticeEntry> latticeMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,81,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,82,protected final NavigableSet<String> functionNames =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,83,new TreeSet<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,84,protected final NavigableMap<String, FunctionEntry> nullaryFunctionMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,85,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,86,protected final NavigableMap<String, CalciteSchema> subSchemaMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,87,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,123,protected abstract void addImplicitFunctionToBuilder(ImmutableList.Builder<Function> builder);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,168,if (latticeMap.containsKey(name)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,208,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,210,final CalciteSchema entry = subSchemaMap.get(schemaName);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,211,if (entry != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,212,return entry;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,217,for (Map.Entry<String, CalciteSchema> entry
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,218,: find(subSchemaMap, schemaName).entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,219,return entry.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,230,for (TableEntry tableEntry : tableMap.values()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,240,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,242,final TableEntry entry = tableMap.get(tableName);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,243,if (entry != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,244,return entry;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,249,for (Map.Entry<String, TableEntry> entry
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,250,: find(tableMap, tableName).entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,251,return entry.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,295,new ImmutableSortedMap.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,296,builder.putAll(subSchemaMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,305,return Compatible.INSTANCE.immutableNavigableMap(latticeMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,312,new ImmutableSortedSet.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,314,builder.addAll(tableMap.keySet());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,325,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,327,final Collection<FunctionEntry> functionEntries = functionMap.get(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,328,if (functionEntries != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,329,for (FunctionEntry functionEntry : functionEntries) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,330,builder.add(functionEntry.getFunction());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,334,final Collection<Function> functions = schema.getFunctions(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,335,if (functions != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,336,builder.addAll(functions);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,340,for (String name2 : find(functionNames, name)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,341,final Collection<FunctionEntry> functionEntries =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,342,functionMap.get(name2);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,343,if (functionEntries != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,344,for (FunctionEntry functionEntry : functionEntries) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,345,builder.add(functionEntry.getFunction());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,350,addImplicitFunctionToBuilder(builder);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,359,new ImmutableSortedSet.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,361,builder.addAll(functionMap.keySet());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,371,new ImmutableSortedMap.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,372,for (Map.Entry<String, FunctionEntry> s : nullaryFunctionMap.entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,373,final Function function = s.getValue().getFunction();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,377,builder.put(s.getKey(), table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,389,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,390,final FunctionEntry functionEntry = nullaryFunctionMap.get(tableName);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,391,if (functionEntry != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,392,final Function function = functionEntry.getFunction();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,393,if (function instanceof TableMacro) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,394,assert function.getParameters().isEmpty();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,395,final Table table = ((TableMacro) function).apply(ImmutableList.of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,396,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,399,for (Function function : schema.getFunctions(tableName)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,400,if (function instanceof TableMacro
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,401,&& function.getParameters().isEmpty()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,402,final Table table = ((TableMacro) function).apply(ImmutableList.of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,403,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,407,for (Map.Entry<String, FunctionEntry> entry
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,408,: find(nullaryFunctionMap, tableName).entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,409,final Function function = entry.getValue().getFunction();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,410,if (function instanceof TableMacro) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,411,assert function.getParameters().isEmpty();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,412,final Table table = ((TableMacro) function).apply(ImmutableList.of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,413,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,416,TableEntry tableEntry =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,417,getImplicitTableBasedOnNullaryFunction(tableName, false);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,419,return null;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,426,assert map.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,433,assert set.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,92,protected void addImplicitFunctionToBuilder(ImmutableList.Builder<Function> builder) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,309,b:
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,310,if (allColumnsInAggregate && newAggCalls.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,313,relBuilder.project(projects);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,314,if (allColumnsInAggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,316,List<RexNode> projects2 = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,317,for (int key : Mappings.apply(mapping, aggregate.getGroupSet())) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,318,projects2.add(relBuilder.field(key));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,320,for (AggregateCall newAggCall : newAggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,321,final SqlSplittableAggFunction splitter =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,323,.unwrap(SqlSplittableAggFunction.class);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,324,if (splitter != null) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,325,projects2.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,326,splitter.singleton(rexBuilder, relBuilder.peek().getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,327,newAggCall));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,331,== aggregate.getGroupSet().cardinality() + newAggCalls.size()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,333,relBuilder.project(projects2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,334,break b;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,351,for (RexNode pred : predicates) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,352,populateEquivalences(equivalence, pred);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,456,assert !frame.corVarOutputPos.isEmpty();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,138,String alias = getAlias();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,145,aggregateCall(SqlStdOperatorTable.COLLECT, false, null, alias, row));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,357,final List<String> aliases = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,374,+ "'; aliases are: " + aliases);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,739,stack.push(new Frame(filter, frame.right));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,782,final Iterator<String> nameIterator = fieldNames.iterator();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,783,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,784,final String name = nameIterator.hasNext() ? nameIterator.next() : null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,798,projectFactory.createProject(build(), ImmutableList.copyOf(exprList),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,800,push(project);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,819,return peek(0).getRowType().getFieldNames().get(ref.getIndex());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,893,final RelNode r = build();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,917,push(aggregate);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1063,final List<Pair<String, RelDataType>> pairs = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1064,pairs.addAll(left.right);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1065,pairs.addAll(right.right);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1066,stack.push(new Frame(join, ImmutableList.copyOf(pairs)));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1096,final Frame left = stack.pop();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1098,semiJoinFactory.createSemiJoin(left.rel, right.rel, and(conditions));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1099,stack.push(new Frame(semiJoin, left.right));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1109,public RelBuilder as(String alias) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1111,stack.push(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1112,new Frame(pair.rel,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1345,stack.pop();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1346,push(sort2.getInput());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1348,sortFactory.createSort(build(), sort2.collation,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1350,push(sort);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1359,stack.pop();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1360,push(sort2.getInput());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1362,sortFactory.createSort(build(), sort2.collation,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1364,push(sort);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1375,sortFactory.createSort(build(), RelCollations.of(fieldCollations),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1377,push(sort);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1456,protected String getAlias() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1457,final Frame frame = stack.peek();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1458,return frame.right.size() == 1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1459,? frame.right.get(0).left
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1460,: null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1539,final ImmutableList<Pair<String, RelDataType>> right;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1541,private Frame(RelNode rel, ImmutableList<Pair<String, RelDataType>> pairs) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1543,this.right = pairs;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1547,this(rel, ImmutableList.of(Pair.of(deriveAlias(rel), rel.getRowType())));
core/src/main/java/org/apache/calcite/rel/core/Join.java,153,+ right.getRowType().getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,53,private boolean forceNullable;
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,90,if (forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,94,type =
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,95,validator.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,96,type,
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,97,true);
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,175,forceNullable = true;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,101,namespace.makeNullable();
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,71,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,193,RelDataType fromRowType = fromNs.getRowType();
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,112,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/JoinScope.java,62,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/JoinScope.java,63,super.addChild(ns, alias);
core/src/main/java/org/apache/calcite/sql/validate/JoinScope.java,75,usingScope.addChild(ns, alias);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,41,protected final List<Pair<String, SqlValidatorNamespace>> children =
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,52,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,53,assert alias != null;
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,54,children.add(Pair.of(alias, ns));
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,63,return Pair.right(children);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,124,for (Pair<String, SqlValidatorNamespace> pair : children) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,125,addColumnNames(pair.right, result);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,131,for (Pair<String, SqlValidatorNamespace> pair : children) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,132,result.add(new SqlMonikerImpl(pair.left, SqlMonikerType.TABLE));
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,183,for (Pair<String, SqlValidatorNamespace> pair : children) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,184,SqlValidatorNamespace childNs = pair.right;
core/src/main/java/org/apache/calcite/sql/validate/OverScope.java,78,final SqlValidatorNamespace child = children.get(0).right;
core/src/main/java/org/apache/calcite/sql/validate/SelectScope.java,184,final SqlValidatorNamespace child = children.get(0).right;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,440,for (Pair<String, SqlValidatorNamespace> p : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,442,if (p.right.getRowType().isDynamicStruct()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,446,final SqlNode exp = new SqlIdentifier(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,447,ImmutableList.of(p.left, DynamicRecordType.DYNAMIC_STAR_PREFIX),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,503,final RelDataType rowType = fromNs.getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1756,usingScope.addChild(ns, alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2027,for (Pair<String, SqlValidatorNamespace> p : overScope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2028,registerNamespace(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2029,usingScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2030,p.left,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2031,p.right,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2806,if (condition != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2807,SqlNode expandedCondition = expand(condition, joinScope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2808,join.setOperand(5, expandedCondition);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2809,condition = join.getCondition();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2972,final SqlValidatorScope fromScope = getFromScope(select);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2973,final List<Pair<String, SqlValidatorNamespace>> children =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2974,((SelectScope) fromScope).children;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2977,final Pair<String, SqlValidatorNamespace> child =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2978,children.get(duplicateAliasOrdinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2979,throw newValidationError(child.right.getEnclosingNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2980,RESOURCE.fromAliasDuplicate(child.left));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3057,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3058,if (!namespace.right.supportsModality(modality)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3060,throw newValidationError(namespace.right.getNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3061,Static.RESOURCE.cannotConvertToStream(namespace.left));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3069,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3070,if (namespace.right.supportsModality(modality)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3077,List<String> inputList = new ArrayList<String>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3078,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3079,inputList.add(namespace.left);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3081,String inputs = Joiner.on(", ").join(inputList);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3092,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3093,if (!namespace.right.supportsModality(modality)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3095,throw newValidationError(namespace.right.getNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3096,Static.RESOURCE.cannotConvertToRelation(namespace.left));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,112,void addChild(SqlValidatorNamespace ns, String alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,518,scope.getValidator().getCatalogReader().field(foundNs.getRowType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3956,return Pair.of(rexBuilder.makeCorrel(foundNs.getRowType(), correlId),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3957,null);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,97,final RexSubQuery e =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,98,RexUtil.SubQueryFinder.find(filter.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,99,assert e != null;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,100,final RelOptUtil.Logic logic =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,101,LogicVisitor.find(RelOptUtil.Logic.TRUE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,102,ImmutableList.of(filter.getCondition()), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,104,final int fieldCount = builder.peek().getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,105,final RexNode target = apply(e, filter.getVariablesSet(), logic,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,106,builder, 1, fieldCount);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,107,final RexShuttle shuttle = new ReplaceSubQueryShuttle(e, target);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,108,builder.filter(shuttle.apply(filter.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,300,operands.add(builder.isNotNull(builder.field("dt", "i")),
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,203,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,208,return isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,345,assert r.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/RelNode.java,362,boolean isValid(Litmus litmus);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,382,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,67,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/core/Calc.java,113,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,121,if (!program.isValid(litmus)) {
core/src/main/java/org/apache/calcite/rel/core/Filter.java,77,assert !CalcitePrepareImpl.DEBUG || isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/core/Filter.java,118,final RexChecker checker = new RexChecker(getInput().getRowType(), litmus);
core/src/main/java/org/apache/calcite/rel/core/Join.java,146,public boolean isValid_(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,147,if (!super.isValid(litmus)) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,172,litmus);
core/src/main/java/org/apache/calcite/rel/core/Project.java,82,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/core/Project.java,174,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,175,if (!super.isValid(litmus)) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,183,getInput().getRowType(), litmus);
core/src/main/java/org/apache/calcite/rel/core/Window.java,109,final RexChecker checker =
core/src/main/java/org/apache/calcite/rel/core/Window.java,110,new RexChecker(inputTypes, litmus);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,74,assert !CalcitePrepareImpl.DEBUG || isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,126,assert program.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexChecker.java,77,public RexChecker(final RelDataType inputRowType, Litmus litmus) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,78,this(RelOptUtil.getFieldTypeList(inputRowType), litmus);
core/src/main/java/org/apache/calcite/rex/RexChecker.java,93,public RexChecker(List<RelDataType> inputTypeList, Litmus litmus) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,110,public Boolean visitInputRef(RexInputRef ref) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,126,public Boolean visitLocalRef(RexLocalRef ref) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,131,public Boolean visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,141,public Boolean visitFieldAccess(RexFieldAccess fieldAccess) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,115,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,402,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,444,new Checker(
core/src/main/java/org/apache/calcite/rex/RexProgram.java,445,litmus,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,446,inputRowType,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,447,new AbstractList<RelDataType>() {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,448,public RelDataType get(int index) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,449,return exprs.get(index).getType();
core/src/main/java/org/apache/calcite/rex/RexProgram.java,453,return exprs.size();
core/src/main/java/org/apache/calcite/rex/RexProgram.java,788,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,810,public Checker(Litmus litmus,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,811,RelDataType inputRowType,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,812,List<RelDataType> internalExprTypeList) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,813,super(inputRowType, litmus);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,819,public Boolean visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,468,assert program.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,745,assert bottomProgram.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,746,assert topProgram.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,764,assert mergedProg.isValid(Litmus.THROW);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,103,assert isValid(Litmus.THROW);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,127,if (!super.isValid(litmus)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,452,new SqlSpecialOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,454,SqlKind.PLUS,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,455,40,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,456,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,458,InferTypes.FIRST_KNOWN,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,459,OperandTypes.PLUS_OPERATOR);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,21,import org.apache.calcite.linq4j.tree.NewExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,56,final NewExpression target =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeterministicCodeOptimizer.java,325,return allMethodsDeterministic((Class) newExpression.type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,692,final DeclarationStatement declare =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,693,Expressions.declare(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,694,0, "key",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,695,inputPhysType.selector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,696,v_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,697,group.keys.asList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,698,JavaRowFormat.CUSTOM));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,699,builder2.add(declare);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,700,final ParameterExpression key_ = declare.parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysType.java,144,Expression selector(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,196,public Expression selector(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,213,return parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,215,return targetPhysType.record(fieldReferences(parameter, fields));
core/src/main/java/org/apache/calcite/plan/Strong.java,65,case IS_TRUE:
core/src/main/java/org/apache/calcite/plan/Strong.java,66,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,438,SubqueryType subqueryType,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,441,switch (subqueryType) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3603,public enum SubqueryType {
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,411,ExInst<SqlValidatorException> onlyScalarSubqueryAllowed();
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,33,enum SubqueryStyle {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,196,List<Token> subqueryList = new ArrayList<Token>();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,200,subqueryList.add(token);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,203,consumeQuery(iter, subqueryList);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,207,subqueryList.remove(subqueryList.size() - 1);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,216,subqueryList.remove(subqueryList.size() - 1);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,226,outList.add(new Query(subqueryList));
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,233,outList.addAll(subqueryList);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,482,Query foundInSubquery = null;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,514,foundInSubquery = (Query) token;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,584,(query == foundInSubquery) ? hintToken : null);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,306,ACCEPT_NONQUERY,
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,312,ACCEPT_SUBQUERY,
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,318,ACCEPT_CURSOR
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,156,private SubqueryStyle subqueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,203,public void setSubqueryStyle(SubqueryStyle subqueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,204,this.subqueryStyle = subqueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,269,subqueryStyle = SubqueryStyle.HYDE;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,514,switch (subqueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,561,throw Util.unexpected(subqueryStyle);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1945,registerSubqueries(joinScope, join.getCondition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2167,registerOperandSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2202,registerSubqueries(selectScope, select.getGroup());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2203,registerOperandSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2207,registerSubqueries(aggScope, select.getSelectList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2219,registerSubqueries(orderScope, orderList);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2290,registerOperandSubqueries(parentScope, call, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2404,registerOperandSubqueries(parentScope, call, 0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2421,registerSubqueries(parentScope, call);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2439,registerOperandSubqueries(parentScope, call, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2547,private void registerSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2561,registerOperandSubqueries(parentScope, call, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2574,registerSubqueries(parentScope, listNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2590,private void registerOperandSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2606,registerSubqueries(parentScope, operand);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3575,RESOURCE.onlyScalarSubqueryAllowed());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,219,private SubqueryConverter subqueryConverter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,296,this.subqueryConverter = new NoOpSubqueryConverter();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,401,public void setSubqueryConverter(SubqueryConverter converter) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,402,subqueryConverter = converter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1011,findSubqueries(bb, expr, logic, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1109,convertExists(query, RelOptUtil.SubqueryType.IN, subQuery.logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1158,converted = convertExists(query, RelOptUtil.SubqueryType.EXISTS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1175,converted = convertExists(query, RelOptUtil.SubqueryType.SCALAR,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1190,converted = convertExists(subQuery.node, RelOptUtil.SubqueryType.SCALAR,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1197,throw Util.newInternal("unexpected kind of subquery :" + subQuery.node);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1329,subqueryConverter.convertSubquery(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1492,RelOptUtil.SubqueryType subqueryType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1701,private void findSubqueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1705,boolean registerOnlyScalarSubqueries) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1715,if (!registerOnlyScalarSubqueries
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1741,findSubqueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1745,kind == SqlKind.IN || registerOnlyScalarSubqueries);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1750,findSubqueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1754,kind == SqlKind.IN || registerOnlyScalarSubqueries);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4390,private class NoOpSubqueryConverter implements SubqueryConverter {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4392,public boolean canConvertSubquery() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4397,public RexNode convertSubquery(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4398,SqlCall subquery,
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,26,public interface SubqueryConverter {
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,32,boolean canConvertSubquery();
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,45,RexNode convertSubquery(
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,46,SqlCall subquery,
core/src/main/java/org/apache/calcite/tools/Programs.java,109,subquery(DefaultRelMetadataProvider.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,306,return sequence(subquery(metadataProvider),
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,433,implementor.subquery(buf, 0, getChild(), "t");
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3083,TRUE;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,228,if (!variablesSet.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,250,builder.join(JoinRelType.INNER, builder.literal(true), variablesSet);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,67,Collection<Logic> logicCollection) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,68,node.accept(new LogicVisitor(seek, logicCollection), logic);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,87,logic = logic.negate();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2536,final Correlation correlation =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2537,new Correlation(var.id,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2538,fieldAccess.getField().getIndex(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2539,corrIdGenerator++);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2540,mapFieldAccessToCorVar.put(fieldAccess, correlation);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2541,mapRefRelToCorVar.put(rel, correlation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1045,final Frame right = stack.pop();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1067,if (correlate) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1068,filter(condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2217,&& Strong.is(filter, leftBitmap)) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2221,&& Strong.is(filter, rightBitmap)) {
core/src/main/java/org/apache/calcite/plan/Strong.java,45,private final ImmutableBitSet nullColumns;
core/src/main/java/org/apache/calcite/plan/Strong.java,47,private Strong(ImmutableBitSet nullColumns) {
core/src/main/java/org/apache/calcite/plan/Strong.java,48,this.nullColumns = nullColumns;
core/src/main/java/org/apache/calcite/plan/Strong.java,51,public static Strong of(ImmutableBitSet nullColumns) {
core/src/main/java/org/apache/calcite/plan/Strong.java,52,return new Strong(nullColumns);
core/src/main/java/org/apache/calcite/plan/Strong.java,57,public static boolean is(RexNode node, ImmutableBitSet nullColumns) {
core/src/main/java/org/apache/calcite/plan/Strong.java,58,return of(nullColumns).strong(node);
core/src/main/java/org/apache/calcite/plan/Strong.java,61,private boolean strong(RexNode node) {
core/src/main/java/org/apache/calcite/plan/Strong.java,74,return anyStrong(((RexCall) node).getOperands());
core/src/main/java/org/apache/calcite/plan/Strong.java,76,return allStrong(((RexCall) node).getOperands());
core/src/main/java/org/apache/calcite/plan/Strong.java,78,return nullColumns.get(((RexInputRef) node).getIndex());
core/src/main/java/org/apache/calcite/plan/Strong.java,84,private boolean allStrong(List<RexNode> operands) {
core/src/main/java/org/apache/calcite/plan/Strong.java,86,if (!strong(operand)) {
core/src/main/java/org/apache/calcite/plan/Strong.java,93,private boolean anyStrong(List<RexNode> operands) {
core/src/main/java/org/apache/calcite/plan/Strong.java,95,if (strong(operand)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1427,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1428,switch (kind) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1429,case IS_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1430,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1433,return rexBuilder.makeLiteral(kind == SqlKind.IS_NOT_NULL);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1434,case IS_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1435,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1439,case IS_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1440,case IS_NOT_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1463,return call;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,851,FUSION, SINGLE_VALUE);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,875,public static final Set<SqlKind> EXPRESSION =
core/src/main/java/org/apache/calcite/sql/SqlKind.java,876,EnumSet.complementOf(
core/src/main/java/org/apache/calcite/sql/SqlKind.java,877,concat(
core/src/main/java/org/apache/calcite/sql/SqlKind.java,878,EnumSet.of(AS, ARGUMENT_ASSIGNMENT, DEFAULT,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,880,SELECT, JOIN, OTHER_FUNCTION, CAST, TRIM, FLOOR, CEIL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,882,LITERAL_CHAIN, JDBC_FN, PRECEDING, FOLLOWING, ORDER_BY,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,883,NULLS_FIRST, NULLS_LAST, COLLECTION_TABLE, TABLESAMPLE,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,884,VALUES, WITH, WITH_ITEM),
core/src/main/java/org/apache/calcite/sql/SqlKind.java,885,AGGREGATE));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,45,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,47,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,45,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,47,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,101,PhysTypeImpl.of(typeFactory, table.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,102,JavaRowFormat.CUSTOM);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,687,SqlParser parser = createParser(query.sql,
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,293,String name = typeName.getSimple();
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,295,SqlTypeName sqlTypeName = SqlTypeName.get(name);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,326,SqlUtil.translateCharacterSetName(charSetName);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,339,SqlTypeName collectionsSqlTypeName =
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,340,SqlTypeName.get(collectionName);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,352,if (nullable != null) {
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,353,type = typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,39,import org.apache.calcite.linq4j.tree.Visitor;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,461,private static class TypeFinder extends Visitor {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,469,NewExpression newExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,470,List<Expression> arguments,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,471,List<MemberDeclaration> memberDeclarations) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,473,return super.visit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,474,newExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,475,arguments,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,476,memberDeclarations);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,480,int dimension, Expression bound, List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,490,return super.visit(newArrayExpression, dimension, bound, expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,30,import org.apache.calcite.linq4j.tree.OptimizeVisitor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,643,return expression.accept(new OptimizeVisitor());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/AbstractNode.java,68,public Node accept(Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,35,final List<Statement> statements = new ArrayList<Statement>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,36,final Set<String> variables = new HashSet<String>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,41,new HashMap<Expression, DeclarationStatement>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,46,private static final Visitor OPTIMIZE_VISITOR = new OptimizeVisitor();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,114,new IdentityHashMap<ParameterExpression, Expression>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,115,final Visitor visitor = new SubstituteVariableVisitor(replacements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,120,statement = statement.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,306,if (!optimize(createOptimizeVisitor(), true)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,310,optimize(createFinishingOptimizeVisitor(), false);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,321,private boolean optimize(Visitor optimizer, boolean performInline) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,337,new IdentityHashMap<ParameterExpression, Expression>(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,338,useCounter.map.size());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,341,final ArrayList<Statement> oldStatements = new ArrayList<Statement>(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,342,statements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,403,oldStatement = OptimizeVisitor.EMPTY_STATEMENT;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,406,if (oldStatement != OptimizeVisitor.EMPTY_STATEMENT) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,423,if (oldStatement != OptimizeVisitor.EMPTY_STATEMENT) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,438,protected Visitor createOptimizeVisitor() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,439,return OPTIMIZE_VISITOR;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,448,protected Visitor createFinishingOptimizeVisitor() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,487,private static class SubstituteVariableVisitor extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,490,new IdentityHashMap<ParameterExpression, Boolean>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,547,private static class UseCounter extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,548,private final Map<ParameterExpression, Slot> map =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,549,new IdentityHashMap<ParameterExpression, Slot>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,58,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,60,visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,61,return visitor.visit(this, newStatements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,62,public ClassDeclaration accept(Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,63,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,65,Expressions.acceptMemberDeclarations(memberDeclarations, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,66,return visitor.visit(this, members1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,32,public class ClassDeclarationFinder extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalExpression.java,36,private final List<Node> expressionList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,44,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,45,List<Node> list = Expressions.acceptNodes(expressionList, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,46,return visitor.visit(this, list);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,52,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,54,final BlockStatement body = this.body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,55,return visitor.visit(this, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,40,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,45,return visitor.visit(this, initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expression.java,44,public abstract Expression accept(Visitor visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3093,static <T extends Expression> Expression accept(T node, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3097,return node.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3100,static <T extends Statement> Statement accept(T node, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3104,return node.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3108,Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3114,Statement newStatement = statement.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3128,static List<Node> acceptNodes(List<Node> nodes, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3134,statements1.add(node.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3140,List<ParameterExpression> parameterExpressions, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3146,parameterExpressions1.add(parameterExpression.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3152,List<DeclarationStatement> declarations, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3159,declarations1.add(declaration.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3165,List<MemberDeclaration> memberDeclarations, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3172,memberDeclarations1.add(memberDeclaration.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3178,Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3182,final List<Expression> expressions1 = new ArrayList<Expression>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3184,expressions1.add(expression.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,39,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,42,this.initializer == null ? null : this.initializer.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,43,return visitor.visit(this, initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,49,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,51,Expressions.acceptDeclarations(declarations, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,53,condition == null ? null : condition.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,54,final Expression post1 = post == null ? null : post.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,55,final Statement body1 = body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,56,return visitor.visit(this, decls1, condition1, post1, body1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,72,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,73,BlockStatement body = this.body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,74,return visitor.visit(this, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,58,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,60,expression == null ? null : expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,61,return visitor.visit(this, expression1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,39,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,40,Expression array = this.array.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,42,this.indexExpressions, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,43,return visitor.visit(this, array, indexExpressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberDeclaration.java,23,public abstract MemberDeclaration accept(Visitor visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,44,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,47,: expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,48,return visitor.visit(this, expression1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,57,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,59,visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,61,this.expressions, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,62,return visitor.visit(this, targetExpression, expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,51,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,53,final BlockStatement body = this.body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,54,return visitor.visit(this, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,45,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,49,: Expressions.acceptExpressions(this.expressions, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,50,Expression bound = Expressions.accept(this.bound, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,51,return visitor.visit(this, dimension, bound, expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,47,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,49,this.arguments, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,51,Expressions.acceptMemberDeclarations(this.memberDeclarations, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,52,return visitor.visit(this, arguments, memberDeclarations);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Node.java,23,Node accept(Visitor visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,39,public class OptimizeVisitor extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,50,private static final Set<Method> KNOWN_NON_NULL_METHODS =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,51,new HashSet<Method>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,65,private static final Map<ExpressionType, ExpressionType>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,66,NOT_BINARY_COMPLEMENT =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,67,new EnumMap<ExpressionType, ExpressionType>(ExpressionType.class);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,328,List<Node> newList = new ArrayList<Node>(list.size());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,42,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,43,Expression expression0 = this.expression0.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,44,Expression expression1 = this.expression1.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,45,Expression expression2 = this.expression2.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,46,return visitor.visit(this, expression0, expression1, expression2);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,33,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,34,Expression expression = this.expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,35,return visitor.visit(this, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,38,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,39,Expression expression = this.expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,40,return visitor.visit(this, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,35,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,36,Expression expression = this.expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,37,return visitor.visit(this, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,19,import java.util.List;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,20,import java.util.Objects;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,25,public class Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,26,public Visitor preVisit(WhileStatement whileStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,27,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,30,public Statement visit(WhileStatement whileStatement, Expression condition,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,31,Statement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,32,return condition == whileStatement.condition
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,33,&& body == whileStatement.body
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,34,? whileStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,35,: Expressions.while_(condition, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,38,public Visitor preVisit(ConditionalStatement conditionalStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,39,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,42,public Statement visit(ConditionalStatement conditionalStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,43,List<Node> list) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,45,? conditionalStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,46,: Expressions.ifThenElse(list);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,49,public Visitor preVisit(BlockStatement blockStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,50,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,53,public BlockStatement visit(BlockStatement blockStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,54,List<Statement> statements) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,56,? blockStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,57,: Expressions.block(statements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,60,public Visitor preVisit(GotoStatement gotoStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,61,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,64,public Statement visit(GotoStatement gotoStatement, Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,65,return expression == gotoStatement.expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,66,? gotoStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,67,: Expressions.makeGoto(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,68,gotoStatement.kind, gotoStatement.labelTarget,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,69,expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,72,public LabelStatement visit(LabelStatement labelStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,73,return labelStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,76,public Visitor preVisit(ForStatement forStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,77,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,80,public ForStatement visit(ForStatement forStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,81,List<DeclarationStatement> declarations, Expression condition,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,82,Expression post, Statement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,84,&& condition == forStatement.condition
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,85,&& post == forStatement.post
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,86,&& body == forStatement.body
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,87,? forStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,88,: Expressions.for_(declarations, condition, post, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,91,public Visitor preVisit(ThrowStatement throwStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,92,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,95,public Statement visit(ThrowStatement throwStatement, Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,96,return expression == throwStatement.expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,97,? throwStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,98,: Expressions.throw_(expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,101,public Visitor preVisit(DeclarationStatement declarationStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,102,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,105,public DeclarationStatement visit(DeclarationStatement declarationStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,106,Expression initializer) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,107,return declarationStatement.initializer == initializer
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,108,? declarationStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,109,: Expressions.declare(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,110,declarationStatement.modifiers, declarationStatement.parameter,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,111,initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,114,public Expression visit(LambdaExpression lambdaExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,115,return lambdaExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,118,public Visitor preVisit(FunctionExpression functionExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,119,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,122,public Expression visit(FunctionExpression functionExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,123,BlockStatement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,125,? functionExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,126,: Expressions.lambda(body, functionExpression.parameterList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,129,public Visitor preVisit(BinaryExpression binaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,130,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,133,public Expression visit(BinaryExpression binaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,134,Expression expression0, Expression expression1) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,135,return binaryExpression.expression0 == expression0
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,136,&& binaryExpression.expression1 == expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,137,? binaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,138,: Expressions.makeBinary(binaryExpression.nodeType, expression0,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,139,expression1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,142,public Visitor preVisit(TernaryExpression ternaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,143,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,146,public Expression visit(TernaryExpression ternaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,147,Expression expression0, Expression expression1, Expression expression2) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,148,return ternaryExpression.expression0 == expression0
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,149,&& ternaryExpression.expression1 == expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,150,&& ternaryExpression.expression2 == expression2
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,151,? ternaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,152,: Expressions.makeTernary(ternaryExpression.nodeType, expression0,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,153,expression1, expression2);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,156,public Visitor preVisit(IndexExpression indexExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,157,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,160,public Expression visit(IndexExpression indexExpression, Expression array,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,161,List<Expression> indexExpressions) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,162,return indexExpression.array == array
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,164,? indexExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,165,: new IndexExpression(array, indexExpressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,168,public Visitor preVisit(UnaryExpression unaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,169,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,172,public Expression visit(UnaryExpression unaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,173,Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,174,return unaryExpression.expression == expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,175,? unaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,176,: Expressions.makeUnary(unaryExpression.nodeType, expression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,177,unaryExpression.type, null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,180,public Visitor preVisit(MethodCallExpression methodCallExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,181,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,184,public Expression visit(MethodCallExpression methodCallExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,185,Expression targetExpression, List<Expression> expressions) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,186,return methodCallExpression.targetExpression == targetExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,188,? methodCallExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,189,: Expressions.call(targetExpression, methodCallExpression.method,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,190,expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,193,public Expression visit(DefaultExpression defaultExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,194,return defaultExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,197,public Expression visit(DynamicExpression dynamicExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,198,return dynamicExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,201,public Visitor preVisit(MemberExpression memberExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,202,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,205,public Expression visit(MemberExpression memberExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,206,Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,207,return memberExpression.expression == expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,208,? memberExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,209,: Expressions.field(expression, memberExpression.field);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,212,public Expression visit(InvocationExpression invocationExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,213,return invocationExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,216,static <T> boolean eq(T t0, T t1) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,217,return t0 == t1 || t0 != null && t1 != null && t0.equals(t1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,220,public Visitor preVisit(NewArrayExpression newArrayExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,221,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,224,public Expression visit(NewArrayExpression newArrayExpression, int dimension,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,225,Expression bound, List<Expression> expressions) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,228,? newArrayExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,229,: expressions == null
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,230,? Expressions.newArrayBounds(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,232,: Expressions.newArrayInit(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,233,Types.getComponentTypeN(newArrayExpression.type),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,234,dimension, expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,237,public Expression visit(ListInitExpression listInitExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,238,return listInitExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,241,public Visitor preVisit(NewExpression newExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,242,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,245,public Expression visit(NewExpression newExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,246,List<Expression> arguments, List<MemberDeclaration> memberDeclarations) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,249,? newExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,250,: Expressions.new_(newExpression.type, arguments, memberDeclarations);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,253,public Statement visit(SwitchStatement switchStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,254,return switchStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,257,public Statement visit(TryStatement tryStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,258,return tryStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,261,public Expression visit(MemberInitExpression memberInitExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,262,return memberInitExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,265,public Visitor preVisit(TypeBinaryExpression typeBinaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,266,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,269,public Expression visit(TypeBinaryExpression typeBinaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,270,Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,271,return typeBinaryExpression.expression == expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,272,? typeBinaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,273,: new TypeBinaryExpression(expression.getNodeType(), expression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,274,expression.type);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,277,public Visitor preVisit(MethodDeclaration methodDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,278,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,281,public MemberDeclaration visit(MethodDeclaration methodDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,282,BlockStatement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,284,? methodDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,285,: Expressions.methodDecl(methodDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,286,methodDeclaration.resultType, methodDeclaration.name,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,287,methodDeclaration.parameters, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,290,public Visitor preVisit(FieldDeclaration fieldDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,291,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,294,public MemberDeclaration visit(FieldDeclaration fieldDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,295,Expression initializer) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,297,? fieldDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,298,: Expressions.fieldDecl(fieldDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,299,fieldDeclaration.parameter, initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,302,public Expression visit(ParameterExpression parameterExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,303,return parameterExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,306,public ConstantExpression visit(ConstantExpression constantExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,307,return constantExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,310,public Visitor preVisit(ClassDeclaration classDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,311,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,314,public ClassDeclaration visit(ClassDeclaration classDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,315,List<MemberDeclaration> memberDeclarations) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,316,return Objects.equals(memberDeclarations,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,318,? classDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,319,: Expressions.classDecl(classDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,320,classDeclaration.name, classDeclaration.extended,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,321,classDeclaration.implemented, memberDeclarations);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,324,public Visitor preVisit(ConstructorDeclaration constructorDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,325,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,328,public MemberDeclaration visit(ConstructorDeclaration constructorDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,329,BlockStatement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,331,? constructorDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,332,: Expressions.constructorDecl(constructorDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,333,constructorDeclaration.resultType,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,334,constructorDeclaration.parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,335,body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,37,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,38,final Expression condition1 = condition.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,39,final Statement body1 = body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,40,return visitor.visit(this, condition1, body1);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,45,Operation operation, List<String> updateColumnList, boolean flattened) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,47,updateColumnList, flattened);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,750,updateColumnList, flattened);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,768,isFlattened());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,69,implements TranslatableTable, ScannableTable {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,300,return result.asQuery().toSqlString(dialect).getSql();
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,34,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,80,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,83,RelNode child,
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,87,super(cluster, traits, child);
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,137,public RelDataType deriveRowType() {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,143,public RelDataType getExpectedInputRowType(int ordinalInParent) {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,150,if (isUpdate()) {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,152,getCluster().getTypeFactory().createJoinType(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,153,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,154,getCatalogReader().createTypeFromProjection(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,155,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,159,getCluster().getTypeFactory().createJoinType(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,160,getCluster().getTypeFactory().createJoinType(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,161,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,162,table.getRowType()),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,163,getCatalogReader().createTypeFromProjection(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,164,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,167,inputRowType = table.getRowType();
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,173,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,181,public RelWriter explainTerms(RelWriter pw) {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,185,.item(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,188,? Collections.EMPTY_LIST
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,43,Operation operation, List<String> updateColumnList, boolean flattened) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,45,flattened);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,65,Operation operation, List<String> updateColumnList, boolean flattened) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,69,operation, updateColumnList, flattened);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,78,sole(inputs), getOperation(), getUpdateColumnList(), isFlattened());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,52,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,230,final List<String> fields = e.getRowType().getFieldNames();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,234,final List<SqlSelect> selects = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,236,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,237,for (Pair<RexLiteral, String> literal : Pair.zip(tuple, fields)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,238,selectList.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,239,SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,240,POS,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,241,context.toSql(null, literal.left),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,242,new SqlIdentifier(literal.right, POS)));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,244,selects.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,245,new SqlSelect(POS, SqlNodeList.EMPTY,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,246,new SqlNodeList(selectList, POS), null, null, null,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,247,null, null, null, null, null));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,249,SqlNode query = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,250,for (SqlSelect select : selects) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,251,if (query == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,252,query = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,254,query = SqlStdOperatorTable.UNION_ALL.createCall(POS, query,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,255,select);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,287,public Result visit(TableModify e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,288,throw new AssertionError("not implemented: " + e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,412,&& (((SqlCall) node).getOperator() instanceof SqlSetOperator
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,834,public SqlNode asQuery() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,835,if (node instanceof SqlCall
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,836,&& ((SqlCall) node).getOperator() instanceof SqlSetOperator) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,839,return asSelect();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,143,final ResultSet resultSet = statement.executeQuery(sql);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,144,statement = null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,145,connection = null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,146,return new ResultSetEnumerator<T>(resultSet, rowBuilderFactory);
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,144,source.unparse(writer, opLeft, opRight);
core/src/main/java/org/apache/calcite/sql/SqlValuesOperator.java,36,final SqlWriter.Frame frame = writer.startList("VALUES", "");
core/src/main/java/org/apache/calcite/sql/fun/SqlRowOperator.java,43,public SqlRowOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlRowOperator.java,44,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,895,public static final SqlRowOperator ROW = new SqlRowOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2972,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2987,LogicalTableModify.Operation.INSERT, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3178,LogicalTableModify.Operation.DELETE, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3195,LogicalTableModify.Operation.UPDATE, targetColumnNameList, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3272,LogicalTableModify.Operation.MERGE, targetColumnNameList, false);
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,117,return result.asQuery().toSqlString(dialect).getSql();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,19,import org.slf4j.Logger;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,20,import org.slf4j.LoggerFactory;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,22,import java.io.Closeable;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,42,private static final Logger LOGGER = LoggerFactory.getLogger(HttpUtils.class);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,108,public static void close(Closeable c) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,109,try {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,110,c.close();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,136,int ctimeout, int rtimeout) throws IOException {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,137,HttpURLConnection conn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,138,OutputStreamWriter wr = null;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,140,try {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,141,conn = getURLConnection(url);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,142,conn.setRequestMethod(method);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,143,conn.setReadTimeout(rtimeout);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,144,conn.setConnectTimeout(ctimeout);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,146,if (headers != null) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,147,for (Map.Entry<String, String> me : headers.entrySet()) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,148,conn.setRequestProperty(me.getKey(), me.getValue());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,151,if (data != null) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,152,conn.setDoOutput(true);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,153,wr = new OutputStreamWriter(conn.getOutputStream());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,154,wr.write(data.toString());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,155,wr.flush(); // Get the response
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,157,InputStream in = conn.getInputStream();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,158,if (wr != null) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,159,wr.close();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,162,LOGGER.debug("url: {}, data: {}", url, String.valueOf(data));
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,163,return in;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,165,close(wr);
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,22,import org.apache.calcite.runtime.HttpUtils;
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,186,throws IOException {
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,187,CSVReader csvr = new CSVReader(new InputStreamReader(in));
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,188,try {
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,189,String [] header = csvr.readNext();
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,197,while ((line = csvr.readNext()) != null) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,208,HttpUtils.close(csvr); // CSVReader closes the input stream too
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,148,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,219,ImmutableBitSet.Builder leftBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,220,ImmutableBitSet.Builder rightBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,221,int nLeftColumns = left.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,222,for (int bit : columns) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,223,if (bit < nLeftColumns) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,224,leftBuilder.set(bit);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,226,rightBuilder.set(bit - nLeftColumns);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,233,final ImmutableBitSet leftColumns = leftBuilder.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,235,final ImmutableBitSet rightColumns = rightBuilder.build();
core/src/main/java/org/apache/calcite/prepare/Prepare.java,154,LOGGER.debug("Plan after physical tweaks: {}",
core/src/main/java/org/apache/calcite/prepare/Prepare.java,155,RelOptUtil.toString(rootRel4, SqlExplainLevel.ALL_ATTRIBUTES));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,123,protected RelRoot optimize(final RelRoot root,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,128,planner.setRoot(root.rel);
core/src/main/java/org/apache/calcite/rel/RelRoot.java,143,if (isRefTrivial()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1205,SaffronProperties.instance().allowInfiniteCostConverters.get();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,340,SaffronProperties.instance().defaultCharset.get());
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,105,SaffronProperties.instance().defaultCollation.get(),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,72,return SaffronProperties.instance().defaultNationalCharset.get();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,476,SaffronProperties.instance().defaultCollationStrength.get();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,19,import org.eigenbase.util.property.BooleanProperty;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,20,import org.eigenbase.util.property.StringProperty;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,50,public class SaffronProperties extends Properties {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,56,private static SaffronProperties properties;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,66,public final BooleanProperty allowInfiniteCostConverters =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,67,new BooleanProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,68,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,70,true);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,77,public final StringProperty defaultCharset =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,78,new StringProperty(this, "saffron.default.charset", "ISO-8859-1");
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,87,public final StringProperty defaultNationalCharset =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,88,new StringProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,89,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,99,public final StringProperty defaultCollation =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,100,new StringProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,101,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,111,public final StringProperty defaultCollationStrength =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,112,new StringProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,113,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,124,private SaffronProperties() {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,132,public static SaffronProperties instance() {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,133,if (properties == null) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,134,properties = new SaffronProperties();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,151,properties.loadSaffronProperties(System.getProperties());
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,153,return properties;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,163,public void loadSaffronProperties(Properties source) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,164,for (Enumeration keys = source.keys(); keys.hasMoreElements();) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,165,String key = (String) keys.nextElement();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,166,String value = source.getProperty(key);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,168,|| key.startsWith("net.sf.saffron.")) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,169,properties.setProperty(key, value);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,179,public boolean getBooleanProperty(String key) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,180,return getBooleanProperty(key, false);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,189,public boolean getBooleanProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,190,String key,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,191,boolean defaultValue) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,192,String value = getProperty(key);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,193,if (value == null) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,194,return defaultValue;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,197,|| value.equalsIgnoreCase("yes");
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,204,public int getIntProperty(String key) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,205,String value = getProperty(key);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,206,if (value == null) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,207,return -1;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,209,int i = Integer.valueOf(value).intValue();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,210,return i;
core/src/main/java/org/apache/calcite/util/Util.java,769,return Charset.forName(SaffronProperties.instance().defaultCharset.get());
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,62,RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,64,schema,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,65,EnumerableRel.Prefer.ANY, planner, BindableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,302,context.getRootSchema(), null, planner, resultConvention);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,680,context.getRootSchema(), prefer, planner, resultConvention);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,939,new CalciteMaterializer(this, context, catalogReader, schema, planner);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1002,Convention resultConvention) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,796,boolean alreadySorted = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,60,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,61,intersectExp,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,62,all
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,63,? BuiltInMethod.CONCAT.method
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,64,: BuiltInMethod.INTERSECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,65,childExp);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinus.java,60,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinus.java,61,minusExp,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinus.java,63,childExp);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,58,unionExp =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,59,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,60,unionExp,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,61,all
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,62,? BuiltInMethod.CONCAT.method
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,63,: BuiltInMethod.UNION.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,64,childExp);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,436,public static Pair<RelNode, Boolean> createExistsPlan(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,440,boolean needsOuterJoin) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,443,return Pair.of(seekRel, false);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,444,default:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,445,RelNode ret = seekRel;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,446,final RelOptCluster cluster = seekRel.getCluster();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,447,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,448,final RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,450,final int keyCount = ret.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,451,if (!needsOuterJoin) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,452,return Pair.<RelNode, Boolean>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,453,LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,454,ImmutableBitSet.range(keyCount), null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,455,ImmutableList.<AggregateCall>of()),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,456,false);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,460,final List<RexNode> exprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,461,if (subqueryType == SubqueryType.IN) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,462,for (int i = 0; i < keyCount; i++) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,463,exprs.add(rexBuilder.makeInputRef(ret, i));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,467,final int projectedKeyCount = exprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,468,exprs.add(rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,470,ret = createProject(ret, exprs, null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,472,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,473,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,474,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,475,ImmutableList.of(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,476,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,477,projectedKeyCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,478,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,479,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,480,null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,482,ret = LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,483,ImmutableBitSet.range(projectedKeyCount), null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,484,ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,486,switch (logic) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,487,case TRUE_FALSE_UNKNOWN:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,488,case UNKNOWN_AS_TRUE:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,489,return Pair.of(ret, true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,490,default:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,491,return Pair.of(ret, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1027,final Pair<RelNode, Boolean> converted;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1102,final boolean outerJoin = bb.subqueryNeedsOuterJoin
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1104,|| subQuery.logic == RelOptUtil.Logic.TRUE_FALSE_UNKNOWN;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1110,outerJoin, targetRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1111,if (converted.right) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1117,final RelNode seek = converted.left.getInput(0); // fragile
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1132,RexNode rex =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1133,bb.register(converted.left,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1134,outerJoin ? JoinRelType.LEFT : JoinRelType.INNER, leftKeys);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1136,subQuery.expr = translateIn(subQuery, bb.root, rex);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1160,assert !converted.right;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1161,if (convertNonCorrelatedSubQuery(subQuery, bb, converted.left, true)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1164,subQuery.expr = bb.register(converted.left, JoinRelType.LEFT);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1177,assert !converted.right;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1178,if (convertNonCorrelatedSubQuery(subQuery, bb, converted.left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1181,rel = convertToSingleValueSubq(query, converted.left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1192,assert !converted.right;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1193,subQuery.expr = bb.register(converted.left, JoinRelType.LEFT);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1201,private RexNode translateIn(SubQuery subQuery, RelNode root,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1203,switch (subQuery.logic) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1251,final RelDataType nullableBooleanType =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1252,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1253,typeFactory.createSqlType(SqlTypeName.BOOLEAN), true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1283,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1284,nullableBooleanType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1285,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1286,args.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1289,throw new AssertionError(subQuery.logic);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1490,private Pair<RelNode, Boolean> convertExists(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1494,boolean needsOuterJoin,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1503,return RelOptUtil.createExistsPlan(seekRel, subqueryType, logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1504,needsOuterJoin);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1730,if (kind == SqlKind.OR
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1731,|| kind == SqlKind.NOT) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1735,bb.subqueryNeedsOuterJoin = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1763,if (logic == RelOptUtil.Logic.TRUE_FALSE_UNKNOWN
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1764,&& !validator.getValidatedNodeType(node).isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1765,logic = RelOptUtil.Logic.UNKNOWN_AS_FALSE;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1768,if (logic == RelOptUtil.Logic.UNKNOWN_AS_FALSE
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1769,&& !bb.subqueryNeedsOuterJoin) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3690,private boolean subqueryNeedsOuterJoin;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3733,subqueryNeedsOuterJoin = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4151,assert subQuery != null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4152,rex = subQuery.expr;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4153,assert rex != null : "rex != null";
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4154,return rex;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,95,RexCall firstCond = (RexCall) first;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,96,RexCall secondCond = (RexCall) second;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,120,List<RexNode> firstDnfs = RelOptUtil.disjunctions(firstDnf);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,121,List<RexNode> secondDnfs = RelOptUtil.disjunctions(secondDnf);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,123,for (RexNode f : firstDnfs) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,124,if (!f.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,127,boolean implyOneConjunction = false;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,128,for (RexNode s : secondDnfs) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,129,if (s.isAlwaysFalse()) { // f cannot imply s
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,130,continue;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,133,if (impliesConjunction(f, s)) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,136,implyOneConjunction = true;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,137,break;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,143,if (!implyOneConjunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,144,LOGGER.debug("{} doesnot imply {}", first, second);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,145,return false;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,159,RexUtil.apply(firstUsageFinder, new ArrayList<RexNode>(), first);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,160,RexUtil.apply(secondUsageFinder, new ArrayList<RexNode>(), second);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,186,for (List usageList : usages) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,393,public final Map<RexInputRef, InputRefUsage<SqlOperator, RexNode>>
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,394,usageMap = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,396,public InputUsageFinder() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,195,ImmutableBitSet rCols = RelOptUtil.InputFinder.bits(r);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,196,if (columnsMapped.contains(rCols)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,197,r = r.accept(new RexPermuteInputsShuttle(m, input));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,198,projectPullUpPredicates.add(r);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,245,ValuesReduceRule.PROJECT_INSTANCE);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,218,SqlNode node = call.operand(ordinal);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,219,return SqlLiteral.value(node);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,293,public static Comparable value(SqlNode node) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,335,throw Util.newInternal("invalid literal: " + node);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,72,operand(LogicalValues.class, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,88,operand(LogicalValues.class, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,105,operand(LogicalValues.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,148,List<RexNode> reducibleExps = new ArrayList<RexNode>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,95,Hook.TRIMMED.add(new Function<RelNode, Void>() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,958,public Void visitInputRef(RexInputRef inputRef) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,966,public Void visitLiteral(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,971,public Void visitOver(RexOver over) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,977,public Void visitCorrelVariable(RexCorrelVariable correlVariable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,981,public Void visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1087,public Void visitDynamicParam(RexDynamicParam dynamicParam) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1091,public Void visitRangeRef(RexRangeRef rangeRef) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1095,public Void visitFieldAccess(RexFieldAccess fieldAccess) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,62,public class Interpreter extends AbstractEnumerable<Object[]> {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,121,private void close() {
core/src/main/java/org/apache/calcite/interpreter/Source.java,24,public interface Source {
core/src/main/java/org/apache/calcite/runtime/Hook.java,68,new CopyOnWriteArrayList<Function<Object, Object>>();
core/src/main/java/org/apache/calcite/runtime/Hook.java,73,return new ArrayList<Function<Object, Object>>();
core/src/main/java/org/apache/calcite/runtime/Hook.java,138,public interface Closeable /*extends AutoCloseable*/ {
core/src/main/java/org/apache/calcite/runtime/Hook.java,145,void close(); // override, removing "throws"
core/src/main/java/org/apache/calcite/tools/Planner.java,38,public interface Planner {
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,131,final JsonSchema.Type type =
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,133,.getEnum(JsonSchema.Type.class);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,134,return type == null || type == JsonSchema.Type.NONE ? null : type;
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,47,true),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,65,QUOTING("quoting", Type.ENUM, null, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,69,QUOTED_CASING("quotedCasing", Type.ENUM, null, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,73,UNQUOTED_CASING("unquotedCasing", Type.ENUM, null, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,97,SCHEMA_TYPE("schemaType", Type.ENUM, JsonSchema.Type.NONE, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,144,assert defaultValue == null || type.valid(defaultValue);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,181,columns.add(columnMetaData(name, index, field.getType()));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,466,DatabaseMetaData.typeNullable,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,470,DatabaseMetaData.typeSearchable,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,474,sqlTypeName.getMinScale(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,475,typeSystem.getMaxScale(sqlTypeName),
core/src/main/java/org/apache/calcite/model/JsonSchema.java,109,NONE,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,243,.append("      org.apache.calcite.rel.metadata.RelMetadataQuery mq");
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,303,.append("      org.apache.calcite.rel.metadata.RelMetadataQuery mq");
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,66,new RelOptPredicateList(EMPTY_LIST, EMPTY_LIST, EMPTY_LIST);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,80,private RelOptPredicateList(Iterable<RexNode> pulledUpPredicates,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,81,Iterable<RexNode> leftInferredPredicates,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,82,Iterable<RexNode> rightInferredPredicates) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,83,this.pulledUpPredicates = ImmutableList.copyOf(pulledUpPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,84,this.leftInferredPredicates = ImmutableList.copyOf(leftInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,86,ImmutableList.copyOf(rightInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,97,public static RelOptPredicateList of(Iterable<RexNode> pulledUpPredicates) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,103,return new RelOptPredicateList(pulledUpPredicatesList, EMPTY_LIST,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,104,EMPTY_LIST);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,116,public static RelOptPredicateList of(Iterable<RexNode> pulledUpPredicates,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,131,leftInferredPredicateList, rightInferredPredicatesList);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,134,public RelOptPredicateList union(RelOptPredicateList list) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,135,return RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,153,public RelOptPredicateList shift(int offset) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,154,return RelOptPredicateList.of(RexUtil.shift(pulledUpPredicates, offset),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,218,return RelOptPredicateList.of(projectPullUpPredicates);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,229,.union(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,230,RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,303,return RelOptPredicateList.of(aggPullUpPredicates);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,358,list = list == null ? list2 : list.union(list2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,552,return RelOptPredicateList.of(pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,555,return RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,559,return RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,39,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,118,final ImmutableMap<RexNode, RexNode> constants =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,119,ReduceExpressionsRule.predicateConstants(RexNode.class, rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,120,predicates);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,125,if (constants.containsKey(ref)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,126,map.put(key, constants.get(ref));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,70,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,71,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,74,import java.util.Set;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,296,leftPredicates.union(rightPredicates.shift(fieldCount));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,485,findReducibleExps(rel.getCluster().getTypeFactory(), expList, constants,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,486,constExps, addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,515,if (!constants.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,519,Lists.newArrayList(constants.entrySet());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,624,final Map<RexNode, C> map = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,625,final Set<RexNode> excludeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,626,for (RexNode predicate : predicates.pulledUpPredicates) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,627,gatherConstraints(clazz, predicate, map, excludeSet, rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,629,final ImmutableMap.Builder<RexNode, C> builder =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,630,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,631,for (Map.Entry<RexNode, C> entry : map.entrySet()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,632,RexNode rexNode = entry.getKey();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,633,if (!overlap(rexNode, excludeSet)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,634,builder.put(rexNode, entry.getValue());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,637,return builder.build();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,640,private static boolean overlap(RexNode rexNode, Set<RexNode> set) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,641,if (rexNode instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,642,for (RexNode r : ((RexCall) rexNode).getOperands()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,643,if (overlap(r, set)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,644,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,647,return false;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,649,return set.contains(rexNode);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,655,private static void decompose(Set<RexNode> set, RexNode rexNode) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,656,if (rexNode instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,657,for (RexNode r : ((RexCall) rexNode).getOperands()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,658,decompose(set, r);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,661,set.add(rexNode);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,665,private static <C extends RexNode> void gatherConstraints(Class<C> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,666,RexNode predicate, Map<RexNode, C> map, Set<RexNode> excludeSet,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,667,RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,669,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,670,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,672,final List<RexNode> operands = ((RexCall) predicate).getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,674,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,675,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,682,gatherConstraint(clazz, left, right, map, excludeSet, rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,683,gatherConstraint(clazz, right, left, map, excludeSet, rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,686,private static <C extends RexNode> void gatherConstraint(Class<C> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,687,RexNode left, RexNode right, Map<RexNode, C> map, Set<RexNode> excludeSet,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,688,RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,689,if (!clazz.isInstance(right)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,690,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,692,if (!RexUtil.isConstant(right)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,693,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,695,C constant = clazz.cast(right);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,696,if (excludeSet.contains(left)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,697,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,699,final C existedValue = map.get(left);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,700,if (existedValue == null) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,701,switch (left.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,702,case CAST:
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,705,final RexNode operand = ((RexCall) left).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,706,if (canAssignFrom(left.getType(), operand.getType())) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,707,final RexNode castRight =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,708,rexBuilder.makeCast(operand.getType(), constant);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,709,if (castRight instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,710,left = operand;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,711,constant = clazz.cast(castRight);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,715,map.put(left, constant);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,717,if (existedValue instanceof RexLiteral
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,718,&& constant instanceof RexLiteral
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,720,.equals(((RexLiteral) constant).getValue())) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,722,map.remove(left);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,723,excludeSet.add(left);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,738,private static boolean canAssignFrom(RelDataType type1, RelDataType type2) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,739,final SqlTypeName name1 = type1.getSqlTypeName();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,740,final SqlTypeName name2 = type2.getSqlTypeName();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,741,if (name1.getFamily() == name2.getFamily()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,742,switch (name1.getFamily()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,743,case NUMERIC:
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,744,return name1.compareTo(name2) >= 0;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,745,default:
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,746,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,749,return false;
avatica/core/src/main/java/org/apache/calcite/avatica/Meta.java,943,columnBuilder.addArrayValue(serializeScalar(listItem));
avatica/core/src/main/java/org/apache/calcite/avatica/Meta.java,949,columnBuilder.setScalarValue(serializeScalar(element));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,141,switch (parser.nextToken()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,142,case FIELD_NAME:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,147,expect(parser, JsonToken.END_OBJECT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,148,break;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,149,case END_OBJECT:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,257,final JsonToken t = parser.nextToken();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,258,if (t != token) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,259,throw new RuntimeException("expected " + token + ", got " + t);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,153,.getEnum(SqlConformance.class);
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,21,import org.apache.calcite.sql.validate.SqlConformance;
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,117,CONFORMANCE("conformance", Type.ENUM, SqlConformance.DEFAULT, false);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,57,import org.apache.calcite.sql.validate.SqlConformance;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,414,typeFactory, SqlConformance.DEFAULT);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,201,return SqlConformance.DEFAULT;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,22,public enum SqlConformance {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,23,DEFAULT, STRICT_92, STRICT_99, PRAGMATIC_99, ORACLE_10, STRICT_2003,
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,24,PRAGMATIC_2003;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,34,public boolean isSortByOrdinal() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,35,switch (this) {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,36,case DEFAULT:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,37,case ORACLE_10:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,38,case STRICT_92:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,39,case PRAGMATIC_99:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,40,case PRAGMATIC_2003:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,41,return true;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,42,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,43,return false;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,54,public boolean isSortByAlias() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,55,switch (this) {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,56,case DEFAULT:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,57,case ORACLE_10:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,58,case STRICT_92:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,59,return true;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,60,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,61,return false;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,72,public boolean isSortByAliasObscures() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,73,return this == SqlConformance.STRICT_92;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,83,public boolean isFromRequired() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,84,switch (this) {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,85,case ORACLE_10:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,86,case STRICT_92:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,87,case STRICT_99:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,88,case STRICT_2003:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,89,return true;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,90,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,91,return false;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,551,private boolean canRemoveCastFromLiteral(RelDataType toType, Comparable value,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1358,return new BigDecimal(((Number) o).doubleValue());
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,41,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,43,import java.util.Objects;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,44,import java.util.Set;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,57,private final Set<TypeFamilyCast> nonMonotonicPreservingCasts =
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,58,createNonMonotonicPreservingCasts();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,77,private Set<TypeFamilyCast> createNonMonotonicPreservingCasts() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,78,ImmutableSet.Builder<TypeFamilyCast> builder = ImmutableSet.builder();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,79,add(builder, SqlTypeFamily.EXACT_NUMERIC, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,80,add(builder, SqlTypeFamily.NUMERIC, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,81,add(builder, SqlTypeFamily.APPROXIMATE_NUMERIC, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,82,add(builder, SqlTypeFamily.DATETIME_INTERVAL, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,83,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.EXACT_NUMERIC);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,84,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.NUMERIC);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,85,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.APPROXIMATE_NUMERIC);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,86,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.DATETIME_INTERVAL);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,87,add(builder, SqlTypeFamily.DATETIME, SqlTypeFamily.TIME);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,88,add(builder, SqlTypeFamily.TIMESTAMP, SqlTypeFamily.TIME);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,89,add(builder, SqlTypeFamily.TIME, SqlTypeFamily.DATETIME);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,90,add(builder, SqlTypeFamily.TIME, SqlTypeFamily.TIMESTAMP);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,91,return builder.build();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,94,private void add(ImmutableSet.Builder<TypeFamilyCast> result,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,95,SqlTypeFamily from, SqlTypeFamily to) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,96,result.add(new TypeFamilyCast(from, to));
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,99,private boolean isMonotonicPreservingCast(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,100,RelDataTypeFamily castFrom,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,101,RelDataTypeFamily castTo) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,102,return !nonMonotonicPreservingCasts.contains(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,103,new TypeFamilyCast(castFrom, castTo));
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,205,if (isMonotonicPreservingCast(castFrom, castTo)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,206,return call.getOperandMonotonicity(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,215,private class TypeFamilyCast {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,216,private final RelDataTypeFamily castFrom;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,217,private final RelDataTypeFamily castTo;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,219,public TypeFamilyCast(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,220,RelDataTypeFamily castFrom,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,221,RelDataTypeFamily castTo) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,222,this.castFrom = castFrom;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,223,this.castTo = castTo;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,227,return o == this
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,228,|| o instanceof TypeFamilyCast
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,230,&& castTo.equals(((TypeFamilyCast) o).castTo);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,234,return Objects.hash(castFrom, castTo);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,781,final List<RexNode> exprList = Lists.newArrayList(nodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,785,final String name2 = inferAlias(exprList, node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,786,names.add(Util.first(name, name2));
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,211,return startPrecision;
core/src/main/java/org/apache/calcite/schema/impl/ReflectiveFunctionBase.java,85,if (method.getName().equals(name)) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,271,return createStructType(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,272,new FieldInfo() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,273,public int getFieldCount() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,274,return type.getFieldList().size();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,277,public String getFieldName(int index) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,278,return type.getFieldList().get(index).getName();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,281,public RelDataType getFieldType(int index) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,86,builder.add(getAccumulator(aggregateCall));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,104,private AccumulatorFactory getAccumulator(final AggregateCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,235,case FLOAT:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,236,rowBuilder.set(i, parser.getFloatValue());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,237,break;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,364,fieldBuilder.put(entry.getKey(), entry.getValue().sqlType());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,491,SqlTypeName sqlType() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,492,return sqlType(type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,495,static SqlTypeName sqlType(String type) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,496,switch (type) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,497,case "LONG":
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,498,return SqlTypeName.BIGINT;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,499,case "DOUBLE":
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,500,return SqlTypeName.DOUBLE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,501,case "FLOAT":
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,502,return SqlTypeName.REAL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,503,case "STRING":
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,504,return SqlTypeName.VARCHAR;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,505,case "hyperUnique":
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,506,return SqlTypeName.VARBINARY;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,507,default:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,508,throw new AssertionError("unknown type " + type);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,521,SqlTypeName sqlType() {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,554,case BINARY:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,555,return ((ByteBuffer) value).array();
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,677,SqlLiteral.createCharString(" ", null),
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,689,SqlLiteral.createCharString(" ", null),
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,44,OperandTypes.STRING_SAME_SAME,
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,63,assert operandsCount == 2;
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,64,return "{0}({1} IN {2})";
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,71,return OperandTypes.SAME_SAME.checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,73,&& super.checkOperandTypes(callBinding, throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,75,private boolean checkOperandTypesImpl(
avatica/core/src/main/java/org/apache/calcite/avatica/util/ByteString.java,333,for (int i = 0; i < bytes.length - seek.bytes.length + 1; i++) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,282,public boolean wasNull() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,286,public String getString() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,291,public boolean getBoolean() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,295,public byte getByte() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,299,public short getShort() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,303,public int getInt() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,307,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,311,public float getFloat() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,315,public double getDouble() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,319,public BigDecimal getBigDecimal() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,323,public BigDecimal getBigDecimal(int scale) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,327,public byte[] getBytes() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,331,public InputStream getAsciiStream() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,335,public InputStream getUnicodeStream() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,339,public InputStream getBinaryStream() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,343,public Object getObject() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,347,public Reader getCharacterStream() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,351,private RuntimeException cannotConvert(String targetType) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,352,return new RuntimeException("cannot convert to " + targetType + " ("
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,356,public Object getObject(Map<String, Class<?>> map) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,360,public Ref getRef() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,364,public Blob getBlob() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,368,public Clob getClob() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,372,public Array getArray() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,376,public Struct getStruct() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,380,public Date getDate(Calendar calendar) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,384,public Time getTime(Calendar calendar) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,388,public Timestamp getTimestamp(Calendar calendar) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,392,public URL getURL() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,396,public NClob getNClob() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,400,public SQLXML getSQLXML() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,404,public String getNString() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,408,public Reader getNCharacterStream() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,412,public <T> T getObject(Class<T> type) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,426,public BigDecimal getBigDecimal(int scale) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,434,public BigDecimal getBigDecimal() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,442,public double getDouble() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,446,public float getFloat() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,450,public abstract long getLong();
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,462,public boolean getBoolean() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,467,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,481,public byte getByte() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,486,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,500,public short getShort() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,505,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,519,public int getInt() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,524,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,538,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,553,public BigDecimal getBigDecimal(int scale) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,561,public BigDecimal getBigDecimal() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,569,public abstract double getDouble();
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,571,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,585,public float getFloat() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,590,public double getDouble() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,604,public double getDouble() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,619,protected abstract Number getNumber();
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,621,public double getDouble() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,626,public float getFloat() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,631,public long getLong() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,636,public int getInt() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,641,public short getShort() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,646,public byte getByte() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,651,public boolean getBoolean() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,666,protected Number getNumber() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,670,public BigDecimal getBigDecimal(int scale) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,674,public BigDecimal getBigDecimal() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,695,protected Number getNumber() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,699,public BigDecimal getBigDecimal(int scale) {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,711,public BigDecimal getBigDecimal() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,726,public String getString() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,747,public String getString() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,765,public String getString() {
avatica/core/src/main/java/org/apache/calcite/avatica/util/AbstractCursor.java,842,private byte[] getBase64Decoded() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,619,private JsonFilter translateFilter(RexNode e) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,623,return new JsonSelector("selector", tr(e, 0), tr(e, 1));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,625,return new JsonCompositeFilter("not",
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,626,ImmutableList.of(new JsonSelector("selector", tr(e, 0), tr(e, 1))));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,628,return new JsonBound("bound", tr(e, 0), tr(e, 1), true, null, false,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,629,false);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,631,return new JsonBound("bound", tr(e, 0), tr(e, 1), false, null, false,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,632,false);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,634,return new JsonBound("bound", tr(e, 0), null, false, tr(e, 1), true,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,635,false);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,637,return new JsonBound("bound", tr(e, 0), null, false, tr(e, 1), false,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,638,false);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,645,default:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,646,throw new AssertionError("cannot translate filter: " + e);
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,222,Class<?> type) {
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,230,pair.primitive
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,231,? DatabaseMetaData.columnNullable
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,232,: DatabaseMetaData.columnNoNulls,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,238,protected static ColumnMetaData.StructType fieldMetaData(Class clazz) {
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,280,public final int columnSize;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,281,public final String bufferLength = null;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,283,public final int numPrecRadix;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,287,public final String sqlDataType = null;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,288,public final String sqlDatetimeSub = null;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,289,public final int charOctetLength;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,295,public final String sourceDataType = null;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,296,public final String isAutoincrement = null;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,297,public final String isGeneratedcolumn = null;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,306,int columnSize,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,308,int numPrecRadix,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,310,int charOctetLength,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,348,public MetaTable(String tableCat,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,365,public final String tableCatalog;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,425,public final short scope;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,429,public final int columnSize;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,430,public final int bufferLength;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,431,public final short decimalDigits;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,434,MetaVersionColumn(short scope, String columnName, int dataType,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,435,String typeName, int columnSize, int bufferLength, short decimalDigits,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,457,MetaPrimaryKey(String tableCat, String tableSchem, String tableName,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,458,String columnName, short keySeq, String pkName) {
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,484,public final int precision;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,489,public final int nullable;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,491,public final int searchable;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,496,public final int minimumScale;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,497,public final int maximumScale;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,498,public final int sqlDataType = 0;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,499,public final int sqlDatetimeSub = 0;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,505,int precision,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,508,int nullable,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,510,int searchable,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,514,int minimumScale,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,515,int maximumScale,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,516,int numPrecRadix) {
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,530,this.minimumScale = minimumScale == -1 ? 0 : minimumScale;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,531,this.maximumScale = maximumScale == -1 ? 0 : maximumScale;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,779,put(boolean.class, true, Types.BOOLEAN, "BOOLEAN");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,780,put(Boolean.class, false, Types.BOOLEAN, "BOOLEAN");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,781,put(byte.class, true, Types.TINYINT, "TINYINT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,782,put(Byte.class, false, Types.TINYINT, "TINYINT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,783,put(short.class, true, Types.SMALLINT, "SMALLINT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,784,put(Short.class, false, Types.SMALLINT, "SMALLINT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,785,put(int.class, true, Types.INTEGER, "INTEGER");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,786,put(Integer.class, false, Types.INTEGER, "INTEGER");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,787,put(long.class, true, Types.BIGINT, "BIGINT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,788,put(Long.class, false, Types.BIGINT, "BIGINT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,789,put(float.class, true, Types.FLOAT, "FLOAT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,790,put(Float.class, false, Types.FLOAT, "FLOAT");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,791,put(double.class, true, Types.DOUBLE, "DOUBLE");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,792,put(Double.class, false, Types.DOUBLE, "DOUBLE");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,793,put(String.class, false, Types.VARCHAR, "VARCHAR");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,794,put(java.sql.Date.class, false, Types.DATE, "DATE");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,795,put(Time.class, false, Types.TIME, "TIME");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,796,put(Timestamp.class, false, Types.TIMESTAMP, "TIMESTAMP");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,799,private final boolean primitive;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,803,public TypeInfo(boolean primitive, int sqlType, String sqlTypeName) {
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,804,this.primitive = primitive;
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,809,static void put(Class clazz, boolean primitive, int sqlType,
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,810,String sqlTypeName) {
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,811,m.put(clazz, new TypeInfo(primitive, sqlType, sqlTypeName));
avatica/core/src/main/java/org/apache/calcite/avatica/remote/MockProtobufService.java,75,MetaImpl.columnMetaData("C1", 0, Integer.class),
avatica/core/src/main/java/org/apache/calcite/avatica/remote/MockProtobufService.java,76,MetaImpl.columnMetaData("C2", 1, String.class)),
avatica/core/src/main/java/org/apache/calcite/avatica/remote/MockProtobufService.java,89,MetaImpl.columnMetaData("C1", 0, Integer.class),
avatica/core/src/main/java/org/apache/calcite/avatica/remote/MockProtobufService.java,90,MetaImpl.columnMetaData("C2", 1, String.class)),
avatica/core/src/main/java/org/apache/calcite/avatica/remote/MockProtobufService.java,100,MetaImpl.columnMetaData("TABLE_NAME", 0, String.class),
avatica/core/src/main/java/org/apache/calcite/avatica/remote/MockProtobufService.java,101,MetaImpl.columnMetaData("ORDINAL_POSITION", 1, Long.class)), null,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,115,expectScalarField(parser, "timestamp");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,134,expectScalarField(parser, "timestamp");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,161,parseFields(fieldNames, fieldTypes, rowBuilder, parser);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,177,expectScalarField(parser, "timestamp");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,197,parseField(fieldNames, fieldTypes, rowBuilder, parser);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,72,connection.metadata(tableName, null, fieldMap, metricNameSet);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,74,fieldMap, metricNameSet, null, connection);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,98,connection.metadata(dataSourceName, intervals, fieldMap, metricNameSet);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,38,import com.google.common.collect.Iterables;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,102,if (timestampColumnName == null) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,103,timestampColumnName = Iterables.get(fieldMap.keySet(), 0);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTableFactory.java,51,String timestampColumnName = (String) operand.get("timestampColumn");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTableFactory.java,90,if (timestampColumnName != null) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,80,throws IOException {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,392,generator.writeStringField("descending", "false");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,683,try {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,684,final DruidConnectionImpl connection =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,685,new DruidConnectionImpl(query.druidTable.schema.url,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,686,query.druidTable.schema.coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,687,final DruidConnectionImpl.Page page = new DruidConnectionImpl.Page();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,688,int previousOffset;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,689,do {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,690,previousOffset = page.offset;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,691,final String queryString =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,692,querySpec.getQueryString(page.pagingIdentifier, page.offset);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,693,connection.request(querySpec.queryType, queryString, sink,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,694,querySpec.fieldNames, fieldTypes, page);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,697,throw Throwables.propagate(e);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,32,import org.apache.calcite.util.Util;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,75,this.intervals = Preconditions.checkNotNull(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,76,Util.first(intervals, ImmutableList.of(DEFAULT_INTERVAL)));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTableFactory.java,100,final Object interval = operand.get("interval");
avatica/core/src/main/java/org/apache/calcite/avatica/MetaImpl.java,246,list.size() + 1, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1536,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1538,return Expressions.call(translatedOperands.get(0), method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1801,return implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1802,translator, call, nullAs, NullPolicy.STRICT, false,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1803,implementor);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1409,return ((Map) object).get(index);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1412,List list = (List) object;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1413,return list.get(((Number) index).intValue());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,240,ARRAY_ITEM(SqlFunctions.class, "arrayItem", List.class, int.class),
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,241,MAP_ITEM(SqlFunctions.class, "mapItem", Map.class, Object.class),
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,242,ANY_ITEM(SqlFunctions.class, "item", Object.class, Object.class),
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,51,typeFactory.createSqlType(SqlTypeName.ANY), true))).build();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,37,import org.apache.calcite.util.Permutation;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,154,if (map.navigableKeySet().first() == newGroupCount) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,156,final List<AggregateCall> newAggCalls = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,157,for (AggregateCall aggCall : aggregate.getAggCallList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,158,newAggCalls.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,159,aggCall.adaptTo(input, aggCall.getArgList(), aggCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,160,groupCount, newGroupCount));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,162,relBuilder.aggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,163,relBuilder.groupKey(newGroupSet, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,164,newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,168,final Permutation mapping =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,169,new Permutation(input.getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,170,mapping.identity();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,174,for (int i = 0, groupOrdinal = 0, constOrdinal = newGroupCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,175,i < groupCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,176,++i) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,177,if (map.containsKey(i)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,178,mapping.set(i, constOrdinal++);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,180,mapping.set(i, groupOrdinal++);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,185,final List<AggregateCall> newAggCalls = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,186,for (AggregateCall aggCall : aggregate.getAggCallList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,187,final int argCount = aggCall.getArgList().size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,188,final List<Integer> args = new ArrayList<>(argCount);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,189,for (int j = 0; j < argCount; j++) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,190,final Integer arg = aggCall.getArgList().get(j);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,191,args.add(mapping.getTarget(arg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,193,final int filterArg = aggCall.filterArg < 0 ? aggCall.filterArg
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,194,: mapping.getTarget(aggCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,195,newAggCalls.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,196,aggCall.adaptTo(relBuilder.peek(), args, filterArg, groupCount,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,197,newGroupCount));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,201,relBuilder.aggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,202,relBuilder.groupKey(newGroupSet, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,203,newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,171,RexCall rexCall = (RexCall) newConditionExp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,176,rexCall = (RexCall) rexCall.getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,178,reduceNotNullableFilter(call, filter, rexCall, reverse);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,212,RexCall rexCall,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,218,switch (rexCall.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,232,RexNode operand = rexCall.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,359,return null;
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,291,private TrimResult result(RelNode r, final Mapping mapping) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,425,private TrimResult dummyProject(int fieldCount, RelNode input) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,1011,private Mapping createMapping(ImmutableBitSet fieldsUsed, int fieldCount) {
avatica/standalone-server/src/main/java/org/apache/calcite/avatica/hsqldb/HsqldbServer.java,118,private static class SerializationConverter implements IStringConverter<Serialization> {
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectStringParser.java,136,props = new Properties();
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectStringParser.java,139,parsePair(props);
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectStringParser.java,141,return props;
core/src/main/java/org/apache/calcite/sql/SqlCall.java,84,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlCall.java,85,return getOperator().createCall(pos, getOperandList());
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,179,final int size = identifier.names.size();
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,45,leftPrec(0, true),
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,24,import java.util.List;
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,84,public int reduceExpr(
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,86,List<Object> list) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,199,public int reduceExpr(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,200,int opOrdinal,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,201,List<Object> list) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,202,final SqlParserUtil.ToTreeListItem betweenNode =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,203,(SqlParserUtil.ToTreeListItem) list.get(opOrdinal);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,204,SqlOperator op = betweenNode.getOperator();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,216,final SqlParserPos pos =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,217,((SqlNode) list.get(opOrdinal + 1)).getParserPosition();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,221,SqlParserPos lastPos =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,222,((SqlNode) list.get(list.size() - 1)).getParserPosition();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,228,final Object o = list.get(opOrdinal + 2);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,229,if (!(o instanceof SqlParserUtil.ToTreeListItem)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,230,SqlParserPos errPos = ((SqlNode) o).getParserPosition();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,231,throw SqlUtil.newContextException(errPos, RESOURCE.betweenWithoutAnd());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,234,!= SqlKind.AND) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,235,SqlParserPos errPos = ((SqlParserUtil.ToTreeListItem) o).getPos();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,248,SqlParserUtil.toTreeEx(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,249,list,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,255,SqlNode exp0 = (SqlNode) list.get(opOrdinal - 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,258,betweenNode.getPos(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,264,SqlParserUtil.replaceSublist(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,265,list,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,266,opOrdinal - 1,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,267,opOrdinal + 4,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,268,newExp);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,271,return opOrdinal - 1;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,69,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,29,import org.apache.calcite.sql.parser.SqlParserUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,36,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,55,SqlNode left = (SqlNode) list.get(ordinal - 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,56,SqlNode right = (SqlNode) list.get(ordinal + 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,57,final SqlParserUtil.ToTreeListItem treeListItem =
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,58,(SqlParserUtil.ToTreeListItem) list.get(ordinal);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,59,SqlParserUtil.replaceSublist(
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,60,list,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,61,ordinal - 1,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,66,.plus(treeListItem.getPos()),
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,69,return ordinal - 1;
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,36,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,79,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,151,public int reduceExpr(
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,153,List<Object> list) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,158,SqlNode exp0 = (SqlNode) list.get(opOrdinal - 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,159,SqlOperator op =
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,160,((SqlParserUtil.ToTreeListItem) list.get(opOrdinal)).getOperator();
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,170,final Object o = list.get(opOrdinal + 2);
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,171,if (o instanceof SqlParserUtil.ToTreeListItem) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,172,final SqlOperator op2 =
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,173,((SqlParserUtil.ToTreeListItem) o).getOperator();
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,194,SqlParserUtil.replaceSublist(list, opOrdinal - 1, end, call);
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,195,return opOrdinal - 1;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,140,28,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,429,26,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,527,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,536,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,545,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,554,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,563,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,572,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,581,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,590,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,599,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,631,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1035,new SqlSpecialOperator("Escape", SqlKind.ESCAPE, 30);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,23,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,545,final SqlNode node = toTreeEx(list, 0, 0, SqlKind.OTHER);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,566,public static SqlNode toTreeEx(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,567,List<Object> list,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,568,int start,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,569,int minPrec,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,570,SqlKind stopperKind) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,573,outer:
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,574,while (true) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,575,final int count = list.size();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,576,if (count <= (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,577,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,579,int i = start + 1;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,580,while (i < count) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,581,SqlOperator previous;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,582,SqlOperator current = ((ToTreeListItem) list.get(i)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,583,SqlParserPos currentPos = ((ToTreeListItem) list.get(i)).pos;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,585,&& (current.getKind() == stopperKind)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,586,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,588,SqlOperator next;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,589,int previousRight;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,590,int left = current.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,591,int right = current.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,592,if (left < minPrec) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,593,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,595,int nextLeft;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,596,if (current instanceof SqlBinaryOperator) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,597,if (i == (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,598,previous = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,599,previousRight = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,601,previous = ((ToTreeListItem) list.get(i - 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,602,previousRight = previous.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,604,if (i == (count - 2)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,605,next = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,606,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,608,next = ((ToTreeListItem) list.get(i + 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,609,nextLeft = next.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,611,&& (stopperKind != SqlKind.OTHER)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,618,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,621,if ((previousRight < left) && (right >= nextLeft)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,630,SqlNode leftExp = (SqlNode) list.get(i - 1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,640,SqlNode rightExp = (SqlNode) list.get(i + 1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,641,SqlParserPos callPos =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,642,currentPos.plusAll(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,643,new SqlNode[]{leftExp, rightExp});
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,644,final SqlCall newExp =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,645,current.createCall(callPos, leftExp, rightExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,646,LOGGER.debug("Reduced infix: {}", newExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,650,replaceSublist(list, i - 1, i + 2, newExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,651,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,653,i += 2;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,655,if (i == (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,656,previous = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,657,previousRight = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,659,previous = ((ToTreeListItem) list.get(i - 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,660,previousRight = previous.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,662,if (previousRight < left) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,672,SqlNode leftExp = (SqlNode) list.get(i - 1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,674,SqlParserPos callPos =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,675,currentPos.plusAll(new SqlNode[]{leftExp});
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,676,final SqlCall newExp =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,677,current.createCall(callPos, leftExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,678,LOGGER.debug("Reduced postfix: {}", newExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,681,list.remove(i);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,682,list.set(i - 1, newExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,683,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,685,++i;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,689,SqlSpecialOperator specOp = (SqlSpecialOperator) current;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,694,if (i == (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,695,previous = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,696,previousRight = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,698,previous = ((ToTreeListItem) list.get(i - 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,699,previousRight = previous.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,701,int nextOrdinal = i + 2;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,702,if (i == (count - 2)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,703,next = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,704,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,707,next = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,708,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,709,for (; nextOrdinal < count; nextOrdinal++) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,710,Object listItem = list.get(nextOrdinal);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,711,if (listItem instanceof ToTreeListItem) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,712,next = ((ToTreeListItem) listItem).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,713,nextLeft = next.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,715,&& (next.getKind() == stopperKind)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,716,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,718,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,723,if (nextLeft < minPrec) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,724,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,726,if ((previousRight < left) && (right >= nextLeft)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,727,i = specOp.reduceExpr(i, list);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,728,LOGGER.debug("Reduced special op: {}", list.get(i));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,729,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,731,i = nextOrdinal;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,733,throw Util.newInternal("Unexpected operator type: " + current);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,739,assert list.size() < count;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,741,return (SqlNode) list.get(start);
core/src/main/java/org/apache/calcite/util/Util.java,2048,return list.subList(fromIndex, list.size());
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,381,assert getConvention() == input.getConvention();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,54,import static org.apache.calcite.runtime.HttpUtils.post;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,345,void metadata(String dataSourceName, List<String> intervals,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,33,import org.apache.calcite.plan.RelOptUtil;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,46,import org.apache.calcite.rex.RexBuilder;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,51,import org.apache.calcite.rex.RexShuttle;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,67,import com.google.common.collect.Lists;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,81,private final RelOptTable table;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,85,private static final Pattern VALID_SIG = Pattern.compile("sf?p?a?");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,96,private DruidQuery(RelOptCluster cluster, RelTraitSet traitSet,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,97,RelOptTable table, DruidTable druidTable, List<RelNode> rels) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,210,static DruidQuery create(RelOptCluster cluster, RelTraitSet traitSet,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,212,return new DruidQuery(cluster, traitSet, table, druidTable, rels);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,221,return Util.last(rels).getRowType();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,229,super.explainTerms(pw);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,264,public Class<Object[]> getElementType() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,268,public Enumerable<Object[]> bind(DataContext dataContext) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,272,public Node implement(InterpreterImplementor implementor) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,276,private QuerySpec getQuerySpec() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,305,return getQuery(rowType, filter, projects, groupSet, aggCalls, aggNames);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,308,private QuerySpec getQuery(RelDataType rowType, RexNode filter,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,309,List<RexNode> projects, ImmutableBitSet groupSet,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,310,List<AggregateCall> aggCalls, List<String> aggNames) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,318,translator.metrics.clear();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,319,translator.dimensions.clear();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,325,builder.add(translator.translate(project));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,337,queryType = QueryType.GROUP_BY;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,340,for (int groupKey : groupSet) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,341,final String s = fieldNames.get(groupKey);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,342,dimensions.add(s);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,343,builder.add(s);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,370,new JsonAggregation("longSum", "unit_sales", "unit_sales"));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,375,generator.writeStringField("granularity", "all");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,377,writeFieldIf(generator, "limitSpec", null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,381,writeField(generator, "intervals", druidTable.intervals);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,393,writeField(generator, "intervals", druidTable.intervals);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,397,generator.writeStringField("granularity", "all");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,401,final int fetch =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,403,.getInt();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,404,generator.writeNumberField("threshold", fetch);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,422,private JsonAggregation getJsonAggregation(List<String> fieldNames,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,448,static void writeField(JsonGenerator generator, String fieldName,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,454,private static void writeFieldIf(JsonGenerator generator, String fieldName,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,476,writeArray(generator, (List) o);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,484,static boolean canProjectAll(List<RexNode> nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,485,for (RexNode e : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,486,if (!(e instanceof RexInputRef)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,487,return false;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,490,return true;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,493,static Pair<List<RexNode>, List<RexNode>> splitProjects(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,494,final RexBuilder rexBuilder, final RelNode input, List<RexNode> nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,495,final RelOptUtil.InputReferencedVisitor visitor =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,496,new RelOptUtil.InputReferencedVisitor();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,497,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,498,node.accept(visitor);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,500,if (visitor.inputPosReferenced.size() == input.getRowType().getFieldCount()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,502,return null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,504,final List<RexNode> belowNodes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,505,final List<Integer> positions =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,506,Lists.newArrayList(visitor.inputPosReferenced);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,507,for (int i : positions) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,508,belowNodes.add(rexBuilder.makeInputRef(input, i));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,510,final List<RexNode> aboveNodes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,511,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,512,aboveNodes.add(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,513,node.accept(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,514,new RexShuttle() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,516,return rexBuilder.makeInputRef(input,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,517,positions.indexOf(ref.getIndex()));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,521,return Pair.of(aboveNodes, belowNodes);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,525,static String metadataQuery(String dataSourceName, List<String> intervals) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,545,public final String queryString;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,573,String getQueryString(String pagingIdentifier, int offset) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,595,String translate(RexNode e) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,601,if (druidTable.metricFieldNames.contains(fieldName)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,602,metrics.add(fieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,604,dimensions.add(fieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,609,return tr(e, 0);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,651,return translate(((RexCall) call).getOperands().get(index));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,848,switch ("type") {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,49,public static final List<RelOptRule> RULES = ImmutableList.of(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,50,new DruidAggregateRule(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,51,new DruidProjectRule(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,52,new DruidFilterRule());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,75,private static class DruidAggregateRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,76,private DruidAggregateRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,77,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,78,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,79,operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,83,final Aggregate aggregate = call.rel(0);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,85,if (aggregate.indicator
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,86,|| aggregate.getGroupSets().size() != 1
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,87,|| Iterables.any(aggregate.getAggCallList(), BAD_AGG)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,90,if (!DruidQuery.isValidSignature(query.signature() + 'a')) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,93,final RelNode newAggregate = aggregate.copy(aggregate.getTraitSet(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,94,ImmutableList.of(Util.last(query.rels)));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,95,call.transformTo(extendQuery(query, newAggregate));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,105,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,106,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,107,operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,116,if (DruidQuery.canProjectAll(project.getProjects())) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,119,ImmutableList.of(Util.last(query.rels)));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,120,call.transformTo(extendQuery(query, newProject));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,123,final Pair<List<RexNode>, List<RexNode>> pair =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,124,DruidQuery.splitProjects(project.getCluster().getRexBuilder(), query,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,125,project.getProjects());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,132,final RelDataTypeFactory.FieldInfoBuilder builder =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,133,project.getCluster().getTypeFactory().builder();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,140,.get(((RexInputRef) e).getIndex());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,146,final RelNode newProject = project.copy(project.getTraitSet(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,147,input, below, builder.build());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,148,final DruidQuery newQuery = extendQuery(query, newProject);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,149,final RelNode newProject2 = project.copy(project.getTraitSet(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,150,newQuery, above, project.getRowType());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,159,private static class DruidFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,160,private DruidFilterRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,161,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,162,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,163,operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,167,final Filter filter = call.rel(0);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,170,|| !query.isValidFilter(filter.getCondition())) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,173,final RelNode newFilter = filter.copy(filter.getTraitSet(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,174,ImmutableList.of(Util.last(query.rels)));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,175,call.transformTo(extendQuery(query, newFilter));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,179,public static DruidQuery extendQuery(DruidQuery query, RelNode r) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,180,final ImmutableList.Builder<RelNode> builder = ImmutableList.builder();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,181,return DruidQuery.create(query.getCluster(), query.getTraitSet(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,182,query.getTable(), query.druidTable,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,183,builder.addAll(query.rels).add(r).build());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchemaFactory.java,57,final Map map = (Map) operand;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchemaFactory.java,58,final String url = map.get("url") instanceof String
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchemaFactory.java,61,final String coordinatorUrl = map.get("coordinatorUrl") instanceof String
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchemaFactory.java,66,final boolean containsTables = map.get("tables") instanceof List
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchemaFactory.java,67,&& ((List) map.get("tables")).size() > 0;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,48,protected static final String DEFAULT_INTERVAL =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,54,final List<String> intervals;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,68,RelProtoDataType protoRowType, Set<String> metricFieldNames, List<String> intervals,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,69,String timestampFieldName) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,94,List<String> intervals, Map<String, SqlTypeName> fieldMap,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,107,intervals, Util.first(timestampColumnName, "__time"));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTableFactory.java,101,final List<String> intervals = interval instanceof String
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTableFactory.java,102,? ImmutableList.of((String) interval) : null;
druid/src/main/java/org/apache/calcite/adapter/druid/QueryType.java,20,enum QueryType {
druid/src/main/java/org/apache/calcite/adapter/druid/QueryType.java,21,SELECT,
druid/src/main/java/org/apache/calcite/adapter/druid/QueryType.java,22,TOP_N,
druid/src/main/java/org/apache/calcite/adapter/druid/QueryType.java,23,GROUP_BY
avatica/core/src/main/java/org/apache/calcite/avatica/AvaticaSite.java,197,public void setDate(Date x, Calendar cal) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2753,optimize, RelFactories.DEFAULT_PROJECT_FACTORY);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2765,public static RelNode createProject(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2766,RelNode child, List<Pair<RexNode, String>> projectList,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2767,boolean optimize, RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2768,return createProject(child, Pair.left(projectList), Pair.right(projectList),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2769,optimize, projectFactory);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2810,RelFactories.DEFAULT_PROJECT_FACTORY);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2835,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,72,LogicalProject origProj;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,73,LogicalFilter filter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,97,origProj, origFilter, rel, preserveExprCondition);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,24,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,39,new ProjectJoinTransposeRule(PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,57,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,59,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,60,operand(Join.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,68,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,83,preserveExprCondition);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,40,new ProjectSetOpTransposeRule(PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,58,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,62,operand(SetOp.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,80,new PushProjector(origProj, null, setOp, preserveExprCondition);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,94,LogicalProject p =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,95,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,96,input, true, false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,97,newSetOpInputs.add(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,98,pushProject.createNewProject(p, adjustments));
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,25,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,63,private final LogicalProject origProj;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,191,LogicalProject origProj,
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,194,ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,311,projChild = RelOptUtil.createFilter(newProject, newFilter);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,414,public LogicalProject createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,477,return (LogicalProject) RelOptUtil.createProject(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,480,Pair.right(newProjects));
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,568,true /* optimize to avoid trivial projections, as per javadoc */);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,778,public RelBuilder project(Iterable<? extends RexNode> nodes,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,779,Iterable<String> fieldNames) {
core/src/main/java/org/apache/calcite/sql/SqlKind.java,914,CREATE_INDEX, ALTER_INDEX, DROP_INDEX);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,881,TIMESTAMP_ADD, TIMESTAMP_DIFF,
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,43,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,45,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,46,ReturnTypes.BIGINT_NULLABLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,47,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1077,new SqlSpecialOperator("EXTRACT_DATE", SqlKind.OTHER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,25,import org.apache.calcite.linq4j.tree.Primitive;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,96,List<String> fieldNames, List<Primitive> fieldTypes, Page page) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,194,private void parseFields(List<String> fieldNames, List<Primitive> fieldTypes,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,195,Row.RowBuilder rowBuilder, JsonParser parser) throws IOException {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,201,private void parseField(List<String> fieldNames, List<Primitive> fieldTypes,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,202,Row.RowBuilder rowBuilder, JsonParser parser) throws IOException {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,214,Primitive type = fieldTypes.get(i);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,216,if (token == JsonToken.VALUE_NUMBER_INT) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,217,type = Primitive.INT;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,219,type = Primitive.FLOAT;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,224,rowBuilder.set(i, parser.getIntValue());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,229,case INT:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,252,rowBuilder.set(i, parser.getText());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,328,final List<Primitive> fieldTypes =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,27,import org.apache.calcite.linq4j.tree.Primitive;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,679,final List<Primitive> fieldTypes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,701,private Primitive getPrimitive(RelDataTypeField field) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,704,return Primitive.LONG;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,706,return Primitive.INT;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,708,return Primitive.SHORT;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,710,return Primitive.BYTE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,712,return Primitive.FLOAT;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,715,return Primitive.DOUBLE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTableFactory.java,91,fieldBuilder.put(timestampColumnName, SqlTypeName.VARCHAR);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,168,push(filter.getInput()).filter(expList.get(0)).build());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,172,boolean reverse =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,174,== SqlStdOperatorTable.NOT;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,297,if (!reduceExpressions(join, expList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,460,RexNode newExp = RexUtil.simplify(rexBuilder, expList.get(i),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,461,unknownAsFalse);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,462,if (!newExp.toString().equals(expList.get(i).toString())) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,464,expList.add(i, newExp);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,483,final ImmutableMap<RexNode, RexLiteral> constants =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,484,predicateConstants(RexLiteral.class, rexBuilder, predicates);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,589,List<RexNode> exps, ImmutableMap<RexNode, ? extends RexNode> constants,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,612,protected static <C extends RexNode> ImmutableMap<RexNode, C>
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,613,predicateConstants(Class<C> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,614,RexBuilder rexBuilder, RelOptPredicateList predicates) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,668,if (predicate.getKind() != SqlKind.EQUALS) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,673,if (operands.size() != 2) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,678,final RexNode left = operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,679,final RexNode right = operands.get(1);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,861,replacement = rexBuilder.makeCast(call.getType(), replacement, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,880,private final List<Constancy> stack;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,882,private final ImmutableMap<RexNode, ? extends RexNode> constants;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,893,ImmutableMap<RexNode, ? extends RexNode> constants,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,894,List<RexNode> constExprs,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,903,this.stack = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1360,return simplifyCase(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1362,switch (e.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1499,private static RexNode simplifyCase(RexBuilder rexBuilder, RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1507,newOperands.add(operands.get(i + 1));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1510,if (operand.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1519,switch (newOperands.size()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1520,case 1:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1521,if (!call.getType().equals(newOperands.get(0).getType())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1522,return rexBuilder.makeCast(call.getType(), newOperands.get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1524,return newOperands.get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1536,final List<Pair<RexNode, RexNode>> pairs =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1537,casePairs(rexBuilder, newOperands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1540,&& !pair.e.getValue().isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1588,if (terms.contains(rexBuilder.makeLiteral(false))) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1589,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1624,if (terms.contains(rexBuilder.makeLiteral(false))) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1625,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1640,final RexNode term = terms.get(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1717,final Set<String> termsSet = Sets.newHashSet(RexUtil.strings(terms));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1722,final List<String> terms2Set = RexUtil.strings(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1723,RelOptUtil.conjunctions(notDisjunction));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1152,return new CnfHelper(rexBuilder).toCnf(rex);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1280,return new CnfHelper(rexBuilder).pull(node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2044,private CnfHelper(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2053,return and(toCnfs(operands));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2057,final RexNode headCnf = toCnf(head);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2060,final RexNode tailCnf = toCnf(tail);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2073,return toCnf(((RexCall) arg).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2076,return toCnf(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2079,return toCnf(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2088,private List<RexNode> toCnfs(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2089,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2090,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2091,RexNode cnf = toCnf(node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2092,switch (cnf.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2093,case AND:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2094,list.addAll(((RexCall) cnf).getOperands());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2095,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2096,default:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2097,list.add(cnf);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2100,return list;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2119,return and(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2120,Iterables.concat(factors.values(), ImmutableList.of(or(list))));
core/src/main/java/org/apache/calcite/model/ModelHandler.java,240,builder.put(extraOperand.camelName, file.getParentFile());
avatica/core/src/main/java/org/apache/calcite/avatica/AvaticaResultSet.java,171,throw new UnsupportedOperationException(); // TODO:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,369,fieldBuilder.put(entry.getKey(), entry.getValue().sqlType());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,895,relType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,896,typeFactory.createSqlType(SqlTypeName.DECIMAL, precision, scale);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,81,boolean requireOver) {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,85,this.requiresOver =  requireOver;
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,123,public final boolean requiresOver() {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,82,if (isGroupExpr(id)) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,87,if (id.isStar()) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,88,assert false : "star should have been expanded";
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,153,if (call.getOperator().getKind() == SqlKind.OVER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,154,SqlCall windowFunction = call.operand(0);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,155,if (windowFunction.getOperandList().size() != 0) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,156,windowFunction.operand(0).accept(this);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,104,if (operator.isAggregator()) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,106,return call.getOperator().acceptCall(delegate, call);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,37,import org.apache.calcite.sql.SqlAggFunction;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2504,return getAggregate(select) != null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3308,if (SqlUtil.isCallTo(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3309,orderItem,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3310,SqlStdOperatorTable.DESC)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3499,if (selectScope instanceof AggregatingScope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3500,AggregatingScope aggScope = (AggregatingScope) selectScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3501,for (SqlNode selectItem : expandedSelectItems) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3502,boolean matches = aggScope.checkAggregateExpr(selectItem, true);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3503,Util.discard(matches);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3539,final SqlCall sqlCall = (SqlCall) expr;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3541,&& ((SqlAggFunction) sqlCall.getOperator()).requiresOver()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4567,if (call.operand(0).getKind() == SqlKind.RANK) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4568,return null;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,113,AggregateFunctionImpl.create(IntSum.class), call);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,137,List<Expression> accumulator =
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,138,new ArrayList<Expression>(stateSize);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,147,List<RexNode> args = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,189,public CountAccumulator(AggregateCall call) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,284,builder.set(i, row.getObject(i));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,308,rb.set(index, key.getObject(groupPos));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,379,public long add(long accumulator, int v) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,392,public final AggregateFunctionImpl aggFunction;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,393,public final int argOrdinal;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,396,public UdaAccumulatorFactory(AggregateFunctionImpl aggFunction,
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,410,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,427,public UdaAccumulator(UdaAccumulatorFactory factory) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,432,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,448,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,459,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,98,final List<Class<?>> addParamTypes =
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,99,ImmutableList.copyOf(addMethod.getParameterTypes());
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,108,final Class<?> type = addParamTypes.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1417,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1418,SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1420,rexBuilder.ensureType(leftKeys.get(0).getType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1421,bb.convertExpression(rightVals), true));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1436,rexBuilder.ensureType(pair.left.getType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1437,bb.convertExpression(pair.right), true));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,72,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,112,static final ImmutableList<SqlAggFunction> AGG_FUNCS;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,113,static final ImmutableList<SqlAggFunction> MYSQL_AGG_FUNCS;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,116,ImmutableList.Builder<SqlAggFunction> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,117,builder.add(SqlStdOperatorTable.COUNT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,118,builder.add(SqlStdOperatorTable.SUM);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,119,builder.add(SqlStdOperatorTable.SUM0);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,120,builder.add(SqlStdOperatorTable.MIN);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,121,builder.add(SqlStdOperatorTable.MAX);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,123,builder.add(SqlStdOperatorTable.SINGLE_VALUE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,479,private static boolean canImplement(SqlAggFunction aggregation,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,480,SqlDialect sqlDialect) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,483,return MYSQL_AGG_FUNCS.contains(aggregation);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,485,return AGG_FUNCS.contains(aggregation);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcImplementor.java,25,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcImplementor.java,39,Collections.singletonList(Clause.FROM), scan);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTableScan.java,25,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTableScan.java,52,Collections.singletonList(JdbcImplementor.Clause.FROM), this);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,59,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,180,return result(identifier, Collections.singletonList(Clause.FROM), e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,231,final List<Clause> clauses = Collections.singletonList(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,232,final List<Pair<String, RelDataType>> pairs = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,258,return result(query, clauses, e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,62,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,76,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,236,return result(node, clauses, rel);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,385,public Result result(SqlNode node, Collection<Clause> clauses, RelNode rel) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,391,final String alias5 = alias2 == null || !alias2.equals(alias4) ? alias4
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,392,: null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,394,Collections.singletonList(Pair.of(alias4, rel.getRowType())));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,400,final List<Pair<String, RelDataType>> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,401,list.addAll(leftResult.aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,402,list.addAll(rightResult.aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,403,return new Result(join, Expressions.list(Clause.FROM), null, list);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,645,List<Pair<String, RelDataType>> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,647,for (Pair<String, RelDataType> alias : aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,648,x += alias.right.getFieldCount();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,653,public Context aliasContext(List<Pair<String, RelDataType>> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,666,private final List<Pair<String, RelDataType>> aliases;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,669,protected AliasContext(List<Pair<String, RelDataType>> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,677,for (Pair<String, RelDataType> alias : aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,678,final List<RelDataTypeField> fields = alias.right.getFieldList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,688,: ImmutableList.of(alias.left, field.getName()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,724,private final List<Pair<String, RelDataType>> aliases;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,728,List<Pair<String, RelDataType>> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,790,newContext = aliasContext(aliases, aliases.size() > 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,792,return new Builder(rel, clauseList, select, newContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,858,Context context) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,909,return SqlImplementor.this.result(select, clauses, rel);
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,81,getSqlToRelConverter(getSqlValidator(), catalogReader);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,304,preparingStmt.getSqlToRelConverter(validator, catalogReader);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,305,if (analyze) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,306,converter.enableTableAccessConversion(false);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1085,CatalogReader catalogReader) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1089,StandardConvertletTable.INSTANCE);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1090,sqlToRelConverter.setTrimUnusedFields(true);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1127,getSqlToRelConverter(validator, catalogReader);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,223,createCatalogReader(), cluster, convertletTable);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,224,sqlToRelConverter.setTrimUnusedFields(false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,225,sqlToRelConverter.enableTableAccessConversion(false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,260,catalogReader, cluster, convertletTable);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,262,sqlToRelConverter.setTrimUnusedFields(false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,263,sqlToRelConverter.enableTableAccessConversion(false);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,211,SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/Prepare.java,212,getSqlToRelConverter(validator, catalogReader);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,213,sqlToRelConverter.setExpand(THREAD_EXPAND.get());
core/src/main/java/org/apache/calcite/prepare/Prepare.java,220,sqlToRelConverter.setIsExplain(sqlExplain.getDynamicParamCount());
core/src/main/java/org/apache/calcite/prepare/Prepare.java,322,CatalogReader catalogReader);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,346,getSqlToRelConverter(
core/src/main/java/org/apache/calcite/prepare/Prepare.java,347,getSqlValidator(), catalogReader);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,348,converter.setTrimUnusedFields(shouldTrim(root.rel));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,349,converter.setExpand(THREAD_EXPAND.get());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,210,public static final int IN_SUBQUERY_THRESHOLD = 20;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,223,private boolean shouldConvertTableAccess;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,226,private boolean decorrelationEnabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,227,private boolean trimUnusedFields;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,228,private boolean shouldCreateValuesRel;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,229,private boolean isExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,230,private int nDynamicParamsInExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,256,private boolean expand = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,278,RelOptCluster.create(planner, rexBuilder), convertletTable);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,300,this.shouldConvertTableAccess = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,301,this.exprConverter =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,302,new SqlNodeToRexConverterImpl(convertletTable);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,303,decorrelationEnabled = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,304,trimUnusedFields = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,305,shouldCreateValuesRel = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,306,isExplain = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,307,nDynamicParamsInExplain = 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,358,int retVal = nDynamicParamsInExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,360,++nDynamicParamsInExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,410,public void setIsExplain(int nDynamicParams) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,411,isExplain = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,412,nDynamicParamsInExplain = nDynamicParams;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,426,public void enableTableAccessConversion(boolean enabled) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,427,shouldConvertTableAccess = enabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,439,public void enableValuesRelCreation(boolean enabled) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,440,shouldCreateValuesRel = enabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1043,if (!expand && !(query instanceof SqlNodeList)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1155,if (!expand) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1170,if (!expand) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1333,isExplain);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1470,return IN_SUBQUERY_THRESHOLD;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1570,if ((rexLiteral == null) || !shouldCreateValuesRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1588,if ((rexLiteral != null) && shouldCreateValuesRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1979,if (shouldConvertTableAccess) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2844,return decorrelationEnabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2856,public void setTrimUnusedFields(boolean trim) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2857,this.trimUnusedFields = trim;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2866,return trimUnusedFields;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2869,public void setExpand(boolean expand) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2870,this.expand = expand;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4093,if (!expand) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,463,case MYSQL:
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,468,case ORACLE:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,356,final ObjectMapper mapper = new ObjectMapper();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,28,import com.google.common.collect.Maps;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,66,return Maps.asMap(ImmutableSet.copyOf(connection.tableNames()),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1924,final Expression trop0 = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,295,SqlLiteral literal = (SqlLiteral) node;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,49,import org.apache.calcite.sql.type.SqlTypeFamily;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1349,public static final SqlFunction TIMESTAMP_ADD =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1352,OperandTypes.family(SqlTypeFamily.ANY, SqlTypeFamily.INTEGER,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1353,SqlTypeFamily.DATETIME), SqlFunctionCategory.TIMEDATE);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1380,public static final SqlFunction TIMESTAMP_DIFF =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1381,new SqlFunction("TIMESTAMPDIFF", SqlKind.TIMESTAMP_DIFF,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1382,ReturnTypes.INTEGER_NULLABLE, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1383,OperandTypes.family(SqlTypeFamily.ANY, SqlTypeFamily.DATETIME,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1384,SqlTypeFamily.DATETIME), SqlFunctionCategory.TIMEDATE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1449,final RelDataType intType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1450,cx.getTypeFactory().createSqlType(SqlTypeName.INTEGER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3323,return new OrderExpressionExpander(select, orderExpr).go();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,110,public SqlBetweenOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,111,Flag flag,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,112,boolean negated) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,113,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,114,negated ? NOT_BETWEEN_NAMES : BETWEEN_NAMES,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,115,SqlKind.BETWEEN,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,116,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,117,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,118,null, OTC_CUSTOM);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,238,return stack.peek().rel;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,244,return Iterables.get(stack, n).rel;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,250,return peek(inputCount - 1 - inputOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,310,final RelNode input = peek(inputCount, inputOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,311,final RelDataType rowType = input.getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,312,final int ordinal = rowType.getFieldNames().indexOf(fieldName);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,313,if (ordinal < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,315,+ "] not found; input fields are: " + rowType.getFieldNames());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,317,return field(inputCount, inputOrdinal, ordinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,327,return field(1, 0, fieldOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,338,final RelNode input = peek(inputCount, inputOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,344,final RelDataType fieldType =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,345,rowType.getFieldList().get(fieldOrdinal).getType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,348,.makeInputRef(fieldType, offset + fieldOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,419,RexNode node = field(ordinal.intValue());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,788,if (RexUtil.isIdentity(exprList, peek().getRowType())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,789,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,793,&& names.equals(inputRowType.getFieldNames())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,795,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1113,ImmutableList.of(Pair.of(alias, pair.rel.getRowType()))));
core/src/main/java/org/apache/calcite/util/CompositeList.java,39,private final ImmutableList<List<? extends T>> lists;
core/src/main/java/org/apache/calcite/util/CompositeList.java,46,private CompositeList(ImmutableList<List<? extends T>> lists) {
core/src/main/java/org/apache/calcite/util/CompositeList.java,58,return new CompositeList<T>(ImmutableList.copyOf(lists));
core/src/main/java/org/apache/calcite/util/CompositeList.java,92,return new CompositeList<T>(ImmutableList.of(list0, list1));
core/src/main/java/org/apache/calcite/util/CompositeList.java,107,return new CompositeList<T>(ImmutableList.of(list0, list1, list2));
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,199,!= null;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,163,if (planner.root != null
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,164,&& planner.root.set == this) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,165,planner.ensureRootConverters();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,713,public boolean canConvert(RelTraitSet fromTraits, RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,714,assert fromTraits.size() >= toTraits.size();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,716,boolean canConvert = true;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,717,for (int i = 0; (i < toTraits.size()) && canConvert; i++) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,718,RelTrait fromTrait = fromTraits.getTrait(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,719,RelTrait toTrait = toTraits.getTrait(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,721,assert fromTrait.getTraitDef() == toTrait.getTraitDef();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,722,assert traitDefs.contains(fromTrait.getTraitDef());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,723,assert traitDefs.contains(toTrait.getTraitDef());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,725,canConvert =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,726,fromTrait.getTraitDef().canConvert(this, fromTrait, toTrait);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,729,return canConvert;
core/src/main/java/org/apache/calcite/rel/RelCollationTraitDef.java,85,RelOptPlanner planner, RelCollation fromTrait, RelCollation toTrait) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,200,server.addStatement(this, calcitePreparedStatement.handle);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,304,public CalciteQueryable(CalciteConnection connection, Type elementType,
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,325,statementMap.put(h.id, new CalciteServerStatementImpl(c));
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,435,public ContextImpl(CalciteConnectionImpl connection) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,495,public CalciteServerStatementImpl(CalciteConnectionImpl connection) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,63,private CancelFlag cancelFlag;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,79,protected AbstractRelOptPlanner(RelOptCostFactory costFactory, //
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,90,cancelFlag = new CancelFlag();
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,111,this.cancelFlag = cancelFlag;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,119,if (cancelFlag.isCancelRequested()) {
core/src/main/java/org/apache/calcite/util/CancelFlag.java,25,private boolean cancelRequested;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,33,return cancelRequested;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,40,cancelRequested = true;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,47,cancelRequested = false;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,64,public CsvEnumerator(File file, List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,65,this(file, fieldTypes, identityList(fieldTypes.size()));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,68,public CsvEnumerator(File file, List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,70,this(file, null, (RowConverter<E>) converter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,73,public CsvEnumerator(File file, String[] filterValues,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,74,RowConverter<E> rowConverter) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,78,this.reader = openCsv(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,63,return new CsvEnumerator<Object[]>(file, filterValues,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,49,return new CsvEnumerator<Object[]>(file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,36,public CsvSchemaFactory() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,53,public Enumerable<Object> project(final int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,56,return new CsvEnumerator<Object>(file, fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,98,List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,153,private static CSVReader openCsv(File file) throws IOException {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,34,private final RelProtoDataType protoRowType;
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,59,if (names.equals(withItem.name.getSimple())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,334,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,608,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,183,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,911,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,912,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,914,return "INTERVAL_"
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,915,+ type.getIntervalQualifier().toString().replace(' ', '_');
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,922,return sqlTypeName.getName(); // e.g. "DECIMAL"
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,288,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,289,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,334,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,335,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,40,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,58,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,102,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,128,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,41,import org.apache.calcite.sql.type.IntervalSqlType;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,76,public static final Function<RelDataTypeField, RexInputRef> TO_INPUT_REF =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,512,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,630,scale + intervalType.getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1096,intervalQualifier.isYearMonth() ? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1097,: SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1274,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1347,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,218,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,386,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,469,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,132,? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,133,: SqlTypeName.INTERVAL_DAY_TIME;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,200,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,636,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,687,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,688,intervalQualifier.isYearMonth() ? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,689,: SqlTypeName.INTERVAL_DAY_TIME;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,690,return new SqlIntervalLiteral(
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,691,sign,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,692,intervalStr,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,693,intervalQualifier,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,694,typeName,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,695,pos);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,48,? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,49,: SqlTypeName.INTERVAL_DAY_TIME,
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,50,isNullable,
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,51,null);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,90,== that.intervalQualifier.isYearMonth();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,92,TimeUnit thisStart =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,93,this.intervalQualifier.getStartUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,94,TimeUnit thisEnd =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,95,this.intervalQualifier.getEndUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,96,TimeUnit thatStart =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,97,that.intervalQualifier.getStartUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,98,TimeUnit thatEnd =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,99,that.intervalQualifier.getEndUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,101,assert null != thisStart;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,102,assert null != thatStart;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,106,int fracPrec =
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,52,public MatchReturnTypeInference(int start, List<SqlTypeName> typeNames) {
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,53,assert start >= 0;
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,54,assert null != typeNames;
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,55,assert typeNames.size() > 0;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,43,rules = new HashMap<SqlTypeName, Set<SqlTypeName>>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,48,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,49,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,50,rules.put(SqlTypeName.INTERVAL_YEAR_MONTH, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,53,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,54,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,55,rules.put(SqlTypeName.INTERVAL_DAY_TIME, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,58,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,59,rule.add(SqlTypeName.MULTISET);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,60,rules.put(SqlTypeName.MULTISET, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,63,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,64,rule.add(SqlTypeName.TINYINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,65,rules.put(SqlTypeName.TINYINT, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,68,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,74,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,81,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,89,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,99,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,110,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,122,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,133,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,139,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,140,rule.add(SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,141,rules.put(SqlTypeName.CHAR, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,144,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,150,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,151,rule.add(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,152,rules.put(SqlTypeName.BOOLEAN, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,155,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,161,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,167,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,173,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,174,rule.add(SqlTypeName.TIMESTAMP);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,175,rules.put(SqlTypeName.TIMESTAMP, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,178,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,196,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,243,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,244,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,248,rule = coerceRules.get(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,249,rule.add(SqlTypeName.TINYINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,250,rule.add(SqlTypeName.SMALLINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,251,rule.add(SqlTypeName.INTEGER);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,252,rule.add(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,253,rule.add(SqlTypeName.DECIMAL);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,254,rule.add(SqlTypeName.VARCHAR);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,257,rule = coerceRules.get(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,258,rule.add(SqlTypeName.TINYINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,259,rule.add(SqlTypeName.SMALLINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,260,rule.add(SqlTypeName.INTEGER);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,261,rule.add(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,262,rule.add(SqlTypeName.DECIMAL);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,263,rule.add(SqlTypeName.VARCHAR);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,272,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,273,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,281,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,282,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,292,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,300,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,308,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,336,if (to.equals(SqlTypeName.NULL)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,355,Map<K, V> copy = new HashMap<K, V>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,91,.put(SqlTypeName.INTERVAL_DAY_TIME,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,101,public SqlTypeExplicitPrecedenceList(List<SqlTypeName> typeNames) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,107,private static SqlTypeExplicitPrecedenceList list(SqlTypeName... array) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,108,return new SqlTypeExplicitPrecedenceList(ImmutableList.copyOf(array));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,211,assert typeName != SqlTypeName.INTERVAL_DAY_TIME
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,212,: "use createSqlIntervalType() instead";
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,213,assert typeName != SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,121,public List<SqlTypeName> getTypeNames() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,138,return ImmutableList.of(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,140,return ImmutableList.of(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,64,INTERVAL_DAY_TIME(PrecScale.NO_NO | PrecScale.YES_NO | PrecScale.YES_YES,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,117,DOUBLE, SYMBOL, INTERVAL_YEAR_MONTH, INTERVAL_DAY_TIME,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,150,public static final List<SqlTypeName> INTERVAL_TYPES =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,151,ImmutableList.of(INTERVAL_DAY_TIME, INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,209,private SqlTypeName(int signatures, boolean special, int jdbcType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,310,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,683,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,701,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,270,List<SqlTypeName> typeNames,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2666,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,142,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,599,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,649,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,659,case INTERVAL_DAY_TIME: // fall through
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1448,final TimeUnit unit = unitLiteral.symbolValue(TimeUnit.class);
core/src/main/java/org/apache/calcite/util/Util.java,1881,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1646,return Expressions.makeBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1647,expressionType, expressions.get(0), expressions.get(1));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1928,trop1 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1929,Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1930,Expressions.divide(trop1,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1931,Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1932,int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1938,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1939,case MINUS:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1940,return Expressions.subtract(trop0, trop1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1942,return Expressions.add(trop0, trop1);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,514,BigDecimal value2 = (BigDecimal) value;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,515,final BigDecimal multiplier =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,517,.multiplier;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,524,value = value2.divide(multiplier, 0, BigDecimal.ROUND_HALF_DOWN);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,536,&& SqlTypeUtil.isExactNumeric(exp.getType())) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,537,return makeCastExactToInterval(type, exp);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,607,IntervalSqlType intervalType = (IntervalSqlType) exp.getType();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,608,TimeUnit endUnit = intervalType.getIntervalQualifier().getEndUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,609,if (endUnit == null) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,610,endUnit = intervalType.getIntervalQualifier().getStartUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,612,int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,613,if (endUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,614,scale = Math.min(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,616,.getFractionalSecondPrecision(typeFactory.getTypeSystem()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,617,3);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,619,BigDecimal multiplier = endUnit.multiplier.scaleByPowerOfTen(-scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,620,RexNode value = decodeIntervalOrDecimal(exp);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,621,if (multiplier.longValue() != 1) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,622,value = makeCall(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,623,SqlStdOperatorTable.DIVIDE_INTEGER,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,624,value, makeBigintLiteral(multiplier));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,637,private RexNode makeCastExactToInterval(RelDataType toType, RexNode exp) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,638,IntervalSqlType intervalType = (IntervalSqlType) toType;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,639,TimeUnit endUnit = intervalType.getIntervalQualifier().getEndUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,640,if (endUnit == null) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,641,endUnit = intervalType.getIntervalQualifier().getStartUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,643,int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,644,if (endUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,645,scale = Math.min(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,647,.getFractionalSecondPrecision(typeFactory.getTypeSystem()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,648,3);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,650,BigDecimal multiplier = endUnit.multiplier.scaleByPowerOfTen(-scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,651,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,652,getTypeFactory().createSqlType(SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,653,scale + intervalType.getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,654,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,655,RexNode value = decodeIntervalOrDecimal(ensureType(decimalType, exp, true));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,656,if (multiplier.longValue() != 1) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,657,value = makeCall(SqlStdOperatorTable.MULTIPLY,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,658,value, makeExactLiteral(multiplier));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,660,return encodeIntervalOrDecimal(value, toType, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,748,public RexNode makeNotNullCast(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,749,RelDataType type = expr.getType();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,750,if (!type.isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,751,return expr;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,753,RelDataType typeNotNull =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,754,getTypeFactory().createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,755,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,756,typeNotNull,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,757,SqlStdOperatorTable.CAST,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,758,ImmutableList.of(expr));
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,179,protected void registerEquivOp(final SqlOperator op) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,180,registerOp(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,181,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,182,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,183,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,184,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,185,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,186,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,187,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,188,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,189,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,191,return new SqlBasicCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,192,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,193,operands,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,194,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,142,ReturnTypes.ARG0_NULLABLE, // more efficient than BOOLEAN_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,431,ReturnTypes.ARG0_NULLABLE, // more efficient than BOOLEAN_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,457,ReturnTypes.NULLABLE_SUM,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,907,public static final SqlOperator MINUS_DATE =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1350,new SqlFunction("TIMESTAMPADD", SqlKind.TIMESTAMP_ADD, ReturnTypes.ARG2,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1351,null,
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,36,private SqlIntervalQualifier intervalQualifier;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,52,this.typeSystem = typeSystem;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,53,this.intervalQualifier = intervalQualifier;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,62,SqlDialect dialect = null;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,63,dialect = SqlDialect.DUMMY;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,64,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,74,public SqlIntervalQualifier getIntervalQualifier() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,107,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,112,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,113,final int n = opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,114,RelDataType type1 = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,115,for (int i = 0; i < n; i++) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,116,type1 = opBinding.getOperandType(i);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,117,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,118,break;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,121,return type1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,78,import java.math.MathContext;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,175,final List<RexNode> exprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,461,if (left instanceof SqlIntervalLiteral
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,462,|| left instanceof SqlNumericLiteral) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,469,sourceValue.multiply(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,470,intervalQualifier.getStartUnit().multiplier,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,471,MathContext.UNLIMITED),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,749,private RexNode divide(RexBuilder rexBuilder, RexNode res, BigDecimal val) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,781,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,782,if (SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,783,== expr.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,784,throw Util.needToImplement(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,803,final RexNode minus =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,804,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,805,SqlStdOperatorTable.MINUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,806,casts);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,809,return rexBuilder.makeReinterpretCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,810,resType,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,811,minus,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,812,rexBuilder.makeLiteral(false));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1017,return convertCall(cx, call, SqlStdOperatorTable.DATETIME_PLUS);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1424,private class TimestampAddConvertlet implements SqlRexConvertlet {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1442,private class TimestampDiffConvertlet implements SqlRexConvertlet {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1453,return divide(cx.getRexBuilder(),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1454,rexBuilder.makeCast(intType,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1455,rexBuilder.makeCall(SqlStdOperatorTable.MINUS_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1456,cx.convertExpression(call.operand(2)),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1457,cx.convertExpression(call.operand(1)),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1458,cx.getRexBuilder().makeIntervalLiteral(qualifier))),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1459,unit.multiplier);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,73,protected final URL url;
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,86,this.url = Objects.requireNonNull(url);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,114,HttpClientContext context = HttpClientContext.create();
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,116,context.setTargetHost(host);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,119,if (null != this.credentials) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,120,context.setCredentialsProvider(credentialsProvider);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,121,context.setAuthSchemeRegistry(authRegistry);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,122,context.setAuthCache(authCache);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,125,ByteArrayEntity entity = new ByteArrayEntity(request, ContentType.APPLICATION_OCTET_STREAM);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,128,HttpPost post = new HttpPost(toURI(url));
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,129,post.setEntity(entity);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,131,try (CloseableHttpResponse response = client.execute(post, context)) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,132,final int statusCode = response.getStatusLine().getStatusCode();
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,133,if (HttpURLConnection.HTTP_OK == statusCode
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,134,|| HttpURLConnection.HTTP_INTERNAL_ERROR == statusCode) {
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,135,return EntityUtils.toByteArray(response.getEntity());
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,138,throw new RuntimeException("Failed to execute HTTP Request, got HTTP/" + statusCode);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,140,throw e;
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,142,LOG.debug("Failed to execute HTTP request", e);
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaCommonsHttpClientImpl.java,143,throw new RuntimeException(e);
avatica/core/src/main/java/org/apache/calcite/avatica/BuiltInConnectionProperty.java,102,assert defaultValue == null || type.valid(defaultValue);
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionConfigImpl.java,217,assert property.type() == ConnectionProperty.Type.ENUM;
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionConfigImpl.java,219,return get_(enumConverter(enumClass), defaultValue.name());
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionProperty.java,56,public boolean valid(Object defaultValue) {
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionProperty.java,59,return defaultValue instanceof Boolean;
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionProperty.java,61,return defaultValue instanceof Number;
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionProperty.java,64,return defaultValue instanceof String;
avatica/core/src/main/java/org/apache/calcite/avatica/ConnectionProperty.java,66,return defaultValue instanceof Enum;
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaRemoteConnectionProperty.java,42,NAME_TO_PROPS = new HashMap<String, AvaticaRemoteConnectionProperty>();
avatica/core/src/main/java/org/apache/calcite/avatica/remote/AvaticaRemoteConnectionProperty.java,56,assert defaultValue == null || type.valid(defaultValue);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,522,return JsonColumn.sqlType(type);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1553,return composeDisjunction(rexBuilder, terms, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,127,convertedChildExp, "into", collectionParameter)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,134,Expressions.subtract(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,135,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,136,collectionParameter, "size"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,137,countParameter),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,642,return Meta.StatementType.INSERT;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,248,return createTypeWithNullability(createSqlType(SqlTypeName.ANY), nullCount > 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,51,fieldNames == null ? null
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,52,: SqlValidatorUtil.uniquify(fieldNames,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,53,SqlValidatorUtil.F_SUGGESTER));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,146,SqlValidatorUtil.uniquify(Lists.transform(columns, GET_ALIAS)));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1544,RexBuilder rexBuilder = leftRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1615,SqlValidatorUtil.uniquify(newLeftFieldNames));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1620,SqlValidatorUtil.uniquify(newRightFieldNames));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2837,final List<String> fieldNames2 =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2838,fieldNames == null
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2839,? null
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2840,: SqlValidatorUtil.uniquify(fieldNames,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2841,SqlValidatorUtil.F_SUGGESTER);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2845,final RelDataType rowType =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2846,RexUtil.createStructType(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2847,cluster.getTypeFactory(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2848,exprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2849,fieldNames2);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2857,return projectFactory.createProject(child, exprs, fieldNames2);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1681,fieldNameList == null
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1682,? null
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1683,: SqlValidatorUtil.uniquify(fieldNameList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1684,SqlValidatorUtil.F_SUGGESTER));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2020,Join.deriveJoinRowType(left.getRowType(), right.getRowType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2021,joinType, cluster.getTypeFactory(), null, fieldList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,42,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/core/Join.java,44,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/core/Join.java,217,return deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/core/Join.java,218,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/Join.java,219,right.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/Join.java,220,joinType,
core/src/main/java/org/apache/calcite/rel/core/Join.java,221,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/Join.java,222,null,
core/src/main/java/org/apache/calcite/rel/core/Join.java,270,assert systemFieldList != null;
core/src/main/java/org/apache/calcite/rel/core/Join.java,271,switch (joinType) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,272,case LEFT:
core/src/main/java/org/apache/calcite/rel/core/Join.java,273,rightType = typeFactory.createTypeWithNullability(rightType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,274,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,275,case RIGHT:
core/src/main/java/org/apache/calcite/rel/core/Join.java,276,leftType = typeFactory.createTypeWithNullability(leftType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,277,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,278,case FULL:
core/src/main/java/org/apache/calcite/rel/core/Join.java,279,leftType = typeFactory.createTypeWithNullability(leftType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,280,rightType = typeFactory.createTypeWithNullability(rightType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,281,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,282,default:
core/src/main/java/org/apache/calcite/rel/core/Join.java,283,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,285,return createJoinType(
core/src/main/java/org/apache/calcite/rel/core/Join.java,286,typeFactory, leftType, rightType, fieldNameList, systemFieldList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,318,+ rightType.getFieldCount()));
core/src/main/java/org/apache/calcite/rel/core/Join.java,319,List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/core/Join.java,320,final List<RelDataType> typeList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/core/Join.java,326,final HashSet<String> uniqueNameList = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/core/Join.java,327,addFields(systemFieldList, typeList, nameList, uniqueNameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,328,addFields(leftType.getFieldList(), typeList, nameList, uniqueNameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,329,if (rightType != null) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,330,addFields(
core/src/main/java/org/apache/calcite/rel/core/Join.java,331,rightType.getFieldList(), typeList, nameList, uniqueNameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,333,if (fieldNameList != null) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,334,assert fieldNameList.size() == nameList.size();
core/src/main/java/org/apache/calcite/rel/core/Join.java,335,nameList = fieldNameList;
core/src/main/java/org/apache/calcite/rel/core/Join.java,337,return typeFactory.createStructType(typeList, nameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,340,private static void addFields(
core/src/main/java/org/apache/calcite/rel/core/Join.java,341,List<RelDataTypeField> fieldList,
core/src/main/java/org/apache/calcite/rel/core/Join.java,342,List<RelDataType> typeList,
core/src/main/java/org/apache/calcite/rel/core/Join.java,343,List<String> nameList,
core/src/main/java/org/apache/calcite/rel/core/Join.java,344,HashSet<String> uniqueNameList) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,345,for (RelDataTypeField field : fieldList) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,346,String name = field.getName();
core/src/main/java/org/apache/calcite/rel/core/Join.java,349,if (uniqueNameList.contains(name)) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,350,String nameBase = name;
core/src/main/java/org/apache/calcite/rel/core/Join.java,351,for (int j = 0;; j++) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,352,name = nameBase + j;
core/src/main/java/org/apache/calcite/rel/core/Join.java,353,if (!uniqueNameList.contains(name)) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,354,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,358,nameList.add(name);
core/src/main/java/org/apache/calcite/rel/core/Join.java,359,uniqueNameList.add(name);
core/src/main/java/org/apache/calcite/rel/core/Join.java,360,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,117,return deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,83,fieldNames));
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,100,final List<String> fieldNames2 =
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,101,fieldNames == null
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,102,? null
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,103,: SqlValidatorUtil.uniquify(fieldNames,
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,104,SqlValidatorUtil.F_SUGGESTER);
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,107,fieldNames2);
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,598,RexUtil.createStructType(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,599,typeFactory,
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,600,projectRefs,
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,601,fieldNames);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,183,Join.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,22,import org.apache.calcite.rel.core.Join;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,128,Join.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,159,Join.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,293,public interface FieldInfo {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,322,public static class FieldInfoBuilder implements FieldInfo {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,323,private final List<String> names = new ArrayList<String>();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,324,private final List<RelDataType> types = new ArrayList<RelDataType>();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,425,final List<String> uniqueNames = SqlValidatorUtil.uniquify(names);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,48,public int getDefaultPrecision(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,89,public int getMaxPrecision(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,110,public int getMaxNumericScale() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,114,public int getMaxNumericPrecision() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,118,public String getLiteral(SqlTypeName typeName, boolean isPrefix) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,143,public boolean isCaseSensitive(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,153,public boolean isAutoincrement(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,157,public int getNumTypeRadix(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,165,public RelDataType deriveSumType(
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,426,return RexUtil.createStructType(
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,427,rexBuilder.typeFactory,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,428,projectRefList,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,429,projectNameList);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,656,return createStructType(typeFactory, exprs, null);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,675,final List<String> names) {
core/src/main/java/org/apache/calcite/sql/SqlCall.java,149,if (!this.getOperator().getName().equals(that.getOperator().getName())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,317,new LinkedHashSet<String>(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,198,public static String uniquify(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,199,String name,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,200,Set<String> nameList,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,203,if (nameList.add(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,209,name = suggester.apply(originalName, j, nameList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,210,if (nameList.add(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,219,public static SqlValidatorWithHints newValidator(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,220,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,221,SqlValidatorCatalogReader catalogReader,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,222,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,223,SqlConformance conformance) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,224,return new SqlValidatorImpl(opTab, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,225,conformance);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,232,public static SqlValidatorWithHints newValidator(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,233,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,234,SqlValidatorCatalogReader catalogReader,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,235,RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,236,return newValidator(opTab, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,237,SqlConformance.DEFAULT);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,249,public static List<String> uniquify(List<String> nameList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,250,return uniquify(nameList, EXPR_SUGGESTER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,255,Suggester suggester) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,256,final Set<String> used = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,266,: new ArrayList<>(used);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,688,interface Suggester {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,457,SqlValidatorUtil.uniquify(Pair.left(validatedFields)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3523,fieldNames = SqlValidatorUtil.uniquify(fieldNames);
avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java,246,new String[] {realm}, new SpnegoAuthenticator(), realm, spnegoLoginService);
avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java,425,return withSpnego(principal, realm);
avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java,596,return null;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,143,private final RelBuilder relBuilder;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,148,private final ReflectUtil.MethodDispatcher<Frame> dispatcher =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,149,ReflectUtil.createMethodDispatcher(Frame.class, this, "decorrelateRel",
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,155,private RelNode currentRel;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,157,private final Context context;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,162,private final Map<RelNode, Frame> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,250,.build();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,72,final List<SqlNode> columnNames = Util.skip(operands, 2);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,73,for (final SqlNode operand : columnNames) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,74,String name = ((SqlIdentifier) operand).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,75,if (nameList.contains(name)) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,76,throw validator.newValidationError(operand,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,77,RESOURCE.aliasListDuplicate(name));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,79,nameList.add(name);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,81,if (nameList.size() != rowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,83,final SqlNode node = operands.size() == 3
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,85,: new SqlNodeList(columnNames, SqlParserPos.sum(columnNames));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,86,throw validator.newValidationError(node,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,87,RESOURCE.aliasListDegree(rowType.getFieldCount(), getString(rowType),
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,88,nameList.size()));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,91,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,92,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,95,typeList,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,96,nameList);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,607,currentRel = parent;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,797,for (RelCollation inputCollation : mq.collations(input)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,799,alreadySorted = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,800,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,804,boolean alreadySmaller = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,806,if (rowCount != null && fetch != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,807,final int offsetVal = offset == null ? 0 : RexLiteral.intValue(offset);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,808,final int limit = RexLiteral.intValue(fetch);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,809,if ((double) offsetVal + (double) limit < rowCount) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,810,alreadySmaller = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,813,return alreadySorted && alreadySmaller;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,222,min = Math.min(min, range.getMax());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4469,this.bb = bb;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4470,this.aggregatingSelectScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4471,(AggregatingSelectScope) bb.getValidator().getSelectScope(select);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,29,import java.net.URLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,33,import javax.net.ssl.HttpsURLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,46,URLConnection conn = new URL(url).openConnection();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,47,final HttpURLConnection httpConn = (HttpURLConnection) conn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,52,if (httpConn instanceof HttpsURLConnection) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,53,HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,54,httpsConn.setSSLSocketFactory(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,55,TrustAllSslSocketFactory.createSSLSocketFactory());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,64,return httpConn;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1991,final SqlJoin join = (SqlJoin) from;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1992,final SqlValidatorScope scope = validator.getJoinScope(from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1993,final Blackboard fromBlackboard = createBlackboard(scope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1994,SqlNode left = join.getLeft();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1995,SqlNode right = join.getRight();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1996,final boolean isNatural = join.isNatural();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1997,final JoinType joinType = join.getJoinType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1998,final SqlValidatorScope leftScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1999,Util.first(validator.getJoinScope(left),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2000,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2001,final Blackboard leftBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2002,createBlackboard(leftScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2003,final SqlValidatorScope rightScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2004,Util.first(validator.getJoinScope(right),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2005,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2006,final Blackboard rightBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2007,createBlackboard(rightScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2008,convertFrom(leftBlackboard, left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2009,RelNode leftRel = leftBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2010,convertFrom(rightBlackboard, right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2011,RelNode rightRel = rightBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2012,JoinRelType convertedJoinType = convertJoinType(joinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2013,RexNode conditionExp;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2014,final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2015,final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2016,if (isNatural) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2017,final RelDataType leftRowType = leftNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2018,final RelDataType rightRowType = rightNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2019,final List<String> columnList =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2025,conditionExp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2026,convertJoinCondition(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2027,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2028,leftNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2029,rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2030,join.getCondition(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2031,join.getConditionType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2032,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2033,rightRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2036,final RelNode joinRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2037,createJoin(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2038,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2039,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2040,rightRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2041,conditionExp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2042,convertedJoinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2043,bb.setRoot(joinRel, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2364,private RexNode convertJoinCondition(Blackboard bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2366,SqlValidatorNamespace rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2367,SqlNode condition,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2368,JoinConditionType conditionType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2371,if (condition == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2372,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2376,switch (conditionType) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2377,case ON:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2378,bb.setRoot(ImmutableList.of(leftRel, rightRel));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2379,return bb.convertExpression(condition);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2380,case USING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2381,final SqlNodeList list = (SqlNodeList) condition;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2382,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2383,for (SqlNode columnName : list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2384,final SqlIdentifier id = (SqlIdentifier) columnName;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2385,String name = id.getSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2386,nameList.add(name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2388,return convertUsing(leftNamespace, rightNamespace, nameList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2389,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2390,throw Util.unexpected(conditionType);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,33,import io.airlift.tpch.TpchColumn;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,34,import io.airlift.tpch.TpchEntity;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,35,import io.airlift.tpch.TpchTable;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,120,return tpchColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,157,return column.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,84,RelTraitSet traitSet = cluster.traitSet();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,65,return mq.getColumnOrigins(rel.getInput(), iOutputColumn);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,639,public SqlImplementor implementor() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,780,public SqlNode field(int ordinal) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,35,import org.apache.calcite.sql.SqlBinaryOperator;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,261,SqlNode sqlCondition = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,263,SqlNode x = convertConditionToSqlNode(operand, leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,265,if (sqlCondition == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,266,sqlCondition = x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,268,sqlCondition = op.createCall(POS, sqlCondition, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,271,return sqlCondition;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,529,if (op instanceof SqlBinaryOperator && nodeList.size() > 2) {
core/src/main/java/org/apache/calcite/config/Lex.java,30,ORACLE(Quoting.DOUBLE_QUOTE, Casing.TO_UPPER, Casing.UNCHANGED, true),
core/src/main/java/org/apache/calcite/config/Lex.java,37,MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,45,MYSQL_ANSI(Quoting.DOUBLE_QUOTE, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,51,SQL_SERVER(Quoting.BRACKET, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,58,JAVA(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, true);
core/src/main/java/org/apache/calcite/config/Lex.java,68,boolean caseSensitive) {
core/src/main/java/org/apache/calcite/config/Lex.java,69,this.quoting = quoting;
core/src/main/java/org/apache/calcite/config/Lex.java,70,this.unquotedCasing = unquotedCasing;
core/src/main/java/org/apache/calcite/config/Lex.java,71,this.quotedCasing = quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,465,public abstract void switchTo(String stateName);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,231,SqlParser.ConfigBuilder configBuilder = SqlParser.configBuilder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,232,configBuilder.setUnquotedCasing(Casing.UNCHANGED);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,236,parsedQuery = (SqlSelect) SqlParser.create(query, configBuilder.build()).parseQuery();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,434,return SqlParser.create(sql, parserConfig.build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,77,return create(s, configBuilder().build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,190,Config DEFAULT = configBuilder().build();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,202,private Casing quotedCasing = Lex.ORACLE.quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,203,private Casing unquotedCasing = Lex.ORACLE.unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,204,private Quoting quoting = Lex.ORACLE.quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,205,private int identifierMaxLength = DEFAULT_IDENTIFIER_MAX_LENGTH;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,206,private boolean caseSensitive = Lex.ORACLE.caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,207,private SqlParserImplFactory parserFactory = SqlParserImpl.FACTORY;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,213,this.quotedCasing = config.quotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,214,this.unquotedCasing = config.unquotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,215,this.quoting = config.quoting();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,216,this.identifierMaxLength = config.identifierMaxLength();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,217,this.parserFactory = config.parserFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,223,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,228,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,233,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,237,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,238,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,242,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,243,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,248,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,252,setCaseSensitive(lex.caseSensitive);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,253,setUnquotedCasing(lex.unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,254,setQuotedCasing(lex.quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,255,setQuoting(lex.quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,256,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,270,private static class ConfigImpl implements Config {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,271,private final int identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,272,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,273,private final Casing quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,274,private final Casing unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,275,private final Quoting quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,276,private final SqlParserImplFactory parserFactory;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,278,private ConfigImpl(int identifierMaxLength, Casing quotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,279,Casing unquotedCasing, Quoting quoting, boolean caseSensitive,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,281,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,282,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,289,public int identifierMaxLength() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,290,return identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,293,public Casing quotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,294,return quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,297,public Casing unquotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,298,return unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,301,public Quoting quoting() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,302,return quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,305,public boolean caseSensitive() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,306,return caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,309,public SqlParserImplFactory parserFactory() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,310,return parserFactory;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,250,public final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,258,this.groupSets = ImmutableList.copyOf(groupSets);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,122,ImmutableList.copyOf((Iterable) groupKeys);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,126,final int groupCount = groupKeyList.get(0).nodes.size();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,133,for (Ord<GroupKeyImpl> groupKey : Ord.reverse(groupKeyList)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,861,final SortedSet<ImmutableBitSet> groupSetSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,862,new TreeSet<>(ImmutableBitSet.ORDERING);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,870,groupSetSet.add(groupSet2);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,872,groupSets = ImmutableList.copyOf(groupSetSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,882,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,883,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,885,if (aggCall1.filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,896,final AggregateCall aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,897,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,898,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,900,final int filterArg = aggCall1.filter == null ? -1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,902,aggregateCall =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,906,aggregateCall = ((AggCallImpl2) aggCall).aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,908,aggregateCalls.add(aggregateCall);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1525,private static class AggCallImpl2 implements AggCall {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1222,boolean allowCast) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1237,return makeCharLiteral(padRight((NlsString) value, type.getPrecision()));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,43,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,324,Comparable value,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,326,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,391,assert value == null;
core/src/main/java/org/apache/calcite/util/Util.java,2099,if (size < 15) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,71,new Translator(MongoRules.mongoFieldNames(getRowType()));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,85,Translator(List<String> fieldNames) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,97,for (RexNode node : RelOptUtil.disjunctions(condition)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,83,final MongoRel.Implementor mongoImplementor = new MongoRel.Implementor();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,203,RelDataTypeFamily castFrom = call.getOperandType(0).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,204,RelDataTypeFamily castTo = call.getOperandType(1).getFamily();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3337,inferUnknownTypes(unknownType, groupScope, groupList);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,27,import org.apache.calcite.schema.Function;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,28,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,38,import org.apache.calcite.sql.type.FamilyOperandTypeChecker;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,59,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,130,private Collection<Function> getFunctionsFrom(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,248,private SqlOperator toOp(SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,249,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,250,List<SqlTypeFamily> typeFamilies = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,251,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,252,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,253,argTypes.add(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,254,typeFamilies.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,255,Util.first(type.getSqlTypeName().getFamily(), SqlTypeFamily.ANY));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,263,final FamilyOperandTypeChecker typeChecker =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,267,return new SqlUserDefinedFunction(name, infer((ScalarFunction) function),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,268,InferTypes.explicit(argTypes), typeChecker, paramTypes, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,270,return new SqlUserDefinedAggFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,271,infer((AggregateFunction) function), InferTypes.explicit(argTypes),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,274,return new SqlUserDefinedTableMacro(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,275,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,276,(TableMacro) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,278,return new SqlUserDefinedTableFunction(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,279,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,280,(TableFunction) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,324,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,331,public void registerRules(RelOptPlanner planner) throws Exception {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,83,operandTypeChecker, null, funcType);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,124,if (hasAssignment() && !(call.getOperator() instanceof SqlUnresolvedFunction)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,128,if (call.getOperator() instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,129,final List<RelDataType> paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,130,((SqlFunction) call.getOperator()).getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,131,if (paramTypes != null && operandList.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,132,final List<SqlNode> list = Lists.newArrayList(operandList);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,133,while (list.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,134,list.add(DEFAULT_CALL);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,136,return list;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,139,return operandList;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,157,final SqlFunction operator = (SqlFunction) call.getOperator();
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,29,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,54,private final List<RelDataType> paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,78,operandTypeChecker, null, category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,118,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,125,this.paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,126,paramTypes == null ? null : ImmutableList.copyOf(paramTypes);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,154,return paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,504,SqlUtil.lookupRoutine(validator.getOperatorTable(), getNameAsId(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,408,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,409,SqlIdentifier funcName,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,410,List<RelDataType> argTypes,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,411,List<String> argNames,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,412,SqlSyntax sqlSyntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,413,SqlKind sqlKind,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,514,SqlSyntax syntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,515,final Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,611,private static RelDataType bestMatch(List<SqlFunction> sqlFunctions, int i,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,615,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,616,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,22,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,35,import java.util.List;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,50,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,51,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,56,public List<RelDataType> getParameterTypes(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,57,final RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,58,return Lists.transform(function.getParameters(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,66,public RelDataType getReturnType(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,67,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,50,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,51,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,42,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,44,super(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,70,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,71,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java,63,assert expr.getType().getFieldList().get(field.getIndex()) == field;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,111,for (Map.Entry<String, ScalarFunction> entry
core/src/main/java/org/apache/calcite/model/ModelHandler.java,112,: ScalarFunctionImpl.createAll(clazz).entries()) {
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,223,return SqlUtil.isNullLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,227,return SqlUtil.isLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,224,public SqlKind getKind() {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,318,if (node instanceof SqlIntervalQualifier) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,319,SqlIntervalQualifier qualifier = (SqlIntervalQualifier) node;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,320,return qualifier.timeUnitRange;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,369,if (node instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,209,if (allowCast) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,210,if (node.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,211,SqlCall call = (SqlCall) node;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,212,if (isLiteral(call.operand(0), false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,214,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,218,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,40,InferTypes.RETURN_TYPE, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlCollectionTableOperator.java,40,OperandTypes.ANY);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,66,SqlTypeFamily family = families.get(iFormalOperand);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,67,if (family == SqlTypeFamily.ANY) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,57,if (operator instanceof SqlUserDefinedTableFunction) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,58,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,59,: "User-defined table function should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,60,final SqlUserDefinedTableFunction udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,61,(SqlUserDefinedTableFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,62,return udf.getRowType(validator.typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,64,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,65,: "User-defined table macro should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,66,final SqlUserDefinedTableMacro udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,67,(SqlUserDefinedTableMacro) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,69,.getRowType(validator.typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,71,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,20,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,23,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,37,public class SqlUserDefinedTableFunction extends SqlUserDefinedFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,66,public RelDataType getRowType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,67,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,71,return getFunction().getRowType(typeFactory, arguments);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,83,public Type getElementType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,84,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,20,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,22,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,23,import org.apache.calcite.linq4j.tree.FunctionExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,27,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,32,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,37,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,38,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,39,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,43,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,44,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,45,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,49,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,53,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,62,public class SqlUserDefinedTableMacro extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,83,public TranslatableTable getTable(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,84,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,85,List<Object> arguments = convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,86,tableMacro, getNameAsId(), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,101,public static List<Object> convertArguments(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,102,List<SqlNode> operandList, Function function,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,103,SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,104,boolean failOnNonLiteral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,105,List<Object> arguments = new ArrayList<>(operandList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,107,for (Pair<FunctionParameter, SqlNode> pair
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,108,: Pair.zip(function.getParameters(), operandList)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,109,try {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,110,final Object o = getValue(pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,111,final Object o2 = coerce(o, pair.left.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,112,arguments.add(o2);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,118,+ ") is not literal: " + pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,126,private static Object getValue(SqlNode right) throws NonLiteralException {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,127,switch (right.getKind()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,128,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,130,for (SqlNode o : ((SqlCall) right).getOperandList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,131,list.add(getValue(o));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,133,return ImmutableNullableList.copyOf(list);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,134,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,135,final ImmutableMap.Builder<Object, Object> builder2 =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,136,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,137,final List<SqlNode> operands = ((SqlCall) right).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,138,for (int i = 0; i < operands.size(); i += 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,139,final SqlNode key = operands.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,140,final SqlNode value = operands.get(i + 1);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,141,builder2.put(getValue(key), getValue(value));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,143,return builder2.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,144,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,145,if (SqlUtil.isNullLiteral(right, true)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,146,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,148,if (SqlUtil.isLiteral(right)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,149,return ((SqlLiteral) right).getValue();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,151,if (right.getKind() == SqlKind.DEFAULT) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,152,return null; // currently NULL is the only default value
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,154,throw new NonLiteralException();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,158,private static Object coerce(Object o, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,159,if (o == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,160,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,162,if (!(type instanceof RelDataTypeFactoryImpl.JavaType)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,163,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,165,final RelDataTypeFactoryImpl.JavaType javaType =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,166,(RelDataTypeFactoryImpl.JavaType) type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,167,final Class clazz = javaType.getJavaClass();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,169,if (clazz.isAssignableFrom(o.getClass())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,170,return o;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,179,BlockBuilder bb = new BlockBuilder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,180,final Expression expr =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,182,bb.add(Expressions.return_(null, expr));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,183,final FunctionExpression convert =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,186,return convert.compile().dynamicInvoke();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,191,private static class NonLiteralException extends Exception {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2119,final TranslatableTable table =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2120,udf.getTable(typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2131,elementType = udtf.getElementType(typeFactory, callBinding.operands());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,60,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,64,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,46,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,46,class CsvEnumerator<E> implements Enumerator<E> {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,48,private final String[] filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,76,this.filterValues = filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,86,int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,87,if (fields.length == 1) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,88,final int field = fields[0];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,91,return new ArrayRowConverter(fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,181,String filterValue = filterValues[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,210,static int[] identityList(int n) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,301,private final CsvFieldType[] fieldTypes;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,302,private final int[] fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,304,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,310,final Object[] objects = new Object[fields.length];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,311,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,312,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,313,objects[i] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,320,private static class SingleColumnRowConverter extends RowConverter {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,33,enum CsvFieldType {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,17,package org.apache.calcite.adapter.csv;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,398,protected void notifyDiscard(
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,399,RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,559,RelNode joinRel, ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,562,RelNode left = joinRel.getInputs().get(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,563,RelNode right = joinRel.getInputs().get(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,574,return numDistinctVals(population, mq.getRowCount(joinRel));
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,374,Join joinRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,377,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,384,filters.add(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,394,shiftRightFilter(joinRel, left, multiJoin,
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,751,return selfJoin.getLeftFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,753,return selfJoin.getRightFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,767,return selfJoin.getLeftFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,780,return selfJoin.getRightFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,796,assert selfJoin.getRightFactor() == rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,797,return selfJoin.getColumnMapping().get(rightOffset);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,831,private class RemovableSelfJoin {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,835,private int leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,841,private int rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,848,private Map<Integer, Integer> columnMapping;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,859,public int getLeftFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,860,return leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,863,public int getRightFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,864,return rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,867,public Map<Integer, Integer> getColumnMapping() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,868,return columnMapping;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,63,return getNlsString().getCollation();
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,169,NlsString nls = ((SqlCharStringLiteral) rand).getNlsString();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,24,import org.apache.calcite.plan.RelOptRuleOperand;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,101,protected final Convention out;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,105,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,111,Predicate<? super R> predicate,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,112,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,114,this.out = CassandraRel.CONVENTION;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,122,private static class CassandraFilterRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,132,private static final CassandraFilterRule INSTANCE = new CassandraFilterRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,134,private CassandraFilterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,135,super(operand(LogicalFilter.class, operand(CassandraTableScan.class, none())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,218,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,229,public RelNode convert(LogicalFilter filter, CassandraTableScan scan) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,247,private static class CassandraProjectRule extends CassandraConverterRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,248,private static final CassandraProjectRule INSTANCE = new CassandraProjectRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,250,private CassandraProjectRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,251,super(LogicalProject.class, "CassandraProjectRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,265,public RelNode convert(RelNode rel) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,278,private static class CassandraSortRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,293,private static final RelOptRuleOperand CASSANDRA_OP =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,294,operand(CassandraToEnumerableConverter.class,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,297,private static final CassandraSortRule INSTANCE = new CassandraSortRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,299,private CassandraSortRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,312,public boolean matches(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,379,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,393,private static class CassandraLimitRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,394,private static final CassandraLimitRule INSTANCE = new CassandraLimitRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,396,private CassandraLimitRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,397,super(operand(EnumerableLimit.class, operand(CassandraToEnumerableConverter.class, any())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,409,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,31,EnumerableAggregateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,32,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,33,EnumerableConvention.INSTANCE, "EnumerableAggregateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,88,public static final EnumerableToBindableConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,30,EnumerableCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,37,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,30,EnumerableCollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,31,super(Collect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,34,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,30,EnumerableFilterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,29,public class EnumerableFilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,34,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,29,public static final EnumerableInterpreterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,31,EnumerableIntersectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,32,super(LogicalIntersect.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,33,EnumerableConvention.INSTANCE, "EnumerableIntersectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,36,EnumerableJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,37,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,38,LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,39,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,40,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,31,class EnumerableLimitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,33,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,34,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,44,EnumerableMergeJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,45,super(LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,46,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,47,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,30,EnumerableMinusRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,31,super(LogicalMinus.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,30,EnumerableProjectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,26,public class EnumerableProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,31,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,34,new EnumerableJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,37,new EnumerableMergeJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,49,new EnumerableProjectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,52,new EnumerableFilterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,55,new EnumerableCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,58,new EnumerableAggregateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,61,new EnumerableSortRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,64,new EnumerableLimitRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,67,new EnumerableUnionRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,70,new EnumerableIntersectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,73,new EnumerableMinusRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,82,new EnumerableWindowRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,85,new EnumerableCollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,88,new EnumerableUncollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,29,EnumerableSortRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,30,super(Sort.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,30,public EnumerableTableFunctionScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,38,LogicalTableFunctionScan tbl = (LogicalTableFunctionScan) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,41,tbl.getCall(), tbl.getColumnMappings());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,32,public EnumerableTableScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,30,EnumerableUncollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,31,super(Uncollect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,30,EnumerableUnionRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,31,super(LogicalUnion.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,30,EnumerableWindowRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,31,super(LogicalWindow.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,27,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,129,protected final JdbcConvention out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,132,JdbcConvention out, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,134,this.out = out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,353,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,414,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,457,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,540,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,588,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,631,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,675,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,249,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,312,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,362,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,413,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,476,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,615,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,673,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,30,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,25,public abstract class CommonRelSubExprRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,34,super(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,417,protected boolean equals(RelOptRule that) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,618,private static class ConverterRelOptRuleOperand extends RelOptRuleOperand {
core/src/main/java/org/apache/calcite/plan/hep/HepProgramBuilder.java,115,instruction.rule = rule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,101,public static class ExpandConversionRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,112,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,34,public abstract class ConverterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,67,super(convertOperand(clazz, predicate, in),
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,75,assert in.getTraitDef() == out.getTraitDef();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,80,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,112,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,31,public class TraitMatchingRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,34,private final ConverterRule converter;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,46,operand(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,47,converterRule.getOperand().getMatchedClass(),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,48,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,50,assert converterRule.getOperand().childPolicy
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,51,== RelOptRuleOperandChildPolicy.ANY;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,52,this.converter = converterRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,59,return converter.getOutConvention();
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,64,if (input.getTraitSet().contains(converter.getOutTrait())) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,65,converter.onMatch(call);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,79,public static final AggregateExpandDistinctAggregatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,85,public static final AggregateExpandDistinctAggregatesRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,90,public final boolean useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,98,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,99,this.useGroupingSets = useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,119,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,149,if (useGroupingSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,56,public static final AggregateFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,61,operand(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,65,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,66,public static final AggregateJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,71,public static final AggregateJoinTransposeRule EXTENDED =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,75,private final boolean allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,81,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,84,this.allowFunctions = allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,202,if (!allowFunctions) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,51,public static final AggregateProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,59,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,60,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,61,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,66,public static final AggregateProjectPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,72,public static final AggregateProjectPullUpConstantsRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,91,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,93,operand(inputClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,94,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,99,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,87,public static final AggregateReduceFunctionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,95,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,108,public void onMatch(RelOptRuleCall ruleCall) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,36,public static final AggregateRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,51,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,59,public static final AggregateStarTableRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,65,public static final AggregateStarTableRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,42,public static final AggregateUnionAggregateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,55,operand(unionClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,72,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,54,public static final AggregateUnionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,71,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,72,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,73,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,74,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,44,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,45,operand(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,46,Calc.class,
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,23,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,38,public static final CalcRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,49,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,50,LogicalCalc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,51,RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,52,if (!program.isTrivial()) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,53,return;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,42,public static final CalcSplitRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,46,super(operand(Calc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,37,private final Class consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,39,private final boolean coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,54,operand(consumerRelClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,56,this.consumerRelClass = consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,57,this.coerceNames = coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,70,if (consumerRel.getClass() != consumerRelClass) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,84,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,92,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,51,public static final FilterAggregateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,65,RelBuilderFactory builderFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,68,operand(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,69,operand(aggregateClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,84,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,40,public static final FilterCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,46,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,47,operand(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,48,Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,54,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,61,if (calc.getProgram().containsAggs()) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,44,public static final FilterCorrelateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,52,public FilterCorrelateRule(RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,54,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,55,operand(Correlate.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,56,builderFactory, "FilterCorrelateRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,60,public static final FilterJoinRule FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,67,public static final FilterJoinRule DUMB_FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,72,public static final FilterJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,76,private final boolean smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,81,private final Predicate predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,89,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,90,boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,91,super(operand, relBuilderFactory, "FilterJoinRule:" + id);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,92,this.smart = smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,101,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,102,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,103,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,104,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,113,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,114,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,115,RelFactories.ProjectFactory projectFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,116,Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,117,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,118,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,146,if (smart
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,305,public static class JoinConditionPushRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,308,super(RelOptRule.operand(Join.class, RelOptRule.any()),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,310,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,327,public static class FilterIntoJoinRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,330,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,331,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,332,operand(Join.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,334,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,342,this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,36,public static final FilterMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,46,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,47,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,48,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,21,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,32,public static final FilterMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,41,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,48,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,29,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,45,public static final FilterProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,49,private final boolean copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,50,private final boolean copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,80,projectFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,81,RelBuilder.proto(filterFactory, projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,90,if (RexOver.containsOver(project.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,126,RelNode newProjRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,127,copyProject
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,134,call.transformTo(newProjRel);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,42,public static final FilterRemoveIsNotDistinctFromRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,53,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,85,private class RemoveIsNotDistinctFromRexShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,86,RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,94,public RexNode visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,41,public static final FilterSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,51,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,52,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,53,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,58,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,41,public static final FilterTableFunctionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,51,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,51,public abstract class FilterTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,64,public static final FilterTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,77,public static final FilterTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,38,public static final JoinAddRedundantSemiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,60,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,61,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,62,operand(Join.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,68,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,62,private final boolean swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,72,this.swapOuter = swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,76,this(LogicalJoin.class, RelFactories.LOGICAL_BUILDER, swapOuter);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,137,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,45,public static final JoinExtractFilterRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,60,public static final JoinProjectTransposeRule BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,67,public static final JoinProjectTransposeRule LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,73,public static final JoinProjectTransposeRule RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,81,public static final JoinProjectTransposeRule BOTH_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,89,public static final JoinProjectTransposeRule LEFT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,96,public static final JoinProjectTransposeRule RIGHT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,105,private final boolean includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,113,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,114,this.includeOuter = includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,121,this(operand, description, false, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,127,this(operand, description, false,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,128,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,135,this(operand, description, includeOuter,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,136,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,142,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,143,Join joinRel = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,144,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,146,Project leftProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,147,Project rightProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,154,&& (includeOuter || !joinType.generatesNullsOnLeft())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,155,leftProj = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,156,leftJoinChild = getProjectChild(call, leftProj, true);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,158,leftProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,162,&& (includeOuter || !joinType.generatesNullsOnRight())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,163,rightProj = getRightChild(call);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,164,rightJoinChild = getProjectChild(call, rightProj, false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,166,rightProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,167,rightJoinChild = joinRel.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,169,if ((leftProj == null) && (rightProj == null)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,182,RelDataType joinChildrenRowType =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,187,joinRel.getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,196,int nProjExprs = joinRel.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,198,final RexBuilder rexBuilder = joinRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,201,leftProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,208,List<RelDataTypeField> leftFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,210,int nFieldsLeft = leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,212,rightProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,229,RexProgram bottomProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,236,RexProgramBuilder topProgramBuilder =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,241,topProgramBuilder.addCondition(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,242,RexProgram topProgram = topProgramBuilder.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,243,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,252,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,255,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,256,joinRel.copy(joinRel.getTraitSet(), newCondition,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,257,leftJoinChild, rightJoinChild, joinRel.getJoinType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,258,joinRel.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,263,List<RexLocalRef> projList = mergedProgram.getProjectList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,264,List<RelDataTypeField> newJoinFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,265,newJoinRel.getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,266,int nJoinFields = newJoinFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,284,relBuilder.push(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,285,relBuilder.project(newProjExprs, joinRel.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,289,relBuilder.convert(joinRel.getRowType(), false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,351,Project projRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,359,if (projRel != null) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,361,projRel.getNamedProjects();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,386,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,387,field.getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,40,public static final JoinPushExpressionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,44,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,46,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,50,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,52,this(clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,67,public static final RelOptRule RIGHT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,68,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,70,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,74,public static final RelOptRule LEFT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,75,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,77,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,79,private final boolean right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,85,Class<? extends Join> clazz, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,86,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,87,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,88,operand(clazz, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,90,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,91,this.right = right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,96,Class<? extends Join> clazz, ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,97,this(description, right, clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,101,if (right) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,27,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,44,public static final JoinPushTransitivePredicatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,49,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,55,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,57,this(clazz, RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,70,final RexBuilder rexBuilder = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,73,RelNode lChild = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,75,RelNode curr = lChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,78,call.getPlanner().onCopy(curr, lChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,81,RelNode rChild = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,83,RelNode curr = rChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,86,call.getPlanner().onCopy(curr, rChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,90,lChild, rChild, join.getJoinType(), join.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,77,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,82,public boolean matches(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,104,public static final JoinToMultiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,113,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,114,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,115,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,121,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,36,public static final JoinUnionTransposeRule LEFT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,43,public static final JoinUnionTransposeRule RIGHT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,55,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,71,public static final LoptOptimizeJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,76,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,297,final TreeSet<Integer> sortedFactors = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,298,sortedFactors.addAll(simpleFactors.keySet());
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1628,Pair.of(
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1629,(RexNode) rexBuilder.makeInputRef(currFields.get(i).getType(), i),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,47,public static final MaterializedViewFilterScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,53,.build();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,59,super(operand(Filter.class, operand(TableScan.class, null, none())),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,60,relBuilderFactory, "MaterializedViewFilterScanRule");
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,65,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,79,Collections.singletonList((RelNode) scan));
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,87,new HepPlanner(program, planner.getContext());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,69,public static final MultiJoinOptimizeBushyRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,77,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,60,public static final MultiJoinProjectTransposeRule MULTI_BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,61,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,62,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,63,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,64,operand(MultiJoin.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,65,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,66,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,69,public static final MultiJoinProjectTransposeRule MULTI_LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,70,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,71,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,72,some(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,73,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,74,operand(MultiJoin.class, any())))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,77,public static final MultiJoinProjectTransposeRule MULTI_RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,78,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,79,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,80,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,81,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,82,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,46,public static final ProjectCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,53,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,54,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,60,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,61,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,62,final LogicalCalc calc = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,28,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,45,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,55,public ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,56,Class<? extends Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,57,Class<? extends Filter> filterClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,58,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,61,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,62,projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,63,operand(filterClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,65,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,38,public static final ProjectJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,46,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,61,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,67,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,78,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,80,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,84,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,90,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,91,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,95,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,96,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,103,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,107,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,109,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,110,leftProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,111,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,112,rightProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,114,pushProject.convertRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,116,projJoinFieldList,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,121,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,125,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,126,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,132,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,133,pushProject.createNewProject(newJoinRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,40,public static final ProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,46,private final boolean force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,57,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,58,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,59,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,61,this.force = force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,66,this(force, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,101,if (!force) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,112,if (force
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,36,public static final ProjectMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,44,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,45,operand(MultiJoin.class, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,50,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,39,public static final ProjectSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,47,private PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,60,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,61,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,63,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,69,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,70,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,71,SetOp setOp = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,79,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,81,pushProject.locateAllRefs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,84,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,17,package org.apache.calcite.rel.rules;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,20,import org.apache.calcite.plan.RelOptRuleCall;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,21,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,22,import org.apache.calcite.rel.core.Project;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,23,import org.apache.calcite.rel.core.Sort;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,25,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,35,public static final ProjectSortTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,51,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,52,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,53,final Sort sort = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,54,if (sort.getClass() != Sort.class) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,55,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,57,RelNode newProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,58,project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,59,project.getTraitSet(), ImmutableList.of(sort.getInput()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,60,final Sort newSort =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,61,sort.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,62,sort.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,63,newProject,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,64,sort.getCollation(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,65,sort.offset,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,66,sort.fetch);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,67,call.transformTo(newSort);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,49,public abstract class ProjectTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,60,public static final ProjectTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,73,public static final ProjectTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,53,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,23,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,48,public static final ProjectWindowTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,53,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,58,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,59,final LogicalWindow window = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,171,final LogicalProject newTopProj = project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,184,private ImmutableBitSet findReference(final LogicalProject project,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,185,final LogicalWindow window) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,43,import static org.apache.calcite.plan.RelOptRule.any;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,44,import static org.apache.calcite.plan.RelOptRule.none;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,45,import static org.apache.calcite.plan.RelOptRule.operand;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,46,import static org.apache.calcite.plan.RelOptRule.some;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,47,import static org.apache.calcite.plan.RelOptRule.unordered;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,75,operand(LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,78,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,81,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,83,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,84,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,140,new RemoveEmptySingleRule(Filter.class, "PruneEmptyFilter");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,153,new RemoveEmptySingleRule(Sort.class, "PruneEmptySort");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,167,operand(Sort.class, any()), "PruneSortLimit0") {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,169,Sort sort = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,170,if (sort.fetch != null
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,171,&& RexLiteral.intValue(sort.fetch) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,192,RelFactories.LOGICAL_BUILDER, "PruneEmptyAggregate");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,206,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,207,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,209,operand(RelNode.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,212,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,213,if (join.getJoinType().generatesNullsOnLeft()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,216,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,218,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,234,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,235,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,236,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,240,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,241,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,244,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,246,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,257,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,264,super(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,267,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,270,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,82,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,87,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,121,public class DecimalShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,126,public DecimalShuttle(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,219,private class ExpanderMap {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,268,public RexExpander getExpander(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,290,public abstract class RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,294,RexBuilder builder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,300,RelDataType int8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,306,RelDataType real8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,311,public RexExpander(RexBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,722,private class CastExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,821,private class BinaryArithmeticExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,832,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1013,private class FloorExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1062,private class CeilExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1113,private class CaseExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1150,private class PassThroughExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1155,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1185,private class CastArgAsDoubleExpander extends CastArgAsTypeExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1205,private abstract class CastArgAsTypeExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1212,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1245,private class ReinterpretExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1250,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1255,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,110,public static final ReduceExpressionsRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,117,public static final ReduceExpressionsRule JOIN_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,124,public static final ReduceExpressionsRule CALC_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,132,public static class FilterReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,249,public static class ProjectReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,279,public static class JoinReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,326,public static class CalcReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,421,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,878,private final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,898,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,39,public static final SemiJoinFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,48,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,58,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,60,RelNode newSemiJoin =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,47,public static final SemiJoinJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,76,int nFieldsX = join.getLeft().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,77,int nFieldsY = join.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,78,int nFieldsZ = semiJoin.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,79,int nTotalFields = nFieldsX + nFieldsY + nFieldsZ;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,109,RexNode newSemiJoinFilter;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,151,RelNode leftSemiJoinOp;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,164,RelNode leftJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,165,RelNode rightJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,167,leftJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,168,rightJoinRel = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,170,leftJoinRel = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,171,rightJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,174,RelNode newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,178,leftJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,179,rightJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,183,call.transformTo(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,56,public static final SemiJoinProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,67,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,75,LogicalProject project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,121,RexBuilder rexBuilder = project.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,122,RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,123,RelNode rightChild = semiJoin.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,35,public static final SemiJoinRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,47,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,47,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,49,some(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,51,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,45,public static final SortJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,54,super(
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,55,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,46,public static final SortProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,64,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,112,equiv = ImmutableMap.of((RelNode) newSort, project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,52,private final boolean matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,57,this(Sort.class, Union.class, matchNullFetch, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,70,super(
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,71,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,72,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,73,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,74,this.matchNullFetch = matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,87,&& (matchNullFetch || sort.fetch != null);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,42,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,64,public static final SubQueryRemoveRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,89,public static final SubQueryRemoveRule FILTER =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,114,public static final SubQueryRemoveRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,140,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,141,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,142,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,44,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,30,public static final UnionEliminatorRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,35,public static final UnionMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,44,operand(unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,45,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,46,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,51,public UnionMergeRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,36,public static final UnionToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,44,public UnionToDistinctRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,52,this(unionClazz, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,69,public static final ValuesReduceRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,85,public static final ValuesReduceRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,101,public static final ValuesReduceRule PROJECT_FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,124,Util.discard(LOGGER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,70,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,71,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,90,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,91,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,109,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,110,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,131,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,132,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,151,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,152,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,179,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,180,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,210,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,211,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,241,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,242,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,246,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1580,private final class RemoveSingleAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1582,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1583,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1585,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1590,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1633,private final class RemoveCorrelationForScalarProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1635,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1637,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1643,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1651,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1756,if (!checkCorVars(correlate, project, filter, correlatedKeyList)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1770,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1781,if (!checkCorVars(correlate, project, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1796,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1821,projectJoinOutputWithNullability(join, project, nullIndicatorPos);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1825,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1830,private final class RemoveCorrelationForScalarAggregateRule
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1831,extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1833,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1835,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1842,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1851,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1942,removeCorrelationExpr(joinKey, false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1965,if (!checkCorVars(correlate,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1966,aggInputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1967,filter,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2015,joinCond =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2016,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2024,if (!checkCorVars(correlate, aggInputProject, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2088,right =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2089,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2090,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2122,removeCorrelationExpr(aggInputProjExpr,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2183,removeCorrelationExpr(aggOutputProjects.get(0), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2199,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2212,private final class AdjustProjectForCountAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2213,final boolean flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2216,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2217,flavor
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2219,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2223,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2225,this.flavor = flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2228,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2233,if (flavor) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2261,if (generatedCorRels.contains(correlate)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2267,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2327,generatedCorRels.add(newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2337,aggregateCorrelatorOutput(newCorrelate, aggOutputProject, isCount);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,82,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,110,public void onMatch(RelOptRuleCall call) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,24,import org.apache.calcite.plan.RelTrait;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,169,final Convention out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,171,ElasticsearchConverterRule(Class<? extends RelNode> clazz, RelTrait in, Convention out,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,172,String description) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,173,super(clazz, in, out, description);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,174,this.out = out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,185,private ElasticsearchSortRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,203,private static final ElasticsearchFilterRule INSTANCE = new ElasticsearchFilterRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,205,private ElasticsearchFilterRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,206,super(LogicalFilter.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,224,private static final ElasticsearchProjectRule INSTANCE = new ElasticsearchProjectRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,226,private ElasticsearchProjectRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,227,super(LogicalProject.class, Convention.NONE, ElasticsearchRel.CONVENTION,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,32,public class CsvProjectTableScanRule extends RelOptRule {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,33,public static final CsvProjectTableScanRule INSTANCE =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,37,super(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,38,operand(LogicalProject.class,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,39,operand(CsvTableScan.class, none())),
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,24,import org.apache.calcite.plan.RelTrait;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,249,protected final Convention out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,255,super(clazz, in, out, description);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,256,this.out = out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,265,public static final MongoSortRule INSTANCE = new MongoSortRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,267,private MongoSortRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,268,super(Sort.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,272,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,288,private static final MongoFilterRule INSTANCE = new MongoFilterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,290,private MongoFilterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,291,super(LogicalFilter.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,295,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,311,private static final MongoProjectRule INSTANCE = new MongoProjectRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,313,private MongoProjectRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,314,super(LogicalProject.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,318,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,501,public static final RelOptRule INSTANCE = new MongoAggregateRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,503,private MongoAggregateRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,504,super(LogicalAggregate.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,508,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,17,package org.apache.calcite.adapter.spark;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableConvention;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,20,import org.apache.calcite.plan.RelTraitSet;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,21,import org.apache.calcite.rel.RelNode;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,22,import org.apache.calcite.rel.convert.ConverterRule;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,29,public class EnumerableToSparkConverterRule extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,30,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,39,public RelNode convert(RelNode rel) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,40,RelTraitSet newTraitSet = rel.getTraitSet().replace(getOutTrait());
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,41,return new EnumerableToSparkConverter(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,42,rel.getCluster(), newTraitSet, rel);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,91,EnumerableToSparkConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,92,SparkToEnumerableConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,99,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,100,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,102,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,103,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,104,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,116,public static final SparkToEnumerableConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,117,new SparkToEnumerableConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,119,private SparkToEnumerableConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,120,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,121,RelNode.class, SparkRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,131,public static final SparkValuesRule SPARK_VALUES_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,132,new SparkValuesRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,136,private SparkValuesRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,137,super(LogicalValues.class, Convention.NONE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,211,public static final SparkCalcRule SPARK_CALC_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,212,new SparkCalcRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,218,private static class SparkCalcRule
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,219,extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,220,private SparkCalcRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,221,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,222,LogicalCalc.class,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,223,Convention.NONE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,224,SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,228,public RelNode convert(RelNode rel) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,20,import org.apache.calcite.plan.RelOptRule;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,55,extends RelOptRule {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,74,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,81,operand(SplunkTableScan.class, none())))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,85,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,90,operand(SplunkTableScan.class, none()))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,94,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,100,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,103,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,114,public void onMatch(RelOptRuleCall call) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,299,s = s.append(" NOT ");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,238,defineUnary(UNARY_MINUS, Negate, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,239,defineUnary(UNARY_PLUS, UnaryPlus, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,299,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,125,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,127,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,129,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,130,x.builder(e, Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,131,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,133,SqlNode sqlExpr = builder.context.toSql(null, ref);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,134,addSelect(selectList, sqlExpr, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,137,builder.setSelect(new SqlNodeList(selectList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,144,final Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,173,return builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,206,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,208,Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,211,: x.builder(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,263,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,264,Builder builder = x.builder(e, Clause.ORDER_BY);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,271,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,276,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,281,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,283,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,230,final Result result = visitChild(input.i, input.e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,725,final Expressions.FluentList<Clause> clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,732,this.clauses = Expressions.list(clauses);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,784,return ((SqlCall) selectItem).operand(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,797,Clause maxClause = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,798,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,799,if (maxClause == null || clause.ordinal() > maxClause.ordinal()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,800,maxClause = clause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,803,assert maxClause != null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,804,return maxClause;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,116,jdbcImplementor.visitChild(0, getInput());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTableScan.java,66,planner.addRule(CassandraToEnumerableConverterRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,23,import org.apache.calcite.rel.rules.FilterSetOpTransposeRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,24,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,69,planner.addRule(FilterSetOpTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,70,planner.addRule(ProjectRemoveRule.INSTANCE);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,114,ImmutableList.of(
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,115,NoneToBindableConverterRule.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,31,import org.apache.calcite.rel.rules.CalcSplitRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,32,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,33,import org.apache.calcite.rel.rules.ProjectTableScanRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,28,import org.apache.calcite.rel.rules.AggregateFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,29,import org.apache.calcite.rel.rules.AggregateProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,30,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,31,import org.apache.calcite.rel.rules.JoinProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,32,import org.apache.calcite.rel.rules.ProjectFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,33,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,203,ImmutableList.of(ProjectFilterTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,204,AggregateProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,205,AggregateFilterTransposeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,270,ImmutableList.of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,271,JoinProjectTransposeRule.RIGHT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,272,JoinProjectTransposeRule.LEFT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,273,FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,274,ProjectMergeRule.INSTANCE),
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,163,public boolean isDistinct() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,168,public boolean isKey(ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,182,public final RelOptQuery getQuery() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,207,public boolean isValid(boolean fail) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,239,public final double getRows() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,247,public final Set<String> getVariablesStopped() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,279,public final RelOptCost computeSelfCost(RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,80,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, true,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,81,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,86,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,87,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,57,new AggregateFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,59,private AggregateFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,67,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,68,RelFactories.LOGICAL_BUILDER, false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,72,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,73,RelFactories.LOGICAL_BUILDER, true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,52,new AggregateProjectMergeRule(Aggregate.class, Project.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,67,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,68,LogicalProject.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,73,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,74,RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,88,new AggregateReduceFunctionsRule(operand(LogicalAggregate.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,89,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,23,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,32,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,60,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,62,some(operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,66,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,68,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,69,operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,72,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,73,final Project project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,74,final StarTable.StarTableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,75,final RelNode rel =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,76,AggregateProjectMergeRule.apply(call, aggregate, project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,77,final Aggregate aggregate2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,78,final Project project2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,79,if (rel instanceof Aggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,80,project2 = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,81,aggregate2 = (Aggregate) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,83,project2 = (Project) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,84,aggregate2 = (Aggregate) project2.getInput();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,86,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,88,apply(call, project2, aggregate2, scan);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,25,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,26,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,43,new AggregateUnionAggregateRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,28,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,55,new AggregateUnionTransposeRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,56,LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,43,new CalcSplitRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,52,new FilterAggregateTransposeRule(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,53,RelFactories.LOGICAL_BUILDER, Aggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,45,new FilterCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,61,new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,68,new FilterIntoJoinRule(false, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,37,new FilterMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,47,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,42,new FilterSetOpTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,65,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,66,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,69,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,70,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,71,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,72,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,78,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,79,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,80,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,83,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,84,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,85,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,86,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,57,public static final JoinCommuteRule INSTANCE = new JoinCommuteRule(false);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,60,public static final JoinCommuteRule SWAP_OUTER = new JoinCommuteRule(true);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,75,private JoinCommuteRule(boolean swapOuter) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,25,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,61,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,62,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,63,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,64,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,68,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,69,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,70,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,74,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,75,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,76,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,77,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,78,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,82,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,83,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,84,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,85,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,87,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,90,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,91,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,92,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,94,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,97,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,98,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,99,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,100,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,101,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,103,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,41,new JoinPushExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,45,new JoinPushTransitivePredicatesRule(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,25,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,37,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,38,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,39,operand(Union.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,40,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,44,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,45,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,46,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,47,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,72,new LoptOptimizeJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,31,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,48,new MaterializedViewFilterScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,70,new MultiJoinOptimizeBushyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,25,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,26,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,37,new ProjectMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,61,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,62,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,66,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,67,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,68,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,74,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,75,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,76,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,80,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,81,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,82,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,31,import org.apache.calcite.rel.logical.LogicalCalc;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,32,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,33,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,103,public static final ReduceExpressionsRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,57,new SemiJoinProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,64,private SemiJoinProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalSort;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,46,new SortJoinTransposeRule(LogicalSort.class,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,42,public static final SortUnionTransposeRule INSTANCE = new SortUnionTransposeRule(false);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,48,public static final SortUnionTransposeRule MATCH_NULL_FETCH = new SortUnionTransposeRule(true);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,56,private SortUnionTransposeRule(boolean matchNullFetch) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,22,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,24,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,37,new UnionToDistinctRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,70,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,71,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,74,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,75,LogicalFilter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,76,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,77,apply(call, null, filter, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,86,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,87,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,91,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,92,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,93,apply(call, project, null, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,102,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,103,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,104,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,107,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,108,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,109,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,110,LogicalValues values = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,111,apply(call, project, filter, values);
core/src/main/java/org/apache/calcite/tools/Programs.java,38,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,39,import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,40,import org.apache.calcite.rel.rules.AggregateStarTableRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,42,import org.apache.calcite.rel.rules.FilterAggregateTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,44,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,45,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,46,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,48,import org.apache.calcite.rel.rules.JoinAssociateRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,49,import org.apache.calcite.rel.rules.JoinCommuteRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,51,import org.apache.calcite.rel.rules.JoinToMultiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,52,import org.apache.calcite.rel.rules.LoptOptimizeJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,53,import org.apache.calcite.rel.rules.MultiJoinOptimizeBushyRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,55,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,57,import org.apache.calcite.rel.rules.SemiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,58,import org.apache.calcite.rel.rules.SortProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,59,import org.apache.calcite.rel.rules.SubQueryRemoveRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,131,? JoinAssociateRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,132,: ProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,133,AggregateStarTableRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,134,AggregateStarTableRule.INSTANCE2,
core/src/main/java/org/apache/calcite/tools/Programs.java,135,FilterTableScanRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,136,FilterProjectTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,137,FilterJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,138,AggregateExpandDistinctAggregatesRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,139,AggregateReduceFunctionsRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,140,FilterAggregateTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,141,JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,144,SortProjectTransposeRule.INSTANCE);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,79,planner.addRule(CsvProjectTableScanRule.INSTANCE);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,49,import org.apache.calcite.rel.rules.FilterToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,50,import org.apache.calcite.rel.rules.ProjectToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,89,ProjectToCalcRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,90,FilterToCalcRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,182,private static String literalValue(RexLiteral literal) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,183,Object value = literal.getValue2();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,440,final SimpleDateFormat format =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,441,new SimpleDateFormat(
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,221,map.put("agg", toJson(node.getAggregation()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,227,return type.isNullable() ? Integer.class : int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,229,return type.isNullable() ? Long.class : long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,34,AND,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,37,OR,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,40,NOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,22,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,76,import static org.apache.calcite.linq4j.tree.ExpressionType.AndAlso;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,85,import static org.apache.calcite.linq4j.tree.ExpressionType.Not;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,87,import static org.apache.calcite.linq4j.tree.ExpressionType.OrElse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,95,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.CASE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,193,private final Map<SqlOperator, CallImplementor> map = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,200,defineMethod(ROW, BuiltInMethod.ARRAY.method, NullPolicy.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,215,final TrimImplementor trimImplementor = new TrimImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,216,defineImplementor(TRIM, NullPolicy.STRICT, trimImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,219,defineBinary(AND, AndAlso, NullPolicy.AND, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,220,defineBinary(OR, OrElse, NullPolicy.OR, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,221,defineUnary(NOT, Not, NullPolicy.NOT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,249,defineImplementor(DATETIME_PLUS, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,250,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,251,defineImplementor(MINUS_DATE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,252,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,255,defineImplementor(FLOOR, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,258,BuiltInMethod.UNIX_DATE_FLOOR.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,259,defineImplementor(CEIL, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,262,BuiltInMethod.UNIX_DATE_CEIL.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,264,map.put(IS_NULL, new IsXxxImplementor(null, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,265,map.put(IS_NOT_NULL, new IsXxxImplementor(null, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,266,map.put(IS_TRUE, new IsXxxImplementor(true, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,267,map.put(IS_NOT_TRUE, new IsXxxImplementor(true, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,268,map.put(IS_FALSE, new IsXxxImplementor(false, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,269,map.put(IS_NOT_FALSE, new IsXxxImplementor(false, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,273,new MethodImplementor(BuiltInMethod.LIKE.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,274,defineImplementor(LIKE, NullPolicy.STRICT, likeImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,275,defineImplementor(NOT_LIKE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,276,NotImplementor.of(likeImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,278,new MethodImplementor(BuiltInMethod.SIMILAR.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,279,defineImplementor(SIMILAR_TO, NullPolicy.STRICT, similarImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,280,defineImplementor(NOT_SIMILAR_TO, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,281,NotImplementor.of(similarImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,289,map.put(CASE, new CaseImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,291,map.put(CAST, new CastOptimizedImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,293,defineImplementor(REINTERPRET, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,294,new ReinterpretImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,296,final CallImplementor value = new ValueConstructorImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,376,private void defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,377,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,378,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,379,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,380,boolean harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,381,CallImplementor callImplementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,382,createImplementor(implementor, nullPolicy, harmonize);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,383,map.put(operator, callImplementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,386,private static RexCall call2(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,387,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,388,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,389,RexCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,390,if (!harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,391,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,393,final List<RexNode> operands2 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,394,harmonize(translator, call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,395,if (operands2.equals(call.getOperands())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,396,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,398,return call.clone(call.getType(), operands2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,405,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,406,case ANY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,407,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,416,case AND:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,418,if (nullAs == NullAs.FALSE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,419,nullPolicy2 = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,466,case OR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,511,case NOT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,515,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,516,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,517,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,518,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,519,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,520,return Expressions.call(BuiltInMethod.NOT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,521,translator.translateList(call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,522,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,523,return Expressions.not(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,524,translator.translate(call.getOperands().get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,525,negate(nullAs)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,529,private NullAs negate(NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,530,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,531,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,532,return NullAs.TRUE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,533,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,534,return NullAs.FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,535,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,536,return nullAs;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,540,case NONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,549,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,550,throw new AssertionError(nullPolicy);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,554,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,555,SqlOperator operator, String functionName, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,556,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,557,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,558,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,559,new MethodNameImplementor(functionName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,560,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,563,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,564,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,565,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,566,operator, nullPolicy, new MethodImplementor(method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,569,private void defineUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,570,SqlOperator operator, ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,571,NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,572,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,573,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,574,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,575,new UnaryImplementor(expressionType), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,578,private void defineBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,579,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,580,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,581,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,582,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,583,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,584,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,585,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,586,new BinaryImplementor(expressionType, backupMethodName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,587,true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,590,public static final RexImpTable INSTANCE = new RexImpTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,592,public CallImplementor get(final SqlOperator operator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,600,return ((ImplementableFunction) udf).getImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,634,static Expression maybeNegate(boolean negate, Expression expression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,635,if (!negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,636,return expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,638,return Expressions.not(expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,653,Expressions.equal(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,654,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,655,NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,661,private static boolean nullable(RexCall call, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,662,return call.getOperands().get(i).getType().isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,666,private static List<RexNode> harmonize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,667,final RexToLixTranslator translator, final List<RexNode> operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,668,int nullCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,669,final List<RelDataType> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,670,final RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,671,translator.builder.getTypeFactory();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,672,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,673,RelDataType type = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,674,type = toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,675,if (translator.isNullable(operand)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,676,++nullCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,678,type = typeFactory.createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,680,types.add(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,682,if (allSame(types)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,685,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,687,final RelDataType type = typeFactory.leastRestrictive(types);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,688,if (type == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,692,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,694,assert (nullCount > 0) == type.isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,695,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,696,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,697,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,698,translator.builder.ensureType(type, operand, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,700,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,727,private static Expression implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,728,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,729,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,730,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,731,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,732,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,733,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,734,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,735,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,739,return Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,740,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,741,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,743,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,744,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,748,return Expressions.foldOr(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,749,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,750,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,752,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,754,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,755,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,756,return implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,757,translator, call2, nullAs, nullPolicy, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,759,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,760,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,761,throw e;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,762,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,763,return FALSE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,764,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,765,return TRUE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,766,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,767,return NULL_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,772,private static Expression implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,773,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,774,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,775,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,776,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,777,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,778,final List<Expression> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,779,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,780,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,783,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,784,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,785,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,786,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,787,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,790,final Expression box =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,791,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,792,implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,793,return optimize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,794,Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,795,Expressions.foldOr(list),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,797,box));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,798,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,801,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,802,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,803,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,804,operand.e, NullAs.IS_NOT_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,805,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,808,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,809,return Expressions.foldAnd(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,810,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,813,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,814,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,815,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,816,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,817,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,820,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,821,return Expressions.foldOr(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,822,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,829,final Map<RexNode, Boolean> nullable = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,833,for (RexNode arg : call.getOperands()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,834,if (translator.isNullable(arg) && !nullable.containsKey(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,835,nullable.put(arg, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,839,nullable.put(call, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,840,translator = translator.setNullable(nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,842,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,843,return implementCall(translator, call, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,847,private static Expression implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,849,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,850,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,853,translator.translateList(call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,854,Expression result =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,855,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,914,x,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,924,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,925,BuiltInMethod.IS_TRUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,926,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,928,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,929,BuiltInMethod.IS_NOT_FALSE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,930,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1443,private static class TrimImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1444,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1445,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1446,final Object value =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1447,((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1457,translatedOperands.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1469,super(methodName);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1474,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1475,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1483,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1498,final ConstantExpression tur =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1499,(ConstantExpression) translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1500,final TimeUnitRange timeUnitRange = (TimeUnitRange) tur.value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1524,private static class MethodImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1527,MethodImplementor(Method method) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1531,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1532,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1533,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1534,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1568,private static class MethodNameImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1571,MethodNameImplementor(String methodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1575,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1576,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1577,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1578,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1582,translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1587,private static class BinaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1610,BinaryImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1611,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1612,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1617,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1618,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1619,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1620,List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1643,expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1652,private static class UnaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1655,UnaryImplementor(ExpressionType expressionType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1659,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1660,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1661,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1662,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1670,private static class CaseImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1671,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1672,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1673,return implementRecurse(translator, call, nullAs, 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1676,private Expression implementRecurse(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1677,RexCall call, NullAs nullAs, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1678,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1679,if (i == operands.size() - 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1681,return translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1682,translator.builder.ensureType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1683,call.getType(), operands.get(i), false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1685,Expression ifTrue;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1686,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1687,ifTrue = translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1688,translator.builder.ensureType(call.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1689,operands.get(i + 1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1690,false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1692,ifTrue = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1695,Expression ifFalse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1696,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1697,ifFalse = implementRecurse(translator, call, nullAs, i + 2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1699,if (ifTrue == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1700,throw RexToLixTranslator.AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1702,ifFalse = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1705,Expression test = translator.translate(operands.get(i), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1707,return ifTrue == null || ifFalse == null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1709,: Expressions.condition(test, ifTrue, ifFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1716,private static class CastOptimizedImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1717,private final CallImplementor accurate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1719,private CastOptimizedImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1720,accurate = createImplementor(new CastImplementor(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1721,NullPolicy.STRICT, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1724,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1725,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1728,if (call.getType().equals(arg.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1730,return translator.translate(arg, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1734,&& nullAs == NullAs.NULL
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1738,translator.typeFactory, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1740,return accurate.implement(translator, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1745,private static class CastImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1746,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1747,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1748,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1749,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1750,assert call.getOperands().size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1751,final RelDataType sourceType = call.getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1756,final boolean nullable =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1759,&& !Primitive.is(translatedOperands.get(0).getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1761,translator.nullifyType(call.getType(), nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1763,targetType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1764,translatedOperands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1769,private static class ReinterpretImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1770,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1771,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1772,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1773,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1775,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1781,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1782,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1783,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1784,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1785,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1786,return translator.translateConstructor(call.getOperands(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1787,call.getOperator().getKind());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1792,private static class ItemImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1793,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1794,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1795,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1796,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1797,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1799,getImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1800,call.getOperands().get(0).getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1809,return new MethodImplementor(BuiltInMethod.ARRAY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1811,return new MethodImplementor(BuiltInMethod.MAP_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1813,return new MethodImplementor(BuiltInMethod.ANY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1823,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1824,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1825,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1826,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1827,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1828,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1829,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1830,return Expressions.constant(false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1831,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1832,return Expressions.constant(true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1871,private static class IsXxxImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1872,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1873,private final Boolean seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1874,private final boolean negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1877,this.seek = seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1878,this.negate = negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1881,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1882,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1883,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1884,assert operands.size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1885,if (seek == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1886,return translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1887,negate ? NullAs.IS_NOT_NULL : NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1889,return maybeNegate(negate == seek,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1890,translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1891,seek ? NullAs.FALSE : NullAs.TRUE));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1897,private static class NotImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1898,private final NotNullImplementor implementor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1904,private static NotNullImplementor of(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1908,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1909,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1910,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1911,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1913,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1920,implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1921,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1922,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1925,Expression trop1 = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,33,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,46,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,54,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,62,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,63,import java.util.LinkedHashMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,77,public class RexToLixTranslator {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,97,private final Map<? extends RexNode, Boolean> exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,98,private final RexToLixTranslator parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,148,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,150,RexToLixTranslator parent,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,222,Expression expression = translate0(expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,224,assert expression != null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,225,return list.append("v", expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,428,private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,429,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,430,if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,431,nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,433,switch (expr.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,471,case LOCAL_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,472,return translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,473,deref(expr),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,474,nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,475,storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,476,case LITERAL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,477,return translateLiteral(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,478,(RexLiteral) expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,479,nullifyType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,480,expr.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,482,&& nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,483,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,484,nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,485,case DYNAMIC_PARAM:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,486,return translateParameter((RexDynamicParam) expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,487,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,488,throw new RuntimeException("Cannot translate " + expr + ". Correlated"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,489,+ " variables should always be referenced by field access");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,491,RexFieldAccess fieldAccess = (RexFieldAccess) expr;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,492,RexNode target = deref(fieldAccess.getReferenceExpr());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,505,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,506,if (expr instanceof RexCall) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,507,return translateCall((RexCall) expr, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,509,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,528,private Expression translateCall(RexCall call, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,529,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,530,CallImplementor implementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,531,RexImpTable.INSTANCE.get(operator);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,532,if (implementor == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,533,throw new RuntimeException("cannot translate call " + call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,535,return implementor.implement(this, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,539,private Expression translateParameter(RexDynamicParam expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,540,RexImpTable.NullAs nullAs, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,541,if (storageType == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,542,storageType = typeFactory.getJavaClass(expr.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,544,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,546,Expressions.call(root, BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,547,Expressions.constant("?" + expr.getIndex())),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,548,storageType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,571,throw AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,904,public Expression translateConstructor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,905,List<RexNode> operandList, SqlKind kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,906,switch (kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,907,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,908,Expression map =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,909,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,911,Expressions.new_(LinkedHashMap.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,912,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,913,for (int i = 0; i < operandList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,914,RexNode key = operandList.get(i++);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,915,RexNode value = operandList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,916,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,917,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,918,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,919,map,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,920,BuiltInMethod.MAP_PUT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,921,Expressions.box(translate(key)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,922,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,924,return map;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,925,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,926,Expression lyst =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,927,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,929,Expressions.new_(ArrayList.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,930,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,931,for (RexNode value : operandList) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,932,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,933,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,934,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,935,lyst,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,936,BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,937,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,939,return lyst;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,940,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,941,throw new AssertionError("unexpected: " + kind);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,957,if (!e.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,958,return false;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,960,final Boolean b = isKnownNullable(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,961,return b == null || b;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,970,protected Boolean isKnownNullable(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,971,if (!exprNullableMap.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,972,Boolean nullable = exprNullableMap.get(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,973,if (nullable != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,974,return nullable;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,977,return parent == null ? null : parent.isKnownNullable(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,982,public RexToLixTranslator setNullable(RexNode e, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,983,return setNullable(Collections.singletonMap(e, nullable));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,990,if (nullable == null || nullable.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,991,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,993,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1014,public RelDataType nullifyType(RelDataType type, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1015,if (!nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1016,final Primitive primitive = javaPrimitive(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1017,if (primitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1018,return typeFactory.createJavaType(primitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1021,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1024,private Primitive javaPrimitive(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1025,if (type instanceof RelDataTypeFactoryImpl.JavaType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1026,return Primitive.ofBox(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1027,((RelDataTypeFactoryImpl.JavaType) type).getJavaClass());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1029,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1070,static class AlwaysNull extends ControlFlowException {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1072,public static final AlwaysNull INSTANCE = new AlwaysNull();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1074,private AlwaysNull() {}
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,19,import org.apache.calcite.runtime.FlatLists;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,41,private final String string;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,58,this.string = computeString();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,472,List<RelTrait> newTraits;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,473,switch (traits.length) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,474,case 0:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,475,newTraits = ImmutableList.of(canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,476,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,477,case 1:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,478,newTraits = FlatLists.of(traits[0], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,479,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,480,case 2:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,481,newTraits = FlatLists.of(traits[0], traits[1], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,482,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,483,default:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,485,.add(canonizedTrait).build();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,487,return cache.getOrAdd(newTraits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,548,RelTraitSet getOrAdd(List<RelTrait> traits) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,549,RelTraitSet traitSet1 = map.get(traits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,550,if (traitSet1 != null) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,551,return traitSet1;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,555,map.put(traits, traitSet);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,556,return traitSet;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,52,return index
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,54,^ type.hashCode();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,105,fieldCounts.add(elementType.getFieldCount());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,106,inputTypes.add(FlatProductInputType.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,114,final Expression lambda =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,115,Expressions.call(BuiltInMethod.FLAT_PRODUCT.method,
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,94,SqlWindow w = validator.resolveWindow(window, scope, false);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,522,SqlWindow win = validator.resolveWindow(this, operandScope, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2535,public boolean isAggregate(SqlNode selectNode) {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,65,connector.setSoLingerTime(-1);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,388,return dummyProject(fieldCount, newInput);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,415,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,437,relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of("DUMMY"));
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,438,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,878,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,59,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,76,origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,79,origProj = null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,82,RelNode rel = filter.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,83,RexNode origFilter = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,86,&& RexOver.containsOver(origProj.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,95,PushProjector pushProjector =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,96,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,98,RelNode topProject = pushProjector.convertProject(null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2281,final ImmutableBitSet inputBits = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2515,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2516,pushShuttle(project).visitList(nodes, list);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2517,return list;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3448,super(true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3449,this.inputBitSet = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3450,this.extraFields = extraFields;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3464,return analyze(node).inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3474,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3478,inputBitSet.set(inputRef.getIndex());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,35,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,122,for (RexNode expr : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,123,expr.accept(vuv);
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,267,final List<RexNode> rexNodesWindow = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,268,for (RexNode rexNode : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,269,rexNodesWindow.add(rexNode.accept(shuttle));
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,271,final List<RexNode> refToWindow = toInputRefs(rexNodesWindow);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,135,.visitList(bottom, newBottomList);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,457,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,38,import org.apache.calcite.rex.RexVisitorImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,346,for (final Ord<RexNode> expr : Ord.zip(exprs)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,347,expr.e.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,348,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,349,public Void visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,350,graph.addEdge(localRef.getIndex(), expr.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,351,return null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,166,final List<RexNode> topProjExps = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,167,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,168,topProjExps.add(rexNode.accept(indexAdjustment));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,200,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,201,rexNode.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,221,for (Window.RexWinAggCall rexWinAggCall : group.aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,222,rexWinAggCall.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,31,public class LogicVisitor implements RexBiVisitor<Logic, Logic> {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,71,public Logic visitCall(RexCall call, Logic logic) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,108,private Logic end(RexNode node, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,115,public Logic visitInputRef(RexInputRef inputRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,116,return end(inputRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,119,public Logic visitLocalRef(RexLocalRef localRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,120,return end(localRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,123,public Logic visitLiteral(RexLiteral literal, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,124,return end(literal, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,127,public Logic visitOver(RexOver over, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,131,public Logic visitCorrelVariable(RexCorrelVariable correlVariable,
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,132,Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,133,return end(correlVariable, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,136,public Logic visitDynamicParam(RexDynamicParam dynamicParam, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,137,return end(dynamicParam, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,140,public Logic visitRangeRef(RexRangeRef rangeRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,141,return end(rangeRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,144,public Logic visitFieldAccess(RexFieldAccess fieldAccess, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,148,public Logic visitSubQuery(RexSubQuery subQuery, Logic arg) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,105,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,106,expr.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,156,public void visitList(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,157,List<? extends RexNode> exprs, List<RexNode> outExprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,158,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,159,outExprs.add(expr.accept(this));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,984,public static Iterable<RexNode> apply(Mappings.TargetMapping mapping,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,986,final RexPermuteInputsShuttle shuttle = RexPermuteInputsShuttle.of(mapping);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1236,public static Iterable<RexNode> shift(Iterable<RexNode> nodes, int offset) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1237,return new RexShiftShuttle(offset).apply(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2029,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2030,operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,61,for (RexNode partitionKey : window.partitionKeys) {
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,62,partitionKey.accept(this);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,370,ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,459,new RelOptUtil.InputFinder(inputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,460,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,462,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,561,new RelOptUtil.InputFinder(combinedInputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,562,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,564,final ImmutableBitSet fieldsUsedPlus = inputFinder.inputBitSet.build();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,47,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,155,List<String> visitList(List<RexNode> list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,156,final List<String> strings = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,157,for (RexNode node: list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,158,strings.add(node.accept(this));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,160,return strings;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,52,import java.util.ArrayList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,237,public List<String> visitList(List<RexNode> list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,239,for (RexNode node : list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,240,strings.add(node.accept(this));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,242,return strings;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1173,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1174,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1175,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1176,return getSubset(rel, traits, false);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1179,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1180,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1181,RelTraitSet traits,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1182,boolean createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1190,if (createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1191,return set.getOrCreateSubset(rel.getCluster(), traits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1609,root =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1610,set.getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1611,root.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1612,root.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1533,subset.getCluster(), subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1866,return subset;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,206,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2190,final Join originalJoin =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2191,(Join) RelFactories.DEFAULT_JOIN_FACTORY.createJoin(leftRel, rightRel,
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,65,return ImmutableNullableList.of(keywords, targetTable, source, columnList);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,89,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,75,public final class AggregateExpandDistinctAggregatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,55,public class AggregateFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,65,public class AggregateJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,50,public class AggregateProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,62,public class AggregateProjectPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,83,public class AggregateReduceFunctionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,58,public class AggregateStarTableRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,41,public class AggregateUnionAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,53,public class AggregateUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,36,public class CalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,41,public class CalcSplitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,34,public class CoerceInputsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,45,public class FilterAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,37,public class FilterCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,42,public class FilterCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,49,public abstract class FilterJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,31,public class FilterMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,39,public class FilterProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,38,public final class FilterRemoveIsNotDistinctFromRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,40,public class FilterSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,40,public class FilterTableFunctionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,43,public class FilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,37,public class JoinAddRedundantSemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,48,public class JoinAssociateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,53,public class JoinCommuteRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,57,public class JoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,38,public class JoinPushExpressionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,64,public class JoinPushThroughJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,42,public class JoinPushTransitivePredicatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,60,public class JoinToCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,103,public class JoinToMultiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,35,public class JoinUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,70,public class LoptOptimizeJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,46,public class MaterializedViewFilterScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,68,public class MultiJoinOptimizeBushyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,43,public class ProjectCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,35,public class ProjectFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,37,public class ProjectJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,39,public class ProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,35,public class ProjectMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,38,public class ProjectSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,34,public class ProjectSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,40,public class ProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,75,public abstract class ProjectToWindowRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,45,public class ProjectWindowTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,67,public class ReduceDecimalsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,38,public class SemiJoinFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,46,public class SemiJoinJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,55,public class SemiJoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,34,public class SemiJoinRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,43,public class SortJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,45,public class SortProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,32,public class SortRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,37,public class SortUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,63,public abstract class SubQueryRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,31,public class TableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,34,public class UnionMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,35,public class UnionToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,60,public abstract class ValuesReduceRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,68,public static class DeltaProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,88,public static class DeltaFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,107,public static class DeltaAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,129,public static class DeltaSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,149,public static class DeltaUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,177,public static class DeltaTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,208,public static class DeltaTableScanToEmptyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,238,public static class DeltaJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,56,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,487,if (constExps.isEmpty() && removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,495,if (!removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,497,for (RexNode exp : removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,498,RexCall call = (RexCall) exp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,499,reducedExprs.add(call.getOperands().get(0));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,501,RexReplacer replacer =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,506,Collections.nCopies(removableCasts.size(), false));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,507,replacer.mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,511,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,590,List<RexNode> constExps, List<Boolean> addCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,591,List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,594,addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,888,private final List<RexNode> removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,895,List<Boolean> addCasts, List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,902,this.removableCasts = removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1033,if (call.getOperator() == SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1034,reduceCasts(call);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1048,private void reduceCasts(RexCall outerCast) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1049,List<RexNode> operands = outerCast.getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1050,if (operands.size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1051,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1053,RelDataType outerCastType = outerCast.getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1054,RelDataType operandType = operands.get(0).getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1055,if (operandType.equals(outerCastType)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1056,removableCasts.add(outerCast);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1057,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1065,if (!(operands.get(0) instanceof RexCall)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1066,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1068,RexCall innerCast = (RexCall) operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1069,if (innerCast.getOperator() != SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1070,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1072,if (innerCast.getOperands().size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1073,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1075,RelDataType outerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1076,typeFactory.createTypeWithNullability(outerCastType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1077,RelDataType innerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1078,typeFactory.createTypeWithNullability(operandType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1079,if (outerTypeNullable != innerTypeNullable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1080,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1082,if (operandType.isNullable()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1083,removableCasts.add(innerCast);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,65,ImmutableIntList list = ImmutableIntList.copyOf(numbers);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,66,if (numbers.size() > 1
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,67,&& !Ordering.natural().isOrdered(list)) {
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,68,list = ImmutableIntList.copyOf(Ordering.natural().sortedCopy(list));
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,135,return getTraitDef().canonize(
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,136,new RelDistributionImpl(type,
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,137,ImmutableIntList.copyOf(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,969,newFieldCollations.add(apply(mapping, fieldCollation));
core/src/main/java/org/apache/calcite/util/Permutation.java,418,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,419,return targets[source];
core/src/main/java/org/apache/calcite/util/Permutation.java,421,throw new Mappings.NoElementException("invalid source " + source);
core/src/main/java/org/apache/calcite/util/Permutation.java,429,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,430,return sources[target];
core/src/main/java/org/apache/calcite/util/Permutation.java,432,throw new Mappings.NoElementException("invalid target " + target);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,849,int getTarget(int target);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,24,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,25,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,26,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,27,import org.apache.calcite.rex.RexProgramBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,65,RexBuilder rexBuilder = topFilter.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,66,RexProgram bottomProgram = createProgram(bottomFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,67,RexProgram topProgram = createProgram(topFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,69,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,70,RexProgramBuilder.mergePrograms(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,71,topProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,72,bottomProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,73,rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,75,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,76,mergedProgram.expandLocalRef(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,77,mergedProgram.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,81,.filter(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,92,private RexProgram createProgram(Filter filterRel) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,93,RexProgramBuilder programBuilder =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,94,new RexProgramBuilder(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,95,filterRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,96,filterRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,97,programBuilder.addIdentity();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,98,programBuilder.addCondition(filterRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,99,return programBuilder.getProgram();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,255,planner.reregister(this, otherRel);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,220,return rexBuilder.makeInputRef(field.getType(), arg);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,81,return create(getCluster(), rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,35,LogicalValues values = (LogicalValues) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,36,return EnumerableValues.create(values.getCluster(), values.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,37,values.getTuples());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,172,call.transformTo(call.builder().push(sort).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,271,SingleRel single = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,272,call.transformTo(call.builder().push(single).empty().build());
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,70,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,71,new RelDistributionImpl(RelDistribution.Type.HASH_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,72,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,78,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,79,new RelDistributionImpl(RelDistribution.Type.RANGE_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,80,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,409,protected MulticastRelOptListener getListener() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,168,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,182,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,201,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,260,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,267,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,295,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,300,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,452,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,457,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,30,import org.apache.calcite.plan.RelOptListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,240,RelOptListener listener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1870,public void addListener(RelOptListener newListener) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1873,if (listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1874,throw Util.needToImplement("multiple VolcanoPlanner listeners");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1876,listener = newListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,119,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,126,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,138,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,145,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,199,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,206,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,226,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,233,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,179,if (withDetail) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,183,printPrecision = true;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,185,if (typeName.getDefaultScale() > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,186,printScale = true;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,601,MetaResultSet.create(h.connectionId, h.id, false, signature, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,38,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,39,agg.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,44,convert(agg.getInput(), EnumerableConvention.INSTANCE),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,38,final RelTraitSet traitSet = union.getTraitSet().replace(out);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,40,convertList(union.getInputs(), out), union.all);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,146,final RelSubset subset = getOrCreateSubset(rel.getCluster(), traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,152,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,153,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,158,final VolcanoPlanner planner =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,159,(VolcanoPlanner) cluster.getPlanner();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,246,RelSubset subset =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,247,getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,248,otherSubset.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,249,otherSubset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,98,boolean boosted;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,108,this.boosted = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,741,return rel2.set.getOrCreateSubset(rel.getCluster(), toTraits.simplify());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,39,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,118,RexNode condition = variableReplacer.go(oldCondition);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,184,private static class VariableReplacer {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,198,public RexNode go(RexNode rex) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,199,if (rex instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,200,ImmutableList.Builder<RexNode> builder =
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,201,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,202,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,203,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,204,builder.add(go(operand));
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,206,return call.clone(call.getType(), builder.build());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,208,RexInputRef var = (RexInputRef) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,209,int index = var.getIndex();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,210,if (index < leftFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,212,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,213,leftFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,214,rightFields.size() + index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,216,index -= leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,217,if (index < rightFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,219,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,220,rightFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,221,index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,226,+ ", rightFieldCount=" + rightFields.size());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,228,return rex;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,444,routines = filterRoutinesByTypePrecedence(sqlSyntax, routines, argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,513,private static Iterator<SqlOperator> filterRoutinesByParameterType(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,579,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,590,final RelDataType bestMatch = bestMatch(sqlFunctions, argType.i, precList);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,612,RelDataTypePrecedenceList precList) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,619,final RelDataType paramType = paramTypes.get(i);
core/src/main/java/org/apache/calcite/rel/core/Window.java,233,assert orderKeys != null : "precondition: ordinals != null";
core/src/main/java/org/apache/calcite/rel/core/Window.java,234,assert keys != null;
core/src/main/java/org/apache/calcite/rel/core/Window.java,235,this.keys = keys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,237,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,238,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,239,this.orderKeys = orderKeys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,249,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/rel/core/Window.java,250,buf.append("window(partition ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,251,buf.append(keys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,252,buf.append(" order by ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,253,buf.append(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,254,buf.append(isRows ? " rows " : " range ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,255,if (lowerBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,256,if (upperBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,257,buf.append("between ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,258,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,259,buf.append(" and ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,260,buf.append(upperBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,262,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,267,buf.append(" aggs ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,268,buf.append(aggCalls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,327,RelDataType type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,328,SqlAggFunction operator,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,329,List<RexNode> exprs,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,330,List<RexNode> partitionKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,331,ImmutableList<RexFieldCollation> orderKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,332,RexWindowBound lowerBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,333,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,334,boolean physical,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,337,assert operator != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,338,assert exprs != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,339,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,340,assert orderKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,347,physical);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,416,boolean isRows) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,422,isRows);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,65,RexWindowBound lowerBound = window.getLowerBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,66,RexWindowBound upperBound = window.getUpperBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,67,if (update[0]
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,69,|| (upperBound != window.getUpperBound() && upperBound != null)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,70,return new RexWindow(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,71,clonedPartitionKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,72,clonedOrderKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,73,lowerBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,74,upperBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,75,window.isRows());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,21,import java.io.PrintWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,22,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,59,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,60,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,84,StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/rex/RexWindow.java,85,PrintWriter pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,86,int clauseCount = 0;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,88,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,89,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,91,pw.print("PARTITION BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,94,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,96,RexNode partitionKey = partitionKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,97,pw.print(partitionKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,101,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,102,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,104,pw.print("ORDER BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,107,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,109,RexFieldCollation orderKey = orderKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,110,pw.print(orderKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,113,if (lowerBound == null) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,116,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,117,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,119,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,120,pw.print("ROWS ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,122,pw.print("RANGE ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,124,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,126,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,127,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,129,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,130,pw.print("ROWS BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,132,pw.print("RANGE BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,134,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,135,pw.print(" AND ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,136,pw.print(upperBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,138,return sw.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,19,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,20,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,22,import org.apache.calcite.sql.SqlWindow;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,38,|| SqlWindow.isUnboundedFollowing(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,39,return new RexWindowBoundUnbounded(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,41,if (SqlWindow.isCurrentRow(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,42,return new RexWindowBoundCurrentRow();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,44,return new RexWindowBoundBounded(rexNode);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,109,private static class RexWindowBoundUnbounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,110,private final SqlNode node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,113,this.node = node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,117,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,121,return SqlWindow.isUnboundedPreceding(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,125,return SqlWindow.isUnboundedFollowing(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,129,return ((SqlLiteral) node).getValue().toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,133,return isPreceding() ? 0 : 2;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,137,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,138,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,140,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,141,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,144,RexWindowBoundUnbounded that = (RexWindowBoundUnbounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,146,if (!node.equals(that.node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,147,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,150,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,154,return node.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,161,private static class RexWindowBoundCurrentRow extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,163,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,167,return "CURRENT ROW";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,171,return 1;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,175,return getClass() == obj.getClass();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,179,return 123;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,186,private static class RexWindowBoundBounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,187,private final SqlKind sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,188,private final RexNode offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,191,assert node instanceof RexCall
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,192,: "RexWindowBoundBounded window bound should be either 'X preceding'"
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,193,+ " or 'X following' call. Actual type is " + node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,194,RexCall call = (RexCall) node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,195,this.offset = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,196,this.sqlKind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,197,assert this.offset != null
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,198,: "RexWindowBoundBounded offset should not be null";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,201,private RexWindowBoundBounded(SqlKind sqlKind, RexNode offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,202,this.sqlKind = sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,203,this.offset = offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,207,return sqlKind == SqlKind.PRECEDING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,211,return sqlKind == SqlKind.FOLLOWING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,215,return offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,219,R r = offset.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,220,if (r instanceof RexNode && r != offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,221,return new RexWindowBoundBounded(sqlKind, (RexNode) r);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,223,return this;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,227,return offset.toString() + " " + sqlKind.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,231,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,232,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,234,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,235,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,238,RexWindowBoundBounded that = (RexWindowBoundBounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,240,if (!offset.equals(that.offset)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,241,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,243,if (sqlKind != that.sqlKind) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,244,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,247,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,251,int result = sqlKind.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,252,result = 31 * result + offset.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,253,return result;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,233,final SqlWindow tmp;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,234,if (lowerBound == null || upperBound == null) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,236,tmp = new SqlWindow(getParserPosition(), null, null, partitionList,
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,237,orderList, isRows, lowerBound, upperBound, allowPartial);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,238,tmp.populateBounds();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,240,tmp = this;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,242,if (tmp.lowerBound instanceof SqlLiteral
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,243,&& tmp.upperBound instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,244,int lowerKey = RexWindowBound.create(tmp.lowerBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,245,int upperKey = RexWindowBound.create(tmp.upperBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,246,return lowerKey > -1 && lowerKey <= upperKey;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,248,return false;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,755,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,756,SqlWindow.createUnboundedPreceding(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,759,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,760,SqlWindow.createCurrentRow(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,763,SqlParserPos pos = orderList.getParserPosition();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,764,setUpperBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,765,orderList.size() == 0
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,767,: SqlWindow.createCurrentRow(pos));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,373,SqlWindow resolveWindow(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,376,boolean populateBounds);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4008,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4009,boolean populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4029,if (populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4030,window.populateBounds();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1837,validator.resolveWindow(windowOrRef, bb.scope, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1840,if (aggCall.getKind() == SqlKind.ROW_NUMBER) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1841,window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1842,window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1843,window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1851,RexNode lowerBound = bb.convertExpression(window.getLowerBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1852,RexNode upperBound = bb.convertExpression(window.getUpperBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1853,SqlNodeList orderList = window.getOrderList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1854,if ((orderList.size() == 0) && !window.isRows()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1886,RexWindowBound.create(window.getLowerBound(), lowerBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1887,RexWindowBound.create(window.getUpperBound(), upperBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4858,private final SqlWindow window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4869,this.window = window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4923,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4924,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4963,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4964,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/rex/RexOver.java,125,public static boolean containsOver(List<RexNode> exprs, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,158,joinType.generatesNullsOnRight())))).toBlock());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,141,boolean.class, boolean.class),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3214,Function2<TSource, TInner, TResult> resultSelector) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3241,int c = leftKey.compareTo(rightKey);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3270,int c = leftKey.compareTo(leftKey2);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3286,int c = rightKey.compareTo(rightKey2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,813,return SqlStdOperatorTable.AS.createCall(POS, node,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,814,new SqlIdentifier(neededAlias, POS));
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,71,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,76,OperandTypes.COMPARABLE_ORDERED,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,976,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,987,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,993,if (s.startsWith("0")) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,259,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,260,return val; // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,262,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,263,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,264,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,265,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,266,return identifierQuoteString + val2 + identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,231,s = s.replaceAll(" ", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,232,s = s.replaceAll("\n", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,233,s = s.replaceAll("\t", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,234,s = s.replaceAll("\r", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,235,s = s.replaceAll("\f", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,236,s = s.replaceAll("'", "");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,897,String qName = name;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,900,qName = dialect.quoteIdentifier(name);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,902,maybeWhitespace(qName);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,787,sig = sig.replaceAll("'", "");
core/src/main/java/org/apache/calcite/util/BitString.java,51,assert bits.replaceAll("1", "").replaceAll("0", "").length() == 0
core/src/main/java/org/apache/calcite/util/Util.java,697,return s.replaceAll("\r\n", "\n");
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,198,private static Integer parseIntString(String valueString) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,199,return Integer.parseInt(valueString.replaceAll("[^0-9]", ""));
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,400,value = value.replaceAll("%", "*");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1504,return Expressions.call(floorMethod, tur,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,59,import org.apache.calcite.rex.RexMultisetUtil;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,85,import com.google.common.collect.LinkedHashMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,90,import com.google.common.collect.SetMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,272,private final SetMultimap<String, Class> ruleNames =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,273,LinkedHashMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,631,if (ruleNames.put(ruleName, rule.getClass())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,632,Set<Class> x = ruleNames.get(ruleName);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,633,if (x.size() > 1) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,634,throw new RuntimeException("Rule description '" + ruleName
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,635,+ "' is not unique; classes: " + x);
