File,Line_number,SRC
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,505,if (usage == null || declaration == null || declaration.length == 0) return;
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,509,for (int i = 0; i < usage.length; i++) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,54,import org.codehaus.groovy.transform.sc.StaticCompilationVisitor;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,382,StaticTypeCheckingVisitor visitor = new StaticCompilationVisitor(controller.getSourceUnit(), controller.getClassNode());
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,394,MethodCallExpression mce = new MethodCallExpression(
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,395,receiver,
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,397,ae
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,398,);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,400,visitor.visitMethodCallExpression(mce);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,623,ClassNode actualType =
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,624,findActualTypeByGenericsPlaceholderName(
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,625,fieldNode.getOriginType().getUnresolvedName(),
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,627,);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,629,if (null != actualType) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,630,storeType(vexp, actualType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,631,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1200,if (leftExpression instanceof VariableExpression
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1201,&& ((VariableExpression) leftExpression).getAccessedVariable() instanceof FieldNode) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1202,checkOrMarkPrivateAccess(leftExpression, (FieldNode) ((VariableExpression) leftExpression).getAccessedVariable(), true);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3348,private boolean isNestedOrSandwichedMethodCall() {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4515,FieldNode fieldNode = (FieldNode) variable;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4517,checkOrMarkPrivateAccess(vexp, fieldNode, isLHSOfEnclosingAssignment(vexp));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4518,return getType(fieldNode);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4589,if (exp instanceof FieldNode) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4590,FieldNode fn = (FieldNode) exp;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4591,return getGenericsResolvedTypeOfFieldOrProperty(fn, fn.getOriginType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4593,if (exp instanceof PropertyNode) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4594,PropertyNode pn = (PropertyNode) exp;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4595,return getGenericsResolvedTypeOfFieldOrProperty(pn, pn.getOriginType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4644,private ClassNode getGenericsResolvedTypeOfFieldOrProperty(AnnotatedNode an, ClassNode type) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4645,if (!type.isUsingGenerics()) return type;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4648,extractGenericsConnections(connections, typeCheckingContext.getEnclosingClassNode(), an.getDeclaringClass());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4649,type = applyGenericsContext(connections, type);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4650,return type;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4654,ClassNode ret = typeCheckingContext.getEnclosingClassNode().getSuperClass();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4655,if (typeCheckingContext.isInStaticContext) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4656,ClassNode staticRet = CLASS_Type.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4657,GenericsType gt = new GenericsType(ret);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4658,staticRet.setGenericsTypes(new GenericsType[]{gt});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4659,ret = staticRet;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4661,return ret;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4665,ClassNode ret = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4666,if (typeCheckingContext.isInStaticContext) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4667,ClassNode staticRet = CLASS_Type.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4668,GenericsType gt = new GenericsType(ret);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4669,staticRet.setGenericsTypes(new GenericsType[]{gt});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4670,ret = staticRet;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4672,return ret;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3267,if (typeCheckMethodsWithGenericsOrFail(chosenReceiver.getType(), args, mn.get(0), call)) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1245,public boolean hasPossibleMethod(String name, Expression arguments) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1246,int count = 0;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1249,TupleExpression tuple = (TupleExpression) arguments;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1251,count = tuple.getExpressions().size();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1253,ClassNode node = this;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1254,do {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1255,for (MethodNode method : getMethods(name)) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1260,node = node.getSuperClass();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1262,while (node != null);
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1266,public MethodNode tryFindPossibleMethod(String name, Expression arguments) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1267,int count = 0;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1269,if (arguments instanceof TupleExpression) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1270,TupleExpression tuple = (TupleExpression) arguments;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1272,count = tuple.getExpressions().size();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1276,MethodNode res = null;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1277,ClassNode node = this;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1279,do {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1280,for (MethodNode method : node.getMethods(name)) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1291,res = method;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1292,else {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1310,node = node.getSuperClass();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1312,while (node != null);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1666,while (count < 10000) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1667,count++;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1668,boolean checkForMorePlaceHolders = false;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1671,GenericsType replacement = connections.get(name);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1672,if (replacement == null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1673,GenericsType value = entry.getValue();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1674,GenericsType newValue = applyGenericsContext(connections, value);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1675,entry.setValue(newValue);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1676,checkForMorePlaceHolders = checkForMorePlaceHolders || !equalIncludingGenerics(value, newValue);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1677,continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1679,GenericsType original = entry.getValue();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1680,if (!original.isWildcard() && !original.isPlaceholder()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1681,continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1683,boolean placeholderReplacement = replacement.isPlaceholder();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1684,if (placeholderReplacement) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1686,if (replacement == connectedType) continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1691,ClassNode replacementType = extractType(replacement);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1692,if (original.isCompatibleWith(replacementType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1693,entry.setValue(replacement);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1694,if (placeholderReplacement) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1695,checkForMorePlaceHolders = checkForMorePlaceHolders || !equalIncludingGenerics(original, replacement);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1699,if (!checkForMorePlaceHolders) break;
src/main/java/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java,175,if (optimized!=null) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java,177,return transformBinaryExpression(optimized);
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,54,if (val == null) return null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,443,if (isNumberType(ptype) && isNumberType(arg) && !ptype.equals(arg)) return -1;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesUnaryExpressionHelper.java,74,mv.visitLdcInsn(-1);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11839,if (!mutate) {
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11840,return (T[]) toList(new ReverseListIterator<T>(Arrays.asList(self))).toArray();
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11842,List<T> items = Arrays.asList(self);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11843,Collections.reverse(items);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11844,System.arraycopy(items.toArray(), 0, self, 0, items.size());
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11845,return self;
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1140,resolveOrFail(type, cce);
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1141,if (Modifier.isAbstract(type.getModifiers())) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1142,addError("You cannot create an instance from the abstract " + getDescription(type) + ".", cce);
src/main/java/org/codehaus/groovy/ast/GenericsType.java,65,public void setType(ClassNode type) {
src/main/java/org/codehaus/groovy/ast/GenericsType.java,66,this.type = type;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4715,if (expressions.isEmpty()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4724,&& (!expressions.isEmpty())) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4726,List<ClassNode> nodes = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4734,if (nodes.isEmpty()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4736,return listType;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4738,ClassNode superType = getWrapper(lowestUpperBound(nodes)); // to be used in generics, type must be boxed
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4739,ClassNode inferred = listType.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4740,inferred.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(superType))});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4741,return inferred;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4753,if (entryExpressions.isEmpty()) return mapType;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4758,List<ClassNode> keyTypes = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4759,List<ClassNode> valueTypes = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4764,ClassNode keyType = getWrapper(lowestUpperBound(keyTypes));  // to be used in generics, type must be boxed
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4765,ClassNode valueType = getWrapper(lowestUpperBound(valueTypes));  // to be used in generics, type must be boxed
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4767,ClassNode inferred = mapType.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4768,inferred.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(keyType)), new GenericsType(wrapTypeIfNecessary(valueType))});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4769,return inferred;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1019,if (isSuperExpression(objectExpression)) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,2192,private static boolean isSuperExpression(Expression expression) {
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,135,ClassNode cn = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,136,if (controller.isInClosure() && !implicitThis && AsmClassGenerator.isThisExpression(receiver)) cn=cn.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,137,makeCall(origin, new ClassExpression(cn), receiver, message, arguments,
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,138,adapter, safe, spreadSafe, implicitThis);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,722,super.visitAttributeExpression(expression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,725,addStaticTypeError("No such property: " + expression.getPropertyAsString() +
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1370,final ClassNode objectExpressionType = getType(objectExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1376,List<ClassNode> candidates = typeCheckingContext.getEnclosingClassNodes();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1378,for (ClassNode current : candidates) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1408,ClassNode testClass = receiver.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1410,queue.add(testClass);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1411,if (isPrimitiveType(testClass)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1412,queue.add(getWrapper(testClass));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1416,if (handledNodes.contains(current)) continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1417,handledNodes.add(current);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1418,Set<ClassNode> allInterfaces = current.getAllInterfaces();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1419,for (ClassNode intf : allInterfaces) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1421,queue.add(GenericsUtils.parameterizeType(current, intf));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1434,FieldNode field = current.getDeclaredField(propertyName);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1439,boolean isThisExpression = objectExpression instanceof VariableExpression
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1441,&& objectExpressionType.equals(current);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1502,foundGetterOrSetter = foundGetterOrSetter || !setters.isEmpty() || getter != null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1504,if (storeProperty(propertyNode, pexp, current, visitor, receiver.getData())) return true;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1506,if (storeField(field, true, pexp, current, visitor, receiver.getData(), !readMode)) return true;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1509,if (/*!isAttributeExpression && */current.getSuperClass() != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1510,queue.add(current.getUnresolvedSuperClass());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1515,dgmReceivers.add(testClass);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1516,if (isPrimitiveType(testClass)) dgmReceivers.add(getWrapper(testClass));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1539,ClassNode testClass = receiver.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1540,ClassNode propertyType = getTypeForMapPropertyExpression(testClass, objectExpressionType, pexp);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1542,propertyType = getTypeForListPropertyExpression(testClass, objectExpressionType, pexp);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1543,if (propertyType == null) propertyType = getTypeForSpreadExpression(testClass, objectExpressionType, pexp);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1547,PropertyNode node = new PropertyNode(propertyName, Opcodes.ACC_PUBLIC, propertyType, receiver.getType(), null, null, null);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1548,node.setDeclaringClass(receiver.getType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3110,if (objectExpression == VariableExpression.THIS_EXPRESSION) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3499,if (objectExpression == VariableExpression.THIS_EXPRESSION) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4511,if (vexp == VariableExpression.THIS_EXPRESSION) return makeThis();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4512,if (vexp == VariableExpression.SUPER_EXPRESSION) return makeSuper();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,23,import org.codehaus.groovy.ast.AnnotatedNode;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,24,import org.codehaus.groovy.ast.AnnotationNode;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,57,import java.util.List;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,58,import java.util.Map;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,67,private VariableScope currentScope = null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,68,private final VariableScope headScope = new VariableScope();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,69,private ClassNode currentClass = null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,71,private boolean isSpecialConstructorCall = false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,72,private boolean inConstructor = false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,75,private final LinkedList stateStack = new LinkedList();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,77,private class StateStackElement {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,78,final VariableScope scope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,82,StateStackElement() {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,83,scope = VariableScopeVisitor.this.currentScope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,84,clazz = VariableScopeVisitor.this.currentClass;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,85,inConstructor = VariableScopeVisitor.this.inConstructor;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,89,public VariableScopeVisitor(SourceUnit source, boolean recurseInnerClasses) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,91,currentScope = headScope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,96,public VariableScopeVisitor(SourceUnit source) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,104,private void pushState(boolean isStatic) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,105,stateStack.add(new StateStackElement());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,115,StateStackElement element = (StateStackElement) stateStack.removeLast();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,116,currentScope = element.scope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,117,currentClass = element.clazz;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,118,inConstructor = element.inConstructor;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,121,private void declare(Parameter[] parameters, ASTNode node) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,122,for (Parameter parameter : parameters) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,123,if (parameter.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,124,parameter.getInitialExpression().visit(this);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,126,declare(parameter, node);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,130,private void declare(VariableExpression vex) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,131,vex.setInStaticContext(currentScope.isInStaticContext());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,132,declare(vex, vex);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,133,vex.setAccessedVariable(vex);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,136,private void declare(Variable var, ASTNode expr) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,140,if (expr.getClass() == FieldNode.class) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,151,msg.append(" of the name ").append(var.getName());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,153,if (currentScope.getDeclaredVariable(var.getName()) != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,154,addError(msg.toString(), expr);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,164,if (scope.getDeclaredVariable(var.getName()) != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,166,addError(msg.toString(), expr);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,171,currentScope.putDeclaredVariable(var);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,174,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,175,return source;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,178,private Variable findClassMember(ClassNode cn, String name) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,179,if (cn == null) return null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,180,if (cn.isScript()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,181,return new DynamicVariable(name, false);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,184,for (FieldNode fn : cn.getFields()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,185,if (fn.getName().equals(name)) return fn;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,188,for (MethodNode mn : cn.getMethods()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,189,String pName = getPropertyName(mn);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,194,for (PropertyNode pn : cn.getProperties()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,195,if (pn.getName().equals(name)) return pn;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,223,private Variable checkVariableNameForDeclaration(String name, Expression expression) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,227,Variable var = new DynamicVariable(name, currentScope.isInStaticContext());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,228,Variable orig = var;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,232,crossingStaticContext = crossingStaticContext || scope.isInStaticContext();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,236,if (var1 != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,237,var = var1;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,241,var1 = scope.getReferencedLocalVariable(var.getName());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,242,if (var1 != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,243,var = var1;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,247,var1 = scope.getReferencedClassVariable(var.getName());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,248,if (var1 != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,249,var = var1;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,257,boolean staticScope = crossingStaticContext || isSpecialConstructorCall;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,258,boolean staticMember = member.isInStaticContext();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,262,var = member;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,268,if (var == orig && crossingStaticContext) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,269,var = new DynamicVariable(var.getName(), true);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,278,scope.putReferencedClassVariable(var);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,281,scope.putReferencedLocalVariable(var);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,286,return var;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,421,Variable v = checkVariableNameForDeclaration(name, expression);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,478,Variable v = checkVariableNameForDeclaration(name, expression);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,528,declare(node.getParameters(), node);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,544,Variable v = checkVariableNameForDeclaration(methodName, call);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,564,isSpecialConstructorCall = call.isSpecialCall();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,566,isSpecialConstructorCall = false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,615,public void visitAnnotations(AnnotatedNode node) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,616,List<AnnotationNode> annotations = node.getAnnotations();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,617,if (annotations.isEmpty()) return;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,618,for (AnnotationNode an : annotations) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,620,if (an.isBuiltIn()) continue;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,621,for (Map.Entry<String, Expression> member : an.getMembers().entrySet()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,622,Expression annMemberValue = member.getValue();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,623,annMemberValue.visit(this);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,484,private void checkOrMarkPrivateAccess(Expression source, FieldNode fn, boolean lhsOfAssignment) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,647,if (stcsw.makeGetField(receiver, typeChooser.resolveType(receiver, controller.getClassNode()), pname, safe, false, true)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,99,private static final ClassNode INVOKERHELPER_TYPE = ClassHelper.make(InvokerHelper.class);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,100,private static final MethodNode GROOVYOBJECT_GETPROPERTY_METHOD = GROOVY_OBJECT_TYPE.getMethod("getProperty", new Parameter[]{new Parameter(STRING_TYPE, "propertyName")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,101,private static final MethodNode INVOKERHELPER_GETPROPERTY_METHOD = INVOKERHELPER_TYPE.getMethod("getProperty", new Parameter[]{new Parameter(OBJECT_TYPE, "object"), new Parameter(STRING_TYPE, "propertyName")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,102,private static final MethodNode INVOKERHELPER_GETPROPERTYSAFE_METHOD = INVOKERHELPER_TYPE.getMethod("getPropertySafe", new Parameter[]{new Parameter(OBJECT_TYPE, "object"), new Parameter(STRING_TYPE, "propertyName")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,103,private static final MethodNode CLOSURE_GETTHISOBJECT_METHOD = CLOSURE_TYPE.getMethod("getThisObject", Parameter.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,106,private static final MethodNode MAP_GET_METHOD = MAP_TYPE.getMethod("get", new Parameter[] { new Parameter(OBJECT_TYPE, "key")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,197,if (makeGetField(receiver, receiverType, methodName, safe, implicitThis, samePackages(receiverType.getPackageName(), classNode.getPackageName()))) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,199,if (makeGetField(receiver, receiver.getType(), methodName, safe, implicitThis, samePackages(receiver.getType().getPackageName(), classNode.getPackageName()))) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,206,if (makeGetField(receiver, CLASS_Type, methodName, safe, false, true)) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,490,if (makeGetField(receiver, receiverType, property, safe, implicitThis, samePackages(receiverType.getPackageName(), classNode.getPackageName()))) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,575,boolean makeGetField(final Expression receiver, final ClassNode receiverType, final String fieldName, final boolean safe, final boolean implicitThis, final boolean samePackage) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,579,if (field !=null
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,580,&& isDirectAccessAllowed(field, controller.getClassNode(), samePackage)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,623,if (intf!=receiverType && makeGetField(receiver, intf, fieldName, safe, implicitThis, false)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,629,if (superClass !=null) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,630,return makeGetField(receiver, superClass, fieldName, safe, implicitThis, false);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,925,ClassNode classNode = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,929,if (makeGetField(receiver, receiverType, name, safe, implicitThis, samePackages(receiverType.getPackageName(), classNode.getPackageName()))) return true;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,931,if (makeGetField(receiver, receiver.getType(), name, safe, implicitThis, samePackages(receiver.getType().getPackageName(), classNode.getPackageName()))) return true;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,941,if (isClassReceiver && makeGetField(receiver, CLASS_Type, name, safe, false, true)) return true;
src/main/groovy/groovy/lang/MetaClassImpl.java,920,if (!isCallToSuper) {
src/main/groovy/groovy/lang/MetaClassImpl.java,921,Class instanceKlazz = instance.getClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,923,instanceKlazz = theClass;
src/main/groovy/groovy/lang/MetaClassImpl.java,925,Class[] argClasses = MetaClassHelper.castArgumentsToClassArray(arguments);
src/main/groovy/groovy/lang/MetaClassImpl.java,927,MetaMethod method = findMixinMethod(methodName, argClasses);
src/main/groovy/groovy/lang/MetaClassImpl.java,928,if(method != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,929,onMixinMethodFound(method);
src/main/groovy/groovy/lang/MetaClassImpl.java,930,return method.invoke(instance, arguments);
src/main/groovy/groovy/lang/MetaClassImpl.java,933,method = findMethodInClassHierarchy(instanceKlazz, methodName, argClasses, this);
src/main/groovy/groovy/lang/MetaClassImpl.java,934,if(method != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,935,onSuperMethodFoundInHierarchy(method);
src/main/groovy/groovy/lang/MetaClassImpl.java,936,return method.invoke(instance, arguments);
src/main/groovy/groovy/lang/MetaClassImpl.java,940,final Class[] invokeMethodArgs = {String.class, Object[].class};
src/main/groovy/groovy/lang/MetaClassImpl.java,941,method = findMethodInClassHierarchy(instanceKlazz, INVOKE_METHOD_METHOD, invokeMethodArgs, this );
src/main/groovy/groovy/lang/MetaClassImpl.java,942,if(method instanceof ClosureMetaMethod) {
src/main/groovy/groovy/lang/MetaClassImpl.java,943,onInvokeMethodFoundInHierarchy(method);
src/main/groovy/groovy/lang/MetaClassImpl.java,944,return method.invoke(instance, invokeMethodArgs);
src/main/groovy/groovy/lang/MetaClassImpl.java,948,if (method == null && GroovyCategorySupport.hasCategoryInCurrentThread()) {
src/main/groovy/groovy/lang/MetaClassImpl.java,949,method = getCategoryMethodMissing(instanceKlazz);
src/main/groovy/groovy/lang/MetaClassImpl.java,950,if (method != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,951,return method.invoke(instance, new Object[]{methodName, arguments});
src/main/groovy/groovy/lang/MetaClassImpl.java,961,MissingMethodException mme =  (MissingMethodException) iie.getCause();
src/main/groovy/groovy/lang/MetaClassImpl.java,963,mme.getArguments(),mme.isStatic(),mme);
src/main/groovy/groovy/lang/MetaClassImpl.java,969,mme.getArguments(),mme.isStatic(),mme);
src/main/groovy/groovy/lang/MetaClassImpl.java,970,else
src/main/groovy/groovy/lang/MetaClassImpl.java,974,else throw new MissingMethodExceptionNoStack(methodName, theClass, arguments, false);
src/main/groovy/groovy/lang/MetaClassImpl.java,284,if (propertyMap.containsKey(name)) {
src/main/groovy/groovy/lang/MetaClassImpl.java,285,return (MetaProperty) propertyMap.get(name);
src/main/groovy/groovy/lang/MetaClassImpl.java,287,return (MetaProperty) staticPropertyIndex.get(name);
src/main/groovy/groovy/lang/MetaClassImpl.java,289,propertyMap = classPropertyIndexForSuper.getNotNull(theCachedClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,291,return (MetaProperty) propertyMap.get(name);
src/main/groovy/groovy/lang/MetaClassImpl.java,292,else {
src/main/groovy/groovy/lang/MetaClassImpl.java,293,CachedClass superClass = theCachedClass;
src/main/groovy/groovy/lang/MetaClassImpl.java,294,while (superClass != null && superClass != ReflectionCache.OBJECT_CLASS) {
src/main/groovy/groovy/lang/MetaClassImpl.java,295,final MetaBeanProperty property = findPropertyInClassHierarchy(name, superClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,298,return property;
src/main/groovy/groovy/lang/MetaClassImpl.java,300,superClass = superClass.getCachedSuperClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,302,return null;
src/main/groovy/groovy/lang/MetaClassImpl.java,851,Class theClass = instance instanceof Class ? (Class)instance : instance.getClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,852,CachedClass superClass = theCachedClass;
src/main/groovy/groovy/lang/MetaClassImpl.java,853,while(superClass != null && superClass != ReflectionCache.OBJECT_CLASS) {
src/main/groovy/groovy/lang/MetaClassImpl.java,854,final MetaBeanProperty property = findPropertyInClassHierarchy(propertyName, superClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,855,if(property != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,856,onSuperPropertyFoundInHierarchy(property);
src/main/groovy/groovy/lang/MetaClassImpl.java,857,if(!isGetter) {
src/main/groovy/groovy/lang/MetaClassImpl.java,858,property.setProperty(instance, optionalValue);
src/main/groovy/groovy/lang/MetaClassImpl.java,859,return null;
src/main/groovy/groovy/lang/MetaClassImpl.java,861,else {
src/main/groovy/groovy/lang/MetaClassImpl.java,862,return property.getProperty(instance);
src/main/groovy/groovy/lang/MetaClassImpl.java,865,superClass = superClass.getCachedSuperClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,868,if(isGetter) {
src/main/groovy/groovy/lang/MetaClassImpl.java,3561,MetaBeanProperty property= null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,377,Object type = node.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,393,node.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,464,ClassNode cn = (ClassNode) expression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,488,StaticTypesMarker marker = lhsOfAssignment ? StaticTypesMarker.PV_FIELDS_MUTATION : StaticTypesMarker.PV_FIELDS_ACCESS;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,608,if (vexp.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER) == null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,660,ClassNode inferredType = getInferredTypeFromTempInfo(variable, (ClassNode) variable.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,683,VariableExpression implicitThis = varX("this");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,684,PropertyExpression pe = new PropertyExpression(implicitThis, dynName);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,685,pe.setImplicitThis(true);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,686,if (visitPropertyExpressionSilent(pe, vexp)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,687,ClassNode previousIt = vexp.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,688,vexp.copyNodeMetaData(implicitThis);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,689,vexp.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, previousIt);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,690,storeType(vexp, getType(pe));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,691,Object val = pe.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,692,if (val != null) vexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY, val);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,693,val = pe.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,694,if (val != null) vexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, val);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,778,storeTargetMethod(expression, (MethodNode) reversedBinaryExpression.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,781,&& leftExpression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE) == null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,864,ClassNode type = var.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,925,MethodNode directSetterCandidate = call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,935,directSetterCandidate = call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,945,leftExpression.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, directSetterCandidate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1088,if (expr.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY) == null) return false;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1138,rightExpression.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, methodNode);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1467,pexp.removeNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1470,pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1495,pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1499,pexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY, true);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1553,if (delegationData != null) pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1683,expressionToStoreOn.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1693,expressionToStoreOn.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2039,ClassNode newlyInferred = (ClassNode) virtualDecl.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2492,visitMethodCallArguments(receiver, argumentList, true, (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3086,storeTargetMethod(call, (MethodNode) subcall.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3287,call.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, data);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3318,MethodNode mn = (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3331,call.removeNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3490,call.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, directMethodCallCandidate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3865,ClassNode oldValue = (ClassNode) exp.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, cn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3874,ClassNode oldDIT = (ClassNode) exp.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3876,exp.putNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE, cn == null ? oldDIT : lowestUpperBound(oldDIT, cn));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3878,exp.putNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE, cn == null ? null : lowestUpperBound(oldValue, cn));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3888,((Parameter) accessedVariable).putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, cn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4496,ClassNode cn = exp.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4606,MethodNode target = (MethodNode) exp.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4955,ClassNode closureReturnType = expression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5267,MethodNode methodNode = (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5337,varOrigType.put(ve, (ClassNode) ve.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5385,ClassNode inferred = parameter.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5389,parameter.setNodeMetaData(StaticTypesMarker.INFERRED_TYPE, inferred);
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,338,ClassNode lhsType = controller.getTypeChooser().resolveType(leftExpression, controller.getClassNode());
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,351,ClassNode rhsType;
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,358,rhsType = leftExpression.getType();
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,359,loadInitValue(rhsType);
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,363,rhsType = operandStack.getTopOperand();
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,443,TypeChooser typeChooser = controller.getTypeChooser();
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,444,ClassNode targetType = typeChooser.resolveType(leftExpression, controller.getClassNode());
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,445,operandStack.doGroovyCast(targetType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3100,final ClassNode receiver = getType(objectExpression);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,198,Variable ret = findClassMember(cn.getSuperClass(), name);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,199,if (ret != null) return ret;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,200,return findClassMember(cn.getOuterClass(), name);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,253,ClassNode classScope = scope.getClassScope();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,254,if (classScope != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,255,Variable member = findClassMember(classScope, var.getName());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,559,ClassNode enclosingClassNode = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,560,storeType(vexp, makeType(enclosingClassNode, typeCheckingContext.isInStaticContext));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,567,ClassNode superClassNode = typeCheckingContext.getEnclosingClassNode().getSuperClass();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,568,storeType(vexp, makeType(superClassNode, typeCheckingContext.isInStaticContext));
src/main/groovy/groovy/lang/MetaClassImpl.java,2842,public Object getAttribute(Class sender, Object receiver, String messageName, boolean useSuper) {
src/main/groovy/groovy/lang/MetaClassImpl.java,2843,return getAttribute(receiver, messageName);
src/main/groovy/groovy/lang/MetaClassImpl.java,2881,throw new MissingFieldException(attribute, theClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,2921,throw new MissingFieldException(attribute, theClass);
src/main/groovy/groovy/lang/Script.java,66,setMetaClass((MetaClass)newValue);
src/main/groovy/groovy/lang/Script.java,67,else
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1149,private void addMapAssignmentConstructorErrors(ClassNode leftRedirect, Expression leftExpression, Expression rightExpression) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1153,if (!implementsInterfaceOrIsSubclassOf(leftRedirect, MAP_TYPE) && rightExpression instanceof MapExpression) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1154,if (!(leftExpression instanceof VariableExpression) || !((VariableExpression) leftExpression).isDynamicTyped()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1155,ArgumentListExpression argList = args(rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1156,ClassNode[] argTypes = getArgumentTypes(argList);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1157,checkGroovyStyleConstructor(leftRedirect, argTypes, rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1159,MapExpression mapExpression = (MapExpression) rightExpression;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1160,checkGroovyConstructorMap(leftExpression, leftRedirect, mapExpression);
src/main/groovy/groovy/ui/GroovyMain.java,147,static class VersionProvider implements IVersionProvider {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,294,static class VersionProvider implements IVersionProvider {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4327,MethodNode node = new MethodNode(name, Opcodes.ACC_PUBLIC, property.getType(), Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, GENERATED_EMPTY_STATEMENT);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4328,if (property.isStatic()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4329,node.setModifiers(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4331,node.setDeclaringClass(receiver);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4332,return Collections.singletonList(
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4333,node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4350,MethodNode node = new MethodNode(name, Opcodes.ACC_PUBLIC, VOID_TYPE, new Parameter[]{
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4353,if (property.isStatic()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4354,node.setModifiers(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4356,node.setDeclaringClass(receiver);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,47,private final SourceUnit sourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,51,private MethodNode currentMethod;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,68,thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,72,if (!isStatic(innerClass) && innerClass.getVariableScope() == null) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,168,int pCount = additionalParamCount;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,169,for (Expression expr : expressions) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,170,pCount++;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,173,Parameter param = new Parameter(ClassHelper.OBJECT_TYPE, "p" + pCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,189,pCount = 0;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,203,pCount++;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,210,ClassNode rawReferenceType = ClassHelper.REFERENCE_TYPE.getPlainNodeReference();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,211,Parameter p = new Parameter(rawReferenceType, "p" + pCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,212,parameters.add(pCount, p);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,225,private boolean isStaticThis(InnerClassNode innerClass, VariableScope scope) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,226,if (inClosure) return false;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,227,boolean ret = innerClass.isStaticClass();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,229,ret = ret || innerClass.getEnclosingMethod().isStatic();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,231,ret = ret || currentField.isStatic();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,233,ret = true;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,235,return ret;
src/main/java/org/codehaus/groovy/classgen/Verifier.java,58,import org.codehaus.groovy.ast.tools.PropertyNodeUtils;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,49,private static final int PUBLIC_SYNTHETIC = Opcodes.ACC_PUBLIC + Opcodes.ACC_SYNTHETIC;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,50,private FieldNode thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,53,private boolean processingObjInitStatements = false;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,54,private boolean inClosure = false;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,67,this.classNode = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,73,thisField = innerClass.addField("this$0", PUBLIC_SYNTHETIC, node.getOuterClass().getPlainNodeReference(), null);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,105,this.currentMethod = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,115,this.currentMethod = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,120,this.currentField = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,122,this.currentField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,135,public void visitConstructorCallExpression(ConstructorCallExpression call) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,145,if (superClass instanceof InnerClassNode
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,147,&& !(superClass.isStaticClass()||((superClass.getModifiers()&ACC_STATIC)==ACC_STATIC))) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,161,final int additionalParamCount = 1 + scope.getReferencedLocalVariablesCount();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,162,List<Parameter> parameters = new ArrayList<Parameter>(expressions.size() + additionalParamCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,164,List<Expression> superCallArguments = new ArrayList<Expression>(expressions.size());
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,190,expressions.add(pCount, VariableExpression.THIS_EXPRESSION);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,191,boolean isStatic = isStaticThis(innerClass,scope);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,192,ClassNode outerClassType = getClassNode(outerClass, isStatic);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,193,if (!isStatic && inClosure) outerClassType = ClassHelper.CLOSURE_TYPE;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,194,outerClassType = outerClassType.getPlainNodeReference();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,195,Parameter thisParameter = new Parameter(outerClassType, "p" + pCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,196,parameters.add(pCount, thisParameter);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,198,thisField = innerClass.addField("this$0", PUBLIC_SYNTHETIC, outerClassType, null);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,199,addFieldInit(thisParameter, thisField, block);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,202,for (Iterator it = scope.getReferencedLocalVariablesIterator(); it.hasNext();) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,204,org.codehaus.groovy.ast.Variable var = (org.codehaus.groovy.ast.Variable) it.next();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,214,final VariableExpression initial = new VariableExpression(p);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,217,final FieldNode pField = innerClass.addFieldFirst(ve.getName(), PUBLIC_SYNTHETIC,rawReferenceType, initial);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,228,if (    innerClass.getEnclosingMethod()!=null) {
src/main/java/org/codehaus/groovy/classgen/Verifier.java,871,protected void addConstructor(Parameter[] newParams, ConstructorNode ctor, Statement code, ClassNode node) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,958,ClassNode classNode = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,973,if (field != null && ((field.getModifiers() & ACC_PRIVATE) != 0)) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,977,if (controller.isNotExplicitThisInClosure(expression.isImplicitThis())) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,979,if (field==null && classNode instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,980,ClassNode outer = classNode.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,981,FieldNode outerClassField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,983,outerClassField = outer.getDeclaredField(name);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,988,PropertyExpression pexp = new PropertyExpression(
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,989,new ClassExpression(outer),
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,991,);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,992,pexp.visit(controller.getAcg());
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,993,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,995,outer = outer.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,998,if (field==null
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,999,&& expression instanceof AttributeExpression
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1001,&& controller.isStaticContext()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1003,ClassNode current = classNode.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1004,while (field==null && current!=null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1005,field = current.getDeclaredField(name);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1006,current = current.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1008,if (field!=null && (field.isProtected() || field.isPublic())) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1009,visitFieldExpression(new FieldExpression(field));
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1010,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1015,if (field != null && !privateSuperField) {//GROOVY-4497: don't visit super field if it is private
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1016,visitFieldExpression(new FieldExpression(field));
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1020,String prefix;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1024,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1026,prefix = "get";
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1028,String propName = prefix + MetaClassHelper.capitalize(name);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1029,visitMethodCallExpression(new MethodCallExpression(objectExpression, propName, MethodCallExpression.NO_ARGUMENTS));
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1037,if (expression.getObjectExpression() instanceof ClassExpression &&
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1082,if (propName!=null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1179,ClassNode classNode = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1182,if (isThisOrSuper(objectExpression) /*&&
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1184,) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1190,FieldExpression exp = new FieldExpression(field);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1191,exp.setSourcePosition(expression);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1192,visitFieldExpression(exp);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1193,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1198,MethodCallerMultiAdapter adapter;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1199,OperandStack operandStack = controller.getOperandStack();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1200,int mark = operandStack.getStackLength()-1;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1201,if (controller.getCompileStack().isLHS()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1202,adapter = setField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1203,if (isGroovyObject(objectExpression)) adapter = setGroovyObjectField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1204,if (usesSuper(expression)) adapter = setFieldOnSuper;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1206,adapter = getField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1207,if (isGroovyObject(objectExpression)) adapter = getGroovyObjectField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1208,if (usesSuper(expression)) adapter = getFieldOnSuper;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1210,visitAttributeOrProperty(expression, adapter);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1248,if (controller.getCompileStack().isLHS()) controller.getAssertionWriter().record(expression);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java,76,return ((IntRange)range).subListBorders(size);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,982,while (outer!=null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,984,if (outerClassField!=null && outerClassField.isStatic() && outerClassField.isFinal()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,985,if (outer!=classNode.getOuterClass() && outerClassField.isPrivate()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,986,throw new GroovyBugError("Trying to access private constant field ["+outerClassField.getDeclaringClass()+"#"+outerClassField.getName()+"] from inner class");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1099,private void addPrecisionErrors(ClassNode leftRedirect, ClassNode lhsType, ClassNode inferredrhsType, Expression rightExpression) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1100,if (isNumberType(leftRedirect) && isNumberType(inferredrhsType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1101,if (checkPossibleLossOfPrecision(leftRedirect, inferredrhsType, rightExpression)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1102,addStaticTypeError("Possible loss of precision from " + inferredrhsType + " to " + leftRedirect, rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1107,if (!lhsType.isArray()) return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1108,ClassNode leftComponentType = lhsType.getComponentType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1109,ClassNode rightRedirect = rightExpression.getType().redirect();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1110,if (rightRedirect.isArray()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1111,ClassNode rightComponentType = rightRedirect.getComponentType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1112,if (!checkCompatibleAssignmentTypes(leftComponentType, rightComponentType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1113,addStaticTypeError("Cannot assign value of type " + rightComponentType.toString(false) + " into array of type " + lhsType.toString(false), rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1116,for (Expression element : ((ListExpression) rightExpression).getExpressions()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1117,ClassNode rightComponentType = this.getType(element);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1119,&& !(isNullConstant(element) && !isPrimitiveType(leftComponentType))) {
src/main/java/org/codehaus/groovy/transform/AutoImplementASTTransformation.java,133,if (!origInterface.equals(ClassHelper.OBJECT_TYPE)) {
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,391,if (path!=null) {
src/main/java/org/codehaus/groovy/transform/ASTTransformationVisitor.java,346,+ entry.getValue().toExternalForm() + "  because of exception " + e.toString(), null));
src/main/java/org/codehaus/groovy/reflection/CachedClass.java,434,classInfo.setStrongMetaClass(new MetaClassImpl(metaClass.getTheClass()));
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,16576,return findIndexOf(InvokerHelper.asIterator(self), condition);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,69,is_ambiguous(false); // any further use of that variable can trigger uninitialized ot not final errors
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,286,Set<Variable> allVars = new HashSet<Variable>();
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,292,VariableState ifValue = ifState.get(var);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,293,VariableState elseValue = elseState.get(var);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,295,VariableState mergedIfElse;
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,296,mergedIfElse = isFinal(ifValue) && isFinal(elseValue) ? VariableState.is_final : VariableState.is_var;
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,298,curState.put(var, mergedIfElse);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,313,private boolean isFinal(VariableState value) {
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,314,return value != null && value.isFinal;
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,320,Map<Variable, VariableState> beforeTryState = new HashMap<Variable, VariableState>(getState());
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,324,Map<Variable, VariableState> afterTryState = new HashMap<Variable, VariableState>(getState());
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,330,afterStates.add(new HashMap<Variable, VariableState>(getState()));
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,337,afterStates.add(new HashMap<Variable, VariableState>(getState()));
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,388,if (block instanceof ReturnStatement) {
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,399,if (last instanceof ReturnStatement) {
src/main/java/org/codehaus/groovy/ast/GenericsType.java,327,if (!bound.isUsingGenerics() || (classNode.getGenericsTypes()==null && classNode.redirect().getGenericsTypes()!=null)) {
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,37,protected final Map<String,Class> knownClasses = new HashMap<String,Class>();
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,54,catch (Throwable e) {
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,61,super (SunClassLoader.class.getClassLoader());
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,65,loadMagic ();
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,76,mv.visitMaxs(0,0);
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,87,reader.accept(cw, ClassWriter.COMPUTE_MAXS);
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,93,return s.replace('.','/') + ".class";
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,103,return aClass;
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,108,catch (ClassNotFoundException e) {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,36,sunVM = AccessController.doPrivileged(new PrivilegedAction<SunClassLoader>() {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,37,public SunClassLoader run() {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,38,try {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,39,if (SunClassLoader.sunVM != null) {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,40,return new GroovySunClassLoader();
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,43,catch (Throwable t) {//
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,45,return null;
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,50,protected GroovySunClassLoader () throws Throwable {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,52,loadAbstract ();
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,60,private void loadAbstract() throws IOException {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,69,reader.accept(cv, ClassWriter.COMPUTE_MAXS);
src/main/java/org/apache/groovy/ast/tools/AnnotatedNodeUtils.java,39,boolean shouldAnnotate = containingClass.getModule() != null && containingClass.getModule().getContext() != null;
src/main/java/org/codehaus/groovy/classgen/asm/ClosureWriter.java,286,answer.addMethod(
src/main/java/org/codehaus/groovy/classgen/asm/ClosureWriter.java,292,new ReturnStatement(fieldExp));
src/main/java/org/codehaus/groovy/runtime/callsite/PogoMetaClassSite.java,56,return CallSiteArray.defaultCall(this, receiver, args);
src/main/java/org/codehaus/groovy/runtime/callsite/PogoMetaClassSite.java,74,return ((GroovyObject)receiver).invokeMethod(name, args);
src/main/java/org/codehaus/groovy/runtime/callsite/PogoMetaClassSite.java,83,return CallSiteArray.defaultCallCurrent(this, receiver, args);
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,701,if (!genericsClass.equals(cn.redirect())) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,276,if (end.isClassScope() ||
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,277,(end.isReferencedClassVariable(name) && end.getDeclaredVariable(name) == null)) {
src/main/java/org/codehaus/groovy/ast/MethodNode.java,37,private final String name;
src/main/java/org/codehaus/groovy/ast/MethodNode.java,46,private final ClassNode[] exceptions;
src/main/java/org/codehaus/groovy/ast/MethodNode.java,47,private final boolean staticConstructor;
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,209,MethodNode node = addAnnotations(method, MemberSignatureParser.createMethodNode(resolver, method));
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,210,if (node instanceof ConstructorNode) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,211,addConstructor((ConstructorNode) node);
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,213,addMethod(node);
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,220,addField(addAnnotations(field, MemberSignatureParser.createFieldNode(field, resolver, this)));
src/main/java/org/codehaus/groovy/transform/DelegateASTTransformation.java,339,newMethod.addAnnotations(copyAnnotatedNodeAnnotations(candidate, MY_TYPE_NAME));
src/main/java/org/codehaus/groovy/classgen/asm/StatementWriter.java,92,for (Statement statement : block.getStatements()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,44,import java.net.MalformedURLException;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,73,public void compile(String[] paths) throws Exception {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,74,unit.addSources(paths);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,75,unit.compile();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,78,public void compile(File[] files) throws Exception {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,79,unit.addSources(files);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,80,unit.compile();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,92,public static void displayHelp(final PrintWriter writer) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,104,public static void displayVersion(final PrintWriter writer) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,117,++errors;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,120,++errors;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,131,private static boolean displayStackTraceOnError = false;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,156,String[] filenames = options.generateFileNames();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,157,boolean fileNameErrors = filenames == null;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,158,if (!fileNameErrors && (filenames.length == 0)) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,163,fileNameErrors = fileNameErrors && !validateFiles(filenames);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,166,doCompilation(configuration, null, filenames, lookupUnnamedFiles);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,238,public URL loadGroovySource(String filename) throws MalformedURLException {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,257,List<String> fileList = new ArrayList<String>(filenames.size());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,297,return new String[] {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,308,customSynopsis = "groovyc [options] <source-files>",
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,309,sortOptions = false,
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,373,if (targetDir != null && targetDir.getName().length() > 0) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,378,configuration.setSourceEncoding(encoding);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,383,Map<String, Object> compilerOptions = new HashMap<String, Object>();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,384,compilerOptions.put("namedValues", javacOptionsList());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,385,compilerOptions.put("flags", flagsWithParameterMetaData());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,390,configuration.getOptimizationOptions().put("int", false);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,391,configuration.getOptimizationOptions().put("indy", true);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,396,List<String> scripts = new ArrayList<String>();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,413,String[] javacOptionsList() {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,414,if (javacOptionsMap == null) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,415,return null;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,417,List<String> result = new ArrayList<String>();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,418,for (Map.Entry<String, String> entry : javacOptionsMap.entrySet()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,419,result.add(entry.getKey());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,420,result.add(entry.getValue());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,422,return result.toArray(new String[0]);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,425,String[] flagsWithParameterMetaData() {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,426,if (flags == null) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,427,return null;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,430,flags.add("parameters");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,432,return flags.toArray(new String[0]);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,438,public static void displayHelp(final Options options) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,439,final HelpFormatter formatter = new HelpFormatter();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,440,formatter.printHelp(80, "groovyc [options] <source-files>", "options:", options, "");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,446,public static CompilerConfiguration generateCompilerConfigurationFromOptions(org.apache.commons.cli.CommandLine cli) throws IOException {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,447,throw new DeprecationException("This method is not supported for Groovy 2.5+. Consider instead using the FileSystemCompiler.CompilationOptions class.");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,451,public static String[] generateFileNamesFromOptions(org.apache.commons.cli.CommandLine cli) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,452,throw new DeprecationException("This method is not supported for Groovy 2.5+. Consider instead using the FileSystemCompiler.CompilationOptions class.");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,456,public static Options createCompilationOptions() {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,457,throw new DeprecationException("This method is not supported for Groovy 2.5+. Consider instead using the FileSystemCompiler.CompilationOptions class.");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,467,public static File createTempDir() throws IOException {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,468,return DefaultGroovyStaticMethods.createTempDir(null);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,471,public static void deleteRecursive(File file) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,472,if (!file.exists()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,473,return;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,475,if (file.isFile()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,476,file.delete();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,478,File[] files = file.listFiles();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,479,for (int i = 0; i < files.length; i++) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,480,deleteRecursive(files[i]);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,482,file.delete();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,42,import org.codehaus.groovy.tools.RootLoader;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,51,import java.net.MalformedURLException;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,57,import java.util.Enumeration;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,169,private static final URL[] EMPTY_URL_ARRAY = new URL[0];
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,177,private boolean stacktrace = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,178,private boolean verbose = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,180,private boolean includeJavaRuntime = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,181,private boolean fork = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,183,private String forkedExecutable = null;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,187,private String targetBytecode = null;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,190,protected boolean listFiles = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,202,private final List<File> temporaryFiles = new ArrayList<File>(2);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,210,private Set<String> scriptExtensions = new LinkedHashSet<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,215,private boolean parameters = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,864,scriptExtensions = new LinkedHashSet<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,941,List<String> jointOptions = new ArrayList<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,946,for (Object o1 : rc.getAttributeMap().entrySet()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,947,final Map.Entry e = (Map.Entry) o1;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,948,final String key = e.getKey().toString();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,949,final String value = getProject().replaceProperties(e.getValue().toString());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,950,if (key.contains("debug")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,951,String level = "";
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,952,if (javac.getDebugLevel() != null) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,953,level = ":" + javac.getDebugLevel();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,955,jointOptions.add("-Fg" + level);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,960,|| (key.contains("deprecation"))) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,963,jointOptions.add("-F" + key);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,965,classpath.add(javac.getClasspath());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,971,|| (key.contains("verbose"))) { // already handling verbose but pass on too
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,972,jointOptions.add("-J" + key + "=" + value);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,974,log.warn("The option " + key + " cannot be set on the contained <javac> element. The option will be ignored");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,981,Enumeration children = rc.getChildren();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,982,while (children.hasMoreElements()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,983,RuntimeConfigurable childrc = (RuntimeConfigurable) children.nextElement();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,985,for (Object o : childrc.getAttributeMap().entrySet()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,986,final Map.Entry e = (Map.Entry) o;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,987,final String key = e.getKey().toString();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,989,final String value = getProject().replaceProperties(e.getValue().toString());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,992,String optionStr = st.nextToken();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,993,String replaced = optionStr.replace("-X", "-FX");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,994,if (optionStr.equals(replaced)) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,995,replaced = optionStr.replace("-W", "-FW"); // GROOVY-5063
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,997,jointOptions.add(replaced);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1008,if (!fork) return;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1010,if (includeAntRuntime) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1011,classpath.addExisting((new Path(getProject())).concatSystemClasspath("last"));
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1013,if (includeJavaRuntime) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1014,classpath.addJavaRuntime();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1017,if (forkedExecutable != null && !forkedExecutable.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1028,commandLineList.add("-classpath");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1029,commandLineList.add(getClasspathRelative(classpath));
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1031,final String fileEncodingProp = System.getProperty("file.encoding");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1032,if ((fileEncodingProp != null) && !fileEncodingProp.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1033,commandLineList.add("-Dfile.encoding=" + fileEncodingProp);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1035,if (targetBytecode != null) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1036,commandLineList.add("-Dgroovy.target.bytecode=" + targetBytecode);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1039,if ((memoryInitialSize != null) && !memoryInitialSize.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1042,if ((memoryMaximumSize != null) && !memoryMaximumSize.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1057,private String getClasspathRelative(Path classpath) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1060,for (String next : classpath.list()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1151,log.verbose("Compilation arguments:\n" + DefaultGroovyMethods.join((Iterable)commandLineList, "\n"));
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1156,final Execute executor = new Execute();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1165,final int returnCode = executor.getExitValue();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1193,String[] filenames = options.generateFileNames();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1194,boolean fileNameErrors = filenames == null;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1196,fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1204,FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1209,Throwable t = re;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1210,if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1212,t = re.getCause();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1241,Path classpath = getClasspath() != null ? getClasspath() : new Path(getProject());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1242,List<String> jointOptions = extractJointOptions(classpath);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1244,String separator = System.getProperty("file.separator");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1245,List<String> commandLineList = new ArrayList<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1247,doForkCommandLineList(commandLineList, classpath, separator);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1302,if (!fork && !getIncludeantruntime()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1305,final ClassLoader parent =
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1306,AccessController.doPrivileged(
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1307,new PrivilegedAction<ClassLoader>() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1309,public ClassLoader run() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1312,: new AntClassLoader(new RootLoader(EMPTY_URL_ARRAY, null), getProject(), getClasspath());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1315,if (parent instanceof AntClassLoader) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1316,AntClassLoader antLoader = (AntClassLoader) parent;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1347,GroovyClassLoader loader =
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1348,AccessController.doPrivileged(
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1349,new PrivilegedAction<GroovyClassLoader>() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1351,public GroovyClassLoader run() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1352,return new GroovyClassLoader(parent, configuration);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1357,loader.setResourceLoader(new GroovyResourceLoader() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1358,public URL loadGroovySource(String filename) throws MalformedURLException {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1363,return loader;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1375,Path classpath = getClasspath() != null ? getClasspath() : new Path(getProject());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1376,final String[] pe = classpath.list();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1378,for (String file : pe) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1379,loader.addClasspath(file);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,130,import java.util.LinkedList;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,182,private String[] tokenNames;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,183,private int innerClassCounter = 1;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,184,private boolean enumConstantBeingDef = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,185,private boolean forStatementBeingDef = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,186,private boolean annotationBeingDef = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,187,private boolean firstParamIsVarArg = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,188,private boolean firstParam = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,190,public /*final*/ Reduction parseCST(final SourceUnit sourceUnit, Reader reader) throws CompilationFailedException {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,191,final SourceBuffer sourceBuffer = new SourceBuffer();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,241,AccessController.doPrivileged(new PrivilegedAction() {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,242,public Object run() {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,248,return null; //new Reduction(Tpken.EOF);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,256,saveAsXML(sourceUnit.getName(), ast);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,300,List<VisitorAdapter> v = new ArrayList<VisitorAdapter>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,312,private static void saveAsXML(String name, AST ast) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,313,XStreamUtils.serialize(name+".antlr", ast);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,340,catch (ASTRuntimeException e) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,383,default: {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,384,Statement statement = statement(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,385,output.addStatement(statement);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,396,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,402,String name = qualifiedName(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,404,PackageNode packageNode = setPackage(name, annotations);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,414,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,426,AST aliasNode = node.getNextSibling();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,454,if (alias != null) throw new GroovyBugError(
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,476,if (node!=null && node!=ImportNode.class) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,493,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,535,int oldInnerClassCounter = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,538,innerClassCounter = oldInnerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,542,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,583,int oldClassCount = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,590,innerClassCounter = oldClassCount;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,594,int oldInnerClassCounter = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,597,innerClassCounter = oldInnerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,608,String fullName = outerClass.getName() + '$' + innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,609,innerClassCounter++;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,611,classNode = new EnumConstantClassNode(outerClass, fullName, Opcodes.ACC_PUBLIC, ClassHelper.OBJECT_TYPE);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,613,classNode = new InnerClassNode(outerClass, fullName, Opcodes.ACC_PUBLIC, ClassHelper.OBJECT_TYPE);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,620,output.addClass(classNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,629,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,690,int oldClassCount = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,696,innerClassCounter = oldClassCount;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,753,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,773,ClassNode oldNode = classNode;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,776,configureAST(classNode, enumNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,787,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,864,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,914,List<ClassNode> exceptionList = new ArrayList<ClassNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,976,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,996,List<ClassNode> exceptionList = new ArrayList<ClassNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1017,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1130,List<ClassNode> interfaceList = new ArrayList<ClassNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1150,List<Parameter> parameters = new ArrayList<Parameter>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1178,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1191,if (variableParameterDef) type = type.makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1318,String name = qualifiedName(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1319,AnnotationNode annotatedNode = new AnnotationNode(ClassHelper.make(name));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1425,if (node != null) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1426,configureAST(block, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1558,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1635,List list = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1640,List cases = new LinkedList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1642,tmpDefaultStatement = caseStatements(child, cases);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1643,list.addAll(cases);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1647,if (tmpDefaultStatement != EmptyStatement.INSTANCE) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1648,if (defaultStatement == EmptyStatement.INSTANCE) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1658,SwitchStatement switchStatement = new SwitchStatement(expression, list, defaultStatement);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1663,protected Statement caseStatements(AST node, List cases) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1664,List<Expression> expressions = new LinkedList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1681,Iterator iterator = expressions.iterator();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1682,while (iterator.hasNext()) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1683,Expression expr = (Expression) iterator.next();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1684,Statement stmt;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1725,List<CatchStatement> catches = new ArrayList<CatchStatement>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1750,List<CatchStatement> catches = new LinkedList<CatchStatement>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1754,final AST multicatches = node.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1831,return expression(node.getFirstChild());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2001,return binaryExpression(Types.COMPARE_IDENTICAL, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2003,case ???:
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2004,return binaryExpression(Types.LOGICAL_AND_EQUAL, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2006,case ???:
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2007,return binaryExpression(Types.LOGICAL_OR_EQUAL, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2120,return new AnnotationConstantExpression(annotation(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2156,List<Expression> list = new LinkedList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2215,protected Expression literalExpression(AST node, Object value) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2264,protected Expression defaultMethodPointerExpression(AST node) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2265,AST exprNode = node.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2266,String methodName = exprNode.toString();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2267,MethodPointerExpression methodPointerExpression = new MethodPointerExpression(null, methodName);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2268,configureAST(methodPointerExpression, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2269,return methodPointerExpression;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2274,List<Expression> expressions = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2299,List expressions = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2310,break;  // helpful error
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2313,break;  // helpful error
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2315,expressions.add(mapEntryExpression(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2318,MapExpression mapExpression = new MapExpression(expressions);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2371,return CastExpression.asExpression(type, leftExpression);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2563,+ " cannot be used as a method name");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2637,List size = arraySizeExpression(expressionNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2674,protected List arraySizeExpression(AST node) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2675,List list;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2691,list = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2698,List<Expression> expressionList = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2709,List expressionList = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2726,List<Expression> argumentList = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2755,private static void checkDuplicateNamedParams(AST elist, List expressionList) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2758,Set<String> namedArgumentNames = new HashSet<String>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2759,for (Object expression : expressionList) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2760,MapEntryExpression meExp = (MapEntryExpression) expression;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2766,throw new ASTRuntimeException(elist, "Duplicate named parameter '" + argName
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2767,+ "' found.");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2789,List<Expression> expressionList = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2853,ConstantExpression constantLongExpression = new ConstantExpression(Numbers.parseInteger(unaryMinusExpr,"-" + text));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2873,return expression(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2876,UnaryPlusExpression unaryPlusExpression = new UnaryPlusExpression(expression(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2877,configureAST(unaryPlusExpression, unaryPlusExpr);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2901,List strings = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2902,List values = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2939,protected ClassNode type(AST typeNode) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2942,return buildName(typeNode.getFirstChild());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3031,List<GenericsType> typeArgumentList = new LinkedList<GenericsType>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3047,LinkedList bounds = new LinkedList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3048,for (AST boundsNode = boundsRoot.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3049,boundsNode != null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3051,) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3052,ClassNode bound = null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3053,bound = makeTypeWithArguments(boundsNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3058,return (ClassNode[]) bounds.toArray(ClassNode.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3063,LinkedList ret = new LinkedList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3067,AST typeNode = typeParameter.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3068,ClassNode type = makeType(typeParameter);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3070,GenericsType gt = new GenericsType(type, makeGenericsBounds(typeNode, TYPE_UPPER_BOUNDS), null);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3073,ret.add(gt);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3076,return (GenericsType[]) ret.toArray(GenericsType.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3083,if (isType(INDEX_OP, node) || isType(ARRAY_DECLARATOR, node)) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3084,answer = makeType(node).makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3089,ClassNode newAnswer = ClassHelper.makeWithoutCaching(answer.getName());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3090,newAnswer.setRedirect(answer);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3091,answer = newAnswer;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3094,configureAST(answer, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3119,if (name == null) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3120,return null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3122,return resolveNewClassOrName(name, safe);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3133,ClassNode answer = null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3134,if (isType(DOT, node) || isType(OPTIONAL_DOT, node)) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3135,answer = ClassHelper.make(qualifiedName(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3137,answer = ClassHelper.make(node.getText());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3139,AST child = node.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3140,answer = buildName(child).makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3141,configureAST(answer, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3142,return answer;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3144,String identifier = node.getText();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3145,answer = ClassHelper.make(identifier);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3148,if (isType(INDEX_OP, nextSibling) || isType(ARRAY_DECLARATOR, node)) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3149,answer = answer.makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3150,configureAST(answer, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3151,return answer;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3206,throw new ASTRuntimeException(ast, "PARSER BUG: Tried to configure " + node.getClass().getName() + " with null Node");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3207,node.setColumnNumber(ast.getColumn());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3210,node.setLastColumnNumber(((GroovySourceAST) ast).getColumnLast());
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,94,mainClassName = mainClass.getName();
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,368,if(retTypeMatches && argTypeMatches) {
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,369,if(found) {
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,420,public void sortClasses(){
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,456,addStaticImport(type, fieldName, alias, new ArrayList<AnnotationNode>());
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,462,staticImports.put(alias, node);
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,467,addStaticStarImport(name, type, new ArrayList<AnnotationNode>());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1680,storeWithResolve(field.getOriginType(), receiver, field.getDeclaringClass(), field.isStatic(), expressionToStoreOn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1688,private boolean storeProperty(PropertyNode propertyNode, PropertyExpression expressionToStoreOn, ClassNode receiver, ClassCodeVisitorSupport visitor, String delegationData) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1689,if (propertyNode == null) return false;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1690,if (visitor != null) visitor.visitProperty(propertyNode);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1691,storeWithResolve(propertyNode.getOriginType(), receiver, propertyNode.getDeclaringClass(), propertyNode.isStatic(), expressionToStoreOn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1390,if (objectExpressionType.isArray() && "length".equals(pexp.getPropertyAsString())) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1391,storeType(pexp, int_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1392,if (visitor != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1393,PropertyNode node = new PropertyNode("length", Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL, int_TYPE, objectExpressionType, null, null, null);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1394,visitor.visitProperty(node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1396,return true;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1409,LinkedList<ClassNode> queue = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,820,LabelVerifier lv = new LabelVerifier(source);
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,821,lv.visitClass(classNode);
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,836,ClassVisitor visitor = createClassVisitor();
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,845,AsmClassGenerator generator = new AsmClassGenerator(source, context, visitor, sourceName);
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,852,byte[] bytes = ((ClassWriter) visitor).toByteArray();
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,859,classgenCallback.call(visitor, classNode);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,55,private static final Class MY_CLASS = InheritConstructors.class;
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,56,private static final ClassNode MY_TYPE = make(MY_CLASS);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,57,private static final String MY_TYPE_NAME = "@" + MY_TYPE.getNameWithoutPackage();
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,61,AnnotatedNode parent = (AnnotatedNode) nodes[1];
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,62,AnnotationNode node = (AnnotationNode) nodes[0];
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,63,if (!MY_TYPE.equals(node.getClassNode())) return;
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,65,if (parent instanceof ClassNode) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,66,processClass((ClassNode) parent, node);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,79,List<AnnotationNode> superAnnotations = sNode.getAnnotations(MY_TYPE);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,102,added.addAnnotations(copyAnnotatedNodeAnnotations(consNode, MY_TYPE_NAME));
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,107,List<Expression> theArgs = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,108,for (int i = 0; i < origParams.length; i++) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,113,params[i].addAnnotations(copyAnnotatedNodeAnnotations(origParams[i], MY_TYPE_NAME));
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,115,theArgs.add(varX(p.getName(), newType));
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,121,for (ConstructorNode consNode : classNode.getDeclaredConstructors()) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,122,if (matchingTypes(params, consNode.getParameters())) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,123,return true;
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,126,return false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,574,if (parameters.length == 0) parameters = null; // null means no implicit "it"
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,580,final Expression expression = field.getInitialExpression();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,583,if (expression instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,584,VariableExpression vexp = (VariableExpression) expression;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,585,if (vexp.getAccessedVariable() instanceof Parameter) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,587,popState();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,588,continue;
src/main/java/org/codehaus/groovy/transform/ASTTransformationVisitor.java,163,public void visitAnnotations(AnnotatedNode node) {
src/main/java/org/codehaus/groovy/transform/ASTTransformationVisitor.java,165,for (AnnotationNode annotation : node.getAnnotations()) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,156,public void visitClass(final ClassNode node) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,157,List<Statement> savedStatements = new ArrayList<Statement>(node.getObjectInitializerStatements());
src/main/groovy/groovy/util/logging/Commons.java,105,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Log.java,120,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Log4j.java,116,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Log4j2.java,102,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Slf4j.java,104,ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1450,messageExpression = ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1624,Expression expression = exprNode == null ? ConstantExpression.NULL : expression(exprNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2819,if (codeNode == null) return ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/ast/decompiled/Annotations.java,68,return annotationNode != null ? new AnnotationConstantExpression(annotationNode) : ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,125,result.setCode(new ReturnStatement(ConstantExpression.NULL));
src/main/java/org/codehaus/groovy/ast/stmt/AssertStatement.java,41,this(booleanExpression, ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/ast/stmt/ReturnStatement.java,35,public static final ReturnStatement RETURN_NULL_OR_VOID = new ReturnStatement(ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/classgen/asm/AssertionWriter.java,71,boolean rewriteAssert = true;
src/main/java/org/codehaus/groovy/classgen/asm/AssertionWriter.java,73,rewriteAssert = statement.getMessageExpression() == ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,260,ArgumentListExpression newArgs = new ArgumentListExpression(target.isStatic()?new ConstantExpression(null):fixedReceiver);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,307,if (returnStatement.getExpression() == ConstantExpression.NULL) return;
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,59,pexp.getProperty().setSourcePosition(expr);
src/main/java/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java,445,forLoop.getVariable().setOriginType(componentType);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,694,int accessorModifiers = PropertyNodeUtils.adjustPropertyModifiersForMethod(node);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,850,method);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1241,intfMethod.getDeclaringClass(), m);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1331,overridingMethod);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1341,overridingMethod);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1349,overridingMethod);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1368,overridingMethod);
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,98,Map<String, MethodNode> ifaceMethodsMap = iface.getDeclaredMethodsMap();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,99,for (Map.Entry<String, MethodNode> entry : ifaceMethodsMap.entrySet()) {
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,100,String methSig = entry.getKey();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,101,if (!methodsMap.containsKey(methSig)) {
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,102,methodsMap.put(methSig, entry.getValue());
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,116,Map<String, MethodNode> result = new HashMap<String, MethodNode>();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,117,ClassNode[] interfaces = cNode.getInterfaces();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,118,for (ClassNode iface : interfaces) {
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,119,result.putAll(iface.getDeclaredMethodsMap());
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,121,return result;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,284,argumentList.add(0, ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,101,import org.codehaus.groovy.syntax.Types;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,194,import static org.codehaus.groovy.syntax.Types.COMPARE_NOT_IDENTICAL;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,747,if (op == COMPARE_IDENTICAL || op == COMPARE_NOT_IDENTICAL) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3628,if (op != Types.KEYWORD_INSTANCEOF) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,928,throw new ASTRuntimeException(methodDef, "You defined a method without body. Try adding a body, or declare it abstract.");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,927,if (node == null) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,930,assertNodeType(SLIST, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,931,code = statementList(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,933,code = statement(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,934,hasAnnotationDefault = true;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,936,if (node != null) {
src/main/groovy/groovy/ui/GroovyMain.java,280,CompilerConfiguration.DEFAULT.getOptimizationOptions().put("indy", true);
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,187,builder.addMethod(createBuilderMethodForProp(builder, new PropertyInfo(parameter.getName(), parameter.getType()), getPrefix(anno)));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,214,Map<String,ClassNode> genericsSpec = createGenericsSpec(declaringClass);
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,220,buildee.getModule().addClass(builder);
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,276,Map<String,ClassNode> genericsSpec = createGenericsSpec(buildee);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,44,import static org.apache.groovy.ast.tools.AnnotatedNodeUtils.markAsGenerated;
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,214,buildee.getModule().addClass(builder);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,216,buildee.addMethod(createBuilderMethod(buildMethodName, builder, fieldNodes.size(), builderMethodName));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,218,builder.addMethod(createBuilderMethodForField(builder, fieldNodes, prefix, i));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,220,builder.addMethod(createBuildMethod(builder, buildMethodName, fieldNodes));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,270,builder.addConstructor(ACC_PRIVATE, NO_PARAMS, NO_EXCEPTIONS, block(ctorSuperS()));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,274,builder.addConstructor(ACC_PRIVATE, getParams(fields, buildee), NO_EXCEPTIONS, body);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,278,ConstructorNode initializer = createInitializerConstructor(buildee, builder, fields);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,279,markAsGenerated(buildee, initializer);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,284,ConstructorNode helperCons = buildee.addConstructor(ACC_PRIVATE | ACC_SYNTHETIC, getParams(fields, buildee), NO_EXCEPTIONS, body);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,285,markAsGenerated(buildee, helperCons);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,297,buildee.addMethod(mNode.getName(), PUBLIC_STATIC, mNode.getReturnType(), params(param(paramType, "initializer")), NO_EXCEPTIONS,
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,327,return buildee.addConstructor(ACC_PUBLIC, params(param(paramType, "initializer")), NO_EXCEPTIONS, block(ctorThisS(args(argsList))));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,189,builder.addMethod(createBuildMethodForMethod(anno, buildee, mNode, mNode.getParameters()));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,208,builder.addMethod(createBuilderMethodForProp(builder, new PropertyInfo(fieldName, correctedType), getPrefix(anno)));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,210,builder.addMethod(createBuildMethod(anno, buildee, props));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,221,buildee.addMethod(createBuilderMethod(anno, builder));
src/main/groovy/groovy/transform/builder/ExternalStrategy.java,123,builder.addMethod(createBuilderMethodForField(builder, prop, prefix));
src/main/groovy/groovy/transform/builder/ExternalStrategy.java,125,builder.addMethod(createBuildMethod(transform, anno, buildee, props));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,304,buildee.addMethod(newName, mNode.getModifiers(), mNode.getReturnType(), mNode.getParameters(), mNode.getExceptions(), mNode.getCode());
src/main/groovy/groovy/transform/builder/SimpleStrategy.java,118,buildee.addMethod(methodName, Opcodes.ACC_PUBLIC, newClass(buildee), params(parameter), NO_EXCEPTIONS, block(
src/main/groovy/groovy/transform/builder/SimpleStrategy.java,122,),
src/main/java/org/apache/groovy/ast/tools/AnnotatedNodeUtils.java,38,public static void markAsGenerated(ClassNode containingClass, AnnotatedNode nodeToMark) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,637,String name = vexp.getName();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,638,if (name.equals("owner") || name.equals("thisObject")) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,639,storeType(vexp, typeCheckingContext.getEnclosingClassNode());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,640,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,642,DelegationMetadata md = getDelegationMetadata(enclosingClosure.getClosureExpression());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,643,ClassNode type = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,644,if (md != null) type = md.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,645,storeType(vexp, type);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,646,return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,208,if (receiverType.isEnum()) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,209,mv.visitFieldInsn(GETSTATIC, BytecodeHelper.getClassInternalName(receiverType), methodName, BytecodeHelper.getTypeDescription(receiverType));
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,210,controller.getOperandStack().push(receiverType);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,211,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2806,if (lastArg && inferredType.isArray()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2807,if (inferredType.getComponentType().equals(originType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2808,inferredType = originType;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2997,private static boolean isTraitHelper(ClassNode node) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2998,return node instanceof InnerClassNode && Traits.isTrait(node.getOuterClass());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3004,if (typeCheckingContext.delegationMetadata == null || !implicitThis) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3006,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3009,DelegationMetadata dmd = typeCheckingContext.delegationMetadata;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3010,StringBuilder path = new StringBuilder();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3011,while (dmd != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3012,int strategy = dmd.getStrategy();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3013,ClassNode delegate = dmd.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3014,dmd = dmd.getParent();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3015,switch (strategy) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3016,case Closure.OWNER_FIRST:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3017,receivers.addAll(owners);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3018,path.append("delegate");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3019,doAddDelegateReceiver(receivers, path, delegate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3020,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3021,case Closure.DELEGATE_FIRST:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3022,path.append("delegate");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3023,doAddDelegateReceiver(receivers, path, delegate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3024,receivers.addAll(owners);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3025,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3026,case Closure.OWNER_ONLY:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3028,dmd = null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3029,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3030,case Closure.DELEGATE_ONLY:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3031,path.append("delegate");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3032,doAddDelegateReceiver(receivers, path, delegate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3033,dmd = null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3034,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3036,path.append('.');
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3040,private static void doAddDelegateReceiver(final List<Receiver<String>> receivers, final StringBuilder path, final ClassNode delegate) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3041,receivers.add(new Receiver<String>(delegate, path.toString()));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3042,if (isTraitHelper(delegate)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3043,receivers.add(new Receiver<String>(delegate.getOuterClass(), path.toString()));
src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,414,msg.append(superMethod.isPublic() ? "public" : "protected");
src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,466,if ((mn.isPrivate() && !superMethod.isPrivate()) ||
src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,467,(mn.isProtected() && superMethod.isPublic())) {
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,167,if (!nType.isDerivedFrom(cnType)) {
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,168,if (cnType.isInterface() && nType.implementsInterface(cnType)) continue;
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,169,addError("The type " + nTypes[i].getName() +
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,171,getPrintName(cnTypes[i]) + ">", n);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,2033,private static boolean isUnboundedWildcard(GenericsType gt) {
src/main/java/org/codehaus/groovy/ast/AnnotationNode.java,48,private boolean runtimeRetention= false, sourceRetention= false, classRetention = false;
src/main/java/org/codehaus/groovy/ast/AnnotationNode.java,127,if (!runtimeRetention && !classRetention) return true;
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1230,if (retAnn != null && retAnn.value().equals(RetentionPolicy.RUNTIME) && !isRepeatable(annTypeClass)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,635,private static boolean isDirectAccessAllowed(FieldNode a, ClassNode receiver, boolean isSamePackage) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,636,ClassNode declaringClass = a.getDeclaringClass().redirect();
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,641,if (receiverType instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,642,while (receiverType instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,643,if (declaringClass.equals(receiverType)) return true;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,644,receiverType = receiverType.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,649,return a.isPublic() || (a.isProtected() && isSamePackage);
subprojects/groovy-templates/src/main/groovy/groovy/text/markup/BaseTemplate.java,216,String escape = configuration.isUseDoubleQuotes() ? "&quote;" : "&apos;";
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1117,Parameter[] paras = ce.getParameters();
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1118,if (paras != null) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1119,for (Parameter para : paras) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1120,ClassNode t = para.getType();
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1121,resolveOrFail(t, ce);
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1122,visitAnnotations(para);
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1123,if (para.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1129,visitAnnotations(para);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,19,package org.codehaus.groovy.control;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,21,import org.codehaus.groovy.ast.AnnotatedNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,22,import org.codehaus.groovy.ast.AnnotationNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,23,import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,24,import org.codehaus.groovy.ast.ClassNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,25,import org.codehaus.groovy.ast.DynamicVariable;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,26,import org.codehaus.groovy.ast.FieldNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,27,import org.codehaus.groovy.ast.ImportNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,28,import org.codehaus.groovy.ast.MethodNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,29,import org.codehaus.groovy.ast.ModuleNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,30,import org.codehaus.groovy.ast.Parameter;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,31,import org.codehaus.groovy.ast.Variable;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,32,import org.codehaus.groovy.ast.expr.AnnotationConstantExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,33,import org.codehaus.groovy.ast.expr.ArgumentListExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,34,import org.codehaus.groovy.ast.expr.BinaryExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,35,import org.codehaus.groovy.ast.expr.ClassExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,36,import org.codehaus.groovy.ast.expr.ClosureExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,37,import org.codehaus.groovy.ast.expr.ConstantExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,38,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,39,import org.codehaus.groovy.ast.expr.EmptyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,40,import org.codehaus.groovy.ast.expr.Expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,42,import org.codehaus.groovy.ast.expr.MapEntryExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,43,import org.codehaus.groovy.ast.expr.MethodCallExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,44,import org.codehaus.groovy.ast.expr.NamedArgumentListExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,45,import org.codehaus.groovy.ast.expr.PropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,46,import org.codehaus.groovy.ast.expr.StaticMethodCallExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,47,import org.codehaus.groovy.ast.expr.TupleExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,48,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,49,import org.codehaus.groovy.ast.stmt.Statement;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,50,import org.codehaus.groovy.syntax.Types;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,53,import java.util.List;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,54,import java.util.Map;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,57,import static org.apache.groovy.ast.tools.ClassNodeUtils.getPropNameForAccessor;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,58,import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticMethod;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,59,import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticProperty;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,60,import static org.apache.groovy.ast.tools.ClassNodeUtils.hasStaticProperty;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,61,import static org.apache.groovy.ast.tools.ClassNodeUtils.isInnerClass;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,62,import static org.apache.groovy.ast.tools.ClassNodeUtils.isValidAccessorName;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,63,import static org.codehaus.groovy.runtime.MetaClassHelper.capitalize;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,68,public class StaticImportVisitor extends ClassCodeExpressionTransformer {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,69,private ClassNode currentClass;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,70,private MethodNode currentMethod;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,71,private SourceUnit source;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,72,private boolean inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,73,private boolean inClosure;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,74,private boolean inPropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,75,private Expression foundConstant;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,76,private Expression foundArgs;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,77,private boolean inAnnotation;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,78,private boolean inLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,80,public void visitClass(ClassNode node, SourceUnit source) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,81,this.currentClass = node;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,82,this.source = source;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,83,super.visitClass(node);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,87,protected void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,88,this.currentMethod = node;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,89,super.visitConstructorOrMethod(node, isConstructor);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,90,this.currentMethod = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,94,public void visitAnnotations(AnnotatedNode node) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,95,boolean oldInAnnotation = inAnnotation;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,96,inAnnotation = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,97,super.visitAnnotations(node);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,98,inAnnotation = oldInAnnotation;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,101,public Expression transform(Expression exp) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,102,if (exp == null) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,103,if (exp.getClass() == VariableExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,104,return transformVariableExpression((VariableExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,106,if (exp.getClass() == BinaryExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,107,return transformBinaryExpression((BinaryExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,109,if (exp.getClass() == PropertyExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,110,return transformPropertyExpression((PropertyExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,112,if (exp.getClass() == MethodCallExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,113,return transformMethodCallExpression((MethodCallExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,115,if (exp.getClass() == ClosureExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,116,return transformClosureExpression((ClosureExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,118,if (exp.getClass() == ConstructorCallExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,119,return transformConstructorCallExpression((ConstructorCallExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,121,if (exp.getClass() == ArgumentListExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,122,Expression result = exp.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,123,if (inPropertyExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,124,foundArgs = result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,126,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,128,if (exp instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,129,Expression result = exp.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,130,if (inPropertyExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,131,foundConstant = result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,133,if (inAnnotation && exp instanceof AnnotationConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,134,ConstantExpression ce = (ConstantExpression) result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,135,if (ce.getValue() instanceof AnnotationNode) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,138,AnnotationNode an = (AnnotationNode) ce.getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,139,Map<String, Expression> attributes = an.getMembers();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,140,for (Map.Entry<String, Expression> entry : attributes.entrySet()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,141,Expression attrExpr = transform(entry.getValue());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,142,entry.setValue(attrExpr);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,147,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,149,return exp.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,159,private Expression transformMapEntryExpression(MapEntryExpression me, ClassNode constructorCallType) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,160,Expression key = me.getKeyExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,161,Expression value = me.getValueExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,162,ModuleNode module = currentClass.getModule();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,163,if (module != null && key instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,164,Map<String, ImportNode> importNodes = module.getStaticImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,165,if (importNodes.containsKey(key.getText())) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,166,ImportNode importNode = importNodes.get(key.getText());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,167,if (importNode.getType().equals(constructorCallType)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,168,String newKey = importNode.getFieldName();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,169,return new MapEntryExpression(new ConstantExpression(newKey), value.transformExpression(this));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,173,return me;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,176,protected Expression transformBinaryExpression(BinaryExpression be) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,177,int type = be.getOperation().getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,178,boolean oldInLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,179,Expression right = transform(be.getRightExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,180,be.setRightExpression(right);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,181,Expression left;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,182,if (type == Types.EQUAL && be.getLeftExpression() instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,183,oldInLeftExpression = inLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,184,inLeftExpression = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,185,left = transform(be.getLeftExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,186,inLeftExpression = oldInLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,187,if (left instanceof StaticMethodCallExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,188,StaticMethodCallExpression smce = (StaticMethodCallExpression) left;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,189,StaticMethodCallExpression result = new StaticMethodCallExpression(smce.getOwnerType(), smce.getMethod(), right);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,190,setSourcePosition(result, be);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,191,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,194,left = transform(be.getLeftExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,196,be.setLeftExpression(left);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,197,return be;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,200,protected Expression transformVariableExpression(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,201,Variable v = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,202,if (v instanceof DynamicVariable) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,203,Expression result = findStaticFieldOrPropAccessorImportFromModule(v.getName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,204,if (result != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,205,setSourcePosition(result, ve);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,206,if (inAnnotation) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,207,result = transformInlineConstants(result);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,209,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,212,return ve;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,221,private static void setSourcePosition(Expression toSet, Expression origNode) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,222,toSet.setSourcePosition(origNode);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,223,if (toSet instanceof PropertyExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,224,((PropertyExpression) toSet).getProperty().setSourcePosition(origNode);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,261,protected Expression transformMethodCallExpression(MethodCallExpression mce) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,262,Expression args = transform(mce.getArguments());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,263,Expression method = transform(mce.getMethod());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,264,Expression object = transform(mce.getObjectExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,265,boolean isExplicitThisOrSuper = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,266,boolean isExplicitSuper = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,267,if (object instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,268,VariableExpression ve = (VariableExpression) object;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,269,isExplicitThisOrSuper = !mce.isImplicitThis() && (ve.isThisExpression() || ve.isSuperExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,270,isExplicitSuper = ve.isSuperExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,273,if (mce.isImplicitThis() || isExplicitThisOrSuper) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,274,if (mce.isImplicitThis()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,284,if (ret != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,286,setSourcePosition(ret, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,287,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,291,MethodCallExpression ret = new MethodCallExpression(new ClassExpression(currentClass.getSuperClass()), method, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,292,setSourcePosition(ret, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,293,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,296,if (method instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,297,ConstantExpression ce = (ConstantExpression) method;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,298,Object value = ce.getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,299,if (value instanceof String) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,300,boolean foundInstanceMethod = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,301,String methodName = (String) value;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,302,boolean inInnerClass = isInnerClass(currentClass);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,303,if (currentMethod != null && !currentMethod.isStatic()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,304,if (currentClass.hasPossibleMethod(methodName, args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,305,foundInstanceMethod = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,308,boolean lookForPossibleStaticMethod = !methodName.equals("call");
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,309,lookForPossibleStaticMethod &= !foundInstanceMethod;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,310,lookForPossibleStaticMethod |= inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,311,lookForPossibleStaticMethod &= !inInnerClass;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,312,if (!inClosure && lookForPossibleStaticMethod &&
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,314,|| hasPossibleStaticProperty(currentClass, methodName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,315,StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass, methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,316,setSourcePosition(smce, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,317,return smce;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,319,if (!inClosure && inInnerClass && inSpecialConstructorCall && mce.isImplicitThis() && !foundInstanceMethod) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,320,if (currentClass.getOuterClass().hasPossibleMethod(methodName, args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,321,object = new PropertyExpression(new ClassExpression(currentClass.getOuterClass()), new ConstantExpression("this"));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,323,|| hasPossibleStaticProperty(currentClass.getOuterClass(), methodName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,324,StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass.getOuterClass(), methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,325,setSourcePosition(smce, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,326,return smce;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,333,MethodCallExpression result = new MethodCallExpression(object, method, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,334,result.setSafe(mce.isSafe());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,335,result.setImplicitThis(mce.isImplicitThis());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,336,result.setSpreadSafe(mce.isSpreadSafe());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,337,result.setMethodTarget(mce.getMethodTarget());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,339,result.setGenericsTypes(mce.getGenericsTypes());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,340,setSourcePosition(result, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,341,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,344,protected Expression transformConstructorCallExpression(ConstructorCallExpression cce) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,345,inSpecialConstructorCall = cce.isSpecialCall();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,346,Expression expression = cce.getArguments();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,347,if (expression instanceof TupleExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,348,TupleExpression tuple = (TupleExpression) expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,349,if (tuple.getExpressions().size() == 1) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,350,expression = tuple.getExpression(0);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,351,if (expression instanceof NamedArgumentListExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,352,NamedArgumentListExpression namedArgs = (NamedArgumentListExpression) expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,353,List<MapEntryExpression> entryExpressions = namedArgs.getMapEntryExpressions();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,354,for (int i = 0; i < entryExpressions.size(); i++) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,355,entryExpressions.set(i, (MapEntryExpression) transformMapEntryExpression(entryExpressions.get(i), cce.getType()));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,360,Expression ret = cce.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,361,inSpecialConstructorCall = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,362,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,365,protected Expression transformClosureExpression(ClosureExpression ce) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,366,boolean oldInClosure = inClosure;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,367,inClosure = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,368,if (ce.getParameters() != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,369,for (Parameter p : ce.getParameters()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,370,if (p.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,371,p.setInitialExpression(transform(p.getInitialExpression()));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,375,Statement code = ce.getCode();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,376,if (code != null) code.visit(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,377,inClosure = oldInClosure;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,378,return ce;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,381,protected Expression transformPropertyExpression(PropertyExpression pe) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,383,&& pe.getObjectExpression() instanceof VariableExpression
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,384,&& ((VariableExpression) pe.getObjectExpression()).isSuperExpression()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,385,PropertyExpression pexp = new PropertyExpression(
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,386,new ClassExpression(currentClass.getSuperClass()),
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,388,);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,389,pexp.setSourcePosition(pe);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,390,return pexp;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,392,boolean oldInPropertyExpression = inPropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,393,Expression oldFoundArgs = foundArgs;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,394,Expression oldFoundConstant = foundConstant;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,395,inPropertyExpression = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,396,foundArgs = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,397,foundConstant = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,398,Expression objectExpression = transform(pe.getObjectExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,399,boolean candidate = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,400,if (objectExpression instanceof MethodCallExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,401,candidate = ((MethodCallExpression)objectExpression).isImplicitThis();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,404,if (foundArgs != null && foundConstant != null && candidate) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,405,Expression result = findStaticMethodImportFromModule(foundConstant, foundArgs);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,406,if (result != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,407,objectExpression = result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,408,objectExpression.setSourcePosition(pe);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,411,inPropertyExpression = oldInPropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,412,foundArgs = oldFoundArgs;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,413,foundConstant = oldFoundConstant;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,414,pe.setObjectExpression(objectExpression);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,415,return pe;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,418,private Expression findStaticFieldOrPropAccessorImportFromModule(String name) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,419,ModuleNode module = currentClass.getModule();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,420,if (module == null) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,421,Map<String, ImportNode> importNodes = module.getStaticImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,422,Expression expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,423,String accessorName = getAccessorName(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,428,if (importNodes.containsKey(accessorName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,429,expression = findStaticProperty(importNodes, accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,430,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,432,if (accessorName.startsWith("get")) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,433,accessorName = "is" + accessorName.substring(3);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,434,if (importNodes.containsKey(accessorName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,435,expression = findStaticProperty(importNodes, accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,436,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,443,if (importNodes.containsKey(name)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,444,ImportNode importNode = importNodes.get(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,445,expression = findStaticPropertyAccessor(importNode.getType(), importNode.getFieldName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,446,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,447,expression = findStaticField(importNode.getType(), importNode.getFieldName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,448,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,453,for (ImportNode importNode : module.getStaticStarImports().values()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,454,ClassNode node = importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,455,expression = findStaticPropertyAccessor(node, name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,456,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,457,expression = findStaticField(node, name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,458,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,460,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,463,private Expression findStaticProperty(Map<String, ImportNode> importNodes, String accessorName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,464,Expression result = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,465,ImportNode importNode = importNodes.get(accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,466,ClassNode importClass = importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,467,String importMember = importNode.getFieldName();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,468,result = findStaticPropertyAccessorByFullName(importClass, importMember);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,469,if (result == null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,470,result = findStaticPropertyAccessor(importClass, getPropNameForAccessor(importMember));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,472,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,475,private Expression findStaticMethodImportFromModule(Expression method, Expression args) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,476,ModuleNode module = currentClass.getModule();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,477,if (module == null || !(method instanceof ConstantExpression)) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,478,Map<String, ImportNode> importNodes = module.getStaticImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,479,ConstantExpression ce = (ConstantExpression) method;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,480,Expression expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,481,Object value = ce.getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,483,if (!(value instanceof String)) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,484,final String name = (String) value;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,488,if (importNodes.containsKey(name)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,489,ImportNode importNode = importNodes.get(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,490,expression = findStaticMethod(importNode.getType(), importNode.getFieldName(), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,491,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,492,expression = findStaticPropertyAccessorGivenArgs(importNode.getType(), getPropNameForAccessor(importNode.getFieldName()), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,493,if (expression != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,494,return new StaticMethodCallExpression(importNode.getType(), importNode.getFieldName(), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,500,if (isValidAccessorName(name)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,501,String propName = getPropNameForAccessor(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,502,if (importNodes.containsKey(propName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,503,ImportNode importNode = importNodes.get(propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,504,ClassNode importClass = importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,505,String importMember = importNode.getFieldName();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,506,expression = findStaticMethod(importClass, prefix(name) + capitalize(importMember), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,507,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,508,expression = findStaticPropertyAccessorGivenArgs(importClass, importMember, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,509,if (expression != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,510,return new StaticMethodCallExpression(importClass, prefix(name) + capitalize(importMember), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,514,Map<String, ImportNode> starImports = module.getStaticStarImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,515,ClassNode starImportType;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,516,if (currentClass.isEnum() && starImports.containsKey(currentClass.getName())) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,517,ImportNode importNode = starImports.get(currentClass.getName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,518,starImportType = importNode == null ? null : importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,519,expression = findStaticMethod(starImportType, name, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,520,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,522,for (ImportNode importNode : starImports.values()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,523,starImportType = importNode == null ? null : importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,524,expression = findStaticMethod(starImportType, name, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,525,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,526,expression = findStaticPropertyAccessorGivenArgs(starImportType, getPropNameForAccessor(name), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,527,if (expression != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,528,return new StaticMethodCallExpression(starImportType, name, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,532,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,535,private static String prefix(String name) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,536,return name.startsWith("is") ? "is" : name.substring(0, 3);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,539,private String getAccessorName(String name) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,540,return (inLeftExpression ? "set" : "get") + capitalize(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,543,private Expression findStaticPropertyAccessorGivenArgs(ClassNode staticImportType, String propName, Expression args) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,545,return findStaticPropertyAccessor(staticImportType, propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,548,private Expression findStaticPropertyAccessor(ClassNode staticImportType, String propName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,549,String accessorName = getAccessorName(propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,550,Expression accessor = findStaticPropertyAccessorByFullName(staticImportType, accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,551,if (accessor == null && accessorName.startsWith("get")) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,552,accessor = findStaticPropertyAccessorByFullName(staticImportType, "is" + accessorName.substring(3));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,554,if (accessor == null && hasStaticProperty(staticImportType, propName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,557,accessor = new StaticMethodCallExpression(staticImportType, accessorName, ArgumentListExpression.EMPTY_ARGUMENTS);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,558,else
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,559,accessor = new PropertyExpression(new ClassExpression(staticImportType), propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,561,return accessor;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,564,private Expression findStaticPropertyAccessorByFullName(ClassNode staticImportType, String accessorMethodName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,566,ArgumentListExpression dummyArgs = new ArgumentListExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,567,dummyArgs.addExpression(new EmptyExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,568,return findStaticMethod(staticImportType, accessorMethodName, (inLeftExpression ? dummyArgs : ArgumentListExpression.EMPTY_ARGUMENTS));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,571,private static Expression findStaticField(ClassNode staticImportType, String fieldName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,572,if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,573,FieldNode field = getField(staticImportType, fieldName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,575,return new PropertyExpression(new ClassExpression(staticImportType), fieldName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,577,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,598,private static Expression findStaticMethod(ClassNode staticImportType, String methodName, Expression args) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,599,if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,600,if (staticImportType.hasPossibleStaticMethod(methodName, args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,601,return new StaticMethodCallExpression(staticImportType, methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,604,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,607,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,608,return source;
src/main/java/org/codehaus/groovy/transform/AutoFinalASTTransformation.java,68,Parameter[] origParams = expression.getParameters();
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,34,Parameter[] parameters = expr.getParameters();
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,35,if (parameters!=null) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,36,for (Parameter parameter : parameters) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,37,if (parameter.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,38,parameter.setInitialExpression(transformer.transform(parameter.getInitialExpression()));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2272,Parameter[] parameters = expression.getParameters();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2273,if (parameters != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2274,for (Parameter parameter : parameters) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2275,typeCheckingContext.controlStructureVariables.remove(parameter);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4068,Parameter[] closureParams = closureExpression.getParameters();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4069,Parameter[] methodParams = sam.getParameters();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4070,for (int i = 0; i < closureParams.length; i++) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4071,ClassNode fromClosure = closureParams[i].getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4072,ClassNode fromMethod = methodParams[i].getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4073,extractGenericsConnections(connections, fromClosure, fromMethod);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4075,ClassNode result = applyGenericsContext(connections, samUsage.redirect());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4076,return result;
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,39,super("<init>",modifiers,ClassHelper.VOID_TYPE,parameters,exceptions,code);
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,42,VariableScope scope = new VariableScope();
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,43,for (int i = 0; i < parameters.length; i++) {
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,44,scope.putDeclaredVariable(parameters[i]);
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,46,this.setVariableScope(scope);
src/main/java/org/codehaus/groovy/ast/MethodNode.java,61,VariableScope scope = new VariableScope();
src/main/java/org/codehaus/groovy/ast/MethodNode.java,62,setVariableScope(scope);
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,19,package org.codehaus.groovy.reflection;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,21,import java.util.Collection;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,22,import java.util.Collections;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,23,import java.util.HashSet;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,24,import java.util.Set;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,31,public class ReflectionUtils {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,34,private static final Set<String> IGNORED_PACKAGES = new HashSet<String>();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,36,static {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,38,IGNORED_PACKAGES.add("groovy.lang");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,39,IGNORED_PACKAGES.add("org.codehaus.groovy.reflection");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,40,IGNORED_PACKAGES.add("org.codehaus.groovy.runtime.callsite");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,41,IGNORED_PACKAGES.add("org.codehaus.groovy.runtime.metaclass");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,42,IGNORED_PACKAGES.add("org.codehaus.groovy.runtime");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,43,IGNORED_PACKAGES.add("sun.reflect");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,44,IGNORED_PACKAGES.add("java.lang.invoke");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,45,IGNORED_PACKAGES.add("org.codehaus.groovy.vmplugin.v7");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,48,private static final ClassContextHelper HELPER = new ClassContextHelper();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,59,public static boolean isCallingClassReflectionAvailable() {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,60,return true;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,68,public static Class getCallingClass() {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,69,return getCallingClass(1);
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,81,public static Class getCallingClass(int matchLevel) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,82,return getCallingClass(matchLevel, Collections.EMPTY_SET);
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,96,public static Class getCallingClass(int matchLevel, Collection<String> extraIgnoredPackages) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,97,Class[] classContext = HELPER.getClassContext();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,99,int depth = 0;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,100,try {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,101,Class c;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,104,Class sc;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,105,do {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,106,do {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,107,c = classContext[depth++];
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,108,if (c != null) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,109,sc = c.getSuperclass();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,111,sc = null;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,114,|| superClassShouldBeIgnored(sc));
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,116,return c;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,118,return null;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,122,private static boolean superClassShouldBeIgnored(Class sc) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,123,return ((sc != null) && (sc.getPackage() != null) && "org.codehaus.groovy.runtime.callsite".equals(sc.getPackage().getName()));
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,126,private static boolean classShouldBeIgnored(Class c, Collection<String> extraIgnoredPackages) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,129,|| (c.getPackage() != null
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,131,|| extraIgnoredPackages.contains(c.getPackage().getName())))));
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,134,private static class ClassContextHelper extends SecurityManager {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,136,public Class[] getClassContext() {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,137,return super.getClassContext();
src/main/java/org/codehaus/groovy/runtime/EncodingGroovyMethods.java,29,import java.math.BigInteger;
src/main/java/org/codehaus/groovy/runtime/EncodingGroovyMethods.java,418,return String.format("%032x", new BigInteger(1, md.digest()));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,19,package org.codehaus.groovy.classgen;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,21,import org.codehaus.groovy.ast.ClassHelper;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,22,import org.codehaus.groovy.ast.ClassNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,23,import org.codehaus.groovy.ast.ConstructorNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,24,import org.codehaus.groovy.ast.FieldNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,25,import org.codehaus.groovy.ast.InnerClassNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,26,import org.codehaus.groovy.ast.MethodNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,27,import org.codehaus.groovy.ast.Parameter;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,28,import org.codehaus.groovy.ast.expr.ClassExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,29,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,30,import org.codehaus.groovy.ast.expr.Expression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,31,import org.codehaus.groovy.ast.expr.TupleExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,32,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,33,import org.codehaus.groovy.ast.stmt.BlockStatement;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,34,import org.codehaus.groovy.ast.stmt.ExpressionStatement;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,35,import org.codehaus.groovy.ast.stmt.Statement;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,36,import org.codehaus.groovy.classgen.asm.BytecodeHelper;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,37,import org.codehaus.groovy.control.CompilationUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,38,import org.codehaus.groovy.control.SourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,39,import org.objectweb.asm.MethodVisitor;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,40,import org.objectweb.asm.Opcodes;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,42,import java.util.List;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,44,import static org.codehaus.groovy.ast.ClassHelper.CLOSURE_TYPE;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,46,public class InnerClassCompletionVisitor extends InnerClassVisitorHelper implements Opcodes {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,48,private final SourceUnit sourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,49,private ClassNode classNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,50,private FieldNode thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,52,private static final String
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,53,CLOSURE_INTERNAL_NAME   = BytecodeHelper.getClassInternalName(CLOSURE_TYPE),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,54,CLOSURE_DESCRIPTOR      = BytecodeHelper.getTypeDescription(CLOSURE_TYPE);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,56,public InnerClassCompletionVisitor(CompilationUnit cu, SourceUnit su) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,57,sourceUnit = su;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,61,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,62,return sourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,66,public void visitClass(ClassNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,67,this.classNode = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,68,thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,69,InnerClassNode innerClass = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,70,if (!node.isEnum() && !node.isInterface() && node instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,71,innerClass = (InnerClassNode) node;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,72,thisField = innerClass.getField("this$0");
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,73,if (innerClass.getVariableScope() == null && innerClass.getDeclaredConstructors().isEmpty()) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,75,innerClass.addConstructor(ACC_PUBLIC, Parameter.EMPTY_ARRAY, null, null);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,78,if (node.isEnum() || node.isInterface()) return;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,80,if (node.getInnerClasses().hasNext()) addDispatcherMethods(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,81,if (innerClass == null) return;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,82,super.visitClass(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,83,addDefaultMethods(innerClass);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,87,public void visitConstructor(ConstructorNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,88,addThisReference(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,89,super.visitConstructor(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,92,private static String getTypeDescriptor(ClassNode node, boolean isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,93,return BytecodeHelper.getTypeDescription(getClassNode(node, isStatic));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,96,private static String getInternalName(ClassNode node, boolean isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,97,return BytecodeHelper.getClassInternalName(getClassNode(node, isStatic));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,100,private static void addDispatcherMethods(ClassNode classNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,101,final int objectDistance = getObjectDistance(classNode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,107,Parameter[] parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,108,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,111,MethodNode method = classNode.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,113,ACC_PUBLIC + ACC_SYNTHETIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,114,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,115,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,116,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,117,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,118,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,120,BlockStatement block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,121,setMethodDispatcherCode(block, VariableExpression.THIS_EXPRESSION, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,122,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,125,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,126,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,129,method = classNode.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,131,ACC_PUBLIC + ACC_SYNTHETIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,132,ClassHelper.VOID_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,133,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,134,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,135,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,136,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,138,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,139,setPropertySetterDispatcher(block, VariableExpression.THIS_EXPRESSION, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,140,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,143,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,146,method = classNode.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,148,ACC_PUBLIC + ACC_SYNTHETIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,149,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,150,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,151,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,152,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,153,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,155,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,156,setPropertyGetterDispatcher(block, VariableExpression.THIS_EXPRESSION, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,157,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,160,private void getThis(MethodVisitor mv, String classInternalName, String outerClassDescriptor, String innerClassInternalName) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,161,mv.visitVarInsn(ALOAD, 0);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,162,if (CLOSURE_TYPE.equals(thisField.getType())) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,163,mv.visitFieldInsn(GETFIELD, classInternalName, "this$0", CLOSURE_DESCRIPTOR);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,164,mv.visitMethodInsn(INVOKEVIRTUAL, CLOSURE_INTERNAL_NAME, "getThisObject", "()Ljava/lang/Object;", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,165,mv.visitTypeInsn(CHECKCAST, innerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,167,mv.visitFieldInsn(GETFIELD, classInternalName, "this$0", outerClassDescriptor);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,171,private void addDefaultMethods(InnerClassNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,172,final boolean isStatic = isStatic(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,174,ClassNode outerClass = node.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,175,final String classInternalName = org.codehaus.groovy.classgen.asm.BytecodeHelper.getClassInternalName(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,176,final String outerClassInternalName = getInternalName(outerClass, isStatic);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,177,final String outerClassDescriptor = getTypeDescriptor(outerClass, isStatic);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,178,final int objectDistance = getObjectDistance(outerClass);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,181,Parameter[] parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,182,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,186,String methodName = "methodMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,188,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,190,MethodNode method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,191,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,192,Opcodes.ACC_PUBLIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,193,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,194,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,195,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,196,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,197,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,199,BlockStatement block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,200,if (isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,201,setMethodDispatcherCode(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,203,block.addStatement(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,204,new BytecodeSequence(new BytecodeInstruction() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,205,public void visit(MethodVisitor mv) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,206,getThis(mv,classInternalName,outerClassDescriptor,outerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,207,mv.visitVarInsn(ALOAD, 1);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,208,mv.visitVarInsn(ALOAD, 2);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,209,mv.visitMethodInsn(INVOKEVIRTUAL, outerClassInternalName, "this$dist$invoke$" + objectDistance, "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,210,mv.visitInsn(ARETURN);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,213,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,215,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,218,methodName = "$static_methodMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,220,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,222,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,223,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,224,Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,225,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,226,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,227,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,228,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,229,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,231,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,232,setMethodDispatcherCode(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,233,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,236,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,237,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,241,methodName = "propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,243,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,245,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,246,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,247,Opcodes.ACC_PUBLIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,248,ClassHelper.VOID_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,249,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,250,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,251,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,252,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,254,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,255,if (isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,256,setPropertySetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,258,block.addStatement(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,259,new BytecodeSequence(new BytecodeInstruction() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,260,public void visit(MethodVisitor mv) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,261,getThis(mv,classInternalName,outerClassDescriptor,outerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,262,mv.visitVarInsn(ALOAD, 1);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,263,mv.visitVarInsn(ALOAD, 2);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,264,mv.visitMethodInsn(INVOKEVIRTUAL, outerClassInternalName, "this$dist$set$" + objectDistance, "(Ljava/lang/String;Ljava/lang/Object;)V", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,265,mv.visitInsn(RETURN);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,268,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,270,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,273,methodName = "$static_propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,275,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,277,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,278,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,279,Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,280,ClassHelper.VOID_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,281,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,282,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,283,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,284,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,286,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,287,setPropertySetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,288,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,291,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,295,methodName = "propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,297,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,299,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,300,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,301,Opcodes.ACC_PUBLIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,302,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,303,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,304,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,305,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,306,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,308,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,309,if (isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,310,setPropertyGetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,312,block.addStatement(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,313,new BytecodeSequence(new BytecodeInstruction() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,314,public void visit(MethodVisitor mv) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,315,getThis(mv,classInternalName,outerClassDescriptor,outerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,316,mv.visitVarInsn(ALOAD, 1);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,317,mv.visitMethodInsn(INVOKEVIRTUAL, outerClassInternalName, "this$dist$get$" + objectDistance, "(Ljava/lang/String;)Ljava/lang/Object;", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,318,mv.visitInsn(ARETURN);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,321,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,323,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,326,methodName = "$static_propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,328,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,330,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,331,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,332,Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,333,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,334,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,335,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,336,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,337,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,339,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,340,setPropertyGetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,341,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,348,private void addCompilationErrorOnCustomMethodNode(InnerClassNode node, String methodName, Parameter[] parameters) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,349,MethodNode existingMethodNode = node.getMethod(methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,352,addError("\"" +methodName + "\" implementations are not supported on static inner classes as " +
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,355,existingMethodNode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,359,private void addThisReference(ConstructorNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,360,if (!shouldHandleImplicitThisForInnerClass(classNode)) return;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,361,Statement code = node.getCode();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,366,Parameter[] params = node.getParameters();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,367,Parameter[] newParams = new Parameter[params.length + 1];
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,368,System.arraycopy(params, 0, newParams, 1, params.length);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,369,String name = getUniqueName(params, node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,371,Parameter thisPara = new Parameter(classNode.getOuterClass().getPlainNodeReference(), name);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,372,newParams[0] = thisPara;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,373,node.setParameters(newParams);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,375,BlockStatement block = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,376,if (code == null) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,377,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,379,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,380,block.addStatement(code);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,382,block = (BlockStatement) code;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,384,BlockStatement newCode = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,385,addFieldInit(thisPara, thisField, newCode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,386,ConstructorCallExpression cce = getFirstIfSpecialConstructorCall(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,387,if (cce == null) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,388,cce = new ConstructorCallExpression(ClassNode.SUPER, new TupleExpression());
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,389,block.getStatements().add(0, new ExpressionStatement(cce));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,391,if (shouldImplicitlyPassThisPara(cce)) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,393,TupleExpression args = (TupleExpression) cce.getArguments();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,394,List<Expression> expressions = args.getExpressions();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,395,VariableExpression ve = new VariableExpression(thisPara.getName());
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,396,ve.setAccessedVariable(thisPara);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,397,expressions.add(0, ve);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,399,if (cce.isSuperCall()) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,402,block.getStatements().add(1, newCode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,404,node.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,407,private boolean shouldImplicitlyPassThisPara(ConstructorCallExpression cce) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,408,boolean pass = false;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,409,ClassNode superCN = classNode.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,410,if (cce.isThisCall()) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,411,pass = true;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,415,if (!superCN.isEnum() && !superCN.isInterface() && superCN instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,416,InnerClassNode superInnerCN = (InnerClassNode) superCN;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,417,if (!isStatic(superInnerCN) && classNode.getOuterClass().isDerivedFrom(superCN.getOuterClass())) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,418,pass = true;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,422,return pass;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,425,private String getUniqueName(Parameter[] params, ConstructorNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,426,String namePrefix = "$p";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,427,outer:
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,428,for (int i = 0; i < 100; i++) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,429,namePrefix = namePrefix + "$";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,430,for (Parameter p : params) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,431,if (p.getName().equals(namePrefix)) continue outer;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,433,return namePrefix;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,435,addError("unable to find a unique prefix name for synthetic this reference in inner class constructor", node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,436,return namePrefix;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,439,private static ConstructorCallExpression getFirstIfSpecialConstructorCall(BlockStatement code) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,440,if (code == null) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,442,final List<Statement> statementList = code.getStatements();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,443,if (statementList.isEmpty()) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,445,final Statement statement = statementList.get(0);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,446,if (!(statement instanceof ExpressionStatement)) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,448,Expression expression = ((ExpressionStatement) statement).getExpression();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,449,if (!(expression instanceof ConstructorCallExpression)) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,450,ConstructorCallExpression cce = (ConstructorCallExpression) expression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,451,if (cce.isSpecialCall()) return cce;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,452,return null;
src/main/java/org/codehaus/groovy/transform/SortableASTTransformation.java,185,classNode.getModule().addClass(cmpClass);
src/main/groovy/groovy/beans/VetoableASTTransformation.java,38,import org.codehaus.groovy.runtime.MetaClassHelper;
src/main/groovy/groovy/beans/VetoableASTTransformation.java,171,String getterName = "get" + MetaClassHelper.capitalize(propertyName);
src/main/groovy/groovy/beans/VetoableASTTransformation.java,172,MethodNode setter = classNode.getSetterMethod("set" + MetaClassHelper.capitalize(propertyName));
src/main/groovy/groovy/beans/VetoableASTTransformation.java,213,String setterName = "set" + MetaClassHelper.capitalize(propertyNode.getName());
src/main/groovy/groovy/beans/VetoableASTTransformation.java,323,declaringClass.addMethod(setter);
src/main/groovy/groovy/beans/VetoableASTTransformation.java,357,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,370,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,383,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,393,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,408,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,421,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,434,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,38,import org.codehaus.groovy.runtime.MetaClassHelper;
src/main/groovy/groovy/beans/BindableASTTransformation.java,187,String getterName = "get" + MetaClassHelper.capitalize(propertyName);
src/main/groovy/groovy/beans/BindableASTTransformation.java,188,MethodNode setter = classNode.getSetterMethod("set" + MetaClassHelper.capitalize(propertyName));
src/main/groovy/groovy/beans/BindableASTTransformation.java,216,String setterName = "set" + MetaClassHelper.capitalize(propertyNode.getName());
src/main/groovy/groovy/beans/BindableASTTransformation.java,258,declaringClass.addMethod(setter);
src/main/groovy/groovy/beans/BindableASTTransformation.java,344,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,357,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,370,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,380,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,393,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,406,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,419,declaringClass.addMethod(
src/main/java/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,586,|| (right.getClass() != Object.class && right.getClass().isAssignableFrom(left.getClass())) //GROOVY-4046
src/main/java/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,587,) {
src/main/java/org/codehaus/groovy/control/customizers/DelegatingCustomizer.java,33,public abstract class DelegatingCustomizer extends CompilationCustomizer {
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,136,if (genericType.isGenericsPlaceHolder()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,19,package org.codehaus.groovy.control;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,21,import org.codehaus.groovy.ast.ClassCodeVisitorSupport;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,22,import org.codehaus.groovy.ast.ClassNode;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,23,import org.codehaus.groovy.ast.CodeVisitorSupport;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,24,import org.codehaus.groovy.ast.DynamicVariable;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,25,import org.codehaus.groovy.ast.FieldNode;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,26,import org.codehaus.groovy.ast.MethodNode;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,27,import org.codehaus.groovy.ast.Parameter;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,28,import org.codehaus.groovy.ast.Variable;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,29,import org.codehaus.groovy.ast.expr.ClosureExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,30,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,31,import org.codehaus.groovy.ast.expr.Expression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,32,import org.codehaus.groovy.ast.expr.MethodCallExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,33,import org.codehaus.groovy.ast.expr.PropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,34,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,36,import java.util.ArrayList;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,37,import java.util.Arrays;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,38,import java.util.HashSet;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,39,import java.util.List;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,40,import java.util.Set;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,42,import static org.apache.groovy.ast.tools.ClassNodeUtils.isInnerClass;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,47,public class StaticVerifier extends ClassCodeVisitorSupport {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,48,private boolean inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,49,private boolean inPropertyExpression; // TODO use it or lose it
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,50,private boolean inClosure;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,51,private MethodNode currentMethod;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,52,private SourceUnit source;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,54,public void visitClass(ClassNode node, SourceUnit source) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,55,this.source = source;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,56,super.visitClass(node);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,60,public void visitVariableExpression(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,61,Variable v = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,62,if (v instanceof DynamicVariable) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,63,if (!inPropertyExpression || inSpecialConstructorCall) addStaticVariableError(ve);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,68,public void visitClosureExpression(ClosureExpression ce) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,69,boolean oldInClosure = inClosure;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,70,inClosure = true;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,71,super.visitClosureExpression(ce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,72,inClosure = oldInClosure;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,76,public void visitConstructorCallExpression(ConstructorCallExpression cce) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,77,boolean oldIsSpecialConstructorCall = inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,78,inSpecialConstructorCall = cce.isSpecialCall();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,79,super.visitConstructorCallExpression(cce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,80,inSpecialConstructorCall = oldIsSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,84,public void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,85,MethodNode oldCurrentMethod = currentMethod;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,86,currentMethod = node;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,87,super.visitConstructorOrMethod(node, isConstructor);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,88,if (isConstructor) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,89,final Set<String> exceptions = new HashSet<String>();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,90,for (final Parameter param : node.getParameters()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,91,exceptions.add(param.getName());
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,92,if (param.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,93,param.getInitialExpression().visit(new CodeVisitorSupport() {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,95,public void visitVariableExpression(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,96,if (exceptions.contains(ve.getName())) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,97,Variable av = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,98,if (av instanceof DynamicVariable || !av.isInStaticContext()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,99,addVariableError(ve);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,104,public void visitMethodCallExpression(MethodCallExpression call) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,105,Expression objectExpression = call.getObjectExpression();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,106,if (objectExpression instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,107,VariableExpression ve = (VariableExpression) objectExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,108,if (ve.isThisExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,109,addError("Can't access instance method '" + call.getMethodAsString() + "' for a constructor parameter default value", param);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,110,return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,113,super.visitMethodCallExpression(call);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,117,public void visitClosureExpression(ClosureExpression expression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,124,currentMethod = oldCurrentMethod;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,128,public void visitMethodCallExpression(MethodCallExpression mce) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,129,if (inSpecialConstructorCall && !isInnerClass(currentMethod.getDeclaringClass())) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,130,Expression objectExpression = mce.getObjectExpression();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,131,if (objectExpression instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,132,VariableExpression ve = (VariableExpression) objectExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,133,if (ve.isThisExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,134,addError("Can't access instance method '" + mce.getMethodAsString() + "' before the class is constructed", mce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,135,return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,139,super.visitMethodCallExpression(mce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,143,public void visitPropertyExpression(PropertyExpression pe) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,144,if (!inSpecialConstructorCall) checkStaticScope(pe);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,148,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,149,return source;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,153,private void checkStaticScope(PropertyExpression pe) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,154,if (inClosure) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,155,for (Expression it = pe; it != null; it = ((PropertyExpression) it).getObjectExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,156,if (it instanceof PropertyExpression) continue;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,157,if (it instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,158,addStaticVariableError((VariableExpression) it);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,160,return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,164,private void addStaticVariableError(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,167,if (!inSpecialConstructorCall && (inClosure || !ve.isInStaticContext())) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,168,if (ve.isThisExpression() || ve.isSuperExpression()) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,169,Variable v = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,170,if (currentMethod != null && currentMethod.isStatic()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,171,FieldNode fieldNode = getDeclaredOrInheritedField(currentMethod.getDeclaringClass(), ve.getName());
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,172,if (fieldNode != null && fieldNode.isStatic()) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,174,if (v != null && !(v instanceof DynamicVariable) && v.isInStaticContext()) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,175,addVariableError(ve);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,178,private void addVariableError(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,179,addError("Apparent variable '" + ve.getName() + "' was found in a static scope but doesn't refer" +
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,187,private static FieldNode getDeclaredOrInheritedField(ClassNode cn, String fieldName) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,188,ClassNode node = cn;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,189,while (node != null) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,190,FieldNode fn = node.getDeclaredField(fieldName);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,191,if (fn != null) return fn;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,192,List<ClassNode> interfacesToCheck = new ArrayList<ClassNode>(Arrays.asList(node.getInterfaces()));
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,193,while (!interfacesToCheck.isEmpty()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,194,ClassNode nextInterface = interfacesToCheck.remove(0);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,195,fn = nextInterface.getDeclaredField(fieldName);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,196,if (fn != null) return fn;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,197,interfacesToCheck.addAll(Arrays.asList(nextInterface.getInterfaces()));
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,199,node = node.getSuperClass();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,201,return null;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1256,if (method.getParameters().length == count && !method.isStatic()) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1281,if (method.getParameters().length == count) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1284,if (!args.getType().isDerivedFrom(method.getParameters()[i].getType())) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1300,if (!res.getParameters()[i].getType().equals(method.getParameters()[i].getType())) {
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,80,ClassNode helper = Traits.findHelper(type);
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,81,Parameter[] params = new Parameter[argumentTypes.length + 1];
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,82,params[0] = new Parameter(ClassHelper.CLASS_Type.getPlainNodeReference(), "staticSelf");
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,83,for (int i = 1; i < params.length; i++) {
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,84,params[i] = new Parameter(argumentTypes[i-1], "p" + i);
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,86,MethodNode method = helper.getDeclaredMethod(name, params);
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,87,if (method != null) {
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,88,return Collections.singletonList(makeDynamic(call, method.getReturnType()));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1751,Statement code = statement(node.getNextSibling());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1753,AST variableNode = node.getNextSibling();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1760,CatchStatement answer = new CatchStatement(catchParameter, code);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1771,CatchStatement answer = new CatchStatement(catchParameter, code);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,167,Parameter newParam = new Parameter(fixedType, "arg" + i);
src/main/groovy/groovy/transform/options/ImmutablePropertyHandler.java,132,return createConstructorStatement(xform, cNode, pNode, namedArgsMap != null);
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,55,VariableExpression implicitThis = new VariableExpression("this");
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,56,PropertyExpression pexp = new PropertyExpression(implicitThis, expr.getName());
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,62,implicitThis.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, owner);
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,63,implicitThis.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, val);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,485,if (fn != null && Modifier.isPrivate(fn.getModifiers()) &&
src/main/java/org/codehaus/groovy/ast/CompileUnit.java,93,public List getClasses() {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,316,for (ClassNode node : classNode.getAllInterfaces()) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,317,if (Traits.isTrait(node)) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,318,List<MethodNode> traitMethods = node.getMethods();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,319,for (MethodNode traitMethod : traitMethods) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,320,MethodNode method = classNode.getMethod(traitMethod.getName(), traitMethod.getParameters());
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,321,if (method == null) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,322,for (MethodNode methodNode : propertyMethods) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,323,if (methodNode.getName().equals(traitMethod.getName())) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,324,boolean sameParams = sameParameterTypes(methodNode);
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,325,if (sameParams) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,326,method = methodNode;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,327,break;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,332,printMethod(out, classNode, traitMethod);
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,341,private static boolean sameParameterTypes(final MethodNode methodNode) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,342,Parameter[] a = methodNode.getParameters();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,343,Parameter[] b = methodNode.getParameters();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,344,boolean sameParams = a.length == b.length;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,346,for (int i = 0; i < a.length; i++) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,347,if (!a[i].getType().equals(b[i].getType())) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,108,List<ClassNode> traits = findTraits(cNode);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,121,private static List<ClassNode> findTraits(ClassNode cNode) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,122,LinkedHashSet<ClassNode> interfaces = new LinkedHashSet<ClassNode>();
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,123,Traits.collectAllInterfacesReverseOrder(cNode, interfaces);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,124,List<ClassNode> traits = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,125,for (ClassNode candidate : interfaces) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,126,if (Traits.isAnnotatedWithTrait(candidate)) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,127,traits.add(candidate);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,130,return traits;
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,155,opcode = INVOKESPECIAL;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,351,if (existingMethodNode != null && !existingMethodNode.isSynthetic())  {
src/main/groovy/groovy/transform/options/DefaultPropertyHandler.java,97,Expression var = callX(varX(map), "get", nameArg);
src/main/groovy/groovy/transform/options/DefaultPropertyHandler.java,98,return ifS(callX(varX(map), "containsKey", nameArg), useSetters ?
src/main/java/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java,443,ClassNode componentType = inferLoopElementType(collectionType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1803,ClassNode componentType = inferLoopElementType(collectionType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1848,componentType = ClassHelper.Character_TYPE;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,331,if (method==null) {
subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDocAssembler.java,74,if (file != null) {
src/main/java/org/codehaus/groovy/control/OptimizerVisitor.java,118,Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_FINAL,
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,42,import java.lang.reflect.Field;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,43,import java.lang.reflect.Modifier;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,92,Expression attrExpr = transformInlineConstants(entry.getValue());
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,93,entry.setValue(attrExpr);
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,135,private Expression transformInlineConstants(Expression exp) {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,136,if (exp instanceof PropertyExpression) {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,137,PropertyExpression pe = (PropertyExpression) exp;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,138,if (pe.getObjectExpression() instanceof ClassExpression) {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,139,ClassExpression ce = (ClassExpression) pe.getObjectExpression();
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,140,ClassNode type = ce.getType();
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,142,return exp;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,144,try {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,146,if (field != null && Modifier.isStatic(field.getModifiers()) && Modifier.isFinal(field.getModifiers())) {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,147,return new ConstantExpression(field.get(null));
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,154,ListExpression le = (ListExpression) exp;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,155,ListExpression result = new ListExpression();
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,156,for (Expression e : le.getExpressions()) {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,157,result.addExpression(transformInlineConstants(e));
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,159,return result;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,161,return exp;
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,253,if (exp instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,254,return (ConstantExpression) exp;
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1124,if (initialValueExpression instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1125,ConstantExpression cexp = (ConstantExpression) initialValueExpression;
src/main/java/org/codehaus/groovy/control/AnnotationConstantsVisitor.java,92,return val;
src/main/java/org/codehaus/groovy/ast/decompiled/AsmDecompiler.java,153,final FieldStub stub = new FieldStub(name, access, desc, signature);
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,152,return new FieldNode(field.fieldName, field.accessModifiers, type[0], owner, null);
src/main/java/org/codehaus/groovy/classgen/AnnotationVisitor.java,145,Field field = type.getTypeClass().getField(pe.getPropertyAsString());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1904,if (type.getGenericsTypes() == null) return gt;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1905,ClassNode newType = type.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1906,newType.setGenericsPlaceHolder(type.isGenericsPlaceHolder());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1907,newType.setGenericsTypes(applyGenericsContext(spec, type.getGenericsTypes()));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1908,GenericsType newGT = new GenericsType(newType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1909,return newGT;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,363,while (current instanceof InnerClassNode && !classNode.equals(current)) {
src/main/java/org/codehaus/groovy/classgen/asm/ClosureWriter.java,256,VariableExpression outer = new VariableExpression("_outerInstance");
src/main/java/org/codehaus/groovy/classgen/asm/ClosureWriter.java,259,VariableExpression thisObject = new VariableExpression("_thisObject");
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,286,argumentList.add(0, receiver);
src/main/java/org/codehaus/groovy/transform/EqualsAndHashCodeASTTransformation.java,164,final Expression result = varX("_result");
src/main/java/org/codehaus/groovy/transform/ToStringASTTransformation.java,178,final Expression result = varX("_result");
src/main/java/org/apache/groovy/ast/tools/AnnotatedNodeUtils.java,40,if (shouldAnnotate) {
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,99,for (ListIterator<AnnotationNode> it = cn.getAnnotations().listIterator(); it.hasNext();) {
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,110,cn.setModifiers((ACC_FINAL+cn.getModifiers()) & ~(ACC_ENUM|ACC_INTERFACE|ACC_ANNOTATION|ACC_ABSTRACT));
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,112,cn.setSuperClass(ClassHelper.OBJECT_TYPE);
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,114,cn.setInterfaces(ClassNode.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,117,List<AnnotationNode> meta = getMeta(cn);
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,126,cn.addMethod(   "value", ACC_PUBLIC+ACC_STATIC,
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,127,ClassHelper.OBJECT_TYPE.makeArray().makeArray(),
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,128,Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,129,code);
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,132,for (ListIterator<AnnotationNode> it = cn.getAnnotations().listIterator(); it.hasNext();) {
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,134,if (an == collector) {
src/main/java/org/codehaus/groovy/transform/AnnotationCollectorTransform.java,235,if (type.getName().equals(AnnotationCollector.class.getName())) continue;
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1093,Expression ce = new CastExpression(left.getType(), right);
subprojects/groovy-json/src/main/java/org/apache/groovy/json/internal/Sys.java,57,Pattern p = Pattern.compile("^([1-9]\\.[0-9]+)");
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,191,return new PropertyNode(pName, mn.getModifiers(), ClassHelper.OBJECT_TYPE, cn, null, null, null);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,203,private static String getPropertyName(MethodNode m) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,204,String name = m.getName();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,205,if (!(name.startsWith("set") || name.startsWith("get"))) return null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,206,String pname = name.substring(3);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,207,if (pname.length() == 0) return null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,208,pname = java.beans.Introspector.decapitalize(pname);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,210,if (name.startsWith("get") && (m.getReturnType() == ClassHelper.VOID_TYPE || m.getParameters().length != 0)) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,211,return null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,213,if (name.startsWith("set") && m.getParameters().length != 1) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,214,return null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,216,return pname;
src/main/java/org/codehaus/groovy/classgen/Verifier.java,450,if (shouldAnnotate) methodNode.addAnnotation(generatedAnnotation);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,485,if (shouldAnnotate) methodNode.addAnnotation(generatedAnnotation);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,512,if (shouldAnnotate) methodNode.addAnnotation(generatedAnnotation);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,533,if (shouldAnnotate) methodNode.addAnnotation(generatedAnnotation);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,555,if (shouldAnnotate) methodNode.addAnnotation(generatedAnnotation);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,411,MethodNode methodNode = addMethod(node, !isAbstract(node.getModifiers()),
src/main/java/org/codehaus/groovy/classgen/Verifier.java,479,MethodNode methodNode = addMethod(node, !isAbstract(node.getModifiers()),
src/main/java/org/codehaus/groovy/classgen/Verifier.java,495,MethodNode methodNode = addMethod(node, !isAbstract(node.getModifiers()),
src/main/java/org/codehaus/groovy/classgen/Verifier.java,516,MethodNode methodNode = addMethod(node, !isAbstract(node.getModifiers()),
src/main/java/org/codehaus/groovy/classgen/Verifier.java,537,MethodNode methodNode = addMethod(node, !isAbstract(node.getModifiers()),
src/main/java/org/codehaus/groovy/vmplugin/v7/Selector.java,303,if (!reflectionMethod.isSynthetic()) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,108,if (!annoFound) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,113,if (AnnotatedNodeUtils.hasAnnotation(fromParam, NAMED_PARAM_TYPE)) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,114,AnnotationNode namedParam = fromParam.getAnnotations(NAMED_PARAM_TYPE).get(0);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,115,boolean required = memberHasValue(namedParam, "required", true);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,117,namedParam.addMember("value", constX(fromParam.getName()));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,119,String name = getMemberStringValue(namedParam, "value");
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,120,if (getMemberValue(namedParam, "type") == null) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,121,namedParam.addMember("type", classX(fromParam.getType()));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,123,if (hasDuplicates(mNode, propNames, name)) return;
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,126,if (required) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,127,if (fromParam.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,128,addError("Error during " + MY_TYPE_NAME + " processing. A required parameter can't have an initial value.", mNode);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,129,return;
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,131,inner.addStatement(new AssertStatement(boolX(callX(varX(mapParam), "containsKey", args(constX(name)))),
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,132,plusX(new ConstantExpression("Missing required named argument '" + name + "'. Keys found: "), callX(varX(mapParam), "keySet"))));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,134,args.addExpression(propX(varX(mapParam), name));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,135,mapParam.addAnnotation(namedParam);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,136,fromParam.getAnnotations().remove(namedParam);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,189,private boolean processDelegateParam(MethodNode mNode, Parameter mapParam, ArgumentListExpression args, List<String> propNames, Parameter fromParam) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,190,if (isInnerClass(fromParam.getType())) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,191,if (mNode.isStatic()) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,192,addError("Error during " + MY_TYPE_NAME + " processing. Delegate type '" + fromParam.getType().getNameWithoutPackage() + "' is an inner class which is not supported.", mNode);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,193,return false;
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,197,Set<String> names = new HashSet<String>();
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,198,List<PropertyNode> props = getAllProperties(names, fromParam.getType(), true, false, false, true, false, true);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,199,for (String next : names) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,200,if (hasDuplicates(mNode, propNames, next)) return false;
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,202,List<MapEntryExpression> entries = new ArrayList<MapEntryExpression>();
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,203,for (PropertyNode pNode : props) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,204,String name = pNode.getName();
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,205,entries.add(new MapEntryExpression(constX(name), propX(varX(mapParam), name)));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,206,AnnotationNode namedParam = new AnnotationNode(NAMED_PARAM_TYPE);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,207,namedParam.addMember("value", constX(name));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,208,namedParam.addMember("type", classX(pNode.getType()));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,209,mapParam.addAnnotation(namedParam);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,211,Expression delegateMap = new MapExpression(entries);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,212,args.addExpression(castX(fromParam.getType(), delegateMap));
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,213,return true;
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,216,private boolean hasDuplicates(MethodNode mNode, List<String> propNames, String next) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,217,if (propNames.contains(next)) {
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,218,addError("Error during " + MY_TYPE_NAME + " processing. Duplicate property '" + next + "' found.", mNode);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,219,return true;
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,221,propNames.add(next);
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,222,return false;
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,456,ret.put(sgt.getName(), sgt.getType());
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,84,String lockExpr = determineLock(value, cNode, mNode.isStatic(), myTypeName);
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,88,final Expression lockType;
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,89,if (isWriteLock) {
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,90,lockType = callX(varX(lockExpr, LOCK_TYPE), "writeLock");
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,92,lockType = callX(varX(lockExpr, LOCK_TYPE), "readLock");
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,95,Expression acquireLock = callX(lockType, "lock");
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,96,Expression releaseLock = callX(lockType, "unlock");
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,105,private String determineLock(String value, ClassNode targetClass, boolean isStatic, String myTypeName) {
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,116,return value;
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,122,targetClass.addField(DEFAULT_STATIC_LOCKNAME, visibility, LOCK_TYPE, createLockObject());
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,127,return DEFAULT_STATIC_LOCKNAME;
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,132,targetClass.addField(DEFAULT_INSTANCE_LOCKNAME, visibility, LOCK_TYPE, createLockObject());
src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,137,return DEFAULT_INSTANCE_LOCKNAME;
src/main/java/org/codehaus/groovy/runtime/ConversionHandler.java,105,if (handleCache != null && isDefaultMethod(method)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,486,(fn.getDeclaringClass() != typeCheckingContext.getEnclosingClassNode() || typeCheckingContext.getEnclosingClosure() != null) &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,487,fn.getDeclaringClass().getModule() == typeCheckingContext.getEnclosingClassNode().getModule()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,489,addPrivateFieldOrMethodAccess(source, fn.getDeclaringClass(), marker, fn);
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,519,final int mod = methodNode.isPrivate()?ACC_PRIVATE:ACC_PUBLIC;
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,198,ACC_STATIC | ACC_PUBLIC | ACC_INTERFACE | ACC_ABSTRACT,
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,111,applyTrait(trait, cNode, helpers);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,141,private static void applyTrait(final ClassNode trait, final ClassNode cNode, final TraitHelpersTuple helpers) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,176,createForwarderMethod(trait, cNode, methodNode, originalMethod, helperClassNode, methodGenericsSpec, helperMethodParams, origParams, params, argList);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,321,Map<String,ClassNode> genericsSpec,
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,325,ArgumentListExpression helperMethodArgList) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,534,if (isExistingProperty(name, cNode, params) || cNode.getDeclaredMethod(name, params)!=null) {
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,214,helper.addMethod(processMethod(cNode, helper, methodNode, fieldHelper, fieldNames));
src/main/groovy/groovy/ui/GroovyMain.java,484,try(BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
src/main/groovy/groovy/ui/GroovyMain.java,485,PrintWriter writer = new PrintWriter(System.out)) {
src/main/groovy/groovy/ui/GroovyMain.java,513,try(BufferedReader reader = new BufferedReader(new FileReader(file));
src/main/groovy/groovy/ui/GroovyMain.java,514,PrintWriter writer = new PrintWriter(System.out)) {
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,120,if (method.annotationDefault != null) {
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,121,result.setCode(new ReturnStatement(new ConstantExpression(method.annotationDefault)));
src/main/java/org/codehaus/groovy/transform/trait/TraitReceiverTransformer.java,441,if (origCallArgs instanceof ArgumentListExpression) {
src/main/java/org/codehaus/groovy/transform/trait/TraitReceiverTransformer.java,442,List<Expression> expressions = ((ArgumentListExpression) origCallArgs).getExpressions();
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,436,BlockStatement code = (BlockStatement) selectedMethod.getCode();
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,437,MethodCallExpression mce;
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,438,if (field.isStatic()) {
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,439,mce = new MethodCallExpression(
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,440,new ClassExpression(INVOKERHELPER_CLASSNODE),
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,442,new ArgumentListExpression(
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,443,thisObject,
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,444,new ConstantExpression(Traits.helperSetterName(field)),
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,447,);
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,449,mce = new MethodCallExpression(
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,450,new CastExpression(createReceiverType(field.isStatic(), fieldHelper), thisObject),
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,451,Traits.helperSetterName(field),
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,453,);
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,455,mce.setImplicitThis(false);
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,456,mce.setSourcePosition(initialExpression);
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,457,code.addStatement(new ExpressionStatement(mce));
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,228,processField(field, initializer, staticInitializer, fieldHelper, helper, cNode, fieldNames);
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,252,if (fieldHelper!=null) {
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,410,final ClassNode fieldHelper, final ClassNode helper, final ClassNode trait,
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,460,fieldHelper.addMethod(
src/main/java/org/codehaus/groovy/transform/trait/TraitASTTransformation.java,468,fieldHelper.addMethod(
src/main/java/org/codehaus/groovy/transform/trait/Traits.java,149,return new TraitHelpersTuple(helperClassNode,  fieldHelperClassNode);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,275,Expression ret = findStaticMethodImportFromModule(method, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,276,if (ret != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,277,setSourcePosition(ret, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,278,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,280,if (method instanceof ConstantExpression && !inLeftExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,282,String methodName = (String) ((ConstantExpression) method).getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,283,ret = findStaticFieldOrPropAccessorImportFromModule(methodName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,285,ret = new MethodCallExpression(ret, "call", args);
src/main/java/org/codehaus/groovy/vmplugin/v5/Java5.java,387,Parameter[] params = makeParameters(compileUnit, ctor.getGenericParameterTypes(), ctor.getParameterTypes(), ctor.getParameterAnnotations());
src/main/groovy/groovy/transform/NamedParam.java,36,String value();
src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,116,if (getMemberValue(namedParam, "name") == null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1435,Iterator<InnerClassNode> it = controller.getClassNode().getInnerClasses();
src/main/java/org/codehaus/groovy/ast/decompiled/AsmDecompiler.java,105,result.innerClassModifiers.put(innerName, access);
src/main/java/org/codehaus/groovy/ast/decompiled/ClassStub.java,38,final Map<String, Integer> innerClassModifiers = new HashMap<String, Integer>();
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,47,super(data.className, getFullModifiers(data, resolver), null, null, MixinNode.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,58,private static int getFullModifiers(ClassStub data, AsmReferenceResolver resolver) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,59,String className = data.className;
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,60,int bound = className.length();
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,61,while (bound > 0) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,62,int idx = className.lastIndexOf('$', bound);
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,63,if (idx > 0) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,64,ClassNode outerClass = resolver.resolveClassNullable(className.substring(0, idx));
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,65,if (outerClass instanceof DecompiledClassNode) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,66,Integer outerModifiers = ((DecompiledClassNode) outerClass).classData.innerClassModifiers.get(className.substring(idx + 1));
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,67,if (outerModifiers != null) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,68,return data.accessModifiers | outerModifiers;
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,72,bound = idx - 1;
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,74,return data.accessModifiers;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2093,super.visitConstructorCallExpression(call);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2094,if (extension.beforeMethodCall(call)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2095,extension.afterMethodCall(call);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2096,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2098,ClassNode receiver = call.isThisCall() ? typeCheckingContext.getEnclosingClassNode() :
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2099,call.isSuperCall() ? typeCheckingContext.getEnclosingClassNode().getSuperClass() : call.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2100,Expression arguments = call.getArguments();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2102,ArgumentListExpression argumentList = InvocationWriter.makeArgumentList(arguments);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2104,checkForbiddenSpreadArgument(argumentList);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2106,ClassNode[] args = getArgumentTypes(argumentList);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2107,if (args.length > 0 &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2108,typeCheckingContext.getEnclosingClosure() != null &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2109,argumentList.getExpression(0) instanceof VariableExpression &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2110,((VariableExpression) argumentList.getExpression(0)).isThisExpression() &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2111,call.getType() instanceof InnerClassNode &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2112,call.getType().getOuterClass().equals(args[0]) &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2113,!call.getType().isStaticClass()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2114,args[0] = CLOSURE_TYPE;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2118,MethodNode node;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2120,&& findMethod(receiver, "<init>", DefaultGroovyMethods.init(args)).size() == 1
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2121,&& findMethod(receiver, "<init>", args).isEmpty()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2123,node = typeCheckMapConstructor(call, receiver, arguments);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2124,if (node != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2125,storeTargetMethod(call, node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2126,extension.afterMethodCall(call);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2127,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2130,node = findMethodOrFail(call, receiver, "<init>", args);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2131,if (node != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2132,if (looksLikeNamedArgConstructor(receiver, args) && node.getParameters().length + 1 == args.length) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2135,typeCheckMethodsWithGenericsOrFail(receiver, args, node, call);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2137,if (node != null) storeTargetMethod(call, node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2139,extension.afterMethodCall(call);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,706,if (visitPropertyExpressionSilent(pexp, pexp)) return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,708,if (!extension.handleUnresolvedProperty(pexp)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,709,Expression objectExpression = pexp.getObjectExpression();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,710,addStaticTypeError("No such property: " + pexp.getPropertyAsString() +
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3349,return typeCheckingContext.getEnclosingMethodCalls().size() > 1;
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,165,if (redirectGenericsTypes == null) redirectGenericsTypes = parameterized;
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3523,public static <S,T> List<T> collect(Iterator<S> self, @ClosureParams(FirstParam.Component.class) Closure<T> transform) {
