File,Line_number,SRC
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,104,if (renameEmptyFiles || source.length() > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,106,if (parent != null && !parent.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,126,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,140,LOGGER.error("Unable to delete empty file " + source.getAbsolutePath());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,530,final FileRenameAction renameAction = new FileRenameAction(new File(currentFileName), new File(renameTo), false);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,37,private RollingFileManager manager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,45,this.manager = manager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,100,public static OnStartupTriggeringPolicy createPolicy() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,101,return new OnStartupTriggeringPolicy();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,77,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,34,private static long JVM_START_TIME = initStartTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,36,private boolean evaluated = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,46,if (JVM_START_TIME == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,47,evaluated = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,55,private static long initStartTime() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,62,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,63,final Class<?> factoryClass = Loader.loadSystemClass("java.lang.management.ManagementFactory");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,64,final Method getRuntimeMXBean = factoryClass.getMethod("getRuntimeMXBean");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,65,final Object runtimeMXBean = getRuntimeMXBean.invoke(null);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,67,final Class<?> runtimeMXBeanClass = Loader.loadSystemClass("java.lang.management.RuntimeMXBean");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,68,final Method getStartTime = runtimeMXBeanClass.getMethod("getStartTime");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,69,final Long result = (Long) getStartTime.invoke(runtimeMXBean);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,71,return result.longValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,73,StatusLogger.getLogger().error("Unable to call ManagementFactory.getRuntimeMXBean().getStartTime(), " //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,74,+ "using system time for OnStartupTriggeringPolicy", t);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,76,return System.currentTimeMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,87,if (evaluated) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,88,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,90,evaluated = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,91,return manager.getFileTime() < JVM_START_TIME;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,75,if (this.filter == filter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,78,CompositeFilter composite = (CompositeFilter) filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,75,filterList.remove(filter);
log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java,27,public abstract class AbstractMessageFactory implements MessageFactory, Serializable {
log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java,57,public abstract Message newMessage(String message, Object... params);
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessageFactory.java,25,private static final long serialVersionUID = 1L;
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessageFactory.java,33,public static final ParameterizedMessageFactory INSTANCE = new ParameterizedMessageFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,95,RingBufferLogEvent evt = (RingBufferLogEvent) other;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,96,evt.initializeBuilder(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,59,private transient AsyncLogger asyncLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,60,private String loggerName;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,61,private Marker marker;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,62,private String fqcn;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,68,private ContextStack contextStack;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,69,private String threadName;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,71,private long currentTimeMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,72,private boolean endOfBatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,73,private boolean includeLocation;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,74,private long nanoTime;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,80,this.asyncLogger = anAsyncLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,81,this.loggerName = aLoggerName;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,82,this.marker = aMarker;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,83,this.fqcn = theFqcn;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,89,this.contextStack = aContextStack;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,92,this.currentTimeMillis = aCurrentTimeMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,93,this.nanoTime = aNanoTime;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,102,return new DefaultXmlPrettyPrinter();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,206,return new DefaultLoggerComponentBuilder(this, name, level.toString(), "AsyncLogger");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,216,return new DefaultRootLoggerComponentBuilder(this, level.toString(), "AsyncRoot");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,221,return new DefaultRootLoggerComponentBuilder(this, level, "AsyncRoot");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,264,return new DefaultLoggerComponentBuilder(this, name, level.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,269,return new DefaultLoggerComponentBuilder(this, name, level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,274,return new DefaultRootLoggerComponentBuilder(this, level.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,279,return new DefaultRootLoggerComponentBuilder(this, level);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,127,Action createCompressAction(final String renameTo, final String compressedName, final boolean deleteSource,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,128,final int compressionLevel) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,125,XY(".xy") {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,130,return new CommonsCompressAction("xy", source(renameTo), target(compressedName), deleteSource);
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedNoReferenceMessageFactory.java,55,final String formatted = new ParameterizedMessage(message, params).getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedNoReferenceMessageFactory.java,56,return new SimpleMessage(formatted);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatchManager.java,92,if (lastModfied > fileMonitor.lastModified) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,42,private static LoggerFactory loggerFactory = new PrivateFactory();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,447,private static class PrivateFactory implements LoggerFactory {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,450,public Logger makeNewLoggerInstance(final LoggerContext context, final String name) {
log4j-1.2-api/src/main/java/org/apache/log4j/spi/LoggerFactory.java,30,Logger makeNewLoggerInstance(org.apache.logging.log4j.core.LoggerContext context, String name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,38,import org.apache.logging.log4j.message.TimestampMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,263,private long eventTimeMillis(final Message message) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,270,return message instanceof TimestampMessage ? ((TimestampMessage) message).getTimestamp() : CLOCK
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,271,.currentTimeMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,206,return currentTimeMillis;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,22,import java.util.concurrent.ConcurrentHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,23,import java.util.concurrent.ConcurrentMap;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,30,import org.apache.logging.log4j.spi.LoggerContextKey;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,65,private final ConcurrentMap<String, ExtendedLogger> loggers = new ConcurrentHashMap<>();
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,106,String key = LoggerContextKey.create(name, messageFactory);
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,107,final ExtendedLogger extendedLogger = loggers.get(key);
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,115,key = LoggerContextKey.create(name, simpleLogger.getMessageFactory());
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,116,loggers.putIfAbsent(key, simpleLogger);
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,117,return loggers.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,25,import java.util.concurrent.ConcurrentHashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,48,import org.apache.logging.log4j.spi.LoggerContextKey;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,68,private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,381,return loggers.values();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,396,String key = LoggerContextKey.create(name, messageFactory);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,397,Logger logger = loggers.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,405,key = LoggerContextKey.create(name, logger.getMessageFactory());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,406,final Logger prev = loggers.putIfAbsent(key, logger);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,407,return prev == null ? logger : prev;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,418,return loggers.containsKey(LoggerContextKey.create(name));
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,429,return loggers.containsKey(LoggerContextKey.create(name, messageFactory));
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,440,return loggers.containsKey(LoggerContextKey.create(name, messageFactoryClass));
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,594,for (final Logger logger : loggers.values()) {
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,28,import org.apache.logging.log4j.spi.LoggerContextKey;
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,39,private static final WeakHashMap<ServletContext, Log4jTaglibLoggerContext> CONTEXTS =
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,40,new WeakHashMap<>();
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,42,private final WeakHashMap<String, Log4jTaglibLogger> loggers =
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,43,new WeakHashMap<>();
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,65,String key = LoggerContextKey.create(name, messageFactory);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,66,Log4jTaglibLogger logger = this.loggers.get(key);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,72,synchronized (this.loggers) {
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,73,logger = this.loggers.get(key);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,80,key = LoggerContextKey.create(name, original.getMessageFactory());
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,81,this.loggers.put(key, logger);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,90,return loggers.containsKey(LoggerContextKey.create(name));
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,95,return loggers.containsKey(LoggerContextKey.create(name, messageFactory));
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,100,return loggers.containsKey(LoggerContextKey.create(name, messageFactoryClass));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,19,import java.util.concurrent.ConcurrentHashMap;
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,20,import java.util.concurrent.ConcurrentMap;
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,25,import org.apache.logging.log4j.spi.LoggerContextKey;
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,32,private final ConcurrentMap<String, SLF4JLogger> loggers = new ConcurrentHashMap<>();
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,41,if (!loggers.containsKey(name)) {
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,42,loggers.putIfAbsent(name, new SLF4JLogger(name, LoggerFactory.getLogger(name)));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,44,return loggers.get(name);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,49,if (!loggers.containsKey(name)) {
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,50,loggers.putIfAbsent(name, new SLF4JLogger(name, messageFactory, LoggerFactory.getLogger(name)));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,52,return loggers.get(name);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,57,return loggers.containsKey(LoggerContextKey.create(name));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,62,return loggers.containsKey(LoggerContextKey.create(name, messageFactory));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,67,return loggers.containsKey(LoggerContextKey.create(name, messageFactoryClass));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,60,private static class Log4jEventWrapper {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,162,final ExceptionHandler<Log4jEventWrapper> errorHandler = DisruptorUtil.getExceptionHandler(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,87,final ExceptionHandler<RingBufferLogEvent> errorHandler = DisruptorUtil.getExceptionHandler(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,79,static <T> ExceptionHandler<T> getExceptionHandler(final String propertyName, Class<T> type) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,80,final String cls = PropertiesUtil.getProperties().getStringProperty(propertyName);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,82,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,90,LOGGER.debug("Invalid {} value: error creating {}: ", propertyName, cls, ignored);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,91,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,242,LOGGER.fatal("Ignoring log event after log4j was shut down");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,254,LOGGER.fatal("Ignoring log event after log4j was shut down.");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,190,LOGGER.fatal("[{}] Ignoring log event after log4j was shut down.", contextName);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/JndiLookup.java,55,return jndiManager.lookup(jndiName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,17,package org.apache.logging.log4j.core.config.json;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,19,import com.fasterxml.jackson.core.JsonParser;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,20,import com.fasterxml.jackson.databind.JsonNode;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,21,import com.fasterxml.jackson.databind.ObjectMapper;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,22,import org.apache.logging.log4j.core.config.AbstractConfiguration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,23,import org.apache.logging.log4j.core.config.Configuration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,24,import org.apache.logging.log4j.core.config.ConfigurationSource;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,25,import org.apache.logging.log4j.core.config.ConfiguratonFileWatcher;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,26,import org.apache.logging.log4j.core.config.LoggerConfig;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,27,import org.apache.logging.log4j.core.config.Node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,28,import org.apache.logging.log4j.core.config.Reconfigurable;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,29,import org.apache.logging.log4j.core.config.plugins.util.PluginType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,30,import org.apache.logging.log4j.core.config.plugins.util.ResolverUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,31,import org.apache.logging.log4j.core.config.status.StatusConfiguration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,32,import org.apache.logging.log4j.core.util.FileWatcher;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,33,import org.apache.logging.log4j.core.util.Patterns;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,48,public class JsonConfiguration extends AbstractConfiguration implements Reconfigurable {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,51,private static final String[] VERBOSE_CLASSES = new String[] { ResolverUtil.class.getName() };
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,52,private final List<Status> status = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,53,private JsonNode root;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,55,public JsonConfiguration(final ConfigurationSource configSource) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,56,super(configSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,57,final File configFile = configSource.getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,58,byte[] buffer;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,59,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,60,try (final InputStream configStream = configSource.getInputStream()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,61,buffer = toByteArray(configStream);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,63,final InputStream is = new ByteArrayInputStream(buffer);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,64,root = getObjectMapper().readTree(is);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,65,if (root.size() == 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,66,for (final JsonNode node : root) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,67,root = node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,70,processAttributes(rootNode, root);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,72,.withStatus(getDefaultStatus());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,73,for (final Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,74,final String key = entry.getKey();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,75,final String value = getStrSubstitutor().replace(entry.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,77,if ("status".equalsIgnoreCase(key)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,78,statusConfig.withStatus(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,80,statusConfig.withDestination(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,82,isShutdownHookEnabled = !"disable".equalsIgnoreCase(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,84,statusConfig.withVerbosity(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,86,pluginPackages.addAll(Arrays.asList(value.split(Patterns.COMMA_SEPARATOR)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,88,setName(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,90,final int intervalSeconds = Integer.parseInt(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,91,if (intervalSeconds > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,92,getWatchManager().setIntervalSeconds(intervalSeconds);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,93,if (configFile != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,94,FileWatcher watcher = new ConfiguratonFileWatcher(this, listeners);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,95,getWatchManager().watchFile(configFile, watcher);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,99,createAdvertiser(value, configSource, buffer, "application/json");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,102,statusConfig.initialize();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,103,if (getName() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,104,setName(configSource.getLocation());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,107,LOGGER.error("Error parsing {}", configSource.getLocation(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,111,protected ObjectMapper getObjectMapper() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,112,return new ObjectMapper().configure(JsonParser.Feature.ALLOW_COMMENTS, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,116,public void setup() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,117,final Iterator<Map.Entry<String, JsonNode>> iter = root.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,118,final List<Node> children = rootNode.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,119,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,120,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,121,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,122,if (n.isObject()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,123,LOGGER.debug("Processing node for object {}", entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,124,children.add(constructNode(entry.getKey(), rootNode, n));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,126,LOGGER.error("Arrays are not supported at the root configuration.");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,129,LOGGER.debug("Completed parsing configuration");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,130,if (status.size() > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,131,for (final Status s : status) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,132,LOGGER.error("Error processing element " + s.name + ": " + s.errorType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,138,public Configuration reconfigure() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,139,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,140,final ConfigurationSource source = getConfigurationSource().resetInputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,141,if (source == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,142,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,144,return new JsonConfiguration(source);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,146,LOGGER.error("Cannot locate file {}", getConfigurationSource(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,148,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,151,private Node constructNode(final String name, final Node parent, final JsonNode jsonNode) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,152,final PluginType<?> type = pluginManager.getPluginType(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,153,final Node node = new Node(parent, name, type);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,154,processAttributes(node, jsonNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,155,final Iterator<Map.Entry<String, JsonNode>> iter = jsonNode.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,156,final List<Node> children = node.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,157,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,158,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,159,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,160,if (n.isArray() || n.isObject()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,161,if (type == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,162,status.add(new Status(name, n, ErrorType.CLASS_NOT_FOUND));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,164,if (n.isArray()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,165,LOGGER.debug("Processing node for array {}", entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,166,for (int i = 0; i < n.size(); ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,167,final String pluginType = getType(n.get(i), entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,168,final PluginType<?> entryType = pluginManager.getPluginType(pluginType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,169,final Node item = new Node(node, entry.getKey(), entryType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,170,processAttributes(item, n.get(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,171,if (pluginType.equals(entry.getKey())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,172,LOGGER.debug("Processing {}[{}]", entry.getKey(), i);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,174,LOGGER.debug("Processing {} {}[{}]", pluginType, entry.getKey(), i);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,176,final Iterator<Map.Entry<String, JsonNode>> itemIter = n.get(i).fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,177,final List<Node> itemChildren = item.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,178,while (itemIter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,179,final Map.Entry<String, JsonNode> itemEntry = itemIter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,180,if (itemEntry.getValue().isObject()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,181,LOGGER.debug("Processing node for object {}", itemEntry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,182,itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,184,final JsonNode array = itemEntry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,185,final String entryName = itemEntry.getKey();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,186,LOGGER.debug("Processing array for object {}", entryName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,187,for (int j = 0; j < array.size(); ++j) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,188,itemChildren.add(constructNode(entryName, item, array.get(j)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,193,children.add(item);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,196,LOGGER.debug("Processing node for object {}", entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,197,children.add(constructNode(entry.getKey(), node, n));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,200,LOGGER.debug("Node {} is of type {}", entry.getKey(), n.getNodeType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,204,String t;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,205,if (type == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,206,t = "null";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,208,t = type.getElementName() + ':' + type.getPluginClass();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,211,final String p = node.getParent() == null ? "null"
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,212,: node.getParent().getName() == null ? LoggerConfig.ROOT : node.getParent().getName();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,213,LOGGER.debug("Returning {} with parent {} of type {}", node.getName(), p, t);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,214,return node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,217,private String getType(final JsonNode node, final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,218,final Iterator<Map.Entry<String, JsonNode>> iter = node.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,219,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,220,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,221,if (entry.getKey().equalsIgnoreCase("type")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,222,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,223,if (n.isValueNode()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,224,return n.asText();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,228,return name;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,231,private void processAttributes(final Node parent, final JsonNode node) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,232,final Map<String, String> attrs = parent.getAttributes();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,233,final Iterator<Map.Entry<String, JsonNode>> iter = node.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,234,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,235,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,236,if (!entry.getKey().equalsIgnoreCase("type")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,237,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,238,if (n.isValueNode()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,239,attrs.put(entry.getKey(), n.asText());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,246,public String toString() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,247,return getClass().getSimpleName() + "[location=" + getConfigurationSource() + "]";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,253,private enum ErrorType {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,254,CLASS_NOT_FOUND
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,260,private static class Status {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,261,private final JsonNode node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,262,private final String name;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,263,private final ErrorType errorType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,265,public Status(final String name, final JsonNode node, final ErrorType errorType) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,266,this.name = name;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,267,this.node = node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,268,this.errorType = errorType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,272,public String toString() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,273,return "Status [name=" + name + ", errorType=" + errorType + ", node=" + node + "]";
log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jServletContextListener.java,55,throw new IllegalStateException("Context destroyed before it was initialized.");
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,65,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcAppender.java,39,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaAppender.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsAppender.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqAppender.java,83,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,34,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,35,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,46,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,47,private static final long serialVersionUID = 7481062062560624564L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,49,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java,29,public class DefaultAdvertiser implements Advertiser, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java,31,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,35,import java.io.ByteArrayInputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,36,import java.io.File;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,37,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,38,import java.io.InputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,39,import java.util.ArrayList;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,40,import java.util.Arrays;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,41,import java.util.Iterator;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,42,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,43,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,50,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfiguration.java,25,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfiguration.java,33,private static final long serialVersionUID = 5198216024278070407L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,66,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YamlConfiguration.java,31,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,40,public class DefaultShutdownCallbackRegistry implements ShutdownCallbackRegistry, LifeCycle, Runnable, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,20,import java.io.InvalidObjectException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,21,import java.io.ObjectInputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,22,import java.io.ObjectStreamException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,37,public final class KeyValuePair implements Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,39,private static final long serialVersionUID = 4331228262821046866L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,80,protected Object writeReplace() throws ObjectStreamException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,81,return newBuilder().setKey(this.key).setValue(this.value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,84,private void readObject(final ObjectInputStream stream) throws InvalidObjectException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,85,throw new InvalidObjectException("Builder proxy required");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,88,public static class Builder implements org.apache.logging.log4j.core.util.Builder<KeyValuePair>, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,90,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,113,protected Object readResolve() throws ObjectStreamException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,114,return new KeyValuePair(key, value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatchManager.java,19,import org.apache.logging.log4j.Logger;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatchManager.java,20,import org.apache.logging.log4j.core.AbstractLifeCycle;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatchManager.java,22,import org.apache.logging.log4j.core.config.ConfigurationScheduler;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatchManager.java,23,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatchManager.java,38,private static final long serialVersionUID = 8998356999926962686L;
log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,52,private static final long serialVersionUID = 1L;
log4j-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java,41,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,29,public class AbstractLifeCycle implements LifeCycle, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,36,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java,35,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,35,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractWriterAppender.java,35,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,52,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,54,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java,31,public class DefaultErrorHandler implements ErrorHandler, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java,33,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java,45,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,138,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java,49,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,28,import org.apache.logging.log4j.core.appender.rolling.RollingFileManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,50,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SmtpAppender.java,55,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java,48,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/WriterAppender.java,131,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseAppender.java,39,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,69,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,71,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,189,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,34,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,48,import java.io.ByteArrayOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,49,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,50,import java.io.InputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,51,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,52,import java.util.ArrayList;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,53,import java.util.Arrays;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,54,import java.util.Collection;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,55,import java.util.Collections;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,56,import java.util.HashSet;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,57,import java.util.LinkedHashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,58,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,59,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,60,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,61,import java.util.Set;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,62,import java.util.concurrent.ConcurrentHashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,63,import java.util.concurrent.ConcurrentMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,64,import java.util.concurrent.CopyOnWriteArrayList;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,71,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,33,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,38,private static final long serialVersionUID = 4570411889877332287L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,60,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java,30,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,35,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,30,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,60,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/LevelRangeFilter.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java,45,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java,37,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ScriptFilter.java,46,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StructuredDataFilter.java,44,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java,45,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java,41,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,37,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractCsvLayout.java,37,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,31,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java,33,public abstract class AbstractLayout<T extends Serializable> implements Layout<T>, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java,40,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,19,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,20,import java.io.ObjectInputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,21,import java.io.ObjectOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/CsvLogEventLayout.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/CsvParameterLayout.java,52,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,104,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,58,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,799,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,25,import java.io.InvalidObjectException;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,26,import java.io.ObjectInputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,27,import java.io.ObjectStreamException;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,28,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,36,public final class PatternMatch implements Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,38,private static final long serialVersionUID = 4331228262821046877L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,79,protected Object writeReplace() throws ObjectStreamException {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,80,return newBuilder().setKey(this.key).setPattern(this.pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,83,private void readObject(final ObjectInputStream stream) throws InvalidObjectException {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternMatch.java,84,throw new InvalidObjectException("Builder proxy required");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,89,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SerializedLayout.java,36,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java,51,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java,195,private static final long serialVersionUID = 1L;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java,43,private static final long serialVersionUID = 1L;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/NoSqlAppender.java,53,private static final long serialVersionUID = 1L;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,77,private static final String THROWING = "throwing";
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,78,private static final String CATCHING = "catching";
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java,27,public class ContextMapLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/DateLookup.java,34,public class DateLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,31,public class MapLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StructuredDataLookup.java,27,public class StructuredDataLookup implements StrLookup {
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,28,import java.lang.Override;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,29,import java.util.Map;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,30,import java.util.concurrent.ConcurrentHashMap;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,31,import java.util.concurrent.ConcurrentMap;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java,30,import java.util.Map;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java,31,import java.util.concurrent.ConcurrentHashMap;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java,32,import java.util.concurrent.ConcurrentMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,79,private Cancellable shutdownCallback;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,51,public class AsyncLoggerConfigDisruptor implements AsyncLoggerConfigDelegate {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,135,private volatile Disruptor<Log4jEventWrapper> disruptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,136,private ExecutorService executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,38,class AsyncLoggerDisruptor {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,43,private volatile Disruptor<RingBufferLogEvent> disruptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,44,private ExecutorService executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,32,public class ConfigurationSource {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/CustomLevelConfig.java,31,public final class CustomLevelConfig {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,20,import org.apache.logging.log4j.Logger;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,21,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,22,import org.apache.logging.log4j.util.Strings;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,34,public class PluginManager {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DummyNanoClock.java,22,public final class DummyNanoClock implements NanoClock {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/SystemNanoClock.java,22,public final class SystemNanoClock implements NanoClock {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,68,private AsyncThread thread;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java,30,public final class FailoversPlugin {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSource.java,37,public final class DataSourceConnectionSource implements ConnectionSource {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,39,public final class FactoryMethodConnectionSource implements ConnectionSource {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,46,private Connection connection;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,47,private PreparedStatement statement;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,241,private static final class Column {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,41,private EntityManagerFactory entityManagerFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,43,private EntityManager entityManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,44,private EntityTransaction transaction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager.java,41,private Producer<byte[], byte[]> producer = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,25,public abstract class AbstractRolloverStrategy implements RolloverStrategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CompositeTriggeringPolicy.java,30,public final class CompositeTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,30,import java.text.ParseException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,31,import java.util.Date;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,38,public final class CronTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,79,public class DefaultRolloverStrategy implements RolloverStrategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,86,static enum FileExtensions {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,136,private FileExtensions(final String extension) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,33,public class OnStartupTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,39,public class PatternProcessor {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/SizeBasedTriggeringPolicy.java,30,public class SizeBasedTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,29,public final class TimeBasedTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/AbstractAction.java,28,public abstract class AbstractAction implements Action {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAccumulatedFileCount.java,36,public final class IfAccumulatedFileCount implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAccumulatedFileSize.java,37,public final class IfAccumulatedFileSize implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAll.java,33,public final class IfAll implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAny.java,33,public final class IfAny implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfFileName.java,45,public final class IfFileName implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfLastModified.java,40,public final class IfLastModified implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfNot.java,31,public final class IfNot implements PathCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PathSorter.java,25,public interface PathSorter extends Comparator<PathWithAttributes>{
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java,43,public class ScriptCondition {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderRef.java,34,public final class AppenderRef {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/MarkerPatternSelector.java,34,import java.util.HashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/MarkerPatternSelector.java,35,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/MarkerPatternSelector.java,36,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/MarkerPatternSelector.java,42,public class MarkerPatternSelector implements PatternSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java,34,import javax.script.SimpleBindings;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java,35,import java.util.HashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java,36,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java,37,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java,43,public class ScriptPatternSelector implements PatternSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/AbstractLookup.java,24,public abstract class AbstractLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrMatcher.java,31,public abstract class StrMatcher {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,139,public class StrSubstitutor {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,152,logError("caught exception while sending e-mail notification.", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,153,throw new LoggingException("Error occurred while sending email", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,155,logError("caught exception while sending e-mail notification.", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,156,throw new LoggingException("Error occurred while sending email", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,248,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,55,private Reconnector connector;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,57,private Socket socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,88,connector = new Reconnector(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,89,connector.setDaemon(true);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,90,connector.setPriority(Thread.MIN_PRIORITY);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,91,connector.start();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,134,connector = new Reconnector(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,135,connector.setDaemon(true);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,136,connector.setPriority(Thread.MIN_PRIORITY);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,137,connector.start();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/AbstractKeyStoreConfiguration.java,31,private final KeyStore keyStore;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,42,public class SslConfiguration {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,46,private final SSLContext sslContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,24,public class StoreConfiguration<T> {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java,197,public final class CronExpression {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/CyclicBuffer.java,26,public final class CyclicBuffer<T> {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Agent.java,30,public final class Agent {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/BatchEvent.java,27,public class BatchEvent {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,52,private RpcClient rpcClient = null;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/AbstractNoSqlConnection.java,30,public abstract class AbstractNoSqlConnection<W, T extends NoSqlObject<W>> implements NoSqlConnection<W, T> {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbProvider.java,38,public final class CouchDbProvider implements NoSqlProvider<CouchDbConnection> {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/mongodb/MongoDbProvider.java,45,public final class MongoDbProvider implements NoSqlProvider<MongoDbConnection> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java,32,public abstract class AbstractManager {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java,39,public class MulticastDnsAdvertiser implements Advertiser {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,43,public final class PatternParser {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacement.java,31,public final class RegexReplacement {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptions.java,30,public final class ThrowableFormatOptions {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AbstractPatternConverter.java,30,public abstract class AbstractPatternConverter implements PatternConverter {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,37,private abstract static class Formatter {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,97,private final class CachedTime {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/FileDatePatternConverter.java,28,public final class FileDatePatternConverter {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/FormattingInfo.java,23,public final class FormattingInfo {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,26,public abstract class NameAbbreviator {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,200,private static class PatternAbbreviatorFragment {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternFormatter.java,25,public class PatternFormatter {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,30,public class FixedDateFormat {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,46,public static final Marker ENTRY_MARKER = MarkerManager.getMarker("ENTRY").setParents(FLOW_MARKER);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1005,final Object message = LambdaUtil.get(msgSupplier);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1006,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/util/LambdaUtil.java,61,return supplier.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,47,private boolean useThreadLocalTranslator;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,165,private final int dateLength;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,196,this.dateLength = fixedFormat.getDatePatternLength();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,268,final char[] result = new char[length];
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,59,if (bundle.getState() == Bundle.ACTIVE) {
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,153,return factory.getContext(FQCN, null, null, true);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,167,return factory.getContext(FQCN, null, null, currentContext, null, null);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,182,return factory.getContext(FQCN, loader, null, currentContext);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,199,return factory.getContext(FQCN, loader, externalContext, currentContext);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,216,return factory.getContext(FQCN, loader, null, currentContext, configLocation, null);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,234,return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, null);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,253,return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, name);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,267,return factory.getContext(fqcn, null, null, currentContext);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,284,return factory.getContext(fqcn, loader, null, currentContext);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,271,LOGGER.error(SHUTDOWN_HOOK_MARKER,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,19,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,27,private String message;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,28,private int messageLengthInBytes;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,31,setMessage(message);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,38,public void setMessage(final String message) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,39,this.message = message;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,40,setLengthInBytes();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,43,private void setLengthInBytes() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,44,messageLengthInBytes = message.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,47,public byte[] getBytes() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,48,final String frame = toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,49,return frame.getBytes(Charset.defaultCharset());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,54,final String length = Integer.toString(messageLengthInBytes);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,55,return length + Chars.SPACE + message;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,58,public boolean equals(final TlsSyslogFrame frame) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,59,return isLengthEquals(frame) && isMessageEquals(frame);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,62,private boolean isLengthEquals(final TlsSyslogFrame frame) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,63,return this.messageLengthInBytes == frame.messageLengthInBytes;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,66,private boolean isMessageEquals(final TlsSyslogFrame frame) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,67,return this.message.equals(frame.message);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,118,private Result filter(final Level level) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,119,final Object value = ThreadContext.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,133,return filter(event.getLevel());
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,139,return filter(level);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,145,return filter(level);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,151,return filter(level);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,29,import com.lmax.disruptor.BlockingWaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,30,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,31,import com.lmax.disruptor.SleepingWaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,32,import com.lmax.disruptor.WaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,33,import com.lmax.disruptor.YieldingWaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,58,return new BlockingWaitStrategy();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,59,final Message message = logger.getMessageFactory().newMessage(record.getMessage(), record.getParameters());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,42,import org.apache.logging.log4j.core.util.NanoClockFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,509,Log4jLogEvent.setNanoClock(NanoClockFactory.createNanoClock());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,35,import org.apache.logging.log4j.core.util.NanoClockFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,92,nanoClock = NanoClockFactory.createNanoClock(); // based on initial configuration
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,103,nanoClock = NanoClockFactory.createNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,32,import org.apache.logging.log4j.core.util.NanoClockFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,176,NanoClockFactory.setMode(NanoClockFactory.Mode.Dummy); // LOG4J2-1074 use dummy clock by default
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,181,NanoClockFactory.setMode(NanoClockFactory.Mode.System);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,18,package org.apache.logging.log4j.core.util;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,20,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,25,public final class NanoClockFactory {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,30,public static enum Mode {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,34,Dummy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,36,public NanoClock createNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,37,return new DummyNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,43,System  {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,45,public NanoClock createNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,46,return new SystemNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,50,public abstract NanoClock createNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,53,private static volatile Mode mode = Mode.Dummy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,55,private NanoClockFactory() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,63,public static NanoClock createNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,64,return mode.createNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,72,public static Mode getMode() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,73,return mode;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,81,public static void setMode(Mode mode) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,82,NanoClockFactory.mode = Objects.requireNonNull(mode, "mode must be non-null");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,47,private final ReadWriteLock rwLock = new ReentrantReadWriteLock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,48,private final Lock readLock = rwLock.readLock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,110,readLock.lock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,113,if (bytes.length > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,114,manager.write(bytes);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,115,if (this.immediateFlush || event.isEndOfBatch()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,116,manager.flush();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,123,readLock.unlock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,79,protected synchronized void write(final byte[] bytes, final int offset, final int length)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,93,super.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,102,super.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,114,protected synchronized void write(final byte[] bytes, int offset, int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,115,super.write(bytes, offset, length); // writes to dummy output stream
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,120,protected synchronized void write(final byte[] bytes, final int offset, final int length)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,136,write(bytes, 0, bytes.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,88,protected synchronized void write(final byte[] bytes, int offset, int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,89,super.write(bytes, offset, length); // writes to dummy output stream
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,102,if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,92,protected synchronized void write(final byte[] bytes, final int offset, final int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,94,super.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,97,protected synchronized void write(final byte[] bytes, int offset, int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,98,super.write(bytes, offset, length); // writes to dummy output stream, needed to track file size
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,111,if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,119,protected void write(final byte[] bytes, final int offset, final int length)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,131,getOutputStream().write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,281,LOGGER.error("Could not find address of " + data.host, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,292,LOGGER.error("TcpSocketManager (" + name + ") " + ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,24,import com.fasterxml.jackson.core.JsonProcessingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,55,return this.objectWriter.writeValueAsString(event) + eol;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,801,protected JsonLayout(final boolean locationInfo, final boolean properties, final boolean complete, final boolean compact,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,802,final boolean eventEol, final Charset charset) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,803,super(new JacksonFactory.JSON().newWriter(locationInfo, properties, compact), charset, compact, complete, eventEol);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,121,final boolean isMapMessage = event.getMessage() instanceof MapMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,154,handleAppenderError(ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,156,handleAppenderError(new AppenderLoggingException(ex));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,160,private void handleAppenderError(final RuntimeException ex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,161,appender.getHandler().error(createErrorMsg("An exception occurred processing Appender "), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,189,LOGGER.info("Plugin [{}] could not be loaded due to verification error.", className, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,292,pos = fragments[i].abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,298,final PatternAbbreviatorFragment terminalFragment = fragments[fragments.length - 1];
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,301,pos = terminalFragment.abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,261,return level == null ? parent.getLevel() : level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,102,void asyncCallAppenders(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,103,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,90,event.loggerConfig.asyncCallAppenders(event.event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,362,processLogEvent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,376,private void processLogEvent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,378,callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,379,logParent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,382,private void logParent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,384,parent.log(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,434,protected static boolean includeLocation(final String includeLocationConfigValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,436,final boolean sync = !AsyncLoggerContextSelector.isSelected();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,437,return sync;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,466,properties, config, includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,201,Level level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,205,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,207,levelName);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,203,final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,204,unregisterMBeans(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,212,public static void unregisterMBeans(final MBeanServer mbs) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,213,unregisterStatusLogger("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,214,unregisterContextSelector("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,215,unregisterContexts(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,216,unregisterLoggerConfigs("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,217,unregisterAsyncLoggerRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,218,unregisterAsyncLoggerConfigRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,219,unregisterAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,220,unregisterAsyncAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,337,if (found.isEmpty()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,342,for (final ObjectName objectName : found) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,343,mbs.unregisterMBean(objectName);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java,36,return System.getenv(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,78,final StringBuilder sb = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,80,final int limit = options.minLines(array.length) - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,81,for (int i = 0; i <= limit; ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,82,sb.append(array[i]);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,83,if (i < limit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,84,sb.append(options.getSeparator());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,87,toAppendTo.append(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,90,toAppendTo.append(extStackTrace);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,33,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,31,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,229,public static class Builder implements org.apache.logging.log4j.core.util.Builder<BurstFilter> {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,241,private Result onMatch = Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,244,private Result onMismatch = Result.DENY;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,274,public Builder setOnMatch(final Result onMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,275,this.onMatch = onMatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,276,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,282,public Builder setOnMismatch(final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,283,this.onMismatch = onMismatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,284,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,295,return new BurstFilter(this.level, this.rate, this.maxBurst, this.onMatch, this.onMismatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,205,FilterComponentBuilder newFilter(String pluginName, Filter.Result onMatch, Filter.Result onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,214,FilterComponentBuilder newFilter(String pluginName, String onMatch, String onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,31,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,34,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,248,return new DefaultFilterComponentBuilder(this, type, onMatch.name(), onMisMatch.name());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,252,public FilterComponentBuilder newFilter(final String type, final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,253,return new DefaultFilterComponentBuilder(this, type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,29,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,32,addAttribute("onMisMatch", onMisMatch);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,81,public void start(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,84,final BundleWiring self = context.getBundle().adapt(BundleWiring.class);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,89,context.addBundleListener(this);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,90,final Bundle[] bundles = context.getBundles();
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,105,public void stop(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,106,context.removeBundleListener(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,39,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,52,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,38,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,50,addAttribute("level", level);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,331,private String asXml() {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,332,final StringBuilder sb = new StringBuilder();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,333,final StructuredDataId sdId = getId();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,334,if (sdId == null || sdId.getName() == null || type == null) {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,335,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,337,sb.append("<StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,338,sb.append("<type>").append(type).append("</type>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,339,sb.append("<id>").append(sdId).append("</id>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,340,super.asXml(sb);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,341,sb.append("</StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,342,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,243,return asString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,252,return asString();
log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LevelMixIn.java,38,public static Level getLevel(@JsonProperty("name") final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,45,PropertiesUtil.getProperties().getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,119,if (SHUTDOWN_HOOK_ENABLED && this.shutdownCallbackRegistry instanceof LifeCycle) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,273,return SHUTDOWN_HOOK_ENABLED ? shutdownCallbackRegistry.addShutdownCallback(callback) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,115,if (Loader.isClassAvailable("javax.servlet.ServletContext")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,257,LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,268,final int begin = i++;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,269,int end;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,270,int depth = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,271,do {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,272,end = pattern.indexOf('}', i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,273,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,274,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,276,final int next = pattern.indexOf("{", i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,277,if (next != -1 && next < end) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,278,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,279,++depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,281,--depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,285,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,286,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,289,final String r = pattern.substring(begin + 1, end);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,290,options.add(r);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,291,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,39,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,298,disruptor.getRingBuffer().publishEvent(this, this, calcLocationIfRequested(fqcn), fqcn, level, marker, message,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,299,thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,139,this.mdcId = mdcId;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,154,final Level level = Level.toLevel(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,156,LOGGER.error("Unknown level name: " + key + ". Use one of " +
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,157,Arrays.toString(DEFAULT_STYLES.keySet().toArray()));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,72,if (options.length < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,77,LOGGER.error("No pattern supplied on style");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,81,LOGGER.error("No style attributes provided");
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,19,import java.io.ByteArrayOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,26,import java.net.UnknownHostException;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,31,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,33,import org.apache.logging.log4j.core.appender.ManagerFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,101,return (SslSocketManager) getManager("TLS:" + host + ':' + port, new SslFactoryData(sslConfig, host, port,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,127,private static class SslSocketManagerFactory implements ManagerFactory<SslSocketManager, SslFactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,131,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,135,public SslSocketManager createManager(final String name, final SslFactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,136,InetAddress inetAddress = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,137,OutputStream os = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,138,Socket socket = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,140,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,141,inetAddress = resolveAddress(data.host);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,142,socket = createSocket(data);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,143,os = socket.getOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,147,LOGGER.error("SslSocketManager ({})", name, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,148,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,151,LOGGER.catching(Level.DEBUG, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,152,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,158,private InetAddress resolveAddress(final String hostName) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,159,InetAddress address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,161,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,162,address = InetAddress.getByName(hostName);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,164,LOGGER.error("Could not find address of {}", hostName, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,165,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,168,return address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,171,private void checkDelay(final int delay, final OutputStream os) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,172,if (delay == 0 && os == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,173,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,177,private Socket createSocket(final SslFactoryData data) throws IOException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,178,SSLSocketFactory socketFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,179,SSLSocket socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,183,return socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,67,private static class SslFactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,69,private final String host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,70,private final int port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,71,private final int connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,72,private final int delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,73,private final boolean immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,74,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,77,final int connectTimeoutMillis, final int delayMillis, final boolean immediateFail,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,79,this.host = host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,80,this.port = port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,81,this.connectTimeoutMillis = connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,82,this.delayMillis = delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,83,this.immediateFail = immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,84,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,144,checkDelay(data.delayMillis, os);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,49,super.setLevel(LevelTranslator.toJavaLevel(logger.getLevel()));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,35,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,131,return CommonsCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,166,return FileRenameAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,124,return GzCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,237,private volatile boolean shutdown = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,63,private volatile long nextCheckNanos = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java,50,private volatile boolean initialized = false;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,155,private volatile short count = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java,55,private volatile Filter filter = null;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,60,volatile long midnightToday = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,61,volatile long midnightTomorrow = 0;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,106,logger.log(LevelTranslator.toLevel(level), msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,111,logger.log(LevelTranslator.toLevel(level), msg, param1);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,116,logger.log(LevelTranslator.toLevel(level), msg, params);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,121,logger.log(LevelTranslator.toLevel(level), msg, thrown);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,203,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.ERROR, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,208,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.WARN, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,213,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.INFO, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,218,logger.logIfEnabled(FQCN, LevelTranslator.CONFIG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,223,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.DEBUG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,228,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.TRACE, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,233,logger.logIfEnabled(FQCN, LevelTranslator.FINEST, null, msg);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,39,private ScheduledExecutorService executorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,54,return addr.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,58,while (interfaces.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,59,final NetworkInterface nic = interfaces.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,60,final Enumeration<InetAddress> addresses = nic.getInetAddresses();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,61,while (addresses.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,62,final InetAddress address = addresses.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,63,if (!address.isLoopbackAddress()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,64,final String hostname = address.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,65,if (hostname != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,66,return hostname;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,69,file = new File(path);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,70,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,71,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,21,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,22,import java.net.MalformedURLException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,25,import java.net.URLDecoder;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,26,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,62,if (uri.getScheme() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,63,File file = new File(uri.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,64,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,65,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,73,uri = new File(path).toURI();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,76,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,79,final String charsetName = StandardCharsets.UTF_8.name();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,80,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,81,String fileName = uri.toURL().getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,82,if (new File(fileName).exists()) { // LOG4J2-466
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,83,return new File(fileName); // allow files with '+' char in name
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,85,fileName = URLDecoder.decode(fileName, charsetName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,86,return new File(fileName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,88,LOGGER.warn("Invalid URL {}", uri, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,90,LOGGER.warn("Invalid encoding: {}", charsetName, uee);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,19,import java.text.ParseException;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,20,import java.text.SimpleDateFormat;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,21,import java.util.Calendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,22,import java.util.TimeZone;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,47,private static final long MINUTE_MS = 60000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,52,private static final long SECOND_MS = 1000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,57,private final long start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,61,private final long end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,69,final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,71,this.start = start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,72,this.end = end;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,146,final AtomicReference<WeakReference<LoggerContext>> r = new AtomicReference<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,147,r.set(new WeakReference<>(ctx));
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,148,CONTEXT_MAP.putIfAbsent(name, r);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,39,private static final char PREFIX_SEPARATOR = ':';
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,159,public static final StrMatcher DEFAULT_VALUE_DELIMITER = StrMatcher.stringMatcher(":-");
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,303,this(variableResolver, prefixMatcher, suffixMatcher, escape, DEFAULT_VALUE_DELIMITER);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,316,public StrSubstitutor(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,317,final StrLookup variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,937,if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,938,varName = varNameExpr.substring(0, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,940,break;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,269,sb.append('{');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,272,sb.append(", ");
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,278,sb.append('}');
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,120,return getThreadContextClassLoader().loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,122,return Class.forName(className);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,47,private transient EventDataConverter converter;
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,53,this.converter = createConverter();
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,365,if (eventLogger && marker != null && marker.contains(EVENT_MARKER) && converter != null) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,366,msg = converter.convertEvent(message, params, throwable);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,402,converter = createConverter();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/LogManager.java,89,return loggerAdapter.getLogger(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,43,event.execute(endOfBatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,44,event.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,55,private static final long LEAST;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,66,static {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,117,LEAST = buf.getLong() | rand << SHIFT_6;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,122,private UuidUtil() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,81,System.arraycopy(mac, index, node, index + 2, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,17,package org.apache.logging.log4j.core.appender;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,19,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,22,import org.apache.logging.log4j.core.Filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,23,import org.apache.logging.log4j.core.Layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,27,import org.apache.logging.log4j.core.layout.PatternLayout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,28,import org.apache.logging.log4j.core.util.CloseShieldOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,37,public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,46,private boolean follow = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,50,private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,54,private OutputStream target;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,57,public OutputStreamAppender build() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,67,this.follow = shouldFollow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,87,this.target = aTarget;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,94,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,95,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,96,private final String name;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,97,private final OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,109,public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,110,this.os = os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,111,this.name = type;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,112,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,119,private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,131,public OutputStreamManager createManager(final String name, final FactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,132,return new OutputStreamManager(data.os, data.name, data.layout, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,136,private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,161,public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,162,final OutputStream target, final String name, final boolean follow, final boolean ignore) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,163,if (name == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,164,LOGGER.error("No name provided for OutputStreamAppender");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,165,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,167,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,168,layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,173,private static OutputStreamManager getManager(final OutputStream target, final boolean follow,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,174,final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,175,final OutputStream os = new CloseShieldOutputStream(target);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,176,final String managerName = target.getClass().getName() + "@" + Integer.toHexString(target.hashCode()) + '.'
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,177,+ follow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,178,return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,182,public static Builder newBuilder() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,183,return new Builder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,186,private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,20,import java.util.WeakHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,24,import org.apache.logging.log4j.LogManager;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,25,import org.apache.logging.log4j.util.LoaderUtil;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,33,public abstract class AbstractLoggerAdapter<L> implements LoggerAdapter<L> {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,38,protected final Map<LoggerContext, ConcurrentMap<String, L>> registry = new WeakHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,46,public class ClassLoaderContextSelector implements ContextSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,149,ctx = CONTEXT_MAP.get(name).get().get();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,150,return ctx;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,166,ref.compareAndSet(weakRef, new WeakReference<>(ctx));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,29,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,54,private final org.apache.logging.log4j.core.Logger logger;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,73,private Category(final org.apache.logging.log4j.core.Logger logger) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,108,org.apache.logging.log4j.core.Logger getLogger() {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,113,final org.apache.logging.log4j.core.Logger parent = logger.getParent();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,114,if (parent == null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,117,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,173,case OFF:
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,174,return Level.OFF;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,190,logger.setLevel(org.apache.logging.log4j.Level.toLevel(level.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,198,logger.setLevel(org.apache.logging.log4j.Level.toLevel(priority.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,345,logger.logMessage(fqcn, lvl, null, msg, t);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,353,return logger.isAdditive();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,357,logger.setAdditive(additivity);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,369,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,370,while ((name = NameUtil.getSubName(name)) != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,371,final Logger subLogger = loggers.get(name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,372,if (subLogger != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,373,final ResourceBundle rb = subLogger.bundle;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,374,if (rb != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,375,return rb;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,439,if (logger.isEnabled(level, null, message, throwable)) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,440,logger.logMessage(FQCN, level, null, new ObjectMessage(message), throwable);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,462,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,471,return logger.isEnabled(level, null, null);
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,26,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,99,final LoggerContext ctx = PrivateManager.getContext();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,100,ctx.reconfigure();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,215,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,21,import org.apache.logging.log4j.core.LoggerContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,79,LOGGER.debug("Removing appender " + entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,509,&& method.getName().equals("newInstance")) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java,37,return new Log4jLogger(context.getLogger(key), name);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,477,private Configuration setConfiguration(final Configuration config) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,514,final StringBuilder buf = new StringBuilder(255);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,38,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,44,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,54,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,59,return super.read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,64,return super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,69,return LoggerBufferedInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,38,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,43,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,48,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,53,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,58,return super.read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,63,return super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,68,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,69,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,70,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,71,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,72,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,74,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,79,return super.readLine();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,40,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,41,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,46,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,47,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,52,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,53,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,58,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,63,return LoggerFilterOutputStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,68,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,69,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,74,this.out.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,75,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,80,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,81,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,49,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,55,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,60,return LoggerFilterWriter.class.getSimpleName() + "{writer=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,65,this.out.write(cbuf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,66,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,71,this.out.write(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,72,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,77,this.out.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,78,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,83,this.out.write(str);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,84,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,89,this.out.write(str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,90,this.logger.put(this.fqcn, str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,38,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,43,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,49,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,50,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,55,final int b = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,56,this.logger.put(this.fqcn, b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,57,return b;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,62,return read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,67,final int bytesRead = super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,68,this.logger.put(this.fqcn, b, off, bytesRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,69,return bytesRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,74,return LoggerInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,39,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,40,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,44,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,45,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,60,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,65,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,70,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,45,super(new LoggerOutputStream(logger, level, marker, ensureNonNull(charset), fqcn == null ? FQCN : fqcn),
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,46,autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,52,super(new LoggerFilterOutputStream(out, ensureNonNull(charset), logger, fqcn == null ? FQCN : fqcn, level,
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,53,marker), autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,62,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,68,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,74,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,80,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,85,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,90,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,95,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,101,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,107,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,112,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,117,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,122,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,127,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,132,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,137,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,142,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,147,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,152,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,158,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,164,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,169,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,174,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,179,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,184,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,189,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,194,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,199,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,204,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,209,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,214,return LoggerPrintStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,219,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,224,super.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,229,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,51,super(new LoggerWriter(logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,56,super(new LoggerFilterWriter(writer, logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,61,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,67,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,73,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,79,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,84,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,89,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,94,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,100,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,106,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,111,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,116,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,121,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,126,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,131,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,136,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,141,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,146,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,151,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,157,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,163,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,168,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,173,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,178,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,183,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,188,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,193,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,198,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,203,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,208,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,213,return LoggerPrintWriter.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,218,super.write(buf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,223,super.write(buf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,228,super.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,233,super.write(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,238,super.write(s, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,55,final int c = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,56,this.logger.put(this.fqcn, c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,57,return c;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,62,return read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,67,final int charsRead = super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,68,this.logger.put(this.fqcn, cbuf, off, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,69,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,74,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,75,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,76,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,77,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,78,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,80,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,85,return LoggerReader.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,36,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,40,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,41,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,46,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,56,return this.getClass().getSimpleName() + "[fqcn=" + this.fqcn + ", logger=" + this.logger + "]";
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,61,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,66,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,71,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,76,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,81,this.logger.put(this.fqcn, str, off, len);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,46,private MapPatternConverter(final String[] options) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,58,return new MapPatternConverter(options);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,77,toAppendTo.append("{}");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,78,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,71,if (manager.getFileSize() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,72,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,59,aManager.getPatternProcessor().getNextTime(aManager.getFileTime(), interval, modulate);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,19,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,20,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,21,import java.io.PrintStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,22,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,23,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,24,import java.lang.reflect.Constructor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,25,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,26,import java.util.concurrent.atomic.AtomicInteger;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,93,final ContextSelector selector = LoaderUtil.newCheckedInstanceOfProperty(Constants.LOG4J_CONTEXT_SELECTOR,
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,106,final ShutdownCallbackRegistry registry = LoaderUtil.newCheckedInstanceOfProperty(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,273,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,274,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,275,InstantiationException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,276,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,277,InvocationTargetException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,278,return LoaderUtil.newInstanceOf(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,296,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,297,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,298,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,299,InvocationTargetException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,300,InstantiationException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,301,return LoaderUtil.newCheckedInstanceOf(className, clazz);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,583,return (T) appenders.get(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,603,appenders.putIfAbsent(appender.getName(), appender);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,719,final Appender app = appenders.remove(appenderName);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,50,return MDC.getCopyOfContextMap().containsKey(key);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,67,return MDC.getCopyOfContextMap().isEmpty();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,104,final String font, final String fontSize, final String headerSize) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,134,sbuf.append(event.getTimeMillis() - jvmStartTime);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,327,return new HtmlLayout(locationInfo, title, contentType, charset, font, fontSize, headerSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,404,fontSize.larger().getFontSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,303,LOGGER.trace("{} notifying ReliabilityStrategies that appenders will be stopped.", cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,304,for (final LoggerConfig loggerConfig : loggerConfigs.values()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,305,loggerConfig.getReliabilityStrategy().beforeStopAppenders();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,307,root.getReliabilityStrategy().beforeStopAppenders();
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessage.java,175,stringArgs[i] = obj.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,459,scriptManager.addScript(script);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,157,if (escapedLogger.isEmpty()) {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,106,patternLayoutEncoder.init(baos);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,117,patternLayoutEncoder.doEncode(LOGBACKEVENT);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,119,return baos.toByteArray();
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,186,private boolean enableSubstitutionInVariables;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,24,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,30,import org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,31,import org.apache.logging.log4j.core.appender.rolling.action.CompositeAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,33,import org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,34,import org.apache.logging.log4j.core.appender.rolling.action.ZipCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,244,final boolean useMax = fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,245,int minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,246,if (min != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,247,minIndex = Integer.parseInt(min);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,248,if (minIndex < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,249,LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,250,minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,253,int maxIndex = DEFAULT_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,254,if (max != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,255,maxIndex = Integer.parseInt(max);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,256,if (maxIndex < minIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,257,maxIndex = minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,258,LOGGER.error("Maximum window size must be greater than the minimum windows size. Set to " + maxIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,292,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,293,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,298,final int suffixLength = suffixLength(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,301,for (int i = highIndex; i >= lowIndex; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,302,File toRename = new File(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,303,if (i == highIndex && toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,310,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,312,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,313,final File toRenameBase = new File(highFilename.substring(0, highFilename.length() - suffixLength));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,315,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,316,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,317,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,318,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,319,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,322,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,323,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,327,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,332,if (i == lowIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,333,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} at low index {}: all slots full.",
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,334,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,335,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,336,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,339,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,350,String renameTo = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,352,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,353,renameTo = lowFilename.substring(0, lowFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,356,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,357,highFilename = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,359,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,373,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,374,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,375,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,376,LOGGER.debug("DefaultRolloverStrategy.purgeAscending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,377,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,378,if (!action.execute()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,382,LOGGER.warn("Exception during purge in RollingFileAppender", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,383,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,399,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,400,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,406,final int suffixLength = suffixLength(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,408,for (int i = lowIndex; i <= highIndex; i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,409,File toRename = new File(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,410,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,412,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,413,final File toRenameBase = new File(lowFilename.substring(0, lowFilename.length() - suffixLength));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,415,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,416,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,417,LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,418,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,419,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,422,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,423,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,427,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,432,if (i == highIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,433,LOGGER.debug(
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,435,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,436,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,437,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,440,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,446,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,451,String renameTo = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,453,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,454,renameTo = highFilename.substring(0, highFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,457,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,458,lowFilename = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,467,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,468,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,470,LOGGER.debug("DefaultRolloverStrategy.purgeDescending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,471,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,502,if (maxIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,503,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,505,final long startNanos = System.nanoTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,506,final int fileIndex = purge(minIndex, maxIndex, manager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,507,if (fileIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,508,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,510,if (LOGGER.isTraceEnabled()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,511,final double durationMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,512,LOGGER.trace("DefaultRolloverStrategy.purge() took {} milliseconds", durationMillis);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,551,return "DefaultRolloverStrategy(min=" + minIndex + ", max=" + maxIndex + ')';
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,332,watchManager.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,334,configurationScheduler.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,130,entry.setKey(plugin.name().toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,161,entry.setKey(alias.toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,150,final String prefix = var.substring(0, prefixPos);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,923,final int endPos = pos;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,939,varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,47,if (scheduledItems > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,60,if (executorService != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,62,executorService.shutdown();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,72,++scheduledItems;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,96,return executorService.schedule(callable, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,108,return executorService.schedule(command, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,139,return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,153,return executorService.scheduleWithFixedDelay(command, initialDelay, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,71,if (!isStarted()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,182,socket = (SSLSocket) socketFactory.createSocket(data.host, data.port);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,48,this.cronExpression = schedule;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,49,this.configuration = configuration;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,76,LOGGER.error(SHUTDOWN_HOOK_MARKER, "Caught exception executing shutdown hook {}", hook, t);
log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessageFactory.java,77,return new LocalizedMessage(baseName,  key, params);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,179,logIfEnabled(FQCN, Level.DEBUG, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,214,logIfEnabled(FQCN, Level.DEBUG, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,337,logIfEnabled(FQCN, Level.ERROR, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,372,logIfEnabled(FQCN, Level.ERROR, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,489,logIfEnabled(FQCN, Level.FATAL, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,524,logIfEnabled(FQCN, Level.FATAL, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,619,logIfEnabled(FQCN, Level.INFO, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,654,logIfEnabled(FQCN, Level.INFO, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,809,logIfEnabled(FQCN, level, marker, msg, (Throwable) null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,846,logIfEnabled(FQCN, level, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1079,logIfEnabled(FQCN, Level.TRACE, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1114,logIfEnabled(FQCN, Level.TRACE, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1199,logIfEnabled(FQCN, Level.WARN, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1234,logIfEnabled(FQCN, Level.WARN, null, msg, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,59,return fastDateFormat.toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,66,StringBuilder format(long millis, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,76,StringBuilder format(Date date, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,88,StringBuilder format(Calendar calendar, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,32,public class FastDateFormat extends Format implements DatePrinter, DateParser, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,56,private static final long serialVersionUID = 2L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,58,private static final FormatCache<FastDateFormat> CACHE = new FormatCache<FastDateFormat>() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,80,protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,81,this(pattern, timeZone, locale, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,98,protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,99,final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,100,printer = new FastDatePrinter(pattern, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,101,parser = new FastDateParser(pattern, timeZone, locale, centuryStart);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,113,return CACHE.getInstance();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,126,return CACHE.getInstance(pattern, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,140,return CACHE.getInstance(pattern, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,154,return CACHE.getInstance(pattern, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,169,return CACHE.getInstance(pattern, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,184,return CACHE.getDateInstance(style, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,199,return CACHE.getDateInstance(style, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,214,return CACHE.getDateInstance(style, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,229,return CACHE.getDateInstance(style, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,244,return CACHE.getTimeInstance(style, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,259,return CACHE.getTimeInstance(style, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,274,return CACHE.getTimeInstance(style, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,289,return CACHE.getTimeInstance(style, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,305,return CACHE.getDateTimeInstance(dateStyle, timeStyle, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,321,return CACHE.getDateTimeInstance(dateStyle, timeStyle, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,336,public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,337,final TimeZone timeZone) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,353,public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,354,final TimeZone timeZone, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,355,return CACHE.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,372,return printer.format(obj, toAppendTo, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,426,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,440,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,454,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,548,public String toPattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,549,return printer.getPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,564,if (!(obj instanceof FastDateFormat)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,593,return "FastDateFormat[" + printer.getPattern() + "," + printer.getLocale() + ","
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,594,+ printer.getTimeZone().getID() + "]";
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,606,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,607,return printer.applyRules(calendar, buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,28,import java.util.GregorianCalendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,73,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,128,for (int i = mRules.length; --i >= 0;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,237,rule = selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,238,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,239,case 'X': // ISO 8601
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,241,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,377,throw new IllegalArgumentException("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName()));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,388,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,408,private GregorianCalendar newCalendar() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,410,return new GregorianCalendar(mTimeZone, mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,420,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,441,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,442,return format(new Date(millis), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,451,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,452,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,463,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,465,return format(calendar.getTime(), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,477,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,478,for (final Rule rule : mRules) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,479,rule.appendTo(buf, calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,547,return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,594,private static void appendDigits(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,595,buffer.append((char) (value / 10 + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,596,buffer.append((char) (value % 10 + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,620,void appendTo(StringBuilder buffer, Calendar calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,635,void appendTo(StringBuilder buffer, int value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,667,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,701,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,732,for (int i = mValues.length; --i >= 0;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,745,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,779,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,787,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,789,buffer.append((char) (value + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,793,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,826,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,834,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,836,buffer.append((char) (value + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,879,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,887,public final void appendTo(final StringBuilder buffer, int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,889,for (int digit = 0; digit < mSize; ++digit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,890,buffer.append('0');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,893,int index = buffer.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,894,for (; value > 0; value /= 10) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,895,buffer.setCharAt(--index, (char) ('0' + value % 10));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,929,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,937,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,941,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,973,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,981,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1013,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1021,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1055,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1067,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1101,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1113,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1121,7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1142,value = prior;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1189,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1231,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1262,static final Iso8601_Rule ISO8601_HOURS = new Iso8601_Rule(3);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1276,switch (tokenLen) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1284,throw new IllegalArgumentException("invalid number of X");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1311,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1328,if (length < 5) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1332,if (length == 6) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1360,TimeZoneDisplayKey(final TimeZone timeZone, final boolean daylight, final int style, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1375,return (mStyle * 31 + mLocale.hashCode()) * 31 + mTimeZone.hashCode();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1387,final TimeZoneDisplayKey other = (TimeZoneDisplayKey) obj;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1388,return mTimeZone.equals(other.mTimeZone) && mStyle == other.mStyle && mLocale.equals(other.mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,40,static final int NONE = -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,42,private static final ConcurrentMap<MultipartKey, String> DATETIME_INSTANCE_CACHE =
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,81,if (format == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,83,final F previousValue = cInstanceCache.putIfAbsent(key, format);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,87,format = previousValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,119,private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,120,Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,192,String pattern = DATETIME_INSTANCE_CACHE.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,197,formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,199,formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,203,pattern = ((SimpleDateFormat) formatter).toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,204,final String previous = DATETIME_INSTANCE_CACHE.putIfAbsent(key, pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,209,pattern = previous;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,253,if (hashCode == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,254,int rc = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,255,for (final Object key : keys) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,256,if (key != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,257,rc = rc * 7 + key.hashCode();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,260,hashCode = rc;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,46,static final Locale JAPANESE_IMPERIAL = new Locale("ja", "JP", "JP");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,55,private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,57,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,58,return iValue - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,62,private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,67,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,68,int iValue = Integer.parseInt(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,69,if (iValue < 100) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,70,iValue = parser.adjustYear(iValue);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,72,cal.set(Calendar.YEAR, iValue);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,76,private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,77,private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,78,private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,79,private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,80,private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,81,private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,82,private static final Strategy DAY_OF_WEEK_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,83,private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,84,private static final Strategy HOUR24_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,86,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,87,return iValue == 24 ? 0 : iValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,90,private static final Strategy HOUR12_STRATEGY = new NumberStrategy(Calendar.HOUR) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,92,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,93,return iValue == 12 ? 0 : iValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,96,private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,97,private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,98,private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,99,private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,100,private static final Strategy ISO_8601_STRATEGY = new ISO8601TimeZoneStrategy("(Z|(?:[+-]\\d{2}(?::?\\d{2})?))");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,108,private final boolean lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,111,private transient Pattern parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,112,private transient Strategy[] strategies;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,115,private transient String currentFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,116,private transient Strategy nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,131,this(pattern, timeZone, locale, null, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,146,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale, final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,147,this(pattern, timeZone, locale, centuryStart, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,164,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,165,final Date centuryStart, final boolean lenient) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,169,this.lenient = lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,174,if (centuryStart != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,176,centuryStartYear = definingCalendar.get(Calendar.YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,178,centuryStartYear = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,182,centuryStartYear = definingCalendar.get(Calendar.YEAR) - 80;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,184,century = centuryStartYear / 100 * 100;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,185,startYear = centuryStartYear - century;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,198,final StringBuilder regex = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,201,final Matcher patternMatcher = formatPattern.matcher(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,202,if (!patternMatcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,203,throw new IllegalArgumentException("Illegal pattern character '"
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,204,+ pattern.charAt(patternMatcher.regionStart()) + "'");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,207,currentFormatField = patternMatcher.group();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,208,Strategy currentStrategy = getStrategy(currentFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,209,for (;;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,210,patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,211,if (!patternMatcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,212,nextStrategy = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,213,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,215,final String nextFormatField = patternMatcher.group();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,216,nextStrategy = getStrategy(nextFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,217,if (currentStrategy.addRegex(this, regex)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,218,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,220,currentFormatField = nextFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,221,currentStrategy = nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,223,if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,224,throw new IllegalArgumentException("Failed to parse \"" + pattern + "\" ; gave up at index "
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,225,+ patternMatcher.regionStart());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,227,if (currentStrategy.addRegex(this, regex)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,228,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,230,currentFormatField = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,231,strategies = collector.toArray(new Strategy[collector.size()]);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,232,parsePattern = Pattern.compile(regex.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,272,Pattern getParsePattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,273,return parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,292,return pattern.equals(other.pattern) && timeZone.equals(other.timeZone) && locale.equals(other.locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,352,final Date date = parse(source, new ParsePosition(0));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,356,throw new ParseException("(The " + locale + " locale does not support dates before 1868 AD)\n"
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,357,+ "Unparseable date: \"" + source + "\" does not match " + parsePattern.pattern(), 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,359,throw new ParseException("Unparseable date: \"" + source + "\" does not match " + parsePattern.pattern(), 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,387,final int offset = pos.getIndex();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,388,final Matcher matcher = parsePattern.matcher(source.substring(offset));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,389,if (!matcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,390,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,393,final Calendar cal = Calendar.getInstance(timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,395,cal.setLenient(lenient);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,397,for (int i = 0; i < strategies.length;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,398,final Strategy strategy = strategies[i++];
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,399,strategy.setCalendar(this, cal, matcher.group(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,401,pos.setIndex(offset + matcher.end());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,402,return cal.getTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,440,private static StringBuilder escapeRegex(final StringBuilder regex, final String value, final boolean unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,441,regex.append("\\Q");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,442,for (int i = 0; i < value.length(); ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,443,char c = value.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,444,switch (c) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,445,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,446,if (unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,447,if (++i == value.length()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,448,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,450,c = value.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,452,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,453,case '\\':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,454,if (++i == value.length()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,455,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,464,regex.append(c); // we always want the original \
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,465,c = value.charAt(i); // Is it followed by E ?
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,466,if (c == 'E') { // \E detected
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,467,regex.append("E\\\\E\\"); // see comment above
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,468,c = 'Q'; // appended below
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,470,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,471,default:
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,472,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,474,regex.append(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,476,regex.append("\\E");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,477,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,488,private static Map<String, Integer> getDisplayNames(final int field, final Calendar definingCalendar,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,489,final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,490,return definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,509,boolean isNextNumber() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,510,return nextStrategy != null && nextStrategy.isNumber();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,518,int getFieldWidth() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,519,return currentFormatField.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,545,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,557,abstract boolean addRegex(FastDateParser parser, StringBuilder regex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,564,private static final Pattern formatPattern = Pattern
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,565,.compile("D+|E+|F+|G+|H+|K+|M+|S+|W+|X+|Z+|a+|d+|h+|k+|m+|s+|u+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,574,private Strategy getStrategy(final String formatField, final Calendar definingCalendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,575,switch (formatField.charAt(0)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,576,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,577,if (formatField.length() > 2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,578,return new CopyQuotedStrategy(formatField.substring(1, formatField.length() - 1));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,582,return new CopyQuotedStrategy(formatField);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,597,: NUMBER_MONTH_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,606,case 'h': // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,608,case 'k': // Hour in day (1-24), i.e. midnight is 24, not 0
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,619,return formatField.length() > 2 ? LITERAL_YEAR_STRATEGY : ABBREVIATED_YEAR_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,621,return ISO8601TimeZoneStrategy.getStrategy(formatField.length());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,623,if (formatField.equals("ZZ")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,624,return ISO_8601_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,662,strategy = field == Calendar.ZONE_OFFSET ? new TimeZoneStrategy(locale) : new CaseInsensitiveTextStrategy(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,663,field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,676,private final String formatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,692,char c = formatField.charAt(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,693,if (c == '\'') {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,694,c = formatField.charAt(1);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,696,return Character.isDigit(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,703,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,704,escapeRegex(regex, formatField, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,705,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,712,private static class CaseInsensitiveTextStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,714,private final Locale locale;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,727,final Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,730,for (final Map.Entry<String, Integer> entry : keyValues.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,731,lKeyValues.put(entry.getKey().toLowerCase(locale), entry.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,739,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,741,for (final String textKeyValue : lKeyValues.keySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,742,simpleQuote(regex, textKeyValue).append('|');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,744,regex.setCharAt(regex.length() - 1, ')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,745,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,754,if (iVal == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,755,final StringBuilder sb = new StringBuilder(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,756,sb.append(" not in (");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,757,for (final String textKeyValue : lKeyValues.keySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,758,sb.append(textKeyValue).append(' ');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,760,sb.setCharAt(sb.length() - 1, ')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,761,throw new IllegalArgumentException(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,779,this.field = field;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,794,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,796,if (parser.isNextNumber()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,797,regex.append("(\\p{Nd}{").append(parser.getFieldWidth()).append("}+)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,799,regex.append("(\\p{Nd}++)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,801,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,808,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,809,cal.set(field, modify(Integer.parseInt(value)));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,818,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,826,static class TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,828,private static final String GMT_OPTION = "GMT[+-]\\d{1,2}:\\d{2}";
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,832,private final String validTimeZoneChars;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,848,sb.append('(' + RFC_822_TIME_ZONE + "|(?iu)" + GMT_OPTION);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,859,if (!tzNames.containsKey(zoneName)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,860,tzNames.put(zoneName, tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,861,simpleQuote(sb.append('|'), zoneName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,866,sb.append(')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,867,validTimeZoneChars = sb.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,874,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,875,regex.append(validTimeZoneChars);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,876,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,884,TimeZone tz;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,886,tz = TimeZone.getTimeZone("GMT" + value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,888,tz = TimeZone.getTimeZone(value.toUpperCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,890,tz = tzNames.get(value.toLowerCase(locale));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,891,if (tz == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,892,throw new IllegalArgumentException(value + " is not a supported timezone name");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,895,cal.setTimeZone(tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,899,private static class ISO8601TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,901,private final String pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,909,this.pattern = pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,916,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,917,regex.append(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,918,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,945,switch (tokenLen) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,723,private final Message message;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,759,final Log4jLogEvent result = new Log4jLogEvent(loggerName, marker, loggerFQCN, level, message, thrown,
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,17,package org.apache.logging.log4j.util;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,19,import java.io.IOException;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,20,import java.io.InputStream;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,21,import java.net.URL;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,22,import java.util.ArrayList;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,23,import java.util.List;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,24,import java.util.Properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,36,public final class PropertiesUtil {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,38,private static final PropertiesUtil LOG4J_PROPERTIES = new PropertiesUtil("log4j2.component.properties");
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,42,private final Properties props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,49,public PropertiesUtil(final Properties props) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,50,this.props = props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,59,public PropertiesUtil(final String propertiesFileName) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,61,final Properties properties = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,62,for (final URL url : LoaderUtil.findResources(propertiesFileName)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,66,properties.load(in);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,79,this.props = properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,89,static Properties loadClose(final InputStream in, final Object source) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,90,final Properties props = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,91,if (null != in) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,92,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,93,props.load(in);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,97,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,98,in.close();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,104,return props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,112,public static PropertiesUtil getProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,113,return LOG4J_PROPERTIES;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,140,public int getIntegerProperty(final String name, final int defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,150,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,151,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,152,return Integer.parseInt(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,154,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,157,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,167,public long getLongProperty(final String name, final long defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,177,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,178,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,179,return Long.parseLong(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,181,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,184,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,219,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,228,public static Properties getSystemProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,229,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,230,return new Properties(System.getProperties());
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,234,return new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,249,if (prefix == null || prefix.length() == 0) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,250,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,258,if (key.startsWith(prefixToMatch)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,259,subset.setProperty(key.substring(prefixToMatch.length()), properties.getProperty(key));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,260,keys.add(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,264,properties.remove(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,267,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,274,public boolean isOsWindows() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,275,return getStringProperty("os.name").startsWith("Windows");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,67,SYSTEM_OUT,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,69,SYSTEM_ERR
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,37,return new CoreLogger((org.apache.logging.log4j.core.Logger) context.getLogger(name, MESSAGE_FACTORY));
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,506,LOGGER.error("Could not reconfigure JMX", t);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,627,sb.append(" Message=").append(message.getFormattedMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,294,LOGGER.error("Unable to unregister MBeans", ex);
log4j-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java,53,servletContext.log(((AbstractStringLayout) getLayout()).toSerializable(event));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,245,return Arrays.equals(keys, ((MultipartKey) obj).keys);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/MarkerPatternSelector.java,102,LOGGER.warn("No marker patterns were provided");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,31,import org.apache.logging.log4j.core.LifeCycle;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,152,logMessage(fqcn, level, CATCHING_MARKER, catchingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,159,logMessage(FQCN, Level.ERROR, CATCHING_MARKER, catchingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,933,logMessage(fqcn, level, marker, msg, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1011,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1016,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1022,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1028,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1035,logMessage(FQCN, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1043,logMessage(FQCN, level, null, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1068,logMessage(fqcn, level, THROWING_MARKER, throwingMsg(t), t);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,352,log(logEventFactory.createEvent(loggerName, marker, fqcn, level, data, props, t));
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,67,LOGGER.error("Unable to create Lookup for {}", entry.getKey(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,109,LOGGER.warn(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,120,LOGGER.info("Log4j appears to be running in a Servlet environment, but there's no log4j-web module " +
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java,55,return value;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java,77,return name + '=' + value;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,36,final StringBuilder log) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,293,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/LevelRangeFilter.java,66,final Level actualMaxLevel = minLevel == null ? Level.ERROR : maxLevel;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,25,import org.apache.logging.log4j.Logger;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,35,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,46,private static final Logger LOGGER = StatusLogger.getLogger();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,107,long createTime = Long.MAX_VALUE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,109,if (entry.getValue() < createTime) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,110,createTime = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,113,if (createTime < Long.MAX_VALUE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,132,LOGGER.error("A timeToLive  value is required");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,147,final long ttl = units.toMillis(Long.parseLong(timeToLive));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,150,return new IdlePurgePolicy(ttl, configuration.getScheduler());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,186,LOGGER.debug("Stopping route with key" + key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,188,control.getAppender().stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,235,final List<String> neverDecode = Arrays.asList(VFSZIP, BUNDLE_RESOURCE);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,156,InputStream is = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,157,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,158,is = Loader.getResourceAsStream(schemaResource, XmlConfiguration.class.getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,160,LOGGER.error("Unable to access schema {}", this.schemaResource, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,162,if (is != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,163,final Source src = new StreamSource(is, LOG4J_XSD);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,164,final SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,165,Schema schema = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,166,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,167,schema = factory.newSchema(src);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,169,LOGGER.error("Error parsing Log4j schema", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,171,if (schema != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,172,final Validator validator = schema.newValidator();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,174,validator.validate(new StreamSource(new ByteArrayInputStream(buffer)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,176,LOGGER.error("Error reading configuration for validation", ioe);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,178,LOGGER.error("Error validating configuration", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,92,return getFilter() != null && Filter.Result.DENY == getFilter().filter(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,354,file.createNewFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,361,OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,363,os = new FileOutputStream(name, data.append);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,370,final long time = file.lastModified(); // LOG4J2-531 create file first so time has valid value
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,371,return new RollingFileManager(name, data.pattern, os, data.append, size, time, data.policy,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,43,private static final int DEFAULT_BUFFER_SIZE = 8192;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,148,final FileManager manager = FileManager.getFileManager(fileName, isAppend, isLocking, isBuffered, advertiseUri,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,68,final boolean bufferedIo, final String advertiseUri, final Layout<? extends Serializable> layout,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,74,return (FileManager) getManager(fileName, new FactoryData(append, locking, bufferedIo, bufferSize,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,82,final FileChannel channel = ((FileOutputStream) getOutputStream()).getChannel();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,42,this.os.write(header, 0, header.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,94,protected OutputStream getOutputStream() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,123,os.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,125,final String msg = "Error writing to stream " + getName();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,126,throw new AppenderLoggingException(msg, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,141,if (stream == System.out || stream == System.err) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,858,final String zoneName = zoneNames[i].toLowerCase(locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,38,final String rawValue = node.getValue() != null ? node.getValue() :
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,39,removeAttributeValue(node.getAttributes(), "value");
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,65,loadProvider(bundle.adapt(BundleWiring.class));
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,87,loadProvider(wire.getProviderWiring());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,61,scanBundleForPlugins(bundle);
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,67,LOGGER.trace("Scanning bundle [{}] for plugins.", bundle.getSymbolicName());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,68,PluginRegistry.getInstance().loadFromBundle(bundle.getBundleId(),
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,69,bundle.adapt(BundleWiring.class).getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,19,import java.util.concurrent.ExecutorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,20,import java.util.concurrent.Executors;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,157,executor = Executors.newSingleThreadExecutor(THREAD_FACTORY);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,158,backgroundThreadId = DisruptorUtil.getExecutorThreadId(executor);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,164,disruptor.handleExceptionsWith(errorHandler);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,199,temp.shutdown(); // busy-spins until all events currently in the disruptor have been processed
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,203,executor = null; // release reference to allow GC
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,126,LOGGER.error("Unable to inject fields into builder class for plugin type {}, element {}.", this.clazz,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,127,node.getName(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,136,LOGGER.error("Unable to invoke factory method in class {} for element {}.", this.clazz, this.node.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,137,e);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,96,.getUrl().toString(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,384,final StructuredDataElement formattedContextMap = new StructuredDataElement(contextMap, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,400,final StructuredDataElement formattedData = new StructuredDataElement(map, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,495,private void formatStructuredElement(final String id, final String prefix, final StructuredDataElement data,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,504,appendMap(prefix, data.getFields(), sb, noopChecker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,506,appendMap(prefix, data.getFields(), sb, checker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,685,return new StructuredDataElement(map, discardIfEmpty);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,694,public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,47,private final Collection<Cancellable> hooks = new CopyOnWriteArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,72,for (final Runnable hook : hooks) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,73,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,74,hook.run();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,110,hooks.add(receipt);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,120,final Set<String> except = new HashSet<>(2);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,24,import org.apache.logging.log4j.core.config.plugins.Plugin;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,25,import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,26,import org.apache.logging.log4j.core.config.plugins.PluginFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,44,private Filter filter;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,30,import org.apache.logging.log4j.core.util.NameUtil;
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,59,return (LoggerContext) getContext(FQCN, false);
