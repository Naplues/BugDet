File,Line_number,SRC
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,113,final private static String JDK_RESOURCE_LOCATION =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,252,ServletHolder resources = new ServletHolder(ServletContainer.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,253,resources.setInitParameter("com.sun.jersey.config.property.resourceConfigClass",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,255,resources.setInitParameter("com.sun.jersey.config.property.packages",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,51,private static Set<String> pkPropertyIds =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,52,new HashSet<String>(Arrays.asList(new String[]{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,122,return pkPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,138,List<StatusCommand> cmds = new ArrayList<StatusCommand>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,52,private static final String CLUSTER_NAME_PROPERTY_ID                  = PropertyHelper.getPropertyId("Clusters", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,53,private static final String HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID   = PropertyHelper.getPropertyId("HostRoles", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,54,private static final String HOST_COMPONENT_HOST_NAME_PROPERTY_ID      = PropertyHelper.getPropertyId("HostRoles", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,55,private static final String HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("HostRoles", "component_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,265,ResourceProvider provider = getResourceProvider(Resource.Type.Cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,268,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,269,Set<Resource> clusters = provider.getResources(request, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,273,clusterGangliaCollectorMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,275,for (Resource cluster : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,277,String clusterName = (String) cluster.getPropertyValue(CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,301,provider = getResourceProvider(Resource.Type.HostComponent);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,303,request = PropertyHelper.getReadRequest(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,304,HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,310,Map<String, String> hostComponentMap = clusterHostComponentMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,312,if (hostComponentMap == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,313,hostComponentMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,314,clusterHostComponentMap.put(clusterName, hostComponentMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,317,for (Resource hostComponent : hostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,318,String componentName = (String) hostComponent.getPropertyValue(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,330,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,331,LOG.error("Caught UnsupportedPropertyException while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,333,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,335,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,336,LOG.error("Caught NoSuchResourceException exception while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,338,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,340,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,341,LOG.error("Caught NoSuchParentResourceException exception while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,343,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,139,throw new IllegalArgumentException("Cluster name should be provided" +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,144,LOG.debug("Received a createCluster request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,146,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,151,throw new IllegalArgumentException("Stack information should be"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,152,+ " provided when creating a cluster");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,57,private Map<Role, Float> successFactors = new HashMap<Role, Float>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,61,new TreeMap<String, Map<String, HostRoleCommand>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,63,new TreeMap<String, List<ExecutionCommandWrapper>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,131,List<HostRoleCommand> commands = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,215,List<String> hlist = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,48,private Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ExecutionCommandEntity.java,21,import javax.persistence.*;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,253,handle.cancel(true);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,295,List<HostRoleCommand> commands = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,54,public void setUserName(String userName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,55,this.userName = userName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,39,private Long stageId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,52,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,53,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,54,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,56,StageEntityPK that = (StageEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,58,if (requestId != null ? !requestId.equals(that.requestId) : that.requestId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,59,if (stageId != null ? !stageId.equals(that.stageId) : that.stageId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,61,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,66,int result = requestId != null ? requestId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,67,result = 31 * result + (stageId != null ? stageId.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,68,return result;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,41,public List<Stage> getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,132,public List<Stage> getStagesInProgress() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,78,startTime = hostRoleCommandEntity.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,79,lastAttemptTime = hostRoleCommandEntity.getLastAttemptTime();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,54,private final boolean isClientOnlyService;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,183,if (s.getAttemptCount(host, roleStr) >= maxAttempts) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,33,public void abortOperation(long requestId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,104,public void abortOperation(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,56,private static final Logger LOG = LoggerFactory.getLogger(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,57,ClustersImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,93,private ServiceFactory serviceFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,337,Set<String> duplicates = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,33,public class RoleCommandOrder {
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,41,this.roleDependencies = rd;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,51,graph = new TreeMap<String, RoleGraphNode>();
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,98,LOG.debug(this.stringifyGraph());
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,113,if (this.sameHostOptimization) {
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,128,for (RoleGraphNode edgeNode: nodeToRemove.getEdges()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,191,clusters.mapHostsToCluster(request.getHostNames(),
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,34,public HostComponentDesiredStateEntity findByPK(HostComponentDesiredStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,35,return entityManagerProvider.get().find(HostComponentDesiredStateEntity.class, primaryKey);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,59,public void removeByPK(HostComponentDesiredStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,60,remove(findByPK(primaryKey));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,123,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,18,package org.apache.ambari.server.orm.entities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,20,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,21,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,22,import java.io.Serializable;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,25,public class HostComponentDesiredStateEntityPK implements Serializable {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,26,private Long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,30,public Long getClusterId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,31,return clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,34,public void setClusterId(Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,35,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,38,private String serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,42,public String getServiceName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,43,return serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,46,public void setServiceName(String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,47,this.serviceName = serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,62,private String componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,66,public String getComponentName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,67,return componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,70,public void setComponentName(String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,71,this.componentName = componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,75,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,76,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,77,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,79,HostComponentDesiredStateEntityPK that = (HostComponentDesiredStateEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,81,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,82,if (componentName != null ? !componentName.equals(that.componentName) : that.componentName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,85,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,89,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,90,int result = clusterId !=null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,92,result = 31 * result + (componentName != null ? componentName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntityPK.java,93,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,125,HostComponentDesiredStateEntityPK pk = new HostComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,126,pk.setClusterId(hostComponentStateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,127,pk.setServiceName(hostComponentStateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,128,pk.setComponentName(hostComponentStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,131,HostComponentDesiredStateEntity hostComponentDesiredStateEntity = hostComponentDesiredStateDAO.findByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,38,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java,41,String desiredStackVersion, String desiredState) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,210,(String) properties.get(SERVICE_SERVICE_STATE_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/ComparisonPredicate.java,93,return stringValue.compareTo(propertyValue.toString());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ServiceComponentDesiredStateDAO.java,55,entityManagerProvider.get().remove(merge(serviceComponentDesiredStateEntity));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,224,notifyDelete(Resource.Type.Host, predicate);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,187,hostRoleCommandDAO.merge(hostRoleCommandEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,156,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,21,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,22,import org.apache.ambari.server.controller.spi.Resource;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,24,import javax.ws.rs.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,25,import javax.ws.rs.core.*;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,45,public static final String CONFIG_FILE = "ambari.properties";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,46,public static final String BOOTSTRAP_DIR = "bootstrap.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,48,public static final String WEBAPP_DIR = "webapp.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,49,public static final String BOOTSTRAP_SCRIPT = "bootstrap.script";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,51,public static final String BOOTSTRAP_SETUP_AGENT_SCRIPT = "bootstrap.setup_agent.script";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,52,public static final String BOOTSTRAP_SETUP_AGENT_PASSWORD = "bootstrap.setup_agent.password";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,53,public static final String BOOTSTRAP_MASTER_HOSTNAME = "bootstrap.master_host_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,55,public static final String API_USE_SSL = "api.ssl";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,56,public static final String SRVR_KSTR_DIR_KEY = "security.server.keys_dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,57,public static final String SRVR_CRT_NAME_KEY = "security.server.cert_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,58,public static final String SRVR_KEY_NAME_KEY = "security.server.key_name";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,63,public static final String SRVR_CRT_PASS_KEY = "security.server.crt_pass";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,64,public static final String SRVR_CRT_PASS_LEN_KEY = "security.server.crt_pass.len";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,67,public static final String PASSPHRASE_KEY = "security.server.passphrase";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,68,public static final String RESOURCES_DIR_KEY = "resources.dir";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,112,public static final String SRVR_CRT_NAME_DEFAULT = "ca.crt";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,113,public static final String SRVR_KEY_NAME_DEFAULT = "ca.key";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,114,public static final String KSTR_NAME_DEFAULT = "keystore.p12";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,116,private static final String SRVR_CRT_PASS_LEN_DEFAULT = "50";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,117,private static final String PASSPHRASE_ENV_DEFAULT = "AMBARI_PASSPHRASE";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,128,private static final String LDAP_PRIMARY_URL_DEFAULT = "localhost:33389";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,129,private static final String LDAP_BASE_DN_DEFAULT = "dc=ambari,dc=apache,dc=org";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,130,private static final String LDAP_USERNAME_ATTRIBUTE_DEFAULT = "uid";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,295,throw new RuntimeException(Configuration.OS_VERSION_KEY + " is not "
ambari-server/src/main/java/org/apache/ambari/server/resources/ResourceManager.java,43,String resDir = configs.getConfigsMap().get(Configuration.RESOURCES_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,20,import java.io.BufferedReader;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,21,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,23,import java.io.InputStreamReader;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,24,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,25,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,83,String srvrKstrDir = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,84,String srvrCrtName = configsMap.get(Configuration.SRVR_CRT_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,139,String srvrKstrDir = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,140,String srvrCrtName = configsMap.get(Configuration.SRVR_CRT_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,141,String srvrKeyName = configsMap.get(Configuration.SRVR_KEY_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,142,String kstrName = configsMap.get(Configuration.KSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,143,String srvrCrtPass = configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,168,File certFile = new File(configsMap.get(Configuration.SRVR_KSTR_DIR_KEY) +
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,169,File.separator + configsMap.get(Configuration.SRVR_CRT_NAME_KEY));
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,192,PASSPHRASE_KEY).trim();
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,205,String srvrKstrDir = configsMap.get(Configuration.SRVR_KSTR_DIR_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,206,String srvrCrtPass = configsMap.get(Configuration.SRVR_CRT_PASS_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,207,String srvrCrtName = configsMap.get(Configuration.SRVR_CRT_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,208,String srvrKeyName = configsMap.get(Configuration.SRVR_KEY_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,50,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,51,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,55,private static final Log LOG = LogFactory.getLog(HostImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,963,LOG.error(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,17,package org.apache.ambari.eventdb.db;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,19,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,20,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,23,import org.apache.ambari.eventdb.model.Jobs.JobDBEntry;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,27,import org.apache.ambari.eventdb.model.Workflows.WorkflowDBEntry.WorkflowFields;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,29,public interface DBConnector {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,30,public void submitJob(JobDBEntry j, WorkflowContext context) throws IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,32,public void updateJob(JobDBEntry j) throws IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,34,public Workflows fetchWorkflows() throws IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,36,public Workflows fetchWorkflows(WorkflowFields field, boolean sortAscending, int offset, int limit) throws IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,38,public DataTable fetchWorkflows(int offset, int limit, String searchTerm, int echo, WorkflowFields field, boolean sortAscending, String searchWorkflowId,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,39,String searchWorkflowName, String searchWorkflowType, String searchUserName, int minJobs, int maxJobs, long minInputBytes, long maxInputBytes,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,42,public List<JobDBEntry> fetchJobDetails(String workflowID) throws IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,44,public long[] fetchJobStartStopTimes(String jobID) throws IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,48,public void close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,17,package org.apache.ambari.eventdb.db;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,19,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,20,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,21,import java.sql.DriverManager;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,22,import java.sql.PreparedStatement;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,23,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,24,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,25,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,26,import java.util.EnumMap;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,27,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,28,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,31,import org.apache.ambari.eventdb.model.DataTable.AvgData;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,32,import org.apache.ambari.eventdb.model.DataTable.Summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,33,import org.apache.ambari.eventdb.model.DataTable.Summary.SummaryFields;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,34,import org.apache.ambari.eventdb.model.DataTable.Times;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,35,import org.apache.ambari.eventdb.model.Jobs.JobDBEntry;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,36,import org.apache.ambari.eventdb.model.Jobs.JobDBEntry.JobFields;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,38,import org.apache.ambari.eventdb.model.TaskAttempt.TaskAttemptFields;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,41,import org.apache.ambari.eventdb.model.Workflows.WorkflowDBEntry;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,42,import org.apache.ambari.eventdb.model.Workflows.WorkflowDBEntry.WorkflowFields;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,43,import org.apache.commons.lang.NotImplementedException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,44,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,45,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,46,import org.codehaus.jackson.JsonParseException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,47,import org.codehaus.jackson.map.JsonMappingException;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,48,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,50,public class PostgresConnector implements DBConnector {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,51,private static Log LOG = LogFactory.getLog(PostgresConnector.class);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,52,private static final String WORKFLOW_TABLE_NAME = "workflow";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,53,private static final String JOB_TABLE_NAME = "job";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,54,private static final String TASK_ATTEMPT_TABLE_NAME = "taskattempt";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,55,public static final String SORT_ASC = "ASC";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,56,public static final String SORT_DESC = "DESC";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,58,private static final ObjectMapper jsonMapper = new ObjectMapper();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,62,public static enum Statements {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,63,SJ_INSERT_JOB_PS(""),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,64,SJ_CHECK_WORKFLOW_PS(""),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,65,SJ_INSERT_WORKFLOW_PS(""),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,66,UJ_UPDATE_JOB_PS(""),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,67,UJ_UPDATE_WORKFLOW_PS(""),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,68,FW_PS("SELECT " + WorkflowDBEntry.WORKFLOW_FIELDS + " FROM " + WORKFLOW_TABLE_NAME),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,69,FW_COUNT_PS("SELECT count(*) as " + SummaryFields.numRows + " FROM " + WORKFLOW_TABLE_NAME),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,70,FW_SUMMARY_PS("SELECT count(*) as " + SummaryFields.numRows + ", "
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,71,+ getAvg(WorkflowFields.NUMJOBSTOTAL, SummaryFields.avgJobs, SummaryFields.minJobs, SummaryFields.maxJobs) + ", "
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,72,+ getAvg(WorkflowFields.INPUTBYTES, SummaryFields.avgInput, SummaryFields.minInput, SummaryFields.maxInput) + ", "
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,73,+ getAvg(WorkflowFields.OUTPUTBYTES, SummaryFields.avgOutput, SummaryFields.minOutput, SummaryFields.maxOutput) + ", "
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,74,+ getAvg(WorkflowFields.DURATION, SummaryFields.avgDuration, SummaryFields.minDuration, SummaryFields.maxDuration) + ", min("
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,76,+ WORKFLOW_TABLE_NAME),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,77,FJD_PS("SELECT " + JobDBEntry.JOB_FIELDS + " FROM " + JOB_TABLE_NAME + " WHERE " + JobFields.WORKFLOWID.toString() + " = ?"),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,78,FJSS_PS("SELECT " + JobFields.SUBMITTIME + ", " + JobFields.FINISHTIME + " FROM " + JOB_TABLE_NAME + " WHERE " + JobFields.JOBID + " = ?"),
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,82,private String statementString;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,84,Statements(String statementString) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,85,this.statementString = statementString;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,88,public String getStatementString() {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,89,return statementString;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,92,private static String getAvg(WorkflowFields field, SummaryFields avg, SummaryFields min, SummaryFields max) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,93,return "avg(" + field + ") as " + avg + ", min(" + field + ") as " + min + ", max(" + field + ") as " + max;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,97,private Map<Statements,PreparedStatement> preparedStatements = new EnumMap<Statements,PreparedStatement>(Statements.class);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,101,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,105,db = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,106,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,108,db = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,109,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,114,public void submitJob(JobDBEntry j, WorkflowContext context) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,118,throw new NotImplementedException();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,122,public void updateJob(JobDBEntry j) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,125,throw new NotImplementedException();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,129,public Workflows fetchWorkflows() throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,130,Workflows workflows = new Workflows();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,131,workflows.setWorkflows(fetchWorkflows(getPS(Statements.FW_PS)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,132,workflows.setSummary(fetchSummary(getPS(Statements.FW_SUMMARY_PS)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,133,return workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,137,public Workflows fetchWorkflows(WorkflowFields field, boolean sortAscending, int offset, int limit) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,139,offset = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,140,Workflows workflows = new Workflows();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,141,workflows.setWorkflows(fetchWorkflows(getQualifiedPS(Statements.FW_PS, "", field, sortAscending, offset, limit)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,142,workflows.setSummary(fetchSummary(getPS(Statements.FW_SUMMARY_PS)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,143,return workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,146,private List<WorkflowDBEntry> fetchWorkflows(PreparedStatement ps) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,147,List<WorkflowDBEntry> workflows = new ArrayList<WorkflowDBEntry>();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,148,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,149,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,150,rs = ps.executeQuery();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,151,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,152,workflows.add(getWorkflowDBEntry(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,155,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,157,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,159,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,161,LOG.error("Exception while closing ResultSet", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,164,return workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,167,private Summary fetchSummary(PreparedStatement ps) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,168,Summary summary = new Summary();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,169,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,170,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,171,rs = ps.executeQuery();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,172,if (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,173,summary.setNumRows(SummaryFields.numRows.getInt(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,174,summary.setJobs(getAvgData(rs, SummaryFields.avgJobs, SummaryFields.minJobs, SummaryFields.maxJobs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,175,summary.setInput(getAvgData(rs, SummaryFields.avgInput, SummaryFields.minInput, SummaryFields.maxInput));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,176,summary.setOutput(getAvgData(rs, SummaryFields.avgOutput, SummaryFields.minOutput, SummaryFields.maxOutput));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,177,summary.setDuration(getAvgData(rs, SummaryFields.avgDuration, SummaryFields.minDuration, SummaryFields.maxDuration));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,178,Times times = new Times();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,179,times.setYoungest(SummaryFields.youngest.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,180,times.setOldest(SummaryFields.oldest.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,181,summary.setTimes(times);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,184,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,186,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,188,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,190,LOG.error("Exception while closing ResultSet", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,193,return summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,196,private static WorkflowDBEntry getWorkflowDBEntry(ResultSet rs) throws SQLException, JsonParseException, JsonMappingException, IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,197,WorkflowDBEntry w = new WorkflowDBEntry();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,198,w.setWorkflowId(WorkflowFields.WORKFLOWID.getString(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,199,w.setWorkflowName(WorkflowFields.WORKFLOWNAME.getString(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,200,w.setUserName(WorkflowFields.USERNAME.getString(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,201,w.setStartTime(WorkflowFields.STARTTIME.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,202,w.setElapsedTime(WorkflowFields.DURATION.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,203,w.setNumJobsTotal(WorkflowFields.NUMJOBSTOTAL.getInt(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,204,w.setInputBytes(WorkflowFields.INPUTBYTES.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,205,w.setOutputBytes(WorkflowFields.OUTPUTBYTES.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,206,w.setNumJobsCompleted(WorkflowFields.NUMJOBSCOMPLETED.getInt(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,207,w.setWorkflowContext(jsonMapper.readValue(WorkflowFields.WORKFLOWCONTEXT.getString(rs), WorkflowContext.class));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,208,return w;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,211,private static AvgData getAvgData(ResultSet rs, SummaryFields avg, SummaryFields min, SummaryFields max) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,212,AvgData avgData = new AvgData();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,213,avgData.setAvg(avg.getDouble(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,214,avgData.setMin(min.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,215,avgData.setMax(max.getLong(rs));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,216,return avgData;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,220,public DataTable fetchWorkflows(int offset, int limit, String searchTerm, int echo, WorkflowFields col, boolean sortAscending, String searchWorkflowId,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,221,String searchWorkflowName, String searchWorkflowType, String searchUserName, int minJobs, int maxJobs, long minInputBytes, long maxInputBytes,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,223,int total = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,224,PreparedStatement ps = getPS(Statements.FW_COUNT_PS);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,225,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,226,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,227,rs = ps.executeQuery();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,229,total = SummaryFields.numRows.getInt(rs);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,231,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,233,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,235,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,237,LOG.error("Exception while closing ResultSet", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,241,String searchClause = buildSearchClause(searchTerm, searchWorkflowId, searchWorkflowName, searchWorkflowType, searchUserName, minJobs, maxJobs,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,243,List<WorkflowDBEntry> workflows = fetchWorkflows(getQualifiedPS(Statements.FW_PS, searchClause, col, sortAscending, offset, limit));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,244,Summary summary = fetchSummary(getQualifiedPS(Statements.FW_SUMMARY_PS, searchClause));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,245,DataTable table = new DataTable();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,246,table.setiTotalRecords(total);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,247,table.setiTotalDisplayRecords(summary.getNumRows());
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,248,table.setAaData(workflows);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,249,table.setsEcho(echo);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,250,table.setSummary(summary);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,251,return table;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,255,public List<JobDBEntry> fetchJobDetails(String workflowId) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,256,PreparedStatement ps = getPS(Statements.FJD_PS);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,257,List<JobDBEntry> jobs = new ArrayList<JobDBEntry>();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,258,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,259,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,260,ps.setString(1, workflowId);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,261,rs = ps.executeQuery();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,262,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,283,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,285,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,288,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,289,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,291,LOG.error("Exception while closing ResultSet", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,295,return jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,299,public long[] fetchJobStartStopTimes(String jobID) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,300,PreparedStatement ps = getPS(Statements.FJSS_PS);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,301,long[] times = new long[2];
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,302,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,303,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,304,ps.setString(1, jobID);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,305,rs = ps.executeQuery();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,307,return null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,308,times[0] = JobFields.SUBMITTIME.getLong(rs);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,309,times[1] = JobFields.FINISHTIME.getLong(rs);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,310,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,312,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,315,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,316,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,318,LOG.error("Exception while closing ResultSet", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,322,times[1] = System.currentTimeMillis();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,324,times[1] = times[0];
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,325,return times;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,331,List<TaskAttempt> taskAttempts = new ArrayList<TaskAttempt>();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,332,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,333,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,334,ps.setString(1, jobID);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,336,rs = ps.executeQuery();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,337,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,352,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,354,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,357,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,358,rs.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,360,LOG.error("Exception while closing ResultSet", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,363,return taskAttempts;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,366,private PreparedStatement getPS(Statements statement) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,368,throw new IOException("postgres db not initialized");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,370,synchronized (preparedStatements) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,371,if (!preparedStatements.containsKey(statement)) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,372,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,373,preparedStatements.put(statement, db.prepareStatement(statement.getStatementString()));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,375,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,380,return preparedStatements.get(statement);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,385,throw new IOException("postgres db not initialized");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,386,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,388,return db.prepareStatement(statement.getStatementString() + searchClause);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,390,throw new IOException(e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,395,throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,397,throw new IOException("postgres db not initialized");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,398,String limitClause = " ORDER BY " + field.toString() + " " + (sortAscending ? SORT_ASC : SORT_DESC) + " OFFSET " + offset
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,399,+ (limit >= 0 ? " LIMIT " + limit : "");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,400,return getQualifiedPS(statement, searchClause + limitClause);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,403,private static void addRangeSearch(StringBuilder sb, WorkflowFields field, int min, int max) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,405,append(sb, greaterThan(field, Integer.toString(min)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,407,append(sb, lessThan(field, Integer.toString(max)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,410,private static void addRangeSearch(StringBuilder sb, WorkflowFields field, long min, long max) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,412,append(sb, greaterThan(field, Long.toString(min)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,414,append(sb, lessThan(field, Long.toString(max)));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,417,private static void append(StringBuilder sb, String s) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,419,sb.append(" and ");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,420,sb.append(s);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,423,private static String like(WorkflowFields field, String s) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,424,return field.toString() + " like '%" + s + "%'";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,427,private static String startsWith(WorkflowFields field, String s) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,428,return field.toString() + " like '" + s + "%'";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,431,private static String equals(WorkflowFields field, String s) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,432,return field.toString() + " = '" + s + "'";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,435,private static String lessThan(WorkflowFields field, String s) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,436,return field.toString() + " <= " + s;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,439,private static String greaterThan(WorkflowFields field, String s) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,440,return field.toString() + " >= " + s;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,445,private static String buildSearchClause(String searchTerm, String searchWorkflowId, String searchWorkflowName, String searchWorkflowType,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,446,String searchUserName, int minJobs, int maxJobs, long minInputBytes, long maxInputBytes, long minOutputBytes, long maxOutputBytes, long minDuration,
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,448,StringBuilder sb = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,449,sb.append(WHERE);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,450,if (searchTerm != null && searchTerm.length() > 0) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,452,sb.append(like(WorkflowFields.WORKFLOWID, searchTerm));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,453,sb.append(" or ");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,454,sb.append(like(WorkflowFields.WORKFLOWNAME, searchTerm));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,455,sb.append(" or ");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,456,sb.append(like(WorkflowFields.USERNAME, searchTerm));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,457,sb.append(")");
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,460,append(sb, like(WorkflowFields.WORKFLOWID, searchWorkflowId));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,462,append(sb, like(WorkflowFields.WORKFLOWNAME, searchWorkflowName));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,464,append(sb, startsWith(WorkflowFields.WORKFLOWID, searchWorkflowType));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,466,append(sb, equals(WorkflowFields.USERNAME, searchUserName));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,467,addRangeSearch(sb, WorkflowFields.NUMJOBSTOTAL, minJobs, maxJobs);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,468,addRangeSearch(sb, WorkflowFields.INPUTBYTES, minInputBytes, maxInputBytes);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,469,addRangeSearch(sb, WorkflowFields.OUTPUTBYTES, minOutputBytes, maxOutputBytes);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,470,addRangeSearch(sb, WorkflowFields.DURATION, minDuration, maxDuration);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,471,addRangeSearch(sb, WorkflowFields.STARTTIME, minStartTime, maxStartTime);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,474,return "";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,475,else
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,476,return sb.toString();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,480,public void close() {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,481,if (db != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,482,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,483,db.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,485,LOG.error("Exception while closing connector", e);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,487,db = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,492,protected void finalize() throws Throwable {
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,493,close();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,18,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,20,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,21,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,22,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,24,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,25,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,26,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,28,import org.apache.ambari.eventdb.model.Workflows.WorkflowDBEntry;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,32,public class DataTable {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,33,int sEcho;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,34,int iTotalRecords;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,35,int iTotalDisplayRecords;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,36,List<WorkflowDBEntry> aaData;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,37,Summary summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,41,public static class Summary {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,42,public static enum SummaryFields {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,43,numRows,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,44,avgJobs,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,45,minJobs,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,46,maxJobs,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,47,avgInput,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,48,minInput,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,49,maxInput,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,50,avgOutput,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,51,minOutput,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,52,maxOutput,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,53,avgDuration,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,54,minDuration,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,55,maxDuration,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,56,youngest,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,57,oldest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,59,public int getInt(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,60,return rs.getInt(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,63,public long getLong(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,64,return rs.getLong(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,67,public double getDouble(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,68,return rs.getDouble(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,72,int numRows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,73,AvgData jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,74,AvgData input;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,75,AvgData output;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,76,AvgData duration;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,77,Times times;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,79,public int getNumRows() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,80,return numRows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,83,public void setNumRows(int numRows) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,84,this.numRows = numRows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,87,public AvgData getJobs() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,88,return jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,91,public void setJobs(AvgData jobs) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,92,this.jobs = jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,95,public AvgData getInput() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,96,return input;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,99,public void setInput(AvgData input) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,100,this.input = input;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,103,public AvgData getOutput() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,104,return output;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,107,public void setOutput(AvgData output) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,108,this.output = output;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,111,public AvgData getDuration() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,112,return duration;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,115,public void setDuration(AvgData duration) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,116,this.duration = duration;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,119,public Times getTimes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,120,return times;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,123,public void setTimes(Times times) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,124,this.times = times;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,130,public static class AvgData {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,131,double avg;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,132,long min;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,133,long max;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,135,public double getAvg() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,136,return avg;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,139,public void setAvg(double avg) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,140,this.avg = avg;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,143,public long getMin() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,144,return min;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,147,public void setMin(long min) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,148,this.min = min;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,151,public long getMax() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,152,return max;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,155,public void setMax(long max) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,156,this.max = max;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,162,public static class Times {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,163,long oldest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,164,long youngest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,166,public long getOldest() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,167,return oldest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,170,public void setOldest(long oldest) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,171,this.oldest = oldest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,174,public long getYoungest() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,175,return youngest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,178,public void setYoungest(long youngest) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,179,this.youngest = youngest;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,183,public DataTable() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,185,public int getsEcho() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,186,return sEcho;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,189,public void setsEcho(int sEcho) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,190,this.sEcho = sEcho;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,193,public int getiTotalRecords() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,194,return iTotalRecords;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,197,public void setiTotalRecords(int iTotalRecords) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,198,this.iTotalRecords = iTotalRecords;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,201,public int getiTotalDisplayRecords() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,202,return iTotalDisplayRecords;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,205,public void setiTotalDisplayRecords(int iTotalDisplayRecords) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,206,this.iTotalDisplayRecords = iTotalDisplayRecords;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,209,public List<WorkflowDBEntry> getAaData() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,210,return aaData;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,213,public void setAaData(List<WorkflowDBEntry> aaData) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,214,this.aaData = aaData;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,217,public Summary getSummary() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,218,return summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,221,public void setSummary(Summary summary) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/DataTable.java,222,this.summary = summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,17,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,19,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,21,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,22,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,23,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,24,import javax.xml.bind.annotation.XmlTransient;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,25,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,26,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,27,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,31,public class Jobs {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,32,List<JobDBEntry> jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,34,public static class JobDBEntry {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,35,public static enum JobFields {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,36,JOBID,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,37,JOBNAME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,38,STATUS,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,39,USERNAME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,40,SUBMITTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,41,FINISHTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,42,MAPS,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,43,REDUCES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,44,INPUTBYTES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,45,OUTPUTBYTES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,46,CONFPATH,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,47,WORKFLOWID,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,48,WORKFLOWENTITYNAME;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,50,public String getString(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,51,return rs.getString(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,54,public int getInt(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,55,return rs.getInt(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,58,public long getLong(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,59,return rs.getLong(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,62,public static String join() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,63,String[] tmp = new String[JobFields.values().length];
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,65,tmp[i] = JobFields.values()[i].toString();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,66,return StringUtils.join(tmp, ",");
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,71,public static final String JOB_FIELDS = JobFields.join();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,73,private String jobId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,74,private String jobName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,75,private String status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,76,private String userName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,77,private long submitTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,78,private long elapsedTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,79,private int maps;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,80,private int reduces;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,81,private long inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,82,private long outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,83,private String confPath;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,84,private String workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,85,private String workflowEntityName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,87,public JobDBEntry() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,91,public String getJobId() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,92,return jobId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,95,public String getJobName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,96,return jobName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,99,public String getStatus() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,100,return status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,103,public String getUserName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,104,return userName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,107,public long getSubmitTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,108,return submitTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,111,public long getElapsedTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,112,return elapsedTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,115,public int getMaps() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,116,return maps;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,119,public int getReduces() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,120,return reduces;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,123,public long getInputBytes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,124,return inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,127,public long getOutputBytes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,128,return outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,131,public String getConfPath() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,132,return confPath;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,135,public String getWorkflowId() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,136,return workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,139,public String getWorkflowEntityName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,140,return workflowEntityName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,143,public void setJobId(String jobId) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,144,this.jobId = jobId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,147,public void setJobName(String jobName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,148,this.jobName = jobName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,151,public void setStatus(String status) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,152,this.status = status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,155,public void setUserName(String userName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,156,this.userName = userName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,159,public void setSubmitTime(long submitTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,160,this.submitTime = submitTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,163,public void setElapsedTime(long elapsedTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,164,this.elapsedTime = elapsedTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,167,public void setMaps(int maps) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,168,this.maps = maps;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,171,public void setReduces(int reduces) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,172,this.reduces = reduces;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,175,public void setInputBytes(long inputBytes) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,176,this.inputBytes = inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,179,public void setOutputBytes(long outputBytes) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,180,this.outputBytes = outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,183,public void setConfPath(String confPath) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,184,this.confPath = confPath;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,187,public void setWorkflowId(String workflowId) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,188,this.workflowId = workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,191,public void setWorkflowEntityName(String workflowEntityName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,192,this.workflowEntityName = workflowEntityName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,196,public Jobs() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,198,public List<JobDBEntry> getJobs() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,199,return jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,202,public void setJobs(List<JobDBEntry> jobs) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Jobs.java,203,this.jobs = jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,17,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,19,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,20,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,22,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,27,public class TaskAttempt {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,28,public static enum TaskAttemptFields {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,29,JOBID,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,30,TASKATTEMPTID,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,31,TASKTYPE,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,32,STARTTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,33,FINISHTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,34,MAPFINISHTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,35,SHUFFLEFINISHTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,36,SORTFINISHTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,37,INPUTBYTES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,38,OUTPUTBYTES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,39,STATUS,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,40,LOCALITY;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,42,public String getString(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,43,return rs.getString(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,46,public int getInt(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,47,return rs.getInt(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,50,public long getLong(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,51,return rs.getLong(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,54,public static String join() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,55,String[] tmp = new String[TaskAttemptFields.values().length];
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,57,tmp[i] = TaskAttemptFields.values()[i].toString();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,58,return StringUtils.join(tmp, ",");
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,62,public static final String TASK_ATTEMPT_FIELDS = TaskAttemptFields.join();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,64,private String taskAttemptId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,65,private String taskType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,66,private long startTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,67,private long finishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,68,private long mapFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,69,private long shuffleFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,70,private long sortFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,71,private long inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,72,private long outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,73,private String status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,74,private String locality;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,76,public TaskAttempt() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,78,public String getTaskAttemptId() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,79,return taskAttemptId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,82,public void setTaskAttemptId(String taskAttemptId) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,83,this.taskAttemptId = taskAttemptId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,86,public String getTaskType() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,87,return taskType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,90,public void setTaskType(String taskType) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,91,this.taskType = taskType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,94,public long getStartTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,95,return startTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,98,public void setStartTime(long startTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,99,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,102,public long getFinishTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,103,return finishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,106,public void setFinishTime(long finishTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,107,this.finishTime = finishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,110,public long getMapFinishTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,111,return mapFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,114,public void setMapFinishTime(long mapFinishTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,115,this.mapFinishTime = mapFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,118,public long getShuffleFinishTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,119,return shuffleFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,122,public void setShuffleFinishTime(long shuffleFinishTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,123,this.shuffleFinishTime = shuffleFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,126,public long getSortFinishTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,127,return sortFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,130,public void setSortFinishTime(long sortFinishTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,131,this.sortFinishTime = sortFinishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,134,public long getInputBytes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,135,return inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,138,public long getOutputBytes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,139,return outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,142,public void setInputBytes(long inputBytes) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,143,this.inputBytes = inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,146,public void setOutputBytes(long outputBytes) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,147,this.outputBytes = outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,150,public String getStatus() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,151,return status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,154,public void setStatus(String status) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,155,this.status = status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,158,public String getLocality() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,159,return locality;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,162,public void setLocality(String locality) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskAttempt.java,163,this.locality = locality;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,17,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,19,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,21,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,22,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,23,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,27,public class TaskData {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,28,private List<Point> map;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,29,private List<Point> shuffle;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,30,private List<Point> reduce;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,32,public static class Point {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,33,private long x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,34,private int y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,36,public Point() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,38,public Point(long x, int y) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,39,this.x = x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,40,this.y = y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,43,public long getX() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,44,return x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,47,public int getY() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,48,return y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,51,public void setX(long x) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,52,this.x = x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,55,public void setY(int y) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,56,this.y = y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,60,public TaskData() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,62,public List<Point> getMapData() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,63,return map;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,66,public void setMapData(List<Point> mapData) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,67,this.map = mapData;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,70,public List<Point> getShuffleData() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,71,return shuffle;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,74,public void setShuffleData(List<Point> shuffleData) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,75,this.shuffle = shuffleData;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,78,public List<Point> getReduceData() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,79,return reduce;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,82,public void setReduceData(List<Point> reduceData) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskData.java,83,this.reduce = reduceData;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,17,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,19,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,21,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,22,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,23,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,27,public class TaskLocalityData {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,28,private List<DataPoint> mapNodeLocal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,29,private List<DataPoint> mapRackLocal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,30,private List<DataPoint> mapOffSwitch;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,31,private List<DataPoint> reduceOffSwitch;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,32,private long submitTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,33,private long finishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,35,public static class DataPoint {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,36,private long x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,37,private long y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,38,private long r;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,39,private long io;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,40,private String label;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,41,private String status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,43,public DataPoint() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,45,public DataPoint(long x) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,46,this(x, 0, 0, 0, null, null);
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,49,public DataPoint(long x, long y, long r, long io, String taskAttemptId, String status) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,50,this.x = x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,51,this.y = y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,52,this.r = r;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,53,this.io = io;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,54,this.label = taskAttemptId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,55,this.status = status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,58,public long getX() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,59,return x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,62,public long getY() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,63,return y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,66,public long getR() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,67,return r;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,70,public long getIO() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,71,return io;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,74,public String getLabel() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,75,return label;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,78,public String getStatus() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,79,return status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,82,public void setX(long x) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,83,this.x = x;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,86,public void setY(long y) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,87,this.y = y;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,90,public void setR(long r) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,91,this.r = r;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,94,public void setIO(long io) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,95,this.io = io;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,98,public void setLabel(String label) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,99,this.label = label;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,102,public void setStatus(String status) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,103,this.status = status;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,107,public TaskLocalityData() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,109,public List<DataPoint> getMapNodeLocal() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,110,return mapNodeLocal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,113,public void setMapNodeLocal(List<DataPoint> mapNodeLocal) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,114,this.mapNodeLocal = mapNodeLocal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,117,public List<DataPoint> getMapRackLocal() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,118,return mapRackLocal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,121,public void setMapRackLocal(List<DataPoint> mapRackLocal) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,122,this.mapRackLocal = mapRackLocal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,125,public List<DataPoint> getMapOffSwitch() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,126,return mapOffSwitch;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,129,public void setMapOffSwitch(List<DataPoint> mapOffSwitch) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,130,this.mapOffSwitch = mapOffSwitch;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,133,public List<DataPoint> getReduceOffSwitch() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,134,return reduceOffSwitch;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,137,public void setReduceOffSwitch(List<DataPoint> reduceOffSwitch) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,138,this.reduceOffSwitch = reduceOffSwitch;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,141,public long getSubmitTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,142,return submitTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,145,public void setSubmitTime(long submitTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,146,this.submitTime = submitTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,149,public long getFinishTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,150,return finishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,153,public void setFinishTime(long finishTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/TaskLocalityData.java,154,this.finishTime = finishTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,18,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,20,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,21,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,22,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,27,public class WorkflowContext {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,29,private String workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,30,private String workflowName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,31,private String workflowEntityName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,33,private WorkflowDag workflowDag;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,35,private WorkflowContext parentWorkflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,37,public WorkflowContext() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,42,public String getWorkflowId() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,43,return this.workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,46,public String getWorkflowName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,47,return this.workflowName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,50,public String getWorkflowEntityName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,51,return this.workflowEntityName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,54,public WorkflowDag getWorkflowDag() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,55,return this.workflowDag;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,58,public WorkflowContext getParentWorkflowContext() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,59,return this.parentWorkflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,63,public void setWorkflowId(String wfId) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,64,this.workflowId = wfId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,67,public void setWorkflowName(String wfName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,68,this.workflowName = wfName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,71,public void setWorkflowEntityName(String wfEntityName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,72,this.workflowEntityName = wfEntityName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,75,public void setWorkflowDag(WorkflowDag wfDag) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,76,this.workflowDag = wfDag;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,79,public void setParentWorkflowContext(WorkflowContext pWfContext) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowContext.java,80,this.parentWorkflowContext = pWfContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,18,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,21,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,22,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,23,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,25,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,26,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,27,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,31,public class WorkflowDag {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,33,public static class WorkflowDagEntry {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,35,private String source;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,36,private List<String> targets = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,38,public WorkflowDagEntry() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,43,public String getSource() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,44,return this.source;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,47,public List<String> getTargets() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,48,return this.targets;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,52,public void setSource(String source) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,53,this.source = source;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,56,public void setTargets(List<String> targets) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,57,this.targets = targets;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,60,public void addTarget(String target) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,61,this.targets.add(target);
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,65,List<WorkflowDagEntry> entries = new ArrayList<WorkflowDagEntry>();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,67,public WorkflowDag() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,72,public List<WorkflowDagEntry> getEntries() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,73,return this.entries;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,77,public void setEntries(List<WorkflowDagEntry> entries) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,78,this.entries = entries;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,81,public void addEntry(WorkflowDag.WorkflowDagEntry entry) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,82,this.entries.add(entry);
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,85,public int size() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,86,Set<String> nodes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,87,for (WorkflowDagEntry entry : entries) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,88,nodes.add(entry.getSource());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,89,nodes.addAll(entry.getTargets());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/WorkflowDag.java,91,return nodes.size();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,17,package org.apache.ambari.eventdb.model;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,19,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,20,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,23,import javax.xml.bind.annotation.XmlAccessType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,24,import javax.xml.bind.annotation.XmlAccessorType;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,25,import javax.xml.bind.annotation.XmlRootElement;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,26,import javax.xml.bind.annotation.XmlTransient;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,28,import org.apache.ambari.eventdb.model.DataTable.Summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,29,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,33,public class Workflows {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,34,List<WorkflowDBEntry> workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,35,Summary summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,37,public static class WorkflowDBEntry {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,38,public static enum WorkflowFields {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,39,WORKFLOWID,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,40,WORKFLOWNAME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,41,USERNAME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,42,STARTTIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,43,LASTUPDATETIME,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,44,DURATION,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,45,NUMJOBSTOTAL,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,46,NUMJOBSCOMPLETED,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,47,INPUTBYTES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,48,OUTPUTBYTES,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,49,PARENTWORKFLOWID,
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,52,public String getString(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,53,return rs.getString(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,56,public int getInt(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,57,return rs.getInt(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,60,public long getLong(ResultSet rs) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,61,return rs.getLong(this.toString());
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,64,public static String join() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,65,String[] tmp = new String[WorkflowFields.values().length];
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,67,tmp[i] = WorkflowFields.values()[i].toString();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,68,return StringUtils.join(tmp, ",");
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,73,public static final String WORKFLOW_FIELDS = WorkflowFields.join();
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,75,private String workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,76,private String workflowName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,77,private String userName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,78,private long startTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,79,private long elapsedTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,80,private long inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,81,private long outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,82,private int numJobsTotal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,83,private int numJobsCompleted;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,84,private String parentWorkflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,85,private WorkflowContext workflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,87,public WorkflowDBEntry() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,91,public String getWorkflowId() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,92,return workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,95,public String getWorkflowName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,96,return workflowName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,99,public String getUserName() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,100,return userName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,103,public long getStartTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,104,return startTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,107,public long getElapsedTime() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,108,return elapsedTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,111,public int getNumJobsTotal() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,112,return numJobsTotal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,115,public int getNumJobsCompleted() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,116,return numJobsCompleted;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,119,public String getParentWorkflowId() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,120,return parentWorkflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,123,public WorkflowContext getWorkflowContext() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,124,return workflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,127,public void setWorkflowId(String workflowId) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,128,this.workflowId = workflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,131,public void setWorkflowName(String workflowName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,132,this.workflowName = workflowName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,135,public void setUserName(String userName) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,136,this.userName = userName;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,139,public void setStartTime(long startTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,140,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,143,public void setElapsedTime(long elapsedTime) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,144,this.elapsedTime = elapsedTime;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,147,public void setNumJobsTotal(int numJobsTotal) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,148,this.numJobsTotal = numJobsTotal;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,151,public void setNumJobsCompleted(int numJobsCompleted) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,152,this.numJobsCompleted = numJobsCompleted;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,155,public void setParentWorkflowId(String parentWorkflowId) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,156,this.parentWorkflowId = parentWorkflowId;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,159,public void setWorkflowContext(WorkflowContext workflowContext) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,160,this.workflowContext = workflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,163,public long getInputBytes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,164,return inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,167,public void setInputBytes(long inputBytes) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,168,this.inputBytes = inputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,171,public long getOutputBytes() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,172,return outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,175,public void setOutputBytes(long outputBytes) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,176,this.outputBytes = outputBytes;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,180,public Workflows() {}
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,182,public List<WorkflowDBEntry> getWorkflows() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,183,return workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,186,public void setWorkflows(List<WorkflowDBEntry> workflows) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,187,this.workflows = workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,190,public Summary getSummary() {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,191,return summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,194,public void setSummary(Summary summary) {
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,195,this.summary = summary;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,18,package org.apache.ambari.eventdb.webservice;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,20,import javax.ws.rs.core.MediaType;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,21,import javax.ws.rs.ext.Provider;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,23,import org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,24,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,28,public class JAXBContextResolver extends JacksonJaxbJsonProvider {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,29,public JAXBContextResolver() {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,30,super();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,34,public ObjectMapper locateMapper(Class<?> type, MediaType mediaType) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,35,ObjectMapper mapper = super.locateMapper(type, mediaType);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,36,mapper.setSerializationInclusion(Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/JAXBContextResolver.java,37,return mapper;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,17,package org.apache.ambari.eventdb.webservice;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,19,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,21,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,22,import java.util.Comparator;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,24,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,25,import java.util.TreeSet;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,27,import javax.servlet.ServletContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,28,import javax.ws.rs.DefaultValue;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,29,import javax.ws.rs.GET;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,30,import javax.ws.rs.Path;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,31,import javax.ws.rs.Produces;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,32,import javax.ws.rs.QueryParam;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,33,import javax.ws.rs.core.Context;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,34,import javax.ws.rs.core.MediaType;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,36,import org.apache.ambari.eventdb.db.PostgresConnector;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,39,import org.apache.ambari.eventdb.model.Jobs.JobDBEntry;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,42,import org.apache.ambari.eventdb.model.TaskData.Point;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,44,import org.apache.ambari.eventdb.model.TaskLocalityData.DataPoint;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,46,import org.apache.ambari.eventdb.model.Workflows.WorkflowDBEntry;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,47,import org.apache.ambari.eventdb.model.Workflows.WorkflowDBEntry.WorkflowFields;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,50,public class WorkflowJsonService {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,51,private static final String PREFIX = "eventdb.";
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,52,private static final String HOSTNAME = PREFIX + "db.hostname";
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,53,private static final String DBNAME = PREFIX + "db.name";
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,54,private static final String USERNAME = PREFIX + "db.user";
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,55,private static final String PASSWORD = PREFIX + "db.password";
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,62,private static final Workflows EMPTY_WORKFLOWS = new Workflows();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,63,private static final List<JobDBEntry> EMPTY_JOBS = Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,65,List<WorkflowDBEntry> emptyWorkflows = Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,66,EMPTY_WORKFLOWS.setWorkflows(emptyWorkflows);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,69,PostgresConnector getConnector() throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,74,ServletContext servletContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,79,public Workflows getWorkflows(@QueryParam("orderBy") String field, @DefaultValue(PostgresConnector.SORT_ASC) @QueryParam("sortDir") String sortDir,
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,81,Workflows workflows = EMPTY_WORKFLOWS;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,82,PostgresConnector conn = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,83,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,84,conn = getConnector();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,86,workflows = conn.fetchWorkflows();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,87,else {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,88,field = field.toUpperCase();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,90,field = "DURATION";
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,91,workflows = conn.fetchWorkflows(WorkflowFields.valueOf(field), sortDir.toUpperCase().equals(PostgresConnector.SORT_ASC), offset, limit);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,95,workflows = EMPTY_WORKFLOWS;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,97,if (conn != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,98,conn.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,101,return workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,107,public DataTable getWorkflowDataTable(@DefaultValue("0") @QueryParam("iDisplayStart") int start,
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,118,start = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,120,amount = 10;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,122,boolean sortAscending = true;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,124,sortAscending = false;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,126,WorkflowFields field = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,127,switch (col) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,128,case 0: // workflowId
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,129,field = WorkflowFields.WORKFLOWID;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,130,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,131,case 1: // workflowName
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,132,field = WorkflowFields.WORKFLOWNAME;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,133,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,134,case 2: // workflowType
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,135,field = WorkflowFields.WORKFLOWID;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,136,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,137,case 3: // userName
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,138,field = WorkflowFields.USERNAME;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,139,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,141,field = WorkflowFields.NUMJOBSTOTAL;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,142,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,150,field = WorkflowFields.DURATION;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,151,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,153,field = WorkflowFields.STARTTIME;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,154,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,155,default:
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,156,field = WorkflowFields.WORKFLOWID;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,159,DataTable table = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,160,PostgresConnector conn = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,161,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,162,conn = getConnector();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,163,table = conn.fetchWorkflows(start, amount, searchTerm, echo, field, sortAscending, workflowId, workflowName, workflowType, userName, minJobs, maxJobs,
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,168,if (conn != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,169,conn.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,172,return table;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,179,Jobs jobs = new Jobs();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,180,PostgresConnector conn = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,181,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,182,conn = getConnector();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,186,jobs.setJobs(EMPTY_JOBS);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,188,if (conn != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,189,conn.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,192,return jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,199,TaskData points = new TaskData();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,200,PostgresConnector conn = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,201,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,202,conn = getConnector();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,207,double step = (finishTimeSecs - submitTimeSecs) / steps;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,209,step = 1;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,216,if (conn != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,217,conn.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,220,return points;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,229,maxr = minr;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,230,TaskLocalityData data = new TaskLocalityData();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,231,PostgresConnector conn = null;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,232,try {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,233,conn = getConnector();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,241,if (conn != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,242,conn.close();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,245,return data;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,249,throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,251,List<Point> mapPoints = new ArrayList<Point>();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,265,List<Point> shufflePoints = new ArrayList<Point>();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,266,List<Point> reducePoints = new ArrayList<Point>();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,267,for (double time = submitTimeSecs; time < finishTimeSecs; time += step) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,268,int numShuffleTasks = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,269,int numReduceTasks = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,270,for (TaskAttempt taskAttempt : taskAttempts) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,277,shufflePoints.add(new Point(Math.round(time), numShuffleTasks));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,278,reducePoints.add(new Point(Math.round(time), numReduceTasks));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,280,points.setShuffleData(shufflePoints);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,281,points.setReduceData(reducePoints);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,285,int maxr) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,286,long submitTimeX = transformX(submitTime);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,287,long finishTimeX = transformX(finishTime);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,291,Long[] xList = xPoints.toArray(new Long[xPoints.size()]);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,292,MinMax io = new MinMax();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,297,setRValues(data.getMapNodeLocal(), minr, maxr, io.max);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,298,setRValues(data.getMapRackLocal(), minr, maxr, io.max);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,299,setRValues(data.getMapOffSwitch(), minr, maxr, io.max);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,300,setRValues(data.getReduceOffSwitch(), minr, maxr, io.max);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,301,data.setSubmitTime(submitTimeX);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,302,data.setFinishTime(finishTimeX);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,305,private static class MinMax {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,306,private long min = Long.MAX_VALUE;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,307,private long max = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,310,private static long transformX(long time) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,311,return Math.round(time / 1000.0);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,314,private static long untransformX(long x) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,315,return x * 1000;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,318,private static long transformY(long time) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,319,return time;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,323,TreeSet<Long> xPoints = new TreeSet<Long>();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,324,TreeSet<TaskAttempt> sortedAttempts = new TreeSet<TaskAttempt>(new Comparator<TaskAttempt>() {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,326,public int compare(TaskAttempt t1, TaskAttempt t2) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,328,return -1;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,330,return 1;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,331,return t1.getTaskAttemptId().compareTo(t2.getTaskAttemptId());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,336,getXPoints(sortedAttempts, xPoints);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,337,xPoints.add(submitTimeX);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,338,xPoints.add(finishTimeX);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,339,return xPoints;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,342,private static void getXPoints(Iterable<TaskAttempt> taskAttempts, Set<Long> xPoints) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,343,for (TaskAttempt taskAttempt : taskAttempts) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,344,long x = transformX(taskAttempt.getStartTime());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,346,x += 1;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,347,xPoints.add(x);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,348,taskAttempt.setStartTime(untransformX(x));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,352,private static int addDataPoint(List<DataPoint> data, DataPoint point, int index, Long[] xPoints) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,353,while (index < xPoints.length) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,354,if (point.getX() == xPoints[index]) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,355,index++;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,356,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,358,data.add(new DataPoint(xPoints[index++]));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,361,data.add(point);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,362,return index;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,366,List<DataPoint> data = new ArrayList<DataPoint>();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,367,int i = 0;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,368,for (TaskAttempt taskAttempt : taskAttempts) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,370,DataPoint point = new DataPoint();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,371,point.setX(transformX(taskAttempt.getStartTime()));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,372,point.setY(transformY(taskAttempt.getFinishTime() - taskAttempt.getStartTime()));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,373,point.setIO(taskAttempt.getInputBytes() + taskAttempt.getOutputBytes());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,374,point.setLabel(taskAttempt.getTaskAttemptId());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,375,point.setStatus(taskAttempt.getStatus());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,376,i = addDataPoint(data, point, i, xPoints);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,377,io.max = Math.max(io.max, point.getIO());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,378,io.min = Math.min(io.min, point.getIO());
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,382,data.add(new DataPoint(xPoints[i++]));
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,383,return data;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,386,private static void setRValues(List<DataPoint> data, int minr, int maxr, long maxIO) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,387,for (DataPoint point : data) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,388,if (point.getY() == 0) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,389,continue;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,391,if (maxIO == 0 || maxr == minr) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,392,point.setR(minr);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,393,continue;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,395,point.setR(Math.round(Math.sqrt(point.getIO() * 1.0 / maxIO) * (maxr - minr) + minr));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,25,import org.apache.ambari.server.agent.ActionQueue;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,27,import org.apache.ambari.server.controller.HostsMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,28,import org.apache.ambari.server.state.Clusters;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,45,private final ActionQueue actionQueue;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,51,public ActionManager(@Named("schedulerSleeptime") long schedulerSleepTime,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,57,scheduler = new ActionScheduler(schedulerSleepTime, actionTimeout, db,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,54,private final short maxAttempts;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,55,private final ActionQueue actionQueue;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,58,private final HostsMap hostsMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,60,public ActionScheduler(long sleepTimeMilliSec, long actionTimeoutMilliSec,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,64,this.hostsMap = hostsMap;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,46,private static final Log LOG = LogFactory.getLog(CertificateManager.class);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,99,private int runCommand(String command) {
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,186,LOG.info("Signing of agent certificate");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,21,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,54,+ " representations are null");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,39,userName = userEntity.getUserName();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,130,UserEntity userEntity = new UserEntity();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,131,userEntity.setUserName(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,132,userEntity.setUserPassword(passwordEncoder.encode(password));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,42,Provider<EntityManager> entityManagerProvider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,44,DaoUtils daoUtils;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,50,public AmbariLdapAuthenticationProvider(Configuration configuration, AmbariLdapAuthoritiesPopulator authoritiesPopulator) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1525,event = new ServiceComponentHostInstallEvent(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1526,scHost.getServiceComponentName(), scHost.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1527,nowTimestamp,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1528,scHost.getDesiredStackVersion().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,39,import org.apache.ambari.server.security.authorization.AmbariLdapAuthenticationProvider;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,30,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,51,m_type = resourceType;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestFactory.java,44,return new GetRequest(headers, body, uriInfo, resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,40,import org.apache.ambari.server.security.authorization.AmbariLocalUserDetailsService;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,127,factory.registerSingleton("ambariLocalUserService",
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,18,package org.apache.ambari.server.security.authorization;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,21,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,22,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,24,import org.apache.ambari.server.orm.dao.UserDAO;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,25,import org.apache.ambari.server.orm.entities.UserEntity;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,26,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,27,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,28,import org.springframework.security.core.userdetails.User;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,29,import org.springframework.security.core.userdetails.UserDetails;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,30,import org.springframework.security.core.userdetails.UserDetailsService;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,31,import org.springframework.security.core.userdetails.UsernameNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,34,public class AmbariLocalUserDetailsService implements UserDetailsService {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,35,private static final Logger log = LoggerFactory.getLogger(AmbariLocalUserDetailsService.class);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,37,Injector injector;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,38,Configuration configuration;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,39,private AuthorizationHelper authorizationHelper;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,40,UserDAO userDAO;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,44,public AmbariLocalUserDetailsService(Injector injector, Configuration configuration,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,46,this.injector = injector;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,47,this.configuration = configuration;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,48,this.authorizationHelper = authorizationHelper;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,49,this.userDAO = userDAO;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,61,public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,62,log.info("Loading user by name: " + username);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,64,UserEntity user = userDAO.findLocalUserByName(username);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,67,log.info("user not found ");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,68,throw new UsernameNotFoundException("Username " + username + " not found");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,28,import org.apache.ambari.server.controller.jmx.JMXPropertyProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,90,public JMXPropertyProvider(Map<String, Map<String, PropertyInfo>> componentMetrics,
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,91,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,92,JMXHostProvider jmxHostProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,93,String clusterNamePropertyId,
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,94,String hostNamePropertyId,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,121,hostRoleCommandDAO.findByHostRole(host, requestId, stageId, role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,165,private Map<String, RoleStats> processInProgressStage(Stage s,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,246,private boolean timeOutActionNeeded(HostRoleStatus status, Stage stage,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,477,loadServices();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,206,persist();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,77,componentToClusterInfoKeyMap.put("KERBEROS_SERVER", "kdc_host");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,41,protected static final String USER_USERNAME_PROPERTY_ID     = PropertyHelper.getPropertyId("Users", "user_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,43,protected static final String USER_PASSWORD_PROPERTY_ID     = PropertyHelper.getPropertyId("Users", "password");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,44,protected static final String USER_OLD_PASSWORD_PROPERTY_ID = PropertyHelper.getPropertyId("Users", "old_password");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,45,protected static final String USER_LDAP_USER_PROPERTY_ID    = PropertyHelper.getPropertyId("Users", "ldap_user");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,24,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,25,import org.apache.ambari.server.orm.entities.StageEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,30,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,31,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,91,public void removeByName(String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,92,remove(findByName(hostName));
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,50,public Map<String, Cluster> getClusters();
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,56,public List<Host> getHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,74,public Host getHost(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,81,public void addHost(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,97,public void updateClusterName(String oldName, String newName);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,99,public Cluster getClusterById(long id) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,101,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,258,private String getCategory(Map<String, Object> bean) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,264,name = name.replace("ForPort" + port, "");
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,142,StackId stackId = service.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,148,+ " not recognized in stack info"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,152,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,137,Configuration.class);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,161,SRVR_KSTR_DIR_KEY, SRVR_KSTR_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,163,SRVR_CRT_NAME_KEY, SRVR_CRT_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,167,KSTR_NAME_KEY, KSTR_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,171,PASSPHRASE_ENV_KEY, PASSPHRASE_ENV_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,173,PASSPHRASE_ENV_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,179,RESOURCES_DIR_KEY, RESOURCES_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,184,+ configsMap.get(SRVR_CRT_PASS_FILE_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,191,.parseInt(configsMap.get(SRVR_CRT_PASS_LEN_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,367,LDAP_PRIMARY_URL_KEY, LDAP_PRIMARY_URL_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,369,LDAP_SECONDARY_URL_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,371,getProperty(LDAP_USE_SSL_KEY)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,373,equalsIgnoreCase(properties.getProperty(LDAP_BIND_ANONYMOUSLY_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,374,LDAP_BIND_ANONYMOUSLY_DEFAULT)));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,376,LDAP_MANAGER_DN_KEY));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,380,(LDAP_BASE_DN_KEY, LDAP_BASE_DN_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,382,getProperty(LDAP_USERNAME_ATTRIBUTE_KEY, LDAP_USERNAME_ATTRIBUTE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,22,import org.apache.ambari.server.controller.spi.*;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,202,int exitCode = process.waitFor();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,128,public void create(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,129,entityManagerProvider.get().persist(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,133,public HostRoleCommandEntity merge(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,134,HostRoleCommandEntity entity = entityManagerProvider.get().merge(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,140,public void remove(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,141,entityManagerProvider.get().remove(merge(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,30,public static enum STATUS { OK(200, "OK", false), CREATED(201, "Created", false), ACCEPTED(202, "Accepted", false),
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,31,CONFLICT(409, "Resource Conflict", true), NOT_FOUND(404, "Not Found", true), BAD_REQUEST(400, "Bad Request", true),
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,32,UNAUTHORIZED(401, "Unauthorized", true), FORBIDDEN(403, "Forbidden", true),
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,33,SERVER_ERROR(500, "Internal Server Error", true);
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,35,private int    m_code;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,36,private String m_desc;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,37,private boolean m_isErrorState;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,39,private STATUS(int code, String description, boolean isErrorState) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,40,m_code = code;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,41,m_desc = description;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,42,m_isErrorState = isErrorState;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,45,public int getStatus() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,46,return m_code;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,49,public String getDescription() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,50,return m_desc;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,53,public boolean isErrorState() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,54,return m_isErrorState;
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,58,public String toString() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,59,return getDescription();
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,68,public TreeNode<Resource> getResultTree();
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,76,public boolean isSynchronous();
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,78,public ResultStatus getStatus();
ambari-server/src/main/java/org/apache/ambari/server/api/services/Result.java,80,public void setResultStatus(ResultStatus status);
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,45,String componentName, String hostname,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,170,List<CommandReport> reports = heartbeat.getReports();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,176,Cluster cl = clusterFsm.getCluster(report.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,177,String service = report.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,179,throw new AmbariException("Invalid command report, service: " + service);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,181,if (actionMetadata.getActions(service.toLowerCase()).contains(report.getRole())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,184,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,185,Service svc = cl.getService(service);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,186,ServiceComponent svcComp = svc.getServiceComponent(report.getRole());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,187,ServiceComponentHost scHost = svcComp.getServiceComponentHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,209,Set<Cluster> clusters = clusterFsm.getClustersForHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,210,for (Cluster cl : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,211,for (ComponentStatus status : heartbeat.componentStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,212,if (status.getClusterName().equals(cl.getClusterName())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,213,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,214,Service svc = cl.getService(status.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,215,String componentName = status.getComponentName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,216,if (svc.getServiceComponents().containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,217,ServiceComponent svcComp = svc.getServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,219,ServiceComponentHost scHost = svcComp.getServiceComponentHost(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,221,State prevState = scHost.getState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,222,State liveState = State.valueOf(State.class, status.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,242,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,247,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,250,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,256,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,259,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,266,continue;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,47,public static final String BOOTSTRAP_DIR_DEFAULT = "/var/run/ambari-server/bootstrap";
ambari-server/src/main/java/org/apache/ambari/server/api/services/UserService.java,128,Collections.singletonMap(Resource.Type.User, userName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,78,final Set<ServiceRequest> requests = new HashSet<ServiceRequest>();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,270,tmpStatus.setLog(scriptlog);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,271,tmpStatus.setStatus(stat);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,272,bsImpl.updateStatus(requestId, tmpStatus);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,273,bsImpl.reset();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,57,public void setStatus(BSStat status) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,61,public BSStat getStatus() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,65,public void setHostsStatus(List<BSHostStatus> hostsStatus) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,69,public List<BSHostStatus> getHostsStatus() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,73,public void setLog(String log) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,77,public String getLog() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,81,private Map<String, Map<String, Map<String, ServiceComponentHost>>>
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,87,private Map<String, List<ServiceComponentHost>>
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,94,private ClusterEntity clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,111,this.clusterEntity = clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,197,execCmdList = new ArrayList<ExecutionCommandWrapper>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,81,public void createHostComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,165,public Set<ServiceComponentHostResponse> getHostComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,177,public Set<ConfigurationResponse> getConfigurations(
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentRequest.java,39,super();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,51,new HashSet<String>(Arrays.asList(new String[]{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,75,throws SystemException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,76,UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,77,ResourceAlreadyExistsException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,78,NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,80,final Set<ServiceComponentRequest> requests = new HashSet<ServiceComponentRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,102,final Set<ServiceComponentRequest> requests = new HashSet<ServiceComponentRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,116,Set<Resource> resources    = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,123,setResourceProperty(resource, COMPONENT_STATE_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,124,response.getDesiredState(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,136,final Set<ServiceComponentRequest> requests = new HashSet<ServiceComponentRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,138,ServiceComponentRequest compRequest = getRequest(propertyMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,150,requests.add(compRequest);
ambari-server/src/main/java/org/apache/ambari/server/api/services/LogoutService.java,35,public Response performLogout() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,104,result = 31 * result + (configJson != null ? configJson.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java,41,private static final String userSearchFilter = "({attribute}={0})";
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java,123,return userSearchFilter.replace("{attribute}", usernameAttribute);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,54,public static final String API_AUTHENTICATE = "api.authenticate";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,316,public boolean getApiAuthentication() {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,317,return ("true".equals(properties.getProperty(API_AUTHENTICATE, "false")));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,170,if (configs.getApiAuthentication()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,45,import org.eclipse.jetty.server.Connector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,123,factory.registerSingleton("guiceInjector",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,124,injector);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,239,agent.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature",
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,422,private void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,78,user.setUserName(user.getUserName().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,66,if (user == null) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,71,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,274,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,275,if (!requestIds.isEmpty() && !taskIds.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,282,return getTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,137,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,70,stageId = hostRoleCommandEntity.getStage().getStageId();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,71,requestId = hostRoleCommandEntity.getStage().getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,26,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,202,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,19,package org.apache.ambari.server.controller;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,21,public class TaskStatusRequest {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,22,protected Long requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,23,protected Long taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,25,public TaskStatusRequest() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,28,public TaskStatusRequest(Long requestId, Long taskId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,29,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,30,this.taskId = taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,33,public Long getRequestId() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,34,return requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,37,public void setRequestId(Long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,38,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,41,public Long getTaskId() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,42,return taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,45,public void setTaskId(Long taskId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,46,this.taskId = taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,19,package org.apache.ambari.server.controller;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,21,import org.apache.ambari.server.actionmanager.HostRoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,23,public class TaskStatusResponse extends ShortTaskStatus {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,24,private long requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,25,private int exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,26,private String stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,27,private String stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,28,private long startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,29,private short attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,31,public TaskStatusResponse() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,34,public TaskStatusResponse(long requestId,
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,35,int taskId, long stageId, String hostName, String role, String command, String status,
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,38,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,39,this.exitCode = exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,40,this.stderr = stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,41,this.stdout = stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,42,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,43,this.attemptCount = attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,46,public TaskStatusResponse(HostRoleCommand hostRoleCommand) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,47,super(hostRoleCommand);
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,48,this.requestId = hostRoleCommand.getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,49,this.exitCode = hostRoleCommand.getExitCode();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,50,this.stderr = hostRoleCommand.getStderr();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,51,this.stdout = hostRoleCommand.getStdout();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,52,this.startTime = hostRoleCommand.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,53,this.attemptCount = hostRoleCommand.getAttemptCount();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,56,public long getRequestId() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,57,return requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,60,public void setRequestId(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,61,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,64,public int getExitCode() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,65,return exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,68,public void setExitCode(int exitCode) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,69,this.exitCode = exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,72,public String getStderr() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,73,return stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,76,public void setStderr(String stderr) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,77,this.stderr = stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,80,public String getStdout() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,81,return stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,84,public void setStdout(String stdout) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,85,this.stdout = stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,88,public long getStartTime() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,89,return startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,92,public void setStartTime(long startTime) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,93,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,96,public short getAttemptCount() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,97,return attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,100,public void setAttemptCount(short attemptCount) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,101,this.attemptCount = attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,105,public String toString() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,106,return super.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,20,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,22,import org.apache.ambari.server.controller.TaskStatusRequest;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,23,import org.apache.ambari.server.controller.TaskStatusResponse;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,49,protected static final String TASK_CLUSTER_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("Tasks", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,50,protected static final String TASK_REQUEST_ID_PROPERTY_ID   = PropertyHelper.getPropertyId("Tasks", "request_id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,51,protected static final String TASK_ID_PROPERTY_ID           = PropertyHelper.getPropertyId("Tasks", "id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,52,protected static final String TASK_STAGE_ID_PROPERTY_ID     = PropertyHelper.getPropertyId("Tasks", "stage_id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,53,protected static final String TASK_HOST_NAME_PROPERTY_ID    = PropertyHelper.getPropertyId("Tasks", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,54,protected static final String TASK_ROLE_PROPERTY_ID         = PropertyHelper.getPropertyId("Tasks", "role");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,55,protected static final String TASK_COMMAND_PROPERTY_ID      = PropertyHelper.getPropertyId("Tasks", "command");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,56,protected static final String TASK_STATUS_PROPERTY_ID       = PropertyHelper.getPropertyId("Tasks", "status");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,57,protected static final String TASK_EXIT_CODE_PROPERTY_ID    = PropertyHelper.getPropertyId("Tasks", "exit_code");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,58,protected static final String TASK_STDERR_PROPERTY_ID       = PropertyHelper.getPropertyId("Tasks", "stderr");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,59,protected static final String TASK_STOUT_PROPERTY_ID        = PropertyHelper.getPropertyId("Tasks", "stdout");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,60,protected static final String TASK_START_TIME_PROPERTY_ID   = PropertyHelper.getPropertyId("Tasks", "start_time");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,61,protected static final String TASK_ATTEMPT_CNT_PROPERTY_ID  = PropertyHelper.getPropertyId("Tasks", "attempt_cnt");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,165,private TaskStatusRequest getRequest(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,166,String taskId = (String) properties.get(TASK_ID_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,167,Long task_id = (taskId == null? null: Long.valueOf(taskId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,168,return new TaskStatusRequest(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,169,Long.valueOf((String) properties.get(TASK_REQUEST_ID_PROPERTY_ID)),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,170,task_id);
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/CreateHandler.java,65,LOG.error("Caught a runtime exception while attempting to create a resource", e);
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,22,import org.apache.ambari.server.Role;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,225,String hostName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,514,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,34,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,35,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,36,import com.google.inject.assistedinject.Assisted;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,37,import com.google.inject.assistedinject.AssistedInject;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,38,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,46,private static final Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,47,LoggerFactory.getLogger(ServiceImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,167,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,188,String serviceComponentName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/CreateHandler.java,56,LOG.error("Caught a system exception while attempting to create a resource", e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,22,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,23,import java.net.BindException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,24,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,64,import com.google.inject.Guice;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,65,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,66,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,67,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,68,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,69,import com.sun.jersey.spi.container.servlet.ServletContainer;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,279,else  {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,27,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,37,this.hostName = hostName;
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,47,this.hostName = hostRoleCommand.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,73,this.hostName = hostName;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,69,public static final String METADETA_DIR_PATH = "metadata.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,309,return properties.getProperty(METADETA_DIR_PATH);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,93,List<Stage> stages = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,94,for (StageEntity stageEntity : stageDAO.findByRequestId(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,95,stages.add(stageFactory.createExisting(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,97,return stages;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,133,List<Stage> stages = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,138,stages.add(stageFactory.createExisting(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,140,return stages;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,297,case COMPLETED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,298,rs.numSucceeded++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,299,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,300,case FAILED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,301,rs.numFailed++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,302,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,303,case QUEUED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,304,rs.numQueued++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,305,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,306,case PENDING:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,307,rs.numPending++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,308,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,309,case TIMEDOUT:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,310,rs.numTimedOut++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,311,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,312,case ABORTED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,313,rs.numAborted++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,314,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,315,case IN_PROGRESS:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,316,rs.numInProgress++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,317,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,318,default:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,319,LOG.error("Unknown status " + status.name());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,22,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,23,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,111,new ServiceComponentHostInstallEvent("NAMENODE", hostname, now, "HDP-1.2.0"),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,123,.addTransition(State.INIT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,124,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,125,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,127,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,128,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,129,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,132,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,133,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,134,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,137,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,138,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,139,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,141,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,142,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,143,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,146,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,147,State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,148,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,151,.addTransition(State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,152,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,153,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,155,.addTransition(State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,156,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,157,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,160,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,161,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,162,ServiceComponentHostEventType.HOST_SVCCOMP_START,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,164,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,165,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,166,ServiceComponentHostEventType.HOST_SVCCOMP_UNINSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,168,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,169,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,170,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,172,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,173,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,174,ServiceComponentHostEventType.HOST_SVCCOMP_STOP,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,177,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,178,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,179,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,182,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,183,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,184,ServiceComponentHostEventType.HOST_SVCCOMP_START,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,187,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,188,State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,192,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,194,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,198,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,199,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,210,.addTransition(State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,211,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,212,ServiceComponentHostEventType.HOST_SVCCOMP_STOP,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,215,.addTransition(State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,216,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,217,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,219,.addTransition(State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,220,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,223,.addTransition(State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,225,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,229,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,230,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,237,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,238,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,239,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,241,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,242,State.UNINSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,243,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,245,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,247,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,251,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,252,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,255,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,256,ServiceComponentHostEventType.HOST_SVCCOMP_UNINSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,259,.addTransition(State.UNINSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,260,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,261,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,264,.addTransition(State.UNINSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,265,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,266,ServiceComponentHostEventType.HOST_SVCCOMP_WIPEOUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,269,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,270,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,271,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,273,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,274,State.INIT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,275,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,277,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,279,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,283,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,284,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,287,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,288,ServiceComponentHostEventType.HOST_SVCCOMP_WIPEOUT,
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/ComparisonPredicate.java,102,Number        parsedNumber  = numberFormat.parse((String) value, parsePosition);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,34,public HostComponentStateEntity findByPK(HostComponentStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,35,return entityManagerProvider.get().find(HostComponentStateEntity.class, primaryKey);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,59,public void removeByPK(HostComponentStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,60,remove(findByPK(primaryKey));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,123,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,143,public void setServiceComponentDesiredStateEntity(ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,19,package org.apache.ambari.server.orm.entities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,23,import java.io.Serializable;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,26,public class HostComponentStateEntityPK implements Serializable {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,27,private Long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,31,public Long getClusterId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,32,return clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,35,public void setClusterId(Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,36,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,39,private String serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,43,public String getServiceName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,44,return serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,47,public void setServiceName(String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,48,this.serviceName = serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,63,private String componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,67,public String getComponentName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,68,return componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,71,public void setComponentName(String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,72,this.componentName = componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,76,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,77,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,78,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,80,HostComponentStateEntityPK that = (HostComponentStateEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,82,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,83,if (componentName != null ? !componentName.equals(that.componentName) : that.componentName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,86,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,90,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,91,int result = clusterId !=null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,93,result = 31 * result + (componentName != null ? componentName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,94,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,40,import org.apache.ambari.server.orm.entities.HostComponentStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,185,sslConnectorTwoWay.setTruststore(keystore);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,189,sslConnectorTwoWay.setKeystoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,190,sslConnectorTwoWay.setTruststoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,275,sapiConnector.setKeystoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,276,sapiConnector.setTruststoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,27,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,50,return entityManagerProvider.get().merge(hostComponentStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,34,public String getHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,39,public void setHostName(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,44,public void setPublicHostName(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,49,public String getPublicHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,55,public String getIPv4();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,60,public void setIPv4(String ip);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,66,public String getIPv6();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,71,public void setIPv6(String ip);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,76,public int getCpuCount();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,81,public void setCpuCount(int cpuCount);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,87,public long getTotalMemBytes();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,93,public void setTotalMemBytes(long totalMemBytes);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,102,public long getAvailableMemBytes();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,108,public void setAvailableMemBytes(long availableMemBytes);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,115,public String getOsArch();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,120,public void setOsArch(String osArch);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,127,public String getOsInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,132,public void setOsInfo(String osInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,139,public String getOsType();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,144,public void setOsType(String osType);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,150,public List<DiskInfo> getDisksInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,155,public void setDisksInfo(List<DiskInfo> disksInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,160,public HostHealthStatus getHealthStatus();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,165,public void setHealthStatus(HostHealthStatus healthStatus);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,172,public Map<String, String> getHostAttributes();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,177,public void setHostAttributes(Map<String, String> hostAttributes);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,181,public String getRackInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,186,public void setRackInfo(String rackInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,193,public long getLastRegistrationTime();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,198,public void setLastRegistrationTime(long lastRegistrationTime);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,205,public long getLastHeartbeatTime();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,210,public void setLastHeartbeatTime(long lastHeartbeatTime);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,216,public AgentVersion getAgentVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,221,public void setAgentVersion(AgentVersion agentVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,227,public HostState getState();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,233,public void setState(HostState state);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,247,public long getTimeInState();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,252,public void setTimeInState(long timeInState);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,254,public HostResponse convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,29,public String getName();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,31,public long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,33,public Cluster getCluster();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,38,public Map<String, ServiceComponent> getServiceComponents();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,46,public State getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,48,public void setDesiredState(State state);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,54,public StackId getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,56,public void setDesiredStackVersion(StackId stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,58,public ServiceResponse convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,60,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,77,public boolean canBeRemoved();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,84,public boolean isClientOnlyService();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,30,public String getName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,32,public String getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,34,public long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,36,public String getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,38,public State getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,40,public void setDesiredState(State state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,48,public StackId getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,50,public void setDesiredStackVersion(StackId stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,52,public Map<String, ServiceComponentHost> getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,57,public void addServiceComponentHosts(Map<String, ServiceComponentHost>
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,63,public ServiceComponentResponse convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,65,public void refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,72,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,74,public boolean isClientComponent();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,76,public boolean canBeRemoved();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,942,readLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,171,if (hostEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,188,hostDAO.merge(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,56,private final Clusters fsmObject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,68,this.fsmObject = fsmObject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,252,public long getLastAttemptTime(String host, String role) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,256,public short getAttemptCount(String host, String role) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,264,public void setLastAttemptTime(String host, String role, long t) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,270,HostRoleCommand hrc = hostRoleCommands.get(hostname).get(role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,279,return commandsToSend.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,294,public void setHostRoleStatus(String host, String role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,389,return hostRoleCommands.get(hostname).get(role);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,91,TypedQuery<HostRoleCommandEntity> query = entityManagerProvider.get().createQuery("SELECT command " +
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,22,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,23,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,61,hostRoleCommand.getRoleCommand());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TemporalInfoImpl.java,27,private long m_startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TemporalInfoImpl.java,28,private long m_endTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TemporalInfoImpl.java,29,private long m_step;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,197,this.attemptCount++;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,96,result = 31 * result + (logInfo != null ? logInfo.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,259,initialized = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,258,resources.setInitOrder(6);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,43,private Map<String, String> properties;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,71,return type;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,80,public synchronized Map<String, String> getProperties() {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,81,if (null != entity && null == properties) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,83,properties = gson.<Map<String, String>>fromJson(entity.getData(), Map.class);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,87,: new HashMap<String, String>(properties);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,96,public synchronized void setProperties(Map<String, String> properties) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,97,this.properties = properties;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,101,public synchronized void updateProperties(Map<String, String> properties) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,102,this.properties.putAll(properties);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,106,public synchronized void deleteProperties(List<String> properties) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,107,for (String key : properties) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,108,this.properties.remove(key);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,116,ClusterEntity clusterEntity = clusterDAO.findById(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,170,HostEntity hostEntity = hostDAO.findByName(hostRoleCommandEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,21,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,24,import java.util.*;
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,43,serviceClients.put("hdfs"       , Role.HDFS_CLIENT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,44,serviceClients.put("hbase"      , Role.HBASE_CLIENT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,45,serviceClients.put("mapreduce"  , Role.MAPREDUCE_CLIENT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,46,serviceClients.put("zookeeper"  , Role.ZOOKEEPER_CLIENT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,47,serviceClients.put("hive"       , Role.HIVE_CLIENT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,48,serviceClients.put("hcat"       , Role.HCAT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,49,serviceClients.put("oozie"      , Role.OOZIE_CLIENT.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,50,serviceClients.put("pig"        , Role.PIG.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,51,serviceClients.put("sqoop"      , Role.SQOOP.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,204,setHealthStatus(new HostHealthStatus(HealthStatus.UNKNOWN, ""));
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,49,private boolean persisted = false;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,80,private boolean persisted = false;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java,98,return entityManagerProvider.get().merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,129,clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,130,cluster.refresh();
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,50,throws UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,51,SystemException,
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,52,ResourceAlreadyExistsException,
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,53,NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,56,Resource.Type type = resource.getResourceDefinition().getType();
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,57,Schema schema = m_controller.getSchema(type);
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,59,if (setProperties.size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,64,for (Map.Entry<Resource.Type, String> entry : mapResourceIds.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,65,String property = schema.getKeyPropertyId(entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,67,mapProperties.put(property, entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,93,bindConstant().annotatedWith(Names.named("schedulerSleeptime")).to(10000L);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,112,href + id : href + parent.getName() + '/' + id;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/HostComponentResourceDefinition.java,106,String nodeHref = resultNode.getProperty("href");
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultPostProcessorImpl.java,79,href = node.getProperty("href");
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultPostProcessorImpl.java,85,String isItemsCollection = node.getProperty("isCollection");
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,170,String hrefProp = node.getProperty("href");
ambari-server/src/main/java/org/apache/ambari/server/api/util/TreeNode.java,92,public void setProperty(String name, String value);
ambari-server/src/main/java/org/apache/ambari/server/api/util/TreeNode.java,100,public String getProperty(String name);
ambari-server/src/main/java/org/apache/ambari/server/api/util/TreeNodeImpl.java,53,private Map<String, String> m_mapNodeProps;
ambari-server/src/main/java/org/apache/ambari/server/api/util/TreeNodeImpl.java,115,public void setProperty(String name, String value) {
ambari-server/src/main/java/org/apache/ambari/server/api/util/TreeNodeImpl.java,123,public String getProperty(String name) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,116,LOG.info("Error reading log file " + log);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,192,ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,193,BSStatusCollector statusCollector = new BSStatusCollector();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,194,ScheduledFuture<?> handle = scheduler.scheduleWithFixedDelay(statusCollector,
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,195,0, 10, TimeUnit.SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,196,LOG.info("Kicking off the scheduler for polling on logs in " +
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,197,this.requestIdDir);
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationResponse.java,38,public ConfigurationResponse(String clusterName,
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationResponse.java,39,String type, String versionTag,
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationResponse.java,41,super();
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationResponse.java,94,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationResponse.java,95,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,38,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,40,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,41,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,42,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,43,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,44,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,68,ConfigurationResourceProvider(Set<String> propertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,69,Map<Resource.Type, String> keyPropertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,70,AmbariManagementController managementController) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,72,super(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,128,throw new ClusterNotFoundException(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,146,throw new ClusterNotFoundException("clusterID=" + id);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,204,throw new HostNotFoundException(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,133,hostComponents.put(hostComponentStateEntity.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,135,hostComponentStateEntity, hostComponentDesiredStateEntity));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,39,private static final String logFileFilter = ".log";
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,40,private static final String doneFileFilter = ".done";
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,200,LOG.info("Bootstrap output, log="
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,204,String errMesg = "";
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,73,schedulerThread = new Thread(this);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,57,monitorThread = new Thread(this);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,326,boolean match = true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,327,Set<HostRoleStatus> statuses = new HashSet<HostRoleStatus>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,328,if (status == RequestStatus.IN_PROGRESS) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,332,match = false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,334,HostRoleStatus.IN_PROGRESS, HostRoleStatus.QUEUED,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,335,HostRoleStatus.ABORTED, HostRoleStatus.FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/StackId.java,97,if (stackId.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,536,hostEntity.setPublicHostName(hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,548,return hostEntity.getPublicHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,559,return hostEntity.getIpv4();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,569,hostEntity.setIpv4(ip);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,580,return hostEntity.getIpv6();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,590,hostEntity.setIpv6(ip);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,601,return hostEntity.getCpuCount();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,611,hostEntity.setCpuCount(cpuCount);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,622,return hostEntity.getTotalMem();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,632,hostEntity.setTotalMem(totalMemBytes);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,643,return hostStateEntity.getAvailableMem();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,654,hostStateEntity.setAvailableMem(availableMemBytes);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,666,return hostEntity.getOsArch();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,676,hostEntity.setOsArch(osArch);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,687,return hostEntity.getOsInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,697,hostEntity.setOsInfo(osInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,708,return hostEntity.getOsType();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,718,hostEntity.setOsType(osType);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,751,return gson.fromJson(hostStateEntity.getHealthStatus(),
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,762,hostStateEntity.setHealthStatus(gson.toJson(healthStatus));
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,773,return gson.<Map<String, String>>fromJson(hostEntity.getHostAttributes(),
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,784,Map<String, String> hostAttrs = gson.<Map<String, String>>
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,785,fromJson(hostEntity.getHostAttributes(), hostAttributesType);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,790,hostEntity.setHostAttributes(gson.toJson(hostAttrs,
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,791,hostAttributesType));
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,802,return hostEntity.getRackInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,812,hostEntity.setRackInfo(rackInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,823,return hostEntity.getLastRegistrationTime();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,866,return gson.fromJson(hostStateEntity.getAgentVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,878,hostStateEntity.setAgentVersion(gson.toJson(agentVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,888,return hostStateEntity.getTimeInState();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,895,hostStateEntity.setTimeInState(timeInState);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,993,if (isPersisted()) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,994,hostEntity = hostDAO.findByName(hostEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,995,hostStateEntity = hostEntity.getHostStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,996,hostDAO.refresh(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,997,hostStateDAO.refresh(hostStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,258,return hostComponentDesiredStateEntities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,269,return hostComponentStateEntities;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1159,hostEntity.getHostComponentStateEntities().add(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1160,hostEntity.getHostComponentDesiredStateEntities().add(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,106,bsRunner = new BSRunner(this, info, bootStrapDir.toString(),
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,107,bootScript, bootSetupAgentScript, bootSetupAgentPassword, requestId, 0L,
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,109,bsRunner.start();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,110,response.setStatus(BSRunStat.OK);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,111,response.setLog("Running Bootstrap now.");
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,112,response.setRequestId(requestId);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,113,return response;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1130,try {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,28,public class ServiceInfo {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,91,if (clusters.containsKey(clusterName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,92,throw new DuplicateResourceException("Attempted to create a Cluster which already exists"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,93,+ ", clusterName=" + clusterName);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,59,public static final String KSTR_NAME_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,61,public static final String SRVR_CRT_PASS_FILE_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,65,public static final String PASSPHRASE_ENV_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,74,public static final String LDAP_PRIMARY_URL_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,76,public static final String LDAP_SECONDARY_URL_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,78,public static final String LDAP_BASE_DN_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,80,public static final String LDAP_BIND_ANONYMOUSLY_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,82,public static final String LDAP_MANAGER_DN_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,84,public static final String LDAP_MANAGER_PASSWORD_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,86,public static final String LDAP_USERNAME_ATTRIBUTE_KEY =
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,118,private static final String RESOURCES_DIR_DEFAULT =
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,141,String shellCommand[] = new String[3];
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,160,commands[0] = this.bsScript;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,161,commands[1] = hostString;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,162,commands[2] = this.requestIdDir.toString();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,173,StringBuilder commandString = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,174,for (String comm : commands) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,175,commandString.append(" " + comm);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,179,LOG.debug(commandString);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,182,String bootStrapOutputFile = requestIdDir + File.separator + "bootstrap.out";
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,183,String bootStrapErrorFile = requestIdDir + File.separator + "bootstrap.err";
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,184,commandString.append(
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,187,shellCommand[2] = commandString.toString();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,188,Process process = Runtime.getRuntime().exec(shellCommand, env);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,201,+ bootStrapErrorFile + " " + bootStrapOutputFile);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,206,outMesg = FileUtils.readFileToString(new File(bootStrapOutputFile));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,207,errMesg = FileUtils.readFileToString(new File(bootStrapErrorFile));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,20,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,22,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,75,public List<Stage> getStagesByHostRoleStatus(Set<HostRoleStatus> statuses);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,134,List<HostRoleStatus> statuses =
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,135,Arrays.asList(HostRoleStatus.QUEUED, HostRoleStatus.IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,137,for (StageEntity stageEntity : stageDAO.findByCommandStatuses(statuses)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,303,public List<Stage> getStagesByHostRoleStatus(Set<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,304,List<Stage> stages = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,305,for (StageEntity stageEntity : stageDAO.findByCommandStatuses(statuses)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,306,stages.add(stageFactory.createExisting(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,308,return stages;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,54,this.actionQueue = aq;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,145,public List<Stage> getRequestsByHostRoleStatus(Set<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,146,return db.getStagesByHostRoleStatus(statuses);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,63,this.sleepTime = sleepTimeMilliSec;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,65,this.actionTimeout = actionTimeoutMilliSec;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,216,this.updateRoleStats(status, roleStats.get(roleStr));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,325,this.taskTimeoutAdjustment = val;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,340,this.totalHosts = total;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,25,import org.apache.ambari.server.actionmanager.HostRoleStatus;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,26,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,27,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,28,import org.apache.ambari.server.orm.entities.StageEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,32,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,34,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,29,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,30,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,75,public List<StageEntity> findByCommandStatuses(Collection<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,80,TypedQuery<StageEntity> query = entityManagerProvider.get().createQuery("SELECT stage " +
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,84,return daoUtils.selectList(query, statuses);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,205,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,206,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,210,if (attemptCount != null ? !attemptCount.equals(that.attemptCount) : that.attemptCount != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,211,if (event != null ? !event.equals(that.event) : that.event != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,212,if (exitcode != null ? !exitcode.equals(that.exitcode) : that.exitcode != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,213,if (hostName != null ? !hostName.equals(that.hostName) : that.hostName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,216,if (requestId != null ? !requestId.equals(that.requestId) : that.requestId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,217,if (role != null ? !role.equals(that.role) : that.role != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,218,if (stageId != null ? !stageId.equals(that.stageId) : that.stageId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,219,if (startTime != null ? !startTime.equals(that.startTime) : that.startTime != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,220,if (status != null ? !status.equals(that.status) : that.status != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,223,if (taskId != null ? !taskId.equals(that.taskId) : that.taskId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,254,this.executionCommand = executionCommandsByTaskId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,21,import javax.persistence.*;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,78,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,79,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,83,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,84,if (logInfo != null ? !logInfo.equals(that.logInfo) : that.logInfo != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,85,if (requestId != null ? !requestId.equals(that.requestId) : that.requestId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,86,if (stageId != null ? !stageId.equals(that.stageId) : that.stageId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,24,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,25,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,26,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,27,import com.google.inject.assistedinject.Assisted;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,28,import com.google.inject.assistedinject.AssistedInject;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,29,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,86,this.desiredStateEntity = new ServiceComponentDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,93,this.hostComponents = new HashMap<String, ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,109,init();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,118,this.desiredStateEntity = serviceComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,123,this.hostComponents = new HashMap<String, ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,485,return this.isClientComponent;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,90,private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,91,private Lock readLock = readWriteLock.readLock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,92,private Lock writeLock = readWriteLock.writeLock();
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultPostProcessorImpl.java,62,processNode(result.getResultTree(), m_request.getURI());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,170,long taskTimeout = actionTimeout;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,171,if (taskTimeoutAdjustment) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseRequest.java,94,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseRequest.java,95,return URLDecoder.decode(m_uriInfo.getRequestUri().toASCIIString(), "UTF-8");
ambari-server/src/main/java/org/apache/ambari/server/api/services/BaseRequest.java,97,throw new RuntimeException("Unable to decode URI: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultPostProcessorImpl.java,82,href = href.substring(0, i);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java,26,import java.net.URLConnection;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,148,root.setResourceBase(configs.getWebAppDir());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,105,public static final String OS_VERSION_KEY =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/UserResourceDefinition.java,20,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/UserResourceDefinition.java,46,return Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,147,throw new RuntimeException("Trying to create a ServiceComponent"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,122,components.put(serviceComponentDesiredStateEntity.getComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,123,serviceComponentFactory.createExisting(this,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,124,serviceComponentDesiredStateEntity));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,29,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,30,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,44,private final static Logger LOG = LoggerFactory.getLogger(Users.class);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,112,throw new AmbariException("Wrong password provided");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,121,private static final String CLIENT_SECURITY_DEFAULT = "local";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,123,private static final String USER_ROLE_NAME_DEFAULT = "user";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,124,private static final String ADMIN_ROLE_NAME_DEFAULT = "admin";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,142,root.getSessionHandler().getSessionManager().setSessionCookie("AMBARISESSIONID");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,156,ServletContextHandler agentroot = new ServletContextHandler(serverForAgent,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,167,DelegatingFilterProxy springSecurityFilter = new DelegatingFilterProxy();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,168,springSecurityFilter.setTargetBeanName("springSecurityFilterChain");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,21,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,22,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,23,import org.apache.ambari.server.orm.entities.UserEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,28,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,72,user.setUserName(user.getUserName().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,73,entityManagerProvider.get().persist(user);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,37,User(UserEntity userEntity) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,33,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,74,return new User(user.getUserName(), user.getUserPassword(),
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,98,sb.append("{"
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,99,+ " clusterName=" + clusterName
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,100,+ ", clusterId=" + clusterId
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,101,+ ", hosts=[");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,868,if (0 != request.getRoles().size()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,869,user = users.getAnyUser(request.getUsername());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,870,if (null != user) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,871,for (String role : request.getRoles()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,873,users.addRoleToUser(user, role);
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,20,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,21,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,30,private Set<String> roles = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,40,public Set<String> getRoles() {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,41,return roles;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,44,public void setRoles(Set<String> userRoles) {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,45,roles = userRoles;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,67,sb.append("User"
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,68,+ ", username=" + userName
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,69,+ ", roles=[ ");
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,70,if (roles != null && !roles.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,71,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,72,for (String role : roles) {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,73,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,74,sb.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,76,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,77,sb.append(role);
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,80,sb.append(" ]");
ambari-server/src/main/java/org/apache/ambari/server/controller/UserResponse.java,28,private Set<String> roles = Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/UserResponse.java,41,public Set<String> getRoles() {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserResponse.java,42,return roles;
ambari-server/src/main/java/org/apache/ambari/server/controller/UserResponse.java,45,public void setRoles(Set<String> userRoles) {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserResponse.java,46,roles = userRoles;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,28,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,42,protected static final String USER_ROLES_PROPERTY_ID        = PropertyHelper.getPropertyId("Users", "roles");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,118,setResourceProperty(resource, USER_ROLES_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,119,userResponse.getRoles(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,190,if (null != properties.get(USER_ROLES_PROPERTY_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,191,HashSet<String> roles = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,193,Collections.addAll(roles, ((String) properties.get(USER_ROLES_PROPERTY_ID)).split(","));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,195,request.setRoles(roles);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,172,public synchronized void addHostRoleExecutionCommand(String host, Role role,  RoleCommand command,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,173,ServiceComponentHostEvent event, String clusterName, String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,174,HostRoleCommand hrc = new HostRoleCommand(host, role, event, command);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,178,cmd.setHostname(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,180,cmd.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,184,Map<String, HostRoleCommand> hrcMap = this.hostRoleCommands.get(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,187,this.hostRoleCommands.put(host, hrcMap);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,192,+ this.getActionId() + ", host=" + host + ", role=" + role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,195,List<ExecutionCommandWrapper> execCmdList = this.commandsToSend.get(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,198,this.commandsToSend.put(host, execCmdList);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,205,+ this.getActionId() + ", host=" + host + ", role=" + role);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,20,import org.apache.ambari.server.controller.internal.PropertyInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,21,import org.apache.ambari.server.controller.internal.RequestImpl;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,23,import org.apache.ambari.server.controller.spi.Request;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,24,import org.apache.ambari.server.controller.spi.Resource;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,25,import org.apache.ambari.server.controller.spi.TemporalInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,26,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,27,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,94,public static String getPropertyCategory(String absProperty) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,96,return lastPathSep == -1 ? null : absProperty.substring(0, lastPathSep);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,125,this.gson = injector.getInstance(Gson.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,127,this.masterHostname =  InetAddress.getLocalHost().getCanonicalHostName();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,106,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,107,if (clusterInfo != null ? !clusterInfo.equals(that.clusterInfo) : that.clusterInfo != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,108,if (clusterName != null ? !clusterName.equals(that.clusterName) : that.clusterName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,110,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,112,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,119,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,120,result = 31 * result + (clusterName != null ? clusterName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,121,result = 31 * result + (desiredClusterState != null ? desiredClusterState.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,122,result = 31 * result + (clusterInfo != null ? clusterInfo.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java,123,result = 31 * result + (desiredStackVersion != null ? desiredStackVersion.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,217,if (cpuCount != null ? !cpuCount.equals(that.cpuCount) : that.cpuCount != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,218,if (lastRegistrationTime != null ? !lastRegistrationTime.equals(that.lastRegistrationTime) : that.lastRegistrationTime != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,219,if (totalMem != null ? !totalMem.equals(that.totalMem) : that.totalMem != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,220,if (cpuInfo != null ? !cpuInfo.equals(that.cpuInfo) : that.cpuInfo != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,222,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,225,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,226,if (hostName != null ? !hostName.equals(that.hostName) : that.hostName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,227,if (ipv4 != null ? !ipv4.equals(that.ipv4) : that.ipv4 != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,228,if (osArch != null ? !osArch.equals(that.osArch) : that.osArch != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,229,if (osInfo != null ? !osInfo.equals(that.osInfo) : that.osInfo != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,230,if (osType != null ? !osType.equals(that.osType) : that.osType != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,231,if (rackInfo != null ? !rackInfo.equals(that.rackInfo) : that.rackInfo != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,238,int result = hostName != null ? hostName.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,239,result = 31 * result + (ipv4 != null ? ipv4.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,240,result = 31 * result + (totalMem != null ? totalMem.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,241,result = 31 * result + cpuCount;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,242,result = 31 * result + (cpuInfo != null ? cpuInfo.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,243,result = 31 * result + (osArch != null ? osArch.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,245,result = 31 * result + (osInfo != null ? osInfo.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,246,result = 31 * result + (osType != null ? osType.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,247,result = 31 * result + (discoveryStatus != null ? discoveryStatus.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,248,result = 31 * result + (lastRegistrationTime != null ? lastRegistrationTime.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,249,result = 31 * result + (rackInfo != null ? rackInfo.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,250,result = 31 * result + (hostAttributes != null ? hostAttributes.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,251,return result;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,223,String clusterName = (String) resource.getPropertyValue(clusterNamePropertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,224,Map<TemporalInfo, RRDRequest> requests = requestMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,225,if (requests == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,226,requests = new HashMap<TemporalInfo, RRDRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,227,requestMap.put(clusterName, requests);
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyListAdapter.java,37,for (String key : map.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyListAdapter.java,38,JaxbMapKeyList jaxbMap = new JaxbMapKeyList(key, map.get(key));
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyMapAdapter.java,38,for (String key : map.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyMapAdapter.java,39,Map<String, String> value = map.get(key);
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyMapAdapter.java,41,list[index++] = new JaxbMapKeyMap(key, keyValList);
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyValAdapter.java,35,for (String key : m.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/utils/JaxbMapKeyValAdapter.java,36,JaxbMapKeyVal jaxbMap = new JaxbMapKeyVal(key, m.get(key));
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,78,boolean result =false;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,79,if(this == o) result = true;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,80,if(o instanceof BaseResourceDefinition){
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,81,BaseResourceDefinition other = (BaseResourceDefinition) o;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,83,result = true;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,85,return result;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestFactory.java,51,new PostRequest(headers, body, uriInfo, resource) :
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestFactory.java,52,new QueryPostRequest(headers, body, uriInfo, resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,35,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,37,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,38,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,39,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,113,Set<Resource> keepers = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,121,keepers.addAll(rrdRequest.populateResources());
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,355,sb.append(",");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,227,scHost.setState(liveState);
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/ComparisonPredicate.java,82,if (propertyValue instanceof Number ) {
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/ComparisonPredicate.java,83,return (int) (doubleValue - ((Number) propertyValue).doubleValue());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,37,fillServiceActions();
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,39,fillServiceCheckActions();
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,54,private void fillServiceActions() {
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,56,serviceActions.put("hbase"      , Arrays.asList(Role.HBASE_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,57,serviceActions.put("mapreduce"  , Arrays.asList(Role.MAPREDUCE_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,58,serviceActions.put("zookeeper"  , Arrays.asList(Role.ZOOKEEPER_QUORUM_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,59,serviceActions.put("hive"       , Arrays.asList(Role.HIVE_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,60,serviceActions.put("hcat"       , Arrays.asList(Role.HCAT_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,61,serviceActions.put("oozie"      , Arrays.asList(Role.OOZIE_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,62,serviceActions.put("pig"        , Arrays.asList(Role.PIG_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,63,serviceActions.put("sqoop"      , Arrays.asList(Role.SQOOP_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,67,private void fillServiceCheckActions() {
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,68,serviceCheckActions.put("hdfs", Role.HDFS_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,69,serviceCheckActions.put("hbase", Role.HBASE_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,70,serviceCheckActions.put("mapreduce",
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,71,Role.MAPREDUCE_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,72,serviceCheckActions.put("zookeeper",
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,73,Role.ZOOKEEPER_QUORUM_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,74,serviceCheckActions.put("hive", Role.HIVE_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,75,serviceCheckActions.put("hcat", Role.HCAT_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,76,serviceCheckActions.put("oozie", Role.OOZIE_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,77,serviceCheckActions.put("pig", Role.PIG_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,78,serviceCheckActions.put("sqoop", Role.SQOOP_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,79,serviceCheckActions.put("webhcat",
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,80,Role.WEBHCAT_SERVICE_CHECK.toString());
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,38,Map<String, Queue<AgentCommand>> hostQueues;
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,41,hostQueues = new HashMap<String, Queue<AgentCommand>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,44,private synchronized Queue<AgentCommand> getQueue(String hostname) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,48,private synchronized void addQueue(String hostname, Queue<AgentCommand> q) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,49,hostQueues.put(hostname, q);
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,53,Queue<AgentCommand> q;
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,54,synchronized (this) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,55,q = getQueue(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,57,addQueue(hostname, new LinkedList<AgentCommand>());
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,61,synchronized (q) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,62,if (q.contains(cmd)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,63,LOG.warn("cmd already exists in the queue, not adding again");
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,64,return;
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,66,q.add(cmd);
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,75,synchronized (q) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,76,if (q.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,77,return null;
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,79,return q.remove();
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,89,synchronized(q) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,100,synchronized (q) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,101,while (true) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,102,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,103,AgentCommand cmd = q.remove();
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,104,if (cmd != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,105,l.add(cmd);
ambari-server/src/main/java/org/apache/ambari/server/agent/ActionQueue.java,108,return l;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,195,try {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,196,return InetAddress.getLocalHost().getCanonicalHostName();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,198,LOG.warn("Could not find canonical hostname ", e);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,199,return "localhost";
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,81,public List<Long> getRequestsByStatus(RequestStatus status);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,313,return hostRoleCommandDAO.getRequests();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,325,public List<Long> getRequestsByStatus(RequestStatus status) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,153,public List<Long> getRequests() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,161,public List<Long> getRequestsByStatus(RequestStatus status) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,162,return db.getRequestsByStatus(status);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,45,private static Logger LOG = LoggerFactory.getLogger(HostRoleCommandDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,101,public List<Long> getRequests() {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,102,String queryStr = "SELECT DISTINCT command.requestId " +
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,104,TypedQuery<Long> query = entityManagerProvider.get().createQuery(queryStr,
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,105,Long.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,107,return daoUtils.selectList(query);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,243,return repos.containsKey(h.getOsType());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,224,report.setStdErr("Host Role in invalid state");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,182,+ s.getActionId() + " timed out");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,165,SRVR_KEY_NAME_KEY, SRVR_KEY_NAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,53,private static final String SIGN_SRVR_CRT = "openssl x509 " +
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,146,srvrCrtName, kstrName};
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,201,LOG.warn("State machine exception", ex);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,168,String componentName = (String) resource.getPropertyValue(componentNamePropertyId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,28,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,46,private final Role role;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,51,private final ServiceComponentHostEventWrapper event;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,60,ServiceComponentHostEvent event, RoleCommand command) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,140,public HostRoleStatus getStatus() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,141,return status;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,144,public ServiceComponentHostEventWrapper getEvent() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,145,return event;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,388,HostRoleCommand getHostRoleCommand(String hostname, String role) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,34,public ShortTaskStatus(int taskId, long stageId, String hostName, String role, String command, String status) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,36,int exitCode, String stderr, String stdout, long startTime, short attemptCount) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,37,super(taskId, stageId, hostName, role, command, status);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,331,return dataPoints;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,334,int length = dataPoints.length;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,458,resource.setProperty(propertyId, getValue(gangliaMetric, temporalInfo != null));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,111,private static final String SRVR_KSTR_DIR_DEFAULT = ".";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,115,private static final String SRVR_CRT_PASS_FILE_DEFAULT ="pass.txt";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActionResourceProvider.java,24,import org.apache.ambari.server.controller.RequestStatusResponse;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActionResourceProvider.java,66,final Set<ActionRequest> requests = new HashSet<ActionRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActionResourceProvider.java,72,public RequestStatusResponse invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1505,long stageId = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1507,stage.setStageId(stageId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,176,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,177,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,191,!componentName.equals(that.componentName) : that.componentName != null){
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,206,result = 71 * result + (componentName != null ? componentName.hashCode():0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,78,UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,79,ResourceAlreadyExistsException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,80,NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,110,Set<Resource> resources    = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,122,setResourceProperty(resource, HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, response.getClusterName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,123,setResourceProperty(resource, HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID, response.getServiceName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,124,setResourceProperty(resource, HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, response.getComponentName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,125,setResourceProperty(resource, HOST_COMPONENT_HOST_NAME_PROPERTY_ID, response.getHostname(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,126,setResourceProperty(resource, HOST_COMPONENT_STATE_PROPERTY_ID, response.getLiveState(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,127,setResourceProperty(resource, HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID, response.getDesiredState(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,139,throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,143,Iterator<Map<String,Object>> iterator = request.getProperties().iterator();
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,64,serviceActions.put("webhcat"  , Arrays.asList(Role.WEBHCAT_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,20,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostFactory.java,26,ServiceComponentHost createNew(ServiceComponent serviceComponent,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostFactory.java,27,String hostName, boolean isClient);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,21,import java.util.*;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,22,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,34,import org.apache.ambari.server.orm.dao.*;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,35,import org.apache.ambari.server.orm.entities.*;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,64,boolean persisted = false;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,72,private final boolean isClientComponent;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,76,private void init() {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,176,getServiceComponentHosts() {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,257,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,515,if (isClient) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,20,import java.io.ByteArrayInputStream;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,21,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,22,import java.io.InputStream;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,23,import java.net.InetAddress;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,24,import java.net.UnknownHostException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,25,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,26,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,28,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,29,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,30,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,31,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,33,import javax.xml.bind.JAXBException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,39,import org.apache.ambari.server.controller.HostsMap;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,51,public class StageUtils {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,55,new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,137,JsonGenerationException, JsonMappingException, IOException {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,43,public void persistActions(List<Stage> stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,77,public List<Long> getRequests();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,25,import org.apache.ambari.server.orm.dao.ClusterDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,26,import org.apache.ambari.server.orm.dao.ExecutionCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,27,import org.apache.ambari.server.orm.dao.HostDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,28,import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,29,import org.apache.ambari.server.orm.dao.RoleSuccessCriteriaDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,30,import org.apache.ambari.server.orm.dao.StageDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,31,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,32,import org.apache.ambari.server.orm.entities.ExecutionCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,33,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,34,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,35,import org.apache.ambari.server.orm.entities.RoleSuccessCriteriaEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,36,import org.apache.ambari.server.orm.entities.StageEntity;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,52,private ClusterDAO clusterDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,54,private HostDAO hostDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,56,private StageDAO stageDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,58,private HostRoleCommandDAO hostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,60,private ExecutionCommandDAO executionCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,62,private RoleSuccessCriteriaDAO roleSuccessCriteriaDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,64,private StageFactory stageFactory;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,66,private HostRoleCommandFactory hostRoleCommandFactory;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,68,private Clusters clusters;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,74,injector.injectMembers(this);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,75,requestId = stageDAO.getLastRequestId();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,85,return stageFactory.createExisting(actionId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,148,public void persistActions(List<Stage> stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,149,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,150,LOG.debug("Adding stages to DB, stageCount=" + stages.size());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,152,for (Stage stage : stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,153,StageEntity stageEntity = stage.constructNewPersistenceEntity();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,154,Cluster cluster;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,155,try {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,156,cluster = clusters.getCluster(stage.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,158,throw new RuntimeException(e);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,160,ClusterEntity clusterEntity = clusterDAO.findById(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,165,for (HostRoleCommand hostRoleCommand : stage.getOrderedHostRoleCommands()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,166,HostRoleCommandEntity hostRoleCommandEntity = hostRoleCommand.constructNewPersistenceEntity();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,312,public List<Long> getRequests() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,18,package org.apache.ambari.server.actionmanager;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,23,import org.apache.ambari.server.agent.CommandReport;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,25,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,26,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,31,public class ActionDBInMemoryImpl implements ActionDBAccessor {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,35,private final long lastRequestId = 0;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,37,List<Stage> stageList = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,42,if (s.getActionId().equals(actionId)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,43,return s;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,46,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,49,public synchronized List<Stage> getAllStages(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,50,List<Stage> l = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,52,if (s.getRequestId() == requestId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,53,l.add(s);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,56,return l;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,60,public synchronized void abortOperation(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,61,for (Stage s : stageList) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,62,if (s.getRequestId() == requestId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,63,for (String host : s.getHostRoleCommands().keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,64,Map<String, HostRoleCommand> roleCommands = s.getHostRoleCommands().get(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,65,for (String role : roleCommands.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,66,HostRoleCommand cmd = roleCommands.get(role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,68,.toString());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,71,|| status.equals(HostRoleStatus.PENDING)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,72,s.setHostRoleStatus(host, cmd.getRole().toString(),
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,73,HostRoleStatus.ABORTED);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,82,public synchronized void timeoutHostRole(String host, long requestId,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,84,for (Stage s : stageList) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,85,s.setHostRoleStatus(host, role.toString(), HostRoleStatus.TIMEDOUT);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,90,public synchronized List<Stage> getStagesInProgress() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,91,List<Stage> l = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,93,if (s.isStageInProgress()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,94,l.add(s);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,97,return l;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,101,public synchronized void persistActions(List<Stage> stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,103,stageList.add(s);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,107,public synchronized void updateHostRoleState(String hostname, long requestId,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,110,for (Stage s : stageList) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,111,if (s.getRequestId() == requestId && s.getStageId() == stageId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,112,s.setHostRoleStatus(hostname, role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,113,HostRoleStatus.valueOf(report.getStatus()));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,114,s.setExitCode(hostname, role, report.getExitCode());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,115,s.setStderr(hostname, role, report.getStdErr());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,116,s.setStdout(hostname, role, report.getStdOut());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,123,CommandReport report = new CommandReport();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,124,report.setExitCode(999);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,125,report.setStdErr("Host Role in invalid state");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,126,report.setStdOut("");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,127,report.setStatus("ABORTED");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,132,public synchronized long getLastPersistedRequestIdWhenInitialized() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,133,return lastRequestId;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,137,public void hostRoleScheduled(Stage s, String hostname, String roleStr) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,142,public List<HostRoleCommand> getRequestTasks(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,143,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,147,public List<HostRoleCommand> getAllTasksByRequestIds(Collection<Long> requestIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,149,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,153,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,155,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,159,public Collection<HostRoleCommand> getTasks(Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,160,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,164,public List<Stage> getStagesByHostRoleStatus(Set<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,165,List<Stage> l = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,167,if (s.doesStageHaveHostRoleStatus(statuses)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,168,l.add(s);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,171,return l;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,174,public synchronized List<Long> getRequests() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,175,Set<Long> requestIds = new HashSet<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,177,requestIds.add(s.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,179,List<Long> ids = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,180,ids.addAll(requestIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,181,return ids;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,184,public HostRoleCommand getTask(long taskId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,185,for (Stage s : stageList) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,186,for (String host : s.getHostRoleCommands().keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,187,Map<String, HostRoleCommand> map = s.getHostRoleCommands().get(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,188,for (HostRoleCommand hostRoleCommand : map.values()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,189,if (hostRoleCommand.getTaskId() == taskId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,190,return hostRoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,195,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,198,public List<Long> getRequestsByStatus(RequestStatus status) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBInMemoryImpl.java,200,throw new RuntimeException("Functionality not implemented");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,77,db.persistActions(stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,154,return db.getRequests();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,22,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,23,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,24,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,25,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,77,public Stage(@Assisted String actionId, Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,78,this(injector.getInstance(StageDAO.class).findByActionId(actionId), injector);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,82,public Stage(@Assisted StageEntity stageEntity, Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,83,HostRoleCommandDAO hostRoleCommandDAO = injector.getInstance(HostRoleCommandDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,84,HostDAO hostDAO = injector.getInstance(HostDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,85,HostRoleCommandFactory hostRoleCommandFactory = injector.getInstance(HostRoleCommandFactory.class);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/StageFactory.java,28,Stage createExisting(String actionId);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,26,import org.apache.ambari.server.actionmanager.ActionManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,27,import org.apache.ambari.server.actionmanager.HostRoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,29,import org.apache.ambari.server.actionmanager.Stage;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,30,import org.apache.ambari.server.actionmanager.StageFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,113,addInMemoryUsers();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,347,protected void addInMemoryUsers() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,348,if (configs.getPersistenceType() == PersistenceType.IN_MEMORY) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,349,LOG.info("In-memory database is used - creating default users");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,358,throw new RuntimeException(e);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,178,String roleStr = c.getRole().toString();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,18,package org.apache.ambari.server.actionmanager;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,23,import org.apache.ambari.server.agent.ExecutionCommand;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,24,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,32,public class HostAction {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,33,private final String host;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,34,private List<HostRoleCommand> roles;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,35,private long startTime = -1;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,36,private long lastAttemptTime = -1;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,37,private short attemptCount = 0;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,42,private ExecutionCommand commandToHost;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,44,public String getManifest() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,46,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,49,public HostAction(String host) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,50,this.host = host;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,51,roles = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,52,commandToHost = new ExecutionCommand();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,53,commandToHost.setHostname(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,56,public HostAction(HostAction ha) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,57,this.host = ha.host;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,58,this.roles = ha.roles;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,59,this.startTime = ha.startTime;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,60,this.lastAttemptTime = ha.lastAttemptTime;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,61,this.attemptCount = ha.attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,62,this.commandToHost = ha.commandToHost;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,65,public void addHostRoleCommand(HostRoleCommand cmd) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,66,roles.add(cmd);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,69,public List<HostRoleCommand> getRoleCommands() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,70,return roles;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,73,public long getStartTime() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,74,return startTime;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,77,public long getLastAttemptTime() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,78,return this.lastAttemptTime;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,81,public void setLastAttemptTime(long t) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,82,this.lastAttemptTime = t;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,85,public void incrementAttemptCount() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,86,this.attemptCount ++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,89,public short getAttemptCount() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,90,return this.attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,93,public ExecutionCommand getCommandToHost() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,94,return this.commandToHost;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,97,public synchronized void setCommandId(long requestId, long stageId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,98,commandToHost.setCommandId(StageUtils.getActionId(requestId, stageId));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,101,public void setStartTime(long startTime) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostAction.java,102,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,31,import org.apache.ambari.server.agent.ExecutionCommand;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,887,private void createHostAction(Cluster cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,894,stage.addHostRoleExecutionCommand(scHost.getHostName(), Role.valueOf(scHost
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,895,.getServiceComponentName()), command,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,896,event, scHost.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,897,scHost.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,898,ExecutionCommand execCmd = stage.getExecutionCommandWrapper(scHost.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,899,scHost.getServiceComponentName()).getExecutionCommand();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,907,execCmd.setConfigurations(configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,910,StackId stackId = scHost.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,911,Map<String, List<RepositoryInfo>> repos = ambariMetaInfo.getRepository(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,912,stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,913,String repoInfo = "";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,914,if (!repos.containsKey(host.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,916,LOG.warn("Could not retrieve repo information for host"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,919,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,921,repoInfo = gson.toJson(repos.get(host.getOsType()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,924,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,925,LOG.debug("Sending repo information to agent"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,929,+ ", repoInfo=" + repoInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,932,Map<String, String> params = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,935,execCmd.setHostLevelParams(params);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,937,Map<String, String> roleParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,938,execCmd.setRoleParams(roleParams);
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,204,if ((rc1.equals(RoleCommand.START) && rc2.equals(RoleCommand.EXECUTE)) ||
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,205,(rc2.equals(RoleCommand.START) && rc1.equals(RoleCommand.EXECUTE))) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,22,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,203,public static String getHostsToDecommission(List<String> hosts) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,204,StringBuilder builder = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,205,builder.append("[");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,206,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,207,for (String host : hosts) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,208,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,209,builder.append(",");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,211,first = false;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,213,builder.append("'");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,214,builder.append(host);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,215,builder.append("'");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,217,return builder.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestImpl.java,87,return m_mapTemporalInfo.get(id);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,302,Set<Resource> keepers = resources;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,304,for (PropertyProvider propertyProvider : propertyProviders.get(type)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,305,if (providesRequestProperties(propertyProvider, request, predicate)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,306,keepers = propertyProvider.populateResources(keepers, request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,309,return keepers;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,127,public String getDisksInfo() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,131,public void setDisksInfo(String disksInfo) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,132,this.disksInfo = disksInfo;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,223,if (disksInfo != null ? !disksInfo.equals(that.disksInfo) : that.disksInfo != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,244,result = 31 * result + (disksInfo != null ? disksInfo.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,729,return gson.<List<DiskInfo>>fromJson(
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,730,hostEntity.getDisksInfo(), diskInfoType);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,740,hostEntity.setDisksInfo(gson.toJson(disksInfo, diskInfoType));
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,741,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstance.java,36,public void setIds(Map<Resource.Type, String> mapIds);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstance.java,43,public Map<Resource.Type, String> getIds();
ambari-server/src/main/java/org/apache/ambari/server/api/services/persistence/PersistenceManagerImpl.java,55,Map<Resource.Type, String> mapResourceIds = resource.getIds();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,34,import org.apache.ambari.server.controller.utilities.PredicateHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,102,final ClusterRequest clusterRequest = getRequest(PredicateHelper.getProperties(predicate));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,109,return getManagementController().getClusters(Collections.singleton(clusterRequest));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,32,import org.apache.ambari.server.controller.utilities.PredicateHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,36,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,95,final Map<String, Object> predicateProperties = PredicateHelper.getProperties(predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,97,String clusterName = (String) predicateProperties.get(TASK_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,98,Long   request_id  = new Long((String) predicateProperties.get(TASK_REQUEST_ID_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,102,Set<TaskStatusResponse> responses = getResources(new Command<Set<TaskStatusResponse>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,104,public Set<TaskStatusResponse> invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,105,return getManagementController().getTaskStatus(Collections.singleton(getRequest(predicateProperties)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,109,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,110,LOG.debug("Printing size of responses " + responses.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,111,for (TaskStatusResponse response : responses) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,112,LOG.debug("Printing response from management controller "
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,113,+ response.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,117,Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,118,for (TaskStatusResponse response : responses) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,119,Resource resource = new ResourceImpl(Resource.Type.Task);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,121,setResourceProperty(resource, TASK_CLUSTER_NAME_PROPERTY_ID, clusterName, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,122,setResourceProperty(resource, TASK_REQUEST_ID_PROPERTY_ID, request_id, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,123,setResourceProperty(resource, TASK_ID_PROPERTY_ID, response.getTaskId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,124,setResourceProperty(resource, TASK_STAGE_ID_PROPERTY_ID, response.getStageId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,125,setResourceProperty(resource, TASK_HOST_NAME_PROPERTY_ID, response.getHostName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,126,setResourceProperty(resource, TASK_ROLE_PROPERTY_ID, response.getRole(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,127,setResourceProperty(resource, TASK_COMMAND_PROPERTY_ID, response.getCommand(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,128,setResourceProperty(resource, TASK_STATUS_PROPERTY_ID, response.getStatus(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,129,setResourceProperty(resource, TASK_EXIT_CODE_PROPERTY_ID, response.getExitCode(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,130,setResourceProperty(resource, TASK_STDERR_PROPERTY_ID, response.getStderr(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,131,setResourceProperty(resource, TASK_STOUT_PROPERTY_ID, response.getStdout(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,132,setResourceProperty(resource, TASK_START_TIME_PROPERTY_ID, response.getStartTime(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,133,setResourceProperty(resource, TASK_ATTEMPT_CNT_PROPERTY_ID, response.getAttemptCount(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,134,resources.add(resource);
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentResource.java,78,throws WebApplicationException, AmbariException, InvalidStateTransitionException {
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentResource.java,81,RegistrationResponse response = hh.handleRegistration(message);
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/BaseManagementHandler.java,85,TreeNode<Resource> resourcesNode = tree.addChild(null, "resources");
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,100,Schema schema = getClusterController().getSchema(r.getType());
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,101,Object id = r.getPropertyValue(schema.getKeyPropertyId(r.getType()));
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,111,href = "true".equals(parent.getProperty("isCollection")) ?
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,20,package org.apache.ambari.server.api.resources;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,22,import org.apache.ambari.server.api.query.Query;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,24,import org.apache.ambari.server.controller.spi.ClusterController;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,25,import org.apache.ambari.server.controller.spi.Resource;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,28,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,29,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,30,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,45,private Map<Resource.Type, String> m_mapResourceIds = new HashMap<Resource.Type, String>();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,51,private ResourceDefinition m_resourceDefinition;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,75,m_resourceDefinition = resourceDefinition;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,79,setIds(mapIds);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,83,public void setIds(Map<Resource.Type, String> mapIds) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,84,m_mapResourceIds.putAll(mapIds);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,88,public Map<Resource.Type, String> getIds() {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,89,return new HashMap<Resource.Type, String>((m_mapResourceIds));
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,93,public Query getQuery() {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,98,public ResourceDefinition getResourceDefinition() {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,99,return m_resourceDefinition;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,279,String metrics  = getSetString(metricSet, 50);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,80,throws UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,81,SystemException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,82,NoSuchParentResourceException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,83,NoSuchResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,257,Iterable<Resource> resources = getResources(type, readRequest, predicate);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,135,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,136,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,137,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,139,ResourceInstanceImpl that = (ResourceInstanceImpl) o;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,141,return m_mapResourceIds.equals(that.m_mapResourceIds) &&
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,149,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,151,result = 31 * result + m_mapResourceIds.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,152,result = 31 * result + m_resourceDefinition.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,153,result = 31 * result + (m_mapSubResources != null ? m_mapSubResources.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,154,return result;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,85,ResourceProvider provider = ensureResourceProvider(type);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,86,ensurePropertyProviders(type);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,298,private Set<Resource> populateResources(Resource.Type type,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,299,Set<Resource> resources,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,300,Request request,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,301,Predicate predicate) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ClusterController.java,46,public Iterable<Resource> getResources(Resource.Type type,
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ClusterController.java,47,Request request,
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ClusterController.java,49,throws UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ClusterController.java,50,SystemException,
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ClusterController.java,51,NoSuchResourceException,
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ClusterController.java,52,NoSuchParentResourceException;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,182,LOG.info(report.getRole() + " is an action - skip component lookup");
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentResource.java,111,LOG.info("Error in HeartBeat", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,72,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,153,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,282,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,329,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,506,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,508,if (requests.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,509,LOG.warn("Received an empty requests set");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,510,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,513,Set<String> duplicates = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,514,Set<String> unknowns = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,515,Set<String> allHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,516,for (HostRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,517,if (request.getHostname() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,518,|| request.getHostname().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,519,throw new IllegalArgumentException("Invalid arguments, hostname"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,520,+ " cannot be null");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,523,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,524,LOG.debug("Received a createHost request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,526,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,529,if (allHosts.contains(request.getHostname())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,531,duplicates.add(request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,532,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,534,allHosts.add(request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,536,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,538,clusters.getHost(request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,540,catch (HostNotFoundException e) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,541,unknowns.add(request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,542,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,545,if (request.getClusterName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,546,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,548,clusters.getCluster(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,550,throw new ParentObjectNotFoundException("Attempted to add a host to a cluster which doesn't exist: "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,551,+ " clusterName=" + request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,556,if (!duplicates.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,557,StringBuilder names = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,558,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,559,for (String hName : duplicates) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,560,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,561,names.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,563,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,564,names.append(hName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,566,throw new IllegalArgumentException("Invalid request contains"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,567,+ " duplicate hostnames"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,568,+ ", hostnames=" + names.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,571,if (!unknowns.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,572,StringBuilder names = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,573,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,574,for (String hName : unknowns) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,575,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,576,names.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,578,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,579,names.append(hName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,582,throw new IllegalArgumentException("Attempted to add unknown hosts to a cluster.  " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,586,for (HostRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1118,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1123,List<Host>        hosts;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1124,Set<HostResponse> response = new HashSet<HostResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1125,Cluster           cluster  = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1127,String clusterName = request.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1128,String hostName    = request.getHostname();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1130,if (clusterName != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1132,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1133,cluster = clusters.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1135,throw new ParentObjectNotFoundException("Parent Cluster resource doesn't exist", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1139,if (hostName == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1140,hosts = clusters.getHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1142,hosts = new ArrayList<Host>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1146,for (Host h : hosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1147,if (clusterName != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1148,if (clusters.getClustersForHost(h.getHostName()).contains(cluster)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1149,HostResponse r = h.convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1150,r.setClusterName(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1151,response.add(r);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1156,HostResponse r = h.convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1158,Set<Cluster> clustersForHost = clusters.getClustersForHost(h.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1160,if (clustersForHost != null && clustersForHost.size() != 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1161,r.setClusterName(clustersForHost.iterator().next().getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1163,response.add(r);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1166,return response;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1867,if (requests.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1868,LOG.warn("Received an empty requests set");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1892,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2920,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2921,Set<HostResponse> response = new HashSet<HostResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2922,for (HostRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2923,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2924,response.addAll(getHosts(request));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2926,if (requests.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2929,throw e;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2933,return response;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,107,getManagementController().createHosts(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,135,return getManagementController().getHosts(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,173,response.getHealthStatus().getHealthStatus().toString(),requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,197,getManagementController().updateHosts(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,219,getManagementController().deleteHosts(requests);
ambari-server/src/main/java/org/apache/ambari/server/state/HostHealthStatus.java,50,UNKNOWN,
ambari-server/src/main/java/org/apache/ambari/server/state/HostHealthStatus.java,51,HEALTHY,
ambari-server/src/main/java/org/apache/ambari/server/state/HostHealthStatus.java,52,UNHEALTHY
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,102,String name = node.getName();
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,103,Resource r = node.getObject();
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,105,if (r == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,106,if (name != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,107,if (node.getParent() == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,108,m_generator.writeStartObject();
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,109,writeHref(node);
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,111,m_generator.writeArrayFieldStart(name);
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,124,if (r == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,125,if (name != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,126,m_generator.writeEndArray();
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,127,if (node.getParent() == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,128,m_generator.writeEndObject();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestStatusImpl.java,35,this.requestResource = requestResource;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestStatusImpl.java,40,return Collections.emptySet();  // TODO : handle in M4
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,62,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,140,public Set<ServiceComponentResponse> getComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,141,Set<ServiceComponentRequest> requests) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,269,public RequestStatusResponse updateComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,340,public RequestStatusResponse deleteComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,341,Set<ServiceComponentRequest> requests) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,326,public synchronized void createComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,327,Set<ServiceComponentRequest> requests) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,329,if (requests.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,330,LOG.warn("Received an empty requests set");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,331,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,335,Map<String, Map<String, Set<String>>> componentNames =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,336,new HashMap<String, Map<String,Set<String>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,339,for (ServiceComponentRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,340,if (request.getClusterName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,342,|| request.getComponentName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,343,|| request.getComponentName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,344,throw new IllegalArgumentException("Invalid arguments"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,345,+ ", clustername and componentname should be"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,346,+ " non-null and non-empty when trying to create a"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,347,+ " component");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,350,Cluster cluster;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,351,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,352,cluster = clusters.getCluster(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,354,throw new ParentObjectNotFoundException(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,358,if (request.getServiceName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,359,|| request.getServiceName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,360,StackId stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,361,String serviceName =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,362,ambariMetaInfo.getComponentToService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,363,stackId.getStackVersion(), request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,364,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,365,LOG.debug("Looking up service name for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,367,+ ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,370,if (serviceName == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,371,|| serviceName.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,372,throw new AmbariException("Could not find service for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,375,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,377,request.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,380,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,381,LOG.debug("Received a createComponent request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,385,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,388,if (!componentNames.containsKey(request.getClusterName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,389,componentNames.put(request.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,390,new HashMap<String, Set<String>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,393,.containsKey(request.getServiceName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,394,componentNames.get(request.getClusterName()).put(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,395,request.getServiceName(), new HashSet<String>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,398,.get(request.getServiceName()).contains(request.getComponentName())){
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,400,duplicates.add("[clusterName=" + request.getClusterName() + ", serviceName=" + request.getServiceName() +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,402,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,405,.get(request.getServiceName()).add(request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,407,if (request.getDesiredState() != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,408,&& !request.getDesiredState().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,409,State state = State.valueOf(request.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,411,|| state != State.INIT) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,412,throw new IllegalArgumentException("Invalid desired state"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,413,+ " only INIT state allowed during creation"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,414,+ ", providedDesiredState=" + request.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,418,Service s;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,419,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,420,s = cluster.getService(request.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,422,throw new ParentObjectNotFoundException(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,425,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,426,ServiceComponent sc = s.getServiceComponent(request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,427,if (sc != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,429,duplicates.add("[clusterName=" + request.getClusterName() + ", serviceName=" + request.getServiceName() +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,431,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,437,StackId stackId = s.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,438,if (!ambariMetaInfo.isValidServiceComponent(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,439,stackId.getStackVersion(), s.getName(), request.getComponentName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,440,throw new IllegalArgumentException("Unsupported or invalid component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,441,+ " in stack"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,445,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,450,if (componentNames.size() != 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,451,throw new IllegalArgumentException("Invalid arguments, updates allowed"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,452,+ "on only one cluster at a time");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,456,if (!duplicates.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,457,StringBuilder names = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,458,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,459,for (String cName : duplicates) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,460,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,461,names.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,463,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,464,names.append(cName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,466,String msg;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,467,if (duplicates.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,468,msg = "Attempted to create a component which already exists: ";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,470,msg = "Attempted to create components which already exist: ";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,472,throw new DuplicateResourceException(msg + names.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,477,for (ServiceComponentRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,478,Cluster cluster = clusters.getCluster(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,479,Service s = cluster.getService(request.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,480,ServiceComponent sc = serviceComponentFactory.createNew(s,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,481,request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,482,sc.setDesiredStackVersion(s.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,484,if (request.getDesiredState() != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,485,&& !request.getDesiredState().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,486,State state = State.valueOf(request.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,487,sc.setDesiredState(state);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,489,sc.setDesiredState(s.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,493,Map<String, Config> configs = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,494,if (request.getConfigVersions() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,497,sc.updateDesiredConfigs(configs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,498,s.addServiceComponent(sc);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,499,sc.persist();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1032,private synchronized Set<ServiceComponentResponse> getComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1033,ServiceComponentRequest request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1034,if (request.getClusterName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1035,|| request.getClusterName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1036,throw new IllegalArgumentException("Invalid arguments, cluster name"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1037,+ " should be non-null");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1040,final Cluster cluster;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1041,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1042,cluster = clusters.getCluster(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1044,throw new ParentObjectNotFoundException("Parent Cluster resource doesn't exist", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1047,Set<ServiceComponentResponse> response =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1048,new HashSet<ServiceComponentResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1050,if (request.getComponentName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1051,if (request.getServiceName() == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1052,StackId stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1053,String serviceName =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1054,ambariMetaInfo.getComponentToService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1055,stackId.getStackVersion(), request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1056,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1057,LOG.debug("Looking up service name for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1059,+ ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1061,if (serviceName == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1062,|| serviceName.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1063,throw new AmbariException("Could not find service for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1066,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1068,request.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1071,final Service s;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1072,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1073,s = cluster.getService(request.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1075,throw new ParentObjectNotFoundException("Parent Service resource doesn't exist", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1078,ServiceComponent sc = s.getServiceComponent(request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1079,response.add(sc.convertToResponse());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1080,return response;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1083,boolean checkDesiredState = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1084,State desiredStateToCheck = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1085,if (request.getDesiredState() != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1086,&& !request.getDesiredState().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1087,desiredStateToCheck = State.valueOf(request.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1088,if (!desiredStateToCheck.isValidDesiredState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1089,throw new IllegalArgumentException("Invalid arguments, invalid desired"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1090,+ " state, desiredState=" + desiredStateToCheck);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1092,checkDesiredState = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1095,Set<Service> services = new HashSet<Service>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1096,if (request.getServiceName() != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1097,&& !request.getServiceName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1098,services.add(cluster.getService(request.getServiceName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1100,services.addAll(cluster.getServices().values());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1103,for (Service s : services) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1105,for (ServiceComponent sc : s.getServiceComponents().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1106,if (checkDesiredState
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1107,&& (desiredStateToCheck != sc.getDesiredState())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1109,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1111,response.add(sc.convertToResponse());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1114,return response;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1869,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1874,Map<State, List<ServiceComponent>> changedComps =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1875,new HashMap<State, List<ServiceComponent>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1876,Map<String, Map<State, List<ServiceComponentHost>>> changedScHosts =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1877,new HashMap<String, Map<State, List<ServiceComponentHost>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1879,Set<String> clusterNames = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1881,Set<State> seenNewStates = new HashSet<State>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1884,if (request.getClusterName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1887,|| request.getServiceName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1899,clusterNames.add(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1901,if (clusterNames.size() > 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1902,throw new IllegalArgumentException("Updates to multiple clusters is not"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1903,+ " supported");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1912,throw new IllegalArgumentException("Invalid request contains duplicate"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1918,Service s = cluster.getService(request.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1920,State newState = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1921,if (request.getDesiredState() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1922,newState = State.valueOf(request.getDesiredState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1923,if (!newState.isValidDesiredState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1924,throw new IllegalArgumentException("Invalid arguments, invalid"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1929,if (request.getConfigVersions() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1932,for (Entry<String,String> entry :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1933,request.getConfigVersions().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1942,entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1943,if (null == config) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1946,+ " invalid configs"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1951,+ ", invalidConfigTag=" + entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1957,if (newState == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1958,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1962,+ ", newDesiredState=null");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1964,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1967,seenNewStates.add(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1971,throw new AmbariException("Invalid transition for"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1977,+ ", newDesiredState=" + newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2300,if (newState == oldSchState) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2302,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2303,LOG.debug("Ignoring ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2308,+ ", currentState=" + oldSchState
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2309,+ ", newDesiredState=" + newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2311,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2315,throw new AmbariException("Invalid transition for"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2316,+ " servicecomponenthost"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2322,+ ", currentState=" + oldSchState
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2323,+ ", newDesiredState=" + newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2325,if (!changedScHosts.containsKey(sc.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2326,changedScHosts.put(sc.getName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2327,new HashMap<State, List<ServiceComponentHost>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2329,if (!changedScHosts.get(sc.getName()).containsKey(newState)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2330,changedScHosts.get(sc.getName()).put(newState,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2331,new ArrayList<ServiceComponentHost>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2333,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2334,LOG.debug("Handling update to ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2339,+ ", currentState=" + oldSchState
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2340,+ ", newDesiredState=" + newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2342,changedScHosts.get(sc.getName()).get(newState).add(sch);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2346,if (seenNewStates.size() > 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2348,throw new IllegalArgumentException("Cannot handle different desired"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2349,+ " state changes for a set of service components at the same time");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2357,for (ServiceComponentRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2358,Cluster cluster = clusters.getCluster(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2359,Service s = cluster.getService(request.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2360,ServiceComponent sc = s.getServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2361,request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2362,if (request.getConfigVersions() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2363,Map<String, Config> updated = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2365,for (Entry<String,String> entry :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2366,request.getConfigVersions().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2368,entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2369,updated.put(config.getType(), config);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2372,if (!updated.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2373,sc.updateDesiredConfigs(updated);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2374,for (ServiceComponentHost sch :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2375,sc.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2376,sch.deleteDesiredConfigs(updated.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2377,sch.persist();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2379,sc.persist();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2384,Cluster cluster = clusters.getCluster(clusterNames.iterator().next());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2729,public RequestStatusResponse deleteComponents(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2730,Set<ServiceComponentRequest> request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2731,throw new AmbariException("Delete components not supported");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2905,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2906,response.addAll(getComponents(request));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2908,if (requests.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2911,throw e;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2915,return response;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,43,protected static final String COMPONENT_CLUSTER_NAME_PROPERTY_ID    = PropertyHelper.getPropertyId("ServiceComponentInfo", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,44,protected static final String COMPONENT_SERVICE_NAME_PROPERTY_ID    = PropertyHelper.getPropertyId("ServiceComponentInfo", "service_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,45,protected static final String COMPONENT_COMPONENT_NAME_PROPERTY_ID  = PropertyHelper.getPropertyId("ServiceComponentInfo", "component_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,46,protected static final String COMPONENT_STATE_PROPERTY_ID           = PropertyHelper.getPropertyId("ServiceComponentInfo", "state");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,47,protected static final String COMPONENT_DESIRED_CONFIGS_PROPERTY_ID = PropertyHelper.getPropertyId("ServiceComponentInfo", "desired_configs");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,88,getManagementController().createComponents(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,111,return getManagementController().getComponents(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,169,final Set<ServiceComponentRequest> requests = new HashSet<ServiceComponentRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,170,for (Map<String, Object> propertyMap : getPropertyMaps(predicate)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,171,requests.add(getRequest(propertyMap));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,177,return getManagementController().deleteComponents(requests);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,40,private static final Logger log = LoggerFactory.getLogger(AmbariLdapAuthenticationProvider.class);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,60,return loadLdapAuthenticationProvider().authenticate(authentication);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,77,private LdapAuthenticationProvider loadLdapAuthenticationProvider() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,79,log.info("LDAP Properties changed - rebuilding Context");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,91,log.error("LDAP Context Source not loaded ", e);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,117,private boolean isLdapEnabled() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,129,log.info("Reloading properties");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3191,configurations.put(config.getType(), config.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,55,serviceActions.put("hdfs"       , Arrays.asList(Role.HDFS_SERVICE_CHECK.toString()));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,74,for (Stage s: stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,25,import javax.xml.bind.JAXBException;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,26,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,47,return executionCommand;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,92,for (HostEntity hostEntity : hostDAO.findByStage(stageEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,93,List<HostRoleCommandEntity> commands = hostRoleCommandDAO.findSortedCommandsByStageAndHost(stageEntity, hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,94,commandsToSend.put(hostEntity.getHostName(), new ArrayList<ExecutionCommandWrapper>());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,95,hostRoleCommands.put(hostEntity.getHostName(), new TreeMap<String, HostRoleCommand>());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,96,for (HostRoleCommandEntity command : commands) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,97,HostRoleCommand hostRoleCommand = hostRoleCommandFactory.createExisting(command);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,98,hostRoleCommands.get(hostEntity.getHostName()).put(hostRoleCommand.getRole().toString(), hostRoleCommand);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,99,commandsToSend.get(hostEntity.getHostName()).add(hostRoleCommand.getExecutionCommandWrapper());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,36,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,37,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,112,Query query = entityManagerProvider.get().createQuery("UPDATE HostRoleCommandEntity command " +
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,116,return daoUtils.executeUpdate(query, target, requestId, sources);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,73,public ActionDBAccessorImpl(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,119,Role role) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,173,throw new RuntimeException("Host '"+hostRoleCommandEntity.getHostName()+"' doesn't exists in database");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,203,long stageId, String role, CommandReport report) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,255,for (HostRoleCommandEntity hostRoleCommandEntity : hostRoleCommandDAO.findByRequest(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,256,tasks.add(hostRoleCommandFactory.createExisting(hostRoleCommandEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,258,return tasks;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,266,List<HostRoleCommand> tasks = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,267,for (HostRoleCommandEntity hostRoleCommandEntity : hostRoleCommandDAO.findByRequestIds(requestIds)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,268,tasks.add(hostRoleCommandFactory.createExisting(hostRoleCommandEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,270,return tasks;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,276,List<HostRoleCommand> tasks = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,277,for (HostRoleCommandEntity hostRoleCommandEntity : hostRoleCommandDAO.findByRequestAndTaskIds(requestIds, taskIds)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,278,tasks.add(hostRoleCommandFactory.createExisting(hostRoleCommandEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,280,return tasks;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,296,for (HostRoleCommandEntity commandEntity : hostRoleCommandDAO.findByPKs(taskIds)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,297,commands.add(hostRoleCommandFactory.createExisting(commandEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,317,HostRoleCommandEntity commandEntity = hostRoleCommandDAO.findByPK((int)taskId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,329,statuses.addAll( Arrays.asList(HostRoleStatus.PENDING,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,333,statuses.addAll( Arrays.asList(HostRoleStatus.PENDING,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,338,statuses.addAll( Arrays.asList(HostRoleStatus.ABORTED,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,29,import com.google.inject.assistedinject.Assisted;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,30,import com.google.inject.assistedinject.AssistedInject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,68,public HostRoleCommand(@Assisted HostRoleCommandEntity hostRoleCommandEntity, Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,83,executionCommandWrapper = new ExecutionCommandWrapper(new String(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,84,hostRoleCommandEntity
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,86,));
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,115,install(new FactoryModuleBuilder().build(HostRoleCommandFactory.class));
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,75,+ WorkflowFields.STARTTIME + ") as " + SummaryFields.youngest + ", max(" + WorkflowFields.STARTTIME + ") as " + SummaryFields.oldest + " FROM "
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,144,field = WorkflowFields.INPUTBYTES;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,145,break;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,147,field = WorkflowFields.OUTPUTBYTES;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,148,break;
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/hadoop/mapreduce/jobhistory/MapReduceJobHistoryUpdater.java,166,WORKFLOW_TABLE +
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/hadoop/mapreduce/jobhistory/MapReduceJobHistoryUpdater.java,178,WORKFLOW_TABLE +
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/hadoop/mapreduce/jobhistory/MapReduceJobHistoryUpdater.java,185,JOB_TABLE +
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/hadoop/mapreduce/jobhistory/MapReduceJobHistoryUpdater.java,729,workflowUpdateTimePS.setString(6, workflowContext.getWorkflowId());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,30,import org.springframework.security.ldap.DefaultSpringSecurityContextSource;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,80,DefaultSpringSecurityContextSource springSecurityContextSource =
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,81,new DefaultSpringSecurityContextSource(ldapServerProperties.get().getLdapUrls(), ldapServerProperties.get().getBaseDN());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,95,int lastPathSep = absProperty.lastIndexOf(EXTERNAL_PATH_SEP);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,106,query.setMaxResults(20);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,888,Stage stage, ServiceComponentHost scHost,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,889,Map<String, Map<String, String>> configurations,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,890,RoleCommand command,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,892,ServiceComponentHostEvent event) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,902,execCmd.setClusterHostInfo(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,940,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2022,sch.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2301,sch.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2594,sch.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,22,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,23,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,25,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,26,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,27,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,29,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,30,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2493,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2499,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,226,LOG.debug(command);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,22,import org.apache.ambari.eventdb.model.DataTable;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,24,import org.apache.ambari.eventdb.model.TaskAttempt;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,25,import org.apache.ambari.eventdb.model.WorkflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/DBConnector.java,26,import org.apache.ambari.eventdb.model.Workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,30,import org.apache.ambari.eventdb.model.DataTable;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,37,import org.apache.ambari.eventdb.model.TaskAttempt;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,39,import org.apache.ambari.eventdb.model.WorkflowContext;
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,40,import org.apache.ambari.eventdb.model.Workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/model/Workflows.java,50,WORKFLOWCONTEXT;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,37,import org.apache.ambari.eventdb.model.DataTable;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,38,import org.apache.ambari.eventdb.model.Jobs;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,40,import org.apache.ambari.eventdb.model.TaskAttempt;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,41,import org.apache.ambari.eventdb.model.TaskData;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,43,import org.apache.ambari.eventdb.model.TaskLocalityData;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,45,import org.apache.ambari.eventdb.model.Workflows;
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,140,case 4: // numJobsTotal
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,143,case 5: // inputBytes
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,146,case 6: // outputBytes
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,149,case 7: // duration
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,152,case 8: // startTime
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,104,LOG.warn("Hearbeat lost from host "+host);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,114,if (timeSpentInState + 5*threadWakeupInterval < now) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,129,if (type == Resource.Type.Cluster ||
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,130,type == Resource.Type.Host ||
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,176,resourceProviders.put( type , resourceProvider);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,191,providers.add(new GangliaReportPropertyProvider(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,198,providers.add(new GangliaHostPropertyProvider(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,199,PropertyHelper.getGangliaPropertyIds(type),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,207,providers.add(new JMXPropertyProvider(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,208,PropertyHelper.getJMXPropertyIds(type),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,215,providers.add(new GangliaComponentPropertyProvider(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,216,PropertyHelper.getGangliaPropertyIds(type),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,223,providers.add(new JMXPropertyProvider(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,224,PropertyHelper.getJMXPropertyIds(type),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,231,providers.add(new GangliaHostComponentPropertyProvider(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,232,PropertyHelper.getGangliaPropertyIds(type),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,264,private void initProviderMaps() throws SystemException{
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,62,public static Map<String, Map<String, PropertyInfo>> getGangliaPropertyIds(Resource.Type resourceType) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,63,return GANGLIA_PROPERTY_IDS.get(resourceType);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,66,public static Map<String, Map<String, PropertyInfo>> getJMXPropertyIds(Resource.Type resourceType) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,67,return JMX_PROPERTY_IDS.get(resourceType);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,194,LOG.info("Pass phrase Server " + passphraseSrvr);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,195,LOG.info("Pass phrase Agent " + passphraseAgent);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,224,String command = MessageFormat.format(SIGN_AGENT_CRT,scriptArgs);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,229,if(commandExitCode != 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,141,final ClusterRequest clusterRequest = getRequest(propertyMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,145,public RequestStatusResponse invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,74,public static final int AGENT_ONE_WAY_AUTH = 8440;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,75,public static final int AGENT_TWO_WAY_AUTH = 8441;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,178,sslConnectorTwoWay.setPort(AGENT_TWO_WAY_AUTH);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,220,sslConnectorOneWay.setPort(AGENT_ONE_WAY_AUTH);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,27,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,32,import org.apache.ambari.server.controller.AmbariServer;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,60,UserEntity user = null;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,67,UserEntity newUser = new UserEntity();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,68,newUser.setLdapUser(true);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,69,newUser.setUserName(username);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java,25,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java,26,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java,27,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java,39,List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>(roleEntities.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,94,+ " for request type " + type.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,102,return new ResourceIterable(resources, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,31,import org.apache.ambari.server.api.services.*;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,53,private final AmbariMetaInfo ambariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,58,ambariMetaInfo = new AmbariMetaInfo(configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,64,ambariMetaInfo = new AmbariMetaInfo(configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,74,bind(AmbariMetaInfo.class).toInstance(ambariMetaInfo);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,140,long now = System.currentTimeMillis();
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,71,connection.close();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,290,LOG.info("********* Initializing Meta Info **********");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,291,ambariMetaInfo.init();
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,35,final private Connection connection;
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,38,public DatabaseStore(String driver,
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,39,String database, String user, String password,
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,51,try {
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,52,this.connection =
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,53,DriverManager.getConnection(this.database, this.user, this.password);
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,55,throw new IOException("Can't connect to database " + this.database, sqle);
contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java,59,this.updateProvider.init(this.connection);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,26,import org.apache.ambari.server.controller.utilities.ClusterControllerHelper;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,221,Object[] scriptArgs = {srvrKstrDir,agentCrtReqName,agentCrtName,
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,222,srvrCrtPass,srvrKeyName,srvrCrtName};
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,236,File agentCrtFile = new File(srvrKstrDir + File.separator + agentCrtName);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,41,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,68,private Map<String, Long> hostResponseIds = new HashMap<String, Long>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,69,private Map<String, HeartBeatResponse> hostResponses = new HashMap<String, HeartBeatResponse>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,96,LOG.error("CurrentResponseId unknown - send register command");
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,53,if (serReq.getLocalPort() == AmbariServer.AGENT_ONE_WAY_AUTH) {
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,58,LOG.warn("This request is not allowed on this port");
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,62,else
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,71,try {
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,73,boolean isMatch = Pattern.matches("https://[A-z]*:[0-9]*/cert/ca[/]*", reqUrl);
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,76,return true;
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,78,isMatch = Pattern.matches("https://[A-z]*:[0-9]*/certs/[A-z0-9-.]*", reqUrl);
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,81,return true;
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,83,isMatch = Pattern.matches("https://[A-z]*:[0-9]*/resources/.*", reqUrl);
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,86,return true;
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,90,LOG.warn("Request " + reqUrl + " doesn't match any pattern.");
ambari-server/src/main/java/org/apache/ambari/server/security/SecurityFilter.java,91,return false;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,435,return persisted;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,149,return cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,369,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,370,sb.append(" , ");
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,372,first = false;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,394,return persisted;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,500,+ ", componentName=" + componentName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,71,private Map<String, Service> services = null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,139,if (services == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,140,services = new TreeMap<String, Service>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,141,if (!clusterEntity.getClusterServiceEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,142,for (ClusterServiceEntity serviceEntity : clusterEntity.getClusterServiceEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,143,services.put(serviceEntity.getServiceName(), serviceFactory.createExisting(this, serviceEntity));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,169,return clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,171,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,179,String oldName = clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,180,clusterEntity.setClusterName(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,181,clusterDAO.merge(clusterEntity); //RollbackException possibility if UNIQUE constraint violated
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,182,clusters.updateClusterName(oldName, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,184,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,468,+ ", serviceName=" + service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,471,writeLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,472,setLastOpStartTime(-1);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,473,setLastOpLastUpdateTime(-1);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,474,setLastOpEndTime(-1);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,476,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,477,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,484,writeLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,485,switch (eventType) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,486,case HOST_SVCCOMP_INSTALL:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,487,case HOST_SVCCOMP_START:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,488,case HOST_SVCCOMP_STOP:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,489,case HOST_SVCCOMP_UNINSTALL:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,490,case HOST_SVCCOMP_WIPEOUT:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,491,case HOST_SVCCOMP_OP_RESTART:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,492,resetLastOpInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,493,setLastOpStartTime(time);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,494,break;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,495,case HOST_SVCCOMP_OP_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,496,case HOST_SVCCOMP_OP_SUCCEEDED:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,497,setLastOpLastUpdateTime(time);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,498,setLastOpEndTime(time);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,499,break;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,500,case HOST_SVCCOMP_OP_IN_PROGRESS:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,501,setLastOpLastUpdateTime(time);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,502,break;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,505,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,506,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,601,return stateMachine.getCurrentState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,603,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,604,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,612,stateMachine.setCurrentState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,613,stateEntity.setCurrentState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,614,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,616,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,617,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,632,writeLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,634,stateMachine.doTransition(event.getType(), event);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,635,stateEntity.setCurrentState(stateMachine.getCurrentState());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,636,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,639,LOG.error("Can't handle ServiceComponentHostEvent event at"
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,640,+ " current state"
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,643,+ ", currentState=" + oldState
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,645,+ ", event=" + event);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,646,throw e;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,649,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,650,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,681,return lastOpStartTime;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,683,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,684,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,694,this.lastOpStartTime = lastOpStartTime;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,696,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,697,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,707,return lastOpEndTime;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,709,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,710,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,720,this.lastOpEndTime = lastOpEndTime;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,722,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,723,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,733,return lastOpLastUpdateTime;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,735,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,736,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,746,this.lastOpLastUpdateTime = lastOpLastUpdateTime;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,748,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,749,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,766,if (this.configs != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,767,return Collections.unmodifiableMap(configs);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,769,return new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,772,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,773,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,782,Map<String, Config> map = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,783,Cluster cluster = clusters.getClusterById(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,784,for (Entry<String, String> entry : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,786,entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,787,if (null != config) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,788,map.put(entry.getKey(), config);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,791,return map;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,793,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,794,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,803,Set<String> deletedTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,804,for (String type : this.configs.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,805,if (!configs.containsKey(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,806,deletedTypes.add(type);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,810,long now = Long.valueOf(new java.util.Date().getTime());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,812,for (Entry<String,String> entry : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,814,boolean contains = false;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,815,for (HostComponentConfigMappingEntity mappingEntity : stateEntity.getHostComponentConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,816,if (entry.getKey().equals(mappingEntity.getConfigType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,818,LOG.debug("Updating live config to ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,826,contains = true;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,827,mappingEntity.setVersionTag(entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,828,mappingEntity.setTimestamp(now);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,829,break;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,833,if (!contains) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,834,HostComponentConfigMappingEntity newEntity =
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,835,new HostComponentConfigMappingEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,836,newEntity.setClusterId(stateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,837,newEntity.setServiceName(stateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,838,newEntity.setComponentName(stateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,839,newEntity.setHostName(stateEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,840,newEntity.setConfigType(entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,841,newEntity.setVersionTag(entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,842,newEntity.setTimestamp(now);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,844,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,845,LOG.debug("Adding new live config to ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,851,+ ", configVersionTag=" + entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,853,stateEntity.getHostComponentConfigMappingEntities().add(newEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,854,newEntity.setHostComponentStateEntity(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,859,if (!deletedTypes.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,860,List<HostComponentConfigMappingEntity> deleteEntities =
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,861,hostComponentConfigMappingDAO.findByHostComponentAndType(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,862,stateEntity.getClusterId(), stateEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,863,stateEntity.getComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,864,stateEntity.getHostName(), deletedTypes);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,865,for (HostComponentConfigMappingEntity deleteEntity : deleteEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,866,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,867,LOG.debug("Deleting live config to ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,873,+ ", configVersionTag=" + deleteEntity.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,875,stateEntity.getHostComponentConfigMappingEntities().remove(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,876,deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,877,if (persisted) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,878,hostComponentConfigMappingDAO.remove(deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,882,this.configs = configs;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,883,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,885,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,893,return gson.fromJson(stateEntity.getCurrentStackVersion(), StackId.class);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,895,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,896,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,904,stateEntity.setCurrentStackVersion(gson.toJson(stackVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,905,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,907,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,908,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,917,return desiredStateEntity.getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,919,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,920,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,928,desiredStateEntity.setDesiredState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,929,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,931,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,932,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,940,Map<String, String> fullDesiredConfigVersions =
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,941,new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,942,Map<String, Config> desiredConfs = getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,943,for (Config c : desiredConfs.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,944,fullDesiredConfigVersions.put(c.getType(), c.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,946,return fullDesiredConfigVersions;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,948,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,949,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,956,Map<String, Config> map = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,959,for (Entry<String, String> entry : desiredConfigs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,961,entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,962,if (null != config) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,963,map.put(entry.getKey(), config);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,967,catch (AmbariException e) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,969,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,971,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,972,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,975,Map<String, Config> compConfigs = serviceComponent.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,976,for (Entry<String, Config> entry : compConfigs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,977,if (!map.containsKey(entry.getKey())) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,978,map.put(entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,981,return Collections.unmodifiableMap(map);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,997,for (Entry<String,Config> entry : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,999,boolean contains = false;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1000,for (HostComponentDesiredConfigMappingEntity desiredConfigMappingEntity : desiredStateEntity.getHostComponentDesiredConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1001,if (entry.getKey().equals(desiredConfigMappingEntity.getConfigType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1002,contains = true;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1003,desiredConfigMappingEntity.setVersionTag(entry.getValue().getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1004,desiredConfigMappingEntity.setTimestamp(new Date().getTime());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1005,break;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1009,if (!contains) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1010,HostComponentDesiredConfigMappingEntity newEntity = new HostComponentDesiredConfigMappingEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1011,newEntity.setClusterId(desiredStateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1012,newEntity.setServiceName(desiredStateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1013,newEntity.setComponentName(desiredStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1014,newEntity.setHostName(desiredStateEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1015,newEntity.setConfigType(entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1016,newEntity.setVersionTag(entry.getValue().getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1017,newEntity.setTimestamp(new Date().getTime());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1018,newEntity.setHostComponentDesiredStateEntity(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1019,desiredStateEntity.getHostComponentDesiredConfigMappingEntities().add(newEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1022,this.desiredConfigs.put(entry.getKey(), entry.getValue().getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1053,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1055,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1056,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1064,return gson.fromJson(desiredStateEntity.getDesiredStackVersion(), StackId.class);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1066,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1067,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1075,desiredStateEntity.setDesiredStackVersion(gson.toJson(stackVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1076,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1078,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1079,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1087,ServiceComponentHostResponse r = new ServiceComponentHostResponse(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1088,serviceComponent.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1089,serviceComponent.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1090,serviceComponent.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1091,getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1092,configs,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1093,desiredConfigs,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1094,getState().toString(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1095,getStackVersion().getStackId(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1097,return r;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1099,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1100,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1121,+ " }");
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1123,finally {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1124,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1132,return persisted;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1134,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1142,if (!persisted) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1143,persistEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1144,refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1145,host.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1146,serviceComponent.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1147,persisted = true;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1149,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1152,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1222,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1231,for (String configType : configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1232,desiredConfigs.remove(configType);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1236,writeLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,19,package org.apache.ambari.server.api.query;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,21,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,22,import org.apache.ambari.server.api.services.ResultImpl;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,24,import org.apache.ambari.server.controller.utilities.ClusterControllerHelper;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,25,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,26,import org.apache.ambari.server.controller.predicate.AndPredicate;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,28,import org.apache.ambari.server.controller.predicate.EqualsPredicate;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,29,import org.apache.ambari.server.api.services.Result;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,30,import org.apache.ambari.server.controller.spi.*;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,31,import org.apache.ambari.server.api.util.TreeNode;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,32,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,33,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,35,import java.util.*;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,40,public class QueryImpl implements Query {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,45,private ResourceInstance m_resource;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,55,private Map<String, TemporalInfo> m_mapPropertyTemporalInfo = new HashMap<String, TemporalInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,60,private Map<String, TemporalInfo> m_mapCategoryTemporalInfo = new HashMap<String, TemporalInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,75,private Map<String, ResourceInstance> m_mapSubResources = new HashMap<String, ResourceInstance>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,80,private Predicate m_userPredicate;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,85,private final static Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,86,LoggerFactory.getLogger(QueryImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,93,public QueryImpl(ResourceInstance resource) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,94,m_resource = resource;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,105,addAllProperties(temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,136,throws UnsupportedPropertyException, SystemException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,138,Result result = createResult();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,139,Resource.Type resourceType = m_resource.getResourceDefinition().getType();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,140,if (m_resource.getIds().get(resourceType) == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,141,addCollectionProperties(resourceType);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,142,result.getResultTree().setProperty("isCollection", "true");
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,147,m_mapSubResources.putAll(m_resource.getSubResources());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,150,Predicate predicate = createPredicate(m_resource);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,151,Iterable<Resource> iterResource = getClusterController().getResources(
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,152,resourceType, createRequest(), predicate);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,154,TreeNode<Resource> tree = result.getResultTree();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,155,int count = 1;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,156,for (Resource resource : iterResource) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,159,TreeNode<Resource> node = tree.addChild(resource, resource.getType() + ":" + count++);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,161,String subResCategory = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,162,ResourceInstance r = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,164,setParentIdsOnSubResource(resource, r);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,166,TreeNode<Resource> childResult = r.getQuery().execute().getResultTree();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,167,childResult.setName(subResCategory);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,168,childResult.setProperty("isCollection", "false");
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,169,node.addChild(childResult);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,172,return result;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,176,public Predicate getPredicate() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,178,return createPredicate(m_resource);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,187,public void setUserPredicate(Predicate predicate) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,188,m_userPredicate = predicate;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,191,ClusterController getClusterController() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,192,return ClusterControllerHelper.getClusterController();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,195,private void addCollectionProperties(Resource.Type resourceType) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,196,Schema schema = getClusterController().getSchema(resourceType);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,200,for (Resource.Type type : m_resource.getIds().keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,202,String keyPropertyId = schema.getKeyPropertyId(type);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,206,if (keyPropertyId != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,212,private void addAllProperties(TemporalInfo temporalInfo) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,224,for (Map.Entry<String, ResourceInstance> entry : m_resource.getSubResources().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,225,String name = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,226,if (! m_mapSubResources.containsKey(name)) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,227,m_mapSubResources.put(name, entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,265,private boolean addPropertyToSubResource(String path, String property, TemporalInfo temporalInfo) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,272,boolean resourceAdded = false;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,273,if (path == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,274,path = property;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,275,property = null;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,278,int i = path.indexOf("/");
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,279,String p = i == -1 ? path : path.substring(0, i);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,281,ResourceInstance subResource = m_resource.getSubResources().get(p);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,282,if (subResource != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,283,m_mapSubResources.put(p, subResource);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,286,if (property != null || !path.equals(p)) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,288,subResource.getQuery().addProperty(i == -1 ? null : path.substring(i + 1), property, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,290,resourceAdded = true;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,292,return resourceAdded;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,296,Resource.Type resourceType = resource.getResourceDefinition().getType();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,297,Map<Resource.Type, String> mapResourceIds = resource.getIds();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,298,Schema schema = getClusterController().getSchema(resourceType);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,301,for (Map.Entry<Resource.Type, String> entry : mapResourceIds.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,302,if (entry.getValue() != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,303,String keyPropertyId = schema.getKeyPropertyId(entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,304,if (keyPropertyId != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,305,setPredicates.add(new EqualsPredicate<String>(keyPropertyId, entry.getValue()));
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,310,if (setPredicates.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,311,return setPredicates.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,315,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,319,private Predicate createPredicate(ResourceInstance resource) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,320,Predicate predicate = null;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,323,if (internalPredicate == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,324,if (m_userPredicate != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,325,predicate = m_userPredicate;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,328,predicate = (m_userPredicate == null ? internalPredicate :
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,331,return predicate;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,357,private Request createRequest() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,358,Set<String> setProperties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,381,private void setParentIdsOnSubResource(Resource resource, ResourceInstance r) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,382,Map<Resource.Type, String> mapParentIds = m_resource.getIds();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,383,Map<Resource.Type, String> mapResourceIds = new HashMap<Resource.Type, String>(mapParentIds.size());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,384,for (Map.Entry<Resource.Type, String> resourceIdEntry : mapParentIds.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,385,Resource.Type type = resourceIdEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,386,String value = resourceIdEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,388,if (value == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,389,Object o = resource.getPropertyValue(getClusterController().getSchema(type).getKeyPropertyId(type));
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,390,value = o == null ? null : o.toString();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,392,if (value != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,393,mapResourceIds.put(type, value);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,396,String resourceKeyProp = getClusterController().getSchema(resource.getType()).
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,397,getKeyPropertyId(resource.getType());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,399,mapResourceIds.put(resource.getType(), resource.getPropertyValue(resourceKeyProp).toString());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,400,r.setIds(mapResourceIds);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,403,Result createResult() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,404,return new ResultImpl(true);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,408,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,409,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,410,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,412,QueryImpl that = (QueryImpl) o;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,416,m_mapPropertyTemporalInfo.equals(that.m_mapPropertyTemporalInfo) &&
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,418,m_mapSubResources.equals(that.m_mapSubResources) &&
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,419,m_resource.equals(that.m_resource) &&
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,420,m_userPredicate == null ? that.m_userPredicate == null : m_userPredicate.equals(that.m_userPredicate);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,424,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,425,int result = m_resource.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,427,result = 31 * result + m_mapPropertyTemporalInfo.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,428,result = 31 * result + m_mapCategoryTemporalInfo.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,430,result = 31 * result + m_mapSubResources.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,431,result = 31 * result + (m_userPredicate != null ? m_userPredicate.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,432,return result;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImpl.java,37,ResourceDefinition resourceDefinition;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImpl.java,55,resourceDefinition = new  ComponentResourceDefinition();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImpl.java,86,return new ResourceInstanceImpl(mapIds, resourceDefinition, this);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,23,import org.apache.ambari.server.api.query.QueryImpl;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,35,public class ResourceInstanceImpl implements ResourceInstance {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,40,private Query m_query;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,57,private Map<String, ResourceInstance> m_mapSubResources;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,63,private ResourceInstanceFactory m_resourceFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,69,private ClusterController m_controller = ClusterControllerHelper.getClusterController();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,72,public ResourceInstanceImpl(Map<Resource.Type, String> mapIds, ResourceDefinition resourceDefinition,
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,73,ResourceInstanceFactory resourceFactory) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,76,m_query              = new QueryImpl(this);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,77,m_resourceFactory    = resourceFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,94,return m_query;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,105,if (m_mapSubResources == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,106,m_mapSubResources = new HashMap<String, ResourceInstance>();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,107,Set<SubResourceDefinition> setSubResourceDefs = getResourceDefinition().getSubResourceDefinitions();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,109,for (SubResourceDefinition subResDef : setSubResourceDefs) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,110,ResourceInstance resource = m_resourceFactory.createResource(subResDef.getType(), getIds());
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,114,subResDef.getType()).getKeyPropertyId(subResDef.getType()));
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,116,for (Resource.Type fkType : subResDef.getAdditionalForeignKeys()) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,120,String subResourceName = subResDef.isCollection() ? resource.getResourceDefinition().getPluralName() :
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,121,resource.getResourceDefinition().getSingularName();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,123,m_mapSubResources.put(subResourceName, resource);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,126,return m_mapSubResources;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,130,public boolean isCollectionResource() {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,131,return getIds().get(getResourceDefinition().getType()) == null;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,143,m_resourceDefinition.equals(that.m_resourceDefinition) &&
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,144,m_mapSubResources == null ? that.m_mapSubResources == null :
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,145,m_mapSubResources.equals(that.m_mapSubResources);
ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java,66,StringBuilder sb = new StringBuilder("Stack name:" + name + "\nversion:" + version );//TODO add repository
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,108,public static final String SRVR_HOSTS_MAPPING =
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,53,private final StreamProvider streamProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,55,private final JMXHostProvider jmxHostProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,59,private final String clusterNamePropertyId;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,61,private final String hostNamePropertyId;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,63,private final String componentNamePropertyId;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,117,Set<Resource> keepers = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,119,if (populateResource(resource, request, predicate)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,120,keepers.add(resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,158,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,191,Map<String, Map<String, Object>> categories = new HashMap<String, Map<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,193,for (Map<String, Object> bean : metricHolder.getBeans()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,194,String category = getCategory(bean);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,195,if (category != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,196,categories.put(category, bean);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,200,for (String propertyId : ids) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,255,return true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,100,List<Stage> stages = db.getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,101,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,102,LOG.debug("Scheduler wakes up");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,104,if (stages == null || stages.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,107,LOG.debug("No stage in progress..nothing to do");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,109,return;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,112,for (Stage s : stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,113,List<ExecutionCommand> commandsToSchedule = new ArrayList<ExecutionCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,114,Map<String, RoleStats> roleStats = processInProgressStage(s, commandsToSchedule);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,116,boolean failed = false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,117,for (String role : roleStats.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,118,RoleStats stats = roleStats.get(role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,122,if (stats.isRoleFailed()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,123,failed = true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,124,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,127,if (failed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,129,+ s.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,130,db.abortOperation(s.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,135,for (ExecutionCommand cmd : commandsToSchedule) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,146,boolean goToNextStage = true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,148,RoleStats stats = roleStats.get(role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,149,if (!stats.isSuccessFactorMet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,150,goToNextStage = false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,151,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,154,if (!goToNextStage) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,155,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2494,LOG.debug("Received a createHostComponent request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2572,if (newState == null) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,202,LOG.info("Not a service component, assuming its an action", scnex);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,104,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,105,LOG.debug("Received heartbeat from host"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,107,+ ", currentResponseId=" + currentResponseId
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,108,+ ", receivedResponseId=" + heartbeat.getResponseId());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,94,bindConstant().annotatedWith(Names.named("actionTimeout")).to(300000L);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1361,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1362,LOG.debug("Received a updateCluster request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1364,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1893,LOG.debug("Received a updateService request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1896,+ ", request=" + request.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3064,.keySet().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3087,.keySet().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3110,hostName = components.keySet().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,140,List<ServiceComponentHost> roleList = cl
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,141,.getServiceComponentHosts(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,142,for (ServiceComponentHost sch : roleList) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,145,LOG.debug("Live status will include status of service " + serviceName +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,187,URLStreamProvider streamProvider = new URLStreamProvider();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,213,PropertyHelper.getPropertyId("ServiceComponentInfo", "component_name")));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,229,PropertyHelper.getPropertyId("HostRoles", "component_name")));
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,95,String componentNamePropertyId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3194,.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3195,if (hdfsSiteConfig != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3196,for (Map.Entry<String, Config> entry: hdfsSiteConfig.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3197,configurations
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3198,.put(entry.getValue().getType(), entry.getValue().getProperties());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,166,List<ExecutionCommand> commandsToSchedule) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,180,if (timeOutActionNeeded(status, s, host, roleStr, now, taskTimeout)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,194,Cluster cluster = fsmObject.getCluster(s.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,247,String host, String role, long currentTime, long taskTimeout) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,252,if (currentTime > stage.getLastAttemptTime(host, role)+taskTimeout) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,75,componentToClusterInfoKeyMap.put("TASKTRACKER", "slave_hosts");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2810,Set<RequestStatusResponse> response = new HashSet<RequestStatusResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2811,if (request.getRequestId() == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2821,List<Long> requestIds = actionManager.getRequestsByStatus(requestStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2826,RequestStatusResponse requestStatusResponse = getRequestStatusResponse(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2827,request.getRequestId().longValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2830,if (requestStatusResponse.getTasks().size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2835,response.add(requestStatusResponse);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,383,private PreparedStatement getQualifiedPS(Statements statement, String searchClause) throws IOException {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,94,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,166,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,185,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,214,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,239,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapImpl.java,53,public BootStrapImpl(Configuration conf) throws IOException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1676,Map<String, Map<String, String>> configurations =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1677,new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1678,Map<String, Config> allConfigs = cluster.getService(serviceName).getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1679,if (allConfigs != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1680,for (Map.Entry<String, Config> entry: allConfigs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1681,configurations.put(entry.getValue().getType(), entry.getValue().getProperties());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,105,Collection<HostRoleStatus> sourceStatuses =
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,106,Arrays.asList(HostRoleStatus.QUEUED, HostRoleStatus.IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,107,HostRoleStatus.PENDING);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,108,int result = hostRoleCommandDAO.updateStatusByRequestId(requestId,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,109,HostRoleStatus.ABORTED, sourceStatuses);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,110,LOG.info("Aborted {} commands " + result);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2822,for (Long requestId : requestIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2823,response.add(getRequestStatusResponse(requestId.longValue()));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,31,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,63,private static final String GANGLIA_CLUSTER_NAME = "HDPSlaves";
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,244,append("/ganglia/graph.php?c=").
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,245,append(GANGLIA_CLUSTER_NAME).
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,246,append("&g=").
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,288,LOG.info("Scheduling command: "+cmd.toString()+" for host: "+hostname);
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistKeyValueService.java,53,LOG.info("Received message from UI " + keyValues);
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistKeyValueService.java,91,LOG.info("Returning " + stringRet);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,92,LOG.info("Using resource provider "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1530,|| oldSchState == State.START_FAILED
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1555,|| oldSchState == State.START_FAILED || oldSchState == State.STARTING) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1580,|| oldSchState == State.UNINSTALL_FAILED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1758,|| oldState == State.START_FAILED
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1767,|| oldState == State.STARTED
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1768,|| oldState == State.START_FAILED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1775,|| oldState == State.UNINSTALL_FAILED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1781,|| oldState == State.WIPEOUT_FAILED) {
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,45,START_FAILED(5),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,49,STARTED(6),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,53,STOPPING(7),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,57,STOP_FAILED(8),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,62,UNINSTALLING(9),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,66,UNINSTALL_FAILED(10),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,70,UNINSTALLED(11),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,74,WIPING_OUT(12),
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,115,case START_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/State.java,116,case STOP_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,193,State.START_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,197,.addTransition(State.START_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,201,.addTransition(State.START_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,202,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,203,ServiceComponentHostEventType.HOST_SVCCOMP_START,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,205,.addTransition(State.START_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,206,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,207,ServiceComponentHostEventType.HOST_SVCCOMP_STOP,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,224,State.STOP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,228,.addTransition(State.STOP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,232,.addTransition(State.STOP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,233,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,234,ServiceComponentHostEventType.HOST_SVCCOMP_STOP,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,246,State.UNINSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,250,.addTransition(State.UNINSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,254,.addTransition(State.UNINSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,278,State.WIPEOUT_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,282,.addTransition(State.WIPEOUT_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,286,.addTransition(State.WIPEOUT_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,361,State.UNINSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,365,.addTransition(State.UNINSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,369,.addTransition(State.UNINSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,393,State.WIPEOUT_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,397,.addTransition(State.WIPEOUT_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,401,.addTransition(State.WIPEOUT_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,25,String role;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,26,String actionId;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,27,String stdout;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,28,String stderr;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,29,String status;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,57,private HeartbeatMonitor heartbeatMonitor;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,73,Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,106,+  ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,144,&& hostObject.getState().equals(HostState.WAITING_FOR_HOST_STATUS_UPDATES)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,162,LOG.warn("Asking agent to reregister due to " + ex.getMessage(),  ex);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,317,throws InvalidStateTransitionException, AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,245,serviceComponentHostFactory.createNew(this, hostName, true);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,189,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,221,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActionResourceProvider.java,73,return getManagementController().createActions(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1403,Map<State, List<Service>> changedServices,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1404,Map<State, List<ServiceComponent>> changedComps,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1406,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1418,&& (changedScHosts == null || changedScHosts.isEmpty())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1419,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1422,Long requestId = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1423,List<Stage> stages = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1425,Set<String> smokeTestServices =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1426,new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1443,new HashMap<String, Map<String, Integer>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1447,stateScHostMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1453,&& State.INSTALLED != sch.getState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1458,new HashMap<String, Integer>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1461,.containsKey(sch.getServiceComponentName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1463,.put(sch.getServiceComponentName(), 1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1466,.get(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1475,changedComponentCount.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1485,.getServiceComponent(componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1488,stackId.getStackName(), stackId.getStackVersion(), serviceName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1489,componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,32,import org.apache.ambari.server.controller.utilities.PredicateHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,82,Map<String, Object> predicateProperties  = PredicateHelper.getProperties(predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,84,final RequestStatusRequest requestStatusRequest = getRequest(predicateProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,86,String clusterName = (String) predicateProperties.get(REQUEST_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,88,Set<RequestStatusResponse> responses = getResources(new Command<Set<RequestStatusResponse>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,90,public Set<RequestStatusResponse> invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,91,return getManagementController().getRequestStatus(requestStatusRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,96,Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,97,for (RequestStatusResponse response : responses) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,98,Resource resource = new ResourceImpl(Resource.Type.Request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,99,setResourceProperty(resource, REQUEST_CLUSTER_NAME_PROPERTY_ID, clusterName, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,100,setResourceProperty(resource, REQUEST_ID_PROPERTY_ID, response.getRequestId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,101,resources.add(resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,132,private RequestStatusRequest getRequest(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,133,Long requestId = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,134,if (properties.get(REQUEST_ID_PROPERTY_ID) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,135,requestId = Long.valueOf((String) properties
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,136,.get(REQUEST_ID_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,138,String requestStatus = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,139,if (properties.get(REQUEST_STATUS_PROPERTY_ID) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,140,requestStatus = (String)properties.get(REQUEST_STATUS_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,142,return new RequestStatusRequest(requestId, requestStatus);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,46,private List<StackInfo> stacksResult = new ArrayList<StackInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,47,private File stackRoot;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,48,private final static Logger LOG = LoggerFactory
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,49,.getLogger(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,51,private static final String SERVICES_FOLDER_NAME = "services";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,52,private static final String SERVICE_METAINFO_FILE_NAME = "metainfo.xml";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,53,private static final String SERVICE_CONFIG_FOLDER_NAME = "configuration";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,54,private static final String SERVICE_CONFIG_FILE_NAME_POSTFIX = "-site.xml";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,56,private static final String REPOSITORY_FILE_NAME = "repoinfo.xml";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,57,private static final String REPOSITORY_FOLDER_NAME = "repos";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,58,private static final String REPOSITORY_XML_MAIN_BLOCK_NAME = "os";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,59,private static final String REPOSITORY_XML_ATTRIBUTE_OS_TYPE = "type";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,60,private static final String REPOSITORY_XML_REPO_BLOCK_NAME = "repo";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,61,private static final String REPOSITORY_XML_PROPERTY_BASEURL = "baseurl";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,62,private static final String REPOSITORY_XML_PROPERTY_REPOID = "repoid";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,63,private static final String REPOSITORY_XML_PROPERTY_REPONAME = "reponame";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,64,private static final String REPOSITORY_XML_PROPERTY_MIRRORSLIST = "mirrorslist";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,66,private static final String METAINFO_XML_MAIN_BLOCK_NAME = "metainfo";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,67,private static final String METAINFO_XML_PROPERTY_VERSION = "version";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,68,private static final String METAINFO_XML_PROPERTY_USER = "user";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,69,private static final String METAINFO_XML_PROPERTY_COMMENT = "comment";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,70,private static final String METAINFO_XML_PROPERTY_COMPONENT_MAIN = "component";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,71,private static final String METAINFO_XML_PROPERTY_COMPONENT_NAME = "name";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,72,private static final String METAINFO_XML_PROPERTY_COMPONENT_CATEGORY = "category";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,74,private static final String PROPERTY_XML_MAIN_BLOCK_NAME = "property";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,75,private static final String PROPERTY_XML_PROPERTY_NAME = "name";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,76,private static final String PROPERTY_XML_PROPERTY_VALUE = "value";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,77,private static final String PROPERTY_XML_PROPERTY_DESCRIPTION = "description";
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,87,public AmbariMetaInfo(Configuration conf) throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,103,public void init() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,104,getConfigurationInformation(stackRoot);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,117,public ComponentInfo getComponentCategory(String stackName, String version,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,119,ComponentInfo component = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,120,List<ComponentInfo> components = getComponentsByService(stackName, version,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,121,serviceName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,123,for (ComponentInfo cmp : components) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,124,if (cmp.getName().equals(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,125,component = cmp;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,126,break;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,129,return component;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,141,public List<ComponentInfo> getComponentsByService(String stackName,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,143,List<ComponentInfo> componentsResult = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,144,ServiceInfo service = getServiceInfo(stackName, version, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,146,componentsResult = service.getComponents();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,148,return componentsResult;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,151,public Map<String, List<RepositoryInfo>> getRepository(String stackName,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,153,Map<String, List<RepositoryInfo>> reposResult = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,154,StackInfo stack = getStackInfo(stackName, version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,155,if (stack != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,156,List<RepositoryInfo> repository = stack.getRepositories();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,157,reposResult = new HashMap<String, List<RepositoryInfo>>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,158,for (RepositoryInfo repo : repository) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,159,if (!reposResult.containsKey(repo.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,160,reposResult.put(repo.getOsType(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,161,new ArrayList<RepositoryInfo>());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,163,reposResult.get(repo.getOsType()).add(repo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,166,return reposResult;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,173,boolean exist = false;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,177,return exist;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,183,public boolean isValidService(String stackName, String version,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,192,public boolean isValidServiceComponent(String stackName, String version,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,194,ServiceInfo service = getServiceInfo(stackName, version, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,195,if (service == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,196,return false;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,198,for (ComponentInfo compInfo : service.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,199,if (compInfo.getName().equals(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,200,return true;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,215,public String getComponentToService(String stackName, String version,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,217,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,218,LOG.debug("Looking for service for component"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,219,+ ", stackName=" + stackName
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,220,+ ", stackVersion=" + version
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,221,+ ", componentName=" + componentName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,223,Map<String, ServiceInfo> services = getServices(stackName, version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,224,String retService = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,225,if (services == null
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,226,|| services.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,227,return retService;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,229,boolean found = false;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,230,for (Map.Entry<String, ServiceInfo> entry : services.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,231,for (ComponentInfo compInfo : entry.getValue().getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,232,if (compInfo.getName().equals(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,233,retService = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,234,found = true;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,235,break;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,239,break;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,241,return retService;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,252,public Map<String, Map<String, String>> getSupportedConfigs(String stackName,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,254,Map<String, Map<String, String>> propertiesResult = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,256,ServiceInfo service = getServiceInfo(stackName, version, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,258,if (serviceName.equals(service.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,259,List<PropertyInfo> properties = service.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,261,for (PropertyInfo propertyInfo : properties) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,262,Map<String, String> fileProperties = propertiesResult
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,263,.get(propertyInfo.getFilename());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,264,if (fileProperties == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,265,fileProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,266,fileProperties.put(propertyInfo.getName(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,267,propertyInfo.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,268,propertiesResult.put(propertyInfo.getFilename(), fileProperties);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,271,fileProperties.put(propertyInfo.getName(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,272,propertyInfo.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,278,return propertiesResult;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,291,Map<String, ServiceInfo> servicesInfoResult = new HashMap<String, ServiceInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,293,List<ServiceInfo> services = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,294,StackInfo stack = getStackInfo(stackName, version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,296,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,297,services = stack.getServices();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,299,for (ServiceInfo service : services) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,300,servicesInfoResult.put(service.getName(), service);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,302,return servicesInfoResult;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,305,public ServiceInfo getServiceInfo(String stackName, String version,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,307,ServiceInfo serviceInfoResult = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,308,List<ServiceInfo> services = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,309,StackInfo stack = getStackInfo(stackName, version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,311,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,312,services = stack.getServices();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,314,for (ServiceInfo service : services) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,315,if (serviceName.equals(service.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,316,serviceInfoResult = service;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,317,break;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,320,return serviceInfoResult;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,324,List<ServiceInfo> servicesResulr = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,325,StackInfo stack = getStackInfo(stackName, version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,327,servicesResulr = stack.getServices();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,328,return servicesResulr;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,331,public List<StackInfo> getSupportedStacks() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,332,return stacksResult;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,349,private void getConfigurationInformation(File stackRoot) throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,352,LOG.debug("Loading stack information"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,353,+ ", stackRoot=" + stackRoot.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,357,throw new IOException("" + Configuration.METADETA_DIR_PATH
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,358,+ " should be a directory with stack"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,359,+ ", stackRoot=" + stackRoot.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,361,for (File stackFolder : stacks) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,363,continue;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,365,for (File stack : concretStacks) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,367,continue;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,372,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,373,LOG.debug("Adding new stack to known stacks"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,375,+ ", stackVersion=" + stack.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,378,stacksResult.add(stackInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,381,+ File.separator + REPOSITORY_FOLDER_NAME + File.separator
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,382,+ REPOSITORY_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,384,if (repositoryFolder.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,385,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,386,LOG.debug("Adding repositories to stack"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,389,+ ", repoFolder=" + repositoryFolder.getPath());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,391,List<RepositoryInfo> repositoryInfoList = getRepository(repositoryFolder);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,392,stackInfo.getRepositories().addAll(repositoryInfoList);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,397,+ File.separator + SERVICES_FOLDER_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,400,if (servicesFolders != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,401,for (File serviceFolder : servicesFolders) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,403,ServiceInfo serviceInfo = new ServiceInfo();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,404,serviceInfo.setName(serviceFolder.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,405,stackInfo.getServices().add(serviceInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,407,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,408,LOG.debug("Adding new service to stack"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,411,+ ", serviceName=" + serviceInfo.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,416,+ File.separator + SERVICE_METAINFO_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,417,if (metainfoFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,418,setMetaInfo(metainfoFile, serviceInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,423,+ File.separator + SERVICE_CONFIG_FOLDER_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,425,if (configFiles != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,426,for (File config : configFiles) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,427,if (config.getName().endsWith(SERVICE_CONFIG_FILE_NAME_POSTFIX)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,428,serviceInfo.getProperties().addAll(getProperties(config));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,438,private List<RepositoryInfo> getRepository(File repositoryFile) throws ParserConfigurationException, IOException, SAXException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,440,List<RepositoryInfo> repositorysInfo = new ArrayList<RepositoryInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,443,DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,444,DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,445,Document doc = dBuilder.parse(repositoryFile);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,447,NodeList osNodes = doc
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,448,.getElementsByTagName(REPOSITORY_XML_MAIN_BLOCK_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,450,for (int index = 0; index < osNodes.getLength(); index++) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,451,Node osNode = osNodes.item(index);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,453,if (osNode.getNodeType() == Node.ELEMENT_NODE) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,454,if (!osNode.getNodeName().equals(REPOSITORY_XML_MAIN_BLOCK_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,455,continue;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,457,NamedNodeMap attrs = osNode.getAttributes();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,458,Node osAttr = attrs.getNamedItem(REPOSITORY_XML_ATTRIBUTE_OS_TYPE);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,459,if (osAttr == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,460,continue;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,462,String osType = osAttr.getNodeValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,464,NodeList repoNodes = osNode.getChildNodes();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,465,for (int j = 0; j < repoNodes.getLength(); j++) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,466,Node repoNode = repoNodes.item(j);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,467,if (repoNode.getNodeType() != Node.ELEMENT_NODE
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,468,|| !repoNode.getNodeName().equals(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,469,REPOSITORY_XML_REPO_BLOCK_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,470,continue;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,472,Element property = (Element) repoNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,473,String repoId = getTagValue(REPOSITORY_XML_PROPERTY_REPOID,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,474,property);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,475,String repoName = getTagValue(REPOSITORY_XML_PROPERTY_REPONAME,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,476,property);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,477,String baseUrl = getTagValue(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,478,REPOSITORY_XML_PROPERTY_BASEURL, property);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,479,String mirrorsList = getTagValue(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,480,REPOSITORY_XML_PROPERTY_MIRRORSLIST, property);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,482,String[] osTypes = osType.split(",");
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,484,for (String os : osTypes) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,485,RepositoryInfo repositoryInfo = new RepositoryInfo();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,486,repositoryInfo.setOsType(os.trim());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,487,repositoryInfo.setRepoId(repoId);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,488,repositoryInfo.setRepoName(repoName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,489,repositoryInfo.setBaseUrl(baseUrl);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,490,repositoryInfo.setMirrorsList(mirrorsList);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,492,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,493,LOG.debug("Adding repo to stack"
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,494,+ ", repoInfo=" + repositoryInfo.toString());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,496,repositorysInfo.add(repositoryInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,505,return repositorysInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,508,private void setMetaInfo(File metainfoFile, ServiceInfo serviceInfo) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,510,DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,512,Document doc = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,513,DocumentBuilder dBuilder = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,514,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,515,dBuilder = dbFactory.newDocumentBuilder();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,516,doc = dBuilder.parse(metainfoFile);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,518,LOG.error("Error while parsing metainf.xml", e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,520,LOG.error("Error while open metainf.xml", e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,522,LOG.error("Error while parsing metainf.xml", e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,525,if(doc==null) return;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,527,doc.getDocumentElement().normalize();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,529,NodeList metaInfoNodes = doc
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,530,.getElementsByTagName(METAINFO_XML_MAIN_BLOCK_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,532,if (metaInfoNodes.getLength() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,533,Node metaInfoNode = metaInfoNodes.item(0);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,534,if (metaInfoNode.getNodeType() == Node.ELEMENT_NODE) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,536,Element metaInfoElem = (Element) metaInfoNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,538,serviceInfo.setVersion(getTagValue(METAINFO_XML_PROPERTY_VERSION,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,539,metaInfoElem));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,540,serviceInfo.setUser(getTagValue(METAINFO_XML_PROPERTY_USER,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,541,metaInfoElem));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,542,serviceInfo.setComment(getTagValue(METAINFO_XML_PROPERTY_COMMENT,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,543,metaInfoElem));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,547,NodeList componentInfoNodes = doc
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,548,.getElementsByTagName(METAINFO_XML_PROPERTY_COMPONENT_MAIN);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,550,if (componentInfoNodes.getLength() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,551,for (int index = 0; index < componentInfoNodes.getLength(); index++) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,552,Node componentInfoNode = componentInfoNodes.item(index);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,553,if (componentInfoNode.getNodeType() == Node.ELEMENT_NODE) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,554,Element componentInfoElem = (Element) componentInfoNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,556,ComponentInfo componentInfo = new ComponentInfo();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,557,componentInfo.setName(getTagValue(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,558,METAINFO_XML_PROPERTY_COMPONENT_NAME, componentInfoElem));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,559,componentInfo.setCategory(getTagValue(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,560,METAINFO_XML_PROPERTY_COMPONENT_CATEGORY, componentInfoElem));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,561,serviceInfo.getComponents().add(componentInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,569,private List<PropertyInfo> getProperties(File propertyFile) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,571,List<PropertyInfo> resultPropertyList = new ArrayList<PropertyInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,572,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,573,DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,574,DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,575,Document doc = dBuilder.parse(propertyFile);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,576,doc.getDocumentElement().normalize();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,578,NodeList propertyNodes = doc
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,579,.getElementsByTagName(PROPERTY_XML_MAIN_BLOCK_NAME);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,581,for (int index = 0; index < propertyNodes.getLength(); index++) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,583,Node node = propertyNodes.item(index);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,584,if (node.getNodeType() == Node.ELEMENT_NODE) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,585,Element property = (Element) node;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,586,PropertyInfo propertyInfo = new PropertyInfo();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,587,propertyInfo
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,588,.setName(getTagValue(PROPERTY_XML_PROPERTY_NAME, property));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,589,propertyInfo.setValue(getTagValue(PROPERTY_XML_PROPERTY_VALUE,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,590,property));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,592,propertyInfo.setDescription(getTagValue(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,593,PROPERTY_XML_PROPERTY_DESCRIPTION, property));
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,594,propertyInfo.setFilename(propertyFile.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,597,continue;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,599,resultPropertyList.add(propertyInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,603,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,604,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,606,return resultPropertyList;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,609,private String getTagValue(String sTag, Element rawElement) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,610,String result = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,612,if (rawElement.getElementsByTagName(sTag) != null && rawElement.getElementsByTagName(sTag).getLength() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,613,if (rawElement.getElementsByTagName(sTag).item(0) != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,614,NodeList element = rawElement.getElementsByTagName(sTag).item(0).getChildNodes();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,616,if (element != null && element.item(0)!=null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,617,Node value = (Node) element.item(0);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,619,result = value.getNodeValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,624,return result;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,627,public boolean areOsTypesCompatible(String type1, String type2) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,628,if (type1 == null || type2 == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,629,return false;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,631,if (type1.equals(type2)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,632,return true;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,637,return true;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,642,return true;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,645,return false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,217,if (!serviceComponentHosts.containsKey(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,218,serviceComponentHosts.put(serviceName,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,219,new HashMap<String, Map<String,ServiceComponentHost>>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,221,if (!serviceComponentHosts.get(serviceName).containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,222,serviceComponentHosts.get(serviceName).put(componentName,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,223,new HashMap<String, ServiceComponentHost>());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,35,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,36,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,37,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,38,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,88,String stackPath = conf.getMetadataPath();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,89,this.stackRoot = new File(stackPath);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,93,public AmbariMetaInfo(File stackRoot) throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,94,this.stackRoot = stackRoot;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,31,import org.springframework.security.ldap.authentication.BindAuthenticator;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,101,BindAuthenticator bindAuthenticator = new BindAuthenticator(springSecurityContextSource);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,71,String roleName = (configuration.getConfigsMap().get(Configuration.USER_ROLE_NAME_KEY));
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,72,log.info("Using default role name " + roleName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,74,RoleEntity role = roleDAO.findByName(roleName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,76,if (role == null) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,77,log.info("Role " + roleName + " not present in local DB - creating");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,78,role = new RoleEntity();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,79,role.setRoleName(roleName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,80,roleDAO.create(role);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,81,role = roleDAO.findByName(role.getRoleName());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,84,userDAO.create(newUser);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,86,user = userDAO.findLdapUserByName(newUser.getUserName());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,88,user.getRoleEntities().add(role);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,89,role.getUserEntities().add(user);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,90,roleDAO.merge(role);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,91,userDAO.merge(user);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,94,return authorizationHelper.convertRolesToAuthorities(user.getRoleEntities());
ambari-server/src/main/java/org/apache/ambari/server/controller/HostResponse.java,124,String ipv4, String ipv6, int cpuCount, String osArch, String osType,
ambari-server/src/main/java/org/apache/ambari/server/controller/HostResponse.java,154,0, "", "",
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,357,setCpuCount(hostInfo.getPhysicalProcessorCount());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,256,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1435,if (State.INSTALLED == s.getDesiredState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1478,if (entry.getValue().size() > 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1490,if (compInfo.isMaster()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,336,HostRoleStatus.FAILED, HostRoleStatus.TIMEDOUT));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,339,HostRoleStatus.FAILED, HostRoleStatus.FAILED,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,340,HostRoleStatus.TIMEDOUT));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,342,return hostRoleCommandDAO.getRequestsByTaskStatus(statuses, match);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2812,RequestStatus requestStatus = RequestStatus.IN_PROGRESS;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,151,Collection<HostRoleStatus> statuses, boolean match) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,152,String queryStr = "SELECT DISTINCT command.requestId "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,153,+ " FROM HostRoleCommandEntity command WHERE "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,154,+ " command.status";
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,155,if (!match) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,156,queryStr += " NOT";
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,158,queryStr += " IN ?1"
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,159,+ " ORDER BY command.requestId DESC";
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,160,TypedQuery<Long> query = entityManagerProvider.get().createQuery(queryStr,
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,162,return daoUtils.selectList(query, statuses);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,99,private void doWork() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,21,PENDING, //Not queued for a host
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,22,QUEUED, //Queued for a host
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,23,IN_PROGRESS, //Host reported it is working
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,24,COMPLETED, //Host reported success
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,25,FAILED, //Failed
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,26,TIMEDOUT, //Host did not respond in time
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,27,ABORTED //Operation was abandoned
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,38,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,39,import org.apache.ambari.server.state.Clusters;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,40,import org.apache.ambari.server.state.ComponentInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,41,import org.apache.ambari.server.state.Config;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,42,import org.apache.ambari.server.state.ConfigFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,43,import org.apache.ambari.server.state.Host;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,44,import org.apache.ambari.server.state.RepositoryInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,45,import org.apache.ambari.server.state.Service;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,46,import org.apache.ambari.server.state.ServiceComponent;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,47,import org.apache.ambari.server.state.ServiceComponentFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,48,import org.apache.ambari.server.state.ServiceComponentHost;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,49,import org.apache.ambari.server.state.ServiceComponentHostEvent;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,50,import org.apache.ambari.server.state.ServiceComponentHostFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,51,import org.apache.ambari.server.state.ServiceFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,52,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,53,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,54,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,55,import org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,56,import org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpInProgressEvent;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,57,import org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,58,import org.apache.ambari.server.state.svccomphost.ServiceComponentHostStopEvent;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,612,if (request.getClusterName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,614,|| request.getComponentName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,616,|| request.getHostname() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,617,|| request.getHostname().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,618,throw new IllegalArgumentException("Invalid arguments,"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,619,+ " clustername, componentname and hostname should not be null"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,620,+ " when trying to create a hostcomponent");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,631,if (request.getServiceName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,632,|| request.getServiceName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,633,StackId stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,634,String serviceName =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,635,ambariMetaInfo.getComponentToService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,636,stackId.getStackVersion(), request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,637,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,638,LOG.debug("Looking up service name for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,640,+ ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,642,if (serviceName == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,643,|| serviceName.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,644,throw new AmbariException("Could not find service for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,647,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,649,request.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2458,if (request.getClusterName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2460,|| request.getComponentName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2462,|| request.getHostname() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2463,|| request.getHostname().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2464,throw new IllegalArgumentException("Invalid arguments"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2465,+ ", cluster name, component name and host name should be"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2466,+ " provided to update host components");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2471,if (request.getServiceName() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2472,|| request.getServiceName().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2473,StackId stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2474,String serviceName =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2475,ambariMetaInfo.getComponentToService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2476,stackId.getStackVersion(), request.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2477,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2478,LOG.debug("Looking up service name for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2480,+ ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2483,if (serviceName == null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2484,|| serviceName.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2485,throw new AmbariException("Could not find service for component"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2488,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2490,request.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2618,if (!changedScHosts.containsKey(sc.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2619,changedScHosts.put(sc.getName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2620,new HashMap<State, List<ServiceComponentHost>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2622,if (!changedScHosts.get(sc.getName()).containsKey(newState)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2623,changedScHosts.get(sc.getName()).put(newState,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2624,new ArrayList<ServiceComponentHost>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2626,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2627,LOG.debug("Handling update to ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2632,+ ", currentState=" + oldSchState
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2633,+ ", newDesiredState=" + newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2635,changedScHosts.get(sc.getName()).get(newState).add(sch);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2663,sch.persist();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2742,Set<ServiceComponentHostRequest> request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2743,throw new AmbariException("Delete host components not supported");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,229,LOG.info("State of service component " + componentName
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,25,import org.apache.ambari.server.controller.ServiceComponentHostRequest;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,35,import org.apache.ambari.server.controller.utilities.PredicateHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,39,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,60,private static final String CONFIG_COMPONENT_NAME = PropertyHelper.getPropertyId("Config", "component_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,116,Map<String, Object> map = PredicateHelper.getProperties(predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,118,if (map.containsKey(CONFIG_HOST_NAME) && map.containsKey(CONFIG_COMPONENT_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,119,final ServiceComponentHostRequest hostComponentRequest = new ServiceComponentHostRequest(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,120,(String) map.get(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,121,null,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,122,(String) map.get(CONFIG_COMPONENT_NAME),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,123,(String) map.get(CONFIG_HOST_NAME),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,124,null, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,126,Map<String, String> mappints = getResources(new Command<Map<String, String>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,128,public Map<String, String> invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,129,return getManagementController().getHostComponentDesiredConfigMapping(hostComponentRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,133,Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,135,for (Entry<String, String> entry : mappints.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,137,Resource resource = new ResourceImpl(Resource.Type.Configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,139,resource.setProperty(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID, map.get(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,140,resource.setProperty(CONFIG_COMPONENT_NAME, map.get(CONFIG_COMPONENT_NAME));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,141,resource.setProperty(CONFIG_HOST_NAME, map.get(CONFIG_HOST_NAME));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,143,resource.setProperty(CONFIGURATION_CONFIG_TYPE_PROPERTY_ID, entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,144,resource.setProperty(CONFIGURATION_CONFIG_TAG_PROPERTY_ID, entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,146,resources.add(resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,150,return resources;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,154,final ConfigurationRequest configRequest = getRequest(map);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,156,Set<ConfigurationResponse> responses = getResources(new Command<Set<ConfigurationResponse>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,158,public Set<ConfigurationResponse> invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,159,return getManagementController().getConfigurations(Collections.singleton(configRequest));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,163,Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,164,for (ConfigurationResponse response : responses) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,165,Resource resource = new ResourceImpl(Resource.Type.Configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,166,resource.setProperty(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID, response.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,167,resource.setProperty(CONFIGURATION_CONFIG_TYPE_PROPERTY_ID, response.getType());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,168,resource.setProperty(CONFIGURATION_CONFIG_TAG_PROPERTY_ID, response.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,170,if (null != response.getConfigs() && response.getConfigs().size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,171,Map<String, String> configs = response.getConfigs();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,173,for (Entry<String, String> entry : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,174,String id = PropertyHelper.getPropertyId("properties", entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,175,resource.setProperty(id, entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,179,resources.add(resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,182,return resources;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SimplifyingPredicateVisitor.java,35,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SimplifyingPredicateVisitor.java,61,private final Set<String> supportedProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SimplifyingPredicateVisitor.java,64,public SimplifyingPredicateVisitor(Set<String> supportedProperties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SimplifyingPredicateVisitor.java,65,this.supportedProperties = supportedProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SimplifyingPredicateVisitor.java,81,supportedProperties.contains(predicate.getPropertyId())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,81,public void start() {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,147,hostObject.handleEvent(new HostStatusUpdatesReceivedEvent(hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,159,null));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,228,if (!prevState.equals(liveState)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,308,Set<String> deletedTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,309,for (String type : this.desiredConfigs.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,310,if (!configs.containsKey(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,311,deletedTypes.add(type);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,346,if (!deletedTypes.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,347,if (persisted) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,348,List<ComponentConfigMappingEntity> deleteEntities =
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,349,componentConfigMappingDAO.findByComponentAndType(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,350,desiredStateEntity.getClusterId(), desiredStateEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,351,desiredStateEntity.getComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,352,deletedTypes);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,353,for (ComponentConfigMappingEntity deleteEntity : deleteEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,354,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,355,LOG.debug("Deleting desired config from ServiceComponent"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,360,+ ", configVersionTag=" + deleteEntity.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,362,desiredStateEntity.getComponentConfigMappingEntities().remove(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,363,deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,364,componentConfigMappingDAO.remove(deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,367,for (String deletedType : deletedTypes) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,368,desiredConfigs.remove(deletedType);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,260,Set<String> deletedTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,261,for (String type : this.desiredConfigs.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,262,if (!configs.containsKey(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,263,deletedTypes.add(type);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,294,if (!deletedTypes.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,295,if (persisted) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,296,List<ServiceConfigMappingEntity> deleteEntities =
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,297,serviceConfigMappingDAO.findByServiceAndType(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,298,serviceEntity.getClusterId(), serviceEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,299,deletedTypes);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,300,for (ServiceConfigMappingEntity deleteEntity : deleteEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,301,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,302,LOG.debug("Deleting desired config from ServiceComponent"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,306,+ ", configVersionTag=" + deleteEntity.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,308,serviceEntity.getServiceConfigMappings().remove(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,309,deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,310,serviceConfigMappingDAO.remove(deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,313,for (String deletedType : deletedTypes) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,314,desiredConfigs.remove(deletedType);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,990,Set<String> deletedTypes = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,991,for (String type : this.desiredConfigs.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,992,if (!configs.containsKey(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,993,deletedTypes.add(type);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1025,if (!deletedTypes.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1026,if (persisted) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1027,List<HostComponentDesiredConfigMappingEntity> deleteEntities =
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1028,hostComponentDesiredConfigMappingDAO.findByHostComponentAndType(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1029,stateEntity.getClusterId(), stateEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1030,stateEntity.getComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1031,stateEntity.getHostName(), deletedTypes);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1032,for (HostComponentDesiredConfigMappingEntity deleteEntity : deleteEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1033,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1034,LOG.debug("Deleting desired config to ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1040,+ ", configVersionTag=" + deleteEntity.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1042,desiredStateEntity.getHostComponentDesiredConfigMappingEntities().remove(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1043,deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1044,hostComponentDesiredConfigMappingDAO.remove(deleteEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1047,for (String deletedType : deletedTypes) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1048,desiredConfigs.remove(deletedType);
ambari-server/src/main/java/org/apache/ambari/server/StackNotFoundException.java,22,public class StackNotFoundException extends ObjectNotFoundException {
ambari-server/src/main/java/org/apache/ambari/server/StackNotFoundException.java,24,public StackNotFoundException (String stackName,
ambari-server/src/main/java/org/apache/ambari/server/StackNotFoundException.java,25,String stackVersion) {
ambari-server/src/main/java/org/apache/ambari/server/StackNotFoundException.java,26,super("Stack Information not found"
ambari-server/src/main/java/org/apache/ambari/server/StackNotFoundException.java,27,+ ", stackName=" + stackName
ambari-server/src/main/java/org/apache/ambari/server/StackNotFoundException.java,28,+ ", stackVersion=" + stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,118,String serviceName, String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,142,String version, String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,152,String version) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,172,public boolean isSupportedStack(String stackName, String version) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,174,StackInfo stack = getStackInfo(stackName, version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,176,exist = true;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,184,String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,185,ServiceInfo service = getServiceInfo(stackName, version, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,186,return (service != null);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,193,String serviceName, String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,216,String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,253,String version, String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,289,public Map<String, ServiceInfo> getServices(String stackName, String version) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,306,String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,323,public List<ServiceInfo> getSupportedServices(String stackName, String version) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,335,public StackInfo getStackInfo(String stackName, String version) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,336,StackInfo stackInfoResult = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,338,for (StackInfo stack : stacksResult) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,340,&& version.equals(stack.getVersion())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,341,stackInfoResult = stack;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,342,break;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,345,return stackInfoResult;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,22,import org.apache.ambari.server.ObjectNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,374,public void deleteUsers(Set<UserRequest> requests) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,158,throw new StackNotFoundException(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,159,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/Resource.java,85,User
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,115,Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,81,Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,107,serviceEntity, Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,236,private boolean isOsSupportedByClusterStack(Cluster c, Host h) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,163,clusterEntity.getStages().add(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,167,stageEntity.getHostRoleCommands().add(hostRoleCommandEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,175,hostEntity.getHostRoleCommandEntities().add(hostRoleCommandEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,195,stageDAO.create(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,196,clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,75,LOG.info("Persisting stage into db: " + s.toString());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,45,try {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,46,executionCommand = StageUtils.stringToExecutionCommand(jsonExecutionCommand);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,49,throw new RuntimeException(e);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,62,try {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,63,jsonExecutionCommand = StageUtils.jaxbToString(executionCommand);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,66,throw new RuntimeException(e);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,68,throw new RuntimeException(e);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,103,ExecutionCommandEntity executionCommandEntity = new ExecutionCommandEntity();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,104,executionCommandEntity.setCommand(executionCommandWrapper.getJson().getBytes());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,105,executionCommandEntity.setHostRoleCommand(hostRoleCommandEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,106,hostRoleCommandEntity.setExecutionCommand(executionCommandEntity);
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,19,package org.apache.ambari.server.agent.rest;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,21,import javax.ws.rs.ext.ContextResolver;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,22,import javax.ws.rs.ext.Provider;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,24,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,25,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,26,import org.codehaus.jackson.map.DeserializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,27,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,31,public class AgentJackSonJsonProvider implements ContextResolver<ObjectMapper> {
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,32,private static Log LOG = LogFactory.getLog(AgentJackSonJsonProvider.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,34,public ObjectMapper getContext(Class<?> type) {
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,35,ObjectMapper result = new ObjectMapper();
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,36,result.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,37,false);
ambari-server/src/main/java/org/apache/ambari/server/agent/rest/AgentJackSonJsonProvider.java,38,return result;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,52,private static Log LOG = LogFactory.getLog(StageUtils.class);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,54,private static Map<String, String> componentToClusterInfoKeyMap =
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,87,String [] fields = actionId.split("-");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,138,ObjectMapper mapper = new ObjectMapper();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,139,mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,140,mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, true);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,141,return mapper.writeValueAsString(jaxbObj);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1532,|| oldSchState == State.STOP_FAILED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1796,|| oldState == State.STARTED) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,234,long[] times = conn.fetchJobStartStopTimes(jobId);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,235,if (times != null) {
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,236,getTaskAttemptsByLocality(conn, jobId, times[0], times[1], data, minr, maxr);
ambari-server/src/main/java/org/apache/ambari/eventdb/webservice/WorkflowJsonService.java,284,private static void getTaskAttemptsByLocality(PostgresConnector conn, String jobId, long submitTime, long finishTime, TaskLocalityData data, int minr,
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/EqualsPredicate.java,34,Object propertyValue = resource.getPropertyValue(getPropertyId());
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/EqualsPredicate.java,35,return propertyValue != null && compareValueTo(propertyValue) == 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,587,if (request.getClusterName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,588,clusters.mapHostToCluster(request.getHostname(), request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,591,if (request.getHostAttributes() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,592,clusters.getHost(request.getHostname()).
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,593,setHostAttributes(request.getHostAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,24,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,46,import org.apache.ambari.server.state.host.HostImpl;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3152,stage.getExecutionCommandWrapper(hostName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3154,.setConfigurations(configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3157,stage
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3160,.setClusterHostInfo(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3161,StageUtils.getClusterHostInfo(clusters.getCluster(clusterName), hostsMap));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3209,stage.getExecutionCommandWrapper(namenodeHost,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3211,.setConfigurations(configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,278,String hosts    = getSetString(hostSet, -1);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXHostProvider.java,22,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXHostProvider.java,39,public String getHostName(String clusterName, String componentName) throws SystemException;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,161,String clusterName   = (String) resource.getPropertyValue(clusterNamePropertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,171,String hostName;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,172,if (hostNamePropertyId == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,173,hostName = jmxHostProvider.getHostName(clusterName, componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,175,else {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,183,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,186,String spec = getSpec(hostName + ":" + port);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,278,protected String getSpec(String jmxSource) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,280,return "http://" + jmxSource + "/jmx";
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,138,synchronized (this) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,157,.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,158,throw new ServiceComponentHostNotFoundException(getClusterName(), serviceName,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,159,serviceComponentName, hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,162,.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,168,readLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,178,writeLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,188,public synchronized void addServiceComponentHost(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,190,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,191,LOG.debug("Trying to add ServiceComponentHost to ClusterHostMap cache"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,194,+ ", hostname=" + svcCompHost.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,197,final String hostname = svcCompHost.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,198,final String serviceName = svcCompHost.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,199,final String componentName = svcCompHost.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,200,Set<Cluster> cs = clusters.getClustersForHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,201,boolean clusterFound = false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,202,Iterator<Cluster> iter = cs.iterator();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,203,while (iter.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,204,Cluster c = iter.next();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,205,if (c.getClusterId() == this.getClusterId()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,206,clusterFound = true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,207,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,210,if (!clusterFound) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,211,throw new AmbariException("Host does not belong this cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,212,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,214,+ ", clusterId=" + getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,226,if (serviceComponentHosts.get(serviceName).get(componentName).
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,227,containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,228,throw new AmbariException("Duplicate entry for ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,229,+ ", serviceName=" + serviceName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,230,+ ", serviceComponentName" + componentName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,231,+ ", hostname= " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,234,if (!serviceComponentHostsByHost.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,235,serviceComponentHostsByHost.put(hostname,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,236,new ArrayList<ServiceComponentHost>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,239,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,240,LOG.debug("Adding a new ServiceComponentHost"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,243,+ ", serviceName=" + serviceName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,244,+ ", serviceComponentName" + componentName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,245,+ ", hostname= " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,248,serviceComponentHosts.get(serviceName).get(componentName).put(hostname,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,249,svcCompHost);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,250,serviceComponentHostsByHost.get(hostname).add(svcCompHost);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,255,return clusterEntity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,259,public synchronized List<ServiceComponentHost> getServiceComponentHosts(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,261,if (serviceComponentHostsByHost.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,262,return Collections.unmodifiableList(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,263,serviceComponentHostsByHost.get(hostname));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,265,return new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,272,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,273,LOG.debug("Adding a new Service"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,276,+ ", serviceName=" + service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,278,if (services.containsKey(service.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,279,throw new AmbariException("Service already exists"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,282,+ ", serviceName=" + service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,284,this.services.put(service.getName(), service);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,288,public synchronized Service addService(String serviceName) throws AmbariException{
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,290,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,291,LOG.debug("Adding a new Service"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,294,+ ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,296,if (services.containsKey(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,297,throw new AmbariException("Service already exists"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,300,+ ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,302,Service s = serviceFactory.createNew(this, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,303,this.services.put(s.getName(), s);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,304,return s;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,311,if (!services.containsKey(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,312,throw new ServiceNotFoundException(getClusterName(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,314,return services.get(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,318,public synchronized Map<String, Service> getServices() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,320,return Collections.unmodifiableMap(services);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,324,public synchronized StackId getDesiredStackVersion() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,325,return desiredStackVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,329,public synchronized void setDesiredStackVersion(StackId stackVersion) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,330,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,331,LOG.debug("Changing DesiredStackVersion of Cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,334,+ ", currentDesiredStackVersion=" + this.desiredStackVersion
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,335,+ ", newDesiredStackVersion=" + stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,337,this.desiredStackVersion = stackVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,338,clusterEntity.setDesiredStackVersion(gson.toJson(stackVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,339,clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,342,public synchronized StackId getDesiredState() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,345,return getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,348,public synchronized void setDesiredState(StackId desiredState) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,355,setDesiredStackVersion(desiredState);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,360,public synchronized Map<String, Config> getDesiredConfigsByType(String configType) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,362,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,364,return Collections.unmodifiableMap(configs.get(configType));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,368,public synchronized Config getDesiredConfig(String configType, String versionTag) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,370,|| !configs.get(configType).containsKey(versionTag)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,371,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,373,return configs.get(configType).get(versionTag);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,377,public synchronized void addDesiredConfig(Config config) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,378,if (config.getType() == null
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,380,|| config.getVersionTag() == null
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,381,|| config.getVersionTag().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,384,if (!configs.containsKey(config.getType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,385,configs.put(config.getType(), new HashMap<String, Config>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,388,configs.get(config.getType()).put(config.getVersionTag(), config);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,391,public synchronized Collection<Config> getAllConfigs() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,392,List<Config> list = new ArrayList<Config>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,393,for (Entry<String,Map<String,Config>> entry : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,394,for (Config config : entry.getValue().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,395,list.add(config);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,398,return Collections.unmodifiableList(list);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,404,ClusterResponse r = new ClusterResponse(getClusterId(), getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,405,clusters.getHostsForCluster(getClusterName()).keySet(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,406,getDesiredStackVersion().getStackId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,407,return r;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,410,public synchronized void debugDump(StringBuilder sb) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,415,+ ", services=[ ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,416,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,417,for(Service s : services.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,418,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,419,sb.append(" , ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,420,first = false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,422,sb.append("\n    ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,423,s.debugDump(sb);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,424,sb.append(" ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,426,sb.append(" ] }");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,431,public synchronized void refresh() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,432,clusterEntity = clusterDAO.findById(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,433,clusterDAO.refresh(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,437,public synchronized void deleteAllServices() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,439,LOG.info("Deleting all services for cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,440,+ ", clusterName=" + getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,441,for (Service service : services.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,442,if (!service.canBeRemoved()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,443,throw new AmbariException("Found non removable service when trying to"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,444,+ " all services from cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,446,+ ", serviceName=" + service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,449,for (Service service : services.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,452,services.clear();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,460,Service service = getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,461,LOG.info("Deleting service for cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,463,+ ", serviceName=" + service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,465,if (!service.canBeRemoved()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,466,throw new AmbariException("Could not delete service from cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,471,services.remove(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,478,boolean safeToRemove = true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,479,for (Service service : services.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,480,if (!service.canBeRemoved()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,481,safeToRemove = false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,482,LOG.warn("Found non removable service"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,484,+ ", serviceName=" + service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,487,return safeToRemove;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,59,private Map<String, Cluster> clusters;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,60,private Map<Long, Cluster> clustersById;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,61,private Map<String, Host> hosts;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,62,private Map<String, Set<Cluster>> hostClusterMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,63,private Map<String, Set<Host>> clusterHostMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,80,clusters = new HashMap<String, Cluster>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,81,clustersById = new HashMap<Long, Cluster>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,82,hosts = new HashMap<String, Host>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,83,hostClusterMap = new HashMap<String, Set<Cluster>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,84,clusterHostMap = new HashMap<String, Set<Host>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,98,ClusterEntity clusterEntity = new ClusterEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,99,clusterEntity.setClusterName(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,100,clusterEntity.setDesiredStackVersion(gson.toJson(new StackId()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,102,clusterDAO.create(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,103,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,104,Cluster cluster = clusterFactory.create(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,110,LOG.warn("Unable to create cluster " + clusterName, e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,111,throw new AmbariException("Unable to create cluster " + clusterName, e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,119,if (!clusters.containsKey(clusterName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,120,ClusterEntity clusterEntity = clusterDAO.findByName(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,121,if (clusterEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,122,Cluster cl = getClusterById(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,123,clustersById.put(cl.getClusterId(), cl);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,124,clusters.put(cl.getClusterName(), cl);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,126,clusterHostMap.put(clusterEntity.getClusterName(), new HashSet<Host>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,131,return clusters.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,136,public synchronized Cluster getClusterById(long id) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,137,if (!clustersById.containsKey(id)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,138,ClusterEntity clusterEntity = clusterDAO.findById(id);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,139,if (clusterEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,140,Cluster cluster = clusterFactory.create(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,141,clustersById.put(cluster.getClusterId(), cluster);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,142,clusters.put(clusterEntity.getClusterName(), cluster);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,144,clusterHostMap.put(clusterEntity.getClusterName(), new HashSet<Host>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,149,return clustersById.get(id);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,154,public synchronized List<Host> getHosts() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,155,List<Host> hostList = new ArrayList<Host>(hosts.size());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,156,hostList.addAll(hosts.values());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,158,for (HostEntity hostEntity : hostDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,159,if (!hosts.containsKey(hostEntity.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,160,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,161,hostList.add(getHost(hostEntity.getHostName()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,163,LOG.error("Database externally modified?");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,168,return hostList;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,174,if (!hostClusterMap.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,175,getHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,177,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,178,LOG.debug("Looking up clusters for hostname"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,179,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,180,+ ", mappedClusters=" + hostClusterMap.get(hostname).size());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,182,return Collections.unmodifiableSet(hostClusterMap.get(hostname));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,187,public synchronized Host getHost(String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,188,if (!hosts.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,189,HostEntity hostEntity = hostDAO.findByName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,190,if (hostEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,191,Host host = hostFactory.create(hostEntity, true);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,192,Set<Cluster> cSet = new HashSet<Cluster>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,193,hosts.put(hostname, host);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,194,hostClusterMap.put(hostname, cSet);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,196,for (ClusterEntity clusterEntity : hostEntity.getClusterEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,197,if (clustersById.containsKey(clusterEntity.getClusterId())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,198,cSet.add(clustersById.get(clusterEntity.getClusterId()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,200,cSet.add(getClusterById(clusterEntity.getClusterId()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,207,return hosts.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,211,public synchronized void addHost(String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,213,throw new AmbariException("Duplicate entry for Host"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,214,+ ", hostName= " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,216,HostEntity hostEntity = new HostEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,217,hostEntity.setHostName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,218,hostEntity.setClusterEntities(new ArrayList<ClusterEntity>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,220,Host host = hostFactory.create(hostEntity, false);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,221,host.setAgentVersion(new AgentVersion(""));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,222,List<DiskInfo> emptyDiskList = new ArrayList<DiskInfo>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,223,host.setDisksInfo(emptyDiskList);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,224,host.setHealthStatus(new HostHealthStatus(HealthStatus.UNKNOWN, ""));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,225,host.setHostAttributes(new HashMap<String, String>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,226,host.setState(HostState.INIT);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,228,hosts.put(hostname, host);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,229,hostClusterMap.put(hostname, new HashSet<Cluster>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,230,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,231,LOG.debug("Adding a host to Clusters"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,232,+ ", hostname=" + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,247,public synchronized void mapHostToCluster(String hostname,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,248,String clusterName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,249,Cluster cluster = getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,250,HostImpl host = (HostImpl) getHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,252,if (!hostClusterMap.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,253,throw new HostNotFoundException(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,256,for (Cluster c : hostClusterMap.get(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,257,if (c.getClusterName().equals(clusterName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,258,throw new DuplicateResourceException("Attempted to create a host which already exists: clusterName=" +
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,259,clusterName + ", hostName=" + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,263,if (!isOsSupportedByClusterStack(cluster, host)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,264,String message = "Trying to map host to cluster where stack does not"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,265,+ " support host's os type"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,266,+ ", clusterName=" + clusterName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,268,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,269,+ ", hostOsType=" + host.getOsType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,270,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,271,throw new AmbariException(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,274,mapHostClusterEntities(hostname, cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,276,hostClusterMap.get(hostname).add(cluster);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,277,clusterHostMap.get(clusterName).add(host);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,279,cluster.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,280,host.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,282,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,283,LOG.debug("Mapping a host to a cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,284,+ ", clusterName=" + clusterName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,286,+ ", hostname=" + hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,304,public synchronized Map<String, Cluster> getClusters() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,305,for (ClusterEntity clusterEntity : clusterDAO.findAll()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,306,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,307,if (!clustersById.containsKey(clusterEntity.getClusterId())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,308,getClusterById(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,314,return Collections.unmodifiableMap(clusters);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,318,public synchronized void mapHostsToCluster(Set<String> hostnames,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,319,String clusterName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,320,for (String hostname : hostnames) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,321,mapHostToCluster(hostname, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,326,public synchronized void updateClusterName(String oldName, String newName) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,327,clusters.put(newName, clusters.remove(oldName));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,332,sb.append("Clusters=[ ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,333,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,334,for(Cluster c : clusters.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,335,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,336,sb.append(" , ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,337,first = false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,339,sb.append("\n  ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,340,c.debugDump(sb);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,341,sb.append(" ");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,343,sb.append(" ]");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,351,getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,353,Map<String, Host> hosts = new HashMap<String, Host>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,355,for (Host h : clusterHostMap.get(clusterName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,356,hosts.put(h.getHostName(), h);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,359,return hosts;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,366,Cluster cluster = getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,367,if (!cluster.canBeRemoved()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,368,throw new AmbariException("Could not delete cluster"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,369,+ ", clusterName=" + clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,372,clusters.remove(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,186,ReadWriteLock rwLock = new ReentrantReadWriteLock();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,955,writeLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,977,protected void persistEntities() {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,992,writeLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1005,private void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,23,import com.google.inject.matcher.Matchers;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,30,import org.apache.ambari.server.orm.dao.ClearEntityManagerInterceptor;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,70,bindInterceptors();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,118,private void bindInterceptors() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,119,ClearEntityManagerInterceptor clearEntityManagerInterceptor = new ClearEntityManagerInterceptor();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,120,requestInjection(clearEntityManagerInterceptor);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,121,bindInterceptor(Matchers.any(), Matchers.annotatedWith(Transactional.class), clearEntityManagerInterceptor);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,18,package org.apache.ambari.server.orm.dao;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,21,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,22,import org.aopalliance.intercept.MethodInterceptor;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,23,import org.aopalliance.intercept.MethodInvocation;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,24,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,25,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,27,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,32,public class ClearEntityManagerInterceptor implements MethodInterceptor {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,33,private static final Logger log = LoggerFactory.getLogger(ClearEntityManagerInterceptor.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,36,Provider<EntityManager> entityManagerProvider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,39,public Object invoke(MethodInvocation methodInvocation) throws Throwable {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,40,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,41,return methodInvocation.proceed();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,43,if (!entityManagerProvider.get().getTransaction().isActive()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,44,log.debug("Transaction is not active any more - clearing Entity Manager");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClearEntityManagerInterceptor.java,45,entityManagerProvider.get().clear();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/DaoUtils.java,30,public class DaoUtils {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ExecutionCommandEntity.java,58,if (command != null ? !command.equals(that.command) : that.command != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ExecutionCommandEntity.java,67,result = 31 * result + (command != null ? command.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,221,if (stdError != null ? !stdError.equals(that.stdError) : that.stdError != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,222,if (stdOut != null ? !stdOut.equals(that.stdOut) : that.stdOut != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,238,result = 31 * result + (stdError != null ? stdError.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity.java,239,result = 31 * result + (stdOut != null ? stdOut.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,20,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,22,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,23,import java.util.concurrent.atomic.AtomicLong;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,33,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,34,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,35,import com.google.inject.name.Named;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,22,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,23,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,24,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,32,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,33,import org.apache.ambari.server.state.Clusters;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,34,import org.apache.ambari.server.state.Service;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,35,import org.apache.ambari.server.state.ServiceComponent;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,36,import org.apache.ambari.server.state.ServiceComponentHost;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,39,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,86,Thread.sleep(sleepTime);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActionResourceProvider.java,124,&& null != entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,142,if (PropertyHelper.getPropertyCategory(entry.getKey()).equals("config")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,1,package org.apache.ambari.server.controller.internal;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,59,private static final String CONFIG_HOST_NAME = PropertyHelper.getPropertyId("Config", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,87,String type = (String) map.get(PropertyHelper.getPropertyId("", "type"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,89,String tag = (String) map.get(PropertyHelper.getPropertyId("", "tag"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,94,if (PropertyHelper.getPropertyCategory(entry.getKey()).equals("properties") && null != entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,199,public RequestStatus deleteResources(Predicate predicate) throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,217,!propertyId.equals("/tag") && !propertyId.equals("/type")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,234,public static Map<String, String> getConfigPropertyValues(Map<String, Object> propertyMap) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,237,for (Map.Entry<String,Object> entry : propertyMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,249,String tag = (String) properties.get(CONFIGURATION_CONFIG_TAG_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,189,String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,190,if (propertyCategory == null || !propertyCategory.equals("config")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,191,unsupportedProperties.add(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,182,String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,183,if (propertyCategory == null || !propertyCategory.equals("config")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,184,unsupportedProperties.add(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaComponentPropertyProvider.java,59,protected String getGangliaClusterName(Resource resource, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaComponentPropertyProvider.java,60,return GANGLIA_CLUSTER_NAMES.get(getComponentName(resource));
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaHostComponentPropertyProvider.java,60,protected String getGangliaClusterName(Resource resource, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaHostComponentPropertyProvider.java,61,return GANGLIA_CLUSTER_NAMES.get(getComponentName(resource));
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaHostPropertyProvider.java,59,protected String getGangliaClusterName(Resource resource, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaHostPropertyProvider.java,60,return "HDPSlaves";
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,65,public static final Map<String, String> GANGLIA_CLUSTER_NAMES = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,68,GANGLIA_CLUSTER_NAMES.put("NAMENODE",           "HDPNameNode");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,69,GANGLIA_CLUSTER_NAMES.put("DATANODE",           "HDPSlaves");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,70,GANGLIA_CLUSTER_NAMES.put("JOBTRACKER",         "HDPJobTracker");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,71,GANGLIA_CLUSTER_NAMES.put("TASKTRACKER",        "HDPSlaves");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,72,GANGLIA_CLUSTER_NAMES.put("HBASE_MASTER",       "HDPHBaseMaster");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,73,GANGLIA_CLUSTER_NAMES.put("HBASE_CLIENT",       "HDPSlaves");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,74,GANGLIA_CLUSTER_NAMES.put("HBASE_REGIONSERVER", "HDPSlaves");
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,170,protected abstract String getGangliaClusterName(Resource resource, String clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,230,ResourceKey key =
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,231,new ResourceKey(getHostName(resource), getGangliaClusterName(resource, clusterName));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,25,import org.apache.ambari.server.state.*;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,28,import org.apache.ambari.server.state.host.HostStatusUpdatesReceivedEvent;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,35,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,36,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,69,private StackId desiredState;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,117,this.desiredStackVersion = gson.fromJson(clusterEntity.getDesiredStackVersion(), StackId.class);
ambari-server/src/main/java/org/apache/ambari/server/api/query/Query.java,24,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/query/Query.java,50,public void addProperty(String property);
ambari-server/src/main/java/org/apache/ambari/server/api/query/Query.java,59,public Map<String, Set<String>> getProperties();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,23,import org.apache.ambari.server.api.util.TreeNodeImpl;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,50,private Map<String, Set<String>> m_mapQueryProperties = new HashMap<String, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,65,private Map<String, Set<String>> m_mapAllProperties;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,70,TreeNode<Set<String>> m_treeAllProperties = new TreeNodeImpl<Set<String>>(null, new HashSet<String>(), null);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,95,m_mapAllProperties = Collections.unmodifiableMap(getClusterController().
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,96,getSchema(resource.getResourceDefinition().getType()).getCategoryProperties());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,97,buildAllPropertiesTree();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,102,public void addProperty(String category, String property, TemporalInfo temporalInfo) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,103,if (category == null && property.equals("*")) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,108,Set<String> setProps = m_mapQueryProperties.get(category);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,109,if (setProps == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,110,setProps = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,111,m_mapQueryProperties.put(category, setProps);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,113,setProps.add(property);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,114,if (temporalInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,115,m_mapPropertyTemporalInfo.put(PropertyHelper.getPropertyId(category, property), temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,119,boolean success = addPropertyToSubResource(category, property, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,120,if (!success) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,122,String propString = category == null ? property : property == null ? category : category + '/' + property;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,123,throw new IllegalArgumentException("An invalid resource property was requested.  Resource: " +
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,124,m_resource.getResourceDefinition().getType() + ", Property: " + propString);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,130,public void addProperty(String property) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,131,addProperty(PropertyHelper.getPropertyCategory(property), PropertyHelper.getPropertyName(property), null);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,145,if (m_mapQueryProperties.isEmpty() && m_mapSubResources.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,182,public Map<String, Set<String>> getProperties() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,183,return Collections.unmodifiableMap(m_mapQueryProperties);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,198,addProperty(schema.getKeyPropertyId(resourceType));
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,207,addProperty(keyPropertyId);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,213,if (temporalInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,214,m_mapQueryProperties.putAll(m_mapAllProperties);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,216,for (Map.Entry<String, Set<String>> entry : m_mapAllProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,217,String path = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,218,Set<String> setProps = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,219,m_mapQueryProperties.put(path, setProps);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,220,m_mapCategoryTemporalInfo.put(path, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,232,private boolean addCategory(String category, String name, TemporalInfo temporalInfo) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,233,if (category != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,234,if (name != null && ! name.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,235,name = category + '/' + name;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,237,name = category;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,240,TreeNode<Set<String>> node = m_treeAllProperties.getChild(name);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,241,if (node == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,242,return false;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,245,addCategory(node, name, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,246,return true;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,249,private void addCategory(TreeNode<Set<String>> node, String category, TemporalInfo temporalInfo) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,250,if (node != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,251,Set<String> setProps = m_mapQueryProperties.get(category);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,252,if (setProps == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,253,setProps = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,254,m_mapQueryProperties.put(category, setProps);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,256,setProps.addAll(node.getObject());
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,257,m_mapCategoryTemporalInfo.put(category, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,259,for (TreeNode<Set<String>> child : node.getChildren()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,260,addCategory(child, category + '/' + child.getName(), temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,334,private void buildAllPropertiesTree() {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,336,for (String category : m_mapAllProperties.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,337,TreeNode<Set<String>> node = m_treeAllProperties.getChild(category);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,338,if (node == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,339,if (category == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,340,node = m_treeAllProperties.addChild(new HashSet<String>(), null);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,342,String[] tokens = category.split("/");
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,343,node = m_treeAllProperties;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,344,for (String t : tokens) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,345,TreeNode<Set<String>> child = node.getChild(t);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,346,if (child == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,347,child = node.addChild(new HashSet<String>(), t);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,349,node = child;
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,353,node.getObject().addAll(m_mapAllProperties.get(category));
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,360,Map<String, TemporalInfo> mapTemporalInfo = new HashMap<String, TemporalInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,362,for (Map.Entry<String, Set<String>> entry : m_mapQueryProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,363,String group = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,364,for (String property : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,365,String propertyId = PropertyHelper.getPropertyId(group, property);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,367,TemporalInfo temporalInfo = m_mapCategoryTemporalInfo.get(group);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,368,if (temporalInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,369,temporalInfo = m_mapPropertyTemporalInfo.get(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,371,if (temporalInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,372,mapTemporalInfo.put(propertyId, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,374,setProperties.add(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,378,return PropertyHelper.getReadRequest(setProperties, mapTemporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,414,return m_mapAllProperties.equals(that.m_mapAllProperties) &&
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,415,m_mapCategoryTemporalInfo.equals(that.m_mapCategoryTemporalInfo) &&
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,417,m_mapQueryProperties.equals(that.m_mapQueryProperties) &&
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,426,result = 31 * result + m_mapQueryProperties.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,429,result = 31 * result + m_mapAllProperties.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,113,resource.getQuery().addProperty(m_controller.getSchema(
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,117,resource.getQuery().addProperty(m_controller.getSchema(subResDef.getType()).getKeyPropertyId(fkType));
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,23,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,42,public abstract class GangliaPropertyProvider implements PropertyProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,47,private final Set<String> propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,49,private final Map<String, Map<String, PropertyInfo>> componentPropertyInfoMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,88,this.componentPropertyInfoMap = componentPropertyInfoMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,96,for (Map.Entry<String, Map<String, PropertyInfo>> entry : componentPropertyInfoMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,97,propertyIds.addAll(entry.getValue().keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,108,Set<String> ids = PropertyHelper.getRequestPropertyIds(propertyIds, request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,128,public Set<String> getPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,129,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,133,public Set<String> checkPropertyIds(Set<String> propertyIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,134,if (!this.propertyIds.containsAll(propertyIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,135,Set<String> unsupportedPropertyIds = new HashSet<String>(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,136,unsupportedPropertyIds.removeAll(this.propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,137,return unsupportedPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,139,return Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,233,Map<String, PropertyInfo> metrics = componentPropertyInfoMap.get(getComponentName(resource));
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,235,if (metrics != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,236,for (String propertyId : ids) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,237,PropertyInfo propertyInfo = metrics.get(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,238,if (propertyInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,239,TemporalInfo temporalInfo = request.getTemporalInfo(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,241,if ((temporalInfo == null && propertyInfo.isPointInTime()) || (temporalInfo != null && propertyInfo.isTemporal())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,242,RRDRequest rrdRequest = requests.get(temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,243,if (rrdRequest == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,244,rrdRequest = new RRDRequest(clusterName, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,245,requests.put(temporalInfo, rrdRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,247,rrdRequest.putResource(key, resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,248,rrdRequest.putPropertyId(propertyInfo.getPropertyId(), propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,453,Map<String, PropertyInfo> metricsMap = componentPropertyInfoMap.get(getComponentName(resource));
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,23,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,31,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,42,public class GangliaReportPropertyProvider implements PropertyProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,47,private final Set<String> propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,49,private final Map<String, PropertyInfo> componentMetrics;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,68,public GangliaReportPropertyProvider(Map<String, PropertyInfo> componentMetrics,
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,73,this.componentMetrics      = componentMetrics;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,78,propertyIds = new HashSet<String>(componentMetrics.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,98,public Set<String> getPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,99,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,103,public Set<String> checkPropertyIds(Set<String> propertyIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,104,if (!this.propertyIds.containsAll(propertyIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,105,Set<String> unsupportedPropertyIds = new HashSet<String>(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,106,unsupportedPropertyIds.removeAll(this.propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,107,return unsupportedPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,109,return Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,142,setProperties(resource, clusterName, request,
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,143,PropertyHelper.getRequestPropertyIds(propertyIds, request, predicate));
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,173,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,174,LOG.debug("Caught exception getting Ganglia metrics : " + e + " : spec=" + spec);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,186,for (String propertyId : ids) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,187,PropertyInfo propertyInfo = componentMetrics.get(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,189,if (propertyInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaReportPropertyProvider.java,191,TemporalInfo temporalInfo = request.getTemporalInfo(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,26,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,45,super(clusterDefinition);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,53,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,54,return PropertyHelper.getPropertyIds(Resource.Type.Cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,58,public Map<Resource.Type, String> getKeyPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerClusterProvider.java,59,return PropertyHelper.getKeyPropertyIds(Resource.Type.Cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerComponentProvider.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerComponentProvider.java,47,super(clusterDefinition);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerComponentProvider.java,55,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerComponentProvider.java,56,return PropertyHelper.getPropertyIds(Resource.Type.Component);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerComponentProvider.java,60,public Map<Resource.Type, String> getKeyPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerComponentProvider.java,61,return PropertyHelper.getKeyPropertyIds(Resource.Type.Component);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostComponentProvider.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostComponentProvider.java,48,super(clusterDefinition);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostComponentProvider.java,56,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostComponentProvider.java,57,return PropertyHelper.getPropertyIds(Resource.Type.HostComponent);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostComponentProvider.java,61,public Map<Resource.Type, String> getKeyPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostComponentProvider.java,62,return PropertyHelper.getKeyPropertyIds(Resource.Type.HostComponent);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostProvider.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostProvider.java,48,super(clusterDefinition);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostProvider.java,56,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostProvider.java,57,return PropertyHelper.getPropertyIds(Resource.Type.Host);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostProvider.java,61,public Map<Resource.Type, String> getKeyPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerHostProvider.java,62,return PropertyHelper.getKeyPropertyIds(Resource.Type.Host);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,31,private final Resource.Type type;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,36,super(clusterDefinition);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,37,this.type = type;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,44,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,45,return PropertyHelper.getPropertyIds(type);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,49,public Map<Resource.Type, String> getKeyPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java,50,return PropertyHelper.getKeyPropertyIds(type);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java,53,public GSInstallerResourceProvider(ClusterDefinition clusterDefinition) {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java,95,propertyIds.removeAll(getPropertyIdsForSchema());
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerServiceProvider.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerServiceProvider.java,46,super(clusterDefinition);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerServiceProvider.java,54,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerServiceProvider.java,55,return PropertyHelper.getPropertyIds(Resource.Type.Service);
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerServiceProvider.java,59,public Map<Resource.Type, String> getKeyPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerServiceProvider.java,60,return PropertyHelper.getKeyPropertyIds(Resource.Type.Service);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,192,PropertyHelper.getGangliaPropertyIds(type).get("*"),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,21,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,44,public abstract class ResourceProviderImpl implements ResourceProvider, ObservableResourceProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,49,private final Set<String> propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,68,LoggerFactory.getLogger(ResourceProviderImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,78,protected ResourceProviderImpl(Set<String> propertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,79,Map<Resource.Type, String> keyPropertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,80,AmbariManagementController managementController) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,81,this.propertyIds          = propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,90,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,91,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,100,public Set<String> checkPropertyIds(Set<String> propertyIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,101,if (!this.propertyIds.containsAll(propertyIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,102,Set<String> unsupportedPropertyIds = new HashSet<String>(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,103,unsupportedPropertyIds.removeAll(this.propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,104,return unsupportedPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,106,return Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,132,protected Set<String> getPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,133,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,197,SimplifyingPredicateVisitor visitor = new SimplifyingPredicateVisitor(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,268,protected static void setResourceProperty(Resource resource, String propertyId, Object value, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,269,if (requestedIds.contains(propertyId)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,270,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,271,LOG.debug("Setting property for resource"
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,273,+ ", propertyId=" + propertyId
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,274,+ ", value=" + value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,276,resource.setProperty(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,278,else {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,279,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,280,LOG.debug("Skipping property for resource as not in requestedIds"
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,282,+ ", propertyId=" + propertyId
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,283,+ ", value=" + value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,298,public static ResourceProvider getResourceProvider(Resource.Type type,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,299,Set<String> propertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,300,Map<Resource.Type, String> keyPropertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,301,AmbariManagementController managementController) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,302,switch (type) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,303,case Cluster:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,304,return new ClusterResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,305,case Service:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,306,return new ServiceResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,307,case Component:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,308,return new ComponentResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,309,case Host:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,310,return new HostResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,311,case HostComponent:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,312,return new HostComponentResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,313,case Configuration:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,314,return new ConfigurationResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,315,case Action:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,316,return new ActionResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,317,case Request:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,318,return new RequestResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,319,case Task:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,320,return new TaskResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,321,case User:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,322,return new UserResourceProvider(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,323,default:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ResourceProviderImpl.java,324,throw new IllegalArgumentException("Unknown type " + type);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ActionResourceProvider.java,37,class ActionResourceProvider extends ResourceProviderImpl {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterControllerImpl.java,112,schema = new SchemaImpl(ensureResourceProvider(type), ensurePropertyProviders(type));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,46,class ClusterResourceProvider extends ResourceProviderImpl{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,103,Set<String> requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,37,class ComponentResourceProvider extends ResourceProviderImpl{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,115,Set<String>   requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,49,class ConfigurationResourceProvider extends ResourceProviderImpl {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,51,return ResourceProviderImpl.getResourceProvider(type, PropertyHelper.getPropertyIds(type),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,52,PropertyHelper.getKeyPropertyIds(type), managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,37,class HostComponentResourceProvider extends ResourceProviderImpl {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,111,Set<String>   requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,36,class HostResourceProvider extends ResourceProviderImpl{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,139,Set<String>   requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,43,class RequestResourceProvider extends ResourceProviderImpl{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,81,Set<String>         requestedIds         = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,21,import org.apache.ambari.server.controller.spi.PropertyProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,25,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,27,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,28,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,29,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,30,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,31,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,45,private final List<PropertyProvider> propertyProviders;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,50,private final Map<String, Set<String>> categoryProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,61,public SchemaImpl(ResourceProvider resourceProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,62,List<PropertyProvider> propertyProviders) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,64,this.propertyProviders  = propertyProviders;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,65,this.categoryProperties = initCategoryProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,77,public Map<String, Set<String>> getCategoryProperties() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,78,return categoryProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,84,private Map<String, Set<String>> initCategoryProperties() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,85,Map<String, Set<String>> categories = new HashMap<String, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,87,for (String propertyId : getPropertyIds()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,88,final String category = PropertyHelper.getPropertyCategory(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,89,Set<String> properties = categories.get(category);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,90,if (properties == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,91,properties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,92,categories.put(category, properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,94,properties.add(PropertyHelper.getPropertyName(propertyId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,96,return categories;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,99,private Set<String> getPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,100,Set<String> propertyIds = new HashSet<String>(resourceProvider.getPropertyIdsForSchema());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,101,if (propertyProviders != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,102,for (PropertyProvider propertyProvider : propertyProviders) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,103,propertyIds.addAll(propertyProvider.getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/SchemaImpl.java,106,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,37,class ServiceResourceProvider extends ResourceProviderImpl {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,104,Set<ServiceResponse> responses    =  getResources(new Command<Set<ServiceResponse>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,111,Set<String>   requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,44,class TaskResourceProvider extends ResourceProviderImpl{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,94,Set<String> requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,36,class UserResourceProvider extends ResourceProviderImpl{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,109,Set<String>   requestedIds = PropertyHelper.getRequestPropertyIds(getPropertyIds(), request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,46,public class JDBCResourceProvider implements ResourceProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,50,private final Set<String> propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,52,private final ConnectionFactory connectionFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,71,this.connectionFactory = connectionFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,72,this.type = type;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,73,this.propertyIds = propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,74,this.keyPropertyIds = keyPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,82,Set<String> propertyIds = PropertyHelper.getRequestPropertyIds(this.propertyIds, request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,401,public Set<String> getPropertyIdsForSchema() {
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,402,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,411,public Set<String> checkPropertyIds(Set<String> propertyIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,412,if (!this.propertyIds.containsAll(propertyIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,413,Set<String> unsupportedPropertyIds = new HashSet<String>(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,414,unsupportedPropertyIds.removeAll(this.propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,415,return unsupportedPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,417,return Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,24,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,30,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,41,public class JMXPropertyProvider implements PropertyProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,49,private final Set<String> propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,51,private final Map<String, Map<String, PropertyInfo>> componentMetrics;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,96,this.componentMetrics         = componentMetrics;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,103,propertyIds = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,104,for (Map.Entry<String, Map<String, PropertyInfo>> entry : componentMetrics.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,105,propertyIds.addAll(entry.getValue().keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,127,public Set<String> getPropertyIds() {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,128,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,132,public Set<String> checkPropertyIds(Set<String> propertyIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,133,if (!this.propertyIds.containsAll(propertyIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,134,Set<String> unsupportedPropertyIds = new HashSet<String>(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,135,unsupportedPropertyIds.removeAll(this.propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,136,return unsupportedPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,138,return Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,156,Set<String> ids = PropertyHelper.getRequestPropertyIds(propertyIds, request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,180,Map<String, PropertyInfo> metrics = componentMetrics.get(componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,182,if (metrics == null || hostName == null || port == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,202,PropertyInfo propertyInfo = metrics.get(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,204,if (propertyInfo != null && propertyInfo.isPointInTime()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,206,String property = propertyInfo.getPropertyId();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,207,String category = "";
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,209,List<String> keyList = new LinkedList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,210,int keyStartIndex = property.indexOf('[', 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,211,int firstKeyIndex = keyStartIndex > -1 ? keyStartIndex : property.length();
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,212,while (keyStartIndex > -1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,213,int keyEndIndex = property.indexOf(']', keyStartIndex);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,214,if (keyEndIndex > -1 & keyEndIndex > keyStartIndex) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,215,keyList.add(property.substring(keyStartIndex + 1, keyEndIndex));
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,216,keyStartIndex = property.indexOf('[', keyEndIndex);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,218,else {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,219,keyStartIndex = -1;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,224,int dotIndex = property.lastIndexOf('.', firstKeyIndex - 1);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,225,if (dotIndex != -1){
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,226,category = property.substring(0, dotIndex);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,227,property = property.substring(dotIndex + 1, firstKeyIndex);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,230,Map<String, Object> properties = categories.get(category);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,231,if (properties != null && properties.containsKey(property)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,232,Object value = properties.get(property);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,233,if (keyList.size() > 0 && value instanceof Map) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,234,Map map = (Map) value;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,235,for (String key : keyList) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,236,value = map.get(key);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,237,if (value instanceof Map) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,238,map = (Map) value;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,240,else {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,241,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,245,resource.setProperty(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/PropertyProvider.java,20,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/PropertyProvider.java,54,public Set<String> getPropertyIds();
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/ResourceProvider.java,137,public Set<String> getPropertyIdsForSchema();
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/Schema.java,20,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/Schema.java,21,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/Schema.java,52,public Map<String, Set<String>> getCategoryProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,54,return category == null ? name : category + EXTERNAL_PATH_SEP + name;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,153,public static Set<String> getRequestPropertyIds(Set<String> providerPropertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,154,Request request,
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,155,Predicate predicate) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,156,Set<String> propertyIds  = request.getPropertyIds();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,159,if (propertyIds == null || propertyIds.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,160,providerPropertyIds = new HashSet<String>(providerPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,170,return providerPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,173,propertyIds = new HashSet<String>(propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,175,if (predicate != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,176,propertyIds.addAll(PredicateHelper.getPropertyIds(predicate));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,178,propertyIds.retainAll(providerPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,179,return propertyIds;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,73,public static final String LDAP_USE_SSL_KEY = "authorization.ldap.useSSL";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,50,public static final String BOOTSTRAP_SCRIPT_DEFAULT =  "/usr/bin/ambari_bootstrap";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,169,SRVR_CRT_PASS_FILE_KEY, SRVR_CRT_PASS_FILE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,181,SRVR_CRT_PASS_LEN_KEY, SRVR_CRT_PASS_LEN_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,195,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,196,throw new RuntimeException(
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,200,LOG.info("Reading password from existing file");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,232,CONFIG_FILE, ie);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,241,fileName = BOOTSTRAP_DIR_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,128,this.jdkResourceUrl = "http://" + masterHostname + ":"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,130,+ JDK_RESOURCE_LOCATION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,77,public static final int CLIENT_API_PORT = 8080;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,101,public static int getResourcesPort() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,102,return CLIENT_API_PORT;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,281,apiConnector.setPort(CLIENT_API_PORT);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2703,throw new AmbariException("Delete cluster not supported");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2725,throw new AmbariException("Delete services not supported");
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,161,public Collection<HostComponentConfigMappingEntity> getHostComponentConfigMappingEntities() {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,114,public void persist() {
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,79,public void removeAllComponents() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,78,public void removeAllServiceComponentHosts() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,559,componentConfigMappingDAO.removeByType(configTypes);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,417,serviceEntity = clusterServiceDAO.merge(serviceEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,418,serviceDesiredStateEntity = serviceDesiredStateDAO.merge(serviceDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,466,public synchronized void removeAllComponents() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,480,for (ServiceComponent component : components.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,481,component.removeAllServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,502,component.removeAllServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,450,service.removeAllComponents();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,470,service.removeAllComponents();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,371,cluster.deleteAllServices();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1234,hostComponentDesiredConfigMappingDAO.removeByType(configTypes);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,360,File[] stacks = stackRoot.listFiles();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,364,File[] concretStacks = stackFolder.listFiles();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,398,File[] servicesFolders = servicesRootFolder.listFiles();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,424,File[] configFiles = serviceConfigFolder.listFiles();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1814,if (currentState == State.STARTED
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1815,|| currentState == State.STARTING) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1816,throw new AmbariException("Changing of configs not supported"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1817,+ " in STARTING or STARTED state"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1822,+ ", currentState=" + currentState
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1823,+ ", newDesiredState=" + newDesiredState);
ambari-server/src/main/java/org/apache/ambari/server/api/query/QueryImpl.java,160,for (Map.Entry<String, ResourceInstance> entry : m_mapSubResources.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,142,m_query.equals(that.m_query) &&
ambari-server/src/main/java/org/apache/ambari/server/api/resources/ResourceInstanceImpl.java,150,int result =m_query.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,25,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,26,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,31,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,32,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,33,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,34,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,35,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,36,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,37,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,95,propertyIds = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,417,Collection<Resource> populatedResources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,420,List<GangliaMetric> gangliaMetrics = new ObjectMapper().readValue(getStreamProvider().readFrom(spec),
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,421,new TypeReference<List<GangliaMetric>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,424,if (gangliaMetrics != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,425,for (GangliaMetric gangliaMetric : gangliaMetrics) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,427,ResourceKey key = new ResourceKey(gangliaMetric.getHost_name(), gangliaMetric.getCluster_name());
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,428,Set<Resource> resourceSet = resources.get(key);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,429,if (resourceSet != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,430,for (Resource resource : resourceSet) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,431,populateResource(resource, gangliaMetric);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,441,return populatedResources;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXMetricHolder.java,27,public class JMXMetricHolder {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,189,JMXMetricHolder metricHolder = new ObjectMapper().readValue(streamProvider.readFrom(spec), JMXMetricHolder.class);
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,443,private static final String WHERE = " where";
ambari-server/src/main/java/org/apache/ambari/eventdb/db/PostgresConnector.java,451,sb.append(" (");
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,19,package org.apache.ambari.server.api.handlers;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,21,import org.apache.ambari.server.api.services.Request;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,22,import org.apache.ambari.server.api.services.Result;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,28,public class DelegatingRequestHandler implements RequestHandler {
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,30,public Result handleRequest(Request request) {
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,31,Result result = getRequestHandlerFactory().getRequestHandler(request.getRequestType()).handleRequest(request);
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,32,request.getResultPostProcessor().process(result);
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,34,return result;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,42,RequestHandlerFactory getRequestHandlerFactory() {
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/DelegatingRequestHandler.java,43,return new RequestHandlerFactory();
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,21,import org.apache.ambari.server.controller.utilities.ClusterControllerHelper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,22,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,23,import org.apache.ambari.server.controller.spi.ClusterController;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,24,import org.apache.ambari.server.controller.spi.Request;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,32,public abstract class BasePersistenceManager implements PersistenceManager {
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,34,protected ClusterController getClusterController() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,35,return ClusterControllerHelper.getClusterController();
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,38,protected Request createControllerRequest(Set<Map<String, Object>> setProperties) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/BasePersistenceManager.java,39,return PropertyHelper.getCreateRequest(setProperties);
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,21,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,22,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,23,import org.apache.ambari.server.controller.spi.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,25,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,32,public class CreatePersistenceManager extends BasePersistenceManager {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,34,public RequestStatus persist(ResourceInstance resource, Set<Map<String, Object>> setProperties) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,35,ClusterController controller = getClusterController();
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,36,Map<Resource.Type, String> mapResourceIds = resource.getIds();
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,37,Resource.Type type = resource.getResourceDefinition().getType();
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,38,Schema schema = controller.getSchema(type);
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,40,if (setProperties.size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,41,setProperties.add(new HashMap<String, Object>());
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,44,for (Map<String, Object> mapProperties : setProperties) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,45,for (Map.Entry<Resource.Type, String> entry : mapResourceIds.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,46,String property = schema.getKeyPropertyId(entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,47,if (! mapProperties.containsKey(property)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,48,mapProperties.put(property, entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,53,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,54,return controller.createResources(type, createControllerRequest(setProperties));
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,57,throw new RuntimeException("Create of resource failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/CreatePersistenceManager.java,60,throw new RuntimeException("Create of resource failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,21,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,22,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,23,import org.apache.ambari.server.controller.spi.RequestStatus;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,24,import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,33,public class DeletePersistenceManager extends BasePersistenceManager {
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,35,public RequestStatus persist(ResourceInstance resource, Set<Map<String, Object>> setProperties) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,36,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,38,return getClusterController().deleteResources(resource.getResourceDefinition().getType(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,39,resource.getQuery().getPredicate());
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,42,throw new RuntimeException("Delete of resource failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/DeletePersistenceManager.java,45,throw new RuntimeException("Delete of resource failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,21,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,22,import org.apache.ambari.server.controller.spi.RequestStatus;
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,24,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,25,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,31,public interface PersistenceManager {
ambari-server/src/main/java/org/apache/ambari/server/api/services/PersistenceManager.java,43,public RequestStatus persist(ResourceInstance resource, Set<Map<String, Object>> setProperties);
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,20,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,22,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,24,import javax.ws.rs.core.HttpHeaders;
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,25,import javax.ws.rs.core.UriInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,32,public class QueryCreateRequest extends RequestImpl {
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,42,public QueryCreateRequest(HttpHeaders headers, String body, UriInfo uriInfo, Type requestType, ResourceInstance resource) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,43,super(headers, body, uriInfo, requestType, resource);
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,47,public Set<Map<String, Object>> getHttpBodyProperties() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,48,String httpBody = getHttpBody();
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,50,int startIdx = httpBody.indexOf("[");
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,51,int endIdx = httpBody.lastIndexOf("]");
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,53,return getHttpBodyParser().parse(httpBody.substring(startIdx, endIdx + 1));
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,57,public Type getRequestType() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/QueryCreateRequest.java,58,return Type.QUERY_POST;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,21,import org.apache.ambari.server.api.resources.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,22,import org.apache.ambari.server.api.services.parsers.JsonPropertyParser;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,23,import org.apache.ambari.server.api.services.parsers.RequestBodyParser;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,24,import org.apache.ambari.server.api.services.serializers.JsonSerializer;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,25,import org.apache.ambari.server.api.services.serializers.ResultSerializer;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,26,import org.apache.ambari.server.controller.internal.TemporalInfoImpl;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,27,import org.apache.ambari.server.controller.predicate.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,28,import org.apache.ambari.server.controller.spi.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,29,import org.apache.ambari.server.controller.spi.TemporalInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,31,import javax.ws.rs.core.HttpHeaders;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,32,import javax.ws.rs.core.UriInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,33,import java.io.UnsupportedEncodingException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,34,import java.net.URLDecoder;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,35,import java.util.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,36,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,37,import java.util.regex.Pattern;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,42,public class RequestImpl implements Request {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,47,private UriInfo m_uriInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,52,private HttpHeaders m_headers;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,57,private String m_body;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,62,private Type m_type;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,67,private Pattern m_pattern = Pattern.compile("!=|>=|<=|=|>|<");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,72,private ResourceInstance m_resource;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,84,public RequestImpl(HttpHeaders headers, String body, UriInfo uriInfo,
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,85,Type requestType, ResourceInstance resource) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,87,m_headers  = headers;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,88,m_body     = body;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,89,m_uriInfo  = uriInfo;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,90,m_type     = requestType;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,91,m_resource = resource;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,95,public ResourceInstance getResource() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,96,return m_resource;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,100,public String getURI() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,101,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,102,return URLDecoder.decode(m_uriInfo.getRequestUri().toString(), "UTF-8");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,104,throw new RuntimeException("Unable to decode URI: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,109,public Type getRequestType() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,110,return m_type;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,114,public int getAPIVersion() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,115,return 0;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,119,public Predicate getQueryPredicate() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,122,String uri = getURI();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,123,int qsBegin = uri.indexOf("?");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,125,if (qsBegin == -1) return null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,127,String[] tokens = uri.substring(qsBegin + 1).split("&");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,129,Set<BasePredicate> setPredicates = new HashSet<BasePredicate>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,130,for (String outerToken : tokens) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,131,if (outerToken != null &&  !outerToken.startsWith("fields")) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,132,setPredicates.add(outerToken.contains("|") ?
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,133,handleOrPredicate(outerToken) : createPredicate(outerToken));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,137,if (setPredicates.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,138,return setPredicates.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,140,return new AndPredicate(setPredicates.toArray(new BasePredicate[setPredicates.size()]));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,142,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,147,public Map<String, TemporalInfo> getFields() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,148,Map<String, TemporalInfo> mapProperties;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,149,String partialResponseFields = m_uriInfo.getQueryParameters().getFirst("fields");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,150,if (partialResponseFields == null) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,151,mapProperties = Collections.emptyMap();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,153,Set<String> setMatches = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,156,Pattern re = Pattern.compile("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,157,Matcher m = re.matcher(partialResponseFields);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,158,while (m.find()){
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,159,for (int groupIdx = 0; groupIdx < m.groupCount() + 1; groupIdx++) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,160,setMatches.add(m.group(groupIdx));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,164,mapProperties = new HashMap<String, TemporalInfo>(setMatches.size());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,165,for (String field : setMatches) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,166,TemporalInfo temporalInfo = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,167,if (field.contains("[")) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,168,String[] temporalData = field.substring(field.indexOf('[') + 1,
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,169,field.indexOf(']')).split(",");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,170,field = field.substring(0, field.indexOf('['));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,171,long start = Long.parseLong(temporalData[0].trim());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,172,long end   = -1;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,173,long step  = -1;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,174,if (temporalData.length >= 2) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,175,end = Long.parseLong(temporalData[1].trim());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,176,if (temporalData.length == 3) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,177,step = Long.parseLong(temporalData[2].trim());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,180,temporalInfo = new TemporalInfoImpl(start, end, step);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,182,mapProperties.put(field, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,186,return mapProperties;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,190,public Map<String, List<String>> getHttpHeaders() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,191,return m_headers.getRequestHeaders();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,195,public String getHttpBody() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,196,return m_body;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,200,public Set<Map<String, Object>> getHttpBodyProperties() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,201,return getHttpBodyParser().parse(getHttpBody());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,205,public ResultSerializer getResultSerializer() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,206,return new JsonSerializer();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,210,public ResultPostProcessor getResultPostProcessor() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,213,return getRequestType() == Type.GET ? new ResultPostProcessorImpl(this) : new NullPostProcessor();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,217,public PersistenceManager getPersistenceManager() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,218,switch (getRequestType()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,219,case POST:
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,220,case QUERY_POST:
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,221,return new CreatePersistenceManager();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,222,case PUT:
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,223,return new UpdatePersistenceManager();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,224,case DELETE:
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,225,return new DeletePersistenceManager();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,226,case GET:
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,227,throw new IllegalStateException("Tried to get persistence manager for get operation");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,228,default:
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,229,throw new IllegalStateException("Tried to get persistence manager for unknown operation type");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,233,private BasePredicate createPredicate(String token) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,235,Matcher m = m_pattern.matcher(token);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,236,m.find();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,238,String propertyId = token.substring(0, m.start());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,239,String     value      = token.substring(m.end());
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,240,String     operator   = m.group();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,242,if (operator.equals("=")) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,243,return new EqualsPredicate<String>(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,245,return new NotPredicate(new EqualsPredicate<String>(propertyId, value));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,247,return new LessPredicate<String>(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,249,return new GreaterPredicate<String>(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,251,return new LessEqualsPredicate<String>(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,253,return new GreaterEqualsPredicate<String>(propertyId, value);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,255,throw new RuntimeException("Unknown operator provided in predicate: " + operator);
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,259,private BasePredicate handleOrPredicate(String predicate) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,260,Set<BasePredicate> setPredicates = new HashSet<BasePredicate>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,261,String[] tokens = predicate.split("\\|");
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,262,for (String tok : tokens) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,263,setPredicates.add(createPredicate(tok));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,266,return new OrPredicate(setPredicates.toArray(new BasePredicate[setPredicates.size()]));
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,269,protected RequestBodyParser getHttpBodyParser() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,270,return new JsonPropertyParser();
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,273,private static class NullPostProcessor implements ResultPostProcessor {
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestImpl.java,275,public void process(Result result) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,21,import javax.ws.rs.core.Response;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,26,public class ResponseFactory {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,36,public Response createResponse(Request.Type requestType, Object result, boolean synchronous) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,38,int status = 200;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,40,if (synchronous) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,41,if (requestType == Request.Type.POST) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,43,status = 201;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,46,status = 202;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResponseFactory.java,49,return Response.status(status).entity(result).build();
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,19,package org.apache.ambari.server.api.services;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,22,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,23,import org.apache.ambari.server.api.resources.ResourceInstance;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,24,import org.apache.ambari.server.controller.spi.RequestStatus;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,25,import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,27,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,28,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,34,public class UpdatePersistenceManager extends BasePersistenceManager {
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,36,public RequestStatus persist(ResourceInstance resource, Set<Map<String, Object>> setProperties) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,37,try {
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,38,return getClusterController().updateResources(resource.getResourceDefinition().getType(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,39,createControllerRequest(setProperties), resource.getQuery().getPredicate());
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,42,throw new RuntimeException("Update of resource failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpdatePersistenceManager.java,45,throw new RuntimeException("Update of resource failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,437,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java,438,LOG.debug("Caught exception getting Ganglia metrics : spec=" + spec, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/MetricsMapping.java,1,package org.apache.ambari.server.controller.ganglia;
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/MetricsMapping.java,24,public class MetricsMapping {
ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/MetricsMapping.java,26,private static String[] metrics = new String[] {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,49,private static final String HOST_CLUSTER_NAME_PROPERTY_ID             = PropertyHelper.getPropertyId("Hosts", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,50,private static final String HOST_NAME_PROPERTY_ID                     = PropertyHelper.getPropertyId("Hosts", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,51,private static final String HOST_IP_PROPERTY_ID                       = PropertyHelper.getPropertyId("Hosts", "ip");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,57,private static final String GANGLIA_MONITOR                           = "GANGLIA_MONITOR";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,58,private static final String GANGLIA_SERVER_OLD                        = "GANGLIA_MONITOR_SERVER";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,76,private Map<String, Map<String, String>> clusterHostMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,146,public Map<String, String> getHostMapping(String clusterName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,147,checkInit();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,148,return clusterHostMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,271,clusterHostMap             = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,280,provider = getResourceProvider(Resource.Type.Host);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,281,request  = PropertyHelper.getReadRequest(HOST_NAME_PROPERTY_ID, HOST_IP_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,283,Predicate predicate   = new PredicateBuilder().property(HOST_CLUSTER_NAME_PROPERTY_ID).
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,284,equals(clusterName).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,286,Set<Resource>       hosts   = provider.getResources(request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,287,Map<String, String> hostMap = clusterHostMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,289,if (hostMap == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,290,hostMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,291,clusterHostMap.put(clusterName, hostMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,294,for (Resource host : hosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,295,String hostName = (String) host.getPropertyValue(HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,296,String hostIp   = (String) host.getPropertyValue(HOST_IP_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,297,hostMap.put(hostName, hostIp == null ? hostName : hostIp);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,306,predicate = new PredicateBuilder().property(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,321,hostComponentMap.put(componentName, hostMap.get(hostName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,324,if (componentName.equals(GANGLIA_SERVER) || componentName.equals(GANGLIA_MONITOR) ||componentName.equals(GANGLIA_SERVER_OLD)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,325,clusterGangliaCollectorMap.put(clusterName, clusterHostMap.get(clusterName).get(hostName));
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXHostProvider.java,51,public Map<String, String> getHostMapping(String clusterName) throws SystemException ;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,164,if (jmxHostProvider.getHostMapping(clusterName) == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,165,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,176,String name = (String) resource.getPropertyValue(hostNamePropertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,177,hostName = jmxHostProvider.getHostMapping(clusterName).get(name);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,250,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,251,LOG.debug("Caught exception getting JMX metrics : spec=" + spec, e);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,548,+ ", hostname=" + sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/DaoUtils.java,57,query.setParameter(i+1, parameters[i]);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,24,import org.apache.ambari.server.Role;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,33,import javax.persistence.Query;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,53,public List<HostRoleCommandEntity> findByPKs(Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,58,return daoUtils.selectList(query, taskIds);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,107,this.isClientComponent = compInfo.isClient();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,154,this.isClientComponent = compInfo.isClient();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,93,this.components = new HashMap<String, ServiceComponent>();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,100,this.isClientOnlyService = sInfo.isClientOnlyService();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,113,this.serviceDesiredStateEntity = serviceEntity.getServiceDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,117,this.components = new HashMap<String, ServiceComponent>();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,137,this.isClientOnlyService = sInfo.isClientOnlyService();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,113,this.serviceComponentHosts = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,115,this.serviceComponentHostsByHost = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,516,this.stateMachine = clientStateMachineFactory.make(this);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,518,this.stateMachine = daemonStateMachineFactory.make(this);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,544,this.host = clusters.getHost(hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,551,this.resetLastOpInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,572,this.stateMachine = clientStateMachineFactory.make(this);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,574,this.stateMachine = daemonStateMachineFactory.make(this);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,576,this.stateMachine.setCurrentState(stateEntity.getCurrentState());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,579,this.host = clusters.getHost(stateEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,599,try {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,179,assert hostRoleCommandEntity.getTaskId() != null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,59,requestCounter = new AtomicLong(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,60,db.getLastPersistedRequestIdWhenInitialized());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,125,Host hostObject = clusterFsm.getHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,44,public String getVersion() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java,134,m_msg = e.toString();
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/DiskInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeat.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HostInfo.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/Register.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/RegistrationResponse.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,22,import org.apache.ambari.server.api.services.Result;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,24,import org.apache.ambari.server.api.util.TreeNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,25,import org.codehaus.jackson.JsonFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,26,import org.codehaus.jackson.JsonGenerator;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,27,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,28,import org.codehaus.jackson.util.DefaultPrettyPrinter;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,30,import java.io.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,31,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,32,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,95,p.indentArraysWith(new DefaultPrettyPrinter.Lf2SpacesIndenter());
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,163,p.indentArraysWith(new DefaultPrettyPrinter.Lf2SpacesIndenter());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,25,import org.apache.ambari.server.state.svccomphost.*;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,26,import org.codehaus.jackson.annotate.JsonCreator;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,27,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,45,import org.codehaus.jackson.JsonGenerationException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,47,import org.codehaus.jackson.map.JsonMappingException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,48,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,49,import org.codehaus.jackson.map.SerializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,155,mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,156,mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, true);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,107,if (availableMem != null ? !availableMem.equals(that.availableMem) : that.availableMem != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,108,if (timeInState != null ? !timeInState.equals(that.timeInState) : that.timeInState!= null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,109,if (agentVersion != null ? !agentVersion.equals(that.agentVersion) : that.agentVersion != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,110,if (currentState != null ? !currentState.equals(that.currentState) : that.currentState != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,113,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,119,result = 31 * result + (availableMem != null ? availableMem.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,120,result = 31 * result + (timeInState != null ? timeInState.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,121,result = 31 * result + (agentVersion != null ? agentVersion.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,122,result = 31 * result + (currentState != null ? currentState.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,123,return result;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,81,String statusCode = FileUtils.readFileToString(done).trim();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,130,FileUtils.writeStringToFile(sshKeyFile, data);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,216,FileUtils.writeStringToFile(agentCrtReqFile, agentCrtReqContent);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,239,agentCrtContent = FileUtils.readFileToString(agentCrtFile);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,96,StringBuilder ret = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,97,if (list == null) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,98,return "";
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,101,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,102,for (String host: list) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,103,ret.append(host);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,105,ret.append(",");
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,107,return ret.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,102,if (hostNames != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,103,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,104,for (String hostName : hostNames) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,105,if (i != 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,106,sb.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,108,++i;
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,109,sb.append(hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,112,sb.append("] }");
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java,160,int result = clusterId != null? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,91,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,349,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,93,String host = hostObj.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,95,String hostname = hostObj.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,106,hostObj.handleEvent(new HostHeartbeatLostEvent(host));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,110,actionManager.handleLostHost(host);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,22,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,86,public Date getCreateTime() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,90,public void setCreateTime(Date createTime) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,40,createTime = userEntity.getCreateTime();
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,166,public String getServerCert() {
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,167,Map<String, String> configsMap = configs.getConfigsMap();
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,170,String srvrCrtContent = null;
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,171,try {
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,172,srvrCrtContent = FileUtils.readFileToString(certFile);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,174,LOG.error(e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,176,return srvrCrtContent;
ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/CertificateDownload.java,44,public String downloadSrvrCrt() {
ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/CertificateDownload.java,45,return certMan.getServerCert();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,57,static {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,58,componentToClusterInfoKeyMap.put("NAMENODE", "namenode_host");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,59,componentToClusterInfoKeyMap.put("JOBTRACKER", "jtnode_host");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,61,componentToClusterInfoKeyMap.put("ZOOKEEPER_SERVER", "zookeeper_hosts");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,63,componentToClusterInfoKeyMap.put("HBASE_REGIONSERVER", "hbase_rs_hosts");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,64,componentToClusterInfoKeyMap.put("HIVE_SERVER", "hive_server_host");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,65,componentToClusterInfoKeyMap.put("OOZIE_SERVER", "oozie_server");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,70,componentToClusterInfoKeyMap.put("DASHBOARD", "dashboard_host");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,74,componentToClusterInfoKeyMap.put("DATANODE", "slave_hosts");
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,76,componentToClusterInfoKeyMap.put("HBASE_REGIONSERVER", "hbase_rs_hosts");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatResponse.java,31,public class HeartBeatResponse {
ambari-server/src/main/java/org/apache/ambari/server/agent/RegistrationResponse.java,30,public class RegistrationResponse {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,122,response = new HeartBeatResponse();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,391,injector.getInstance(GuiceJpaInitializer.class);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,212,if (hosts.containsKey(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/BaseManagementHandler.java,33,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/BaseManagementHandler.java,34,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/BaseManagementHandler.java,47,protected final static Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/BaseManagementHandler.java,48,LoggerFactory.getLogger(BaseManagementHandler.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,87,protected final static Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/controller/jdbc/JDBCResourceProvider.java,64,protected final static Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,345,hostObject.setState(HostState.INIT);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,348,List<StatusCommand> cmds = heartbeatMonitor.generateStatusCommands(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,354,if (cmds.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,356,hostObject.handleEvent(new HostStatusUpdatesReceivedEvent(hostname,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,357,now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,359,response.setStatusCommands(cmds);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,361,response.setResponseStatus(RegistrationStatus.OK);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,303,clusters.debugDump(clusterDump);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,230,host.importHostInfo(e.hostInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,231,host.setLastRegistrationTime(e.registrationTime);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,233,host.setLastHeartbeatTime(e.registrationTime);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,234,host.setTimeInState(e.registrationTime);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,235,host.setAgentVersion(e.agentVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,236,host.setPublicHostName(e.publicHostName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,38,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,31,private String clusterName;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,46,public void setClusterName(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,47,this.clusterName = clusterName;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,51,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,52,return this.clusterName;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,69,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,70,return clusterName;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,73,public void setClusterName(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,74,this.clusterName = clusterName;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,37,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,143,if (heartbeat.componentStatus.size() > 0
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,145,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,146,LOG.debug("Got component status updates");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,149,LOG.warn("Failed to notify the host about component status updates", e);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatResponse.java,83,public boolean isRestartAgent() {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatResponse.java,88,public void setRestartAgent(boolean restartAgent) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,122,List<StatusCommand> cmds = generateStatusCommands(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,123,if (cmds.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,126,for (StatusCommand command : cmds) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,127,actionQueue.enqueue(hostname, command);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,853,public void createUsers(Set<UserRequest> requests) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,855,for (UserRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,857,if (null == request.getUsername() || request.getUsername().isEmpty() ||
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,858,null == request.getPassword() || request.getPassword().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,859,throw new AmbariException("Username and password must be supplied.");
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,36,public String getUsername() {
ambari-server/src/main/java/org/apache/ambari/server/controller/UserRequest.java,37,return userName;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,54,UserResourceProvider(Set<String> propertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,55,Map<Resource.Type, String> keyPropertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,56,AmbariManagementController managementController) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,74,getManagementController().createUsers(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,99,return getManagementController().getUsers(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,132,throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,144,getManagementController().updateUsers(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,166,getManagementController().deleteUsers(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserResourceProvider.java,184,UserRequest request = new UserRequest ((String) properties.get(USER_USERNAME_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,49,public UserEntity findLocalUserByName(String userName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,50,TypedQuery<UserEntity> query = entityManagerProvider.get().createNamedQuery("localUserByName", UserEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,51,query.setParameter("username", userName.toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,52,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,53,return query.getSingleResult();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,55,return null;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,60,public UserEntity findLdapUserByName(String userName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,61,TypedQuery<UserEntity> query = entityManagerProvider.get().createNamedQuery("ldapUserByName", UserEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,62,query.setParameter("username", userName.toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,63,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,64,return query.getSingleResult();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,66,return null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,61,public Boolean getLdapUser() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,65,public void setLdapUser(Boolean ldapUser) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,73,public String getUserPassword() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,74,return userPassword;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,77,public void setUserPassword(String userPassword) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,78,this.userPassword = userPassword;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,95,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,96,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,97,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,99,UserEntity that = (UserEntity) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,101,if (userId != null ? !userId.equals(that.userId) : that.userId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,102,if (createTime != null ? !createTime.equals(that.createTime) : that.createTime != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,103,if (ldapUser != null ? !ldapUser.equals(that.ldapUser) : that.ldapUser != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,104,if (userName != null ? !userName.equals(that.userName) : that.userName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,105,if (userPassword != null ? !userPassword.equals(that.userPassword) : that.userPassword != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,107,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,112,int result = userId != null ? userId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,113,result = 31 * result + (userName != null ? userName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,114,result = 31 * result + (userPassword != null ? userPassword.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,115,result = 31 * result + (ldapUser != null ? ldapUser.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,116,result = 31 * result + (createTime != null ? createTime.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,117,return result;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java,62,user = userDAO.findLdapUserByName(username);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,31,final int userId;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,32,final String userName;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,33,final boolean ldapUser;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,34,final Date createTime;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,41,ldapUser = userEntity.getLdapUser();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,55,public boolean isLdapUser() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/User.java,56,return ldapUser;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,25,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,47,protected UserDAO userDAO;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,51,protected PasswordEncoder passwordEncoder;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,53,protected Configuration configuration;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,106,UserEntity userEntity = userDAO.findLocalUserByName(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,109,userEntity.setUserPassword(passwordEncoder.encode(newPassword));
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,110,userDAO.merge(userEntity);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,116,userEntity = userDAO.findLdapUserByName(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,117,if (userEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,118,throw new AmbariException("Password of LDAP user cannot be modified");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,120,throw new AmbariException("User " + userName + " not found");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,154,throw new AmbariException("User " + user + " doesn't exist");
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,92,public List<Stage> getStages() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,118,finally {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,119,try {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,120,reader.close();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,122,catch (Exception e) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationRequest.java,46,this.configs = configs;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1223,services.addAll(cluster.getServices().values());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterServiceDAO.java,36,public ClusterServiceEntity findByPK(ClusterServiceEntityPK clusterServiceEntityPK) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterServiceDAO.java,37,return entityManagerProvider.get().find(ClusterServiceEntity.class, clusterServiceEntityPK);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterServiceDAO.java,75,public void removeByPK(ClusterServiceEntityPK clusterServiceEntityPK) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ServiceDesiredStateDAO.java,34,public ServiceDesiredStateEntity findByPK(ServiceDesiredStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ServiceDesiredStateDAO.java,35,return entityManagerProvider.get().find(ServiceDesiredStateEntity.class, primaryKey);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ServiceDesiredStateDAO.java,59,public void removeByPK(ServiceDesiredStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ServiceDesiredStateDAO.java,60,remove(findByPK(primaryKey));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,19,package org.apache.ambari.server.orm.entities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,26,public class ClusterServiceEntityPK implements Serializable {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,27,private Long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,31,public Long getClusterId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,32,return clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,35,public void setClusterId(Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,36,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,52,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,53,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,54,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,56,ClusterServiceEntityPK that = (ClusterServiceEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,58,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,61,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,65,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,66,int result = clusterId !=null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterServiceEntityPK.java,68,return result;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,19,package org.apache.ambari.server.orm.entities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,26,public class ServiceDesiredStateEntityPK implements Serializable {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,27,private Long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,31,public Long getClusterId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,32,return clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,35,public void setClusterId(Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,36,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,52,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,53,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,54,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,56,ServiceDesiredStateEntityPK that = (ServiceDesiredStateEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,58,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,61,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,65,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,66,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ServiceDesiredStateEntityPK.java,68,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,452,ClusterServiceEntityPK pk = new ClusterServiceEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,453,pk.setClusterId(service.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,455,ClusterServiceEntity serviceEntity = clusterServiceDAO.findByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,77,createHostComponentResource(m_clusterName, m_hostName, hostComponentName));
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,128,public Response createHostComponent(String body, @Context HttpHeaders headers, @Context UriInfo ui,
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,131,return handleRequest(headers, body, ui, Request.Type.POST,
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,132,createHostComponentResource(m_clusterName, m_hostName, hostComponentName));
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,153,createHostComponentResource(m_clusterName, m_hostName, hostComponentName));
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,191,createHostComponentResource(m_clusterName, m_hostName, hostComponentName));
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,203,ResourceInstance createHostComponentResource(String clusterName, String hostName, String hostComponentName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,207,mapIds.put(Resource.Type.HostComponent, hostComponentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1250,if (request.getComponentName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1251,if (!sc.getName().equals(request.getComponentName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,213,ServiceComponentHostRequest serviceComponentHostRequest = new ServiceComponentHostRequest(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,214,(String) properties.get(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,215,(String) properties.get(HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,216,(String) properties.get(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,217,(String) properties.get(HOST_COMPONENT_HOST_NAME_PROPERTY_ID),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentFactory.java,25,ServiceComponent createNew(Service service, String componentName);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,159,Map<String, ServiceComponent> components) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,96,UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,97,ResourceAlreadyExistsException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,98,NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ConfigurationService.java,93,return handleRequest(headers, body, ui, Request.Type.POST, createConfigurationResource(m_clusterName));
ambari-server/src/main/java/org/apache/ambari/server/api/services/ConfigurationService.java,103,ResourceInstance createConfigurationResource(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1311,request.getVersionTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1312,if (null != config) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1313,ConfigurationResponse response = new ConfigurationResponse(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1316,responses.add(response);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1322,request.getType());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1324,if (null != configs) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1325,for (Entry<String, Config> entry : configs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1326,ConfigurationResponse response = new ConfigurationResponse(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1329,responses.add(response);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1334,Collection<Config> all = cluster.getAllConfigs();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1336,for (Config config : all) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1337,ConfigurationResponse response = new ConfigurationResponse(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1341,responses.add(response);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,101,createResources(new Command<Void>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,104,getManagementController().createConfiguration(configRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,105,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigurationResourceProvider.java,110,return getRequestStatus(null);
ambari-server/src/main/java/org/apache/ambari/server/api/rest/HealthCheck.java,22,import javax.ws.rs.Path;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ClusterService.java,129,return new HostService(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ClusterService.java,140,return new ServiceService(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ClusterService.java,151,return new ConfigurationService(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ClusterService.java,159,return new RequestService(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ClusterService.java,171,return new HostComponentService(clusterName, null);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ComponentService.java,49,public ComponentService(String clusterName, String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ConfigurationService.java,49,public ConfigurationService(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostComponentService.java,49,public HostComponentService(String clusterName, String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostService.java,53,public HostService() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostService.java,61,public HostService(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/HostService.java,206,return new HostComponentService(m_clusterName, hostName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/LogoutService.java,23,import javax.ws.rs.Path;
ambari-server/src/main/java/org/apache/ambari/server/api/services/RequestService.java,52,public RequestService(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ServiceService.java,43,public ServiceService(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ServiceService.java,180,return new ComponentService(m_clusterName, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,231,root.addServlet(sh, "/api/v1/*");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,119,throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,132,Set<HostResponse> responses = getResources(new Command<Set<HostResponse>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,134,public Set<HostResponse> invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,194,modifyResources(new Command<Void>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,198,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,318,if (commandEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,319,return null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,321,return hostRoleCommandFactory.createExisting(commandEntity);
