File,Line_number,SRC
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3669,protected void addNoMatchingMethodError(final ClassNode receiver, final String name, final ClassNode[] args, final Expression call) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2570,if (leftRedirect.isArray() && !rightRedirect.isArray()) return leftRedirect;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2955,if (receiver.equals(CLASS_Type) && receiver.getGenericsTypes() != null) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,37,import static org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport.chooseBestMethod;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,38,import static org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport.findDGMMethodsByNameAndArguments;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,39,import static org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport.implementsInterfaceOrIsSubclassOf;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,97,&& receiverType.getGenericsTypes()!=null
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,98,&& !receiverType.getGenericsTypes()[0].isPlaceholder()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2260,if (receiver.equals(CLASS_Type) && receiver.getGenericsTypes() != null) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,408,controller.getTypeChooser().resolveType(right, controller.getClassNode()));
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1317,MethodNode node = findMethodOrFail(innerExpression, exprType, name);
src/main/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,151,this.loader = proxyLoader!=null?new InnerLoader(proxyLoader):findClassLoader(superClass);
src/main/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,174,return new InnerLoader(cl);
src/main/org/codehaus/groovy/vmplugin/v7/TypeHelper.java,87,return  x==Integer.class    ||  x==int.class    ||
src/main/org/codehaus/groovy/vmplugin/v7/TypeHelper.java,89,x==Character.class  ||  x==char.class   ||
src/main/org/codehaus/groovy/vmplugin/v7/TypeTransformers.java,41,TO_BYTE	    = LOOKUP.findVirtual(Number.class, "byteValue",     MethodType.methodType(Byte.TYPE));
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,40,II  = MethodType.methodType(Void.TYPE, int.class, int.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,41,III = MethodType.methodType(int.class, int.class, int.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,42,LL  = MethodType.methodType(Void.TYPE, long.class, long.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,43,LLL = MethodType.methodType(long.class, long.class, long.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,44,DD  = MethodType.methodType(Void.TYPE, double.class, double.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,45,DDD = MethodType.methodType(double.class, double.class, double.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,46,GG  = MethodType.methodType(Void.TYPE, BigDecimal.class, BigDecimal.class),
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,47,OO  = MethodType.methodType(Void.TYPE, Object.class, Object.class);
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,61,MethodType[] keys = new MethodType[]{II,LL,DD};
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,67,keys = new MethodType[]{II,LL};
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,108,Class leftType = mt.parameterType(0);
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,109,Class rightType = mt.parameterType(1);
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,111,if (isIntCategory(leftType) && isIntCategory(rightType)) return II;
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,112,if (isLongCategory(leftType) && isLongCategory(rightType)) return LL;
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,113,if (isBigDecCategory(leftType) && isBigDecCategory(rightType)) return GG;
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,114,if (isDoubleCategory(leftType) && isDoubleCategory(rightType)) return DD;
src/main/org/codehaus/groovy/vmplugin/v7/IndyMath.java,116,return OO;
src/main/org/codehaus/groovy/vmplugin/v7/Selector.java,431,if (metaMethod instanceof NumberNumberMetaMethod) {
src/main/org/codehaus/groovy/vmplugin/v7/Selector.java,433,catchException = false;
src/main/org/codehaus/groovy/transform/sc/transformers/MethodCallExpressionTransformer.java,20,import org.codehaus.groovy.ast.expr.*;
src/main/org/codehaus/groovy/transform/sc/transformers/MethodCallExpressionTransformer.java,63,if ("putAt".equals(method)) {
src/main/org/codehaus/groovy/classgen/asm/InvocationWriter.java,390,ClassNode classNode = controller.getClassNode();
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,91,private static int counter = 1;
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,132,final StringBuilder templateExpressions = new StringBuilder("package groovy.tmp.templates\n def getTemplate() { return { out -> delegate = new Binding(delegate); out << \"\"\"");
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,178,templateExpressions.append("}.asWritable()}");
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,188,groovyClass = loader.parseClass(new GroovyCodeSource(templateExpressions.toString(), "GStringTemplateScript" + counter++ + ".groovy", "x"));
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,194,final GroovyObject object = (GroovyObject) groovyClass.newInstance();
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,196,this.template = (Closure) object.invokeMethod("getTemplate", null);
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,299,final Closure template = (Closure) this.template.clone();
subprojects/groovy-templates/src/main/java/groovy/text/GStringTemplateEngine.java,300,template.setDelegate(map);
src/main/groovy/util/GroovyScriptEngine.java,245,if (origDep != null) cache.put(".", origDep);
src/main/groovy/util/GroovyScriptEngine.java,572,lastMod = ((conn.getLastModified() / 1000) + 1) * 1000 - 1;
src/main/groovy/util/GroovyScriptEngine.java,591,if (mainEntryLastCheck<depEntry.lastModified) return true;
src/main/groovy/util/GroovyScriptEngine.java,601,return true;
src/main/groovy/util/GroovyScriptEngine.java,608,return false;
src/main/groovy/util/GroovyScriptEngine.java,261,ScriptCacheEntry cacheEntry = new ScriptCacheEntry(clazz, time, time, value, false);
src/main/org/codehaus/groovy/classgen/InnerClassVisitorHelper.java,45,new AttributeExpression(
src/main/org/codehaus/groovy/classgen/InnerClassVisitorHelper.java,62,new AttributeExpression(
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,73,protected boolean checkCall(Object receiver, Object[] args) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,76,&& ((GroovyObject)receiver).getMetaClass() == metaClass // metaClass still be valid
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,77,&& MetaClassHelper.sameClasses(params, args);
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,79,catch (NullPointerException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,81,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,84,catch (ClassCastException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,86,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,92,try {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,94,&& receiver instanceof GroovyObject
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,95,&& ((GroovyObject)receiver).getMetaClass() == metaClass // metaClass still be valid
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,96,&& MetaClassHelper.sameClasses(params);
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,98,catch (NullPointerException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,100,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,101,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,103,catch (ClassCastException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,105,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,106,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,111,try {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,113,&& receiver instanceof GroovyObject
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,114,&& ((GroovyObject)receiver).getMetaClass() == metaClass // metaClass still be valid
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,115,&& MetaClassHelper.sameClasses(params, arg1);
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,117,catch (NullPointerException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,119,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,120,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,122,catch (ClassCastException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,124,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,125,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,130,try {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,132,&& receiver instanceof GroovyObject
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,133,&& ((GroovyObject)receiver).getMetaClass() == metaClass // metaClass still be valid
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,134,&& MetaClassHelper.sameClasses(params, arg1, arg2);
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,136,catch (NullPointerException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,138,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,139,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,141,catch (ClassCastException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,143,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,144,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,149,try {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,151,&& receiver instanceof GroovyObject
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,152,&& ((GroovyObject)receiver).getMetaClass() == metaClass // metaClass still be valid
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,153,&& MetaClassHelper.sameClasses(params, arg1, arg2, arg3);
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,155,catch (NullPointerException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,157,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,158,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,160,catch (ClassCastException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,162,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,163,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,168,try {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,170,&& receiver instanceof GroovyObject
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,171,&& ((GroovyObject)receiver).getMetaClass() == metaClass // metaClass still be valid
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,172,&& MetaClassHelper.sameClasses(params, arg1, arg2, arg3, arg4);
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,174,catch (NullPointerException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,176,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,177,throw e;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,179,catch (ClassCastException e) {
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,181,return false;
src/main/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.java,182,throw e;
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,101,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,102,return new Double(((Integer) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,118,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,119,return new Double(((Integer) receiver).intValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,135,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,136,return new Double(((Long) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,152,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,153,return new Double(((Long) receiver).doubleValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,169,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,170,return new Double(((Float) receiver).doubleValue() / ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,186,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,187,return new Double(((Float) receiver).doubleValue() / ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,203,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,204,return new Double(((Float) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,213,return new Double(((Float) receiver).doubleValue() / ((Float) args[0]).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,217,return new Double(((Float) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,228,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,229,return new Double(((Float) receiver).doubleValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,245,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,246,return new Double(((Double) receiver).doubleValue() / ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,255,return new Double(((Double) receiver).doubleValue() / ((Integer) args[0]).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,259,return new Double(((Double) receiver).doubleValue() / ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,270,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,271,return new Double(((Double) receiver).doubleValue() / ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,287,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,288,return new Double(((Double) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,304,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,305,return new Double(((Double) receiver).doubleValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,110,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,111,return new Double(((Double) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,127,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,128,return new Double(((Double) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,144,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,145,return new Double(((Double) receiver).doubleValue() - ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,161,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,162,return new Double(((Double) receiver).doubleValue() - ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,178,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,179,return new Double(((Float) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,195,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,196,return new Double(((Float) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,212,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,213,return new Double(((Float) receiver).doubleValue() - ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,229,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,230,return new Double(((Float) receiver).doubleValue() - ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,246,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,247,return new Double(((Long) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,263,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,264,return new Double(((Long) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,280,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,281,return new Long(((Long) receiver).longValue() - ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,297,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,298,return new Long(((Long) receiver).longValue() - ((Integer) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,314,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,315,return new Double(((Integer) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,331,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,332,return new Double(((Integer) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,348,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,349,return new Long(((Integer) receiver).longValue() - ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,365,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,366,return new Integer(((Integer) receiver).intValue() - ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,112,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,113,return new Double(((Double) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,129,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,130,return new Double(((Double) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,146,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,147,return new Double(((Double) receiver).doubleValue() * ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,163,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,164,return new Double(((Double) receiver).doubleValue() * ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,180,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,181,return new Double(((Float) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,197,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,198,return new Double(((Float) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,214,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,215,return new Double(((Float) receiver).doubleValue() * ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,231,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,232,return new Double(((Float) receiver).doubleValue() * ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,248,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,249,return new Double(((Long) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,265,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,266,return new Double(((Long) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,282,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,283,return new Long(((Long) receiver).longValue() * ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,299,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,300,return new Long(((Long) receiver).longValue() * ((Integer) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,316,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,317,return new Double(((Integer) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,333,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,334,return new Double(((Integer) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,350,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,351,return new Long(((Integer) receiver).longValue() * ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,367,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,368,return new Integer(((Integer) receiver).intValue() * ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,118,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,135,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,152,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,169,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,186,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,203,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,220,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,237,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,254,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,271,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,288,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,305,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,322,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,339,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,356,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,373,if (checkCall(receiver)) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,236,new VariableExpression(fieldNode),
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,47,private boolean inPropertyExpression = false;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,281,if (inPropertyExpression || v.isInStaticContext() || !currentScope.isInStaticContext()) return;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,396,boolean ipe = inPropertyExpression;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,397,inPropertyExpression = true;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,399,inPropertyExpression = false;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,402,inPropertyExpression = ipe;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,164,ArrayExpression arr = new ArrayExpression(ClassHelper.OBJECT_TYPE, args.getExpressions());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,165,MethodCallExpression mce = new MethodCallExpression(
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,166,INVOKERHELER_RECEIVER,
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,167,target.isStatic() ? "invokeStaticMethod" : "invokeMethodSafe",
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,168,new ArgumentListExpression(
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,170,new ConstantExpression(target.getName()),
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,171,arr
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,173,);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,174,mce.setMethodTarget(target.isStatic() ? INVOKERHELPER_INVOKESTATICMETHOD : INVOKERHELPER_INVOKEMETHOD);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,175,mce.visit(controller.getAcg());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,176,return true;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,184,Map<MethodNode, MethodNode> bridges = (Map<MethodNode, MethodNode>) declaringClass.redirect().getNodeMetaData(PRIVATE_BRIDGE_METHODS);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,185,MethodNode bridge = bridges.get(target);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,186,if (bridge != null) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,187,ArgumentListExpression newArgs = new ArgumentListExpression(target.isStatic()?new ConstantExpression(null):receiver);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,188,for (Expression expression : args.getExpressions()) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,189,newArgs.addExpression(expression);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,191,return writeDirectMethodCall(bridge, implicitThis, receiver, newArgs);
src/main/org/codehaus/groovy/vmplugin/v5/Java5.java,264,else {
src/main/org/codehaus/groovy/vmplugin/v5/Java5.java,265,Method[] declaredMethods = type.getDeclaredMethods();
src/main/org/codehaus/groovy/classgen/asm/MopWriter.java,85,if ((mn.getModifiers() & ACC_ABSTRACT) != 0) continue;
subprojects/groovy-jsr223/src/main/java/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,55,import org.codehaus.groovy.util.ManagedConcurrentMap;
subprojects/groovy-jsr223/src/main/java/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,96,private ManagedConcurrentMap<String, Class> classMap = new ManagedConcurrentMap<String, Class>(ReferenceBundle.getSoftBundle());
src/main/org/codehaus/groovy/reflection/stdclasses/BigIntegerCachedClass.java,44,|| classToTransformFrom == Long.TYPE;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,567,return WideningCategories.isBigIntCategory(getUnwrapper(rightRedirect));
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,299,rhsType = controller.getOperandStack().getTopOperand();
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,305,rhsType = controller.getTypeChooser().resolveType(var, controller.getClassNode());
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,310,if (!(rightExpression instanceof ConstantExpression) || (((ConstantExpression) rightExpression).getValue()!=null)) {
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,311,operandStack.doGroovyCast(rhsType);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,313,operandStack.replace(rhsType);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,315,rhsValueId = compileStack.defineVariable(var, rhsType, true).getIndex();
src/main/groovy/lang/SpreadMap.java,32,private Map mapData;
src/main/groovy/lang/SpreadMap.java,36,mapData = new HashMap(values.length / 2);
src/main/groovy/lang/SpreadMap.java,39,mapData.put(values[i++], values[i++]);
src/main/groovy/lang/SpreadMap.java,44,this.mapData = map;
src/main/groovy/lang/SpreadMap.java,55,public Object get(Object obj) {
src/main/groovy/lang/SpreadMap.java,56,return mapData.get(obj);
src/main/groovy/lang/SpreadMap.java,74,public int size() {
src/main/groovy/lang/SpreadMap.java,75,return mapData.keySet().size();
src/main/groovy/lang/SpreadMap.java,89,Iterator iter = mapData.keySet().iterator();
src/main/groovy/lang/SpreadMap.java,90,for (; iter.hasNext(); ) {
src/main/groovy/lang/SpreadMap.java,91,Object key = iter.next();
src/main/groovy/lang/SpreadMap.java,92,if (! DefaultTypeTransformation.compareEqual(get(key), that.get(key)) ) {
src/main/groovy/lang/SpreadMap.java,104,Iterator iter = mapData.keySet().iterator();
src/main/groovy/lang/SpreadMap.java,105,for (; iter.hasNext(); ) {
src/main/groovy/lang/SpreadMap.java,106,Object key = iter.next();
src/main/groovy/lang/SpreadMap.java,118,if (mapData.isEmpty()) {
src/main/groovy/lang/SpreadMap.java,121,StringBuffer buff = new StringBuffer("*:[");
src/main/groovy/lang/SpreadMap.java,122,Iterator iter = mapData.keySet().iterator();
src/main/groovy/lang/SpreadMap.java,123,for (; iter.hasNext(); ) {
src/main/groovy/lang/SpreadMap.java,125,buff.append(key + ":" + mapData.get(key));
src/main/groovy/lang/SpreadMap.java,127,buff.append(", ");
src/main/groovy/lang/SpreadMap.java,129,buff.append("]");
src/main/groovy/lang/SpreadMap.java,130,return buff.toString();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,232,boolean needsSuper = (modifiers & ACC_INTERFACE) == 0;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,233,modifiers = needsSuper ? modifiers | ACC_SUPER : modifiers;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,404,receiver.visit(controller.getAcg());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,412,origMCE.getObjectExpression(),
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,102,ClassNode mrt = enclosingMethod.getReturnType();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,103,if (!returnType.implementsInterface(mrt) && !returnType.isDerivedFrom(mrt)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,106,returnType = mrt;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,108,ClassNode previousType = getInferredReturnType(enclosingMethod);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,109,ClassNode inferred = previousType == null ? returnType : lowestUpperBound(returnType, previousType);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,101,MethodNode enclosingMethod = typeCheckingContext.getEnclosingMethod();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,110,storeInferredReturnType(enclosingMethod, inferred);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,504,if (!isEmptyDeclaration) storeType(expression, resultType);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,530,ClassNode type = (ClassNode) var.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,710,if (rightExpression instanceof ClosureExpression) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,711,ClassNode type = getInferredReturnType(rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,712,if (type != null) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,713,storeInferredReturnType(leftExpression, type);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1556,ClassNode inferredType = CLOSURE_TYPE.getPlainNodeReference();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1557,inferredType.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(returnType))});
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1757,typeCheckingContext.pushEnclosingClassNode(directMethodCallCandidate.getDeclaringClass());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1758,for (ClassNode node : typeCheckingContext.source.getAST().getClasses()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1759,if (isClassInnerClassOrEqualTo(typeCheckingContext.getEnclosingClassNode(), node)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1760,silentlyVisitMethodNode(directMethodCallCandidate);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1761,break;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1764,pickInferredTypeFromMethodAnnotation(directMethodCallCandidate);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1765,typeCheckingContext.popEnclosingClassNode();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1812,protected void pickInferredTypeFromMethodAnnotation(final MethodNode node) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1813,if (getInferredReturnType(node) == null
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1814,&& !node.getAnnotations(TYPECHECKING_INFO_NODE).isEmpty()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1815,List<AnnotationNode> annotations = node.getAnnotations(TYPECHECKING_INFO_NODE);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1816,AnnotationNode head = annotations.get(0);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1817,int version = Integer.valueOf(head.getMember("version").getText());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1818,String signature = head.getMember("inferredType").getText();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1819,SignatureCodec codec = SignatureCodecFactory.getCodec(version, getSourceUnit().getClassLoader());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1820,ClassNode result = codec.decode(signature);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1821,storeInferredReturnType(node, result);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2027,ClassNode type = getInferredReturnType(((ASTNode) variable));
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2028,if (type == null) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2032,if (variable.getType().equals(CLOSURE_TYPE)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2033,GenericsType[] genericsTypes = variable.getType().getGenericsTypes();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2034,if (genericsTypes != null/* && !genericsTypes[0].isPlaceholder()*/) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2035,if (!genericsTypes[0].isPlaceholder()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2036,type = genericsTypes[0].getType();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2039,type = OBJECT_TYPE;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2044,storeType(call, (ClassNode) type);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2140,typeCheckingContext.pushEnclosingClassNode(directMethodCallCandidate.getDeclaringClass());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2141,for (ClassNode node : typeCheckingContext.source.getAST().getClasses()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2142,if (isClassInnerClassOrEqualTo(typeCheckingContext.getEnclosingClassNode(), node)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2144,silentlyVisitMethodNode(directMethodCallCandidate);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2145,break;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2148,pickInferredTypeFromMethodAnnotation(directMethodCallCandidate);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2149,typeCheckingContext.popEnclosingClassNode();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,85,static final MethodCaller selectConstructorAndTransformArguments = MethodCaller.newStatic(ScriptBytecodeAdapter.class, "selectConstructorAndTransformArguments");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,690,private void visitSpecialConstructorCall(ConstructorCallExpression call) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,691,if (controller.getClosureWriter().addGeneratedClosureConstructorCall(call)) return;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,693,ClassNode callNode = controller.getClassNode();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,694,if (call.isSuperCall()) callNode = callNode.getSuperClass();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,695,List<ConstructorNode> constructors = sortConstructors(call, callNode);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,696,if (!makeDirectConstructorCall(constructors, call, callNode)) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,697,makeMOPBasedConstructorCall(constructors, call, callNode);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,702,private static ConstructorNode getMatchingConstructor(List<ConstructorNode> constructors, List<Expression> argumentList) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,703,ConstructorNode lastMatch = null;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,704,for (int i=0; i<constructors.size(); i++) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,705,ConstructorNode cn = constructors.get(i);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,706,Parameter[] params = cn.getParameters();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,708,if (argumentList.size()!=params.length) continue;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,709,if (lastMatch==null) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,710,lastMatch = cn;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,713,return null;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,716,return lastMatch;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,719,private boolean makeDirectConstructorCall(List<ConstructorNode> constructors, ConstructorCallExpression call, ClassNode callNode) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,720,if (!controller.isConstructor()) return false;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,722,Expression arguments = call.getArguments();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,723,List<Expression> argumentList;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,724,if (arguments instanceof TupleExpression) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,725,argumentList = ((TupleExpression) arguments).getExpressions();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,727,argumentList = new ArrayList();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,728,argumentList.add(arguments);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,730,for (Expression expression : argumentList) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,731,if (expression instanceof SpreadExpression) return false;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,734,ConstructorNode cn = getMatchingConstructor(constructors, argumentList);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,735,if (cn==null) return false;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,736,MethodVisitor mv = controller.getMethodVisitor();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,737,OperandStack operandStack = controller.getOperandStack();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,738,Parameter[] params = cn.getParameters();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,740,mv.visitVarInsn(ALOAD, 0);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,741,for (int i=0; i<params.length; i++) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,742,Expression expression = argumentList.get(i);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,743,expression.visit(this);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,744,if (!isNullConstant(expression)) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,745,operandStack.doGroovyCast(params[i].getType());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,747,operandStack.remove(1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,749,String descriptor = BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE, params);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,750,mv.visitMethodInsn(INVOKESPECIAL, BytecodeHelper.getClassInternalName(callNode), "<init>", descriptor);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,752,return true;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,755,private static boolean isNullConstant(Expression expr) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,759,private void makeMOPBasedConstructorCall(List<ConstructorNode> constructors, ConstructorCallExpression call, ClassNode callNode) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,760,MethodVisitor mv = controller.getMethodVisitor();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,761,OperandStack operandStack = controller.getOperandStack();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,763,call.getArguments().visit(this);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,765,mv.visitInsn(DUP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,769,BytecodeHelper.pushConstant(mv, constructors.size());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,770,visitClassExpression(new ClassExpression(callNode));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,771,operandStack.remove(1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,774,selectConstructorAndTransformArguments.call(mv);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,778,mv.visitInsn(DUP_X1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,780,mv.visitInsn(ICONST_1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,781,mv.visitInsn(IAND);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,782,Label afterIf = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,783,mv.visitJumpInsn(IFEQ, afterIf);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,785,mv.visitInsn(ICONST_0);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,786,mv.visitInsn(AALOAD);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,787,mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/Object;");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,788,mv.visitLabel(afterIf);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,791,mv.visitInsn(SWAP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,793,if (controller.isConstructor()) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,794,mv.visitVarInsn(ALOAD, 0);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,796,mv.visitTypeInsn(NEW, BytecodeHelper.getClassInternalName(callNode));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,798,mv.visitInsn(SWAP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,800,mv.visitIntInsn(BIPUSH, 8);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,801,mv.visitInsn(ISHR);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,802,Label[] targets = new Label[constructors.size()];
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,803,int[] indices = new int[constructors.size()];
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,804,for (int i = 0; i < targets.length; i++) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,805,targets[i] = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,806,indices[i] = i;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,809,Label defaultLabel = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,810,Label afterSwitch = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,811,mv.visitLookupSwitchInsn(defaultLabel, indices, targets);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,812,for (int i = 0; i < targets.length; i++) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,813,mv.visitLabel(targets[i]);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,818,if (controller.isConstructor()) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,824,mv.visitInsn(SWAP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,825,mv.visitInsn(DUP_X1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,833,mv.visitInsn(DUP_X1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,834,mv.visitInsn(DUP2_X1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,835,mv.visitInsn(POP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,838,ConstructorNode cn = constructors.get(i);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,839,String descriptor = BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE, cn.getParameters());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,843,Parameter[] parameters = cn.getParameters();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,844,for (int p = 0; p < parameters.length; p++) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,845,operandStack.push(ClassHelper.OBJECT_TYPE);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,846,mv.visitInsn(DUP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,847,BytecodeHelper.pushConstant(mv, p);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,848,mv.visitInsn(AALOAD);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,849,operandStack.push(ClassHelper.OBJECT_TYPE);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,850,ClassNode type = parameters[p].getType();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,851,operandStack.doGroovyCast(type);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,852,operandStack.swap();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,853,operandStack.remove(2);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,856,mv.visitInsn(POP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,858,mv.visitMethodInsn(INVOKESPECIAL, BytecodeHelper.getClassInternalName(callNode), "<init>", descriptor);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,859,mv.visitJumpInsn(GOTO, afterSwitch);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,861,mv.visitLabel(defaultLabel);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,863,mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,864,mv.visitInsn(DUP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,865,mv.visitLdcInsn("illegal constructor number");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,866,mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,867,mv.visitInsn(ATHROW);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,868,mv.visitLabel(afterSwitch);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,874,if (!controller.isConstructor()) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,880,mv.visitInsn(SWAP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,881,operandStack.push(callNode); // for call result
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,883,mv.visitInsn(POP);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,886,private List<ConstructorNode> sortConstructors(ConstructorCallExpression call, ClassNode callNode) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,888,List<ConstructorNode> constructors = new ArrayList<ConstructorNode>(callNode.getDeclaredConstructors());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,889,Comparator comp = new Comparator() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,890,public int compare(Object arg0, Object arg1) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,891,ConstructorNode c0 = (ConstructorNode) arg0;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,892,ConstructorNode c1 = (ConstructorNode) arg1;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,893,String descriptor0 = BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE, c0.getParameters());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,894,String descriptor1 = BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE, c1.getParameters());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,895,return descriptor0.compareTo(descriptor1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,898,Collections.sort(constructors, comp);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,899,return constructors;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,906,controller.getCompileStack().pushInSpecialConstructorCall();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,907,visitSpecialConstructorCall(call);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,908,controller.getCompileStack().pop();
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,96,MethodNode mn = (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,139,adjustedClassModifiers(classNode.getModifiers()),
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,220,int mods = innerClass.getModifiers();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,231,private int adjustedClassModifiers(int modifiers) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,45,import java.io.File;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,46,import java.io.FileWriter;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,47,import java.io.IOException;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,48,import java.io.PrintWriter;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,49,import java.io.StringWriter;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,50,import java.net.MalformedURLException;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,51,import java.net.URL;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,52,import java.nio.charset.Charset;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,53,import java.util.ArrayList;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,54,import java.util.Enumeration;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,55,import java.util.LinkedHashSet;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,56,import java.util.List;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,57,import java.util.Map;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,58,import java.util.Set;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,59,import java.util.StringTokenizer;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1221,antLoader.addPathElement(cpEntry);
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,65,Currently leaving BigInteger and BigDecimal in list but see:
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,66,http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6348370
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,68,Also, Color is not final so while not normally used with child
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,69,classes, it isn't strictly immutable. Use at your own risk.
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,71,This list can by extended by providing "known immutable" classes
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,72,via Immutable.knownImmutableClasses
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,428,assignStatement(fieldExpr, checkUnresolved(cNode, fNode, initExpr))),
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,429,assignStatement(fieldExpr, checkUnresolved(cNode, fNode, unknown)));
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,432,private Expression checkUnresolved(ClassNode cNode, FieldNode fNode, Expression value) {
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,459,fieldType.getAnnotations(MY_TYPE).size() != 0 ||
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,460,inImmutableList(fieldType.getName()) ||
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,461,knownImmutableClasses.contains(fieldType.getName());
src/main/org/codehaus/groovy/ast/expr/ArgumentListExpression.java,50,addExpression(new VariableExpression(parameter.getName()));
src/main/groovy/util/GroovyScriptEngine.java,77,Map<String,String> precompiledEntries = new HashMap();
src/main/groovy/util/GroovyScriptEngine.java,93,private CompilerConfiguration config = new CompilerConfiguration(CompilerConfiguration.DEFAULT);
src/main/groovy/util/GroovyScriptEngine.java,118,setResLoader();
src/main/groovy/util/GroovyScriptEngine.java,121,public ScriptClassLoader(ClassLoader loader) {
src/main/groovy/util/GroovyScriptEngine.java,122,super(loader);
src/main/groovy/util/GroovyScriptEngine.java,328,return new ScriptClassLoader(parentLoader);
src/main/groovy/util/GroovyScriptEngine.java,512,String encoding = conn.getContentEncoding() != null ? conn.getContentEncoding() : "UTF-8";
src/main/org/codehaus/groovy/transform/ImmutableASTTransformation.java,581,if (field instanceof Collection) return DefaultGroovyMethods.asImmutable((Collection) field);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3375,if (gt.isPlaceholder() && placeholders.containsKey(gt.getName()) && !placeholders.get(gt.getName()).isPlaceholder()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3376,gt = placeholders.get(gt.getName());
src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java,131,if (node.isArray()) {
src/main/org/codehaus/groovy/ast/tools/GenericsUtils.java,132,extractPlaceholders(node.getComponentType(), map);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,19,import groovy.lang.GroovyClassLoader;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,190,if (!componentClass.equals(OBJECT_TYPE)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,191,if (componentClass.isInterface() || componentClass.getSuperClass()==null) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2914,if (name!=null) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3245,return inferReturnTypeGenerics(dc, dgmMethod, argList);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2990,char firstChar = result.charAt(0);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2991,if (Character.isUpperCase(firstChar) || !Character.isLetter(firstChar)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2992,return java.beans.Introspector.decapitalize(result);
src/main/org/codehaus/groovy/ast/GenericsType.java,92,ret.append(genericsBounds(innerClassNode.getOuterClass(), new HashSet<String>()));
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,373,super.visitPropertyExpression(pexp);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,899,storeType(pexp, int_TYPE);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1043,if (implementsInterfaceOrIsSubclassOf(testClass, MAP_TYPE) || implementsInterfaceOrIsSubclassOf(testClass, LIST_TYPE)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1044,if (visitor != null) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1045,ClassNode propertyType = OBJECT_TYPE;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1046,if (implementsInterfaceOrIsSubclassOf(objectExpressionType, MAP_TYPE)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1047,ClassNode intf = GenericsUtils.parameterizeType(objectExpressionType, MAP_TYPE.getPlainNodeReference());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1048,if (intf.isUsingGenerics() && intf.getGenericsTypes()!=null && intf.getGenericsTypes().length==2) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1050,propertyType = intf.getGenericsTypes()[1].getType(); // 0 is the key, 1 is the value
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1054,ClassNode intf = GenericsUtils.parameterizeType(objectExpressionType, LIST_TYPE.getPlainNodeReference());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1055,if (intf.isUsingGenerics() && intf.getGenericsTypes()!=null && intf.getGenericsTypes().length==1) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1056,PropertyExpression subExp = new PropertyExpression(
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1057,new VariableExpression("{}", intf.getGenericsTypes()[0].getType()),
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1059,);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1060,AtomicReference<ClassNode> result = new AtomicReference<ClassNode>();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1062,intf = LIST_TYPE.getPlainNodeReference();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1063,intf.setGenericsTypes(new GenericsType[] { new GenericsType(getWrapper(result.get()))});
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1064,propertyType = intf;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1069,PropertyNode node = new PropertyNode(propertyName, Opcodes.ACC_PUBLIC, propertyType, objectExpressionType, null, null, null);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1070,visitor.visitProperty(node);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1072,return true;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3038,PropertyExpression pexp = (PropertyExpression) exp;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3039,ClassNode objectExpType = getType(pexp.getObjectExpression());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3040,if ((LIST_TYPE.equals(objectExpType) || objectExpType.implementsInterface(LIST_TYPE)) && pexp.isSpreadSafe()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3043,return LIST_TYPE;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3047,String propertyName = pexp.getPropertyAsString();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3048,GenericsType[] types = objectExpType.getGenericsTypes();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3049,if ("key".equals(propertyName)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3050,if (types.length == 2) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3051,ClassNode listKey = LIST_TYPE.getPlainNodeReference();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3052,listKey.setGenericsTypes(new GenericsType[]{types[0]});
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3053,return listKey;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3056,if (types.length == 2) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3057,ClassNode listValue = LIST_TYPE.getPlainNodeReference();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3058,listValue.setGenericsTypes(new GenericsType[]{types[1]});
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3059,return listValue;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3062,addStaticTypeError("Spread operator on map only allows one of [key,value]", pexp);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3064,return LIST_TYPE;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3066,return objectExpType;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3068,final AtomicReference<ClassNode> result = new AtomicReference<ClassNode>(ClassHelper.VOID_TYPE);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3069,existsProperty(pexp, false, new PropertyLookupVisitor(result));
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3070,return result.get();
src/main/org/codehaus/groovy/classgen/asm/InvocationWriter.java,112,new VariableExpression("owner").visit(controller.getAcg());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,169,receiver,
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,272,if (inSpecialConstructorCall ||
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,273,(lookForPossibleStaticMethod && currentClass.hasPossibleStaticMethod(methodName, args))) {
subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,27,public static final Pattern LINK_REGEX = Pattern.compile("(?m)[{]@(link)\\s+([^}]*)}");
subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,28,public static final Pattern CODE_REGEX = Pattern.compile("(?m)[{]@(code)\\s+([^}]*)}");
subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,756,result = replaceAllTags(result, "<TT>", "</TT>", CODE_REGEX);
src/main/org/codehaus/groovy/ast/ClassNode.java,760,objectInitializers = new ArrayList<Statement> ();
src/main/groovy/lang/MetaClassImpl.java,2905,answer = MetaClassHelper.chooseMostGeneralMethodWith1NullParam(methods);
subprojects/groovy-xml/src/main/java/groovy/xml/dom/DOMCategory.java,229,if (node.getNodeType() == Node.TEXT_NODE) {
src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java,96,controller.getOperandStack().doGroovyCast(ClassHelper.boolean_TYPE);
src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java,100,expression.visit(visitor);
src/main/org/codehaus/groovy/transform/sc/transformers/BooleanExpressionTransformer.java,114,controller.getOperandStack().replace(ClassHelper.boolean_TYPE);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,976,storeInferredTypeForPropertyExpression(pexp, field.getOriginType());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,977,storeType(pexp, field.getOriginType());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3316,if (returnType.isGenericsPlaceHolder()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3317,GenericsType resolved = resolvedPlaceholders.get(returnType.getUnresolvedName());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3335,if (returnType.equals(OBJECT_TYPE)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3352,if (returnType.isArray()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3353,returnType = returnType.getComponentType().getPlainNodeReference();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3354,returnType.setGenericsTypes(copy);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3355,if (OBJECT_TYPE.equals(returnType)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3357,returnType = firstGenericsType.getType();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3359,returnType = returnType.makeArray();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3361,returnType = returnType.getPlainNodeReference();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3362,returnType.setGenericsTypes(copy);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3364,if (returnType.equals(Annotation_TYPE) && returnType.getGenericsTypes() != null && !returnType.getGenericsTypes()[0].isPlaceholder()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3365,return returnType.getGenericsTypes()[0].getType();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3367,return returnType;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,542,writeArrayGet(receiver, arguments, rType, aType);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,543,return;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,547,ClassNode current = rType;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,548,MethodNode getAtNode = null;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,549,while (current!=null && getAtNode==null) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,550,getAtNode = current.getMethod("getAt", new Parameter[]{new Parameter(aType, "index")});
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,551,current = current.getSuperClass();
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,553,if (getAtNode!=null) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,554,MethodCallExpression call = new MethodCallExpression(
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,555,receiver,
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,557,arguments
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,558,);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,559,call.setSourcePosition(arguments);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,560,call.setImplicitThis(false);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,561,call.setMethodTarget(getAtNode);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,562,call.visit(controller.getAcg());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,563,return;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,567,ClassNode[] args = {aType};
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,568,boolean acceptAnyMethod =
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,570,|| LIST_TYPE.equals(rType) || rType.implementsInterface(LIST_TYPE);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,571,List<MethodNode> nodes = StaticTypeCheckingSupport.findDGMMethodsByNameAndArguments(controller.getSourceUnit().getClassLoader(), rType, message, args);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,572,nodes = StaticTypeCheckingSupport.chooseBestMethod(rType, nodes, args);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,573,if (nodes.size()==1 || nodes.size()>1 && acceptAnyMethod) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,574,MethodNode methodNode = nodes.get(0);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,575,MethodCallExpression call = new MethodCallExpression(
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,576,receiver,
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,577,message,
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,578,arguments
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,579,);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,580,call.setSourcePosition(arguments);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,581,call.setImplicitThis(false);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,582,call.setMethodTarget(methodNode);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,583,call.visit(controller.getAcg());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,584,return;
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,586,if (implementsInterfaceOrIsSubclassOf(rType, MAP_TYPE)) {
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,588,MethodCallExpression call = new MethodCallExpression(
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,589,receiver,
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,591,arguments
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,592,);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,593,call.setMethodTarget(MAP_GET_METHOD);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,594,call.setSourcePosition(arguments);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,595,call.setImplicitThis(false);
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,596,call.visit(controller.getAcg());
src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,597,return;
subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,3057,if (connection != null) connection.setAutoCommit(savedAutoCommit);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3250,Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3251,if (method.isStatic() && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3252,GenericsUtils.extractPlaceholders(receiver.getGenericsTypes()[0].getType(), resolvedPlaceholders);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3254,ClassNode current = receiver;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3255,while (current!=null) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3256,GenericsUtils.extractPlaceholders(current, resolvedPlaceholders);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3257,current = current.getUnresolvedSuperClass();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3260,GenericsUtils.extractPlaceholders(method.getReturnType(), resolvedPlaceholders);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,642,protected void typeCheckAssignment(
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,643,final BinaryExpression assignmentExpression,
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,644,final Expression leftExpression,
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,645,final ClassNode leftExpressionType,
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,646,final Expression rightExpression,
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,647,final ClassNode inferredRightExpressionType) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,648,ClassNode leftRedirect;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,649,if (isArrayAccessExpression(leftExpression) || leftExpression instanceof PropertyExpression
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,650,|| (leftExpression instanceof VariableExpression
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,651,&& ((VariableExpression) leftExpression).getAccessedVariable() instanceof DynamicVariable)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,656,leftRedirect = leftExpressionType;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,658,if (leftExpression instanceof VariableExpression && isPrimitiveType(((VariableExpression) leftExpression).getOriginType())) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,659,leftRedirect = leftExpressionType;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,661,leftRedirect = leftExpression.getType().redirect();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,664,if (leftExpression instanceof TupleExpression) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,666,if (!(rightExpression instanceof ListExpression)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,667,addStaticTypeError("Multiple assignments without list expressions on the right hand side are unsupported in static type checking mode", rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,668,return;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,670,TupleExpression tuple = (TupleExpression) leftExpression;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,671,ListExpression list = (ListExpression) rightExpression;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,672,List<Expression> listExpressions = list.getExpressions();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,673,List<Expression> tupleExpressions = tuple.getExpressions();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,674,if (listExpressions.size() < tupleExpressions.size()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,675,addStaticTypeError("Incorrect number of values. Expected:" + tupleExpressions.size() + " Was:" + listExpressions.size(), list);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,676,return;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,678,for (int i = 0, tupleExpressionsSize = tupleExpressions.size(); i < tupleExpressionsSize; i++) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,679,Expression tupleExpression = tupleExpressions.get(i);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,680,Expression listExpression = listExpressions.get(i);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,681,ClassNode elemType = getType(listExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,682,ClassNode tupleType = getType(tupleExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,683,if (!isAssignableTo(elemType, tupleType)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,684,addStaticTypeError("Cannot assign value of type " + elemType.toString(false) + " to variable of type " + tupleType.toString(false), rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,685,break; // avoids too many errors
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,688,return;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,699,boolean compatible = checkCompatibleAssignmentTypes(leftRedirect, wrappedRHS, rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,701,if (leftExpression.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY) != null && (leftExpression instanceof PropertyExpression)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,702,addStaticTypeError("Cannot set read-only property: " + ((PropertyExpression) leftExpression).getPropertyAsString(), leftExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,717,boolean possibleLooseOfPrecision = false;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,718,if (isNumberType(leftRedirect) && isNumberType(inferredRightExpressionType)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,719,possibleLooseOfPrecision = checkPossibleLooseOfPrecision(leftRedirect, inferredRightExpressionType, rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,720,if (possibleLooseOfPrecision) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,721,addStaticTypeError("Possible loose of precision from " + inferredRightExpressionType + " to " + leftRedirect, rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,725,if (!possibleLooseOfPrecision && leftExpressionType.isArray()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,726,ClassNode leftComponentType = leftExpressionType.getComponentType();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,727,ClassNode rightRedirect = rightExpression.getType().redirect();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,728,if (rightRedirect.isArray()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,729,ClassNode rightComponentType = rightRedirect.getComponentType();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,730,if (!checkCompatibleAssignmentTypes(leftComponentType, rightComponentType)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,731,addStaticTypeError("Cannot assign value of type " + rightComponentType.toString(false) + " into array of type " + leftExpressionType.toString(false), assignmentExpression.getRightExpression());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,734,for (Expression element : ((ListExpression) rightExpression).getExpressions()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,735,ClassNode rightComponentType = element.getType().redirect();
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,737,&& !(isNullConstant(element) && !isPrimitiveType(leftComponentType))) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,738,addStaticTypeError("Cannot assign value of type " + rightComponentType.toString(false) + " into array of type " + leftExpressionType.toString(false), assignmentExpression.getRightExpression());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,747,if (rightExpression instanceof ListExpression && !implementsInterfaceOrIsSubclassOf(LIST_TYPE, leftRedirect)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,748,ArgumentListExpression argList = new ArgumentListExpression(((ListExpression) rightExpression).getExpressions());
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,749,ClassNode[] args = getArgumentTypes(argList);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,750,checkGroovyStyleConstructor(leftRedirect, args);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,753,&& !isWildcardLeftHandSide(leftExpressionType)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,754,if (!extension.handleIncompatibleAssignment(leftExpressionType, inferredRightExpressionType, assignmentExpression)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,755,addAssignmentError(leftExpressionType, inferredRightExpressionType, assignmentExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,762,if (!implementsInterfaceOrIsSubclassOf(leftRedirect, MAP_TYPE) && rightExpression instanceof MapExpression) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,763,if (!(leftExpression instanceof VariableExpression) || !((VariableExpression) leftExpression).isDynamicTyped()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,764,ArgumentListExpression argList = new ArgumentListExpression(rightExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,765,ClassNode[] args = getArgumentTypes(argList);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,766,checkGroovyStyleConstructor(leftRedirect, args);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,768,MapExpression mapExpression = (MapExpression) rightExpression;
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,769,checkGroovyConstructorMap(leftExpression, leftRedirect, mapExpression);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,774,if (leftExpressionType.isUsingGenerics() && !leftExpressionType.isEnum()) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,775,boolean incomplete = hasRHSIncompleteGenericTypeInfo(wrappedRHS);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,776,if (!incomplete) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,777,GenericsType gt = GenericsUtils.buildWildcardType(leftExpressionType);
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,778,if (!UNKNOWN_PARAMETER_TYPE.equals(wrappedRHS) && !gt.isCompatibleWith(wrappedRHS) && !isNullConstant(rightExpression)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,779,if (isParameterizedWithString(leftExpressionType) && isParameterizedWithGStringOrGStringString(wrappedRHS)) {
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,780,addStaticTypeError("You are trying to use a GString in place of a String in a type which explicitly declares accepting String. " +
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,783,addStaticTypeError("Incompatible generic argument types. Cannot assign "
src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,785,+ " to: " + leftExpressionType.toString(false), assignmentExpression.getRightExpression());
