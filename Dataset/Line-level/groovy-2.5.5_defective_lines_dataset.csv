File,Line_number,SRC
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,528,if (usage == null || declaration == null || declaration.length == 0) return;
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,532,for (int i = 0; i < usage.length; i++) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,54,import org.codehaus.groovy.transform.sc.StaticCompilationVisitor;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,381,StaticTypeCheckingVisitor visitor = new StaticCompilationVisitor(controller.getSourceUnit(), controller.getClassNode());
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,393,MethodCallExpression mce = new MethodCallExpression(
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,394,receiver,
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,396,ae
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,397,);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesBinaryExpressionMultiTypeDispatcher.java,399,visitor.visitMethodCallExpression(mce);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,178,import static org.codehaus.groovy.ast.tools.GenericsUtils.findActualTypeByGenericsPlaceholderName;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,653,ClassNode actualType =
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,654,findActualTypeByGenericsPlaceholderName(
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,655,fieldNode.getOriginType().getUnresolvedName(),
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,657,);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,659,if (null != actualType) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,660,storeType(vexp, actualType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,661,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1235,if (leftExpression instanceof VariableExpression
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1236,&& ((VariableExpression) leftExpression).getAccessedVariable() instanceof FieldNode) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1237,checkOrMarkPrivateAccess(leftExpression, (FieldNode) ((VariableExpression) leftExpression).getAccessedVariable(), true);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3473,private boolean isNestedOrSandwichedMethodCall() {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3474,return typeCheckingContext.getEnclosingMethodCalls().size() > 1
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3475,|| typeCheckingContext.getEnclosingConstructorCalls().size() > 0
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3476,|| typeCheckingContext.getEnclosingPropertyExpressions().size() > 0;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4646,FieldNode fieldNode = (FieldNode) variable;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4648,checkOrMarkPrivateAccess(vexp, fieldNode, isLHSOfEnclosingAssignment(vexp));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4649,return getType(fieldNode);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4720,if (exp instanceof FieldNode) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4721,FieldNode fn = (FieldNode) exp;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4722,return getGenericsResolvedTypeOfFieldOrProperty(fn, fn.getOriginType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4724,if (exp instanceof PropertyNode) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4725,PropertyNode pn = (PropertyNode) exp;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4726,return getGenericsResolvedTypeOfFieldOrProperty(pn, pn.getOriginType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4775,private ClassNode getGenericsResolvedTypeOfFieldOrProperty(AnnotatedNode an, ClassNode type) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4776,if (!type.isUsingGenerics()) return type;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4777,Map<GenericsTypeName, GenericsType> connections = new HashMap<GenericsTypeName, GenericsType>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4779,extractGenericsConnections(connections, typeCheckingContext.getEnclosingClassNode(), an.getDeclaringClass());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4780,type = applyGenericsContext(connections, type);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4781,return type;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4785,ClassNode ret = typeCheckingContext.getEnclosingClassNode().getSuperClass();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4786,if (typeCheckingContext.isInStaticContext) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4787,ClassNode staticRet = CLASS_Type.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4788,GenericsType gt = new GenericsType(ret);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4789,staticRet.setGenericsTypes(new GenericsType[]{gt});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4790,ret = staticRet;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4792,return ret;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4796,ClassNode ret = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4797,if (typeCheckingContext.isInStaticContext) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4798,ClassNode staticRet = CLASS_Type.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4799,GenericsType gt = new GenericsType(ret);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4800,staticRet.setGenericsTypes(new GenericsType[]{gt});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4801,ret = staticRet;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4803,return ret;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3386,if (typeCheckMethodsWithGenericsOrFail(chosenReceiver.getType(), args, mn.get(0), call)) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1245,public boolean hasPossibleMethod(String name, Expression arguments) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1246,int count = 0;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1249,TupleExpression tuple = (TupleExpression) arguments;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1251,count = tuple.getExpressions().size();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1253,ClassNode node = this;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1254,do {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1255,for (MethodNode method : getMethods(name)) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1260,node = node.getSuperClass();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1262,while (node != null);
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1266,public MethodNode tryFindPossibleMethod(String name, Expression arguments) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1267,int count = 0;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1269,if (arguments instanceof TupleExpression) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1270,TupleExpression tuple = (TupleExpression) arguments;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1272,count = tuple.getExpressions().size();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1276,MethodNode res = null;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1277,ClassNode node = this;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1279,do {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1280,for (MethodNode method : node.getMethods(name)) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1291,res = method;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1292,else {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1310,node = node.getSuperClass();
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1312,while (node != null);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1676,while (count < 10000) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1677,count++;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1678,boolean checkForMorePlaceHolders = false;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1679,for (Entry<GenericsTypeName, GenericsType> entry : resolvedPlaceholders.entrySet()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1680,GenericsTypeName name = entry.getKey();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1681,GenericsType replacement = connections.get(name);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1682,if (replacement == null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1683,GenericsType value = entry.getValue();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1684,GenericsType newValue = applyGenericsContext(connections, value);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1685,entry.setValue(newValue);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1686,checkForMorePlaceHolders = checkForMorePlaceHolders || !equalIncludingGenerics(value, newValue);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1687,continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1689,GenericsType original = entry.getValue();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1690,if (!original.isWildcard() && !original.isPlaceholder()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1691,continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1693,boolean placeholderReplacement = replacement.isPlaceholder();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1694,if (placeholderReplacement) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1695,GenericsType connectedType = resolvedPlaceholders.get(name);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1696,if (replacement == connectedType) continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1701,ClassNode replacementType = extractType(replacement);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1702,if (original.isCompatibleWith(replacementType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1703,entry.setValue(replacement);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1704,if (placeholderReplacement) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1705,checkForMorePlaceHolders = checkForMorePlaceHolders || !equalIncludingGenerics(original, replacement);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,1709,if (!checkForMorePlaceHolders) break;
src/main/java/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java,175,if (optimized!=null) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/BinaryExpressionTransformer.java,177,return transformBinaryExpression(optimized);
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,54,if (val == null) return null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,444,if (isNumberType(ptype) && isNumberType(arg) && !ptype.equals(arg)) return -1;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesUnaryExpressionHelper.java,74,mv.visitLdcInsn(-1);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11854,if (!mutate) {
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11855,return (T[]) toList(new ReverseListIterator<T>(Arrays.asList(self))).toArray();
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11857,List<T> items = Arrays.asList(self);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11858,Collections.reverse(items);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11859,System.arraycopy(items.toArray(), 0, self, 0, items.size());
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,11860,return self;
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1181,resolveOrFail(type, cce);
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1182,if (Modifier.isAbstract(type.getModifiers())) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1183,addError("You cannot create an instance from the abstract " + getDescription(type) + ".", cce);
src/main/java/org/codehaus/groovy/ast/GenericsType.java,66,public void setType(ClassNode type) {
src/main/java/org/codehaus/groovy/ast/GenericsType.java,67,this.type = type;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4846,if (expressions.isEmpty()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4855,&& (!expressions.isEmpty())) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4857,List<ClassNode> nodes = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4865,if (nodes.isEmpty()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4867,return listType;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4869,ClassNode superType = getWrapper(lowestUpperBound(nodes)); // to be used in generics, type must be boxed
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4870,ClassNode inferred = listType.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4871,inferred.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(superType))});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4872,return inferred;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4884,if (entryExpressions.isEmpty()) return mapType;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4889,List<ClassNode> keyTypes = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4890,List<ClassNode> valueTypes = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4895,ClassNode keyType = getWrapper(lowestUpperBound(keyTypes));  // to be used in generics, type must be boxed
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4896,ClassNode valueType = getWrapper(lowestUpperBound(valueTypes));  // to be used in generics, type must be boxed
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4898,ClassNode inferred = mapType.getPlainNodeReference();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4899,inferred.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(keyType)), new GenericsType(wrapTypeIfNecessary(valueType))});
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4900,return inferred;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1019,if (isSuperExpression(objectExpression)) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,2196,private static boolean isSuperExpression(Expression expression) {
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,135,ClassNode cn = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,136,if (controller.isInClosure() && !implicitThis && AsmClassGenerator.isThisExpression(receiver)) cn=cn.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,137,makeCall(origin, new ClassExpression(cn), receiver, message, arguments,
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,138,adapter, safe, spreadSafe, implicitThis);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,757,super.visitAttributeExpression(expression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,760,addStaticTypeError("No such property: " + expression.getPropertyAsString() +
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1405,final ClassNode objectExpressionType = getType(objectExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1411,List<ClassNode> candidates = typeCheckingContext.getEnclosingClassNodes();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1413,for (ClassNode current : candidates) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1443,ClassNode testClass = receiver.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1445,queue.add(testClass);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1446,if (isPrimitiveType(testClass)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1447,queue.add(getWrapper(testClass));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1451,if (handledNodes.contains(current)) continue;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1452,handledNodes.add(current);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1453,Set<ClassNode> allInterfaces = current.getAllInterfaces();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1454,for (ClassNode intf : allInterfaces) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1456,queue.add(GenericsUtils.parameterizeType(current, intf));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1469,FieldNode field = current.getDeclaredField(propertyName);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1474,boolean isThisExpression = objectExpression instanceof VariableExpression
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1476,&& objectExpressionType.equals(current);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1537,foundGetterOrSetter = foundGetterOrSetter || !setters.isEmpty() || getter != null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1539,if (storeProperty(propertyNode, pexp, current, visitor, receiver.getData())) return true;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1541,if (storeField(field, true, pexp, current, visitor, receiver.getData(), !readMode)) return true;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1544,if (/*!isAttributeExpression && */current.getSuperClass() != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1545,queue.add(current.getUnresolvedSuperClass());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1550,dgmReceivers.add(testClass);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1551,if (isPrimitiveType(testClass)) dgmReceivers.add(getWrapper(testClass));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1574,ClassNode testClass = receiver.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1575,ClassNode propertyType = getTypeForMapPropertyExpression(testClass, objectExpressionType, pexp);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1577,propertyType = getTypeForListPropertyExpression(testClass, objectExpressionType, pexp);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1578,if (propertyType == null) propertyType = getTypeForSpreadExpression(testClass, objectExpressionType, pexp);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1582,PropertyNode node = new PropertyNode(propertyName, Opcodes.ACC_PUBLIC, propertyType, receiver.getType(), null, null, null);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1583,node.setDeclaringClass(receiver.getType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3229,if (objectExpression == VariableExpression.THIS_EXPRESSION) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3626,if (objectExpression == VariableExpression.THIS_EXPRESSION) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4642,if (vexp == VariableExpression.THIS_EXPRESSION) return makeThis();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4643,if (vexp == VariableExpression.SUPER_EXPRESSION) return makeSuper();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,23,import org.codehaus.groovy.ast.AnnotatedNode;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,24,import org.codehaus.groovy.ast.AnnotationNode;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,57,import java.util.List;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,58,import java.util.Map;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,68,private VariableScope currentScope = null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,69,private final VariableScope headScope = new VariableScope();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,70,private ClassNode currentClass = null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,72,private boolean isSpecialConstructorCall = false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,73,private boolean inConstructor = false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,76,private final LinkedList stateStack = new LinkedList();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,78,private class StateStackElement {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,79,final VariableScope scope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,83,StateStackElement() {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,84,scope = VariableScopeVisitor.this.currentScope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,85,clazz = VariableScopeVisitor.this.currentClass;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,86,inConstructor = VariableScopeVisitor.this.inConstructor;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,90,public VariableScopeVisitor(SourceUnit source, boolean recurseInnerClasses) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,92,currentScope = headScope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,97,public VariableScopeVisitor(SourceUnit source) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,105,private void pushState(boolean isStatic) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,106,stateStack.add(new StateStackElement());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,116,StateStackElement element = (StateStackElement) stateStack.removeLast();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,117,currentScope = element.scope;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,118,currentClass = element.clazz;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,119,inConstructor = element.inConstructor;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,122,private void declare(Parameter[] parameters, ASTNode node) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,123,for (Parameter parameter : parameters) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,124,if (parameter.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,125,parameter.getInitialExpression().visit(this);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,127,declare(parameter, node);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,131,private void declare(VariableExpression vex) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,132,vex.setInStaticContext(currentScope.isInStaticContext());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,133,declare(vex, vex);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,134,vex.setAccessedVariable(vex);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,137,private void declare(Variable var, ASTNode expr) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,141,if (expr.getClass() == FieldNode.class) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,152,msg.append(" of the name ").append(var.getName());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,154,if (currentScope.getDeclaredVariable(var.getName()) != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,155,addError(msg.toString(), expr);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,165,if (scope.getDeclaredVariable(var.getName()) != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,167,addError(msg.toString(), expr);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,172,currentScope.putDeclaredVariable(var);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,175,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,176,return source;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,179,private Variable findClassMember(ClassNode cn, String name) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,180,if (cn == null) return null;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,181,if (cn.isScript()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,182,return new DynamicVariable(name, false);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,185,for (FieldNode fn : cn.getFields()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,186,if (fn.getName().equals(name)) return fn;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,189,for (MethodNode mn : cn.getMethods()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,190,String pName = getPropertyName(mn);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,191,if (name.equals(pName)) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,192,PropertyNode property = new PropertyNode(name, mn.getModifiers(), ClassHelper.OBJECT_TYPE, cn, null, null, null);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,193,property.getField().setHasNoRealSourcePosition(true);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,194,property.getField().setSynthetic(true);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,195,property.getField().setDeclaringClass(cn);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,196,property.setDeclaringClass(cn);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,197,return property;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,201,for (PropertyNode pn : cn.getProperties()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,202,if (pn.getName().equals(name)) return pn;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,214,private Variable checkVariableNameForDeclaration(String name, Expression expression) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,218,Variable var = new DynamicVariable(name, currentScope.isInStaticContext());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,219,Variable orig = var;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,223,crossingStaticContext = crossingStaticContext || scope.isInStaticContext();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,227,if (var1 != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,228,var = var1;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,232,var1 = scope.getReferencedLocalVariable(var.getName());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,233,if (var1 != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,234,var = var1;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,238,var1 = scope.getReferencedClassVariable(var.getName());
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,239,if (var1 != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,240,var = var1;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,248,boolean staticScope = crossingStaticContext || isSpecialConstructorCall;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,249,boolean staticMember = member.isInStaticContext();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,253,var = member;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,259,if (var == orig && crossingStaticContext) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,260,var = new DynamicVariable(var.getName(), true);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,269,scope.putReferencedClassVariable(var);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,272,scope.putReferencedLocalVariable(var);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,277,return var;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,412,Variable v = checkVariableNameForDeclaration(name, expression);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,469,Variable v = checkVariableNameForDeclaration(name, expression);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,519,declare(node.getParameters(), node);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,535,Variable v = checkVariableNameForDeclaration(methodName, call);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,555,isSpecialConstructorCall = call.isSpecialCall();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,557,isSpecialConstructorCall = false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,606,public void visitAnnotations(AnnotatedNode node) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,607,List<AnnotationNode> annotations = node.getAnnotations();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,608,if (annotations.isEmpty()) return;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,609,for (AnnotationNode an : annotations) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,611,if (an.isBuiltIn()) continue;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,612,for (Map.Entry<String, Expression> member : an.getMembers().entrySet()) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,613,Expression annMemberValue = member.getValue();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,614,annMemberValue.visit(this);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,94,import org.codehaus.groovy.classgen.Verifier;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,490,private void checkOrMarkPrivateAccess(Expression source, FieldNode fn, boolean lhsOfAssignment) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,491,ClassNode enclosingClassNode = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,494,(declaringClass != enclosingClassNode || typeCheckingContext.getEnclosingClosure() != null) &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,495,declaringClass.getModule() == enclosingClassNode.getModule()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,496,if (!lhsOfAssignment && enclosingClassNode.isDerivedFrom(declaringClass)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,499,boolean isPrimBool = fn.getOriginType().equals(ClassHelper.boolean_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,500,String suffix = Verifier.capitalize(fn.getName());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,501,MethodNode getterNode = findValidGetter(enclosingClassNode, "get" + suffix);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,502,if (getterNode == null && isPrimBool) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,503,getterNode = findValidGetter(enclosingClassNode, "is" + suffix);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,505,if (getterNode != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,507,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,511,addPrivateFieldOrMethodAccess(source, declaringClass, marker, fn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,515,private MethodNode findValidGetter(ClassNode classNode, String name) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,516,MethodNode getterMethod = classNode.getGetterMethod(name);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,517,if (getterMethod != null && (getterMethod.isPublic() || getterMethod.isProtected())) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,518,return getterMethod;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,520,return null;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,667,if (stcsw.makeGetField(receiver, typeChooser.resolveType(receiver, controller.getClassNode()), pname, safe, false, true)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,99,private static final ClassNode INVOKERHELPER_TYPE = ClassHelper.make(InvokerHelper.class);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,100,private static final MethodNode GROOVYOBJECT_GETPROPERTY_METHOD = GROOVY_OBJECT_TYPE.getMethod("getProperty", new Parameter[]{new Parameter(STRING_TYPE, "propertyName")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,101,private static final MethodNode INVOKERHELPER_GETPROPERTY_METHOD = INVOKERHELPER_TYPE.getMethod("getProperty", new Parameter[]{new Parameter(OBJECT_TYPE, "object"), new Parameter(STRING_TYPE, "propertyName")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,102,private static final MethodNode INVOKERHELPER_GETPROPERTYSAFE_METHOD = INVOKERHELPER_TYPE.getMethod("getPropertySafe", new Parameter[]{new Parameter(OBJECT_TYPE, "object"), new Parameter(STRING_TYPE, "propertyName")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,103,private static final MethodNode CLOSURE_GETTHISOBJECT_METHOD = CLOSURE_TYPE.getMethod("getThisObject", Parameter.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,106,private static final MethodNode MAP_GET_METHOD = MAP_TYPE.getMethod("get", new Parameter[] { new Parameter(OBJECT_TYPE, "key")});
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,197,if (makeGetField(receiver, receiverType, methodName, safe, implicitThis, samePackages(receiverType.getPackageName(), classNode.getPackageName()))) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,199,if (makeGetField(receiver, receiver.getType(), methodName, safe, implicitThis, samePackages(receiver.getType().getPackageName(), classNode.getPackageName()))) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,206,if (makeGetField(receiver, CLASS_Type, methodName, safe, false, true)) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,490,if (makeGetField(receiver, receiverType, property, safe, implicitThis, samePackages(receiverType.getPackageName(), classNode.getPackageName()))) return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,575,boolean makeGetField(final Expression receiver, final ClassNode receiverType, final String fieldName, final boolean safe, final boolean implicitThis, final boolean samePackage) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,579,if (field !=null
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,580,&& isDirectAccessAllowed(field, controller.getClassNode(), samePackage)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,623,if (intf!=receiverType && makeGetField(receiver, intf, fieldName, safe, implicitThis, false)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,629,if (superClass !=null) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,630,return makeGetField(receiver, superClass, fieldName, safe, implicitThis, false);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,925,ClassNode classNode = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,929,if (makeGetField(receiver, receiverType, name, safe, implicitThis, samePackages(receiverType.getPackageName(), classNode.getPackageName()))) return true;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,931,if (makeGetField(receiver, receiver.getType(), name, safe, implicitThis, samePackages(receiver.getType().getPackageName(), classNode.getPackageName()))) return true;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,941,if (isClassReceiver && makeGetField(receiver, CLASS_Type, name, safe, false, true)) return true;
src/main/groovy/groovy/lang/MetaClassImpl.java,920,if (!isCallToSuper) {
src/main/groovy/groovy/lang/MetaClassImpl.java,921,Class instanceKlazz = instance.getClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,923,instanceKlazz = theClass;
src/main/groovy/groovy/lang/MetaClassImpl.java,925,Class[] argClasses = MetaClassHelper.castArgumentsToClassArray(arguments);
src/main/groovy/groovy/lang/MetaClassImpl.java,927,MetaMethod method = findMixinMethod(methodName, argClasses);
src/main/groovy/groovy/lang/MetaClassImpl.java,928,if(method != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,929,onMixinMethodFound(method);
src/main/groovy/groovy/lang/MetaClassImpl.java,930,return method.invoke(instance, arguments);
src/main/groovy/groovy/lang/MetaClassImpl.java,933,method = findMethodInClassHierarchy(instanceKlazz, methodName, argClasses, this);
src/main/groovy/groovy/lang/MetaClassImpl.java,934,if(method != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,935,onSuperMethodFoundInHierarchy(method);
src/main/groovy/groovy/lang/MetaClassImpl.java,936,return method.invoke(instance, arguments);
src/main/groovy/groovy/lang/MetaClassImpl.java,940,final Class[] invokeMethodArgs = {String.class, Object[].class};
src/main/groovy/groovy/lang/MetaClassImpl.java,941,method = findMethodInClassHierarchy(instanceKlazz, INVOKE_METHOD_METHOD, invokeMethodArgs, this );
src/main/groovy/groovy/lang/MetaClassImpl.java,942,if(method instanceof ClosureMetaMethod) {
src/main/groovy/groovy/lang/MetaClassImpl.java,943,onInvokeMethodFoundInHierarchy(method);
src/main/groovy/groovy/lang/MetaClassImpl.java,944,return method.invoke(instance, invokeMethodArgs);
src/main/groovy/groovy/lang/MetaClassImpl.java,948,if (method == null && GroovyCategorySupport.hasCategoryInCurrentThread()) {
src/main/groovy/groovy/lang/MetaClassImpl.java,949,method = getCategoryMethodMissing(instanceKlazz);
src/main/groovy/groovy/lang/MetaClassImpl.java,950,if (method != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,951,return method.invoke(instance, new Object[]{methodName, arguments});
src/main/groovy/groovy/lang/MetaClassImpl.java,961,MissingMethodException mme =  (MissingMethodException) iie.getCause();
src/main/groovy/groovy/lang/MetaClassImpl.java,963,mme.getArguments(),mme.isStatic(),mme);
src/main/groovy/groovy/lang/MetaClassImpl.java,969,mme.getArguments(),mme.isStatic(),mme);
src/main/groovy/groovy/lang/MetaClassImpl.java,970,else
src/main/groovy/groovy/lang/MetaClassImpl.java,974,else throw new MissingMethodExceptionNoStack(methodName, theClass, arguments, false);
src/main/groovy/groovy/lang/MetaClassImpl.java,284,if (propertyMap.containsKey(name)) {
src/main/groovy/groovy/lang/MetaClassImpl.java,285,return (MetaProperty) propertyMap.get(name);
src/main/groovy/groovy/lang/MetaClassImpl.java,287,return (MetaProperty) staticPropertyIndex.get(name);
src/main/groovy/groovy/lang/MetaClassImpl.java,289,propertyMap = classPropertyIndexForSuper.getNotNull(theCachedClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,291,return (MetaProperty) propertyMap.get(name);
src/main/groovy/groovy/lang/MetaClassImpl.java,292,else {
src/main/groovy/groovy/lang/MetaClassImpl.java,293,CachedClass superClass = theCachedClass;
src/main/groovy/groovy/lang/MetaClassImpl.java,294,while (superClass != null && superClass != ReflectionCache.OBJECT_CLASS) {
src/main/groovy/groovy/lang/MetaClassImpl.java,295,final MetaBeanProperty property = findPropertyInClassHierarchy(name, superClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,298,return property;
src/main/groovy/groovy/lang/MetaClassImpl.java,300,superClass = superClass.getCachedSuperClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,302,return null;
src/main/groovy/groovy/lang/MetaClassImpl.java,851,Class theClass = instance instanceof Class ? (Class)instance : instance.getClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,852,CachedClass superClass = theCachedClass;
src/main/groovy/groovy/lang/MetaClassImpl.java,853,while(superClass != null && superClass != ReflectionCache.OBJECT_CLASS) {
src/main/groovy/groovy/lang/MetaClassImpl.java,854,final MetaBeanProperty property = findPropertyInClassHierarchy(propertyName, superClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,855,if(property != null) {
src/main/groovy/groovy/lang/MetaClassImpl.java,856,onSuperPropertyFoundInHierarchy(property);
src/main/groovy/groovy/lang/MetaClassImpl.java,857,if(!isGetter) {
src/main/groovy/groovy/lang/MetaClassImpl.java,858,property.setProperty(instance, optionalValue);
src/main/groovy/groovy/lang/MetaClassImpl.java,859,return null;
src/main/groovy/groovy/lang/MetaClassImpl.java,861,else {
src/main/groovy/groovy/lang/MetaClassImpl.java,862,return property.getProperty(instance);
src/main/groovy/groovy/lang/MetaClassImpl.java,865,superClass = superClass.getCachedSuperClass();
src/main/groovy/groovy/lang/MetaClassImpl.java,868,if(isGetter) {
src/main/groovy/groovy/lang/MetaClassImpl.java,3555,MetaBeanProperty property= null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,383,Object type = node.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,399,node.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,470,ClassNode cn = (ClassNode) expression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,506,source.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, getterNode.getReturnType());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,510,StaticTypesMarker marker = lhsOfAssignment ? StaticTypesMarker.PV_FIELDS_MUTATION : StaticTypesMarker.PV_FIELDS_ACCESS;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,638,if (vexp.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER) == null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,690,ClassNode inferredType = getInferredTypeFromTempInfo(variable, (ClassNode) variable.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,713,VariableExpression implicitThis = varX("this");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,714,PropertyExpression pe = new PropertyExpression(implicitThis, dynName);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,715,pe.setImplicitThis(true);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,716,if (visitPropertyExpressionSilent(pe, vexp)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,717,ClassNode previousIt = vexp.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,718,vexp.copyNodeMetaData(implicitThis);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,719,vexp.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, previousIt);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,720,storeType(vexp, getType(pe));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,721,Object val = pe.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,722,if (val != null) vexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY, val);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,723,val = pe.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,724,if (val != null) vexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, val);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,813,storeTargetMethod(expression, (MethodNode) reversedBinaryExpression.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,816,&& leftExpression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE) == null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,899,ClassNode type = var.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,960,MethodNode directSetterCandidate = call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,970,directSetterCandidate = call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,980,leftExpression.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, directSetterCandidate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1123,if (expr.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY) == null) return false;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1173,rightExpression.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, methodNode);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1502,pexp.removeNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1505,pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1530,pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1534,pexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY, true);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1588,if (delegationData != null) pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1718,expressionToStoreOn.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1728,expressionToStoreOn.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2080,ClassNode newlyInferred = (ClassNode) virtualDecl.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2538,visitMethodCallArguments(receiver, argumentList, true, (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3205,storeTargetMethod(call, (MethodNode) subcall.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3408,call.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, data);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3439,MethodNode mn = (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3452,call.removeNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3617,call.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, directMethodCallCandidate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3996,ClassNode oldValue = (ClassNode) exp.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, cn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4005,ClassNode oldDIT = (ClassNode) exp.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4007,exp.putNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE, cn == null ? oldDIT : lowestUpperBound(oldDIT, cn));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4009,exp.putNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE, cn == null ? null : lowestUpperBound(oldValue, cn));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4019,((Parameter) accessedVariable).putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, cn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4627,ClassNode cn = exp.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4737,MethodNode target = (MethodNode) exp.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5086,ClassNode closureReturnType = expression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5398,MethodNode methodNode = (MethodNode) call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5468,varOrigType.put(ve, (ClassNode) ve.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5516,ClassNode inferred = parameter.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,5520,parameter.setNodeMetaData(StaticTypesMarker.INFERRED_TYPE, inferred);
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,338,ClassNode lhsType = controller.getTypeChooser().resolveType(leftExpression, controller.getClassNode());
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,351,ClassNode rhsType;
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,358,rhsType = leftExpression.getType();
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,359,loadInitValue(rhsType);
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,363,rhsType = operandStack.getTopOperand();
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,443,TypeChooser typeChooser = controller.getTypeChooser();
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,444,ClassNode targetType = typeChooser.resolveType(leftExpression, controller.getClassNode());
src/main/java/org/codehaus/groovy/classgen/asm/BinaryExpressionHelper.java,445,operandStack.doGroovyCast(targetType);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3219,final ClassNode receiver = getType(objectExpression);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,205,Variable ret = findClassMember(cn.getSuperClass(), name);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,206,if (ret != null) return ret;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,207,return findClassMember(cn.getOuterClass(), name);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,244,ClassNode classScope = scope.getClassScope();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,245,if (classScope != null) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,246,Variable member = findClassMember(classScope, var.getName());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,179,import static org.codehaus.groovy.ast.tools.GenericsUtils.makeDeclaringAndActualGenericsTypeMap;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,589,ClassNode enclosingClassNode = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,590,storeType(vexp, makeType(enclosingClassNode, typeCheckingContext.isInStaticContext));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,597,ClassNode superClassNode = typeCheckingContext.getEnclosingClassNode().getSuperClass();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,598,storeType(vexp, makeType(superClassNode, typeCheckingContext.isInStaticContext));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2150,if (args.length > 0 &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2151,typeCheckingContext.getEnclosingClosure() != null &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2152,argumentList.getExpression(0) instanceof VariableExpression &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2153,((VariableExpression) argumentList.getExpression(0)).isThisExpression() &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2154,call.getType() instanceof InnerClassNode &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2155,call.getType().getOuterClass().equals(args[0]) &&
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2156,!call.getType().isStaticClass()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2157,args[0] = CLOSURE_TYPE;
src/main/groovy/groovy/lang/MetaClassImpl.java,2836,public Object getAttribute(Class sender, Object receiver, String messageName, boolean useSuper) {
src/main/groovy/groovy/lang/MetaClassImpl.java,2837,return getAttribute(receiver, messageName);
src/main/groovy/groovy/lang/MetaClassImpl.java,2875,throw new MissingFieldException(attribute, theClass);
src/main/groovy/groovy/lang/MetaClassImpl.java,2915,throw new MissingFieldException(attribute, theClass);
src/main/groovy/groovy/lang/Script.java,66,setMetaClass((MetaClass)newValue);
src/main/groovy/groovy/lang/Script.java,67,else
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1184,private void addMapAssignmentConstructorErrors(ClassNode leftRedirect, Expression leftExpression, Expression rightExpression) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1188,if (!implementsInterfaceOrIsSubclassOf(leftRedirect, MAP_TYPE) && rightExpression instanceof MapExpression) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1189,if (!(leftExpression instanceof VariableExpression) || !((VariableExpression) leftExpression).isDynamicTyped()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1190,ArgumentListExpression argList = args(rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1191,ClassNode[] argTypes = getArgumentTypes(argList);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1192,checkGroovyStyleConstructor(leftRedirect, argTypes, rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1194,MapExpression mapExpression = (MapExpression) rightExpression;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1195,checkGroovyConstructorMap(leftExpression, leftRedirect, mapExpression);
src/main/groovy/groovy/ui/GroovyMain.java,147,static class VersionProvider implements IVersionProvider {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,294,static class VersionProvider implements IVersionProvider {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4458,MethodNode node = new MethodNode(name, Opcodes.ACC_PUBLIC, property.getType(), Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, GENERATED_EMPTY_STATEMENT);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4459,if (property.isStatic()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4460,node.setModifiers(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4462,node.setDeclaringClass(receiver);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4463,return Collections.singletonList(
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4464,node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4481,MethodNode node = new MethodNode(name, Opcodes.ACC_PUBLIC, VOID_TYPE, new Parameter[]{
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4484,if (property.isStatic()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4485,node.setModifiers(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4487,node.setDeclaringClass(receiver);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,48,private final SourceUnit sourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,52,private MethodNode currentMethod;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,69,thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,73,if (!isStatic(innerClass) && innerClass.getVariableScope() == null) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,169,int pCount = additionalParamCount;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,170,for (Expression expr : expressions) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,171,pCount++;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,174,Parameter param = new Parameter(ClassHelper.OBJECT_TYPE, "p" + pCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,190,pCount = 0;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,204,pCount++;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,211,ClassNode rawReferenceType = ClassHelper.REFERENCE_TYPE.getPlainNodeReference();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,212,Parameter p = new Parameter(rawReferenceType, "p" + pCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,213,parameters.add(pCount, p);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,226,private boolean isStaticThis(InnerClassNode innerClass, VariableScope scope) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,227,if (inClosure) return false;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,228,boolean ret = innerClass.isStaticClass();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,230,ret = ret || innerClass.getEnclosingMethod().isStatic();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,232,ret = ret || currentField.isStatic();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,234,ret = true;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,236,return ret;
src/main/java/org/codehaus/groovy/classgen/Verifier.java,59,import org.codehaus.groovy.ast.tools.PropertyNodeUtils;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,50,private static final int PUBLIC_SYNTHETIC = Opcodes.ACC_PUBLIC + Opcodes.ACC_SYNTHETIC;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,51,private FieldNode thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,54,private boolean processingObjInitStatements = false;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,55,private boolean inClosure = false;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,68,this.classNode = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,74,thisField = innerClass.addField("this$0", PUBLIC_SYNTHETIC, node.getOuterClass().getPlainNodeReference(), null);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,106,this.currentMethod = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,116,this.currentMethod = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,121,this.currentField = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,123,this.currentField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,136,public void visitConstructorCallExpression(ConstructorCallExpression call) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,146,if (superClass instanceof InnerClassNode
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,148,&& !(superClass.isStaticClass()||((superClass.getModifiers()&ACC_STATIC)==ACC_STATIC))) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,162,final int additionalParamCount = 1 + scope.getReferencedLocalVariablesCount();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,163,List<Parameter> parameters = new ArrayList<Parameter>(expressions.size() + additionalParamCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,165,List<Expression> superCallArguments = new ArrayList<Expression>(expressions.size());
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,191,expressions.add(pCount, VariableExpression.THIS_EXPRESSION);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,192,boolean isStatic = isStaticThis(innerClass,scope);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,193,ClassNode outerClassType = getClassNode(outerClass, isStatic);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,194,if (!isStatic && inClosure) outerClassType = ClassHelper.CLOSURE_TYPE;
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,195,outerClassType = outerClassType.getPlainNodeReference();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,196,Parameter thisParameter = new Parameter(outerClassType, "p" + pCount);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,197,parameters.add(pCount, thisParameter);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,199,thisField = innerClass.addField("this$0", PUBLIC_SYNTHETIC, outerClassType, null);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,200,addFieldInit(thisParameter, thisField, block);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,203,for (Iterator it = scope.getReferencedLocalVariablesIterator(); it.hasNext();) {
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,205,org.codehaus.groovy.ast.Variable var = (org.codehaus.groovy.ast.Variable) it.next();
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,215,final VariableExpression initial = new VariableExpression(p);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,218,final FieldNode pField = innerClass.addFieldFirst(ve.getName(), PUBLIC_SYNTHETIC,rawReferenceType, initial);
src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,229,if (    innerClass.getEnclosingMethod()!=null) {
src/main/java/org/codehaus/groovy/classgen/Verifier.java,892,protected void addConstructor(Parameter[] newParams, ConstructorNode ctor, Statement code, ClassNode node) {
src/main/java/org/codehaus/groovy/classgen/Verifier.java,893,ConstructorNode genConstructor = node.addConstructor(ctor.getModifiers(), newParams, ctor.getExceptions(), code);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,894,markAsGenerated(node, genConstructor);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,958,ClassNode classNode = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,973,if (field != null && ((field.getModifiers() & ACC_PRIVATE) != 0)) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,977,if (controller.isNotExplicitThisInClosure(expression.isImplicitThis())) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,979,if (field==null && classNode instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,980,ClassNode outer = classNode.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,981,FieldNode outerClassField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,983,outerClassField = outer.getDeclaredField(name);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,988,PropertyExpression pexp = new PropertyExpression(
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,989,new ClassExpression(outer),
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,991,);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,992,pexp.visit(controller.getAcg());
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,993,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,995,outer = outer.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,998,if (field==null
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,999,&& expression instanceof AttributeExpression
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1001,&& controller.isStaticContext()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1003,ClassNode current = classNode.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1004,while (field==null && current!=null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1005,field = current.getDeclaredField(name);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1006,current = current.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1008,if (field!=null && (field.isProtected() || field.isPublic())) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1009,visitFieldExpression(new FieldExpression(field));
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1010,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1015,if (field != null && !privateSuperField) {//GROOVY-4497: don't visit super field if it is private
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1016,visitFieldExpression(new FieldExpression(field));
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1020,String prefix;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1024,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1026,prefix = "get";
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1028,String propName = prefix + MetaClassHelper.capitalize(name);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1029,visitMethodCallExpression(new MethodCallExpression(objectExpression, propName, MethodCallExpression.NO_ARGUMENTS));
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1037,if (expression.getObjectExpression() instanceof ClassExpression &&
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1086,if (propName!=null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1183,ClassNode classNode = controller.getClassNode();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1186,if (isThisOrSuper(objectExpression) /*&&
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1188,) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1194,FieldExpression exp = new FieldExpression(field);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1195,exp.setSourcePosition(expression);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1196,visitFieldExpression(exp);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1197,return;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1202,MethodCallerMultiAdapter adapter;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1203,OperandStack operandStack = controller.getOperandStack();
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1204,int mark = operandStack.getStackLength()-1;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1205,if (controller.getCompileStack().isLHS()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1206,adapter = setField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1207,if (isGroovyObject(objectExpression)) adapter = setGroovyObjectField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1208,if (usesSuper(expression)) adapter = setFieldOnSuper;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1210,adapter = getField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1211,if (isGroovyObject(objectExpression)) adapter = getGroovyObjectField;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1212,if (usesSuper(expression)) adapter = getFieldOnSuper;
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1214,visitAttributeOrProperty(expression, adapter);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1252,if (controller.getCompileStack().isLHS()) controller.getAssertionWriter().record(expression);
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java,76,return ((IntRange)range).subListBorders(size);
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,982,while (outer!=null) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,984,if (outerClassField!=null && outerClassField.isStatic() && outerClassField.isFinal()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,985,if (outer!=classNode.getOuterClass() && outerClassField.isPrivate()) {
src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,986,throw new GroovyBugError("Trying to access private constant field ["+outerClassField.getDeclaringClass()+"#"+outerClassField.getName()+"] from inner class");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1134,private void addPrecisionErrors(ClassNode leftRedirect, ClassNode lhsType, ClassNode inferredrhsType, Expression rightExpression) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1135,if (isNumberType(leftRedirect) && isNumberType(inferredrhsType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1136,if (checkPossibleLossOfPrecision(leftRedirect, inferredrhsType, rightExpression)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1137,addStaticTypeError("Possible loss of precision from " + inferredrhsType + " to " + leftRedirect, rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1142,if (!lhsType.isArray()) return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1143,ClassNode leftComponentType = lhsType.getComponentType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1144,ClassNode rightRedirect = rightExpression.getType().redirect();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1145,if (rightRedirect.isArray()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1146,ClassNode rightComponentType = rightRedirect.getComponentType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1147,if (!checkCompatibleAssignmentTypes(leftComponentType, rightComponentType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1148,addStaticTypeError("Cannot assign value of type " + rightComponentType.toString(false) + " into array of type " + lhsType.toString(false), rightExpression);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1151,for (Expression element : ((ListExpression) rightExpression).getExpressions()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1152,ClassNode rightComponentType = this.getType(element);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1154,&& !(isNullConstant(element) && !isPrimitiveType(leftComponentType))) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2136,super.visitConstructorCallExpression(call);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2180,if (node != null) storeTargetMethod(call, node);
src/main/java/org/codehaus/groovy/transform/AutoImplementASTTransformation.java,134,if (!origInterface.equals(ClassHelper.OBJECT_TYPE)) {
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,391,if (path!=null) {
src/main/java/org/codehaus/groovy/transform/ASTTransformationVisitor.java,336,+ entry.getValue().toExternalForm() + "  because of exception " + e.toString(), null));
src/main/java/org/codehaus/groovy/reflection/CachedClass.java,433,classInfo.setStrongMetaClass(new MetaClassImpl(metaClass.getTheClass()));
src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,16654,return findIndexOf(InvokerHelper.asIterator(self), condition);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,69,is_ambiguous(false); // any further use of that variable can trigger uninitialized ot not final errors
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,286,Set<Variable> allVars = new HashSet<Variable>();
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,292,VariableState ifValue = ifState.get(var);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,293,VariableState elseValue = elseState.get(var);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,295,VariableState mergedIfElse;
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,296,mergedIfElse = isFinal(ifValue) && isFinal(elseValue) ? VariableState.is_final : VariableState.is_var;
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,298,curState.put(var, mergedIfElse);
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,313,private boolean isFinal(VariableState value) {
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,314,return value != null && value.isFinal;
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,320,Map<Variable, VariableState> beforeTryState = new HashMap<Variable, VariableState>(getState());
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,324,Map<Variable, VariableState> afterTryState = new HashMap<Variable, VariableState>(getState());
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,330,afterStates.add(new HashMap<Variable, VariableState>(getState()));
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,337,afterStates.add(new HashMap<Variable, VariableState>(getState()));
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,388,if (block instanceof ReturnStatement) {
src/main/java/org/codehaus/groovy/classgen/FinalVariableAnalyzer.java,399,if (last instanceof ReturnStatement) {
src/main/java/org/codehaus/groovy/ast/GenericsType.java,328,if (!bound.isUsingGenerics() || (classNode.getGenericsTypes()==null && classNode.redirect().getGenericsTypes()!=null)) {
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,37,protected final Map<String,Class> knownClasses = new HashMap<String,Class>();
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,54,catch (Throwable e) {
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,61,super (SunClassLoader.class.getClassLoader());
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,65,loadMagic ();
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,76,mv.visitMaxs(0,0);
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,87,reader.accept(cw, ClassWriter.COMPUTE_MAXS);
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,93,return s.replace('.','/') + ".class";
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,103,return aClass;
src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java,108,catch (ClassNotFoundException e) {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,36,sunVM = AccessController.doPrivileged(new PrivilegedAction<SunClassLoader>() {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,37,public SunClassLoader run() {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,38,try {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,39,if (SunClassLoader.sunVM != null) {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,40,return new GroovySunClassLoader();
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,43,catch (Throwable t) {//
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,45,return null;
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,50,protected GroovySunClassLoader () throws Throwable {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,52,loadAbstract ();
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,60,private void loadAbstract() throws IOException {
src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java,69,reader.accept(cv, ClassWriter.COMPUTE_MAXS);
src/main/java/org/apache/groovy/ast/tools/AnnotatedNodeUtils.java,39,boolean shouldAnnotate = containingClass.getModule() != null && containingClass.getModule().getContext() != null;
src/main/java/org/codehaus/groovy/classgen/asm/ClosureWriter.java,286,answer.addMethod(
src/main/java/org/codehaus/groovy/classgen/asm/ClosureWriter.java,292,new ReturnStatement(fieldExp));
src/main/java/org/codehaus/groovy/runtime/callsite/PogoMetaClassSite.java,56,return CallSiteArray.defaultCall(this, receiver, args);
src/main/java/org/codehaus/groovy/runtime/callsite/PogoMetaClassSite.java,74,return ((GroovyObject)receiver).invokeMethod(name, args);
src/main/java/org/codehaus/groovy/runtime/callsite/PogoMetaClassSite.java,83,return CallSiteArray.defaultCallCurrent(this, receiver, args);
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,170,(node.isGenericsPlaceHolder() && redirectGenericsTypes.length != parameterized.length) /* GROOVY-8609 */ ) {
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,692,return findParameterizedType(genericsClass, actualType);
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,698,return new SoftReference<>(findParameterizedType(key.getGenericsClass(), key.getActualType()));
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,730,if (!genericsClass.equals(cn.redirect())) {
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,794,ClassNode parameterizedType = findParameterizedTypeFromCache(declaringClass, actualReceiver);
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,801,GenericsType[] actualGenericsTypes = parameterizedType.getGenericsTypes();
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,803,Map<GenericsType, GenericsType> result = new LinkedHashMap<>();
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,804,for (int i = 0, n = declaringGenericsTypes.length; i < n; i++) {
src/main/java/org/codehaus/groovy/ast/tools/GenericsUtils.java,805,result.put(declaringGenericsTypes[i], actualGenericsTypes[i]);
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,267,if (end.isClassScope() ||
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,268,(end.isReferencedClassVariable(name) && end.getDeclaredVariable(name) == null)) {
src/main/java/org/codehaus/groovy/ast/MethodNode.java,37,private final String name;
src/main/java/org/codehaus/groovy/ast/MethodNode.java,46,private final ClassNode[] exceptions;
src/main/java/org/codehaus/groovy/ast/MethodNode.java,47,private final boolean staticConstructor;
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,195,MethodNode node = addAnnotations(method, MemberSignatureParser.createMethodNode(resolver, method));
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,196,if (node instanceof ConstructorNode) {
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,197,addConstructor((ConstructorNode) node);
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,199,addMethod(node);
src/main/java/org/codehaus/groovy/ast/decompiled/DecompiledClassNode.java,206,addField(addAnnotations(field, MemberSignatureParser.createFieldNode(field, resolver, this)));
src/main/java/org/codehaus/groovy/transform/DelegateASTTransformation.java,340,newMethod.addAnnotations(copyAnnotatedNodeAnnotations(candidate, MY_TYPE_NAME));
src/main/java/org/codehaus/groovy/classgen/asm/StatementWriter.java,92,for (Statement statement : block.getStatements()) {
src/main/java/org/codehaus/groovy/classgen/asm/StatementWriter.java,98,if (block.getLastLineNumber() > 0) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,44,import java.net.MalformedURLException;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,73,public void compile(String[] paths) throws Exception {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,74,unit.addSources(paths);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,75,unit.compile();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,78,public void compile(File[] files) throws Exception {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,79,unit.addSources(files);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,80,unit.compile();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,92,public static void displayHelp(final PrintWriter writer) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,104,public static void displayVersion(final PrintWriter writer) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,117,++errors;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,120,++errors;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,131,private static boolean displayStackTraceOnError = false;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,156,String[] filenames = options.generateFileNames();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,157,boolean fileNameErrors = filenames == null;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,158,if (!fileNameErrors && (filenames.length == 0)) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,163,fileNameErrors = fileNameErrors && !validateFiles(filenames);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,166,doCompilation(configuration, null, filenames, lookupUnnamedFiles);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,238,public URL loadGroovySource(String filename) throws MalformedURLException {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,257,List<String> fileList = new ArrayList<String>(filenames.size());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,297,return new String[] {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,308,customSynopsis = "groovyc [options] <source-files>",
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,309,sortOptions = false,
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,373,if (targetDir != null && targetDir.getName().length() > 0) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,378,configuration.setSourceEncoding(encoding);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,383,Map<String, Object> compilerOptions = new HashMap<String, Object>();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,384,compilerOptions.put("namedValues", javacOptionsList());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,385,compilerOptions.put("flags", flagsWithParameterMetaData());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,390,configuration.getOptimizationOptions().put("int", false);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,391,configuration.getOptimizationOptions().put("indy", true);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,396,List<String> scripts = new ArrayList<String>();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,413,String[] javacOptionsList() {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,414,if (javacOptionsMap == null) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,415,return null;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,417,List<String> result = new ArrayList<String>();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,418,for (Map.Entry<String, String> entry : javacOptionsMap.entrySet()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,419,result.add(entry.getKey());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,420,result.add(entry.getValue());
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,422,return result.toArray(new String[0]);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,425,String[] flagsWithParameterMetaData() {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,426,if (flags == null) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,427,return null;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,430,flags.add("parameters");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,432,return flags.toArray(new String[0]);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,438,public static void displayHelp(final Options options) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,439,final HelpFormatter formatter = new HelpFormatter();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,440,formatter.printHelp(80, "groovyc [options] <source-files>", "options:", options, "");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,446,public static CompilerConfiguration generateCompilerConfigurationFromOptions(org.apache.commons.cli.CommandLine cli) throws IOException {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,447,throw new DeprecationException("This method is not supported for Groovy 2.5+. Consider instead using the FileSystemCompiler.CompilationOptions class.");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,451,public static String[] generateFileNamesFromOptions(org.apache.commons.cli.CommandLine cli) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,452,throw new DeprecationException("This method is not supported for Groovy 2.5+. Consider instead using the FileSystemCompiler.CompilationOptions class.");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,456,public static Options createCompilationOptions() {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,457,throw new DeprecationException("This method is not supported for Groovy 2.5+. Consider instead using the FileSystemCompiler.CompilationOptions class.");
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,467,public static File createTempDir() throws IOException {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,468,return DefaultGroovyStaticMethods.createTempDir(null);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,471,public static void deleteRecursive(File file) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,472,if (!file.exists()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,473,return;
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,475,if (file.isFile()) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,476,file.delete();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,478,File[] files = file.listFiles();
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,479,for (int i = 0; i < files.length; i++) {
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,480,deleteRecursive(files[i]);
src/main/java/org/codehaus/groovy/tools/FileSystemCompiler.java,482,file.delete();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,42,import org.codehaus.groovy.tools.RootLoader;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,51,import java.net.MalformedURLException;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,57,import java.util.Enumeration;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,169,private static final URL[] EMPTY_URL_ARRAY = new URL[0];
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,179,private boolean stacktrace = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,180,private boolean verbose = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,182,private boolean includeJavaRuntime = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,183,private boolean fork = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,185,private String forkedExecutable = null;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,189,private String targetBytecode = null;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,192,protected boolean listFiles = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,204,private final List<File> temporaryFiles = new ArrayList<File>(2);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,212,private Set<String> scriptExtensions = new LinkedHashSet<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,217,private boolean parameters = false;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,866,scriptExtensions = new LinkedHashSet<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,943,List<String> jointOptions = new ArrayList<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,948,for (Object o1 : rc.getAttributeMap().entrySet()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,949,final Map.Entry e = (Map.Entry) o1;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,950,final String key = e.getKey().toString();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,951,final String value = getProject().replaceProperties(e.getValue().toString());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,952,if (key.contains("debug")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,953,String level = "";
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,954,if (javac.getDebugLevel() != null) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,955,level = ":" + javac.getDebugLevel();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,957,jointOptions.add("-Fg" + level);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,962,|| (key.contains("deprecation"))) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,965,jointOptions.add("-F" + key);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,967,classpath.add(javac.getClasspath());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,973,|| (key.contains("verbose"))) { // already handling verbose but pass on too
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,974,jointOptions.add("-J" + key + "=" + value);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,976,log.warn("The option " + key + " cannot be set on the contained <javac> element. The option will be ignored");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,983,Enumeration children = rc.getChildren();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,984,while (children.hasMoreElements()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,985,RuntimeConfigurable childrc = (RuntimeConfigurable) children.nextElement();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,987,for (Object o : childrc.getAttributeMap().entrySet()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,988,final Map.Entry e = (Map.Entry) o;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,989,final String key = e.getKey().toString();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,991,final String value = getProject().replaceProperties(e.getValue().toString());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,994,String optionStr = st.nextToken();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,995,String replaced = optionStr.replace("-X", "-FX");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,996,if (optionStr.equals(replaced)) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,997,replaced = optionStr.replace("-W", "-FW"); // GROOVY-5063
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,999,jointOptions.add(replaced);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1010,if (!fork) return;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1012,if (includeAntRuntime) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1013,classpath.addExisting((new Path(getProject())).concatSystemClasspath("last"));
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1015,if (includeJavaRuntime) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1016,classpath.addJavaRuntime();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1019,if (forkedExecutable != null && !forkedExecutable.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1030,commandLineList.add("-classpath");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1031,commandLineList.add(getClasspathRelative(classpath));
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1033,final String fileEncodingProp = System.getProperty("file.encoding");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1034,if ((fileEncodingProp != null) && !fileEncodingProp.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1035,commandLineList.add("-Dfile.encoding=" + fileEncodingProp);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1037,if (targetBytecode != null) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1038,commandLineList.add("-Dgroovy.target.bytecode=" + targetBytecode);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1041,if ((memoryInitialSize != null) && !memoryInitialSize.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1044,if ((memoryMaximumSize != null) && !memoryMaximumSize.equals("")) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1059,private String getClasspathRelative(Path classpath) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1062,for (String next : classpath.list()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1153,log.verbose("Compilation arguments:\n" + DefaultGroovyMethods.join((Iterable)commandLineList, "\n"));
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1158,final Execute executor = new Execute();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1167,final int returnCode = executor.getExitValue();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1195,String[] filenames = options.generateFileNames();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1196,boolean fileNameErrors = filenames == null;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1198,fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1206,FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1211,Throwable t = re;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1212,if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1214,t = re.getCause();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1243,Path classpath = getClasspath() != null ? getClasspath() : new Path(getProject());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1244,List<String> jointOptions = extractJointOptions(classpath);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1246,String separator = System.getProperty("file.separator");
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1247,List<String> commandLineList = new ArrayList<String>();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1249,doForkCommandLineList(commandLineList, classpath, separator);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1304,if (!fork && !getIncludeantruntime()) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1307,final ClassLoader parent =
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1308,AccessController.doPrivileged(
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1309,new PrivilegedAction<ClassLoader>() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1311,public ClassLoader run() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1314,: new AntClassLoader(new RootLoader(EMPTY_URL_ARRAY, null), getProject(), getClasspath());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1317,if (parent instanceof AntClassLoader) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1318,AntClassLoader antLoader = (AntClassLoader) parent;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1349,GroovyClassLoader loader =
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1350,AccessController.doPrivileged(
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1351,new PrivilegedAction<GroovyClassLoader>() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1353,public GroovyClassLoader run() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1354,return new GroovyClassLoader(parent, configuration);
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1359,loader.setResourceLoader(new GroovyResourceLoader() {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1360,public URL loadGroovySource(String filename) throws MalformedURLException {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1365,return loader;
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1377,Path classpath = getClasspath() != null ? getClasspath() : new Path(getProject());
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1378,final String[] pe = classpath.list();
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1380,for (String file : pe) {
subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java,1381,loader.addClasspath(file);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,130,import java.util.LinkedList;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,182,private String[] tokenNames;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,183,private int innerClassCounter = 1;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,184,private boolean enumConstantBeingDef = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,185,private boolean forStatementBeingDef = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,186,private boolean annotationBeingDef = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,187,private boolean firstParamIsVarArg = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,188,private boolean firstParam = false;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,190,public /*final*/ Reduction parseCST(final SourceUnit sourceUnit, Reader reader) throws CompilationFailedException {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,191,final SourceBuffer sourceBuffer = new SourceBuffer();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,241,AccessController.doPrivileged(new PrivilegedAction() {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,242,public Object run() {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,248,return null; //new Reduction(Tpken.EOF);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,256,saveAsXML(sourceUnit.getName(), ast);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,300,List<VisitorAdapter> v = new ArrayList<VisitorAdapter>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,312,private static void saveAsXML(String name, AST ast) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,313,XStreamUtils.serialize(name+".antlr", ast);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,340,catch (ASTRuntimeException e) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,383,default: {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,384,Statement statement = statement(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,385,output.addStatement(statement);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,396,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,402,String name = qualifiedName(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,404,PackageNode packageNode = setPackage(name, annotations);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,414,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,426,AST aliasNode = node.getNextSibling();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,454,if (alias != null) throw new GroovyBugError(
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,476,if (node!=null && node!=ImportNode.class) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,493,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,535,int oldInnerClassCounter = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,538,innerClassCounter = oldInnerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,542,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,583,int oldClassCount = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,590,innerClassCounter = oldClassCount;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,594,int oldInnerClassCounter = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,597,innerClassCounter = oldInnerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,608,String fullName = outerClass.getName() + '$' + innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,609,innerClassCounter++;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,611,classNode = new EnumConstantClassNode(outerClass, fullName, Opcodes.ACC_PUBLIC, ClassHelper.OBJECT_TYPE);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,613,classNode = new InnerClassNode(outerClass, fullName, Opcodes.ACC_PUBLIC, ClassHelper.OBJECT_TYPE);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,620,output.addClass(classNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,629,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,690,int oldClassCount = innerClassCounter;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,696,innerClassCounter = oldClassCount;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,753,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,773,ClassNode oldNode = classNode;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,776,configureAST(classNode, enumNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,787,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,864,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,914,List<ClassNode> exceptionList = new ArrayList<ClassNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,976,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,996,List<ClassNode> exceptionList = new ArrayList<ClassNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1017,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1130,List<ClassNode> interfaceList = new ArrayList<ClassNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1150,List<Parameter> parameters = new ArrayList<Parameter>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1178,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1191,if (variableParameterDef) type = type.makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1318,String name = qualifiedName(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1319,AnnotationNode annotatedNode = new AnnotationNode(ClassHelper.make(name));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1425,if (node != null) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1426,configureAST(block, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1558,List<AnnotationNode> annotations = new ArrayList<AnnotationNode>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1635,List list = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1640,List cases = new LinkedList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1642,tmpDefaultStatement = caseStatements(child, cases);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1643,list.addAll(cases);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1647,if (tmpDefaultStatement != EmptyStatement.INSTANCE) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1648,if (defaultStatement == EmptyStatement.INSTANCE) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1658,SwitchStatement switchStatement = new SwitchStatement(expression, list, defaultStatement);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1663,protected Statement caseStatements(AST node, List cases) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1664,List<Expression> expressions = new LinkedList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1681,Iterator iterator = expressions.iterator();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1682,while (iterator.hasNext()) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1683,Expression expr = (Expression) iterator.next();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1684,Statement stmt;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1725,List<CatchStatement> catches = new ArrayList<CatchStatement>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1750,List<CatchStatement> catches = new LinkedList<CatchStatement>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1754,final AST multicatches = node.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1831,return expression(node.getFirstChild());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2001,return binaryExpression(Types.COMPARE_IDENTICAL, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2003,case ???:
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2004,return binaryExpression(Types.LOGICAL_AND_EQUAL, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2006,case ???:
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2007,return binaryExpression(Types.LOGICAL_OR_EQUAL, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2120,return new AnnotationConstantExpression(annotation(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2156,List<Expression> list = new LinkedList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2215,protected Expression literalExpression(AST node, Object value) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2264,protected Expression defaultMethodPointerExpression(AST node) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2265,AST exprNode = node.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2266,String methodName = exprNode.toString();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2267,MethodPointerExpression methodPointerExpression = new MethodPointerExpression(null, methodName);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2268,configureAST(methodPointerExpression, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2269,return methodPointerExpression;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2274,List<Expression> expressions = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2299,List expressions = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2310,break;  // helpful error
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2313,break;  // helpful error
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2315,expressions.add(mapEntryExpression(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2318,MapExpression mapExpression = new MapExpression(expressions);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2371,return CastExpression.asExpression(type, leftExpression);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2563,+ " cannot be used as a method name");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2637,List size = arraySizeExpression(expressionNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2674,protected List arraySizeExpression(AST node) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2675,List list;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2691,list = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2698,List<Expression> expressionList = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2709,List expressionList = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2726,List<Expression> argumentList = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2755,private static void checkDuplicateNamedParams(AST elist, List expressionList) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2758,Set<String> namedArgumentNames = new HashSet<String>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2759,for (Object expression : expressionList) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2760,MapEntryExpression meExp = (MapEntryExpression) expression;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2766,throw new ASTRuntimeException(elist, "Duplicate named parameter '" + argName
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2767,+ "' found.");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2789,List<Expression> expressionList = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2853,ConstantExpression constantLongExpression = new ConstantExpression(Numbers.parseInteger(unaryMinusExpr,"-" + text));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2873,return expression(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2876,UnaryPlusExpression unaryPlusExpression = new UnaryPlusExpression(expression(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2877,configureAST(unaryPlusExpression, unaryPlusExpr);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2901,List strings = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2902,List values = new ArrayList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2939,protected ClassNode type(AST typeNode) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2942,return buildName(typeNode.getFirstChild());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3031,List<GenericsType> typeArgumentList = new LinkedList<GenericsType>();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3047,LinkedList bounds = new LinkedList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3048,for (AST boundsNode = boundsRoot.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3049,boundsNode != null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3051,) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3052,ClassNode bound = null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3053,bound = makeTypeWithArguments(boundsNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3058,return (ClassNode[]) bounds.toArray(ClassNode.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3063,LinkedList ret = new LinkedList();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3067,AST typeNode = typeParameter.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3068,ClassNode type = makeType(typeParameter);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3070,GenericsType gt = new GenericsType(type, makeGenericsBounds(typeNode, TYPE_UPPER_BOUNDS), null);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3073,ret.add(gt);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3076,return (GenericsType[]) ret.toArray(GenericsType.EMPTY_ARRAY);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3083,if (isType(INDEX_OP, node) || isType(ARRAY_DECLARATOR, node)) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3084,answer = makeType(node).makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3089,ClassNode newAnswer = ClassHelper.makeWithoutCaching(answer.getName());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3090,newAnswer.setRedirect(answer);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3091,answer = newAnswer;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3094,configureAST(answer, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3119,if (name == null) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3120,return null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3122,return resolveNewClassOrName(name, safe);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3133,ClassNode answer = null;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3134,if (isType(DOT, node) || isType(OPTIONAL_DOT, node)) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3135,answer = ClassHelper.make(qualifiedName(node));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3137,answer = ClassHelper.make(node.getText());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3139,AST child = node.getFirstChild();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3140,answer = buildName(child).makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3141,configureAST(answer, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3142,return answer;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3144,String identifier = node.getText();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3145,answer = ClassHelper.make(identifier);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3148,if (isType(INDEX_OP, nextSibling) || isType(ARRAY_DECLARATOR, node)) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3149,answer = answer.makeArray();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3150,configureAST(answer, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3151,return answer;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3206,throw new ASTRuntimeException(ast, "PARSER BUG: Tried to configure " + node.getClass().getName() + " with null Node");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3207,node.setColumnNumber(ast.getColumn());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,3210,node.setLastColumnNumber(((GroovySourceAST) ast).getColumnLast());
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,94,mainClassName = mainClass.getName();
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,368,if(retTypeMatches && argTypeMatches) {
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,369,if(found) {
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,420,public void sortClasses(){
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,456,addStaticImport(type, fieldName, alias, new ArrayList<AnnotationNode>());
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,462,staticImports.put(alias, node);
src/main/java/org/codehaus/groovy/ast/ModuleNode.java,467,addStaticStarImport(name, type, new ArrayList<AnnotationNode>());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1715,storeWithResolve(field.getOriginType(), receiver, field.getDeclaringClass(), field.isStatic(), expressionToStoreOn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1723,private boolean storeProperty(PropertyNode propertyNode, PropertyExpression expressionToStoreOn, ClassNode receiver, ClassCodeVisitorSupport visitor, String delegationData) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1724,if (propertyNode == null) return false;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1725,if (visitor != null) visitor.visitProperty(propertyNode);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1726,storeWithResolve(propertyNode.getOriginType(), receiver, propertyNode.getDeclaringClass(), propertyNode.isStatic(), expressionToStoreOn);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1425,if (objectExpressionType.isArray() && "length".equals(pexp.getPropertyAsString())) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1426,storeType(pexp, int_TYPE);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1427,if (visitor != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1428,PropertyNode node = new PropertyNode("length", Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL, int_TYPE, objectExpressionType, null, null, null);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1429,visitor.visitProperty(node);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1431,return true;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1444,LinkedList<ClassNode> queue = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,828,LabelVerifier lv = new LabelVerifier(source);
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,829,lv.visitClass(classNode);
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,844,ClassVisitor visitor = createClassVisitor();
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,853,AsmClassGenerator generator = new AsmClassGenerator(source, context, visitor, sourceName);
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,860,byte[] bytes = ((ClassWriter) visitor).toByteArray();
src/main/java/org/codehaus/groovy/control/CompilationUnit.java,867,classgenCallback.call(visitor, classNode);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,56,private static final Class MY_CLASS = InheritConstructors.class;
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,57,private static final ClassNode MY_TYPE = make(MY_CLASS);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,58,private static final String MY_TYPE_NAME = "@" + MY_TYPE.getNameWithoutPackage();
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,62,AnnotatedNode parent = (AnnotatedNode) nodes[1];
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,63,AnnotationNode node = (AnnotationNode) nodes[0];
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,64,if (!MY_TYPE.equals(node.getClassNode())) return;
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,66,if (parent instanceof ClassNode) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,67,processClass((ClassNode) parent, node);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,80,List<AnnotationNode> superAnnotations = sNode.getAnnotations(MY_TYPE);
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,103,added.addAnnotations(copyAnnotatedNodeAnnotations(consNode, MY_TYPE_NAME));
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,108,List<Expression> theArgs = new ArrayList<Expression>();
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,109,for (int i = 0; i < origParams.length; i++) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,114,params[i].addAnnotations(copyAnnotatedNodeAnnotations(origParams[i], MY_TYPE_NAME));
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,116,theArgs.add(varX(p.getName(), newType));
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,122,for (ConstructorNode consNode : classNode.getDeclaredConstructors()) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,123,if (matchingTypes(params, consNode.getParameters())) {
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,124,return true;
src/main/java/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,127,return false;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,565,if (parameters.length == 0) parameters = null; // null means no implicit "it"
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,571,final Expression expression = field.getInitialExpression();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,574,if (expression instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,575,VariableExpression vexp = (VariableExpression) expression;
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,576,if (vexp.getAccessedVariable() instanceof Parameter) {
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,578,popState();
src/main/java/org/codehaus/groovy/classgen/VariableScopeVisitor.java,579,continue;
src/main/java/org/codehaus/groovy/transform/ASTTransformationVisitor.java,158,public void visitAnnotations(AnnotatedNode node) {
src/main/java/org/codehaus/groovy/transform/ASTTransformationVisitor.java,160,for (AnnotationNode annotation : node.getAnnotations()) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,149,public void visitClass(final ClassNode node) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,150,List<Statement> savedStatements = new ArrayList<Statement>(node.getObjectInitializerStatements());
src/main/groovy/groovy/util/logging/Commons.java,105,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Log.java,116,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Log4j.java,116,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Log4j2.java,104,ConstantExpression.NULL);
src/main/groovy/groovy/util/logging/Slf4j.java,104,ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1450,messageExpression = ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1624,Expression expression = exprNode == null ? ConstantExpression.NULL : expression(exprNode);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2819,if (codeNode == null) return ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/ast/decompiled/Annotations.java,76,return annotationNode != null ? new AnnotationConstantExpression(annotationNode) : ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,137,result.setCode(new ReturnStatement(ConstantExpression.NULL));
src/main/java/org/codehaus/groovy/ast/stmt/AssertStatement.java,41,this(booleanExpression, ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/ast/stmt/ReturnStatement.java,35,public static final ReturnStatement RETURN_NULL_OR_VOID = new ReturnStatement(ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/classgen/asm/AssertionWriter.java,71,boolean rewriteAssert = true;
src/main/java/org/codehaus/groovy/classgen/asm/AssertionWriter.java,73,rewriteAssert = statement.getMessageExpression() == ConstantExpression.NULL;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,260,ArgumentListExpression newArgs = new ArgumentListExpression(target.isStatic()?new ConstantExpression(null):fixedReceiver);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,313,if (returnStatement.getExpression() == ConstantExpression.NULL) return;
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,59,pexp.getProperty().setSourcePosition(expr);
src/main/java/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java,454,forLoop.getVariable().setOriginType(componentType);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,714,int accessorModifiers = PropertyNodeUtils.adjustPropertyModifiersForMethod(node);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,871,method);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1266,intfMethod.getDeclaringClass(), m);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1356,overridingMethod);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1366,overridingMethod);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1374,overridingMethod);
src/main/java/org/codehaus/groovy/classgen/Verifier.java,1393,overridingMethod);
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,151,Map<String, MethodNode> ifaceMethodsMap = iface.getDeclaredMethodsMap();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,152,for (Map.Entry<String, MethodNode> entry : ifaceMethodsMap.entrySet()) {
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,153,String methSig = entry.getKey();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,154,if (!methodsMap.containsKey(methSig)) {
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,155,methodsMap.put(methSig, entry.getValue());
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,169,Map<String, MethodNode> result = new HashMap<String, MethodNode>();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,170,ClassNode[] interfaces = cNode.getInterfaces();
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,171,for (ClassNode iface : interfaces) {
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,172,result.putAll(iface.getDeclaredMethodsMap());
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,174,return result;
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,91,MethodNode result = cNode.addMethod(name, modifiers, returnType, parameters, exceptions, code);
src/main/java/org/apache/groovy/ast/tools/ClassNodeUtils.java,92,markAsGenerated(cNode, result);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,284,argumentList.add(0, ConstantExpression.NULL);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,105,import org.codehaus.groovy.syntax.Types;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,199,import static org.codehaus.groovy.syntax.Types.COMPARE_NOT_IDENTICAL;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,782,if (op == COMPARE_IDENTICAL || op == COMPARE_NOT_IDENTICAL) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3755,if (op != Types.KEYWORD_INSTANCEOF) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,928,throw new ASTRuntimeException(methodDef, "You defined a method without body. Try adding a body, or declare it abstract.");
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,927,if (node == null) {
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,930,assertNodeType(SLIST, node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,931,code = statementList(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,933,code = statement(node);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,934,hasAnnotationDefault = true;
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,936,if (node != null) {
src/main/groovy/groovy/ui/GroovyMain.java,280,CompilerConfiguration.DEFAULT.getOptimizationOptions().put("indy", true);
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,187,builder.addMethod(createBuilderMethodForProp(builder, new PropertyInfo(parameter.getName(), parameter.getType()), getPrefix(anno)));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,214,Map<String,ClassNode> genericsSpec = createGenericsSpec(declaringClass);
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,220,buildee.getModule().addClass(builder);
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,276,Map<String,ClassNode> genericsSpec = createGenericsSpec(buildee);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,44,import static org.apache.groovy.ast.tools.AnnotatedNodeUtils.markAsGenerated;
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,214,buildee.getModule().addClass(builder);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,216,buildee.addMethod(createBuilderMethod(buildMethodName, builder, fieldNodes.size(), builderMethodName));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,218,builder.addMethod(createBuilderMethodForField(builder, fieldNodes, prefix, i));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,220,builder.addMethod(createBuildMethod(builder, buildMethodName, fieldNodes));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,270,builder.addConstructor(ACC_PRIVATE, NO_PARAMS, NO_EXCEPTIONS, block(ctorSuperS()));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,274,builder.addConstructor(ACC_PRIVATE, getParams(fields, buildee), NO_EXCEPTIONS, body);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,278,ConstructorNode initializer = createInitializerConstructor(buildee, builder, fields);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,279,markAsGenerated(buildee, initializer);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,284,ConstructorNode helperCons = buildee.addConstructor(ACC_PRIVATE | ACC_SYNTHETIC, getParams(fields, buildee), NO_EXCEPTIONS, body);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,285,markAsGenerated(buildee, helperCons);
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,297,buildee.addMethod(mNode.getName(), PUBLIC_STATIC, mNode.getReturnType(), params(param(paramType, "initializer")), NO_EXCEPTIONS,
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,327,return buildee.addConstructor(ACC_PUBLIC, params(param(paramType, "initializer")), NO_EXCEPTIONS, block(ctorThisS(args(argsList))));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,189,builder.addMethod(createBuildMethodForMethod(anno, buildee, mNode, mNode.getParameters()));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,208,builder.addMethod(createBuilderMethodForProp(builder, new PropertyInfo(fieldName, correctedType), getPrefix(anno)));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,210,builder.addMethod(createBuildMethod(anno, buildee, props));
src/main/groovy/groovy/transform/builder/DefaultStrategy.java,221,buildee.addMethod(createBuilderMethod(anno, builder));
src/main/groovy/groovy/transform/builder/ExternalStrategy.java,123,builder.addMethod(createBuilderMethodForField(builder, prop, prefix));
src/main/groovy/groovy/transform/builder/ExternalStrategy.java,125,builder.addMethod(createBuildMethod(transform, anno, buildee, props));
src/main/groovy/groovy/transform/builder/InitializerStrategy.java,304,buildee.addMethod(newName, mNode.getModifiers(), mNode.getReturnType(), mNode.getParameters(), mNode.getExceptions(), mNode.getCode());
src/main/groovy/groovy/transform/builder/SimpleStrategy.java,118,buildee.addMethod(methodName, Opcodes.ACC_PUBLIC, newClass(buildee), params(parameter), NO_EXCEPTIONS, block(
src/main/groovy/groovy/transform/builder/SimpleStrategy.java,122,),
src/main/java/org/apache/groovy/ast/tools/AnnotatedNodeUtils.java,38,public static void markAsGenerated(ClassNode containingClass, AnnotatedNode nodeToMark) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,667,String name = vexp.getName();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,668,if (name.equals("owner") || name.equals("thisObject")) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,669,storeType(vexp, typeCheckingContext.getEnclosingClassNode());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,670,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,672,DelegationMetadata md = getDelegationMetadata(enclosingClosure.getClosureExpression());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,673,ClassNode type = typeCheckingContext.getEnclosingClassNode();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,674,if (md != null) type = md.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,675,storeType(vexp, type);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,676,return;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,208,if (receiverType.isEnum()) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,209,mv.visitFieldInsn(GETSTATIC, BytecodeHelper.getClassInternalName(receiverType), methodName, BytecodeHelper.getTypeDescription(receiverType));
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,210,controller.getOperandStack().push(receiverType);
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,211,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2925,if (lastArg && inferredType.isArray()) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2926,if (inferredType.getComponentType().equals(originType)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2927,inferredType = originType;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3116,private static boolean isTraitHelper(ClassNode node) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3117,return node instanceof InnerClassNode && Traits.isTrait(node.getOuterClass());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3123,if (typeCheckingContext.delegationMetadata == null || !implicitThis) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3125,return;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3128,DelegationMetadata dmd = typeCheckingContext.delegationMetadata;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3129,StringBuilder path = new StringBuilder();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3130,while (dmd != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3131,int strategy = dmd.getStrategy();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3132,ClassNode delegate = dmd.getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3133,dmd = dmd.getParent();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3134,switch (strategy) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3135,case Closure.OWNER_FIRST:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3136,receivers.addAll(owners);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3137,path.append("delegate");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3138,doAddDelegateReceiver(receivers, path, delegate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3139,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3140,case Closure.DELEGATE_FIRST:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3141,path.append("delegate");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3142,doAddDelegateReceiver(receivers, path, delegate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3143,receivers.addAll(owners);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3144,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3145,case Closure.OWNER_ONLY:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3147,dmd = null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3148,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3149,case Closure.DELEGATE_ONLY:
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3150,path.append("delegate");
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3151,doAddDelegateReceiver(receivers, path, delegate);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3152,dmd = null;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3153,break;
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3155,path.append('.');
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3159,private static void doAddDelegateReceiver(final List<Receiver<String>> receivers, final StringBuilder path, final ClassNode delegate) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3160,receivers.add(new Receiver<String>(delegate, path.toString()));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3161,if (isTraitHelper(delegate)) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,3162,receivers.add(new Receiver<String>(delegate.getOuterClass(), path.toString()));
src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,414,msg.append(superMethod.isPublic() ? "public" : "protected");
src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,466,if ((mn.isPrivate() && !superMethod.isPrivate()) ||
src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,467,(mn.isProtected() && superMethod.isPublic())) {
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,167,if (!nType.isDerivedFrom(cnType)) {
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,168,if (cnType.isInterface() && nType.implementsInterface(cnType)) continue;
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,169,addError("The type " + nTypes[i].getName() +
src/main/java/org/codehaus/groovy/control/GenericsVisitor.java,171,getPrintName(cnTypes[i]) + ">", n);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java,2047,private static boolean isUnboundedWildcard(GenericsType gt) {
src/main/java/org/codehaus/groovy/ast/AnnotationNode.java,48,private boolean runtimeRetention= false, sourceRetention= false, classRetention = false;
src/main/java/org/codehaus/groovy/ast/AnnotationNode.java,127,if (!runtimeRetention && !classRetention) return true;
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1270,if (retAnn != null && retAnn.value().equals(RetentionPolicy.RUNTIME) && !isRepeatable(annTypeClass)) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,635,private static boolean isDirectAccessAllowed(FieldNode a, ClassNode receiver, boolean isSamePackage) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,636,ClassNode declaringClass = a.getDeclaringClass().redirect();
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,641,if (receiverType instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,642,while (receiverType instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,643,if (declaringClass.equals(receiverType)) return true;
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,644,receiverType = receiverType.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,649,return a.isPublic() || (a.isProtected() && isSamePackage);
subprojects/groovy-templates/src/main/groovy/groovy/text/markup/BaseTemplate.java,216,String escape = configuration.isUseDoubleQuotes() ? "&quote;" : "&apos;";
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1160,Parameter[] paras = ce.getParameters();
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1161,if (paras != null) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1162,for (Parameter para : paras) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1163,ClassNode t = para.getType();
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1164,resolveOrFail(t, ce);
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1165,visitAnnotations(para);
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1166,if (para.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1167,para.setInitialExpression(transform(para.getInitialExpression()));
src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,1169,visitAnnotations(para);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,19,package org.codehaus.groovy.control;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,21,import org.codehaus.groovy.ast.AnnotatedNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,22,import org.codehaus.groovy.ast.AnnotationNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,23,import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,24,import org.codehaus.groovy.ast.ClassNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,25,import org.codehaus.groovy.ast.DynamicVariable;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,26,import org.codehaus.groovy.ast.FieldNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,27,import org.codehaus.groovy.ast.ImportNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,28,import org.codehaus.groovy.ast.MethodNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,29,import org.codehaus.groovy.ast.ModuleNode;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,30,import org.codehaus.groovy.ast.Parameter;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,31,import org.codehaus.groovy.ast.Variable;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,32,import org.codehaus.groovy.ast.expr.AnnotationConstantExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,33,import org.codehaus.groovy.ast.expr.ArgumentListExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,34,import org.codehaus.groovy.ast.expr.BinaryExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,35,import org.codehaus.groovy.ast.expr.ClassExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,36,import org.codehaus.groovy.ast.expr.ClosureExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,37,import org.codehaus.groovy.ast.expr.ConstantExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,38,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,39,import org.codehaus.groovy.ast.expr.EmptyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,40,import org.codehaus.groovy.ast.expr.Expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,41,import org.codehaus.groovy.ast.expr.MapEntryExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,42,import org.codehaus.groovy.ast.expr.MethodCallExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,43,import org.codehaus.groovy.ast.expr.NamedArgumentListExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,44,import org.codehaus.groovy.ast.expr.PropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,45,import org.codehaus.groovy.ast.expr.StaticMethodCallExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,46,import org.codehaus.groovy.ast.expr.TupleExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,47,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,48,import org.codehaus.groovy.ast.stmt.Statement;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,49,import org.codehaus.groovy.syntax.Types;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,51,import java.util.List;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,52,import java.util.Map;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,54,import static org.apache.groovy.ast.tools.ClassNodeUtils.getPropNameForAccessor;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,55,import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticMethod;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,56,import static org.apache.groovy.ast.tools.ClassNodeUtils.hasPossibleStaticProperty;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,57,import static org.apache.groovy.ast.tools.ClassNodeUtils.hasStaticProperty;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,58,import static org.apache.groovy.ast.tools.ClassNodeUtils.isInnerClass;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,59,import static org.apache.groovy.ast.tools.ClassNodeUtils.isValidAccessorName;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,60,import static org.codehaus.groovy.runtime.MetaClassHelper.capitalize;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,61,import static org.apache.groovy.ast.tools.ClassNodeUtils.getField;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,62,import static org.apache.groovy.ast.tools.ExpressionUtils.transformInlineConstants;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,67,public class StaticImportVisitor extends ClassCodeExpressionTransformer {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,68,private ClassNode currentClass;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,69,private MethodNode currentMethod;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,70,private SourceUnit source;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,71,private boolean inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,72,private boolean inClosure;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,73,private boolean inPropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,74,private Expression foundConstant;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,75,private Expression foundArgs;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,76,private boolean inAnnotation;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,77,private boolean inLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,79,public void visitClass(ClassNode node, SourceUnit source) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,80,this.currentClass = node;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,81,this.source = source;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,82,super.visitClass(node);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,86,protected void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,87,this.currentMethod = node;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,88,super.visitConstructorOrMethod(node, isConstructor);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,89,this.currentMethod = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,93,public void visitAnnotations(AnnotatedNode node) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,94,boolean oldInAnnotation = inAnnotation;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,95,inAnnotation = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,96,super.visitAnnotations(node);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,97,inAnnotation = oldInAnnotation;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,100,public Expression transform(Expression exp) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,101,if (exp == null) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,102,if (exp.getClass() == VariableExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,103,return transformVariableExpression((VariableExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,105,if (exp.getClass() == BinaryExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,106,return transformBinaryExpression((BinaryExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,108,if (exp.getClass() == PropertyExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,109,return transformPropertyExpression((PropertyExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,111,if (exp.getClass() == MethodCallExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,112,return transformMethodCallExpression((MethodCallExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,114,if (exp.getClass() == ClosureExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,115,return transformClosureExpression((ClosureExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,117,if (exp.getClass() == ConstructorCallExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,118,return transformConstructorCallExpression((ConstructorCallExpression) exp);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,120,if (exp.getClass() == ArgumentListExpression.class) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,121,Expression result = exp.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,122,if (inPropertyExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,123,foundArgs = result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,125,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,127,if (exp instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,128,Expression result = exp.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,129,if (inPropertyExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,130,foundConstant = result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,132,if (inAnnotation && exp instanceof AnnotationConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,133,ConstantExpression ce = (ConstantExpression) result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,134,if (ce.getValue() instanceof AnnotationNode) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,137,AnnotationNode an = (AnnotationNode) ce.getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,138,Map<String, Expression> attributes = an.getMembers();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,139,for (Map.Entry<String, Expression> entry : attributes.entrySet()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,140,Expression attrExpr = transform(entry.getValue());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,141,entry.setValue(attrExpr);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,146,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,148,return exp.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,158,private Expression transformMapEntryExpression(MapEntryExpression me, ClassNode constructorCallType) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,159,Expression key = me.getKeyExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,160,Expression value = me.getValueExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,161,ModuleNode module = currentClass.getModule();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,162,if (module != null && key instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,163,Map<String, ImportNode> importNodes = module.getStaticImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,164,if (importNodes.containsKey(key.getText())) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,165,ImportNode importNode = importNodes.get(key.getText());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,166,if (importNode.getType().equals(constructorCallType)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,167,String newKey = importNode.getFieldName();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,168,return new MapEntryExpression(new ConstantExpression(newKey), value.transformExpression(this));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,172,return me;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,175,protected Expression transformBinaryExpression(BinaryExpression be) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,176,int type = be.getOperation().getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,177,boolean oldInLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,178,Expression right = transform(be.getRightExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,179,be.setRightExpression(right);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,180,Expression left;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,181,if (type == Types.EQUAL && be.getLeftExpression() instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,182,oldInLeftExpression = inLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,183,inLeftExpression = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,184,left = transform(be.getLeftExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,185,inLeftExpression = oldInLeftExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,186,if (left instanceof StaticMethodCallExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,187,StaticMethodCallExpression smce = (StaticMethodCallExpression) left;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,188,StaticMethodCallExpression result = new StaticMethodCallExpression(smce.getOwnerType(), smce.getMethod(), right);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,189,setSourcePosition(result, be);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,190,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,193,left = transform(be.getLeftExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,195,be.setLeftExpression(left);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,196,return be;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,199,protected Expression transformVariableExpression(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,200,Variable v = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,201,if (v instanceof DynamicVariable) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,202,Expression result = findStaticFieldOrPropAccessorImportFromModule(v.getName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,203,if (result != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,204,setSourcePosition(result, ve);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,205,if (inAnnotation) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,206,result = transformInlineConstants(result);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,208,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,211,if (inSpecialConstructorCall) { // GROOVY-8819
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,212,FieldNode fn = (FieldNode) v;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,213,ClassNode declaringClass = fn.getDeclaringClass();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,214,if (fn.isStatic() && currentClass.isDerivedFrom(declaringClass)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,215,Expression result = new PropertyExpression(new ClassExpression(declaringClass), v.getName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,216,result.setSourcePosition(ve);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,218,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,222,return ve;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,231,private static void setSourcePosition(Expression toSet, Expression origNode) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,232,toSet.setSourcePosition(origNode);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,233,if (toSet instanceof PropertyExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,234,((PropertyExpression) toSet).getProperty().setSourcePosition(origNode);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,238,protected Expression transformMethodCallExpression(MethodCallExpression mce) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,239,Expression args = transform(mce.getArguments());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,240,Expression method = transform(mce.getMethod());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,241,Expression object = transform(mce.getObjectExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,242,boolean isExplicitThisOrSuper = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,243,boolean isExplicitSuper = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,244,if (object instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,245,VariableExpression ve = (VariableExpression) object;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,246,isExplicitThisOrSuper = !mce.isImplicitThis() && (ve.isThisExpression() || ve.isSuperExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,247,isExplicitSuper = ve.isSuperExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,250,if (mce.isImplicitThis() || isExplicitThisOrSuper) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,251,if (mce.isImplicitThis()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,252,if (null == currentClass.tryFindPossibleMethod(mce.getMethodAsString(), args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,254,Expression ret = findStaticMethodImportFromModule(method, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,255,if (ret != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,256,setSourcePosition(ret, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,257,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,259,if (method instanceof ConstantExpression && !inLeftExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,261,String methodName = (String) ((ConstantExpression) method).getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,262,ret = findStaticFieldOrPropAccessorImportFromModule(methodName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,263,if (ret != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,264,ret = new MethodCallExpression(ret, "call", args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,265,setSourcePosition(ret, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,266,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,271,MethodCallExpression ret = new MethodCallExpression(new ClassExpression(currentClass.getSuperClass()), method, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,272,setSourcePosition(ret, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,273,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,276,if (method instanceof ConstantExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,277,ConstantExpression ce = (ConstantExpression) method;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,278,Object value = ce.getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,279,if (value instanceof String) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,280,boolean foundInstanceMethod = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,281,String methodName = (String) value;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,282,boolean inInnerClass = isInnerClass(currentClass);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,283,if (currentMethod != null && !currentMethod.isStatic()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,284,if (currentClass.hasPossibleMethod(methodName, args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,285,foundInstanceMethod = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,288,boolean lookForPossibleStaticMethod = !methodName.equals("call");
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,289,lookForPossibleStaticMethod &= !foundInstanceMethod;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,290,lookForPossibleStaticMethod |= inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,291,lookForPossibleStaticMethod &= !inInnerClass;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,292,if (!inClosure && lookForPossibleStaticMethod &&
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,294,|| hasPossibleStaticProperty(currentClass, methodName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,295,StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass, methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,296,setSourcePosition(smce, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,297,return smce;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,299,if (!inClosure && inInnerClass && inSpecialConstructorCall && mce.isImplicitThis() && !foundInstanceMethod) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,300,if (currentClass.getOuterClass().hasPossibleMethod(methodName, args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,301,object = new PropertyExpression(new ClassExpression(currentClass.getOuterClass()), new ConstantExpression("this"));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,303,|| hasPossibleStaticProperty(currentClass.getOuterClass(), methodName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,304,StaticMethodCallExpression smce = new StaticMethodCallExpression(currentClass.getOuterClass(), methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,305,setSourcePosition(smce, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,306,return smce;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,310,if (mce.isImplicitThis() && lookForPossibleStaticMethod && hasPossibleStaticMethod(currentClass, methodName, args, true)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,311,StaticMethodCallExpression result = new StaticMethodCallExpression(currentClass, methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,312,result.setSourcePosition(mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,313,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,319,MethodCallExpression result = new MethodCallExpression(object, method, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,320,result.setSafe(mce.isSafe());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,321,result.setImplicitThis(mce.isImplicitThis());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,322,result.setSpreadSafe(mce.isSpreadSafe());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,323,result.setMethodTarget(mce.getMethodTarget());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,325,result.setGenericsTypes(mce.getGenericsTypes());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,326,setSourcePosition(result, mce);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,327,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,330,protected Expression transformConstructorCallExpression(ConstructorCallExpression cce) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,331,inSpecialConstructorCall = cce.isSpecialCall();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,332,Expression expression = cce.getArguments();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,333,if (expression instanceof TupleExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,334,TupleExpression tuple = (TupleExpression) expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,335,if (tuple.getExpressions().size() == 1) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,336,expression = tuple.getExpression(0);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,337,if (expression instanceof NamedArgumentListExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,338,NamedArgumentListExpression namedArgs = (NamedArgumentListExpression) expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,339,List<MapEntryExpression> entryExpressions = namedArgs.getMapEntryExpressions();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,340,for (int i = 0; i < entryExpressions.size(); i++) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,341,entryExpressions.set(i, (MapEntryExpression) transformMapEntryExpression(entryExpressions.get(i), cce.getType()));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,346,Expression ret = cce.transformExpression(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,347,inSpecialConstructorCall = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,348,return ret;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,351,protected Expression transformClosureExpression(ClosureExpression ce) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,352,boolean oldInClosure = inClosure;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,353,inClosure = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,354,if (ce.getParameters() != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,355,for (Parameter p : ce.getParameters()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,356,if (p.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,357,p.setInitialExpression(transform(p.getInitialExpression()));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,361,Statement code = ce.getCode();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,362,if (code != null) code.visit(this);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,363,inClosure = oldInClosure;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,364,return ce;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,367,protected Expression transformPropertyExpression(PropertyExpression pe) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,369,&& pe.getObjectExpression() instanceof VariableExpression
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,370,&& ((VariableExpression) pe.getObjectExpression()).isSuperExpression()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,371,PropertyExpression pexp = new PropertyExpression(
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,372,new ClassExpression(currentClass.getSuperClass()),
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,374,);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,375,pexp.setSourcePosition(pe);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,376,return pexp;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,378,boolean oldInPropertyExpression = inPropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,379,Expression oldFoundArgs = foundArgs;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,380,Expression oldFoundConstant = foundConstant;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,381,inPropertyExpression = true;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,382,foundArgs = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,383,foundConstant = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,384,Expression objectExpression = transform(pe.getObjectExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,385,boolean candidate = false;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,386,if (objectExpression instanceof MethodCallExpression) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,387,candidate = ((MethodCallExpression)objectExpression).isImplicitThis();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,390,if (foundArgs != null && foundConstant != null && candidate) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,391,Expression result = findStaticMethodImportFromModule(foundConstant, foundArgs);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,392,if (result != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,393,objectExpression = result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,394,objectExpression.setSourcePosition(pe);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,397,inPropertyExpression = oldInPropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,398,foundArgs = oldFoundArgs;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,399,foundConstant = oldFoundConstant;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,400,pe.setObjectExpression(objectExpression);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,401,return pe;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,404,private Expression findStaticFieldOrPropAccessorImportFromModule(String name) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,405,ModuleNode module = currentClass.getModule();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,406,if (module == null) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,407,Map<String, ImportNode> importNodes = module.getStaticImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,408,Expression expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,409,String accessorName = getAccessorName(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,414,if (importNodes.containsKey(accessorName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,415,expression = findStaticProperty(importNodes, accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,416,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,418,if (accessorName.startsWith("get")) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,419,accessorName = "is" + accessorName.substring(3);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,420,if (importNodes.containsKey(accessorName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,421,expression = findStaticProperty(importNodes, accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,422,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,429,if (importNodes.containsKey(name)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,430,ImportNode importNode = importNodes.get(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,431,expression = findStaticPropertyAccessor(importNode.getType(), importNode.getFieldName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,432,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,433,expression = findStaticField(importNode.getType(), importNode.getFieldName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,434,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,439,for (ImportNode importNode : module.getStaticStarImports().values()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,440,ClassNode node = importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,441,expression = findStaticPropertyAccessor(node, name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,442,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,443,expression = findStaticField(node, name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,444,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,446,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,449,private Expression findStaticProperty(Map<String, ImportNode> importNodes, String accessorName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,450,Expression result = null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,451,ImportNode importNode = importNodes.get(accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,452,ClassNode importClass = importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,453,String importMember = importNode.getFieldName();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,454,result = findStaticPropertyAccessorByFullName(importClass, importMember);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,455,if (result == null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,456,result = findStaticPropertyAccessor(importClass, getPropNameForAccessor(importMember));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,458,return result;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,461,private Expression findStaticMethodImportFromModule(Expression method, Expression args) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,462,ModuleNode module = currentClass.getModule();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,463,if (module == null || !(method instanceof ConstantExpression)) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,464,Map<String, ImportNode> importNodes = module.getStaticImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,465,ConstantExpression ce = (ConstantExpression) method;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,466,Expression expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,467,Object value = ce.getValue();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,469,if (!(value instanceof String)) return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,470,final String name = (String) value;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,474,if (importNodes.containsKey(name)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,475,ImportNode importNode = importNodes.get(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,476,expression = findStaticMethod(importNode.getType(), importNode.getFieldName(), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,477,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,478,expression = findStaticPropertyAccessorGivenArgs(importNode.getType(), getPropNameForAccessor(importNode.getFieldName()), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,479,if (expression != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,480,return new StaticMethodCallExpression(importNode.getType(), importNode.getFieldName(), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,486,if (isValidAccessorName(name)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,487,String propName = getPropNameForAccessor(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,488,if (importNodes.containsKey(propName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,489,ImportNode importNode = importNodes.get(propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,490,ClassNode importClass = importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,491,String importMember = importNode.getFieldName();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,492,expression = findStaticMethod(importClass, prefix(name) + capitalize(importMember), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,493,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,494,expression = findStaticPropertyAccessorGivenArgs(importClass, importMember, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,495,if (expression != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,496,return new StaticMethodCallExpression(importClass, prefix(name) + capitalize(importMember), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,500,Map<String, ImportNode> starImports = module.getStaticStarImports();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,501,ClassNode starImportType;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,502,if (currentClass.isEnum() && starImports.containsKey(currentClass.getName())) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,503,ImportNode importNode = starImports.get(currentClass.getName());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,504,starImportType = importNode == null ? null : importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,505,expression = findStaticMethod(starImportType, name, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,506,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,508,for (ImportNode importNode : starImports.values()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,509,starImportType = importNode == null ? null : importNode.getType();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,510,expression = findStaticMethod(starImportType, name, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,511,if (expression != null) return expression;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,512,expression = findStaticPropertyAccessorGivenArgs(starImportType, getPropNameForAccessor(name), args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,513,if (expression != null) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,514,return new StaticMethodCallExpression(starImportType, name, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,518,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,521,private static String prefix(String name) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,522,return name.startsWith("is") ? "is" : name.substring(0, 3);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,525,private String getAccessorName(String name) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,526,return (inLeftExpression ? "set" : "get") + capitalize(name);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,529,private Expression findStaticPropertyAccessorGivenArgs(ClassNode staticImportType, String propName, Expression args) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,531,return findStaticPropertyAccessor(staticImportType, propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,534,private Expression findStaticPropertyAccessor(ClassNode staticImportType, String propName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,535,String accessorName = getAccessorName(propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,536,Expression accessor = findStaticPropertyAccessorByFullName(staticImportType, accessorName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,537,if (accessor == null && accessorName.startsWith("get")) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,538,accessor = findStaticPropertyAccessorByFullName(staticImportType, "is" + accessorName.substring(3));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,540,if (accessor == null && hasStaticProperty(staticImportType, propName)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,543,accessor = new StaticMethodCallExpression(staticImportType, accessorName, ArgumentListExpression.EMPTY_ARGUMENTS);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,544,else
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,545,accessor = new PropertyExpression(new ClassExpression(staticImportType), propName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,547,return accessor;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,550,private Expression findStaticPropertyAccessorByFullName(ClassNode staticImportType, String accessorMethodName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,552,ArgumentListExpression dummyArgs = new ArgumentListExpression();
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,553,dummyArgs.addExpression(new EmptyExpression());
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,554,return findStaticMethod(staticImportType, accessorMethodName, (inLeftExpression ? dummyArgs : ArgumentListExpression.EMPTY_ARGUMENTS));
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,557,private static Expression findStaticField(ClassNode staticImportType, String fieldName) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,558,if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,559,FieldNode field = getField(staticImportType, fieldName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,561,return new PropertyExpression(new ClassExpression(staticImportType), fieldName);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,563,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,566,private static Expression findStaticMethod(ClassNode staticImportType, String methodName, Expression args) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,567,if (staticImportType.isPrimaryClassNode() || staticImportType.isResolved()) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,568,if (staticImportType.hasPossibleStaticMethod(methodName, args)) {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,569,return new StaticMethodCallExpression(staticImportType, methodName, args);
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,572,return null;
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,575,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/control/StaticImportVisitor.java,576,return source;
src/main/java/org/codehaus/groovy/transform/AutoFinalASTTransformation.java,68,Parameter[] origParams = expression.getParameters();
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,34,Parameter[] parameters = expr.getParameters();
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,35,if (parameters!=null) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,36,for (Parameter parameter : parameters) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,37,if (parameter.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/transform/sc/transformers/ClosureExpressionTransformer.java,38,parameter.setInitialExpression(transformer.transform(parameter.getInitialExpression()));
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2318,Parameter[] parameters = expression.getParameters();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2319,if (parameters != null) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2320,for (Parameter parameter : parameters) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,2321,typeCheckingContext.controlStructureVariables.remove(parameter);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4199,Parameter[] closureParams = closureExpression.getParameters();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4200,Parameter[] methodParams = sam.getParameters();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4201,for (int i = 0; i < closureParams.length; i++) {
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4202,ClassNode fromClosure = closureParams[i].getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4203,ClassNode fromMethod = methodParams[i].getType();
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4204,extractGenericsConnections(connections, fromClosure, fromMethod);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4206,ClassNode result = applyGenericsContext(connections, samUsage.redirect());
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,4207,return result;
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,39,super("<init>",modifiers,ClassHelper.VOID_TYPE,parameters,exceptions,code);
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,42,VariableScope scope = new VariableScope();
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,43,for (int i = 0; i < parameters.length; i++) {
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,44,scope.putDeclaredVariable(parameters[i]);
src/main/java/org/codehaus/groovy/ast/ConstructorNode.java,46,this.setVariableScope(scope);
src/main/java/org/codehaus/groovy/ast/MethodNode.java,61,VariableScope scope = new VariableScope();
src/main/java/org/codehaus/groovy/ast/MethodNode.java,62,setVariableScope(scope);
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,19,package org.codehaus.groovy.reflection;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,21,import java.util.Collection;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,22,import java.util.Collections;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,23,import java.util.HashSet;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,24,import java.util.Set;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,31,public class ReflectionUtils {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,34,private static final Set<String> IGNORED_PACKAGES = new HashSet<String>();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,36,static {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,38,IGNORED_PACKAGES.add("groovy.lang");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,39,IGNORED_PACKAGES.add("org.codehaus.groovy.reflection");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,40,IGNORED_PACKAGES.add("org.codehaus.groovy.runtime.callsite");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,41,IGNORED_PACKAGES.add("org.codehaus.groovy.runtime.metaclass");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,42,IGNORED_PACKAGES.add("org.codehaus.groovy.runtime");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,43,IGNORED_PACKAGES.add("sun.reflect");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,44,IGNORED_PACKAGES.add("java.lang.invoke");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,45,IGNORED_PACKAGES.add("org.codehaus.groovy.vmplugin.v7");
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,48,private static final ClassContextHelper HELPER = new ClassContextHelper();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,59,public static boolean isCallingClassReflectionAvailable() {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,60,return true;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,68,public static Class getCallingClass() {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,69,return getCallingClass(1);
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,81,public static Class getCallingClass(int matchLevel) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,82,return getCallingClass(matchLevel, Collections.EMPTY_SET);
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,96,public static Class getCallingClass(int matchLevel, Collection<String> extraIgnoredPackages) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,97,Class[] classContext = HELPER.getClassContext();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,99,int depth = 0;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,100,try {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,101,Class c;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,104,Class sc;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,105,do {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,106,do {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,107,c = classContext[depth++];
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,108,if (c != null) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,109,sc = c.getSuperclass();
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,111,sc = null;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,114,|| superClassShouldBeIgnored(sc));
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,116,return c;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,118,return null;
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,122,private static boolean superClassShouldBeIgnored(Class sc) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,123,return ((sc != null) && (sc.getPackage() != null) && "org.codehaus.groovy.runtime.callsite".equals(sc.getPackage().getName()));
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,126,private static boolean classShouldBeIgnored(Class c, Collection<String> extraIgnoredPackages) {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,129,|| (c.getPackage() != null
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,131,|| extraIgnoredPackages.contains(c.getPackage().getName())))));
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,134,private static class ClassContextHelper extends SecurityManager {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,136,public Class[] getClassContext() {
src/main/java/org/codehaus/groovy/reflection/ReflectionUtils.java,137,return super.getClassContext();
src/main/java/org/codehaus/groovy/runtime/EncodingGroovyMethods.java,29,import java.math.BigInteger;
src/main/java/org/codehaus/groovy/runtime/EncodingGroovyMethods.java,439,return String.format("%032x", new BigInteger(1, md.digest()));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,19,package org.codehaus.groovy.classgen;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,21,import org.codehaus.groovy.ast.ClassHelper;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,22,import org.codehaus.groovy.ast.ClassNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,23,import org.codehaus.groovy.ast.ConstructorNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,24,import org.codehaus.groovy.ast.FieldNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,25,import org.codehaus.groovy.ast.InnerClassNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,26,import org.codehaus.groovy.ast.MethodNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,27,import org.codehaus.groovy.ast.Parameter;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,28,import org.codehaus.groovy.ast.expr.ClassExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,29,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,30,import org.codehaus.groovy.ast.expr.Expression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,31,import org.codehaus.groovy.ast.expr.TupleExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,32,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,33,import org.codehaus.groovy.ast.stmt.BlockStatement;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,34,import org.codehaus.groovy.ast.stmt.ExpressionStatement;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,35,import org.codehaus.groovy.ast.stmt.Statement;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,36,import org.codehaus.groovy.classgen.asm.BytecodeHelper;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,37,import org.codehaus.groovy.control.CompilationUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,38,import org.codehaus.groovy.control.SourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,39,import org.objectweb.asm.MethodVisitor;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,40,import org.objectweb.asm.Opcodes;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,42,import java.util.List;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,44,import static org.codehaus.groovy.ast.ClassHelper.CLOSURE_TYPE;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,46,public class InnerClassCompletionVisitor extends InnerClassVisitorHelper implements Opcodes {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,48,private final SourceUnit sourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,49,private ClassNode classNode;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,50,private FieldNode thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,52,private static final String
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,53,CLOSURE_INTERNAL_NAME   = BytecodeHelper.getClassInternalName(CLOSURE_TYPE),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,54,CLOSURE_DESCRIPTOR      = BytecodeHelper.getTypeDescription(CLOSURE_TYPE);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,56,public InnerClassCompletionVisitor(CompilationUnit cu, SourceUnit su) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,57,sourceUnit = su;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,61,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,62,return sourceUnit;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,66,public void visitClass(ClassNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,67,this.classNode = node;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,68,thisField = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,69,InnerClassNode innerClass = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,70,if (!node.isEnum() && !node.isInterface() && node instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,71,innerClass = (InnerClassNode) node;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,72,thisField = innerClass.getField("this$0");
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,73,if (innerClass.getVariableScope() == null && innerClass.getDeclaredConstructors().isEmpty()) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,75,innerClass.addConstructor(ACC_PUBLIC, Parameter.EMPTY_ARRAY, null, null);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,78,if (node.isEnum() || node.isInterface()) return;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,80,if (node.getInnerClasses().hasNext()) addDispatcherMethods(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,81,if (innerClass == null) return;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,82,super.visitClass(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,83,addDefaultMethods(innerClass);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,87,public void visitConstructor(ConstructorNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,88,addThisReference(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,89,super.visitConstructor(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,92,private static String getTypeDescriptor(ClassNode node, boolean isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,93,return BytecodeHelper.getTypeDescription(getClassNode(node, isStatic));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,96,private static String getInternalName(ClassNode node, boolean isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,97,return BytecodeHelper.getClassInternalName(getClassNode(node, isStatic));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,100,private static void addDispatcherMethods(ClassNode classNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,101,final int objectDistance = getObjectDistance(classNode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,107,Parameter[] parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,108,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,111,MethodNode method = classNode.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,113,ACC_PUBLIC + ACC_SYNTHETIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,114,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,115,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,116,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,117,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,118,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,120,BlockStatement block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,121,setMethodDispatcherCode(block, VariableExpression.THIS_EXPRESSION, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,122,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,125,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,126,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,129,method = classNode.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,131,ACC_PUBLIC + ACC_SYNTHETIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,132,ClassHelper.VOID_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,133,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,134,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,135,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,136,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,138,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,139,setPropertySetterDispatcher(block, VariableExpression.THIS_EXPRESSION, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,140,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,143,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,146,method = classNode.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,148,ACC_PUBLIC + ACC_SYNTHETIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,149,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,150,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,151,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,152,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,153,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,155,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,156,setPropertyGetterDispatcher(block, VariableExpression.THIS_EXPRESSION, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,157,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,160,private void getThis(MethodVisitor mv, String classInternalName, String outerClassDescriptor, String innerClassInternalName) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,161,mv.visitVarInsn(ALOAD, 0);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,162,if (CLOSURE_TYPE.equals(thisField.getType())) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,163,mv.visitFieldInsn(GETFIELD, classInternalName, "this$0", CLOSURE_DESCRIPTOR);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,164,mv.visitMethodInsn(INVOKEVIRTUAL, CLOSURE_INTERNAL_NAME, "getThisObject", "()Ljava/lang/Object;", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,165,mv.visitTypeInsn(CHECKCAST, innerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,167,mv.visitFieldInsn(GETFIELD, classInternalName, "this$0", outerClassDescriptor);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,171,private void addDefaultMethods(InnerClassNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,172,final boolean isStatic = isStatic(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,174,ClassNode outerClass = node.getOuterClass();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,175,final String classInternalName = org.codehaus.groovy.classgen.asm.BytecodeHelper.getClassInternalName(node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,176,final String outerClassInternalName = getInternalName(outerClass, isStatic);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,177,final String outerClassDescriptor = getTypeDescriptor(outerClass, isStatic);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,178,final int objectDistance = getObjectDistance(outerClass);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,181,Parameter[] parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,182,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,186,String methodName = "methodMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,188,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,190,MethodNode method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,191,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,192,Opcodes.ACC_PUBLIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,193,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,194,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,195,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,196,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,197,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,199,BlockStatement block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,200,if (isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,201,setMethodDispatcherCode(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,203,block.addStatement(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,204,new BytecodeSequence(new BytecodeInstruction() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,205,public void visit(MethodVisitor mv) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,206,getThis(mv,classInternalName,outerClassDescriptor,outerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,207,mv.visitVarInsn(ALOAD, 1);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,208,mv.visitVarInsn(ALOAD, 2);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,209,mv.visitMethodInsn(INVOKEVIRTUAL, outerClassInternalName, "this$dist$invoke$" + objectDistance, "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,210,mv.visitInsn(ARETURN);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,213,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,215,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,218,methodName = "$static_methodMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,220,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,222,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,223,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,224,Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,225,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,226,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,227,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,228,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,229,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,231,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,232,setMethodDispatcherCode(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,233,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,236,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,237,new Parameter(ClassHelper.STRING_TYPE, "name"),
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,241,methodName = "propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,243,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,245,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,246,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,247,Opcodes.ACC_PUBLIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,248,ClassHelper.VOID_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,249,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,250,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,251,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,252,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,254,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,255,if (isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,256,setPropertySetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,258,block.addStatement(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,259,new BytecodeSequence(new BytecodeInstruction() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,260,public void visit(MethodVisitor mv) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,261,getThis(mv,classInternalName,outerClassDescriptor,outerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,262,mv.visitVarInsn(ALOAD, 1);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,263,mv.visitVarInsn(ALOAD, 2);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,264,mv.visitMethodInsn(INVOKEVIRTUAL, outerClassInternalName, "this$dist$set$" + objectDistance, "(Ljava/lang/String;Ljava/lang/Object;)V", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,265,mv.visitInsn(RETURN);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,268,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,270,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,273,methodName = "$static_propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,275,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,277,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,278,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,279,Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,280,ClassHelper.VOID_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,281,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,282,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,283,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,284,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,286,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,287,setPropertySetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,288,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,291,parameters = new Parameter[]{
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,295,methodName = "propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,297,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,299,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,300,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,301,Opcodes.ACC_PUBLIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,302,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,303,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,304,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,305,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,306,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,308,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,309,if (isStatic) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,310,setPropertyGetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,312,block.addStatement(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,313,new BytecodeSequence(new BytecodeInstruction() {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,314,public void visit(MethodVisitor mv) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,315,getThis(mv,classInternalName,outerClassDescriptor,outerClassInternalName);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,316,mv.visitVarInsn(ALOAD, 1);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,317,mv.visitMethodInsn(INVOKEVIRTUAL, outerClassInternalName, "this$dist$get$" + objectDistance, "(Ljava/lang/String;)Ljava/lang/Object;", false);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,318,mv.visitInsn(ARETURN);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,321,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,323,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,326,methodName = "$static_propertyMissing";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,328,addCompilationErrorOnCustomMethodNode(node, methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,330,method = node.addSyntheticMethod(
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,331,methodName,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,332,Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,333,ClassHelper.OBJECT_TYPE,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,334,parameters,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,335,ClassNode.EMPTY_ARRAY,
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,336,null
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,337,);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,339,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,340,setPropertyGetterDispatcher(block, new ClassExpression(outerClass), parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,341,method.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,348,private void addCompilationErrorOnCustomMethodNode(InnerClassNode node, String methodName, Parameter[] parameters) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,349,MethodNode existingMethodNode = node.getMethod(methodName, parameters);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,351,if (existingMethodNode != null && !isSynthetic(existingMethodNode))  {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,352,addError("\"" +methodName + "\" implementations are not supported on static inner classes as " +
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,355,existingMethodNode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,360,private boolean isSynthetic(MethodNode existingMethodNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,361,return existingMethodNode.isSynthetic() || hasSyntheticModifier(existingMethodNode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,364,private boolean hasSyntheticModifier(MethodNode existingMethodNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,365,return (existingMethodNode.getModifiers() & Opcodes.ACC_SYNTHETIC) != 0;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,368,private void addThisReference(ConstructorNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,369,if (!shouldHandleImplicitThisForInnerClass(classNode)) return;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,370,Statement code = node.getCode();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,375,Parameter[] params = node.getParameters();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,376,Parameter[] newParams = new Parameter[params.length + 1];
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,377,System.arraycopy(params, 0, newParams, 1, params.length);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,378,String name = getUniqueName(params, node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,380,Parameter thisPara = new Parameter(classNode.getOuterClass().getPlainNodeReference(), name);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,381,newParams[0] = thisPara;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,382,node.setParameters(newParams);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,384,BlockStatement block = null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,385,if (code == null) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,386,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,388,block = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,389,block.addStatement(code);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,391,block = (BlockStatement) code;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,393,BlockStatement newCode = new BlockStatement();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,394,addFieldInit(thisPara, thisField, newCode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,395,ConstructorCallExpression cce = getFirstIfSpecialConstructorCall(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,396,if (cce == null) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,397,cce = new ConstructorCallExpression(ClassNode.SUPER, new TupleExpression());
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,398,block.getStatements().add(0, new ExpressionStatement(cce));
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,400,if (shouldImplicitlyPassThisPara(cce)) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,402,TupleExpression args = (TupleExpression) cce.getArguments();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,403,List<Expression> expressions = args.getExpressions();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,404,VariableExpression ve = new VariableExpression(thisPara.getName());
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,405,ve.setAccessedVariable(thisPara);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,406,expressions.add(0, ve);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,408,if (cce.isSuperCall()) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,411,block.getStatements().add(1, newCode);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,413,node.setCode(block);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,416,private boolean shouldImplicitlyPassThisPara(ConstructorCallExpression cce) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,417,boolean pass = false;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,418,ClassNode superCN = classNode.getSuperClass();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,419,if (cce.isThisCall()) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,420,pass = true;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,424,if (!superCN.isEnum() && !superCN.isInterface() && superCN instanceof InnerClassNode) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,425,InnerClassNode superInnerCN = (InnerClassNode) superCN;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,426,if (!isStatic(superInnerCN) && classNode.getOuterClass().isDerivedFrom(superCN.getOuterClass())) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,427,pass = true;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,431,return pass;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,434,private String getUniqueName(Parameter[] params, ConstructorNode node) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,435,String namePrefix = "$p";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,436,outer:
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,437,for (int i = 0; i < 100; i++) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,438,namePrefix = namePrefix + "$";
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,439,for (Parameter p : params) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,440,if (p.getName().equals(namePrefix)) continue outer;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,442,return namePrefix;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,444,addError("unable to find a unique prefix name for synthetic this reference in inner class constructor", node);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,445,return namePrefix;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,448,private static ConstructorCallExpression getFirstIfSpecialConstructorCall(BlockStatement code) {
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,449,if (code == null) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,451,final List<Statement> statementList = code.getStatements();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,452,if (statementList.isEmpty()) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,454,final Statement statement = statementList.get(0);
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,455,if (!(statement instanceof ExpressionStatement)) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,457,Expression expression = ((ExpressionStatement) statement).getExpression();
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,458,if (!(expression instanceof ConstructorCallExpression)) return null;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,459,ConstructorCallExpression cce = (ConstructorCallExpression) expression;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,460,if (cce.isSpecialCall()) return cce;
src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,461,return null;
src/main/java/org/codehaus/groovy/transform/SortableASTTransformation.java,191,classNode.getModule().addClass(cmpClass);
src/main/groovy/groovy/beans/VetoableASTTransformation.java,38,import org.codehaus.groovy.runtime.MetaClassHelper;
src/main/groovy/groovy/beans/VetoableASTTransformation.java,171,String getterName = "get" + MetaClassHelper.capitalize(propertyName);
src/main/groovy/groovy/beans/VetoableASTTransformation.java,172,MethodNode setter = classNode.getSetterMethod("set" + MetaClassHelper.capitalize(propertyName));
src/main/groovy/groovy/beans/VetoableASTTransformation.java,213,String setterName = "set" + MetaClassHelper.capitalize(propertyNode.getName());
src/main/groovy/groovy/beans/VetoableASTTransformation.java,323,declaringClass.addMethod(setter);
src/main/groovy/groovy/beans/VetoableASTTransformation.java,357,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,370,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,383,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,393,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,408,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,421,declaringClass.addMethod(
src/main/groovy/groovy/beans/VetoableASTTransformation.java,434,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,38,import org.codehaus.groovy.runtime.MetaClassHelper;
src/main/groovy/groovy/beans/BindableASTTransformation.java,187,String getterName = "get" + MetaClassHelper.capitalize(propertyName);
src/main/groovy/groovy/beans/BindableASTTransformation.java,188,MethodNode setter = classNode.getSetterMethod("set" + MetaClassHelper.capitalize(propertyName));
src/main/groovy/groovy/beans/BindableASTTransformation.java,216,String setterName = "set" + MetaClassHelper.capitalize(propertyNode.getName());
src/main/groovy/groovy/beans/BindableASTTransformation.java,258,declaringClass.addMethod(setter);
src/main/groovy/groovy/beans/BindableASTTransformation.java,344,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,357,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,370,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,380,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,393,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,406,declaringClass.addMethod(
src/main/groovy/groovy/beans/BindableASTTransformation.java,419,declaringClass.addMethod(
src/main/java/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,586,|| (right.getClass() != Object.class && right.getClass().isAssignableFrom(left.getClass())) //GROOVY-4046
src/main/java/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,587,) {
src/main/java/org/codehaus/groovy/control/customizers/DelegatingCustomizer.java,33,public abstract class DelegatingCustomizer extends CompilationCustomizer {
src/main/java/org/codehaus/groovy/ast/decompiled/MemberSignatureParser.java,148,if (genericType.isGenericsPlaceHolder()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,19,package org.codehaus.groovy.control;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,21,import org.codehaus.groovy.ast.ClassCodeVisitorSupport;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,22,import org.codehaus.groovy.ast.ClassNode;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,23,import org.codehaus.groovy.ast.CodeVisitorSupport;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,24,import org.codehaus.groovy.ast.DynamicVariable;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,25,import org.codehaus.groovy.ast.FieldNode;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,26,import org.codehaus.groovy.ast.MethodNode;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,27,import org.codehaus.groovy.ast.Parameter;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,28,import org.codehaus.groovy.ast.Variable;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,29,import org.codehaus.groovy.ast.expr.ClosureExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,30,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,31,import org.codehaus.groovy.ast.expr.Expression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,32,import org.codehaus.groovy.ast.expr.MethodCallExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,33,import org.codehaus.groovy.ast.expr.PropertyExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,34,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,36,import java.util.ArrayList;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,37,import java.util.Arrays;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,38,import java.util.HashSet;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,39,import java.util.List;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,40,import java.util.Set;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,42,import static org.apache.groovy.ast.tools.ClassNodeUtils.isInnerClass;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,47,public class StaticVerifier extends ClassCodeVisitorSupport {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,48,private boolean inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,49,private boolean inPropertyExpression; // TODO use it or lose it
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,50,private boolean inClosure;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,51,private MethodNode currentMethod;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,52,private SourceUnit source;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,54,public void visitClass(ClassNode node, SourceUnit source) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,55,this.source = source;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,56,super.visitClass(node);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,60,public void visitVariableExpression(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,61,Variable v = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,62,if (v instanceof DynamicVariable) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,63,if (!inPropertyExpression || inSpecialConstructorCall) addStaticVariableError(ve);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,68,public void visitClosureExpression(ClosureExpression ce) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,69,boolean oldInClosure = inClosure;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,70,inClosure = true;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,71,super.visitClosureExpression(ce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,72,inClosure = oldInClosure;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,76,public void visitConstructorCallExpression(ConstructorCallExpression cce) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,77,boolean oldIsSpecialConstructorCall = inSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,78,inSpecialConstructorCall = cce.isSpecialCall();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,79,super.visitConstructorCallExpression(cce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,80,inSpecialConstructorCall = oldIsSpecialConstructorCall;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,84,public void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,85,MethodNode oldCurrentMethod = currentMethod;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,86,currentMethod = node;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,87,super.visitConstructorOrMethod(node, isConstructor);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,88,if (isConstructor) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,89,final Set<String> exceptions = new HashSet<String>();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,90,for (final Parameter param : node.getParameters()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,91,exceptions.add(param.getName());
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,92,if (param.hasInitialExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,93,param.getInitialExpression().visit(new CodeVisitorSupport() {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,95,public void visitVariableExpression(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,96,if (exceptions.contains(ve.getName())) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,97,Variable av = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,98,if (av instanceof DynamicVariable || !av.isInStaticContext()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,99,addVariableError(ve);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,104,public void visitMethodCallExpression(MethodCallExpression call) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,105,Expression objectExpression = call.getObjectExpression();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,106,if (objectExpression instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,107,VariableExpression ve = (VariableExpression) objectExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,108,if (ve.isThisExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,109,addError("Can't access instance method '" + call.getMethodAsString() + "' for a constructor parameter default value", param);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,110,return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,113,super.visitMethodCallExpression(call);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,117,public void visitClosureExpression(ClosureExpression expression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,124,currentMethod = oldCurrentMethod;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,128,public void visitMethodCallExpression(MethodCallExpression mce) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,129,if (inSpecialConstructorCall && !isInnerClass(currentMethod.getDeclaringClass())) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,130,Expression objectExpression = mce.getObjectExpression();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,131,if (objectExpression instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,132,VariableExpression ve = (VariableExpression) objectExpression;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,133,if (ve.isThisExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,134,addError("Can't access instance method '" + mce.getMethodAsString() + "' before the class is constructed", mce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,135,return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,139,super.visitMethodCallExpression(mce);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,143,public void visitPropertyExpression(PropertyExpression pe) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,144,if (!inSpecialConstructorCall) checkStaticScope(pe);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,148,protected SourceUnit getSourceUnit() {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,149,return source;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,153,private void checkStaticScope(PropertyExpression pe) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,154,if (inClosure) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,155,for (Expression it = pe; it != null; it = ((PropertyExpression) it).getObjectExpression()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,156,if (it instanceof PropertyExpression) continue;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,157,if (it instanceof VariableExpression) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,158,addStaticVariableError((VariableExpression) it);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,160,return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,164,private void addStaticVariableError(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,167,if (!inSpecialConstructorCall && (inClosure || !ve.isInStaticContext())) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,168,if (ve.isThisExpression() || ve.isSuperExpression()) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,169,Variable v = ve.getAccessedVariable();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,170,if (currentMethod != null && currentMethod.isStatic()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,171,FieldNode fieldNode = getDeclaredOrInheritedField(currentMethod.getDeclaringClass(), ve.getName());
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,172,if (fieldNode != null && fieldNode.isStatic()) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,174,if (v != null && !(v instanceof DynamicVariable) && v.isInStaticContext()) return;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,175,addVariableError(ve);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,178,private void addVariableError(VariableExpression ve) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,179,addError("Apparent variable '" + ve.getName() + "' was found in a static scope but doesn't refer" +
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,187,private static FieldNode getDeclaredOrInheritedField(ClassNode cn, String fieldName) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,188,ClassNode node = cn;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,189,while (node != null) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,190,FieldNode fn = node.getDeclaredField(fieldName);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,191,if (fn != null) return fn;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,192,List<ClassNode> interfacesToCheck = new ArrayList<ClassNode>(Arrays.asList(node.getInterfaces()));
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,193,while (!interfacesToCheck.isEmpty()) {
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,194,ClassNode nextInterface = interfacesToCheck.remove(0);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,195,fn = nextInterface.getDeclaredField(fieldName);
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,196,if (fn != null) return fn;
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,197,interfacesToCheck.addAll(Arrays.asList(nextInterface.getInterfaces()));
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,199,node = node.getSuperClass();
src/main/java/org/codehaus/groovy/control/StaticVerifier.java,201,return null;
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1256,if (method.getParameters().length == count && !method.isStatic()) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1281,if (method.getParameters().length == count) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1284,if (!args.getType().isDerivedFrom(method.getParameters()[i].getType())) {
src/main/java/org/codehaus/groovy/ast/ClassNode.java,1300,if (!res.getParameters()[i].getType().equals(method.getParameters()[i].getType())) {
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,80,ClassNode helper = Traits.findHelper(type);
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,81,Parameter[] params = new Parameter[argumentTypes.length + 1];
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,82,params[0] = new Parameter(ClassHelper.CLASS_Type.getPlainNodeReference(), "staticSelf");
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,83,for (int i = 1; i < params.length; i++) {
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,84,params[i] = new Parameter(argumentTypes[i-1], "p" + i);
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,86,MethodNode method = helper.getDeclaredMethod(name, params);
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,87,if (method != null) {
src/main/java/org/codehaus/groovy/transform/stc/TraitTypeCheckingExtension.java,88,return Collections.singletonList(makeDynamic(call, method.getReturnType()));
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1751,Statement code = statement(node.getNextSibling());
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1753,AST variableNode = node.getNextSibling();
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1760,CatchStatement answer = new CatchStatement(catchParameter, code);
src/main/java/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1771,CatchStatement answer = new CatchStatement(catchParameter, code);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,169,Parameter newParam = new Parameter(fixedType, "arg" + i);
src/main/groovy/groovy/transform/options/ImmutablePropertyHandler.java,132,return createConstructorStatement(xform, cNode, pNode, namedArgsMap != null);
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,55,VariableExpression implicitThis = new VariableExpression("this");
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,56,PropertyExpression pexp = new PropertyExpression(implicitThis, expr.getName());
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,62,implicitThis.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, owner);
src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java,63,implicitThis.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, val);
src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,493,if (fn != null && Modifier.isPrivate(fn.getModifiers()) &&
src/main/java/org/codehaus/groovy/ast/CompileUnit.java,94,public List getClasses() {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,153,for (ClassNode inode : node.getAllInterfaces()) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,154,if (Traits.isTrait(inode)) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,155,List<PropertyNode> traitProps = inode.getProperties();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,156,for (PropertyNode pn : traitProps) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,157,super.visitProperty(pn);
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,325,for (ClassNode node : classNode.getAllInterfaces()) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,326,if (Traits.isTrait(node)) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,327,List<MethodNode> traitMethods = node.getMethods();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,328,for (MethodNode traitMethod : traitMethods) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,329,MethodNode method = classNode.getMethod(traitMethod.getName(), traitMethod.getParameters());
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,330,if (method == null) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,331,for (MethodNode methodNode : propertyMethods) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,332,if (methodNode.getName().equals(traitMethod.getName())) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,333,boolean sameParams = sameParameterTypes(methodNode);
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,334,if (sameParams) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,335,method = methodNode;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,336,break;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,340,if (method==null && !traitMethod.isAbstract()) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,341,printMethod(out, classNode, traitMethod);
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,350,private static boolean sameParameterTypes(final MethodNode methodNode) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,351,Parameter[] a = methodNode.getParameters();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,352,Parameter[] b = methodNode.getParameters();
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,353,boolean sameParams = a.length == b.length;
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,355,for (int i = 0; i < a.length; i++) {
src/main/java/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,356,if (!a[i].getType().equals(b[i].getType())) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,109,List<ClassNode> traits = findTraits(cNode);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,122,private static List<ClassNode> findTraits(ClassNode cNode) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,123,LinkedHashSet<ClassNode> interfaces = new LinkedHashSet<ClassNode>();
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,124,Traits.collectAllInterfacesReverseOrder(cNode, interfaces);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,125,List<ClassNode> traits = new LinkedList<ClassNode>();
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,126,for (ClassNode candidate : interfaces) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,127,if (Traits.isAnnotatedWithTrait(candidate)) {
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,128,traits.add(candidate);
src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,131,return traits;
src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,155,opcode = INVOKESPECIAL;
