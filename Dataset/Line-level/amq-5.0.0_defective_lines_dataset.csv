File,Line_number,SRC
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,188,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,265,doRFC2254Encoding(dn), username
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,58,ObjectName[] queues = broker.getTopics();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,59,return getManagedObjects(queues, TopicViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,67,ObjectName[] queues = broker.getDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,68,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,98,throw new JMSException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,218,cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,221,physicalConnection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,24,import javax.jms.Connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,26,import javax.jms.XAConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,27,import javax.jms.XASession;
activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java,33,private final TransactionContext transactionContext;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,245,return "ServerSessionImpl:" + serverSessionId;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,175,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,176,dispatchToSession((MessageDispatch)i.next());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,179,LOG.error("Error redispatching unconsumed messages from stale session", t);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,164,session.run();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,156,Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,157,Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,162,listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,163,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,164,listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,165,consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,350,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,357,ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,391,protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,392,long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,394,String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,395,if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,396,answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,398,if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,399,answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,401,return answer;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,83,Set brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,87,ObjectName name = (ObjectName)brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,88,BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,217,NameParser parser = context.getNameParser("");
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,218,Name contextName = parser.parse(context.getNameInNamespace());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,220,Name entryName = parser.parse(result.getName());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,221,Name name = contextName.addAll(baseName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,222,name = name.addAll(entryName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,223,String dn = name.toString();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,214,throw new RuntimeException("Endpoint after delivery notification failure", e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,56,private String readTimeoutParameter = "readTimeout";
assembly/src/release/example/src/ProducerTool.java,133,if (transacted) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,70,private String readTimeoutParameter = "timeout";
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,257,Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,259,connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,260,if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,261,XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,262,XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,263,return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,264,xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,267,return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,271,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,272,connection.close();
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,out.print(refreshRate);
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,35,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,43,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,44,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,45,return connection;
activemq-xmpp/src/main/java/org/apache/activemq/transport/xmpp/XmppTransport.java,54,import org.jabber.etherx.streams.Features;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,22,import java.util.Enumeration;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,25,import java.util.Properties;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,60,private Set<Principal> principals = new HashSet<Principal>();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,111,user = ((NameCallback)callbacks[0]).getName();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,112,char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,71,private ConnectionConsumer consumer;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,205,throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,24,import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
activemq-console/src/main/java/org/apache/activemq/console/command/BstatCommand.java,64,queryTokens.add("--vuew");
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,101,bridge.start();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,105,final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,106,if (event.failed.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,108,listener.onServiceRemove(event);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,71,private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,404,md.setDestination(node.getRegionDestination().getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,405,dispatchedCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,408,if (singleDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,409,if (destination == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,410,destination = node.getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,412,if (destination != node.getRegionDestination()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,413,singleDestination = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,418,md.setTransmitCallback(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,420,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,421,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,422,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,428,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,429,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,81,SslTransportServer server = new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,59,public SslTransportServer(
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,60,SslTransportFactory transportFactory,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,61,URI location,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,62,SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportServer.java,37,import org.apache.activemq.transport.reliable.Replayer;
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,73,out.println("<body>Published <b>" + count + "</b> of " + total + " price messages.  Refresh = " + refreshRate + "s");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,461,checkConnected();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,463,connected.set(false);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,69,cs.removeTransactionState(info.getTransactionId());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,65,throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to create: " + destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,77,if (securityContext == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,78,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,80,Set<?> allowedACLs = null;
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,81,if (!destination.isTemporary()) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,82,allowedACLs = authorizationMap.getAdminACLs(destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,84,allowedACLs = authorizationMap.getTempDestinationAdminACLs();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,93,public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,96,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,97,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,107,throw new SecurityException("User " + subject.getUserName() + " is not authorized to read from: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,109,subject.getAuthorizedReadDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,138,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,139,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,149,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,150,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,152,subject.getAuthorizedWriteDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,160,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,161,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,172,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,173,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,175,subject.getAuthorizedWriteDests().put(messageSend.getDestination(), messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,103,sub.activate(usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,35,return load(classDesc.getName(), cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,53,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1735,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1736,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1737,if (s.isInUse(destination)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2008,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2009,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2010,s.close(command.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2013,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2014,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2015,s.setPrefetchSize(command.getConsumerId(), command.getPrefetch());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,159,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,164,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,354,throw new JMSException(
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,58,return new HttpClientTransport(textWireFormat, location);
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,35,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,40,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,45,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,267,beanServer.unregisterMBean(name);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,200,if (destination == info.getDestination()) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,20,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,32,import org.springframework.core.io.ClassPathResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,33,import org.springframework.core.io.FileSystemResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,35,import org.springframework.core.io.UrlResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,36,import org.springframework.util.ResourceUtils;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,883,protected void doStop() throws Exception, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,884,LOG.debug("Stopping connection: " + transport.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,902,LOG.trace("Exception caught stopping", ignore);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,55,super(connector, transport, broker, factory);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,264,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,266,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,267,return;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,269,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,270,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,276,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,278,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,279,sleepMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,281,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,32,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,155,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,288,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,289,ServiceStopper ss = new ServiceStopper();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,291,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,292,return;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,294,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,295,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,297,for (Iterator<FanoutTransportHandler> iter = transports.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,298,FanoutTransportHandler th = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,299,if (th.transport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,300,ss.stop(th.transport);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,304,LOG.debug("Stopped: " + this);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,305,ss.throwFirstException();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,307,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,19,import java.util.concurrent.Executor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,20,import java.util.concurrent.ScheduledThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,21,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,43,this("ActiveMQ Task", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,66,Object value = method.invoke(target, new Object[] {});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,164,setter.invoke(target, new Object[] {value});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,167,setter.invoke(target, new Object[] {convert(value, setter.getParameterTypes()[0])});
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,689,checkClosed();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,379,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,883,protected void waitStarted() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,884,startedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,887,protected void clearDownSubscriptions() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,888,subscriptionMapByLocalId.clear();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,889,subscriptionMapByRemoteId.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,794,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter - additionalWindowSize)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,283,transportToStop.stop();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,37,if (rc == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,38,return null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,40,return OpenTypeSupport.convert(rc);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,25,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,66,if (!brokerURL.getScheme().equals("ssl")) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,67,return super.createTransport();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,71,SslTransportFactory sslFactory = new SslTransportFactory();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,73,return sslFactory.doConnect(brokerURL);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,50,private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,178,((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-core/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,115,if (attempt > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,336,ConsumerId id = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DatabaseLocker.java,32,boolean keepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,99,public boolean keepAlive() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,463,LOG.error("Failed to get database when trying keepalive: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,472,LOG.info("No longer able to keep the exclusive lock so giving up being a master");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,86,+ "( ID " + longDataType + " NOT NULL, TIME " + longDataType
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,178,int intialParen = ssp.indexOf("(");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,179,if (intialParen == 0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,180,rc.host = ssp.substring(0, intialParen);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,186,p = ssp.lastIndexOf(")");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,187,componentString = ssp.substring(intialParen + 1, p);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,330,public int indexOfParenthesisMatch(String str) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,331,int result = -1;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,333,return result;
activemq-core/src/main/java/org/apache/activemq/command/XATransactionId.java,21,import org.apache.activemq.util.HexSupport;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,45,void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,138,adapter.doRemoveMessage(c, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,325,+ " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,21,import java.io.OutputStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,28,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,55,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,277,public void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,286,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,664,s.setString(1, destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,665,s.setString(2, clientId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,666,s.setString(3, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,668,if (!rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,669,return null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,671,return getBinaryData(rs, 1);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,46,ConcurrentHashMap<Object, Tx> inflightTransactions = new ConcurrentHashMap<Object, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,48,ConcurrentHashMap<TransactionId, Tx> preparedTransactions = new ConcurrentHashMap<TransactionId, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,127,return new ProxyTopicMessageStore(messageStore) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,141,public void prepare(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,181,public void rollback(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,171,if (tx == null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,172,return;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,22,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,134,throw new ProtocolException("Illegal destination name: [" + name + "] -- ActiveMQ STOMP destinations "
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,352,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,353,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,355,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,359,writer.print(object.toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,379,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,380,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,382,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,386,writer.print(object.toString());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,148,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,150,subscriptionRecoveryPolicy.recover(context, this, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,158,consumers.add(sub);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,45,if (keyPassword == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,48,if (keyStoreType != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,51,if (secureRandomCertficateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,54,if (keyCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,57,if (trustCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,60,if (protocol != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,114,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,120,topic.deactivate(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,123,for (final MessageReference node : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,125,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,126,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,127,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(count.intValue() + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,129,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,132,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,133,pending.addMessageFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,136,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,140,if (!keepDurableSubsActive && pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,141,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,23,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,57,protected final List<MessageReference> dispatched = new CopyOnWriteArrayList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,200,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,50,return new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,69,String key = (String)entry.getKey();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,70,String value = (String)entry.getValue();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,72,if (key.startsWith("java.naming.queue")) {
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,73,String key1 = key.substring("java.naming.queue.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,74,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,75,environment1.put("queue." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,77,String key1 = key.substring("java.naming.topic.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,78,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,79,environment1.put("topic." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,81,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,82,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,84,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,85,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,90,value = value.replace(';', ',');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,91,environment1.put(Context.PROVIDER_URL, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,93,environment1.put(key, value);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,148,if (messages.isRecoveryRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,131,if (keepDurableSubsActive&& pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,53,audit=null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,58,statement = connection.prepareStatement(sql);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,66,if (null != statement) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,68,statement.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,72,statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,102,statement.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,103,int rows = statement.executeUpdate();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,77,nonPersistent.stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,78,nonPersistent.gc();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,63,public void doStop() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,64,if (isStarting()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,65,setPendingStop(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,return;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,unregisterMBean(byClientIdName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,70,unregisterMBean(byAddressName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,byClientIdName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,72,byAddressName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,74,super.doStop();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,154,prefetchExtension = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,206,+ getPendingQueueSize() + ", dispatched=" + dispatchCounter + ", inflight=" + dispatched.size() + ", prefetchExtension=" + this.prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,58,protected int prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,367,return (dispatched.size() - prefetchExtension) <= (info.getPrefetchSize() * .4);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,374,return (dispatched.size() - prefetchExtension) >= (info.getPrefetchSize() * .9);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,378,return info.getPrefetchSize() + prefetchExtension - dispatched.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,494,prefetchExtension = Math.max(0, prefetchExtension - 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,554,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,556,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,558,return md;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,560,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,561,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,565,return md;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,96,public synchronized void run() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,91,if (peer.async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,93,peer.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,115,public void start() throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,122,Object command;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,198,if (command != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,204,return !mq.isEmpty();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,312,protected void wakeup() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,313,if (async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,319,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,320,taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,322,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,29,import org.apache.activemq.thread.TaskRunnerFactory;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,30,import org.apache.activemq.thread.Valve;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,36,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,51,protected boolean disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,56,protected LinkedBlockingQueue<Object> messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,57,protected boolean started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,60,private TaskRunner taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,61,private final Object lazyInitMutext = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,62,private final Valve enqueueValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,75,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,84,peer.enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,86,if (peer.disposed || peer.stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,90,if (peer.started) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,92,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,103,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,110,peer.enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,116,if (transportListener == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,117,throw new IOException("TransportListener not set.");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,119,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,120,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,121,if (messageQueue != null && !async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,123,while ((command = messageQueue.poll()) != null && !stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,127,started = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,128,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,130,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,134,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,135,stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,140,stopping.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,143,if( enqueueValve.isOn() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,151,TaskRunner tr = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,152,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,153,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,154,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,155,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,156,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,157,if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,158,tr = taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,159,taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,163,stopping.set(false);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,164,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,166,if (tr != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,167,tr.shutdown(1000);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,177,final TransportListener tl;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,178,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,180,enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,181,tl = transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,182,if (!started || disposed || tl == null || stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,183,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,186,getMessageQueue().clear();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,188,return false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,193,enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,196,LinkedBlockingQueue<Object> mq = getMessageQueue();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,199,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,200,tl.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,202,tl.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,212,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,215,this.transportListener = commandListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,216,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,221,throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,225,private LinkedBlockingQueue<Object> getMessageQueue() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,226,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,227,if (messageQueue == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,228,messageQueue = new LinkedBlockingQueue<Object>(this.asyncQueueDepth);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,230,return messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,314,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,315,if (taskRunner == null) {
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,100,if (jmsDestination == null) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,45,public abstract class ActiveMQDestination extends JNDIBaseStorable implements DataStructure, Destination, Externalizable, Comparable {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1748,protected void startDestinationsInPersistenceStore(Broker broker) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1749,Set destinations = destinationFactory.getDestinations();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1750,if (destinations != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1751,Iterator iter = destinations.iterator();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1753,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1754,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1755,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1756,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1757,adminConnectionContext = context;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1758,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,382,demandConsumerDispatched++;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,383,if (demandConsumerDispatched > (demandConsumerInfo.getPrefetchSize() * .75)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,384,remoteBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,385,demandConsumerDispatched = 0;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,20,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,23,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,24,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,25,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,26,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,27,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,28,import java.util.Properties;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,29,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,30,import java.util.concurrent.CountDownLatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,31,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,32,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,33,import java.util.concurrent.atomic.AtomicInteger;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,34,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,20,import java.io.InterruptedIOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,21,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,22,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,23,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,26,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,213,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,214,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,218,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,54,return broker.getBrokerId().toString();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,58,return broker.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,74,return broker.getDestinationStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,78,return broker.getDestinationStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,82,return broker.getDestinationStatistics().getConsumers().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,86,return broker.getDestinationStatistics().getMessages().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,90,return broker.getDestinationStatistics().getMessagesCached().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,106,broker.getDestinationStatistics().reset();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,110,broker.getDestinationStatistics().setEnabled(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,114,broker.getDestinationStatistics().setEnabled(false);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,118,return broker.getDestinationStatistics().isEnabled();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,126,return broker.getTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,130,return broker.getQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,134,return broker.getTemporaryTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,138,return broker.getTemporaryQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,146,return broker.getDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,150,return broker.getQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,154,return broker.getTemporaryTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,158,return broker.getTemporaryQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,162,return broker.getInactiveDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,199,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,204,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,210,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,221,Subscription subscription = broker.addConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,222,broker.removeConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,234,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,236,broker.removeSubscription(context, info);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,25,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,27,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,28,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,29,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,30,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,31,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,32,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,19,import java.io.DataInput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,20,import java.io.DataInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,21,import java.io.DataOutput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,22,import java.io.DataOutputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,23,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,24,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,26,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,131,if (contentLength != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,281,response = command.visit(this);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,269,dispatchAsync(ce);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,283,if (responseRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,149,store.recover(new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,151,public boolean recoverMessage(Message message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,157,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,159,if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,160,message.setRegionDestination(Queue.this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,162,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,163,messages.addMessageLast(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,168,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,169,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,171,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,174,public boolean recoverMessageReference(MessageId messageReference) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,175,throw new RuntimeException("Should not be called.");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,178,public boolean hasSpace() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,179,return true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,440,broker.acknowledge(consumerExchange, ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,61,DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,62,if (filter.matches(lastImage.getMessage().getDestination())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,63,result.add(lastImage.getMessage());
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,60,private DataStructure marshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,61,private DataStructure unmarshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1989,if (text.equals("shutdown")) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,40,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,41,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,42,import org.apache.activemq.command.CommandTypes;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,43,import org.apache.activemq.command.ConnectionControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,44,import org.apache.activemq.command.ConnectionError;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,45,import org.apache.activemq.command.ConnectionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,46,import org.apache.activemq.command.ConnectionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,47,import org.apache.activemq.command.ConsumerControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,48,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,49,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,50,import org.apache.activemq.command.ControlCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,51,import org.apache.activemq.command.DataArrayResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,52,import org.apache.activemq.command.DestinationInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,53,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,54,import org.apache.activemq.command.FlushCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,55,import org.apache.activemq.command.IntegerResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,56,import org.apache.activemq.command.KeepAliveInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,57,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,58,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,59,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,60,import org.apache.activemq.command.MessageDispatchNotification;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,61,import org.apache.activemq.command.MessagePull;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,62,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,63,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,64,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,65,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,66,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,67,import org.apache.activemq.command.SessionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,68,import org.apache.activemq.command.SessionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,69,import org.apache.activemq.command.ShutdownInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,70,import org.apache.activemq.command.TransactionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,71,import org.apache.activemq.command.TransactionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,72,import org.apache.activemq.command.WireFormatInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,581,for (Iterator iter = session.getConsumerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,589,for (Iterator iter = session.getProducerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,205,return new HashMap<ActiveMQDestination, Destination>(destinations);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,118,Map<ActiveMQDestination, Destination> answer = getQueueRegion().getDestinationMap();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,48,private LinkedList<MessageReference> memoryList = new LinkedList<MessageReference>();
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,128,if (correlationID != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1179,result.setConnectionContext(context);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,27,private static final ClassLoader FALLBACK_CLASS_LOADER = ClassLoadingAwareObjectInputStream.class.getClassLoader();
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,33,protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,38,protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,46,return Proxy.getProxyClass(cinterfaces[0].getClassLoader(), cinterfaces);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1826,public List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,197,List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,107,private static final IdGenerator CONNECTION_ID_GENERATOR = new IdGenerator();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,587,ServiceSupport.dispose(this.transport);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,79,connector = new SocketConnector();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,84,server.setConnectors(new Connector[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,85,connector
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,88,ContextHandler contextHandler = new ContextHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,89,contextHandler.setContextPath("/");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,90,contextHandler.setServer(server);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,91,server.setHandler(contextHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,93,SessionHandler sessionHandler = new SessionHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,94,contextHandler.setHandler(sessionHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,96,ServletHandler servletHandler = new ServletHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,97,sessionHandler.setHandler(servletHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,99,ServletHolder holder = new ServletHolder();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,100,holder.setName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,101,holder.setClassName(HttpTunnelServlet.class.getName());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,102,servletHandler.setServlets(new ServletHolder[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,103,holder
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,106,ServletMapping mapping = new ServletMapping();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,107,mapping.setServletName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,108,mapping.setPathSpec("/*");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,109,servletHandler.setServletMappings(new ServletMapping[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,110,mapping
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,41,sslConnector.setKeystore(keyStore);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,42,sslConnector.setPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,46,sslConnector.setKeyPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,49,sslConnector.setKeystoreType(keyStoreType);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,52,sslConnector.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,55,sslConnector.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,58,sslConnector.setSslTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,61,sslConnector.setProtocol(protocol);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,37,public abstract Object unmarshalText(String text);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,39,public abstract Object unmarshalText(Reader reader);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,41,public abstract String marshalText(Object command);
activemq-optional/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,58,public String marshalText(Object command) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,334,Map map = URISupport.parseQuery(this.brokerURL.getQuery());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,335,if (buildFromMap(IntrospectionSupport.extractProperties(map, "jms."))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,347,if (buildFromMap(IntrospectionSupport.extractProperties(data.getParameters(), "jms."))) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,27,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,107,if (uri != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,265,public static String createQueryString(Map options) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,270,for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,276,String key = (String)iter.next();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,296,public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,439,LOG.error("Failed to start ActiveMQ JMS Message Broker. Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,25,import org.apache.activemq.command.Endpoint;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,26,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,28,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,43,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,44,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,50,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,53,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,54,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,55,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,56,BrokerId remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,60,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,61,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,62,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,64,from.setBrokerInfo(remoteBrokerInfo);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,66,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,67,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,68,LOG.info("Disconnecting loop back connection.");
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,70,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,74,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,79,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,80,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getFromBrokerId(info)));
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,86,protected BrokerId getFromBrokerId(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,87,BrokerId answer = null;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,88,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,89,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,90,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,92,answer = from.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,94,if (answer != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,95,return answer;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,97,throw new IOException("No broker ID is available for endpoint: " + from + " from command: "
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,98,+ command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,110,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,111,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,23,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,25,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,27,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,41,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,42,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,43,protected BrokerId remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,50,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,51,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,52,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,53,remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,54,remoteBrokerPath[0] = remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,55,remoteBrokerName = remoteBrokerInfo.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,56,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,57,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,60,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,63,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,67,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,68,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getRemoteBrokerPath()));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,71,protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,72,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,73,localBrokerId = ((BrokerInfo)command).getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,74,localBrokerPath[0] = localBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,75,if (remoteBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,76,if (remoteBrokerId.equals(localBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,78,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,79,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,89,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,90,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,60,import org.apache.activemq.transport.TransportListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,104,protected CountDownLatch remoteBrokerNameKnownLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,250,remoteBrokerNameKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,315,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,894,protected abstract void serviceLocalBrokerInfo(Command command) throws InterruptedException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,896,protected abstract void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,898,protected abstract void serviceRemoteBrokerInfo(Command command) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,900,protected abstract BrokerId[] getRemoteBrokerPath();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,130,return converter.createTempQueue(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,132,return converter.createTempTopic(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,514,rc = new ActiveMQTempQueue(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,516,tempDestinations.put(name, rc);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,518,return rc;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,522,ActiveMQDestination rc = tempDestinations.get(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,523,if( rc == null ) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,524,rc = new ActiveMQTempTopic(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,105,protected final AtomicBoolean remoteInterupted = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,145,remoteBroker.setTransportListener(new TransportListener() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,156,public void transportInterupted() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,159,if (remoteInterupted.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,160,LOG.info("Outbound transport to " + remoteBrokerName + " interrupted.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,161,if (localBridgeStarted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,162,clearDownSubscriptions();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,163,synchronized (DemandForwardingBridgeSupport.this) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,164,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,165,localBroker.oneway(localConnectionInfo.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,167,LOG.debug("local broker is now disposed", td);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,169,LOG.warn("Caught exception from local start", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,173,localBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,174,remoteBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,175,startedLatch = new CountDownLatch(2);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,176,localStartedLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,180,public void transportResumed() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,181,if (remoteInterupted.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,185,if (!lastConnectSucceeded.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,186,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,187,LOG.debug("Previous connection was never fully established. Sleeping for second to avoid busy loop.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,188,Thread.sleep(1000);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,190,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,193,lastConnectSucceeded.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,194,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,195,startLocalBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,196,remoteBridgeStarted.set(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,197,startedLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,198,LOG.info("Outbound transport to " + remoteBrokerName + " resumed");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,200,LOG.error("Caught exception  from local start in resume transport", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,623,if (!remoteInterupted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,624,stop();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,127,NetworkBridge bridge = bridges.remove(uri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,128,if (bridge == null) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,129,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,132,ServiceSupport.dispose(bridge);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,77,private int maxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,249,LOG.debug("Started.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,265,LOG.debug("Stopped.");
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,26,private final Object writeMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,33,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,39,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,45,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,51,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,209,sendToActiveMQ(message, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,278,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,302,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,324,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,387,sendToActiveMQ(sub.getConsumerInfo().createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,462,sendToActiveMQ(new ShutdownInfo(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,515,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,525,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,57,final Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,23,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,414,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,415,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,418,ctx.afterRollback();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,454,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,455,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,592,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.get(transactionId);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,593,if (l == null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,594,l = new ArrayList<TransactionContext>(3);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,595,ENDED_XA_TRANSACTION_CONTEXTS.put(transactionId, l);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,596,l.add(this);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,598,l.add(this);
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,332,if (answer == null && "text/xml".equals(request.getContentType())) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,366,LOG.debug("Interupted: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,454,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,463,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,464,uris.remove(u[i]);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,533,Command command = iter2.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,60,Map options = compositData.getParameters();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,69,public FailoverTransport createTransport(Map parameters) throws IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,40,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,275,List consumers = client.getConsumers();
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,47,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,61,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,80,OutputStream stream = blob.setBinaryStream(data.length);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,81,stream.write(data);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,82,stream.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,83,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,87,s.setBlob(1, blob);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,359,sendToActiveMQ(consumerInfo, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,65,protected final Object destinationsMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,113,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,169,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,198,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,204,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,352,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,386,for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,387,Subscription sub = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,186,for (Iterator<DurableTopicSubscription> iterator = durableSubscriptions.values().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,187,DurableTopicSubscription sub = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,44,Set virtualDestinations = destinationMap.get(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,46,for (Iterator iter = virtualDestinations.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,354,if (lc == Byte.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,355,if (rc == Short.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,356,lv = Short.valueOf(((Number)lv).shortValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,358,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,360,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,362,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,364,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,366,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,369,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,370,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,372,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,374,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,376,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,378,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,381,if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,382,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,384,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,386,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,388,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,391,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,392,rv = Long.valueOf(((Number)rv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,394,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,396,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,398,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,401,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,402,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,404,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,406,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,408,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,411,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,412,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,414,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,416,rv = new Float(((Number)rv).doubleValue());
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,181,out.close();
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,85,boolean containsKey(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,93,V get(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,99,boolean containsValue(K o);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,106,void putAll(Map<K, V> map);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,140,V remove(K key);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,53,private String name;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,319,private void addChild(T child) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,326,private void removeChild(T child) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,851,stop();
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,125,result = id.substring(0, index + 1);
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,90,if (session != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,78,if (broker == null) {
activemq-core/src/main/java/org/apache/activemq/util/BitArray.java,125,dataOut.writeByte((int)bits);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,85,purgeMessages(queueName, messages);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,116,public void purgeMessages(ObjectName queue, List messages) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,120,Object[] param = new Object[1];
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,121,for (Iterator i = messages.iterator(); i.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,122,CompositeData msg = (CompositeData)i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,123,param[0] = "" + msg.get("JMSMessageID");
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,182,answer.add(OpenTypeSupport.convert(message));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,835,starting = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,857,starting = false;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,858,if (pendingStop) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,859,LOG.debug("Calling the delayed stop()");
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1659,onAsyncException(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1660,if (!closing.get() && !closed.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1662,public void run() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1663,transportFailed(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1664,ServiceSupport.dispose(ActiveMQConnection.this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1665,brokerInfoReceived.countDown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1667,for (Iterator<TransportListener> iter = transportListeners
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1668,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1669,TransportListener listener = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1670,listener.onException(error);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,768,ActiveMQDestination[] dests = excludedDestinations;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,641,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,643,if(node!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,644,Message message=node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,646,DeadLetterStrategy deadLetterStrategy=node
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,647,.getRegionDestination().getDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,648,if(deadLetterStrategy!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,649,if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,664,ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,667,if (context.getBroker()==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,668,context.setBroker(getRoot());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,671,deadLetterDestination);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,53,throws SQLException, JMSException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,59,s = c.prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,60,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,61,s.setString(2, destinationName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,62,s.setString(3, messageID);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,63,s.setString(4, " ");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,66,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,71,s = c.prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,75,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,86,s = c.prepareStatement(statements.getUpdateMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,88,s.setLong(2, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,91,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,93,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,94,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,98,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,104,public byte[] doGetMessage(TransactionContext c, long seq) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,110,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,132,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,133,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,136,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,137,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,605,private static void close(PreparedStatement s) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,612,private static void close(ResultSet rs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,159,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,160,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,161,md.setRedeliveryCounter(count.intValue());
activemq-core/src/main/java/org/apache/activemq/broker/region/NullMessageReference.java,118,throw new RuntimeException("not implemented");
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,217,return message;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,57,private String deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,298,return deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,507,public void setDeleteOldMessagesStatement(String deleteOldMessagesStatment) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,508,this.deleteOldMessagesStatement = deleteOldMessagesStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/AxionJDBCAdapter.java,57,statements.setDeleteOldMessagesStatement("DELETE FROM " + statements.getFullMessageTableName() + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,571,s.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,573,LOG.debug("Deleted " + i + " old message(s).");
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,111,return;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1247,protected void stopAllConnectors(ServiceStopper stopper) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1655,protected void startAllConnectors() throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,47,public TransactionContext(DataSource dataSource) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,48,this.dataSource = dataSource;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,61,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TxCommand.java,70,return command != null && command.getDataStructureType() == CommandTypes.MESSAGE_ACK;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,81,Thread thread = new Thread(runnable, name);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,534,Object value = getObjectProperty(name);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,535,if (value == null) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,536,if (name.equals("JMSXUserID")) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,537,value = getUserID();
activemq-core/src/main/java/org/apache/activemq/ActiveMQQueueSession.java,301,return next.equals(arg0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQTopicSession.java,301,return next.equals(arg0);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,36,Message rc = ((Queue)destination).getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,912,if (filter.evaluate(context, r)) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,120,LOG.warn("path isn't a valid local location for TcpTransport to use", e);
activemq-tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,163,recvCount.notify();
activemq-tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,172,recvCount.wait();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,63,private final AtomicBoolean stopping = new AtomicBoolean();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,78,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,79,return;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,81,super.stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,82,if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,83,VMTransportServer.this.stop();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,272,Message message = null;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1508,broker = new UserIDBroker(broker);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,129,return true;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,133,principals.add(new UserPrincipal(user));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,135,for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,136,String name = (String)enumeration.nextElement();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,137,String[] userList = ((String)groups.getProperty(name) + "").split(",");
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,138,for (int i = 0; i < userList.length; i++) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,139,if (user.equals(userList[i])) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,140,principals.add(new GroupPrincipal(name));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,141,break;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,146,subject.getPrincipals().addAll(principals);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,151,LOG.debug("commit");
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,153,return true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1102,Properties properties = MarshallingSupport.stringToProperties(info.getNetworkProperties());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1103,Map<String, String> props = createMap(properties);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1104,NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1105,IntrospectionSupport.setProperties(config, props, "");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1106,config.setBrokerName(broker.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1121,LOG.info("Created Duplex Bridge back to " + info.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1124,LOG.error("Creating duplex network bridge", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,246,protected void startLocalBridge() throws Exception {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,292,remoteConnectionInfo.setClientId("NC_" + configuration.getBrokerName() + "_outbound");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,676,public ActiveMQDestination[] getStaticallyIncludedDestinations() {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,199,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,144,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,201,LOG.info("Network Connector " + getName() + " Started");
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,205,LOG.info("Network Connector " + getName() + " Stopped");
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,87,return transactionId != null && transactionId.isXATransaction();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTempDestination.java,51,connection.deleteTempDestination(this);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionState.java,114,public List<DestinationInfo> getTempDesinations() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,172,for (Iterator iter2 = connectionState.getTempDesinations().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1132,broker.addBroker(this, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,93,private final CopyOnWriteArrayList<BrokerInfo> brokerInfos = new CopyOnWriteArrayList<BrokerInfo>();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,516,brokerInfos.add(info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,521,brokerInfos.remove(info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,527,result = brokerInfos.toArray(result);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,558,if (!cs.getSessionIds().contains(info.getSessionId())) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,24,import java.util.List;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,25,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,379,if (producerExchange.isMutable() || producerExchange.getRegion() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,37,private final static Log LOG = LogFactory.getLog(SimpleDiscoveryAgent.class);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,116,LOG.debug("Failure occured soon after the discovery event was generated.  It will be clasified as a connection failure: "+event);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,131,LOG.debug("Waiting "+event.reconnectDelay+" ms before attepting to reconnect.");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,316,taskRunner = TASK_RUNNER_FACTORY.createTaskRunner(this, "VMTransport: " + toString());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,240,public long getDispachedCounter() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionViewMBean.java,95,long getDispachedCounter();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,71,private long initialReconnectDelay = 10;
activemq-core/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,65,super.addConnection(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,19,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,21,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,23,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,244,super.setMaxBatchSize(maxBatchSize);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,57,void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo, boolean retroactive) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,67,void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,77,int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,213,getAdapter().doDeleteOldMessages(c);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,139,adapter.doSetSubscriberEntry(c, subscriptionInfo, retroactive);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,193,result = adapter.doGetDurableSubscriberMessageCount(c, destination, clientId, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,566,public void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,48,private boolean active;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,60,return active;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,64,return !active || super.isFull();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,73,if (active || keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,85,if (!active) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,86,this.active = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,112,active = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,167,if (!active && !keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,179,if (active || keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,191,return active;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,41,private Map<String, AtomicLong> subscriberLastMessageMap = new ConcurrentHashMap<String, AtomicLong>();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,91,String subcriberId = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,92,AtomicLong last = subscriberLastMessageMap.get(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,93,if (last == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,96,subscriberLastMessageMap.put(subcriberId, last);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,98,final AtomicLong finalLast = last;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,127,String subcriberId = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,128,subscriberLastMessageMap.remove(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,50,private String updateLastAckOfDurableSubStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,188,public String getUpdateLastAckOfDurableSubStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,189,if (updateLastAckOfDurableSubStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,193,return updateLastAckOfDurableSubStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,210,+ " ORDER BY M.ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,220,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > ?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,289,public String getDeleteOldMessagesStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,290,if (deleteOldMessagesStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,567,public void setUpdateLastAckOfDurableSubStatement(String updateLastAckOfDurableSub) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,568,this.updateLastAckOfDurableSubStatement = updateLastAckOfDurableSub;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,326,public void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,347,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,395,s.setLong(4, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,468,s.setString(1, info.getDestination().getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,469,s.setString(2, info.getClientId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,470,s.setString(3, info.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,471,s.setString(4, info.getSelector());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,472,s.setLong(5, lastMessageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,473,s.setString(6, info.getSubscribedDestination().getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,474,if (s.executeUpdate() != 1) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,475,throw new IOException("Could not create durable subscription for: " + info.getClientId());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,23,import java.util.Map;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,148,synchronized (this) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,149,BlockingQueueTransport answer = clients.get(clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,150,if (answer == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,151,LOG.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: " + clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,152,return null;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,154,return answer;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,159,String clientID = request.getHeader("clientID");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,167,synchronized (this) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,168,BlockingQueueTransport answer = clients.get(clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,169,if (answer != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,172,return null;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,175,answer = createTransportChannel();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,176,clients.put(clientID, answer);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,178,return answer;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,175,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,183,+ getFullAckTableName() + " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,191,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,262,+ " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,343,throw new SQLException("Failed add a message");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,596,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,597,s.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,126,DurableTopicSubscription sub = durableSubscriptions.get(key);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,195,if (sub.getConsumerInfo().isDurable()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,196,view = new DurableSubscriptionView(this, context.getClientId(), sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,198,if (sub instanceof TopicSubscription) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,199,view = new TopicSubscriptionView(context.getClientId(), (TopicSubscription)sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,201,view = new SubscriptionView(context.getClientId(), sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,204,registerSubscription(objectName, sub.getConsumerInfo(), key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,217,unregisterSubscription(name);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,303,protected void unregisterSubscription(ObjectName key) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,306,inactiveDurableTopicSubscribers.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,321,SubscriptionInfo info = new SubscriptionInfo();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,322,info.setClientId(subscriptionKey.getClientId());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,323,info.setSubscriptionName(subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,324,info.setDestination(new ActiveMQTopic(view.getDestinationName()));
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,325,addInactiveSubscription(subscriptionKey, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,134,durableSubscriptions.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,139,super.removeConsumer(context, sub.getConsumerInfo());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,158,localHostName = java.net.InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,495,brokerName = java.net.InetAddress.getLocalHost().getHostName().toLowerCase();
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransport.java,343,String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,19,import java.net.InetAddress;
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,51,hostName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,94,TransportConnector c = service.addConnector("tcp://localhost:0");
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,64,import org.apache.activemq.security.SecurityContext;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,74,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,75,import org.apache.activemq.util.IOHelper;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,76,import org.apache.activemq.util.JMXSupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,77,import org.apache.activemq.util.ServiceStopper;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,78,import org.apache.activemq.util.URISupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1629,ConnectionContext adminConnectionContext = getBroker().getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1630,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1631,adminConnectionContext = createAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1632,getBroker().setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1634,return adminConnectionContext;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1643,protected ConnectionContext createAdminConnectionContext() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1644,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1645,context.setBroker(getBroker());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1646,context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1647,return context;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,24,import org.apache.activemq.broker.Broker;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,243,public static ConnectionContext getConnectionContext(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,244,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,245,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,246,adminConnectionContext = createAdminConnectionContext(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,247,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,249,return adminConnectionContext;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,258,protected static ConnectionContext createAdminConnectionContext(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,259,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,260,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,261,return context;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,60,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,66,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,72,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,78,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,84,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,90,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,84,LOG.debug("Activating " + this);
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,78,MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,79,delegate.acknowledge(context, clientId, subscriptionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/TopicMessageStore.java,44,void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,83,public void acknowledge(final ConnectionContext context, final String clientId, final String subscriptionName, final MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,135,topicReferenceStore.acknowledge(context, clientId, subscritionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,81,void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, int maxReturned, JDBCMessageRecoveryListener listener) throws Exception;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,83,long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,47,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,94,long lastAcked = adapter.doGetLastAckedDurableSubscriberMessageId(c, destination, clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,95,last = new AtomicLong(lastAcked);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,263,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,293,+ "( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID) "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,294,+ "FROM " + getFullAckTableName() + " WHERE "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,296,+ ".CONTAINER)";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,346,lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,348,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,585,long result = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,594,result = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,85,final MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,141,longTermStore.acknowledge(context, clientId, subscritionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,180,subscriptionKey.subscriptionName, identity);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicMessageStore.java,82,MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,69,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,44,ActiveMQDestination queueConsumers = getQueueConsumersWildcard(message.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,45,send(context, message, queueConsumers);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,114,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,120,LOG.debug("POST client=" + client + " session=" + request.getSession().getId() + " info=" + request.getPathInfo() + " contentType=" + request.getContentType());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,154,Listener listener = getListener(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,155,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,156,Map<MessageAvailableConsumer, String> consumerDestinationMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,163,consumerDestinationMap.put(consumer, destinationName);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,168,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,169,Map consumerDestinationMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,174,consumerDestinationMap.remove(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,236,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,238,LOG.debug("GET client=" + client + " session=" + request.getSession().getId() + " uri=" + request.getRequestURI() + " query=" + request.getQueryString());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,256,protected void doMessages(WebClient client, HttpServletRequest request, HttpServletResponse response) throws JMSException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,306,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,307,response.setHeader("Cache-Control", "no-cache");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,312,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,313,Map<MessageAvailableConsumer, String> consumerDestinationNameMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,390,protected Listener getListener(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,391,HttpSession session = request.getSession();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,392,Listener listener = (Listener)session.getAttribute("mls.listener");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,393,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,394,listener = new Listener(WebClient.getWebClient(request));
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,395,session.setAttribute("mls.listener", listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,397,return listener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,400,protected Map<MessageAvailableConsumer, String> getConsumerIdMap(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,402,Map<MessageAvailableConsumer, String> map = (Map<MessageAvailableConsumer, String>)session.getAttribute("mls.consumerIdMap");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,403,if (map == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,404,map = new HashMap<MessageAvailableConsumer, String>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,405,session.setAttribute("mls.consumerIdMap", map);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,407,return map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,410,protected Map<MessageAvailableConsumer, String> getConsumerDestinationNameMap(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,411,HttpSession session = request.getSession(true);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,412,Map<MessageAvailableConsumer, String> map = (Map<MessageAvailableConsumer, String>)session.getAttribute("mls.consumerDestinationNameMap");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,413,if (map == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,414,map = new HashMap<MessageAvailableConsumer, String>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,415,session.setAttribute("mls.consumerDestinationNameMap", map);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,417,return map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,420,protected boolean isRicoAjax(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,421,String rico = request.getParameter("rico");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,422,return rico != null && rico.equals("true");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,445,private class Listener implements MessageAvailableListener {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,446,WebClient client;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,447,long lastAccess;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,448,Continuation continuation;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,450,Listener(WebClient client) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,451,this.client = client;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,454,public void access() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,455,lastAccess = System.currentTimeMillis();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,458,public synchronized void setContinuation(Continuation continuation) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,459,this.continuation = continuation;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,462,public synchronized void onMessageAvailable(MessageConsumer consumer) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,463,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,464,LOG.debug("message for " + consumer + "continuation=" + continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,466,if (continuation != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,469,new Thread() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,470,public void run() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,471,client.closeConsumers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,198,broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,203,broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,61,private Map<TransactionId, Transaction> xaTransactions = new LinkedHashMap<TransactionId, Transaction>();
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,128,for (Iterator<Transaction> iter = xaTransactions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,143,Transaction transaction = null;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,149,transaction = new XATransaction(transactionStore, (XATransactionId)xid, this);
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,42,public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,44,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,45,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,46,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,47,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,48,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,49,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,50,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,51,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,52,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,788,Deflater deflater = new Deflater(Deflater.BEST_SPEED);
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,45,if (start) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,167,log.debug("Endpoint failed to process message.", e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,211,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,213,redeliveryPolicy().setBackOffMultiplier(value.shortValue());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,77,private static final Log LOG = LogFactory.getLog(DemandForwardingBridge.class);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,176,if (localWireFormatInfo == null) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,177,return;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,179,if (remoteWireFormatInfo == null) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,180,return;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,84,protected Map<String, Object> transportOptions;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,274,public void setTransportOption(Map<String, Object> transportOptions) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,275,this.transportOptions = transportOptions;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpEmbeddedTunnelServlet.java,46,transportConnector = new HttpTransportServer(new URI(url));
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,41,return new HttpTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,63,transport = httpTransport;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,45,public HttpTransportServer(URI uri) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,170,response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has allready been established");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,171,LOG.warn("A session for clientID '" + clientID + "' has allready been established");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,177,listener.onAccept(answer);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,36,return new HttpsTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,35,public HttpsTransportServer(URI uri) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,36,super(uri);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,188,connection.addSession(this);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,153,messages.put(message.getMessageId(), data);
activemq-core/src/main/java/org/apache/activemq/transport/FutureResponse.java,52,return responseSlot.poll(timeout, TimeUnit.MILLISECONDS);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,275,urls.add(dir.toURL());
activemq-console/src/main/java/org/apache/activemq/console/Main.java,303,urls.add(files[j].toURL());
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,174,tx.commit();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,280,Map<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1672,Map<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1108,HashMap<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,111,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,126,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/discovery/rendezvous/RendezvousDiscoveryAgentFactory.java,33,Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,72,final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,78,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,48,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,50,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,79,options = URISupport.parseParamters(location);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,126,public static Map<String, String> parseParamters(URI uri) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,127,return uri.getQuery() == null ? emptyMap() : parseQuery(stripPrefix(uri.getQuery(), "?"));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,203,if (TRANSPORTLOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,204,TRANSPORTLOG.debug("Transport failed: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,328,String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,329,if (localName != null && isUseLocalHost()) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,330,if (localName.equals(host)) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,272,return this.getProperties().containsKey(name);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,280,return new Vector<String>(this.getProperties().keySet()).elements();
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,72,return true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,108,if (!getTransactionContext().isInXATransaction()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,109,throw new JMSException("Session's XAResource has not been enlisted in a distributed transaction.");
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,765,long redeliveryDelay = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,767,redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,85,public long getRedeliveryDelay(long previousDelay) {
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,86,long redeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,89,redeliveryDelay = initialRedeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,93,redeliveryDelay = previousDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,103,redeliveryDelay += redeliveryDelay * variance;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,106,return redeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,208,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,209,triggerRemoteStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,211,LOG.warn("Caught exception from remote start", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,213,NetworkBridgeListener l = this.networkBridgeListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,214,if (l != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,215,l.onStart(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,252,localConnectionInfo = new ConnectionInfo();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,253,localConnectionInfo.setConnectionId(new ConnectionId(idGenerator.generateId()));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,255,localConnectionInfo.setClientId(localClientId);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,256,localConnectionInfo.setUserName(configuration.getUserName());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,257,localConnectionInfo.setPassword(configuration.getPassword());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,258,localBroker.oneway(localConnectionInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,260,localSessionInfo = new SessionInfo(localConnectionInfo, 1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,261,localBroker.oneway(localSessionInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,263,LOG.info("Network connection between " + localBroker + " and " + remoteBroker + "(" + remoteBrokerName + ") has been established.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,267,setupStaticDestinations();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,23,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,45,listener.recoverMessage(message);
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,46,lastRecovered = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,47,count++;
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,48,return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,106,listener.recoverMessage(msg);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,107,finalLast.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,108,return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,391,s.setMaxRows(maxReturned);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,403,break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,411,break;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,77,private List<MessageAck> messageAcks = new ArrayList<MessageAck>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,233,messageAcks.add(ack);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,314,final List<MessageAck> cpRemovedMessageLocations;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,324,this.messageAcks = new ArrayList<MessageAck>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,357,for (MessageAck ack : cpRemovedMessageLocations) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,139,removeMessage(ack.getLastMessageId());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,366,LOG.debug("Batch update done.");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,90,String action = null;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,93,while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,94,action = readLine(in, MAX_COMMAND_LENGTH, "The maximum command length was exceeded");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,95,if (action == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,96,throw new IOException("connection was closed");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,98,action = action.trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,99,if (action.length() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,100,break;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,106,HashMap<String, String> headers = new HashMap<String, String>(25);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,107,while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,108,String line = readLine(in, MAX_HEADER_LENGTH, "The maximum header length was exceeded");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,109,if (line != null && line.trim().length() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,111,if (headers.size() > MAX_HEADERS) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,112,throw new ProtocolException("The maximum number of headers was exceeded", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,115,try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,116,int seperatorIndex = line.indexOf(Stomp.Headers.SEPERATOR);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,117,String name = line.substring(0, seperatorIndex).trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,118,String value = line.substring(seperatorIndex + 1, line.length()).trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,119,headers.put(name, value);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,121,throw new ProtocolException("Unable to parser header line [" + line + "]", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,124,break;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,134,int length;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,135,try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,136,length = Integer.parseInt(contentLength.trim());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,138,throw new ProtocolException("Specified content-length is not a valid integer", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,141,if (length > MAX_DATA_LENGTH) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,142,throw new ProtocolException("The maximum data length was exceeded", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,63,Object PERSISTENT = "persistent";
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,19,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,20,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,22,import org.apache.activemq.broker.region.MessageReference;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,24,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,25,import org.apache.activemq.util.BitArrayBin;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,26,import org.apache.activemq.util.IdGenerator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,27,import org.apache.activemq.util.LRUCache;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,34,public class ActiveMQMessageAudit {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,38,private int auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,39,private int maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,40,private LRUCache<Object, BitArrayBin> map;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,47,this(DEFAULT_WINDOW_SIZE, MAXIMUM_PRODUCER_COUNT);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,58,this.auditDepth = auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,59,this.maximumNumberOfProducersToTrack=maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,60,this.map = new LRUCache<Object, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0.75f, true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,66,public int getAuditDepth() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,67,return auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,73,public void setAuditDepth(int auditDepth) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,74,this.auditDepth = auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,80,public int getMaximumNumberOfProducersToTrack() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,81,return maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,87,public void setMaximumNumberOfProducersToTrack(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,88,int maximumNumberOfProducersToTrack) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,89,this.maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,90,this.map.setMaxCacheSize(maximumNumberOfProducersToTrack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,100,public boolean isDuplicate(Message message) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,101,return isDuplicate(message.getJMSMessageID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,111,public synchronized boolean isDuplicate(String id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,112,boolean answer = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,113,String seed = IdGenerator.getSeedFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,114,if (seed != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,115,BitArrayBin bab = map.get(seed);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,116,if (bab == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,117,bab = new BitArrayBin(auditDepth);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,118,map.put(seed, bab);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,120,long index = IdGenerator.getSequenceFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,121,if (index >= 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,122,answer = bab.setBit(index, true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,125,return answer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,134,public boolean isDuplicate(final MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,135,MessageId id = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,136,return isDuplicate(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,145,public synchronized boolean isDuplicate(final MessageId id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,146,boolean answer = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,148,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,149,ProducerId pid = id.getProducerId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,150,if (pid != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,151,BitArrayBin bab = map.get(pid);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,152,if (bab == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,153,bab = new BitArrayBin(auditDepth);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,154,map.put(pid, bab);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,156,answer = bab.setBit(id.getProducerSequenceId(), true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,159,return answer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,167,public void rollback(final MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,168,MessageId id = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,169,rollback(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,177,public synchronized void rollback(final  MessageId id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,178,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,179,ProducerId pid = id.getProducerId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,180,if (pid != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,181,BitArrayBin bab = map.get(pid);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,182,if (bab != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,183,bab.setBit(id.getProducerSequenceId(), false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,195,public boolean isInOrder(Message msg) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,196,return isInOrder(msg.getJMSMessageID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,204,public synchronized boolean isInOrder(final String id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,205,boolean answer = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,207,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,208,String seed = IdGenerator.getSeedFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,209,if (seed != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,210,BitArrayBin bab = map.get(seed);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,211,if (bab != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,212,long index = IdGenerator.getSequenceFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,213,answer = bab.isInOrder(index);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,218,return answer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,226,public synchronized boolean isInOrder(final MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,227,return isInOrder(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,235,public synchronized boolean isInOrder(final MessageId id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,236,boolean answer = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,238,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,239,ProducerId pid = id.getProducerId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,240,if (pid != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,241,BitArrayBin bab = map.get(pid);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,242,if (bab == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,243,bab = new BitArrayBin(auditDepth);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,244,map.put(pid, bab);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,246,answer = bab.isInOrder(id.getProducerSequenceId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,250,return answer;
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,50,private boolean haAware;
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,182,public boolean isHaAware() {
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,183,return haAware;
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,186,public void setHaAware(boolean haAware) {
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,187,this.haAware = haAware;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,434,broker.send(producerExchange, messageSend);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1172,private ProducerBrokerExchange getProducerBrokerExchange(ProducerId id) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1177,TransportConnectionState state = lookupConnectionState(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,128,+ " WHERE MSGID_PROD=? AND MSGID_SEQ=?";
activemq-core/src/main/java/org/apache/activemq/util/BitArray.java,30,public class BitArray {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,26,public class BitArrayBin {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,267,Listener listener = getListener(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,269,listener.access();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,276,MessageAvailableConsumer consumer = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,279,for (int i = 0; message == null && i < consumers.size(); i++) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,280,consumer = (MessageAvailableConsumer)consumers.get(i);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,281,if (consumer.getAvailableListener() == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,282,continue;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,286,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,287,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,288,LOG.debug("received " + message + " from " + consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,321,writer.print("<response id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,322,writer.print(id);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,323,writer.print("'");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,324,if (destinationName != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,325,writer.print(" destination='" + destinationName + "' ");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,327,writer.print(">");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,328,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,329,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,349,writer.print("<response id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,350,writer.print(id);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,351,writer.print("'");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,352,if (destinationName != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,353,writer.print(" destination='" + destinationName + "' ");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,355,writer.print(">");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,356,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,357,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,375,protected void writeMessageResponse(PrintWriter writer, Message message) throws JMSException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,467,continuation.resume();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,475,continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,295,destinationName = destinationName.substring(8);
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,298,destinationName = destinationName.substring(10);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,26,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,27,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,28,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,29,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,187,return topicReferenceStore.getMessageCount(clientId, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,281,ReferenceRecord msg = messageContainer.get(ref.getMessageEntry());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,34,public class AbstractPendingMessageCursor implements PendingMessageCursor {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,177,public void deleteSubscription(ConnectionContext context, SubscriptionKey key) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,180,Object removed = durableSubcribers.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,71,super.add(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,40,&& (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,130,if (transport == null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,432,if (command.getDataStructureType() == ConsumerInfo.DATA_STRUCTURE_TYPE) {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,36,public class DefaultBlobUploadStrategy implements BlobUploadStrategy {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,37,private BlobTransferPolicy transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,40,this.transferPolicy = transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,48,URL url = createUploadURL(message);
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,77,public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,78,URL url = createUploadURL(message);
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,80,HttpURLConnection connection = (HttpURLConnection)url.openConnection();
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,81,connection.setRequestMethod("DELETE");
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,82,connection.connect();
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,83,connection.disconnect();
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,85,if (!isSuccessfulCode(connection.getResponseCode())) {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,86,throw new IOException("DELETE was not successful: " + connection.getResponseCode() + " "
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,87,+ connection.getResponseMessage());
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,91,private boolean isSuccessfulCode(int responseCode) {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,92,return responseCode >= 200 && responseCode < 300; // 2xx => successful
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,95,protected URL createUploadURL(ActiveMQBlobMessage message) throws JMSException, MalformedURLException {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,96,return new URL(transferPolicy.getUploadUrl() + message.getMessageId().toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.List;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,117,doMessages(request, response, 1);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,125,doMessages(request, response, -1);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,136,protected void doMessages(HttpServletRequest request, HttpServletResponse response, int maxMessages) throws ServletException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,241,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,242,LOG.debug("Received " + messages + " message(s)");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,255,protected void doMessagesWithoutContinuation(HttpServletRequest request, HttpServletResponse response, int maxMessages) throws ServletException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,257,int messages = 0;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,258,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,260,Destination destination = getDestination(client, request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,261,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,262,boolean ajax = isRicoAjax(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,263,if (!ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,264,maxMessages = 1;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,266,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,267,LOG.debug("Receiving message(s) from: " + destination + " with timeout: " + timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,271,Message message = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,274,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,275,PrintWriter writer = response.getWriter();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,277,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,278,writer.println("<ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,282,if (client.getSemaphore().tryAcquire()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,283,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,285,message = consumer.receive(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,288,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,291,response.setStatus(ajax ? HttpServletResponse.SC_OK : HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,295,response.setStatus(HttpServletResponse.SC_OK);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,296,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,297,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,298,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,304,while ((maxMessages < 0 || messages < maxMessages) && message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,306,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,307,writer.print("<response type='object' id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,308,writer.print(request.getParameter("id"));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,309,writer.println("'>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,312,setResponseHeaders(response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,315,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,317,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,318,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,323,messages++;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,327,client.getSemaphore().release();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,331,response.setStatus(ajax ? HttpServletResponse.SC_OK : HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,334,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,335,writer.println("<response type='object' id='poll'><ok/></response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,336,writer.println("</ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,340,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,410,List queue = new LinkedList();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,138,int messages = 0;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,145,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,146,boolean ajax = isRicoAjax(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,147,if (!ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,148,maxMessages = 1;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,158,Message message = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,160,synchronized (consumer) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,168,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,172,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,176,listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,184,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,185,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,189,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,190,PrintWriter writer = response.getWriter();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,192,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,193,writer.println("<ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,197,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,199,response.setStatus(ajax ? HttpServletResponse.SC_OK : HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,202,response.setStatus(HttpServletResponse.SC_OK);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,203,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,204,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,205,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,while ((maxMessages < 0 || messages < maxMessages) && message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,212,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,213,writer.print("<response type='object' id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,214,writer.print(request.getParameter("id"));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,215,writer.println("'>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,218,setResponseHeaders(response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,221,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,223,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,224,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,229,messages++;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,233,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,234,writer.println("<response type='object' id='poll'><ok/></response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,235,writer.println("</ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,239,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,427,continuation.resume();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,429,continuation = null;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,400,if (AdvisorySupport.isConsumerAdvisoryTopic(message.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,61,String localURIName = localURI.getScheme() + "://" + localURI.getHost();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,105,LOG.warn("Could not start network bridge between: " + localURIName + " and: " + uri + " due to: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,78,host = location.getHost();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,163,String host = location.getHost();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,175,String host = server.getBindURI().getHost();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,146,return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(),
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,147,query, uri.getFragment());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,241,List<String> l = new ArrayList<String>();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,250,if (l.size() > 1) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,251,compositeDestinations = new ActiveMQDestination[l.size()];
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,252,int counter = 0;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,253,for (String dest : l) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,254,compositeDestinations[counter++] = createDestination(dest);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,292,+ " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,160,return Math.max(seq1, seq2);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,583,void clearMessagesInProgress() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,124,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,176,SERVERS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,177,TransportConnector connector = CONNECTORS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,178,if (connector != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,179,LOG.debug("Shutting down VM connectors for broker: " + host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,180,ServiceSupport.dispose(connector);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,181,BrokerService broker = BROKERS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,182,if (broker != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,183,ServiceSupport.dispose(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,335,if (dest.isTopic()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,340,LOG.debug("Restoring durable subscription: " + info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,342,subscriptions.put(key, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,159,LOG.debug("Restoring durable subscription: " + infos);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,870,sub.getLocalInfo().setAdditionalPredicate(createNetworkBridgeFilter(info));
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,57,ActiveMQDestination[] dests = durableDestinations;
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,100,String subscriberName = configuration.getBrokerName() + "_" + dest.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,58,if (configuration.isDynamicOnly()) {
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,59,result = new ConduitBridge(configuration, localTransport, remoteTransport);
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,61,result = new DurableConduitBridge(configuration, localTransport, remoteTransport);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompFrame.java,166,buffer.append(new String(getContent()));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,41,private String removeMessageStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,118,public String getRemoveMessageStatment() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,119,if (removeMessageStatment == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,120,removeMessageStatment = "DELETE FROM " + getFullMessageTableName() + " WHERE ID=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,122,return removeMessageStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,563,public void setRemoveMessageStatment(String removeMessageStatment) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,564,this.removeMessageStatment = removeMessageStatment;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,377,throw new IllegalStateException("Cannot prepare a transaction that had not been started: "
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,59,private class RemoveTransactionAction implements Runnable {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,66,public void run() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,373,return TRACKED_RESPONSE_MARKER;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,23,private Runnable runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,25,public Tracked(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,26,this.runnable = runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,29,public void onResponses() {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,30,if (runnable != null) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,31,runnable.run();
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,32,runnable = null;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,37,return runnable != null;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,80,storeContent();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,82,copy.object = null;
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,201,ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,107,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,48,private int maxChannelsPerWorker = 64;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,85,freeWorkers.add(worker);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,71,int count = selector.select(10);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,957,LOG.error(getConsumerId() + " Exception while processing message: " + e, e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1017,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1018,ActiveMQMessage message = createActiveMQMessage(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1019,beforeMessageIsConsumed(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1020,listener.onMessage(message);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1021,afterMessageIsConsumed(md, false);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,64,SelectorWorker worker = null;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,65,if (freeWorkers.size() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,66,worker = freeWorkers.getFirst();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,68,worker = new SelectorWorker(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,69,freeWorkers.addFirst(worker);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,72,SelectorSelection selection = new SelectorSelection(worker, socketChannel, listener);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,31,private final SelectionKey key;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,35,public SelectorSelection(SelectorWorker worker, SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,47,key.interestOps(interest);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,48,worker.selector.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,56,worker.decrementUseCounter();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,33,final AtomicInteger useCounter = new AtomicInteger();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,42,void incrementUseCounter() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,43,int use = useCounter.getAndIncrement();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,44,if (use == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,45,manager.getSelectorExecutor().execute(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,51,void decrementUseCounter() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,52,int use = useCounter.getAndDecrement();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,53,if (use == 1) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,60,boolean isRunning() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,61,return useCounter.get() != 0;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,69,while (isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,76,if (!isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,77,return;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,90,s.disable();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,116,manager.onWorkerEmptyEvent(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,143,return list;
activemq-web/src/main/java/org/apache/activemq/web/SessionFilter.java,42,((HttpServletRequest)request).getSession(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,31,private LinkedList<MessageReference> list = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,44,if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,45,continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,97,last = (MessageReference)iter.next();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,201,name = "set" + name.substring(0, 1).toUpperCase() + name.substring(1);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,70,host = data.getPath();
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,85,private final Journal journal;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,86,private final PersistenceAdapter longTermPersistence;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,116,checkpointTask = taskRunnerFactory.createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,117,public boolean iterate() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,118,return doCheckpoint();
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,20,import org.springframework.beans.factory.DisposableBean;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,21,import org.springframework.beans.factory.InitializingBean;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,54,public boolean isStart() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,55,return start;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,513,md = dequeue(-1); // We let the broker let us know when we
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,166,for (int i = 0; i < size; i++) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,260,if (localTransactionEventListener != null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,261,localTransactionEventListener.commitEvent();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,263,afterCommit();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,511,public ActiveMQDestination createTempQueue(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,521,public ActiveMQDestination createTempTopic(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,532,public String getCreatedTempDestinationName(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,533,return tempDestinationAmqToStompMap.get(destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,236,listener.recoverMessage(msg);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,237,lastMessageId.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,336,+ " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,53,private Map<String, BlockingQueueTransport> clients = new HashMap<String, BlockingQueueTransport>();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,54,private long requestTimeout = 30000L;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,99,protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,102,Command command = (Command)wireFormat.unmarshalText(request.getReader());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,105,WireFormatInfo info = (WireFormatInfo)command;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,107,response.sendError(HttpServletResponse.SC_NOT_FOUND, "Cannot process wire format of version: " + info.getVersion());
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,44,out.writeUTF(marshalText(command));
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,48,String text = in.readUTF();
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,99,treeBindings = new HashMap<String, Object>();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,154,String ssp = stripPrefix(uri.getSchemeSpecificPart().trim(), "//").trim();
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,98,this.bindings = bindings;
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,376,private Iterator i = bindings.entrySet().iterator();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,178,private AtomicInteger protocolVersion = new AtomicInteger(CommandTypes.PROTOCOL_VERSION);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,179,private long timeCreated;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,180,private ConnectionAudit connectionAudit = new ConnectionAudit();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1744,DestinationInfo info = new DestinationInfo();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1745,info.setConnectionId(this.info.getConnectionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1746,info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1747,info.setDestination(destination);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1748,info.setTimeout(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1749,syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,144,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerBroadcaster.java,161,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerBroadcaster.java,162,Destination result = next.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerBroadcaster.java,165,brokers[i].addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,140,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,141,return next.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1619,getBroker().addDestination(adminConnectionContext, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1763,broker.addDestination(adminConnectionContext, destination);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,135,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,138,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,150,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,151,return getNext().addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,190,broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name));
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,194,broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name));
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,69,public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,70,DestinationFactory destinationFactory) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,93,context.getBroker().addDestination(context, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,111,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,116,dest = createDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,118,DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,119,if (destinationInterceptor != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,120,dest = destinationInterceptor.intercept(dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,122,dest.start();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,123,destinations.put(destination, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,124,destinationMap.put(destination, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,125,addSubscriptionsForDestination(context, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,131,protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,146,public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,214,lookup(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,228,LOG.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,324,final Destination regionDestination = lookup(context, messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,351,protected Destination lookup(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,398,protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Region.java,53,Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,245,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,256,answer = queueRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,259,answer = topicRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,262,answer = tempQueueRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,265,answer = tempTopicRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,300,addDestination(context, info.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,67,lookup(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/view/DestinationDotFileInterceptor.java,41,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/view/DestinationDotFileInterceptor.java,42,Destination answer = super.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,49,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,50,final SecurityContext securityContext = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,71,return super.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,76,final SecurityContext securityContext = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,95,final SecurityContext subject = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,137,SecurityContext subject = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,159,SecurityContext subject = (SecurityContext)producerExchange.getConnectionContext().getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,967,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,455,return (acknowledgementMode == Session.SESSION_TRANSACTED) || (transactionContext.isInXATransaction());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1672,return this.acknowledgementMode == Session.SESSION_TRANSACTED;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,252,beforeEnd();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,145,size = text.length() * 2;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,445,if (!started.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,41,private MessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,55,this.store = (MessageStore)queue.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,48,private TopicMessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,50,private String clientId;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,51,private String subscriberName;
activemq-core/src/main/java/org/apache/activemq/store/MessageStore.java,28,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,28,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,99,private final MessageDispatchChannel unconsumedMessages = new MessageDispatchChannel();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,21,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,33,import javax.jms.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,34,import javax.jms.IllegalStateException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,35,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,36,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,37,import java.io.InputStream;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,38,import java.io.Serializable;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,39,import java.net.URL;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,40,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,41,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,42,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,43,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,44,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,553,executor.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,554,for (Iterator<ActiveMQMessageConsumer> iter = consumers.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,555,ActiveMQMessageConsumer consumer = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,556,consumer.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,669,unconsumedMessages.close();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,670,this.session.removeConsumer(this);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,361,LOG.trace("Waiting for transport to reconnect.");
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,926,if (clearDispatchList) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,929,clearDispatchList = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,930,List<MessageDispatch> list = unconsumedMessages.removeAll();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,931,if (!this.info.isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,932,for (MessageDispatch old : list) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,934,session.connection.rollbackDuplicate(this, old.getMessage());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,432,LOG.debug(s, e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,638,LOG.debug("Setting up new connection: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,30,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,108,for (Iterator iter = connectionState.getTransactionStates().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,109,TransactionState transactionState = (TransactionState)iter.next();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,110,for (Iterator iterator = transactionState.getCommands().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,111,Command command = (Command)iterator.next();
activemq-core/src/main/java/org/apache/activemq/state/SessionState.java,53,return producers.remove(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,48,public JDBCMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,119,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,127,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,43,public JDBCTopicMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQTopic topic) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,44,super(persistenceAdapter, adapter, wireFormat, topic);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,88,server.start();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,108,server.stop();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,28,import org.apache.activemq.store.MessageRecoveryListener;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,29,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,30,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,63,throw IOExceptionSupport.create("Failed to broker message: " + message.getMessageId() + " in container: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,69,adapter.doAddMessage(c, message.getMessageId(), destination, data, message.getExpiration());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,72,throw IOExceptionSupport.create("Failed to broker message: " + message.getMessageId() + " in container: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/AMQTxMarshaller.java,58,dataOut.writeInt(list.size());
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedInputStream.java,46,private void fill() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,447,TcpBufferedInputStream buffIn = new TcpBufferedInputStream(socket.getInputStream(), ioBufferSize);
activemq-core/src/main/java/org/apache/activemq/transport/udp/CommandDatagramSocket.java,73,DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(datagram.getData()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,756,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,55,private MessageReference last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,33,private MessageReference last;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,97,matched.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,114,private TaskRunnerFactory sessionTaskRunner = new TaskRunnerFactory("ActiveMQ Session Task", ThreadPriorities.INBOUND_CLIENT_SESSION, false, 1000);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,595,sessionTaskRunner.shutdown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,140,messageQueue.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,141,if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,142,taskRunner.shutdown();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,88,true, 1000);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapterFactory.java,116,true, 1000);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,48,private static final TaskRunnerFactory TASK_RUNNER_FACTORY = new TaskRunnerFactory("VMTransport", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,101,protected final BrokerId localBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,137,Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,148,Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,380,MessageDispatch md = (MessageDispatch)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,389,remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,394,ConnectionError ce = (ConnectionError)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,399,ActiveMQMessage message = (ActiveMQMessage)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,413,localStartedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,448,ConsumerInfo info = (ConsumerInfo)data;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,483,DestinationInfo destInfo = (DestinationInfo)data;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,502,ActiveMQTempDestination tempDest = (ActiveMQTempDestination)destInfo.getDestination();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,509,ConsumerId id = (ConsumerId)((RemoveInfo)data).getObjectId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,593,ExceptionResponse er = (ExceptionResponse)response;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,614,localBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,627,ConnectionError ce = (ConnectionError)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,753,return new BrokerId[] {idToAppend};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,833,ActiveMQTempDestination dest = (ActiveMQTempDestination)result.getLocalInfo().getDestination();
activemq-core/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,63,Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,68,requestMap.put(new Integer(command.getCommandId()), future);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,154,if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,40,final ManagedRegionBroker broker;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,94,rc.setLength(preferedSize);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,private void pageInMessages() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1068,pageInMessages(true);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,343,answer = new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,351,return new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,65,connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,86,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,30,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,90,SSLSocket sslSocket = (SSLSocket)this.socket;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,92,SSLSession sslSession = sslSocket.getSession();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,94,X509Certificate[] clientCertChain;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,95,try {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,96,clientCertChain = (X509Certificate[])sslSession.getPeerCertificates();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,98,clientCertChain = null;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,101,connectionInfo.setTransportContext(clientCertChain);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,104,super.doConsume(command);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,47,private ConcurrentHashMap<URI, NetworkBridge> bridges = new ConcurrentHashMap<URI, NetworkBridge>();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,334,sub = subscriptions.get(ack.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,533,protected void removeSubscription(DemandSubscription sub) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,565,DemandSubscription sub = subscriptionMapByLocalId.get(md.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,74,public int getDispatched() {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,75,return dispatched.get();
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,81,public void setDispatched(int dispatched) {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,82,this.dispatched.set(dispatched);
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,88,public int incrementDispatched() {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,89,return dispatched.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,38,public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,107,c.getConnection().commit();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,57,String sql = statements.getLockCreateStatement();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,70,LOG.warn("Caught while closing statement: " + e1, e1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/MySqlJDBCAdapter.java,28,statements.setLockCreateStatement("LOCK TABLE " + statements.getFullLockTableName() + " WRITE");
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,714,if (!session.isDupsOkAcknowledge()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,20,import java.util.Iterator;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,51,private ArrayList<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,76,for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,77,ManagedSessionProxy p = iter.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,78,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,79,p.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,82,iter.remove();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,113,ActiveMQSession session = (ActiveMQSession)getConnection().createSession(transacted, acknowledgeMode);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,116,ManagedSessionProxy p = new ManagedSessionProxy(session);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,118,sessions.add(p);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,125,p.setUseSharedTxContext(enable);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,59,public ManagedSessionProxy(ActiveMQSession session) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,259,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,378,IntegerResponse response = (IntegerResponse)this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,412,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,452,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,490,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,582,this.connection.syncSendPacket(info);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Queue regionQueue = (Queue)i.next();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,regionQueue.purge();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,21,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,23,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,24,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,27,import javax.jms.InvalidSelectorException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,28,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1349,asyncSendPacket(info.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,68,private final ConcurrentHashMap<TransactionId, List<TransactionContext>> ENDED_XA_TRANSACTION_CONTEXTS = new ConcurrentHashMap<TransactionId, List<TransactionContext>>();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,226,this.connection.asyncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,73,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,93,protected boolean disposed;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,254,localClientId = "NC_" + remoteBrokerName + "_inbound" + configuration.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,314,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,323,LOG.debug(" stopping " + configuration.getBrokerName() + " bridge to " + remoteBrokerName + " is disposed already ? " + disposed);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,324,boolean wasDisposedAlready = disposed;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,325,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,331,disposed = true;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,339,ss.stop(localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,349,if (wasDisposedAlready) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,350,LOG.debug(configuration.getBrokerName() + " bridge to " + remoteBrokerName + " stopped");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,352,LOG.info(configuration.getBrokerName() + " bridge to " + remoteBrokerName + " stopped");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,358,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,376,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,515,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,558,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,99,bridges.put(uri, bridge);
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,65,DestinationFilter filter = DestinationFilter.parseFilter(info.getDestination());
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,68,if (filter.matches(ds.getLocalInfo().getDestination())) {
activemq-core/src/main/java/org/apache/activemq/filter/DestinationFilter.java,63,return new PrefixDestinationFilter(paths);
activemq-core/src/main/java/org/apache/activemq/filter/DestinationFilter.java,68,return new WildcardDestinationFilter(paths);
activemq-core/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,37,public PrefixDestinationFilter(String[] prefixes) {
activemq-core/src/main/java/org/apache/activemq/filter/WildcardDestinationFilter.java,37,public WildcardDestinationFilter(String[] prefixes) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,68,public int getDispatchQueueSize() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,69,return connection.getDispatchQueueSize();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,84,public long getEnqueueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,85,return connection.getStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,94,public long getDequeueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,95,return connection.getStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionViewMBean.java,45,int getDispatchQueueSize();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionViewMBean.java,57,long getEnqueueCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionViewMBean.java,64,long getDequeueCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,85,public long getEnqueueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,86,return connector.getStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,95,public long getDequeueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,96,return connector.getStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorViewMBean.java,50,long getEnqueueCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorViewMBean.java,57,long getDequeueCount();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,146,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,147,oneway(DISCONNECT);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,167,inTx = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,195,inTx = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,30,public DB2JDBCAdapter() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,31,batchStatments = false;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,384,rmiServer = "localhost:" + rmiServerPort;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,386,String serviceURL = "service:jmx:rmi://" + rmiServer + "/jndi/rmi://localhost:" + connectorPort + connectorPath;
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,75,fireAdvisory(context, topic, info);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,76,connections.put(info.getConnectionId(), info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,201,return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,203,running = false;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,204,serverSessionPool.close();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,150,rc = new KahaReferenceStore(this, getMapReferenceContainer(destination, "queue-data"),
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,654,if(!message.isPersistent()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,670,BrokerSupport.resend(context,message,
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,71,ds.add(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,629,return messageReference.isExpired();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,645,if(message!=null&&node.getRegionDestination()!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,650,long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,651,message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,653,expiration));
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,598,public boolean isExpired() {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,599,long expireTime = this.getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,600,if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,601,return true;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,603,return false;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,435,long expireTime = getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/Message.java,436,if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/Message.java,437,return true;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,439,return false;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,848,return (Service[]) services.toArray();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,233,da.registerService(getConnectUri().toString());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransport.java,74,next.add(new URI[] {uri});
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,652,message.setProperty("originalExpiration",new Long(
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,662,public Message[] browse() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,689,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,709,return l.toArray(new Message[l.size()]);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,65,if (deadLetterStrategy != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,66,queue.setDeadLetterStrategy(deadLetterStrategy);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,86,if (deadLetterStrategy != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,87,topic.setDeadLetterStrategy(deadLetterStrategy);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,99,return transport;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,132,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,194,synchronized (consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,195,consumers.add(subscription);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,479,referenceStoreAdapter.recoverState();
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,41,import sun.net.www.protocol.http.HttpURLConnection;
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,101,super.stop();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,33,protected String sequenceDataType = "INTEGER";
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,38,this.key = socketChannel.register(worker.selector, 0, this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,39,worker.incrementUseCounter();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,57,key.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,58,worker.selector.wakeup();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,87,if (allowedACLs != null && !securityContext.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,106,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,141,if (info.getDestination() != null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,163,if (!subject.getAuthorizedWriteDests().contains(messageSend.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,767,DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,772,if (match != null && filter.matches(match)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,781,if (match != null && filter.matches(match)) {
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,57,UdpTransport transport = new UdpTransport(openWireFormat, port);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,798,additionalWindowSize = deliveredCounter;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,801,if (ackType == MessageAck.STANDARD_ACK_TYPE) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,802,deliveredCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,803,additionalWindowSize = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,437,dequeueCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,727,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,52,key.interestOps(0);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,80,private CallbackHandler handler;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,81,private String initialContextFactory;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,82,private String connectionURL;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,83,private String connectionUsername;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,84,private String connectionPassword;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,85,private String connectionProtocol;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,86,private String authentication;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,87,private String userBase;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,88,private String roleBase;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,89,private String roleName;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,90,private String userRoleName;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,92,private MessageFormat userSearchMatchingFormat;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,93,private MessageFormat roleSearchMatchingFormat;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,94,private boolean userSearchSubtreeBool;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,95,private boolean roleSearchSubtreeBool;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,101,initialContextFactory = (String)options.get(INITIAL_CONTEXT_FACTORY);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,102,connectionURL = (String)options.get(CONNECTION_URL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,103,connectionUsername = (String)options.get(CONNECTION_USERNAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,104,connectionPassword = (String)options.get(CONNECTION_PASSWORD);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,105,connectionProtocol = (String)options.get(CONNECTION_PROTOCOL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,106,authentication = (String)options.get(AUTHENTICATION);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,107,userBase = (String)options.get(USER_BASE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,108,String userSearchMatching = (String)options.get(USER_SEARCH_MATCHING);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,109,String userSearchSubtree = (String)options.get(USER_SEARCH_SUBTREE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,110,roleBase = (String)options.get(ROLE_BASE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,111,roleName = (String)options.get(ROLE_NAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,112,String roleSearchMatching = (String)options.get(ROLE_SEARCH_MATCHING);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,113,String roleSearchSubtree = (String)options.get(ROLE_SEARCH_SUBTREE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,114,userRoleName = (String)options.get(USER_ROLE_NAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,115,userSearchMatchingFormat = new MessageFormat(userSearchMatching);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,116,roleSearchMatchingFormat = new MessageFormat(roleSearchMatching);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,117,userSearchSubtreeBool = Boolean.valueOf(userSearchSubtree).booleanValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,118,roleSearchSubtreeBool = Boolean.valueOf(roleSearchSubtree).booleanValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,134,String password = new String(((PasswordCallback)callbacks[1]).getPassword());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,136,if (username == null || "".equals(username) || password == null || "".equals(password)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,137,return false;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,199,if (userRoleName != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,200,list.add(userRoleName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,206,NamingEnumeration results = context.search(userBase, filter, constraints);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,219,Name baseName = parser.parse(userBase);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,230,if (userRoleName != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,231,roles = addAttributeValues(userRoleName, attrs, roles);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,261,if (roleName == null || "".equals(roleName)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,274,NamingEnumeration results = context.search(roleBase, filter, constraints);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,281,list = addAttributeValues(roleName, attrs, list);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,328,if (connectionUsername != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,329,context.addToEnvironment(Context.SECURITY_PRINCIPAL, connectionUsername);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,334,if (connectionPassword != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,335,context.addToEnvironment(Context.SECURITY_CREDENTIALS, connectionPassword);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,364,if (context != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,365,return context;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,370,env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,371,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,372,env.put(Context.SECURITY_PRINCIPAL, connectionUsername);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,374,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,375,env.put(Context.SECURITY_CREDENTIALS, connectionPassword);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,377,env.put(Context.SECURITY_PROTOCOL, connectionProtocol);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,378,env.put(Context.PROVIDER_URL, connectionURL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,379,env.put(Context.SECURITY_AUTHENTICATION, authentication);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,24,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,25,import java.net.URISyntaxException;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,175,private static Object convert(Object value, Class type) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,181,if (type == URI.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,182,return new URI(value.toString());
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,187,private static String convertToString(Object value, Class type) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,193,if (type == URI.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,194,return ((URI)value).toString();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,217,if (clazz == URI.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,218,return true;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,220,if (clazz == Boolean.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,221,return true;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,540,protected DemandSubscription getDemandSubscription(MessageDispatch md) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,541,return subscriptionMapByLocalId.get(md.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,564,final MessageDispatch md = (MessageDispatch)command;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1693,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1694,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1695,s.deliverAcks();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,423,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,424,LOG.debug(getConsumerId() + " received message: " + md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,968,LOG.debug(getConsumerId() + " Ignoring Duplicate: " + md.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1623,if (this.debug) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1624,LOG.debug(getSessionId() + " sending message: " + msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,175,pending.addRecoveredMessage(message);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,330,public Response processMessageAck(MessageAck ack) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,331,if (trackTransactions && ack != null && ack.getTransactionId() != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,332,ConnectionId connectionId = ack.getConsumerId().getParentId().getParentId();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,333,if (connectionId != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,334,ConnectionState cs = connectionStates.get(connectionId);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,335,if (cs != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,336,TransactionState transactionState = cs.getTransactionState(ack.getTransactionId());
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,337,if (transactionState != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,338,transactionState.addCommand(ack);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,342,return TRACKED_RESPONSE_MARKER;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,344,return null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1325,if (advisoryConsumer != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,409,return null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,253,return false;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,130,public void addReferenceFileIdsInUse() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,131,for (StoreEntry entry = messageContainer.getFirst(); entry != null; entry = messageContainer
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,132,.getNext(entry)) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,133,ReferenceRecord msg = (ReferenceRecord)messageContainer.getValue(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,134,addInterest(msg);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,246,LOG.debug("Memory usage change.  from: " + oldPercentUsage + ", to: " + newPercentUsage);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,254,public Response processRemoveConsumer(ConsumerId id) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,286,public Response processRemoveSession(SessionId id) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,306,public Response processRemoveConnection(ConnectionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,970,ackLater(md, MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,251,protected synchronized boolean  isDuplicate(MessageId messageId) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/ReferenceStore.java,70,void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,341,referenceStore.addMessageReference(context, entry.getKey(), entry.getValue());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,346,size++;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,421,LOG.debug("Send oneway attempt: " + i + " failed.");
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,271,getExecutor().execute(listenerNotifier);
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,66,public void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException {
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,68,NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,69,return iterator.nextNode() != null;
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,89,NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,90,return iterator.nextNode() != null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,75,public class Queue extends BaseDestination implements Task {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,30,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,179,throw new IOException(ce.getMessage());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,181,dataIn.close();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,78,return ((ObjectMessage) message).getObject();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,39,import org.apache.activemq.broker.region.group.MessageGroupSet;
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,197,sendAsyncToSlave(info);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,198,Subscription answer = super.addConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,199,return answer;
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,295,sendAsyncToSlave(mdn);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,247,localAndXATransaction.cleanup();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,93,if (connection != null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,94,connection.rollback();
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,88,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(), consumerIdGenerator
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,89,.getNextSequenceId()));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,457,stopper.stop(persistenceAdapter);
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAPersistenceAdapter.java,197,if (entityManagerFactory != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,597,if (this.optimizeAcknowledge) {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,40,localInfo.setBrokerPath(info.getBrokerPath());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,117,MarshallingSupport.writeUTF8(dataOut, text);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,656,for (MessageDispatch old : deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,657,session.connection.rollbackDuplicate(this, old.getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,535,public Response processRemoveConsumer(ConsumerId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,570,public Response processRemoveSession(SessionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,584,processRemoveConsumer(consumerId);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,178,dest.removeSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,39,void removeSubscription(ConnectionContext context, Subscription sub) throws Exception;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,91,public void removeSubscription(ConnectionContext context, Subscription sub) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,92,next.removeSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,167,public void removeSubscription(ConnectionContext context, Subscription sub) throws Exception {
activemq-core/src/main/java/org/apache/activemq/command/RemoveInfo.java,60,return visitor.processRemoveConnection((ConnectionId)objectId);
activemq-core/src/main/java/org/apache/activemq/command/RemoveInfo.java,62,return visitor.processRemoveSession((SessionId)objectId);
activemq-core/src/main/java/org/apache/activemq/command/RemoveInfo.java,64,return visitor.processRemoveConsumer((ConsumerId)objectId);
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitor.java,57,Response processRemoveConnection(ConnectionId id) throws Exception;
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitor.java,59,Response processRemoveSession(SessionId id) throws Exception;
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitor.java,63,Response processRemoveConsumer(ConsumerId id) throws Exception;
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitorAdapter.java,130,public Response processRemoveConnection(ConnectionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitorAdapter.java,134,public Response processRemoveConsumer(ConsumerId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitorAdapter.java,146,public Response processRemoveSession(SessionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,240,MessageAck ack = sub.onStompMessageAck(messageId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,48,private final LinkedHashMap<String, MessageId> dispatchedMessage = new LinkedHashMap<String, MessageId>();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,65,dispatchedMessage.put(message.getJMSMessageID(), message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,82,synchronized MessageAck onStompMessageAck(String messageId) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,84,if (!dispatchedMessage.containsKey(messageId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,763,if (destination.isTemporary() && !configuration.isBridgeTempDestinations()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,764,return false;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,123,for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,124,ManagedSessionProxy p = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,206,LOG.debug("Connection established");
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,208,fanoutHandler.reconnectDelay = 10;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,209,fanoutHandler.connectFailures = 0;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,210,if (primary == null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,211,primary = fanoutHandler;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,278,if (destinations.remove(destination) != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,117,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,58,private ThreadPoolExecutor executor;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,284,public synchronized void start() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,296,public synchronized void stop() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,403,protected synchronized Executor getExecutor() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,405,this.executor = new ThreadPoolExecutor(1, 1, 0,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,406,TimeUnit.NANOSECONDS,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,407,new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,408,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,410,+ " Usage Thread Pool");
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,411,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,412,return thread;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,547,dispose();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,548,connection.asyncSendPacket(info.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,197,public Set getDestinations(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/data/DataFile.java,31,private File file;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/data/DataFile.java,32,private Integer number;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/data/DataManagerImpl.java,68,dataFilePrefix = NAME_PREFIX + name + "-";
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,71,private Map<ContainerId, ListContainerImpl> lists = new ConcurrentHashMap<ContainerId, ListContainerImpl>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,72,private Map<ContainerId, MapContainerImpl> maps = new ConcurrentHashMap<ContainerId, MapContainerImpl>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,73,private Map<String, DataManager> dataManagers = new ConcurrentHashMap<String, DataManager>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,74,private Map<String, IndexManager> indexManagers = new ConcurrentHashMap<String, IndexManager>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,75,private IndexManager rootIndexManager; // contains all the root indexes
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,637,this.filePrefix = filePrefix;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/container/MapContainerImpl.java,71,name=IOHelper.toFileSystemSafeName(name);
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,60,return false;
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,52,public void setDataContainerName(String dataContainerName) {
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,53,this.dataContainerName = dataContainerName;
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,66,public void setKey(Object key) {
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,67,this.key = key;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,198,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,199,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,200,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,215,String containerName = IOHelper.toFileSystemSafeName(originalContainerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,216,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,217,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,218,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,221,DataManager dm = getDataManager(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,222,IndexManager im = getIndexManager(dm, containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,268,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,269,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,270,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,282,public synchronized ListContainer getListContainer(Object id, String originalContainerName,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,285,String containerName = IOHelper.toFileSystemSafeName(originalContainerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,286,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,287,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,288,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,291,DataManager dm = getDataManager(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,292,IndexManager im = getIndexManager(dm, containerName);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1915,public void unsubscribe(String name) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/command/ConnectionInfo.java,51,public void copy(ConnectionInfo copy) {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,40,public class JPAMessageStore implements MessageStore {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,44,protected final ActiveMQDestination destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,50,this.destination = destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,79,public ActiveMQDestination getDestination() {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,80,return destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,194,public void setMemoryUsage(MemoryUsage memoeyUSage){
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,197,public void start() throws Exception {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,200,public void stop() throws Exception {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,39,public class JPAReferenceStore implements ReferenceStore {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,43,protected final ActiveMQDestination destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,49,this.destination = destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,54,public ActiveMQDestination getDestination() {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,55,return destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,202,public void setMemoryUsage(MemoryUsage memoeyUSage){
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,205,public void start() throws Exception {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,208,public void stop() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,26,private int maxProducersToAudit=1024;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,28,private boolean enableAudit=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,492,public void dispose(ConnectionContext context) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,493,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,494,store.removeAllMessages(context);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,450,public void dispose(ConnectionContext context) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,42,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,61,public class AMQMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,68,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,87,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,177,LOG.warn("Could not replay add for message '" + id + "'.  Message may have already been added. reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,193,removeMessage(ack,location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,206,LOG.debug("Transacted message remove commit for: " + ack.getLastMessageId() + ", at: " + location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,216,LOG.debug("Transacted message remove rollback for: " + ack.getLastMessageId() + ", at: " + location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,254,LOG.warn("Could not replay acknowledge for message '" + messageAck.getLastMessageId() + "'.  Message may have already been acknowledged. reason: " + e);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,328,LOG.debug("Doing batch update... adding: " + cpAddedMessageIds.size() + " removing: " + cpRemovedMessageLocations.size() + " ");
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,342,AMQMessageStore.this.peristenceAdapter.removeInProgressDataFile(AMQMessageStore.this,entry.getValue().getFileId());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,389,throw new IOException("Could not read message " + identity
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,390,+ " at location " + location
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,456,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,457,return destination;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,460,public void addMessageReference(ConnectionContext context, MessageId messageId, long expirationTime, String messageRef) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,510,return (Message)rc;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,512,throw new IOException("Could not read message  at location " + location + ", expected a message, but got: " + rc);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,31,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,40,public class JDBCMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,43,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,52,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,172,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,175,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,194,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,195,return destination;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,198,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,52,public class JournalMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,59,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,77,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,384,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,385,return destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,38,public class KahaMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,40,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,47,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,104,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,107,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,114,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,115,return destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,122,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,33,public class KahaReferenceStore implements ReferenceStore {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,35,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,45,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,48,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,51,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,161,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,162,return destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,178,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,42,private Map<String, SubscriptionInfo> subscriberContainer;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,42,public class MemoryMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,44,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,53,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,107,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,110,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,119,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,120,return destination;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,164,public void setMemoryUsage(MemoryUsage memoeyUSage){
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,101,enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,78,rs = c.getConnection().getMetaData().getTables(null, null,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,79,statements.getFullMessageTableName(),
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,80,new String[] {"TABLE"});
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,87,String[] createStatments = statements.getCreateSchemaStatements();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,LOG.debug("Could not create JDBC tables; The message table already existed."
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,98,+ " SQLState: " + e.getSQLState() + " Vendor code: " + e.getErrorCode());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,101,+ createStatments[i] + " Message: " + e.getMessage() + " SQLState: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,102,+ e.getSQLState() + " Vendor code: " + e.getErrorCode());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,120,String[] dropStatments = statements.getDropSchemaStatements();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,127,LOG.warn("Could not drop JDBC tables; they may not exist." + " Failure was: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,128,+ dropStatments[i] + " Message: " + e.getMessage() + " SQLState: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,129,+ e.getSQLState() + " Vendor code: " + e.getErrorCode());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,146,s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInMsgsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,154,s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInAcksStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,167,public void doAddMessage(TransactionContext c, MessageId messageID, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,168,byte[] data, long expiration) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,172,s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,173,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,183,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,189,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,195,public void doAddMessageReference(TransactionContext c, MessageId messageID,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,197,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,201,s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,202,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,212,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,218,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,224,public long getBrokerSequenceId(TransactionContext c, MessageId messageID) throws SQLException,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,225,IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,229,s = c.getConnection().prepareStatement(statements.getFindMessageSequenceIdStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,247,s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,264,s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,281,s = c.getConnection().prepareStatement(statements.getRemoveMessageStatment());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,282,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,287,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,293,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,299,public void doRecover(TransactionContext c, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,300,JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,304,s = c.getConnection().prepareStatement(statements.getFindAllMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,307,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,327,String subscriptionName, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,331,s = c.getConnection().prepareStatement(statements.getUpdateLastAckOfDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,332,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,340,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,346,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,354,throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,360,s = c.getConnection().prepareStatement(statements.getFindAllDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,365,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,385,String subscriptionName, long seq, int maxReturned,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,386,JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,390,s = c.getConnection().prepareStatement(statements.getFindDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,398,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,423,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,428,s = c.getConnection().prepareStatement(statements.getDurableSubscriberMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,448,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,455,s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInMsgsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,467,s = c.getConnection().prepareStatement(statements.getCreateDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,484,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,488,s = c.getConnection().prepareStatement(statements.getFindDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,501,subscription.setSubscribedDestination(ActiveMQDestination
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,502,.createDestination(rs.getString(2), ActiveMQDestination.QUEUE_TYPE));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,511,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,515,s = c.getConnection().prepareStatement(statements.getFindAllDurableSubsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,525,subscription.setSubscribedDestination(ActiveMQDestination
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,526,.createDestination(rs.getString(4), ActiveMQDestination.QUEUE_TYPE));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,537,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,540,s = c.getConnection().prepareStatement(statements.getRemoveAllMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,544,s = c.getConnection().prepareStatement(statements.getRemoveAllSubscriptionsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,553,String subscriptionName) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,556,s = c.getConnection().prepareStatement(statements.getDeleteSubscriptionStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,569,LOG.debug("Executing SQL: " + statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,570,s = c.getConnection().prepareStatement(statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,579,public long doGetLastAckedDurableSubscriberMessageId(TransactionContext c,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,580,ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,581,String subscriberName) throws SQLException,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,582,IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,588,.prepareStatement(statements.getLastAckedDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,624,s = c.getConnection().prepareStatement(statements.getFindAllDestinationsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,637,return batchStatments;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,645,statements.setUseExternalMessageReferences(useExternalMessageReferences);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,649,return statements;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,656,public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,657,ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,659,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,663,s = c.getConnection().prepareStatement(statements.getNextDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,679,IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,684,s = c.getConnection().prepareStatement(statements.getDestinationMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,698,int maxReturned, JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,702,s = c.getConnection().prepareStatement(statements.getFindNextMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,703,s.setMaxRows(maxReturned);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,705,s.setLong(2, nextSeq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,708,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,116,final synchronized void pullTimeout(long dispatchCounterBeforePull) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,118,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,119,add(QueueMessageReference.NULL_MESSAGE);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,122,context.getConnection().serviceException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,655,message.setPersistent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,656,message.setProperty("originalDeliveryMode",
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,598,return journal.write(toPacket(wireFormat.marshal(command)), sync);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,578,dispose();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,579,this.session.asyncSendPacket(info.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,641,deliverAcks();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,650,if (session.isTransacted() || session.isDupsOkAcknowledge()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,651,acknowledge();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,891,for (Iterator iter = deliveredMessages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,892,MessageDispatch md = (MessageDispatch)iter.next();
activemq-core/src/main/java/org/apache/activemq/command/CommandTypes.java,27,byte PROTOCOL_VERSION = 3;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,75,public abstract class DemandForwardingBridgeSupport implements NetworkBridge {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,456,if (contains(info.getBrokerPath(), localBrokerPath[0])) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,471,if (addConsumerInfo(info)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,472,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,476,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,149,return new CompositeDemandForwardingBridge(this, local, remote);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,46,private TaskRunner taskRunner;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,118,for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,119,ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,143,taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,165,return (MessageDispatch)messageQueue.dequeueNoWait();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,179,for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,180,ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1602,msg.setJMSDestination(destination);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1603,msg.setJMSDeliveryMode(deliveryMode);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1604,long expiration = 0L;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1605,if (!producer.getDisableMessageTimestamp()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1606,long timeStamp = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1607,msg.setJMSTimestamp(timeStamp);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1608,if (timeToLive > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1609,expiration = timeToLive + timeStamp;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1612,msg.setJMSExpiration(expiration);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1613,msg.setJMSPriority(priority);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1614,msg.setJMSRedelivered(false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,91,if (taskRunner == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,92,taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this, "ActiveMQ Session: " + session.getSessionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,99,while (iterate()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,21,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,25,import org.apache.activemq.broker.region.MessageReference;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,49,private final LinkedHashMap<MessageId,Message> batchList = new LinkedHashMap<MessageId,Message> ();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,353,Destination dest = destinations.get(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,354,if (dest == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,355,if (autoCreateDestinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,359,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,361,context.getBroker().addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,368,dest = destinations.get(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,370,if (dest == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,371,throw new JMSException("The destination " + destination + " does not exist.");
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,374,return dest;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,769,Scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/TimedSubscriptionRecoveryPolicy.java,93,Scheduler.executePeriodically(gcTask, GC_INTERVAL);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/TimedSubscriptionRecoveryPolicy.java,97,Scheduler.cancel(gcTask);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,317,Scheduler.cancel(cleanupTask);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,245,Scheduler.cancel(periodicCheckpointTask);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,246,Scheduler.cancel(periodicCleanupTask);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,230,Scheduler.executePeriodically(periodicCheckpointTask, checkpointInterval / 10);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,241,Scheduler.cancel(periodicCheckpointTask);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,26,public final class Scheduler {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,40,public static final Timer CLOCK_DAEMON = new Timer("ActiveMQ Scheduler", true);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,41,private static final HashMap<Runnable, TimerTask> TIMER_TASKS = new HashMap<Runnable, TimerTask>();
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,46,public static synchronized void executePeriodically(final Runnable task, long period) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,52,public static synchronized void cancel(Runnable task) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,60,public static void executeAfterDelay(final Runnable task, long redeliveryDelay) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,284,if (SERVICELOG.isDebugEnabled() && e.getClass() != BrokerStoppedException.class) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,285,SERVICELOG.debug("Error occured while processing sync command: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,337,LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,338,.debug("Acknowledgment out of sync (Normally occurs when failover connection reconnects): "
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,339,+ ack);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedOutputStream.java,105,out.write(buffer, 0, count);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,449,TcpBufferedOutputStream buffOut = new TcpBufferedOutputStream(socket.getOutputStream(), ioBufferSize);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,237,sendAsyncToSlave(info);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,579,localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,596,localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1445,if (this.deleteAllMessagesOnStartup) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1446,getPersistenceAdapter().deleteAllMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PendingMessageCursor.java,255,public void dispatched(MessageReference message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,297,super.dispatched(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,298,for (PendingMessageCursor cursor : storePrefetches) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,299,cursor.dispatched(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,187,public synchronized void dispatched(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,188,if (this.audit != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,189,isDuplicate(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,190,Message removed = this.batchList.remove(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,191,if (removed != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,192,removed.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,403,localBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,168,LOG.trace("TCP consumer thread starting");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,83,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,98,appendParametersToMessage(request, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,99,boolean persistent = isSendPersistent(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,100,int priority = getSendPriority(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,101,long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,102,client.send(destination, message, persistent, priority, timeToLive);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,140,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,228,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,259,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,322,message = consumer.receiveNoWait();
activemq-core/src/main/java/org/apache/activemq/broker/region/IndirectMessageReference.java,147,if (dropped || (lockOwner != null && lockOwner != subscription)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,484,if (canDispatch(node) && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1049,return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,75,super.stop();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,255,if (databaseLocker == null) {
activemq-core/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,64,public ConnectionDotFileInterceptor(Broker next, String file, boolean redrawOnRemove) throws MalformedObjectNameException {
activemq-core/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,69,ObjectName brokerName = new ObjectName(domain + ":Type=Broker,BrokerName=localhost");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,42,private final Object sendToActiveMQMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,43,private final Object sendToStompMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,78,synchronized (sendToActiveMQMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,79,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,87,synchronized (sendToStompMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,88,next.oneway(command);
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,91,super.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,92,enqueues.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,93,dequeues.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,94,dispatched.reset();
activemq-core/src/main/java/org/apache/activemq/management/CountStatisticImpl.java,47,super.reset();
activemq-core/src/main/java/org/apache/activemq/management/CountStatisticImpl.java,48,counter.set(0);
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,35,super.reset();
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,36,current = 0;
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,37,lowWaterMark = 0;
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,38,highWaterMark = 0;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,40,startTime = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,41,lastSampleTime = startTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,45,startTime = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,46,lastSampleTime = startTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,50,lastSampleTime = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,63,return name;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,67,return unit;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,71,return description;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,75,return startTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,79,return lastSampleTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,98,buffer.append(unit);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,101,buffer.append(startTime);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,104,buffer.append(lastSampleTime);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,106,buffer.append(description);
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,46,super.reset();
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,47,count = 0;
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,48,maxTime = 0;
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,49,minTime = 0;
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,50,totalTime = 0;
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,95,c.setDiscoveryUri(new URI("multicast://" + finalGroup));
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,96,service.addNetworkConnector("multicast://" + finalGroup);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,360,return isSlave() || dispatched.size() - prefetchExtension >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,290,inboundBridges.add(bridge);
activemq-core/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,294,outboundBridges.add(bridge);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,260,if (started.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,272,this.inetAddress = InetAddress.getByName(discoveryURI.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,273,this.sockAddress = new InetSocketAddress(this.inetAddress, discoveryURI.getPort());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,274,mcast = new MulticastSocket(discoveryURI.getPort());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,34,Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,35,MulticastDiscoveryAgent rc = new MulticastDiscoveryAgent();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,36,rc.setGroup(uri.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,40,IntrospectionSupport.setProperties(rc, options);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,41,return rc;
activemq-tooling/maven-activemq-memtest-plugin/src/main/java/org/apache/activemq/tool/MemoryMonitoringTool.java,125,reportGenerator.writeWithIndent(6, "<memory_usage index=" + resultIndex
activemq-tooling/maven-activemq-memtest-plugin/src/main/java/org/apache/activemq/tool/MemoryMonitoringTool.java,126,+ " non_heap_mb=" + nonHeapMB
activemq-tooling/maven-activemq-memtest-plugin/src/main/java/org/apache/activemq/tool/MemoryMonitoringTool.java,127,+ " non_heap_bytes="
activemq-tooling/maven-activemq-memtest-plugin/src/main/java/org/apache/activemq/tool/MemoryMonitoringTool.java,129,+ " heap_mb=" + heapMB
activemq-tooling/maven-activemq-memtest-plugin/src/main/java/org/apache/activemq/tool/MemoryMonitoringTool.java,130,+ " heap_bytes=" + memoryBean.getHeapMemoryUsage().getUsed() + "/>");
activemq-tooling/maven-activemq-memtest-plugin/src/main/java/org/apache/activemq/tool/ReportGenerator.java,109,writeWithIndent(2, "<test-result checkpoint_interval_in_sec=" + intervalInSec + " >");
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,58,Enumeration iter = getBrowser().getEnumeration();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,20,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,31,import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,35,import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,437,DataFile removed = fileMap.remove(dataFile.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,447,+ (result ? "successful " : "failed"));
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,27,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,114,private Map<AMQMessageStore,Set<Integer>> dataFilesInProgress = new ConcurrentHashMap<AMQMessageStore,Set<Integer>> ();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,228,Scheduler.executePeriodically(periodicCheckpointTask, checkpointInterval);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,235,Scheduler.executePeriodically(periodicCleanupTask, cleanupInterval);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,369,for (Set<Integer> set: dataFilesInProgress.values()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,370,inProgress.addAll(set);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,825,Set<Integer>set = dataFilesInProgress.get(store);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,826,if (set == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,827,set = new CopyOnWriteArraySet<Integer>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,828,dataFilesInProgress.put(store, set);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,830,set.add(dataFileId);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,834,Set<Integer>set = dataFilesInProgress.get(store);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,835,if (set != null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,836,set.remove(dataFileId);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,665,doPageIn(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,669,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,673,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,675,if (m != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,676,l.add(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,685,synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,686,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,687,messages.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,688,while (messages.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,690,MessageReference r = messages.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,691,r.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,692,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,693,Message m = r.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,694,if (m != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,695,l.add(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,698,r.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,705,messages.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,712,public Message getMessage(String messageId) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,713,synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,714,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,715,messages.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,716,while (messages.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,717,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,718,MessageReference r = messages.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,719,if (messageId.equals(r.getMessageId().toString())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,720,r.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,721,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,727,r.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,729,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,736,messages.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,891,return moveMatchingMessagesTo(context, selector, dest, -1);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,36,protected int maxBatchSize = 100;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,258,protected synchronized void rollback(MessageId id) {
activemq-core/src/main/java/org/apache/activemq/util/DataByteArrayInputStream.java,285,if (pos > length) {
activemq-core/src/main/java/org/apache/activemq/util/DataByteArrayInputStream.java,296,if (pos > length) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,408,BrokerRegistry.getInstance().bind(getBrokerName(), this);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,108,broker = BrokerRegistry.getInstance().lookup(host);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,241,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,244,e.printStackTrace();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,257,if (lockKeepAlivePeriod > 0) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,258,getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,259,public void run() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,260,databaseLockKeepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,190,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,136,transactionStore = new MemoryTransactionStore();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,91,transactionStore = new MemoryTransactionStore();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,52,public static class Tx {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,90,for (Iterator<AddMessageCommand> iter = messages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,91,AddMessageCommand cmd = iter.next();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,92,cmd.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,95,for (Iterator<RemoveMessageCommand> iter = acks.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,96,RemoveMessageCommand cmd = iter.next();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,97,cmd.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,105,void run() throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,111,void run() throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,224,public void run() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,225,destination.addMessage(null, message);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,249,public void run() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,250,destination.removeMessage(null, ack);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,647,systemUsage.getTempUsage().setLimit(1024 * 1024 * 1024 * 100); // 10 Gb
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,648,systemUsage.getStoreUsage().setLimit(1024 * 1024 * 1024 * 100); // 100 GB
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,79,private boolean fanOutQueues;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,66,CompositeData compositData = URISupport.parseComposite(location);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,67,Map<String, String> parameters = new HashMap<String, String>(compositData.getParameters());
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,70,DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(compositData.getComponents()[0]);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,210,removeMessage(ack,location);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,311,sendToSlave(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,414,if (!addConsumerInfo((ConsumerInfo)command)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,415,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,416,LOG.debug("Ignoring ConsumerInfo: " + command);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,22,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1119,duplexBridge.duplexStart(brokerInfo, info);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,125,public void duplexStart(BrokerInfo localBrokerInfo, BrokerInfo remoteBrokerInfo) throws Exception {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,368,ServiceSupport.dispose(DemandForwardingBridgeSupport.this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,520,ServiceSupport.dispose(DemandForwardingBridgeSupport.this);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,287,public void postProcessDispatch(MessageDispatch messageDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,297,super.postProcessDispatch(messageDispatch);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,314,lockUpdateStatement = "UPDATE " + getFullLockTableName() + " SET time = ? WHERE ID = 1";
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/IndexManager.java,66,return reader.readItem(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,256,HashEntry result = getBin(key).remove(entry);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,481,return new DefaultDatabaseLocker(getDataSource(), getStatements());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,496,for (Iterator<ActiveMQSession> i = sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,497,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,498,s.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,551,stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,597,if (asyncConnectionThread != null){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,598,asyncConnectionThread.shutdown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1253,protected synchronized void ensureConnectionInfoSent() throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1255,if (isConnectionInfoSentToBroker || closed.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1256,return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1259,if (info.getClientId() == null || info.getClientId().trim().length() == 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1260,info.setClientId(clientIdGenerator.generateId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1262,syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1264,this.isConnectionInfoSentToBroker = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1269,ConsumerId consumerId = new ConsumerId(new SessionId(info.getConnectionId(), -1), consumerIdGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1270,if (watchTopicAdvisories) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1271,advisoryConsumer = new AdvisoryConsumer(this, consumerId);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1178,throw JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,260,protected ConsumerId getConsumerId() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,267,protected String getConsumerName() {
activemq-core/src/main/java/org/apache/activemq/advisory/ConsumerEventSource.java,55,private MessageConsumer consumer;
activemq-core/src/main/java/org/apache/activemq/advisory/ConsumerEventSource.java,70,consumer = session.createConsumer(advisoryTopic);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DurableSubscriptionView.java,44,this.subscriptionName = sub.getConsumerInfo().getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,40,import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,43,import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,94,private DeadLetterStrategy deadLetterStrategy = new SharedDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,155,broker.messageExpired(createConnectionContext(), message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,156,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,622,public DeadLetterStrategy getDeadLetterStrategy() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,623,return deadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,626,public void setDeadLetterStrategy(DeadLetterStrategy deadLetterStrategy) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,627,this.deadLetterStrategy = deadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,84,private DeadLetterStrategy deadLetterStrategy = new SharedDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,285,if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,287,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,569,public DeadLetterStrategy getDeadLetterStrategy() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,570,return deadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,573,public void setDeadLetterStrategy(DeadLetterStrategy deadLetterStrategy) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,574,this.deadLetterStrategy = deadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,46,private DeadLetterStrategy deadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,22,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,49,private LinkedList<PendingMessageCursor> storePrefetches = new LinkedList<PendingMessageCursor>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,317,storePrefetches.addLast(storePrefetches.removeFirst());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,36,import org.apache.activemq.util.SubscriptionKey;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,92,private long checkpointInterval = 1000 * 60;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,325,Location newMark = null;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,330,if (mark != null && (newMark == null || newMark.compareTo(mark) < 0)) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,338,if (mark != null && (newMark == null || newMark.compareTo(mark) < 0)) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,343,if (newMark != null) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,194,Scheduler.executePeriodically(cleanupTask, 1000 * 30);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,294,throw new IOException("Could not locate data file " + filePrefix + "-" + item.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,304,throw new IOException("Could not locate data file " + filePrefix + "-" + item.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,407,forceRemoveDataFile(dataFile);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,442,LOG.debug("moced data file " + dataFile + " to "
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,446,LOG.debug("discarding data file " + dataFile
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,154,this.peristenceAdapter.addInProgressDataFile(this, location.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,91,private long cleanupInterval = 1000 * 30;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,375,asyncDataManager.consolidateDataFilesNotIn(inUse, inProgress);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,233,Location rc = null;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,238,if (rc == null || rc.compareTo(location) < 0) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,239,rc = location;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,247,if (rc == null || rc.compareTo(location) < 0) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,248,rc = location;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,251,return rc;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,231,public Set<Integer> getReferenceFileIdsInUse() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,232,return recordReferences.keySet();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,483,LOG.debug("Waking up reconnect task");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,484,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,485,reconnectTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,487,Thread.currentThread().interrupt();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,20,import java.util.ArrayList;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,66,private final ArrayList<ManagedConnectionProxy> proxyConnections = new ArrayList<ManagedConnectionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,67,private final ArrayList<ConnectionEventListener> listeners = new ArrayList<ConnectionEventListener>();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,84,Iterator<ManagedConnectionProxy> iterator = proxyConnections.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,85,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,86,ManagedConnectionProxy proxy = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,148,Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,149,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,150,ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,157,Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,158,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,159,ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,166,Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,167,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,168,ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,177,Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,178,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,179,ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,186,Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,187,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,188,ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,241,Iterator<ManagedConnectionProxy> iterator = proxyConnections.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,242,while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,243,ManagedConnectionProxy proxy = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,403,for (Iterator<ManagedConnectionProxy> iter = proxyConnections.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,404,ManagedConnectionProxy proxy = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,496,destinationStatistics.setParent(null);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,454,destinationStatistics.setParent(null);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,64,protected MessageResourceAdapter adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,65,protected ActiveMQEndpointActivationKey endpointActivationKey;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,66,protected MessageEndpointFactory endpointFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,67,protected WorkManager workManager;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,68,protected boolean transacted;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,69,protected ActiveMQConnection connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,73,private ActiveMQDestination dest;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,75,private Work connectWork;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,77,private long reconnectDelay = INITIAL_RECONNECT_DELAY;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,79,public ActiveMQEndpointWorker(final MessageResourceAdapter adapter, ActiveMQEndpointActivationKey key) throws ResourceException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,81,this.adapter = adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,97,if (!isRunning()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,98,return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,100,if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,101,return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,104,MessageActivationSpec activationSpec = endpointActivationKey.getActivationSpec();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,107,connection.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,111,reconnect(error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,117,consumer = connection.createDurableConnectionConsumer((Topic)dest, activationSpec.getSubscriptionName(), emptyToNull(activationSpec.getMessageSelector()), serverSessionPool,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,118,activationSpec.getMaxMessagesPerSessionsIntValue(), activationSpec.getNoLocalBooleanValue());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,120,consumer = connection.createConnectionConsumer(dest, emptyToNull(activationSpec.getMessageSelector()), serverSessionPool, activationSpec.getMaxMessagesPerSessionsIntValue(),
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,125,LOG.debug("Fail to to connect: " + error, error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,126,reconnect(error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,145,public static void safeClose(Session s) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,146,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,147,if (s != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,148,s.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,184,public synchronized void start() throws WorkException, ResourceException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,185,if (running) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,190,LOG.debug("Starting");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,193,LOG.debug("Started");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,199,public synchronized void stop() throws InterruptedException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,200,if (!running) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,212,private synchronized void connect() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,228,private synchronized void disconnect() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,235,private void reconnect(JMSException error) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,236,LOG.debug("Reconnect cause: ", error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,237,long reconnectDelay;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,238,synchronized (this) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,239,reconnectDelay = this.reconnectDelay;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,242,if (reconnectDelay == MAX_RECONNECT_DELAY) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,243,LOG.error("Endpoint connection to JMS broker failed: " + error.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,244,LOG.error("Endpoint will try to reconnect to the JMS broker in " + (MAX_RECONNECT_DELAY / 1000) + " seconds");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,247,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,248,disconnect();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,249,Thread.sleep(reconnectDelay);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,251,synchronized (this) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,253,this.reconnectDelay *= 2;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,254,if (this.reconnectDelay > MAX_RECONNECT_DELAY) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,this.reconnectDelay = MAX_RECONNECT_DELAY;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,258,connect();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,132,connectionFactory.setClientID(clientId);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,138,ActiveMQConnection physicalConnection = (ActiveMQConnection)connectionFactory.createConnection(userName, password);
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,36,interface MessageResourceAdapter extends ResourceAdapter {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,163,currentBatchSize = 0;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,168,log.info("Endpoint failed to process message. Reason: " + e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,222,log.warn("Local transaction had not been commited.  Commiting now.");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,252,log.debug("Endpoint did not release properly: " + e, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,257,log.debug("Session did not close properly: " + e, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,60,final ActiveMQSession session = (ActiveMQSession)activeMQAsfEndpointWorker.connection.createSession(activeMQAsfEndpointWorker.transacted, acknowledge);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,79,this.connection.syncSendPacket(this.consumerInfo);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,47,answer.getConfiguration().setBrokerURL(brokerURL);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,63,public ActiveMQConfiguration getConfiguration() {
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,64,return (ActiveMQConfiguration) super.getConfiguration();
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,68,getConfiguration().setBrokerURL(brokerURL);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,512,this.transportListener = commandListener;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,327,getSession(); // .setMessageListener(listener);
activemq-core/src/main/java/org/apache/activemq/broker/SslBrokerService.java,93,transportFactory.setKeyAndTrustManagers(km, tm, random);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,82,try {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,83,remoteTransport = TransportFactory.connect(connectUri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,85,LOG.warn("Could not connect to remote URI: " + localURIName + ": " + e.getMessage());
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,86,LOG.debug("Connection failure exception: " + e, e);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,87,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,91,localTransport = createLocalTransport();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,93,ServiceSupport.dispose(remoteTransport);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,94,LOG.warn("Could not connect to local URI: " + localURIName + ": " + e.getMessage());
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,95,LOG.debug("Connection failure exception: " + e, e);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,96,return;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,64,private SSLContext sslContext;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,70,public SslTransportFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,149,public void setKeyAndTrustManagers(KeyManager[] km, TrustManager[] tm, SecureRandom random) throws KeyManagementException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,151,try {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,152,sslContext = SSLContext.getInstance("TLS");
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,155,throw new RuntimeException("Unknown SSL algorithm encountered.", e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,157,sslContext.init(km, tm, random);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,166,protected ServerSocketFactory createServerSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,167,if (sslContext == null) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,168,return SSLServerSocketFactory.getDefault();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,170,return sslContext.getServerSocketFactory();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,180,protected SocketFactory createSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,181,if (sslContext == null) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,182,return SSLSocketFactory.getDefault();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,184,return sslContext.getSocketFactory();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,143,protected ServerSocketFactory createServerSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,147,protected SocketFactory createSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,998,synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,999,messages.addMessageLast(msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,87,public synchronized boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,88,if(memoryList.isEmpty() && isDiskListEmpty()){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,89,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,91,for (Iterator<MessageReference> iterator = memoryList.iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,92,MessageReference node = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,93,if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,94,continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,96,if (!node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,97,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,100,iterator.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,108,public synchronized void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,109,iterating = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,110,last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,111,iter = isDiskListEmpty() ? memoryList.iterator() : getDiskList().listIterator();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,114,public synchronized void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,115,iterating = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,116,if (flushRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,117,flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,118,flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,122,public synchronized void destroy() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,123,stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,124,for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,125,Message node = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,126,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,128,memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,129,if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,130,getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,134,public synchronized LinkedList<MessageReference> pageInList(int maxItems) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,135,LinkedList<MessageReference> result = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,137,for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,138,result.add(i.next());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,139,count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,141,if (count < maxItems && !isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,142,for (Iterator<MessageReference> i = getDiskList().iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,143,Message message = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,144,message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,145,message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,146,message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,147,result.add(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,159,public synchronized void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,168,systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,181,public synchronized void addMessageFirst(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,189,systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,190,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,191,getDiskList().addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,201,public synchronized boolean hasNext() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,202,return iter.hasNext();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,208,public synchronized MessageReference next() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,209,Message message = (Message)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,210,last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,213,message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,214,message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,215,message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,223,public synchronized void remove() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,224,iter.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,225,if (last != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,226,last.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,234,public synchronized void remove(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,235,if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,236,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,238,if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,239,getDiskList().remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,246,public synchronized int size() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,247,return memoryList.size() + (isDiskListEmpty() ? 0 : getDiskList().size());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,253,public synchronized void clear() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,254,memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,255,if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,256,getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,last=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,261,public synchronized boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,263,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,276,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,294,protected synchronized void flushToDisk() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,295,if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,296,while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,MessageReference node = memoryList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,298,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,299,getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,301,memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,19,import org.apache.activemq.ActiveMQMessageAudit;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,23,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,85,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,100,public synchronized void addMessageFirst(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,155,public synchronized void reset() {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,31,private int firstBin = -1;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,58,boolean answer = true;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,65,if (value) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,123,if (firstIndex < 0) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,124,firstIndex = 0;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,126,if (bin >= list.size()) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,127,list.removeFirst();
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,128,firstIndex += BitArray.LONG_SIZE;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,129,list.add(new BitArray());
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,130,bin = list.size() - 1;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,145,if (firstBin < 0) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,146,firstBin = 0;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,375,protected void serviceRemoteCommand(Command command) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,578,remoteBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,580,dequeueCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1681,connector.setDurableDestinations(getBroker().getDurableDestinations());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,374,Set<Integer> inUse = referenceStoreAdapter.getReferenceFileIdsInUse();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,97,waitForShutdown();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,128,synchronized (shutdown) {
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,129,shutdown[0] = true;
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,130,shutdown.notify();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,146,for (Iterator<BrokerService> i = brokers.iterator(); i.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,147,BrokerService broker = i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,148,broker.stop();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,476,LOG.warn("Failed to stop broker");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,282,IntrospectionSupport.getProperties(this, props, null);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,62,if (name.startsWith("get") && params.length == 0 && type != null && isSettableType(type)) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,76,name = name.substring(3, 4).toLowerCase() + name.substring(4);
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,59,if (info.getSelector() != null) {
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,60,return false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,40,private PreparedStatement statement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,101,PreparedStatement statement = connection.prepareStatement(statements.getLockUpdateStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,105,return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,110,return false;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,88,public RandomAccessFile openRandomAccessFile(boolean appender) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,100,public void closeRandomAccessFile(RandomAccessFile file) throws IOException {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,40,return new HttpsTransport(asTextWireFormat(wf), location);
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,124,synchronized (runable) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,126,if (shutdown) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,127,queued = false;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,129,return;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,134,if (!done) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,135,queued = true;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,138,if (queued) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,139,executor.execute(runable);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,137,this.log = LogFactory.getLog(getClass().getName() + "." + destination.getPhysicalName());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,165,log.fatal("Failed to add message to cursor", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,434,if (log.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,435,log.debug("Expired message: " + message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,667,log.error("caught an exception browsing " + this, e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,679,log.error("caught an exception browsing " + this, e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,701,log.error("caught an exception brwsing " + this, e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,732,log.error("got an exception retrieving message " + messageId);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,23,import org.apache.commons.logging.Log;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,24,import org.apache.commons.logging.LogFactory;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,32,private static final transient Log LOG = LogFactory.getLog(HashBin.class);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,37,private List<HashPageInfo> hashPages = new ArrayList<HashPageInfo>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,66,return (int)id;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,69,int getId() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,73,void setId(int id) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,77,boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,81,int getMaximumEntries() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,85,void setMaximumEntries(int maximumEntries) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,89,int size() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,97,hashPages.add(info);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,102,public HashEntry find(HashEntry key) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,157,HashEntry remove(HashEntry entry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,196,for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,209,pageToUse = hashPages.get(pageNo);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,235,return maximumEntries * hashPages.size();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,241,int pageNo = 0;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,242,for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,247,pageNo++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,249,result = hashPages.get(pageNo);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,257,for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,278,private void doOverFlow(int pageNo, HashEntry entry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,280,if (pageNo >= hashPages.size()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,285,info = hashPages.get(pageNo);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,302,for (HashPageInfo info : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,303,info.end();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPageInfo.java,26,class HashPageInfo {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,329,StringBuffer buffer = new StringBuffer(subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,330,return buffer.append(":").append(destination.getQualifiedName()).append(TOPIC_SUB_NAME).toString();
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,47,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,48,final Destination mirrorDestination = getMirrorDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,49,if (mirrorDestination != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,50,return new DestinationFilter(destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,51,public void send(ProducerBrokerExchange context, Message message) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,52,message.setDestination(mirrorDestination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,53,mirrorDestination.send(context, message);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,55,if (isCopyMessage()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,56,message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,58,message.setDestination(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,59,super.send(context, message);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,64,catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,65,LOG.error("Failed to lookup the mirror destination for: " + destination + ". Reason: " + e, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointActivationKey.java,29,ActiveMQEndpointActivationKey() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,53,private int keysPerPage = pageSize / keySize;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,64,private boolean enablePageCaching=true;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPage.java,57,HashPage(long id, int maximumEntries) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPage.java,58,this(maximumEntries);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPage.java,60,this.id = id;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPageInfo.java,68,size++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPageInfo.java,79,size--;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,32,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,328,if (callDispatchMatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,30,import org.apache.activemq.transaction.Synchronization;
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,43,public Destination intercept(Destination destination) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,70,listener.recoverMessageReference(id);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,71,return true;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,187,return addConnector(createTransportConnector(getBroker(), bindAddress));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,197,return addConnector(new TransportConnector(getBroker(), transport));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1543,protected TransportConnector createTransportConnector(Broker broker, URI brokerURI) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1545,return new TransportConnector(broker, transport);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1702,connector.setBroker(getBroker());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1703,connector.setBrokerName(getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/SslBrokerService.java,95,return transportFactory.doBind(getBrokerName(), brokerURI);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,172,connector.setBrokerName(broker.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,55,private Broker broker;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,72,public TransportConnector(Broker broker, TransportServer server) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,74,setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,98,ManagedTransportConnector rc = new ManagedTransportConnector(mbeanServer, connectorName, getBroker(), getServer());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,125,public Broker getBroker() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,126,return broker;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,129,public void setBroker(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,130,this.broker = broker;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,131,brokerInfo.setBrokerId(broker.getBrokerId());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,132,brokerInfo.setPeerBrokerInfos(broker.getPeerBrokerInfos());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,133,brokerInfo.setFaultTolerantConfiguration(broker.isFaultTolerantConfiguration());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,136,public void setBrokerName(String brokerName) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,137,brokerInfo.setBrokerName(brokerName);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,142,this.brokerInfo.setBrokerURL(server.getConnectURI().toString());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,143,this.server.setAcceptListener(new TransportAcceptListener() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,144,public void onAccept(final Transport transport) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,145,try {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,148,Thread startThread = new Thread("ActiveMQ Transport Initiator: " + transport.getRemoteAddress()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,149,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,150,try {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,151,Connection connection = createConnection(transport);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,152,connection.start();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,154,ServiceSupport.dispose(transport);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,155,onAcceptError(e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,159,startThread.setPriority(4);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,160,startThread.start();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,162,String remoteHost = transport.getRemoteAddress();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,163,ServiceSupport.dispose(transport);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,164,onAcceptError(e, remoteHost);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,168,public void onAcceptError(Exception error) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,169,onAcceptError(error, null);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,172,private void onAcceptError(Exception error, String remoteHost) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,173,LOG.error("Could not accept connection " + (remoteHost == null ? "" : "from " + remoteHost) + ": " + error.getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,174,LOG.debug("Reason: " + error.getMessage(), error);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,177,this.server.setBrokerInfo(brokerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,230,getServer().start();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,278,if (broker == null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,279,throw new IllegalArgumentException("You must specify the broker property. Maybe this connector should be added to a broker?");
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnector.java,44,public ManagedTransportConnector(MBeanServer mbeanServer, ObjectName connectorName, Broker next, TransportServer server) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnector.java,45,super(next, server);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,42,public abstract TransportServer doBind(String brokerId, URI location) throws IOException;
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,104,public static TransportServer bind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,106,return tf.doBind(brokerId, location);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransportFactory.java,46,public TransportServer doBind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,75,public TransportServer doBind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,83,public TransportServer doBind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/mock/MockTransportFactory.java,56,public TransportServer doBind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,107,public TransportServer doBind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,76,public TransportServer doBind(String brokerId, final URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,46,public TransportServer doBind(String brokerId, final URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,48,public TransportServer doBind(String brokerId, final URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,129,TransportConnector connector = new TransportConnector(broker.getBroker(), server);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,153,public TransportServer doBind(String brokerId, URI location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,289,DataFile getDataFile(Location item) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,299,File getFile(Location item) throws IOException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,45,private transient ActiveMQManagedConnectionFactory factory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,54,public ActiveMQConnectionFactory(ActiveMQManagedConnectionFactory factory, ConnectionManager manager, ActiveMQConnectionRequestInfo info) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,57,this.info = info;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,83,private Connection createConnection(ActiveMQConnectionRequestInfo info) throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,85,if (info.isUseInboundSessionEnabled()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,91,return (Connection)manager.allocateConnection(factory, info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,179,return "ActiveMQConnectionRequestInfo{ " + "userName = '" + userName + "' " + ", serverUrl = '" + serverUrl + "' " + ", clientid = '" + clientid + "' " + ", userName = '" + userName + "' "
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,180,+ ", useInboundSession = '" + useInboundSession + "' " + " }";
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,37,public class ActiveMQManagedConnectionFactory implements ManagedConnectionFactory, ResourceAdapterAssociation {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,41,private MessageResourceAdapter adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,43,private ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,52,this.adapter = (MessageResourceAdapter)adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,53,ActiveMQConnectionRequestInfo baseInfo = this.adapter.getInfo().copy();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,54,if (info.getClientid() == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,55,info.setClientid(baseInfo.getClientid());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,57,if (info.getPassword() == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,58,info.setPassword(baseInfo.getPassword());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,60,if (info.getServerUrl() == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,61,info.setServerUrl(baseInfo.getServerUrl());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,63,if (info.getUseInboundSession() == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,64,info.setUseInboundSession(baseInfo.getUseInboundSession());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,66,if (info.getUserName() == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,67,info.setUserName(baseInfo.getUserName());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,79,return ((ActiveMQManagedConnectionFactory)object).info.equals(info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,87,return info.hashCode();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,93,public ResourceAdapter getResourceAdapter() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,94,return adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,101,return new ActiveMQConnectionFactory(this, manager, info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,113,return new ActiveMQConnectionFactory(this, new SimpleConnectionManager(), info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,120,public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo info) throws ResourceException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,121,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,122,if (info == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,123,info = this.info;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,125,ActiveMQConnectionRequestInfo amqInfo = (ActiveMQConnectionRequestInfo)info;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,126,return new ActiveMQManagedConnection(subject, adapter.makeConnection(amqInfo), amqInfo);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,137,public ManagedConnection matchManagedConnections(Set connections, Subject subject, ConnectionRequestInfo info) throws ResourceException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,141,if (c.matches(subject, info)) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,143,c.associate(subject, (ActiveMQConnectionRequestInfo)info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,156,public void setLogWriter(PrintWriter logWriter) throws ResourceException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,157,this.logWriter = logWriter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,176,public String getClientid() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,177,return info.getClientid();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,183,public String getPassword() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,184,return info.getPassword();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,190,public String getUserName() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,191,return info.getUserName();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,197,public void setClientid(String clientid) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,198,info.setClientid(clientid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,204,public void setPassword(String password) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,205,info.setPassword(password);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,211,public void setUserName(String userid) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,212,info.setUserName(userid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,221,public Boolean getUseInboundSession() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,222,return info.getUseInboundSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,228,public void setUseInboundSession(Boolean useInboundSession) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,229,info.setUseInboundSession(useInboundSession);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,235,public boolean isUseInboundSessionEnabled() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,236,return info.isUseInboundSessionEnabled();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,243,public Long getInitialRedeliveryDelay() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,244,return info.getInitialRedeliveryDelay();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,250,public Integer getMaximumRedeliveries() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,251,return info.getMaximumRedeliveries();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,257,public Short getRedeliveryBackOffMultiplier() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,258,return info.getRedeliveryBackOffMultiplier();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,264,public Boolean getRedeliveryUseExponentialBackOff() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,265,return info.getRedeliveryUseExponentialBackOff();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,271,public void setInitialRedeliveryDelay(Long value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,272,info.setInitialRedeliveryDelay(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,278,public void setMaximumRedeliveries(Integer value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,279,info.setMaximumRedeliveries(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,285,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,286,info.setRedeliveryBackOffMultiplier(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,292,public void setRedeliveryUseExponentialBackOff(Boolean value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,293,info.setRedeliveryUseExponentialBackOff(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,300,public Integer getDurableTopicPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,301,return info.getDurableTopicPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,307,public Integer getInputStreamPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,308,return info.getInputStreamPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,314,public Integer getQueueBrowserPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,315,return info.getQueueBrowserPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,321,public Integer getQueuePrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,322,return info.getQueuePrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,328,public Integer getTopicPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,329,return info.getTopicPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,335,public void setAllPrefetchValues(Integer i) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,336,info.setAllPrefetchValues(i);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,342,public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,343,info.setDurableTopicPrefetch(durableTopicPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,349,public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,350,info.setInputStreamPrefetch(inputStreamPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,356,public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,357,info.setQueueBrowserPrefetch(queueBrowserPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,363,public void setQueuePrefetch(Integer queuePrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,364,info.setQueuePrefetch(queuePrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,370,public void setTopicPrefetch(Integer topicPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,371,info.setTopicPrefetch(topicPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,19,import java.io.Serializable;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,21,import java.net.URISyntaxException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,42,import org.apache.commons.logging.Log;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,43,import org.apache.commons.logging.LogFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,54,public class ActiveMQResourceAdapter implements MessageResourceAdapter, Serializable {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,56,private static final long serialVersionUID = -5417363537865649130L;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,57,private static final Log LOG = LogFactory.getLog(ActiveMQResourceAdapter.class);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,60,private final ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,65,private ActiveMQConnectionFactory connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,93,if (connectionFactory != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,94,return makeConnection(info, connectionFactory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,96,return makeConnection(info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,101,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info) throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,103,ActiveMQConnectionFactory connectionFactory = createConnectionFactory(info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,104,return makeConnection(info, connectionFactory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,111,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info, ActiveMQConnectionFactory connectionFactory) throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,112,String userName = info.getUserName();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,113,String password = info.getPassword();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,114,ActiveMQConnection physicalConnection = (ActiveMQConnection)connectionFactory.createConnection(userName, password);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,116,String clientId = info.getClientid();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,117,if (clientId != null && clientId.length() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,118,physicalConnection.setClientID(clientId);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,120,return physicalConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,127,ActiveMQConnectionFactory connectionFactory = createConnectionFactory(info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,128,String userName = defaultValue(activationSpec.getUserName(), info.getUserName());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,129,String password = defaultValue(activationSpec.getPassword(), info.getPassword());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,135,LOG.warn("No clientID specified for durable subscription: " + activationSpec);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,153,private synchronized ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo info) throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,154,ActiveMQConnectionFactory factory = connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,155,if (factory != null && info.isConnectionFactoryConfigured()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,156,factory = factory.copy();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,158,factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,160,info.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,161,return factory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,164,private String defaultValue(String value, String defaultValue) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,165,if (value != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,166,return value;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,168,return defaultValue;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,288,public String getClientid() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,289,return emptyToNull(info.getClientid());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,295,public String getPassword() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,296,return emptyToNull(info.getPassword());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,302,public String getServerUrl() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,303,return info.getServerUrl();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,309,public String getUserName() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,310,return emptyToNull(info.getUserName());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,316,public void setClientid(String clientid) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,317,info.setClientid(clientid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,323,public void setPassword(String password) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,324,info.setPassword(password);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,330,public void setServerUrl(String url) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,331,info.setServerUrl(url);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,337,public void setUserName(String userid) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,338,info.setUserName(userid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,366,public Integer getDurableTopicPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,367,return info.getDurableTopicPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,373,public Long getInitialRedeliveryDelay() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,374,return info.getInitialRedeliveryDelay();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,380,public Integer getInputStreamPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,381,return info.getInputStreamPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,387,public Integer getMaximumRedeliveries() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,388,return info.getMaximumRedeliveries();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,394,public Integer getQueueBrowserPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,395,return info.getQueueBrowserPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,401,public Integer getQueuePrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,402,return info.getQueuePrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,408,public Short getRedeliveryBackOffMultiplier() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,409,return info.getRedeliveryBackOffMultiplier();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,415,public Boolean getRedeliveryUseExponentialBackOff() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,416,return info.getRedeliveryUseExponentialBackOff();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,422,public Integer getTopicPrefetch() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,423,return info.getTopicPrefetch();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,429,public boolean isUseInboundSessionEnabled() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,430,return info.isUseInboundSessionEnabled();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,436,public void setAllPrefetchValues(Integer i) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,437,info.setAllPrefetchValues(i);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,443,public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,444,info.setDurableTopicPrefetch(durableTopicPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,450,public void setInitialRedeliveryDelay(Long value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,451,info.setInitialRedeliveryDelay(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,457,public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,458,info.setInputStreamPrefetch(inputStreamPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,464,public void setMaximumRedeliveries(Integer value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,465,info.setMaximumRedeliveries(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,471,public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,472,info.setQueueBrowserPrefetch(queueBrowserPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,478,public void setQueuePrefetch(Integer queuePrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,479,info.setQueuePrefetch(queuePrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,485,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,486,info.setRedeliveryBackOffMultiplier(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,492,public void setRedeliveryUseExponentialBackOff(Boolean value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,493,info.setRedeliveryUseExponentialBackOff(value);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,499,public void setTopicPrefetch(Integer topicPrefetch) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,500,info.setTopicPrefetch(topicPrefetch);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,506,public ActiveMQConnectionRequestInfo getInfo() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,507,return info;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,524,if (!info.equals(activeMQResourceAdapter.getInfo())) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,534,private boolean notEqual(Object o1, Object o2) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,535,return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,544,result = info.hashCode();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,551,private String emptyToNull(String value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,552,if (value == null || value.length() == 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,553,return null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,555,return value;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,561,public Boolean getUseInboundSession() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,562,return info.getUseInboundSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,568,public void setUseInboundSession(Boolean useInboundSession) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,569,info.setUseInboundSession(useInboundSession);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,575,public ActiveMQConnectionFactory getConnectionFactory() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,576,return connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,586,public void setConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,587,this.connectionFactory = connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,25,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,40,ActiveMQConnection makeConnection() throws JMSException;
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,48,ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info, ActiveMQConnectionFactory connectionFactory) throws JMSException;
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,71,ActiveMQConnectionFactory getConnectionFactory();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,187,next.removeDestinationInfo(context, destInfo);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,219,if (!AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,220,ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,230,if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,231,ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(info.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,96,for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,97,Destination dest = i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,98,dest.start();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,104,for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,105,Destination dest = i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,106,dest.stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,260,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,261,Destination dest = (Destination)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,262,dest.addSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,287,inactiveDests.removeAll(destinations.keySet());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,390,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,391,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,392,dest.gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,81,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,82,Topic topic = (Topic)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,83,topic.deleteSubscription(context, key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,135,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,136,Topic topic = (Topic)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,137,topic.deleteSubscription(context, key);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,109,((SSLServerSocket)this.serverSocket).setWantClientAuth(wantClientAuth);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,110,((SSLServerSocket)this.serverSocket).setNeedClientAuth(needClientAuth);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,376,long si = sequenceGenerator.getNextSequenceId();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,377,message.getMessageId().setBrokerSequenceId(si);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,200,return discoveryAgent.toString();
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,145,return remoteTransport.toString();
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,38,private String name = "localhost";
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,195,public abstract String getName();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,25,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,64,private final ConcurrentHashMap<Integer, Command> requestMap = new ConcurrentHashMap<Integer, Command>();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,183,Object object = requestMap.remove(Integer.valueOf(((Response)command).getCorrelationId()));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,388,if (tracked != null && tracked.isWaitingForResponse()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,389,requestMap.put(Integer.valueOf(command.getCommandId()), tracked);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,391,requestMap.put(Integer.valueOf(command.getCommandId()), command);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,532,for (Iterator<Command> iter2 = requestMap.values().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1583,throw new JMSException("Cannot publish to a deleted Destination: " + destination);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1626,if (!connection.isAlwaysSyncSend() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid != null)) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,22,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,25,import javax.jms.Connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,26,import javax.jms.ConnectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,36,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,58,private ConnectionFactory connectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,59,private Connection connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,60,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,62,public Connection getConnection() throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,63,if (connection == null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,64,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,65,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,67,return connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,70,public void setConnection(Connection connection) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,71,this.connection = connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,74,public ConnectionFactory getConnectionFactory() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,75,if (connectionFactory == null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,76,String uri = getServletContext().getInitParameter("org.apache.activemq.brokerURL");
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,77,if (uri != null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,78,connectionFactory = new ActiveMQConnectionFactory(uri);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,80,throw new IllegalStateException("missing ConnectionFactory in QueueBrowserServlet");
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,83,return connectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,86,public void setConnectionFactory(ConnectionFactory connectionFactory) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,87,this.connectionFactory = connectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,93,Session session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,95,session = borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,100,String selector = getSelector(request);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,101,QueueBrowser browser = session.createBrowser(queue, selector);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,102,MessageRenderer renderer = getMessageRenderer(request);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,103,configureRenderer(request, renderer);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,104,renderer.renderMessages(request, response, browser);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,108,returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,118,return (MessageRenderer)factoryFinder.newInstance(style);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,130,for (Enumeration iter = request.getParameterNames(); iter.hasMoreElements();) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,131,String name = (String)iter.nextElement();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,137,protected Session borrowSession() throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,138,Session answer = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,139,synchronized (sessions) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,140,if (sessions.isEmpty()) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,141,answer = createSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,143,answer = sessions.removeLast();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,146,return answer;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,149,protected void returnSession(Session session) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,150,if (session != null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,151,synchronized (sessions) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,152,sessions.add(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,157,protected Session createSession() throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,158,return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,180,System.out.println("destination uri = " + uri);
activemq-web/src/main/java/org/apache/activemq/web/view/RssMessageRenderer.java,118,String link = request.getRequestURI() + "/" + title;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,580,public ByteSequence read(Location location) throws IOException, IllegalStateException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,459,public DataStructure readCommand(Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,73,message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,74,message.setDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,77,send(context, message, destination);
activemq-core/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,117,return new ConnectionPool(connection, getPoolFactory(), transactionManager);
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,33,private Thread runningThread;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,42,runTask();
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,43,runningThread = null;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,117,for (int i = 0; i < maxIterationsPerRun; i++) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,118,if (!task.iterate()) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,119,done = true;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,120,break;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,125,iterating = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,661,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,429,startAllConnectors();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1239,if (masterConnector != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1735,BrokerServiceAware serviceAware = (BrokerServiceAware)service;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1738,if (service instanceof MasterConnector) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1739,masterConnector = (MasterConnector)service;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1740,supportFailOver = true;
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,107,LOG.info("Starting a network connection between " + localBroker + " and " + remoteBroker + " has been established.");
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,134,masterActive.set(true);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,135,Thread thead = new Thread() {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,137,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,138,try {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,139,localBroker.start();
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,140,remoteBroker.start();
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,141,startBridge();
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,143,masterActive.set(false);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,144,LOG.error("Failed to start network bridge: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterConnector.java,148,thead.start();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,83,private RandomAccessFile lockFile;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,131,if (lockFile != null) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,132,lockFile.close();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,446,if (!initialized) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,449,lockFile = new RandomAccessFile(new File(directory, "lock"), "rw");
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,450,lock();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,481,private synchronized void lock() throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,482,if (!DISABLE_LOCKING && directory != null && lock == null) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,483,String key = getPropertyKey();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,484,String property = System.getProperty(key);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,485,if (null == property) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,486,if (!BROKEN_FILE_LOCK) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,487,lock = lockFile.getChannel().tryLock();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,488,if (lock == null) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,490,+ "  is already opened by another application");
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,492,System.setProperty(key, new Date().toString());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,497,+ " is already opened by this application.");
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,502,private synchronized void unlock() throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,503,if (!DISABLE_LOCKING && (null != directory) && (null != lock)) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,505,if (lock.isValid()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,506,lock.release();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,508,lock = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,547,checkClosed();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,83,public void doConsume(Command command) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,50,private AtomicBoolean closing = new AtomicBoolean(false);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,107,if (activeSessions.size() >= maxSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,111,return getExistingServerSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,123,activeSessions.add(ss);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,135,ServerSession serverSession = getServerSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,136,Session s = serverSession.getSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,137,ActiveMQSession session = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,138,if (s instanceof ActiveMQSession) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,147,session.dispatch(messageDispatch);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,148,serverSession.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,154,private ServerSession getExistingServerSession() {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,204,private void closeIdleSessions() {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,117,if (idleSessions.size() == 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,118,throw new JMSException("Endpoint factory did not allows to any endpoints.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,67,private Transport connectedTransport;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,237,if (connectedTransport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,239,ServiceSupport.dispose(connectedTransport);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,240,connectedTransport = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,254,if (connectedTransport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,255,stateTracker.restore(connectedTransport);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,272,if (connectedTransport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,273,transportToStop = connectedTransport;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,274,connectedTransport = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,320,return connectedTransport;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,360,while (connectedTransport == null && !disposed && connectionFailure == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,370,if (connectedTransport == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,396,connectedTransport.oneway(command);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,520,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,521,if (connectedTransport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,522,return connectedTransport.narrow(target);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,551,if (connectedTransport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,552,return connectedTransport.getRemoteAddress();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,85,private final ConcurrentHashMap<ActiveMQTopic, AMQMessageStore> topics = new ConcurrentHashMap<ActiveMQTopic, AMQMessageStore>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,248,Iterator<AMQMessageStore> iterator = queues.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,249,while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,250,AMQMessageStore ms = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,253,iterator = topics.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,254,while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,255,final AMQTopicMessageStore ms = (AMQTopicMessageStore)iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,326,Iterator<AMQMessageStore> iterator = queues.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,327,while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,328,final AMQMessageStore ms = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,334,iterator = topics.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,335,while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,336,final AMQTopicMessageStore ms = (AMQTopicMessageStore)iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,584,protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference node) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,137,public boolean isEmpty(Destination destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,175,public void addRecoveredMessage(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,262,public void setMaxProducersToAudit(int maxProducersToAudit) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,272,public void setMaxAuditDepth(int maxAuditDepth) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,296,public void dispatched(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,88,this(new File(IOHelper.toFileSystemSafeName(name)), mode, new AtomicLong());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,96,this(new File(IOHelper.toFileSystemSafeName(name)), mode, storeSize);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,193,return doesMapContainerExist(id, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,205,return getMapContainer(id, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,234,deleteMapContainer(id, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,263,return doesListContainerExist(id, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,275,return getListContainer(id, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,305,deleteListContainer(id, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,452,DataManager defaultDM = getDataManager(DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,453,rootIndexManager = getIndexManager(defaultDM, DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,562,public synchronized boolean isUseAsyncDataManager() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,563,return useAsyncDataManager;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,566,public synchronized void setUseAsyncDataManager(boolean useAsyncWriter) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,567,this.useAsyncDataManager = useAsyncWriter;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,574,public long size(){
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,575,return storeSize.get();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndex.java,24,import org.apache.activemq.kaha.impl.container.MapContainerImpl;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndex.java,33,public class VMIndex implements Index {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,126,void put(HashEntry newEntry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,128,boolean replace = false;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,39,public class HashIndex implements Index {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,241,getBin(key).put(entry);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,257,return result != null ? indexManager.getIndex(result.getIndexOffset()) : null;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,850,protected DemandSubscription createDemandSubscription(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,857,DemandSubscription result = new DemandSubscription(info);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,858,result.getLocalInfo().setPriority(ConsumerInfo.NETWORK_CONSUMER_PRIORITY);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,412,AMQTopicMessageStore store = (AMQTopicMessageStore)topics.get(destinationName);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,268,protected synchronized Store getStore() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,270,theStore = StoreFactory.open(getStoreDirectory(), "rw",storeSize);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,271,theStore.setMaxDataFileLength(maxDataFileLength);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,272,theStore.setPersistentIndex(isPersistentIndex());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,59,private static final Integer INDEX_VERSION = new Integer(3);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,165,MapContainer messageContainer = getMapReferenceContainer(destination, "topic-data");
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,166,MapContainer subsContainer = getSubsMapContainer(destination.toString() + "-Subscriptions", "blob");
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,167,ListContainer<TopicSubAck> ackContainer = store.getListContainer(destination.toString(), "topic-acks");
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,115,MapContainer container = store.getMapContainer(getSubscriptionContainerName(getSubscriptionKey(clientId, subscriptionName)));
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,161,throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,162,String key = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,318,store.deleteMapContainer(containerName);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,77,public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,94,public void deleteSubscription(String clientId, String subscriptionName) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,100,public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,107,public void delete() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,126,public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned, MessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,43,if (map.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,44,lastBatch = null;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,48,int size() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,79,private long reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,89,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,67,|| (c == '/') || (c == '\\');
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,78,if (result.length() > MAX_FILE_NAME_LENGTH) {
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,79,result = result.substring(0,MAX_FILE_NAME_LENGTH);
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,81,return rc.toString();
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,129,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","200")).intValue();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,80,private int lockKeepAlivePeriod;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,187,public static void copyProperties(Message fromMessage, Message toMesage) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,188,toMesage.setJMSMessageID(fromMessage.getJMSMessageID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,189,toMesage.setJMSCorrelationID(fromMessage.getJMSCorrelationID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,190,toMesage.setJMSReplyTo(transformDestination(fromMessage.getJMSReplyTo()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,191,toMesage.setJMSDestination(transformDestination(fromMessage.getJMSDestination()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,192,toMesage.setJMSDeliveryMode(fromMessage.getJMSDeliveryMode());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,193,toMesage.setJMSRedelivered(fromMessage.getJMSRedelivered());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,194,toMesage.setJMSType(fromMessage.getJMSType());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,195,toMesage.setJMSExpiration(fromMessage.getJMSExpiration());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,196,toMesage.setJMSPriority(fromMessage.getJMSPriority());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,197,toMesage.setJMSTimestamp(fromMessage.getJMSTimestamp());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,204,toMesage.setObjectProperty(name, obj);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,85,ActiveMQMessage msg = (ActiveMQMessage)o;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,262,this.setPriority((byte)priority);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,293,Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,302,String rc = (String)TypeConversionSupport.convert(value, String.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,311,Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,320,String rc = (String)TypeConversionSupport.convert(value, String.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,324,((ActiveMQMessage)message).setJMSCorrelationID(rc);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,329,Long rc = (Long)TypeConversionSupport.convert(value, Long.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,333,((ActiveMQMessage)message).setJMSExpiration(rc.longValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,338,Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,342,((ActiveMQMessage)message).setJMSPriority(rc.intValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,347,Boolean rc = (Boolean)TypeConversionSupport.convert(value, Boolean.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,351,((ActiveMQMessage)message).setJMSRedelivered(rc.booleanValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,356,ActiveMQDestination rc = (ActiveMQDestination)TypeConversionSupport.convert(value, ActiveMQDestination.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,360,((ActiveMQMessage)message).setReplyTo(rc);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,365,Long rc = (Long)TypeConversionSupport.convert(value, Long.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,369,((ActiveMQMessage)message).setJMSTimestamp(rc.longValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,374,String rc = (String)TypeConversionSupport.convert(value, String.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,378,((ActiveMQMessage)message).setJMSType(rc);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,399,if (setter != null) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,412,Map.Entry entry = (Map.Entry)iter.next();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,416,setObjectProperty((String)entry.getKey(), entry.getValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,454,Boolean rc = (Boolean)TypeConversionSupport.convert(value, Boolean.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,466,Byte rc = (Byte)TypeConversionSupport.convert(value, Byte.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,478,Short rc = (Short)TypeConversionSupport.convert(value, Short.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,490,Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,502,Long rc = (Long)TypeConversionSupport.convert(value, Long.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,514,Float rc = (Float)TypeConversionSupport.convert(value, Float.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,526,Double rc = (Double)TypeConversionSupport.convert(value, Double.class);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,543,String rc = (String)TypeConversionSupport.convert(value, String.class);
activemq-core/src/main/java/org/apache/activemq/ActiveMQInputStream.java,177,if (eosReached) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQInputStream.java,185,if (eosReached) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,97,buffer[count++] = (byte)b;
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,123,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,124,ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,125,msg.writeBytes(buffer, 0, count);
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,126,send(msg, false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,128,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,130,count = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,140,String key = (String)iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,150,msg.setGroupSequence((int)messageSequence);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFactory.java,43,throw IOExceptionSupport.create("Could load " + type + " factory:" + e, e);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,52,private Class load(String className, ClassLoader cl) throws ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,231,public int size() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,236,LOG.warn("Transport failed, attempting to automatically reconnect due to: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,243,reconnectTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,128,boolean pendingEmpty = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,130,enqueueCounter++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,131,if (optimizedDispatch && !isFull() && pendingEmpty && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,132,dispatch(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,134,optimizePrefetch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,136,if (pending.isEmpty() && LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,137,LOG.debug("Prefetch limit.");
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,139,pending.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,490,if(pending != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,247,public void dispatched(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,33,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,54,private boolean storeMayHaveMoreMessages = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,78,safeFillBatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,107,storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,114,storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,172,this.storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,211,this.storeMayHaveMoreMessages = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,213,while (this.batchList.isEmpty() && this.storeMayHaveMoreMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,214,this.storeMayHaveMoreMessages = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,218,this.storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,242,storeMayHaveMoreMessages = true;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,93,public int getMemoryPercentageUsed() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,142,return broker.getTemporaryTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerViewMBean.java,59,int getMemoryPercentageUsed();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,96,public int getMemoryPercentageUsed() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationViewMBean.java,122,int getMemoryPercentageUsed();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,79,return new Queue(broker.getRoot(), destination, memoryManager, null, destinationStatistics, taskRunnerFactory, broker.getTempDataStore()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,93,Queue queue = new Queue(broker.getRoot(), destination, memoryManager, store, destinationStatistics, taskRunnerFactory, broker.getTempDataStore());
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,129,entry.configure(queue, broker.getTempDataStore());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,53,this.pending = new StoreDurableSubscriberCursor(context.getClientId(), info.getSubscriptionName(), broker.getTempDataStore(), info.getPrefetchSize(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,200,public String getSubscriptionName() {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,201,return subscriptionKey.getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,209,public String getClientId() {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,210,return subscriptionKey.getClientId();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,111,public Queue(Broker broker, ActiveMQDestination destination, final SystemUsage systemUsage, MessageStore store, DestinationStatistics parentStats,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,112,TaskRunnerFactory taskFactory, Store tmpStore) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,119,if (destination.isTemporary() || tmpStore==null ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,122,this.messages = new StoreQueueCursor(this, tmpStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,359,broker.messageExpired(context, message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,754,MessageAck ack = new MessageAck();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,755,ack.setAckType(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,756,ack.setDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,757,ack.setMessageID(r.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,678,LOG.warn("Failed to send "+node+" to dead letter queue");
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,681,LOG.warn("Failed to pass expired message to dead letter queue",e);
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,44,return new Queue(broker.getRoot(), destination, usageManager, null, destinationStatistics, taskRunnerFactory, null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,203,String clientId = subscription.getClientId();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,204,String subscriptionName = subscription.getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,71,Store tempDataStore = broker.getTempDataStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,72,if (tempDataStore != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,73,this.matched = new FilePendingMessageCursor(matchedName, tempDataStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,50,private Iterator iter;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,61,public FilePendingMessageCursor(String name, Store store) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,63,this.store = store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,160,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,161,regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,162,if (isSpaceInMemoryList()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,163,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,164,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,166,flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,167,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,169,getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,172,throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,182,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,183,regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,184,if (isSpaceInMemoryList()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,185,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,186,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,194,throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,274,public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,279,flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,280,flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,315,e.printStackTrace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,32,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,61,public StoreDurableSubscriberCursor(String clientId, String subscriberName, Store store, int maxBatchSize, Subscription subscription) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,65,this.nonPersistent = new FilePendingMessageCursor(clientId + subscriberName, store);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,38,private Store tmpStore;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,50,public StoreQueueCursor(Queue queue, Store tmpStore) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,52,this.tmpStore = tmpStore;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,61,nonPersistent = new FilePendingMessageCursor(queue.getDestination(), tmpStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,43,public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,44,return new FilePendingMessageCursor(name, tmpStorage);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,41,public PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,42,return new FilePendingMessageCursor("PendingCursor:" + queue.getName(), tmpStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,41,public PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,42,int maxBatchSize) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,43,return new FilePendingMessageCursor("PendingCursor:" + name, tmpStorage);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy.java,40,PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy.java,38,PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy.java,20,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy.java,38,PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage, int maxBatchSize);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,28,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,61,public void configure(Queue queue, Store tmpStore) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,73,PendingMessageCursor messages = pendingQueuePolicy.getQueuePendingMessageCursor(queue, tmpStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,124,subscription.setMatched(pendingSubscriberPolicy.getSubscriberPendingMessageCursor(name, broker.getTempDataStore(), maxBatchSize));
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,129,String clientId = sub.getClientId();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,130,String subName = sub.getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,133,PendingMessageCursor cursor = pendingDurableSubscriberPolicy.getSubscriberPendingMessageCursor(clientId, subName, broker.getTempDataStore(), prefetch, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingDurableSubscriberMessageStoragePolicy.java,44,public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingDurableSubscriberMessageStoragePolicy.java,45,return new StoreDurableSubscriberCursor(clientId, name, tmpStorage, maxBatchSize, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,41,public PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,42,return new StoreQueueCursor(queue, tmpStore);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingDurableSubscriberMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingDurableSubscriberMessageStoragePolicy.java,42,public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingQueueMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingQueueMessageStoragePolicy.java,39,public PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,41,public PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,42,int maxBatchSize) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,255,callback.run();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,73,public void addMessageReference(final ConnectionContext context, final MessageId messageId,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,150,protected void acknowledge(ConnectionContext context, MessageId messageId,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,156,if (topicReferenceStore.acknowledgeReference(context, clientId,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,157,subscriptionName, messageId)) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,158,MessageAck ack = new MessageAck();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,159,ack.setLastMessageId(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,97,return destination.getBrokerMemoryUsage().getPercentUsage();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,101,return destination.getBrokerMemoryUsage().getLimit();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,105,destination.getBrokerMemoryUsage().setLimit(limit);
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,51,MemoryUsage getBrokerMemoryUsage();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,83,public MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,84,return next.getBrokerMemoryUsage();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,36,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,51,throws InvalidSelectorException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,360,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,386,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,471,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,59,import org.apache.activemq.store.PersistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,60,import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,314,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,414,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,233,sub = new DurableTopicSubscription(broker, usageManager, context, info, keepDurableSubsActive);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,234,ActiveMQDestination destination = info.getDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,70,queue.getBrokerMemoryUsage().setLimit(memoryLimit);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,94,topic.getBrokerMemoryUsage().setLimit(memoryLimit);
activemq-core/src/main/java/org/apache/activemq/command/Message.java,574,this.memoryUsage=regionDestination.getBrokerMemoryUsage();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,598,if (!deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,599,MessageDispatch md = deliveredMessages.getFirst();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,600,ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,601,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,602,ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,715,deliveredMessages.addFirst(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,733,if (!deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,734,if (optimizeAcknowledge) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,735,if (deliveryingAcknowledgements.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,736,ackCounter++;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,737,if (ackCounter >= (info.getCurrentPrefetchSize() * .65)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,738,MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,739,deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,740,session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,741,ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,742,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,744,deliveryingAcknowledgements.set(false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,747,MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredMessages
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,748,.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,749,session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,750,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,815,if (deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,816,return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,820,MessageDispatch lastMd = deliveredMessages.get(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,821,MessageAck ack = new MessageAck(lastMd, MessageAck.STANDARD_ACK_TYPE, deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,822,if (session.isTransacted()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,823,session.doStartTransaction();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,824,ack.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,826,session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,829,deliveredCounter -= deliveredMessages.size();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,830,additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,832,if (!session.isTransacted()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,833,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,838,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,848,for (int i = 0; (i < deliveredMessages.size()) && (i < ackCounter); i++) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,850,MessageDispatch md = deliveredMessages.removeLast();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,851,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,855,if (deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,856,return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,860,MessageDispatch lastMd = deliveredMessages.getFirst();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,861,if (lastMd.getMessage().getRedeliveryCounter() > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,862,redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,865,for (Iterator iter = deliveredMessages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,866,MessageDispatch md = (MessageDispatch)iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,867,md.getMessage().onMessageRolledBack();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,870,if (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,871,&& lastMd.getMessage().getRedeliveryCounter() > redeliveryPolicy.getMaximumRedeliveries()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,876,MessageAck ack = new MessageAck(lastMd, MessageAck.POSION_ACK_TYPE, deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,877,session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,879,session.connection.rollbackDuplicate(this, lastMd.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,881,additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,882,redeliveryDelay = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,885,MessageAck ack = new MessageAck(lastMd, MessageAck.REDELIVERED_ACK_TYPE, deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,886,session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,889,unconsumedMessages.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,893,unconsumedMessages.enqueueFirst(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,896,if (redeliveryDelay > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,898,Scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,899,public void run() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,900,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,901,if (started.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,902,start();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,905,session.connection.onAsyncException(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,910,start();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,914,deliveredCounter -= deliveredMessages.size();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,915,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,139,fireAdvisory(context, topic, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,63,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,77,final Broker broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,80,private final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,82,private final SystemUsage systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,83,private final MemoryUsage memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,86,private final LinkedList<MessageReference> pagedInMessages = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,90,private int garbageSize;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,91,private int garbageSizeBeforeCollection = 1000;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,93,private final MessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,96,private int maximumPagedInMessages = garbageSizeBeforeCollection * 2;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,113,this.broker = broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,114,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,115,this.systemUsage=systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,116,this.memoryUsage = new MemoryUsage(systemUsage.getMemoryUsage(), destination.toString());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,117,this.memoryUsage.setUsagePortion(1.0f);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,118,this.store = store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,130,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,131,store.setMemoryUsage(memoryUsage);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,135,this.destinationStatistics.setEnabled(parentStats.isEnabled());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,136,destinationStatistics.setParent(parentStats);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,210,maximumPagedInMessages += sub.getConsumerInfo().getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,499,public void dropEvent() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,500,dropEvent(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,503,public void dropEvent(boolean skipGc) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,505,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,506,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,507,garbageSize++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,509,if (!skipGc && garbageSize > garbageSizeBeforeCollection) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,510,gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,512,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,513,taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,515,log.warn("Task Runner failed to wakeup ", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,519,public void gc() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,520,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,521,for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,523,QueueMessageReference node = (QueueMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,524,if (node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,525,garbageSize--;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,526,i.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,527,continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,595,public String getDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,596,return destination.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,599,public MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,600,return memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,603,public DestinationStatistics getDestinationStatistics() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,604,return destinationStatistics;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,638,public String getName() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,639,return getActiveMQDestination().getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,658,public MessageStore getMessageStore() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,659,return store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,670,for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,742,public void purge() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,744,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,746,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,747,ConnectionContext c = createConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,748,for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,750,QueueMessageReference r = (QueueMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,758,acknowledge(c, null, ack, r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,759,r.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,760,dropEvent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,768,gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,805,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,806,int counter = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,807,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,808,ConnectionContext c = createConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,809,for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,810,IndirectMessageReference r = (IndirectMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,811,if (filter.evaluate(c, r)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,812,removeMessage(c, r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,813,if (++counter >= maximumMessages && maximumMessages > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,814,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,820,return counter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,856,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,857,int counter = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,858,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,859,for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,860,MessageReference r = i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,862,r.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,863,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,864,Message m = r.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,865,BrokerSupport.resend(context, m, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,866,if (++counter >= maximumMessages && maximumMessages > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,867,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,870,r.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,875,return counter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,906,public int moveMatchingMessagesTo(ConnectionContext context, MessageReferenceFilter filter, ActiveMQDestination dest, int maximumMessages) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,907,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,908,int counter = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,909,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,910,for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,911,IndirectMessageReference r = (IndirectMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,920,if (++counter >= maximumMessages && maximumMessages > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,921,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,930,return counter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,982,acknowledge(c, null, ack, r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,983,r.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,984,dropEvent();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1015,final int toPageIn = maximumPagedInMessages - pagedInMessages.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,49,protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,52,q.acknowledge(context, this, ack, n);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,57,node.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,58,queue.dropEvent();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,63,node.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,64,queue.dropEvent();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,51,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,58,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,72,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,74,protected final Valve dispatchValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,76,protected final TopicMessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,77,private final SystemUsage systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,78,private final MemoryUsage memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,96,private final Broker broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,100,this.broker = broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,101,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,103,this.systemUsage=systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,104,this.memoryUsage = new MemoryUsage(systemUsage.getMemoryUsage(), destination.toString());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,105,this.memoryUsage.setUsagePortion(1.0f);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,117,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,118,store.setMemoryUsage(memoryUsage);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,122,this.destinationStatistics.setEnabled(parentStats.isEnabled());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,123,this.destinationStatistics.setParent(parentStats);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,178,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,179,store.deleteSubscription(key.clientId, key.subscriptionName);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,198,if (store == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,206,SubscriptionInfo info = store.lookupSubscription(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,212,store.deleteSubscription(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,226,store.addSubsciption(info,subscription.getConsumerInfo().isRetroactive());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,232,store.recoverSubscription(clientId, subscriptionName, new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,400,store.addMessage(context, message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,444,if (store != null && node.isPersistent()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,446,store.acknowledge(context, dsub.getClientId(), dsub.getSubscriptionName(), node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,451,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,452,store.removeAllMessages(context);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,461,return store != null ? store.getMessage(messageId) : null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,485,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,486,store.recover(new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,525,public MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,526,return memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,529,public DestinationStatistics getDestinationStatistics() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,530,return destinationStatistics;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,533,public ActiveMQDestination getActiveMQDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,534,return destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,537,public String getDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,538,return destination.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,565,public MessageStore getMessageStore() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,566,return store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,577,public String getName() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,578,return getActiveMQDestination().getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,34,public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,36,for (Iterator iter = consumers.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,37,Subscription sub = (Subscription)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,40,if (sub.getConsumerInfo().isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,41,continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,44,if (!sub.matches(node, msgContext)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,45,continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,48,sub.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,49,count++;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,642,context.setConnection(this);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,646,context.setClientId(clientId);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,648,context.setConnectionId(info.getConnectionId());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,649,context.setClientMaster(info.isClientMaster());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,651,context.setNetworkConnection(networkConnection);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,100,rc.setUri(uri);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,101,rc.setConnectUri(connectUri);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,102,rc.setDiscoveryAgent(discoveryAgent);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,103,rc.setDiscoveryUri(discoveryUri);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,104,rc.setName(name);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,105,rc.setDisableAsyncDispatch(disableAsyncDispatch);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,106,rc.setBrokerInfo(brokerInfo);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,81,broker = BrokerFactory.createBroker(new URI(brokerXmlConfig));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,82,broker.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,84,throw new ResourceAdapterInternalException("Failed to startup an embedded broker: " + brokerXmlConfig + ", due to: " + e, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,179,if (broker != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,180,ServiceSupport.dispose(broker);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,181,broker = null;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,304,for (Iterator i = container.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,305,ConsumerMessageRef ref = (ConsumerMessageRef)i.next();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,306,if (ref != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,307,TopicSubAck tsa = ackContainer.get(ref.getAckEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,308,if (tsa != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,309,if (tsa.decrementCount() <= 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,310,ackContainer.remove(ref.getAckEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,311,messageContainer.remove(tsa.getMessageEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,313,ackContainer.update(ref.getAckEntry(), tsa);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,28,import javax.jms.Destination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,97,protected ResponseHandler createResponseHandler(StompFrame command) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,103,StompFrame sc = new StompFrame();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,104,sc.setAction(Stomp.Responses.RECEIPT);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,105,sc.setHeaders(new HashMap<String, String>(1));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,106,sc.getHeaders().put(Stomp.Headers.Response.RECEIPT_ID, receiptId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,107,transportFilter.sendToStomp(sc);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,165,ByteArrayOutputStream baos = new ByteArrayOutputStream();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,166,PrintWriter stream = new PrintWriter(new OutputStreamWriter(baos, "UTF-8"));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,167,e.printStackTrace(stream);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,168,stream.close();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,170,HashMap<String, String> headers = new HashMap<String, String>();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,171,headers.put(Stomp.Headers.Error.MESSAGE, e.getMessage());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,173,final String receiptId = command.getHeaders().get(Stomp.Headers.RECEIPT_REQUESTED);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,174,if (receiptId != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,175,headers.put(Stomp.Headers.Response.RECEIPT_ID, receiptId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,178,StompFrame errorMessage = new StompFrame(Stomp.Responses.ERROR, headers, baos.toByteArray());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,179,sendToStomp(errorMessage);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,181,if (e.isFatal()) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,182,getTransportFilter().onException(e);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,396,protected void onStompConnect(StompFrame command) throws ProtocolException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,199,Thread thread = new Thread(r, "AcitveMQ Connection Worker: " + transport);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,118,return getContext().isSlave();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,146,if (low > size()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,147,LOG.info("SIZE() " + size() + " low = " + low);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,211,pageToUse.begin();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,65,private int pageCacheSize = 1;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPageInfo.java,91,page = hashIndex.getFullPage(id);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,28,private static final class SchedulerTimerTask extends TimerTask {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,29,private final Runnable task;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,31,private SchedulerTimerTask(Runnable task) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,32,this.task = task;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,35,public void run() {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,36,task.run();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,71,LOG.trace("A send is in progress");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,76,LOG.trace("No message sent since last write check, sending a KeepAliveInfo");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,78,Thread thread = new Thread("ActiveMQ: Activity Generator: "+next.getRemoteAddress()) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,87,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,88,thread.start();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,90,LOG.trace("Message sent since last write check, resetting flag");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,98,LOG.trace("A receive is in progress");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,103,LOG.debug("No message received since last read check for " + toString() + "! Throwing InactivityIOException.");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,106,Thread thread = new Thread("ActiveMQ: Inactivity Handler: "+next.getRemoteAddress()) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,111,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,112,thread.start();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,115,LOG.trace("Message received since last read check, resetting flag: ");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,141,commandReceived.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,183,long l = Math.min(localWireFormatInfo.getMaxInactivityDuration(), remoteWireFormatInfo.getMaxInactivityDuration());
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,184,if (l > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,186,Scheduler.executePeriodically(writeChecker, l / 2);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,187,Scheduler.executePeriodically(readChecker, l);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,196,Scheduler.cancel(readChecker);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,197,Scheduler.cancel(writeChecker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,397,if (configuration.isDuplex() || createdByDuplex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,572,if (!message.isResponseRequired()) {
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,79,ThreadPoolExecutor rc = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,151,LOG.info("AMQStore starting using directory: " + directory);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,152,this.directory.mkdirs();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,448,LOG.info("Kaha Store using data directory " + directory);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,504,System.getProperties().remove(getPropertyKey());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,56,private static final Log LOG = LogFactory.getLog(KahaPersistenceAdapter.class);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,90,Store store = getStateStore();
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,46,list.add(new BitArray());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,130,addMessage(message, location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,156,try {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,157,asyncWriteTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,159,throw new InterruptedIOException();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,236,if (data == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,50,private Map<SubscriptionKey, MessageId> ackedLastAckLocations = new HashMap<SubscriptionKey, MessageId>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,163,try {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,164,asyncWriteTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,166,throw new InterruptedIOException();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,89,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,90,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,66,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,75,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,jsCache.put(resource, data);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,175,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,176,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,177,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,229,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,106,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,207,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,80,return -1;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,96,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,112,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,24,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,26,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,252,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,31,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,33,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,70,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,74,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,174,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,130,String clientId = activationSpec.getClientId();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,39,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,40,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,25,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.http.HttpServletResponse;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,158,log.debug("Running");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,160,log.debug("run loop start");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,187,log.debug("Run finished");
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,29,private static final Executor DEFAULT_POOL;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,30,static {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,31,DEFAULT_POOL = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,32,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,33,Thread thread = new Thread(runnable, "ActiveMQ Default Thread Pool Thread");
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,34,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,35,return thread;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,44,public static Executor getDefaultPool() {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,45,return DEFAULT_POOL;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,34,public class TaskRunnerFactory {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,152,selection.disable();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,23,import java.util.concurrent.Executors;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,39,private Executor selectorExecutor = Executors.newCachedThreadPool(new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,40,public Thread newThread(Runnable r) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,41,Thread rc = new Thread(r);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,42,rc.setName("NIO Transport Thread");
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,43,return rc;
