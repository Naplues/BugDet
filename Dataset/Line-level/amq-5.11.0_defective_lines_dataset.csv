File,Line_number,SRC
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,509,this.store.referenceRemovedLocation(tx, location, removed);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,593,this.store.referenceRemovedLocation(tx, location, job);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,400,boolean orphanedRemve = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,407,orphanedRemve = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,414,if (!orphanedRemve) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,415,LOG.trace("A remove in log {} has an add still in existance.", entry.getKey());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,674,if (tracked == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,357,for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,358,Map.Entry entry = (Map.Entry) iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,359,msg.setObjectProperty((String) entry.getKey(), entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,379,connection.close();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,90,for (String selector : selectors) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,91,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,92,final BooleanExpression expression = getExpression(selector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,93,matches = expression.matches(msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,94,if (matches) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,95,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,98,LOG.error(e.getMessage(), e);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,43,return load(classDesc.getName(), cl, inLoader);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,54,return Proxy.getProxyClass(cl, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Proxy.getProxyClass(inLoader, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,62,return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,67,throw new ClassNotFoundException(null, e);
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,97,public XStream getXStream() {
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,113,XStream xstream = new XStream();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,94,throw new Exception("Unkown transformation: " + transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,257,xstream = new XStream();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,86,return e;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,350,fireBridgeFailed(new Throwable("remoteBrokerInfo is null"));
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,361,fireBridgeFailed(new Throwable("localBrokerInfo is null"));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,275,InputStream in = null;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,277,if ((in = BrokerService.class.getResourceAsStream("/org/apache/activemq/version.txt")) != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,278,BufferedReader reader = new BufferedReader(new InputStreamReader(in));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,279,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,280,version = reader.readLine();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,41,Map properties = loadProperties(brokerURI);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,51,protected Map loadProperties(URI brokerURI) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,58,if (file.exists()) {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,75,if (inputStream != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,76,properties.load(inputStream);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,77,inputStream.close();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,81,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,82,Properties systemProperties = System.getProperties();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,83,properties.putAll(systemProperties);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,87,return properties;
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,98,protected BrokerService createBrokerService(URI brokerURI, Map properties) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,284,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,285,int len = in.read(buffer);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,286,while (len >= 0) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,287,out.write(buffer, 0, len);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,288,len = in.read(buffer);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,290,in.close();
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,291,out.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,131,InputStream tsStream = getInputStream(trustStore);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,133,trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,134,TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,136,tmf.init(trustedCertStore);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,137,trustStoreManagers = tmf.getTrustManagers();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,150,ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,151,ks.load(bin, keyStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,152,kmf.init(ks, keyStoreKeyPassword !=null ? keyStoreKeyPassword.toCharArray() : keyStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,153,keystoreManagers = kmf.getKeyManagers();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,163,InputStream in = getInputStream(fileName);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,164,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,165,byte[] buf = new byte[512];
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,166,int i = in.read(buf);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,167,while (i > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,168,out.write(buf, 0, i);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,169,i = in.read(buf);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,171,in.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,172,return out.toByteArray();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,43,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,58,OutputStream os = connection.getOutputStream();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,60,byte[] buf = new byte[transferPolicy.getBufferSize()];
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,61,for (int c = fis.read(buf); c != -1; c = fis.read(buf)) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,62,os.write(buf, 0, c);
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,63,os.flush();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,65,os.close();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,66,fis.close();
activemq-client/src/main/java/org/apache/activemq/blob/FTPBlobUploadStrategy.java,42,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,68,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,77,FileOutputStream out = new FileOutputStream(f);
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,78,byte[] buffer = new byte[policy.getBufferSize()];
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,79,for (int c = in.read(buffer); c != -1; c = in.read(buffer)) {
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,80,out.write(buffer, 0, c);
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,81,out.flush();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,83,out.flush();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,84,out.close();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,126,String fileName = message.getJMSMessageID().replaceAll(":", "_");
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,127,return new File(rootFile, fileName);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,194,FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,195,destinationChannel.write(buf);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,196,destinationChannel.close();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,218,FileChannel sourceChannel = new FileInputStream(from).getChannel();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,219,FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,220,sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,221,sourceChannel.close();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,222,destinationChannel.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,108,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,109,int len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,110,while (len >= 0) {
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,111,out.write(buffer, 0, len);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,112,len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,114,in.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,115,out.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,119,MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,120,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,91,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,94,in.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,142,InputStream is = blob.getBinaryStream();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,144,ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,145,int ch;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,146,while ((ch = is.read()) >= 0) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,147,os.write(ch);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,149,is.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,150,os.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,152,return os.toByteArray();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,50,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,51,InputStream is = rs.getBinaryStream(index);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,52,ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,58,is.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,59,os.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,199,RandomAccessFile file = new RandomAccessFile(tmpFile, "r");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,200,file.seek(diskBoundLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,201,file.read(diskBound);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,202,file.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,20,import java.io.IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,206,RandomAccessFile raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,207,raf.setLength(size);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,210,long start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,211,long now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,212,int ioCount = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,213,while (true) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,214,if ((now - start) > sampleInterval) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,215,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,217,raf.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,218,for (long i = 0; i + data.length < size; i += data.length) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,219,raf.write(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,220,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,221,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,230,raf.getChannel().force(!SKIP_METADATA_UPDATE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,231,raf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,238,raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,239,start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,240,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,241,ioCount = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,242,while (true) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,243,if ((now - start) > sampleInterval) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,244,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,246,for (long i = 0; i + data.length < size; i += data.length) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,247,raf.seek(i);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,248,raf.write(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,249,raf.getChannel().force(false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,250,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,251,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,257,raf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,262,raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,263,start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,264,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,265,ioCount = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,266,while (true) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,267,if ((now - start) > sampleInterval) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,268,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,270,raf.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,271,for (long i = 0; i + data.length < size; i += data.length) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,272,raf.seek(i);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,273,raf.readFully(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,274,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,275,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,281,raf.close();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,86,InputStream in = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,88,if ((in = ProtocolConverter.class.getResourceAsStream("/org/apache/activemq/version.txt")) != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,89,BufferedReader reader = new BufferedReader(new InputStreamReader(in));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,90,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,91,version = reader.readLine();
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java,297,LOG.info("Loading properties file: " + configFile.getAbsolutePath());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java,298,fileProps.load(new FileInputStream(configFile));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,379,BufferedReader br = new BufferedReader(new FileReader(f));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,381,String tmp = null;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,382,while ((tmp = br.readLine()) != null) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,383,payload.append(tmp);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,385,br.close();
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,198,BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempLogFile)));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,199,String line;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,200,while ((line = reader.readLine()) != null) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,201,if (line.startsWith("[TP-DATA]")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,202,handleCsvData(REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,203,parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,205,handleCsvData(REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,206,parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,208,xmlFileWriter.println("<info>" + line + "</info>");
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,210,xmlFileWriter.println("<error>" + line + "</error>");
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,74,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,79,jsCache.put(resource, data);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,327,CronEntry dayOfMonth = new CronEntry("DayOfMonth", tokens.get(DAY_OF_MONTH), 1, 31);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,143,long delay = ( redeliveryCount == 0 ?
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,144,redeliveryPolicy.getInitialRedeliveryDelay() :
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,145,redeliveryPolicy.getNextRedeliveryDelay(getExistingDelay(messageReference)));
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,202,private int getExistingDelay(MessageReference messageReference) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,203,Object val = messageReference.getMessage().getProperty(REDELIVERY_DELAY);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,204,if (val instanceof Long) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,205,return ((Long)val).intValue();
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,207,return 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,31,import org.apache.activemq.DestinationDoesNotExistException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,169,dest.addSubscription(context, sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,266,return getDispatchedQueueSize() - info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,628,destination.getDestinationStatistics().getDispatched().subtract(references.size());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,940,md.getMessage().onMessageRolledBack();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,959,&& redeliveryCounter > redeliveryPolicy.getMaximumRedeliveries()) {
activemq-client/src/main/java/org/apache/activemq/RedeliveryPolicy.java,101,long nextDelay = redeliveryDelay;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,19,import java.util.Map;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,27,import org.apache.camel.converter.ObjectConverter;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,70,private ActiveMQMessage getMessage(Exchange exchange) throws Exception {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,71,ActiveMQMessage result;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,72,Message camelMessage;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,74,camelMessage = exchange.getOut();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,76,camelMessage = exchange.getIn();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,79,Map<String, Object> headers = camelMessage.getHeaders();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,86,if (camelMessage instanceof JmsMessage) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,87,JmsMessage jmsMessage = (JmsMessage) camelMessage;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,88,if (jmsMessage.getJmsMessage() instanceof ActiveMQMessage) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,89,result = (ActiveMQMessage) jmsMessage.getJmsMessage();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,91,setJmsHeaders(result, headers);
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,93,throw new IllegalStateException("Not the original message from the broker " + jmsMessage.getJmsMessage());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,99,return result;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,102,private void setJmsHeaders(ActiveMQMessage message, Map<String, Object> headers) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,103,message.setReadOnlyProperties(false);
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,105,if (entry.getKey().equalsIgnoreCase("JMSDeliveryMode")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,106,Object value = entry.getValue();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,107,if (value instanceof Number) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,108,Number number = (Number) value;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,109,message.setJMSDeliveryMode(number.intValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,112,if (entry.getKey().equalsIgnoreCase("JmsPriority")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,113,Integer value = ObjectConverter.toInteger(entry.getValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,114,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,115,message.setJMSPriority(value.intValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,118,if (entry.getKey().equalsIgnoreCase("JMSTimestamp")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,119,Long value = ObjectConverter.toLong(entry.getValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,120,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,121,message.setJMSTimestamp(value.longValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,124,if (entry.getKey().equalsIgnoreCase("JMSExpiration")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,125,Long value = ObjectConverter.toLong(entry.getValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,126,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,127,message.setJMSExpiration(value.longValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,130,if (entry.getKey().equalsIgnoreCase("JMSRedelivered")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,131,message.setJMSRedelivered(ObjectConverter.toBool(entry.getValue()));
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,133,if (entry.getKey().equalsIgnoreCase("JMSType")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,134,Object value = entry.getValue();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,135,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,136,message.setJMSType(value.toString());
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,22,import java.io.BufferedReader;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,25,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,54,private final ConcurrentHashMap<String, Class> serviceCache = new ConcurrentHashMap<String, Class>();
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,106,if( !isImportingUs(bundle) ) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,107,debug("The bundle does not import us: "+ bundle.getBundleId());
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,108,return;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,110,bundleWrappers.put(bundle.getBundleId(), new BundleWrapper(bundle));
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,137,Class clazz = serviceCache.get(path);
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,209,|| isImportingClass(bundle, PersistenceAdapter.class);
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,212,private boolean isImportingClass(Bundle bundle, Class clazz) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,213,try {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,214,return bundle.loadClass(clazz.getName())==clazz;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,216,return false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,23,import java.util.*;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,81,List<PersistenceAdapter> adapters = new LinkedList<PersistenceAdapter>();
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,348,&& ni.isUp()) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,349,for (InterfaceAddress ia : ni.getInterfaceAddresses()) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,350,if (ia.getAddress() instanceof java.net.Inet4Address
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,352,&& !ni.getDisplayName().startsWith("vnic")) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,353,possibles.add(ni);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,108,void doCommitAddOp(TransactionContext c, long storeSequenceIdForMessageId) throws SQLException, IOException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,73,final Set<Long> recoveredAdditions = new LinkedHashSet<Long>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,130,pendingAdditions.add(sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,131,c.onCompletion(new Runnable() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,132,public void run() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,135,message.getMessageId().setFutureOrSequenceLong(sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,136,message.getMessageId().setEntryLocator(sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,140,if (indexListener != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,141,indexListener.onAdd(new IndexListener.MessageContext(context, message, new Runnable() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,145,synchronized (pendingAdditions) { pendingAdditions.remove(sequence); }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,149,pendingAdditions.remove(sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,154,this.isPrioritizedMessages() ? message.getPriority() : 0, context != null ? context.getXid() : null);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,161,onAdd(message, sequenceId, message.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,189,protected void onAdd(Message message, long sequenceId, byte priority) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,191,&& lastRecoveredSequenceId.get() > 0 && sequenceId < lastRecoveredSequenceId.get()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,192,recoveredAdditions.add(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,332,if (!recoveredAdditions.isEmpty()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,333,for (Iterator<Long> iterator = recoveredAdditions.iterator(); iterator.hasNext(); )  {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,334,Long sequenceId = iterator.next();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,335,iterator.remove();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,336,maxReturned--;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,337,if (sequenceId <= lastRecoveredSequenceId.get()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,338,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(adapter.doGetMessageById(c, sequenceId)));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,339,LOG.trace("recovered add {} {}", this, msg.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,340,listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,769,public void commitAdd(ConnectionContext context, MessageId messageId) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,772,long sequence = (Long)messageId.getFutureOrSequenceLong();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,773,getAdapter().doCommitAddOp(c, sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,93,updateFromPreparedStateCommands.add(new AddMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,95,public Message getMessage() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,96,return addMessageCommand.getMessage();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,100,public MessageStore getMessageStore() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,101,return addMessageCommand.getMessageStore();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,105,public void run(ConnectionContext context) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,106,JDBCPersistenceAdapter jdbcPersistenceAdapter = (JDBCPersistenceAdapter) persistenceAdapter;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,107,Message message = addMessageCommand.getMessage();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,108,jdbcPersistenceAdapter.commitAdd(context, message.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,109,((JDBCMessageStore)addMessageCommand.getMessageStore()).onAdd(
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,110,message,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,111,(Long)message.getMessageId().getFutureOrSequenceLong(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,112,message.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,117,public void setMessageStore(MessageStore messageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,118,throw new RuntimeException("MessageStore already known");
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,122,tx.messages = updateFromPreparedStateCommands;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,123,preparedTransactions.put(txid, tx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,152,((JDBCPersistenceAdapter) persistenceAdapter).commitAdd(ctx,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,153,removeMessageCommand.getMessageAck().getLastMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,175,tx.add(new AddMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,176,MessageStore messageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,178,public Message getMessage() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,179,return message;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,183,public MessageStore getMessageStore() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,184,return messageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,188,public void run(ConnectionContext context) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,189,((JDBCPersistenceAdapter)persistenceAdapter).commitAdd(null, message.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,190,((JDBCMessageStore)messageStore).onAdd(message, ((Long)message.getMessageId().getFutureOrSequenceLong()).longValue(), message.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,194,public void setMessageStore(MessageStore messageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,195,this.messageStore = messageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,620,+ " SET XID = NULL WHERE ID = ?";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1051,public void doCommitAddOp(TransactionContext c, long sequence) throws SQLException, IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1675,final TreeSet<Integer> gcCandidates = new TreeSet<Integer>(gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1682,if (completeFileSet.contains(referencedFileId) && !gcCandidates.contains(referencedFileId)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,901,ProducerContext producerContext = new ProducerContext(producerId, dest, anonymous);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,24,import javax.jms.*;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,54,private final GenericKeyedObjectPool<SessionKey, Session> sessionPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,64,this.sessionPool = new GenericKeyedObjectPool<SessionKey, Session>(
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,65,new KeyedPoolableObjectFactory<SessionKey, Session>() {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,68,public void activateObject(SessionKey key, Session session) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,72,public void destroyObject(SessionKey key, Session session) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,77,public Session makeObject(SessionKey key) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,78,return makeSession(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,82,public void passivateObject(SessionKey key, Session session) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,86,public boolean validateObject(SessionKey key, Session session) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,38,import javax.jms.IllegalStateException;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,166,PooledSession result;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,167,result = (PooledSession) pool.createSession(transacted, ackMode);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,58,private final KeyedObjectPool<SessionKey, Session> sessionPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,64,private MessageProducer producer;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,65,private TopicPublisher publisher;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,66,private QueueSender sender;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,68,private Session session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,74,public PooledSession(SessionKey key, Session session, KeyedObjectPool<SessionKey, Session> sessionPool, boolean transactional, boolean anonymous) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,76,this.session = session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,143,if (session != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,145,session.close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,151,sessionPool.invalidateObject(key, session);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,157,sessionPool.returnObject(key, session);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,165,session = null;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,279,if (session instanceof XASession) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,280,return ((XASession) session).getXAResource();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,293,session.run();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,382,if (session == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,383,throw new IllegalStateException("The session has already been closed");
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,385,return session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,396,if (producer == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,398,synchronized (this) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,399,if (producer == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,400,producer = getInternalSession().createProducer(null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,405,result = producer;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,421,if (sender == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,423,synchronized (this) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,424,if (sender == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,425,sender = ((QueueSession) getInternalSession()).createSender(null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,430,result = sender;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,446,if (publisher == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,448,synchronized (this) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,449,if (publisher == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,450,publisher = ((TopicSession) getInternalSession()).createPublisher(null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,455,result = publisher;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,492,return "PooledSession { " + session + " }";
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,199,public Object chooseValue(ActiveMQDestination destination) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,204,SortedSet sortedSet = new TreeSet(set);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1789,static protected class MessageKeysMarshaller extends VariableMarshaller<MessageKeys> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1790,static final MessageKeysMarshaller INSTANCE = new MessageKeysMarshaller();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1794,return new MessageKeys(dataIn.readUTF(), LocationMarshaller.INSTANCE.readPayload(dataIn));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1800,LocationMarshaller.INSTANCE.writePayload(object.location, dataOut);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2816,defaultPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2819,lowPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2822,highPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,423,if (subscription != null){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,424,subscription.resetConsumedCount();
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,61,return getXStream().fromXML(reader);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,227,long x = s1.getConsumerInfo().getAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,228,long y = s2.getConsumerInfo().getAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2099,subscription.getConsumerInfo().decrementAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2115,subs.getConsumerInfo().incrementAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/group/CachedMessageGroupMap.java,47,s.getConsumerInfo().decrementAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/group/CachedMessageGroupMap.java,93,s.getConsumerInfo().clearAssignedGroupCount();
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,66,private transient long assignedGroupCount;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,497,public void incrementAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,498,this.assignedGroupCount++;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,501,public void clearAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,502,this.assignedGroupCount=0;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,505,public void decrementAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,506,this.assignedGroupCount--;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,509,public long getAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,510,return assignedGroupCount;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,219,LOG.info("Corrupt journal records found in '"+dataFile.getFile()+"' between offsets: "+sequence);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,374,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,395,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,420,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,23,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,45,private final Map<MessageId, Object> audit = new HashMap<MessageId, Object>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,71,if (!audit.containsKey(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,72,audit.put(messageId, Boolean.TRUE);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,73,return false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,76,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,136,if (map.values().contains(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,137,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,140,for (PendingNode value : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,141,if (value.getMessage().equals(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,142,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,70,assert mappedDestinations.size() < 2;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,229,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,653,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,205,Message messageSend = (Message) this.wireFormat.unmarshal(packet);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,244,messageSend.setMessageId(new MessageId(this.producerId, this.messageIdGenerator.getNextSequenceId()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,96,String converted = convertMQTTToActiveMQ(topicName);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1043,if (data instanceof KahaSubscriptionCommand) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1044,KahaSubscriptionCommand kahaSubscriptionCommand = (KahaSubscriptionCommand)data;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1045,if (kahaSubscriptionCommand.hasSubscriptionInfo()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1047,LOG.debug("ignoring add sub command during recovery replay:" + data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1048,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,23,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,306,throw new UnsupportedOperationException("You cannot dynamically change the selector for durable topic subscriptions");
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,152,if (destination == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,157,if (destination.isQueue() == destination2.isQueue()) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,205,return sortedSet.last();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2043,if (storeLimit > dirFreeSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2047,dirFreeSpace / (1024 * 1024) + " mb.");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2048,usage.getTempUsage().setLimit(dirFreeSpace);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,421,ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,446,ConnectionContext context = new ConnectionContext();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,76,if (text == null && getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,77,text = decodeContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,84,private String decodeContent() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,86,if (getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,89,ByteSequence bodyAsBytes = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,90,if (bodyAsBytes != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,91,is = new ByteArrayInputStream(bodyAsBytes);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,92,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,93,is = new InflaterInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,95,DataInputStream dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,96,text = MarshallingSupport.readUTF8(dataIn);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,97,dataIn.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,138,MarshallingSupport.writeUTF8(dataOut, this.text);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,185,text = decodeContent();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,42,import org.apache.activemq.broker.jmx.ProducerViewMBean;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,130,DestinationViewMBean destinationViewMBean = iter.next();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,131,if (name.equals(destinationViewMBean.getName())) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,132,return destinationViewMBean;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,116,storeContent();
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,61,DemandSubscription sub = createDemandSubscription(dest);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,62,sub.setStaticallyIncluded(true);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,63,if (dest.isTopic()) {
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,64,sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,67,addSubscription(sub);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,827,if (session.isClientAcknowledge()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,222,protected Object sendMutex = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,if (!isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,67,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,unregisterMBean(byClientIdName);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,unregisterMBean(byAddressName);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,70,byClientIdName = null;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,byAddressName = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,290,if (node.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,291,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,292,Destination regionDestination = nodeDest;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,293,regionDestination.messageExpired(context, this, node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,295,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,296,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,301,if (bytesRead == 0) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,344,while (true) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,345,switch (sslEngine.getHandshakeStatus()) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,346,case NEED_UNWRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,347,secureRead(ByteBuffer.allocate(sslSession.getApplicationBufferSize()));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,348,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,349,case NEED_TASK:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,350,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,351,while ((task = sslEngine.getDelegatedTask()) != null) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,352,taskRunnerFactory.execute(task);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,354,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,355,case NEED_WRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,356,((NIOOutputStream) buffOut).write(ByteBuffer.allocate(0));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,357,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,358,case FINISHED:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,359,case NOT_HANDSHAKING:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,360,finishHandshake();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,361,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2894,if (defaultPriorityIndex.containsKey(tx, sequence)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2895,lastDefaultKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2896,cursor.defaultCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2898,lastHighKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2899,cursor.highPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2901,lastLowKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2902,cursor.lowPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2904,lastDefaultKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2905,cursor.defaultCursorPosition = nextPosition.longValue();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,253,private int storeOpenWireVersion = OpenWireFormat.DEFAULT_VERSION;
activemq-client/src/main/java/org/apache/activemq/command/CommandTypes.java,30,byte PROTOCOL_STORE_VERSION = 6;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,41,public static final int DEFAULT_VERSION = CommandTypes.PROTOCOL_STORE_VERSION;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,69,this(DEFAULT_VERSION);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,128,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,211,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,249,dataOut.writeInt(size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,279,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,302,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,346,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,385,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,412,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,425,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,458,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,476,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,212,LOG.warn("Recovered Store uses a different OpenWire version[{}] " +
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,130,protected int openwireVersion = OpenWireFormat.DEFAULT_VERSION;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,166,openwireVersion = OpenWireFormat.DEFAULT_VERSION;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1042,if (!isEmptyTopic(entry, tx)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1043,rc.add(convert(entry.getKey()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1049,throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1050,boolean isEmptyTopic = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1051,ActiveMQDestination dest = convert(entry.getKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1052,if (dest.isTopic()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1053,StoredDestination loadedStore = getStoredDestination(convert(dest), tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1054,if (loadedStore.subscriptionAcks.isEmpty(tx)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1055,isEmptyTopic = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1058,return isEmptyTopic;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,274,if (adapter instanceof PersistenceAdapter) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,289,if (adapter instanceof PersistenceAdapter) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,297,if (adapter.getDestinations().isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,298,stopAdapter(adapter, destination.toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,299,File adapterDir = adapter.getDirectory();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,300,if (adapterDir != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,301,if (IOHelper.deleteFile(adapterDir)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,302,if (LOG.isTraceEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,303,LOG.info("deleted per destination adapter directory for: " + destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,306,if (LOG.isTraceEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,307,LOG.info("failed to deleted per destination adapter directory for: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,55,private final boolean keepDurableSubsActive;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,191,this.usageManager.getMemoryUsage().removeUsageListener(this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,654,if( !isDropped(node) && canDispatch(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,658,if (node!=QueueMessageReference.NULL_MESSAGE && node.isExpired()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,496,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,497,LOG.debug(getConsumerId() + " received expired message: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,505,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,506,LOG.debug(getConsumerId() + " received with excessive redelivered: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,723,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,724,LOG.debug("remove: " + this.getConsumerId() + ", lastDeliveredSequenceId:" + lastDeliveredSequenceId);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,743,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,744,LOG.debug(getConsumerId() + " clearing unconsumed list (" + unconsumedMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,851,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,852,LOG.debug("on close, rollback duplicate: " + old.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1032,if ( !oldPendingAck.isDeliveredAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1033,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1034,LOG.debug("Sending old pending ack " + oldPendingAck + ", new pending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1038,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1039,LOG.debug("dropping old pending ack " + oldPendingAck + ", new pending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1046,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1047,LOG.debug("ackLater: sending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1140,LOG.info("waiting for redelivery of " + numberNotReplayed + " in transaction: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1141,+ previouslyDeliveredMessages.transactionId +  ", to consumer :" + this.getConsumerId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1163,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1164,LOG.debug("previously delivered message has not been replayed in transaction: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1165,+ previouslyDeliveredMessages.transactionId
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1166,+ " , messageId: " + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1340,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1341,LOG.trace("rollback non redelivered: " + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1398,LOG.error(getConsumerId() + " Exception while processing message: " + md.getMessage().getMessageId(), e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1423,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1424,LOG.debug("{} tracking transacted redelivery {}", getConsumerId(), md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1492,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1493,LOG.debug(getConsumerId() + " tracking existing transacted " + previouslyDeliveredMessages.transactionId +
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1498,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1499,LOG.debug(getConsumerId() + " rolling back delivered list (" + deliveredMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1508,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1509,LOG.debug(getConsumerId() + " clearing delivered list (" + deliveredMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1610,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1611,LOG.info("Consumer:{} is performing scheduled delivery of outstanding optimized Acks", info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,664,continue;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,90,void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long maxSeq, long nextSeq, long priority, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,25,import java.util.concurrent.atomic.AtomicLong;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,71,protected AtomicLong lastRecoveredSequenceId = new AtomicLong(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,72,protected AtomicLong lastRecoveredPriority = new AtomicLong(Byte.MAX_VALUE -1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,345,LOG.trace(this + " recoverNext lastRecovered:" + lastRecoveredSequenceId.get() + ", minPending:" + minPendingSequeunceId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,347,adapter.doRecoverNextMessages(c, destination, minPendingSequeunceId(), lastRecoveredSequenceId.get(), lastRecoveredPriority.get(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,355,lastRecoveredSequenceId.set(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,356,lastRecoveredPriority.set(msg.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,382,LOG.trace(this + " resetBatching, existing last recovered seqId: " + lastRecoveredSequenceId.get());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,384,lastRecoveredSequenceId.set(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,393,lastRecoveredSequenceId.set(storedValues[0]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,394,lastRecoveredPriority.set(storedValues[1]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,396,lastRecoveredSequenceId.set(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,397,lastRecoveredPriority.set(Byte.MAX_VALUE -1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,401,+ ", priority: " + lastRecoveredPriority.get());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,501,+ " WHERE CONTAINER=? AND ID > ? AND ID < ? AND XID IS NULL ORDER BY ID";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1088,public void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long maxSeq, long lastRecoveredSeq,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1089,long priority, int maxReturned, boolean isPrioritizedMessages, JDBCMessageRecoveryListener listener) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1101,s.setLong(2, lastRecoveredSeq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1102,s.setLong(3, maxSeq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1104,s.setLong(4, priority);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1105,s.setLong(5, priority);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,21,import java.util.Iterator;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,22,import java.util.LinkedHashSet;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,24,import java.util.Set;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,385,lastRecoveredPriority.set(Byte.MAX_VALUE - 1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1099,s.setMaxRows(Math.min(maxReturned * 2, maxRows));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,250,private boolean rewriteOnRedelivery = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2139,for(Long sequenceId : pendingAcks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2221,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2222,sd.messageReferences.put(ackPosition, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2245,sd.messageReferences.put(messageSequence+1, Long.valueOf(0L));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2308,if (count != null){
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2309,long references = count.longValue() - 1;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,161,throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,74,protected ThreadPoolExecutor connectionSerivce;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,119,connectionSerivce = createExecutor();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,172,ThreadPoolUtils.shutdown(connectionSerivce);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,173,connectionSerivce = null;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,512,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,537,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,552,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,565,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,590,do
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,599,if (connectionSerivce.isTerminating()) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,628,while (maxRetries < ++attempt && !connectionSerivce.isTerminating());
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,31,private int maxReconnectAttempts = -1;
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,32,private int maxInitialConnectAttempts = -1;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,21,import org.apache.activemq.command.Command;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,43,Connection outbound;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,52,LOG.debug("Waiting for StompSocket to be properly started...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,56,LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,76,public void onOpen(Connection connection) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,77,this.outbound = connection;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,112,public void oneway(Object command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,113,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,114,getProtocolConverter().onActiveMQCommand((Command) command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,116,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,121,public void sendToActiveMQ(Command command) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,122,doConsume(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,126,public void sendToMQTT(MQTTFrame command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,127,ByteSequence bytes = wireFormat.marshal(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,128,outbound.sendMessage(bytes.getData(), 0, bytes.getLength());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,21,import org.apache.activemq.command.Command;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,45,Session session;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,81,public void oneway(Object command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,82,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,83,getProtocolConverter().onActiveMQCommand((Command) command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,85,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,90,public void sendToActiveMQ(Command command) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,91,doConsume(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,95,public void sendToMQTT(MQTTFrame command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,96,ByteSequence bytes = wireFormat.marshal(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,97,session.getRemote().sendBytes(ByteBuffer.wrap(bytes.getData(), 0, bytes.getLength()));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,123,LOG.debug("Waiting for StompSocket to be properly started...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,127,LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,209,synchronized void startConnectChecker(long connectionTimeout) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,63,private long connectAttemptTimeout = MQTTWireFormat.DEFAULT_CONNECTION_TIMEOUT;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,219,return connectAttemptTimeout;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,230,this.connectAttemptTimeout = connectTimeout;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,19,import org.apache.activemq.broker.BrokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,20,import org.apache.activemq.broker.BrokerServiceAware;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,22,import org.apache.activemq.transport.TransportSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,23,import org.apache.activemq.transport.mqtt.MQTTInactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,24,import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,25,import org.apache.activemq.transport.mqtt.MQTTTransport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,26,import org.apache.activemq.transport.mqtt.MQTTWireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,29,import org.apache.activemq.util.ServiceStopper;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,36,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,37,import java.security.cert.X509Certificate;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,38,import java.util.concurrent.CountDownLatch;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,40,public class MQTTSocket  extends TransportSupport implements WebSocket.OnBinaryMessage, MQTTTransport, BrokerServiceAware {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,44,MQTTProtocolConverter protocolConverter = null;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,45,MQTTWireFormat wireFormat = new MQTTWireFormat();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,46,private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,47,private BrokerService brokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,68,private MQTTProtocolConverter getProtocolConverter() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,69,if( protocolConverter == null ) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,70,protocolConverter = new MQTTProtocolConverter(this, brokerService);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,72,return protocolConverter;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,89,protected void doStart() throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,90,socketTransportStarted.countDown();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,94,protected void doStop(ServiceStopper stopper) throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,97,private boolean transportStartedAtLeastOnce() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,98,return socketTransportStarted.getCount() == 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,102,public int getReceiveCounter() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,103,return 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,107,public String getRemoteAddress() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,108,return "MQTTSocket_" + this.hashCode();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,132,public X509Certificate[] getPeerCertificates() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,133,return new X509Certificate[0];
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,137,public MQTTInactivityMonitor getInactivityMonitor() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,138,return null;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,142,public MQTTWireFormat getWireFormat() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,143,return wireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,147,public void setBrokerService(BrokerService brokerService) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,148,this.brokerService = brokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,55,socket = new MQTTSocket();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,57,socket = new StompSocket();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,19,import org.apache.activemq.broker.BrokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,20,import org.apache.activemq.broker.BrokerServiceAware;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,22,import org.apache.activemq.transport.TransportSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,23,import org.apache.activemq.transport.mqtt.MQTTInactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,24,import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,25,import org.apache.activemq.transport.mqtt.MQTTTransport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,26,import org.apache.activemq.transport.mqtt.MQTTWireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,29,import org.apache.activemq.util.ServiceStopper;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,37,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,38,import java.nio.ByteBuffer;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,39,import java.security.cert.X509Certificate;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,40,import java.util.concurrent.CountDownLatch;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,42,public class MQTTSocket  extends TransportSupport implements WebSocketListener, MQTTTransport, BrokerServiceAware {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,46,MQTTProtocolConverter protocolConverter = null;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,47,MQTTWireFormat wireFormat = new MQTTWireFormat();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,48,private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,49,private BrokerService brokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,51,private MQTTProtocolConverter getProtocolConverter() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,52,if( protocolConverter == null ) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,53,protocolConverter = new MQTTProtocolConverter(this, brokerService);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,55,return protocolConverter;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,58,protected void doStart() throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,59,socketTransportStarted.countDown();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,63,protected void doStop(ServiceStopper stopper) throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,66,private boolean transportStartedAtLeastOnce() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,67,return socketTransportStarted.getCount() == 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,71,public int getReceiveCounter() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,72,return 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,76,public String getRemoteAddress() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,77,return "MQTTSocket_" + this.hashCode();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,101,public X509Certificate[] getPeerCertificates() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,102,return new X509Certificate[0];
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,106,public MQTTInactivityMonitor getInactivityMonitor() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,107,return null;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,111,public MQTTWireFormat getWireFormat() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,112,return wireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,116,public void setBrokerService(BrokerService brokerService) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,117,this.brokerService = brokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,159,public void onWebSocketText(String arg0) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,62,socket = new MQTTSocket();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,64,socket = new StompSocket();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,94,public void start() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,254,protected MBeanServer getMBeanServer() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1312,LOG.warn("Duplicate message add attempt rejected. Destination: {}://{}, Message id: {}", command.getDestination().getType(), command.getDestination().getName(), command.getMessageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1356,if(previousKeys != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,150,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,151,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,152,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,211,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,334,public String findAllDurableSubMessagesStatement() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,335,if (findAllDurableSubMessagesStatement == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,337,+ " M, " + getFullAckTableName() + " D "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,338,+ " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,339,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,340,+ " ORDER BY M.ID";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,342,return findAllDurableSubMessagesStatement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,514,+ " AND ((ID > ? AND ID < ? AND PRIORITY = ?) OR PRIORITY < ?)"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,225,String selector = subscription.getConsumerInfo().getSelector();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,229,String s1 = info.getSelector();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,230,if (s1 == null ^ selector == null || (s1 != null && !s1.equals(selector))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,250,info.setSelector(selector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,819,private void rollback(MessageId poisoned) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,820,dispatchLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,821,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,822,for (DurableTopicSubscription durableTopicSubscription : durableSubscribers.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,823,durableTopicSubscription.getPending().rollback(poisoned);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,826,dispatchLock.readLock().unlock();
activemq-client/src/main/java/org/apache/activemq/command/CommandTypes.java,27,byte PROTOCOL_VERSION = 10;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,46,import com.fasterxml.jackson.databind.ObjectMapper;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,317,if (lastCachedIds[index] == null || lastCachedIds[index].getFutureOrSequenceLong() == null) {  // possibly null for topics
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,318,lastCachedIds[index] = candidate;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,612,if (getBrokerService().getDefaultSocketURIString() != null) {
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,34,PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "type=Broker,brokerName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,35,PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "type=Broker,connector=clientConnectors,connectionName=%1,*");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,36,PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "type=Broker,brokerName=*,connector=clientConnectors,connectorName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,37,PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "type=Broker,brokerName=%1,connector=networkConnectors,networkConnectorName=*");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,38,PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "type=Broker,brokerName=*,destinationType=Queue,destinationName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,39,PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "type=Broker,brokerName=*,destinationType=Topic,destinationName=%1,*");
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,918,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,919,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,920,doStartTransaction();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,921,ack.setTransactionId(getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,922,if (ack.getTransactionId() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,923,getTransactionContext().addSynchronization(new Synchronization() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,925,final int clearRequestCount = (clearRequestsCounter.get() == Integer.MAX_VALUE ? clearRequestsCounter.incrementAndGet() : clearRequestsCounter.get());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,927,public void beforeEnd() throws Exception {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,929,if (ack.getTransactionId().isXATransaction() && !connection.hasDispatcher(ack.getConsumerId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,930,LOG.debug("forcing rollback - {} consumer no longer active on {}", ack, connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,931,throw new TransactionRolledBackException("consumer " + ack.getConsumerId() + " no longer active on " + connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,933,LOG.trace("beforeEnd ack {}", ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,934,sendAck(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,938,public void afterRollback() throws Exception {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,939,LOG.trace("rollback {}", ack, new Throwable("here"));
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,942,connection.rollbackDuplicate(ActiveMQSession.this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,945,if (clearRequestsCounter.get() > clearRequestCount) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,946,LOG.debug("No redelivery of {} on rollback of {} due to failover of {}", md, ack.getTransactionId(), connection.getTransport());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,947,return;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,951,if (ack.getTransactionId().isXATransaction() && !connection.hasDispatcher(ack.getConsumerId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,952,LOG.debug("No local redelivery of {} on rollback of {} because consumer is no longer active on {}", md, ack.getTransactionId(), connection.getTransport());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,953,return;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,956,RedeliveryPolicy redeliveryPolicy = connection.getRedeliveryPolicy();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,957,int redeliveryCounter = md.getMessage().getRedeliveryCounter();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,958,if (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,964,MessageAck ack = new MessageAck(md, MessageAck.POSION_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,965,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,966,ack.setPoisonCause(new Throwable("Exceeded ra redelivery policy limit:" + redeliveryPolicy));
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,967,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,971,MessageAck ack = new MessageAck(md, MessageAck.REDELIVERED_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,972,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,973,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,977,long redeliveryDelay = redeliveryPolicy.getInitialRedeliveryDelay();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,978,for (int i = 0; i < redeliveryCounter; i++) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,979,redeliveryDelay = redeliveryPolicy.getNextRedeliveryDelay(redeliveryDelay);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,981,connection.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,984,public void run() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,993,LOG.trace("{} onMessage({})", this, message.getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,994,messageListener.onMessage(message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,997,LOG.error("error dispatching message: ", e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1004,connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1006,if (ack.getTransactionId() == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1008,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1010,connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1015,if (deliveryListener != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1016,deliveryListener.afterDelivery(this, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2101,return "ActiveMQSession {id=" + info.getSessionId() + ",started=" + started.get() + "}";
activemq-console/src/main/java/org/apache/activemq/console/Main.java,115,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,116,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,219,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/Main.java,262,runTask.invoke(task.newInstance(), args, System.in, System.out);
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,108,return -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,696,switch (command.qos()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,697,case AT_LEAST_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,698,return new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,700,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,701,if (response.isException()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,702,LOG.warn("Failed to send MQTT Publish: ", command, ((ExceptionResponse) response).getException());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,704,PUBACK ack = new PUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,705,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,706,LOG.trace("MQTT Snd PUBACK message:{} client:{} connection:{}",
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,707,command.messageId(), clientId, connectionInfo.getConnectionId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,708,converter.getMQTTTransport().sendToMQTT(ack.encode());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,712,case EXACTLY_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,713,return new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,715,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,716,if (response.isException()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,717,LOG.warn("Failed to send MQTT Publish: ", command, ((ExceptionResponse) response).getException());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,719,PUBREC ack = new PUBREC();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,720,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,721,synchronized (publisherRecs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,722,publisherRecs.put(command.messageId(), ack);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,724,LOG.trace("MQTT Snd PUBACK message:{} client:{} connection:{}",
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,725,command.messageId(), clientId, connectionInfo.getConnectionId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,726,converter.getMQTTTransport().sendToMQTT(ack.encode());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,730,case AT_MOST_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,731,break;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,407,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,408,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,409,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,410,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,411,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2517,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,44,public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration config,
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,45,Transport localTransport, Transport remoteTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,46,return createBridge(config, localTransport, remoteTransport, null);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,77,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,52,protected boolean network;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,346,public boolean isNetwork() {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,347,return network;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,350,public void setNetwork(boolean network) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,351,this.network = network;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,20,import java.util.Collections;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,21,import java.util.HashSet;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,23,import java.util.Set;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,39,import org.fusesource.mqtt.client.Topic;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,41,import org.slf4j.Logger;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,42,import org.slf4j.LoggerFactory;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,49,private static final Logger LOG = LoggerFactory.getLogger(MQTTDefaultSubscriptionStrategy.class);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,51,private final Set<String> restoredSubs = Collections.synchronizedSet(new HashSet<String>());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,97,if (restoredSubs.remove(destination.getPhysicalName())) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,113,restoredSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,129,private void deleteDurableSubs(List<SubscriptionInfo> subs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,130,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,131,for (SubscriptionInfo sub : subs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,132,RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,133,rsi.setConnectionId(protocol.getConnectionId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,134,rsi.setSubscriptionName(sub.getSubcriptionName());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,135,rsi.setClientId(sub.getClientId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,136,protocol.sendToActiveMQ(rsi, new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,138,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,144,LOG.warn("Could not delete the MQTT durable subs.", e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,148,private void restoreDurableSubs(List<SubscriptionInfo> subs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,149,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,150,for (SubscriptionInfo sub : subs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,151,String name = sub.getSubcriptionName();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,152,String[] split = name.split(":", 2);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,153,QoS qoS = QoS.valueOf(split[0]);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,154,onSubscribe(new Topic(split[1], qoS));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,159,LOG.warn("Could not restore the MQTT durable subs.", e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,91,String converted = VIRTUALTOPIC_CONSUMER_PREFIX + protocol.getClientId() + ":" + requestedQoS + "." +
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,92,VIRTUALTOPIC_PREFIX + convertMQTTToActiveMQ(topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,93,destination = new ActiveMQQueue(converted);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,94,consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,98,converted = VIRTUALTOPIC_PREFIX + convertMQTTToActiveMQ(topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,101,consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,121,if (restoredQueues.remove(destination)) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,170,destinationName = destinationName.substring(position+VIRTUALTOPIC_PREFIX.length()).substring(0);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,187,LOG.debug("Removing subscription for {} ",queue.getPhysicalName());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,201,LOG.warn("Could not delete the MQTT durable subs.", e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,215,LOG.trace("Restoring subscription: {}:{}", topicName, qoS);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,232,LOG.warn("Could not restore the MQTT durable subs.", e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,156,restoredSubs.add(split[1]);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,380,ObjectInstance result = getMBeanServer().registerMBean(bean, name);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,381,this.registeredMBeanNames.put(name, result.getObjectName());
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,138,doConsume((Command)command);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,244,private final Object persistenceAdapterLock = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,633,synchronized (persistenceAdapterLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,634,persistenceAdapterLock.notifyAll();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,660,synchronized (persistenceAdapterLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,661,persistenceAdapterLock.wait();
activemq-broker/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,157,protected boolean isDoHandleReplyTo() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,164,protected void setDoHandleReplyTo(boolean doHandleReplyTo) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,40,listener = (TransportAcceptListener)getServletContext().getAttribute("acceptListener");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,47,throws ServletException ,IOException  {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,48,getServletContext().getNamedDispatcher("default").forward(request,response);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,59,listener.onAccept((Transport)socket);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,30,import org.eclipse.jetty.websocket.servlet.WebSocketServlet;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,44,listener = (TransportAcceptListener)getServletContext().getAttribute("acceptListener");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,51,throws ServletException ,IOException  {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,52,getServletContext().getNamedDispatcher("default").forward(request,response);
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,65,Thread.sleep(lockAcquireSleepInterval);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,66,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,124,cf = createConnectionFactory(getInfo());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,90,if (AdvisorySupport.isMasterBrokerAdvisoryTopic(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,91,subscriptionRecoveryPolicy = new LastImageSubscriptionRecoveryPolicy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,92,setAlwaysRetroactive(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,94,subscriptionRecoveryPolicy = new RetainedMessageSubscriptionRecoveryPolicy(null);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,305,ObjectName inactiveName = subscriptionKeys.get(subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1485,sd.messageIdIndex.clear(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1486,sd.locationIndex.clear(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1487,sd.orderIndex.clear(tx);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,32,import org.apache.activemq.store.PersistenceAdapterSupport;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,55,List<SubscriptionInfo> subs;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,56,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,57,subs = PersistenceAdapterSupport.listSubscriptions(brokerService.getPersistenceAdapter(), protocol.getClientId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java,59,throw new MQTTProtocolException("Error loading store subscriptions", true, e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,36,import org.apache.activemq.store.PersistenceAdapterSupport;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,62,List<ActiveMQQueue> queues;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,63,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,64,queues = PersistenceAdapterSupport.listQueues(brokerService.getPersistenceAdapter(), new PersistenceAdapterSupport.DestinationMatcher() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,67,public boolean matches(ActiveMQDestination destination) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,68,if (destination.getPhysicalName().startsWith("Consumer." + protocol.getClientId())) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,69,LOG.debug("Recovered client sub: {}", destination.getPhysicalName());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,70,return true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,72,return false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,76,throw new MQTTProtocolException("Error restoring durable subscriptions", true, e);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,37,private RandomAccessFile readFile;
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,67,readFile = new RandomAccessFile(file, "rw");
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,70,lock = readFile.getChannel().tryLock(0, Math.max(1, readFile.getChannel().size()), false);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,132,if (readFile != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,134,readFile.close();
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,137,readFile = null;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,95,if (peer.async || !peer.started.get()) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,263,public void setMessageQueue(LinkedBlockingQueue<Object> asyncQueue) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,264,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,265,if (messageQueue == null) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,266,messageQueue = asyncQueue;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,49,private AtomicBoolean handlingException = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,72,String message = cause.getMessage();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,73,if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,74,LOG.info("Ignoring SQLException, " + exception, cause);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,75,return;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,20,import java.util.concurrent.CountDownLatch;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,22,import org.apache.activemq.command.Command;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,23,import org.apache.activemq.transport.TransportSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,24,import org.apache.activemq.transport.stomp.ProtocolConverter;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,27,import org.apache.activemq.transport.stomp.StompInactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,28,import org.apache.activemq.transport.stomp.StompTransport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,29,import org.apache.activemq.transport.stomp.StompWireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,30,import org.apache.activemq.util.ByteSequence;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,31,import org.apache.activemq.util.IOExceptionSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,32,import org.apache.activemq.util.ServiceStopper;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,40,class StompSocket extends TransportSupport implements WebSocket.OnTextMessage, StompTransport {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,43,Connection outbound;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,44,ProtocolConverter protocolConverter = new ProtocolConverter(this, null);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,45,StompWireFormat wireFormat = new StompWireFormat();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,46,private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,66,if (!transportStartedAtLeastOnce()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,67,LOG.debug("Waiting for StompSocket to be properly started...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,68,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,69,socketTransportStarted.await();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,71,LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,76,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,79,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,83,private boolean transportStartedAtLeastOnce() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,84,return socketTransportStarted.getCount() == 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,88,protected void doStart() throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,89,socketTransportStarted.countDown();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,93,protected void doStop(ServiceStopper stopper) throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,97,public int getReceiveCounter() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,98,return 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,102,public String getRemoteAddress() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,103,return "StompSocket_" + this.hashCode();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,107,public void oneway(Object command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,108,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,109,protocolConverter.onActiveMQCommand((Command)command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,111,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,116,public void sendToActiveMQ(Command command) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,117,doConsume(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,126,public StompInactivityMonitor getInactivityMonitor() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,127,return stompInactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,131,public StompWireFormat getWireFormat() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,132,return this.wireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,20,import java.util.concurrent.CountDownLatch;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,22,import org.apache.activemq.command.Command;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,23,import org.apache.activemq.transport.TransportSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,24,import org.apache.activemq.transport.stomp.ProtocolConverter;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,27,import org.apache.activemq.transport.stomp.StompInactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,28,import org.apache.activemq.transport.stomp.StompTransport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,29,import org.apache.activemq.transport.stomp.StompWireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,30,import org.apache.activemq.util.ByteSequence;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,31,import org.apache.activemq.util.IOExceptionSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,32,import org.apache.activemq.util.ServiceStopper;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,41,class StompSocket extends TransportSupport implements WebSocketListener, StompTransport {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,42,private static final Logger LOG = LoggerFactory.getLogger(StompSocket.class);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,44,Session session;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,45,ProtocolConverter protocolConverter = new ProtocolConverter(this, null);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,46,StompWireFormat wireFormat = new StompWireFormat();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,47,private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,50,private boolean transportStartedAtLeastOnce() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,51,return socketTransportStarted.getCount() == 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,55,protected void doStart() throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,56,socketTransportStarted.countDown();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,60,protected void doStop(ServiceStopper stopper) throws Exception {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,64,public int getReceiveCounter() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,65,return 0;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,69,public String getRemoteAddress() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,70,return "StompSocket_" + this.hashCode();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,74,public void oneway(Object command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,75,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,76,protocolConverter.onActiveMQCommand((Command)command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,78,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,83,public void sendToActiveMQ(Command command) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,84,doConsume(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,93,public StompInactivityMonitor getInactivityMonitor() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,94,return stompInactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,98,public StompWireFormat getWireFormat() {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,99,return this.wireFormat;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,126,if (!transportStartedAtLeastOnce()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,127,LOG.debug("Waiting for StompSocket to be properly started...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,128,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,129,socketTransportStarted.await();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,131,LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,135,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,138,onException(IOExceptionSupport.create(e));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1879,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1880,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1882,throw new RuntimeException(e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1893,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1924,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1936,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1937,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1939,RuntimeException exception = new RuntimeException(
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1941,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1942,throw exception;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1248,LOG.info("{} purged of {} messages", getActiveMQDestination().getQualifiedName(), originalMessageCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1187,processRemoveConnection(cs.getInfo().getConnectionId(), -1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,498,super.removeSubscription(context, sub, lastDeiveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,506,lastDeiveredSequenceId,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,550,if (lastDeiveredSequenceId > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,552,if (ref.getMessageId().getBrokerSequenceId() == lastDeiveredSequenceId) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,555,LOG.debug("found lastDeliveredSeqID: {}, message reference: {}", lastDeiveredSequenceId, ref.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,571,if (lastDeiveredSequenceId == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,837,message.getMessageId().setBrokerSequenceId(getDestinationSequenceId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,674,long lastDeliveredSequenceId = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,702,doSyncSendPacket(info.createRemoveCommand(), closeTimeout);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,231,private long lastDeliveredSequenceId;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,881,ActiveMQMessage message = (ActiveMQMessage)md.getMessage();
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,65,private transient long lastDeliveredSequenceId;
activemq-client/src/main/java/org/apache/activemq/command/RemoveInfo.java,34,protected long lastDeliveredSequenceId;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/AnnotatedMBean.java,194,entry.getParameters().put("arguments", objects);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,338,public String sendTextMessage(String body, String user, String password) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,343,public String sendTextMessage(Map<String, String> headers, String body, String userName, String password) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,41,private BrokerService brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,43,public LocalBrokerFacade(BrokerService brokerService) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,44,this.brokerService = brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,47,public BrokerService getBrokerService() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,48,return brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,50,public String getBrokerName() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,51,return brokerService.getBrokerName();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,53,public Broker getBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,54,return brokerService.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,56,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,57,return brokerService.getManagementContext();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,59,public BrokerViewMBean getBrokerAdmin() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,60,return brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,62,public ManagedRegionBroker getManagedBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,63,BrokerView adminView = brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,64,if (adminView == null) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,65,return null;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,67,return adminView.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,for (Iterator i = destinations.iterator(); i.hasNext();) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,73,Destination dest = (Destination) i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,605,JournalCommand<?> message = load(recoveryPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,606,metadata.lastUpdate = recoveryPosition;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,607,process(message, recoveryPosition, lastIndoubtPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,608,redoCounter++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,828,for (StoredDestination sd : storedDestinations.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,210,if ( size>=0 ) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,27,import org.apache.commons.pool.KeyedPoolableObjectFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,28,import org.apache.commons.pool.impl.GenericKeyedObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,29,import org.apache.commons.pool.impl.GenericObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,73,session.close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,87,return true;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,256,return this.sessionPool.getMaxActive();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,260,this.sessionPool.setMaxActive(maximumActiveSessionPerConnection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,302,this.sessionPool.setWhenExhaustedAction(
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,303,(block ? GenericObjectPool.WHEN_EXHAUSTED_BLOCK : GenericObjectPool.WHEN_EXHAUSTED_FAIL));
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,307,return this.sessionPool.getWhenExhaustedAction() == GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,317,return this.sessionPool.getMaxWait();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,335,this.sessionPool.setMaxWait(blockIfSessionPoolIsFullTimeout);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,31,import org.apache.commons.pool.KeyedPoolableObjectFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,32,import org.apache.commons.pool.impl.GenericKeyedObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,88,new KeyedPoolableObjectFactory<ConnectionKey, ConnectionPool>() {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,91,public void activateObject(ConnectionKey key, ConnectionPool connection) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,95,public void destroyObject(ConnectionKey key, ConnectionPool connection) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,96,try {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,97,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,98,LOG.trace("Destroying connection: {}", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,100,connection.close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,102,LOG.warn("Close connection failed for connection: " + connection + ". This exception will be ignored.",e);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,107,public ConnectionPool makeObject(ConnectionKey key) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,108,Connection delegate = createConnection(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,127,return connection;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,131,public void passivateObject(ConnectionKey key, ConnectionPool connection) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,135,public boolean validateObject(ConnectionKey key, ConnectionPool connection) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,149,this.connectionsPool.setMaxIdle(1);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,381,return getConnectionsPool().getMaxIdle();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,392,getConnectionsPool().setMaxIdle(maxConnections);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,50,import org.apache.commons.pool.KeyedObjectPool;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,99,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,120,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,124,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,125,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,128,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,67,private ActiveMQMessageAudit audit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,289,Synchronization sync = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,292,if (transaction != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,293,sync = new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,295,public void afterRollback() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,296,if (audit != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,297,audit.rollback(message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,301,transaction.addSynchronization(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,304,if (audit == null || !audit.isDuplicate(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,305,context.setTransaction(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,306,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,307,next.send(producerExchange, message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,309,context.setTransaction(originalTx);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,312,if (sync != null && transaction != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,313,transaction.removeSynchronization(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,315,LOG.debug("IGNORING duplicate message {}", message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,381,public synchronized void brokerServiceStarted() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,382,super.brokerServiceStarted();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,384,audit = new ActiveMQMessageAudit();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,211,private boolean supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1769,public boolean isSupportFailOver() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1770,return this.supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1777,public void setSupportFailOver(boolean supportFailOver) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1778,this.supportFailOver = supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,383,if (getBrokerService().isSupportFailOver() && audit == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,605,if (destination != null && !AdvisorySupport.isAdvisoryTopic(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,642,message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,643,matched.remove(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,644,discarded++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,645,if(destination != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,646,destination.getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,648,LOG.debug("{}, discarding message {}", this, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,649,Destination dest = (Destination) message.getRegionDestination();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,650,if (dest != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,651,dest.messageDiscarded(getContext(), this, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,653,broker.getRoot().sendToDeadLetterQueue(getContext(), message, this, new Throwable("TopicSubDiscard. ID:" + info.getConsumerId()));
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1629,if (userSpecifiedClientID) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1630,info.setClientId(null);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1631,userSpecifiedClientID = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1633,clientIDSet = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2025,cleanup();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,143,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,148,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,153,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,159,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,184,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,189,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,194,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,200,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,313,void addMessage(final MessageStore destination, final Message message) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,343,destination.addMessage(null, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1623,if (isConnectionInfoSentToBroker) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1624,if (!transportFailed.get() && !closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1625,syncSendPacket(info.createRemoveCommand());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1627,isConnectionInfoSentToBroker = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1635,started.set(false);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,237,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,603,LOG.info("Recovering from the journal ...");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,549,if (cur.getType() == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/view/MessageBrokerView.java,39,private Map<ActiveMQDestination,BrokerDestinationView> destinationViewMap = new LRUCache<ActiveMQDestination, BrokerDestinationView>();
activemq-broker/src/main/java/org/apache/activemq/broker/view/MessageBrokerView.java,201,if (destination.isTopic() && destination.isTemporary()){
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,47,private StompInactivityMonitor stompInactivityMonitor = new StompInactivityMonitor(this, wireFormat);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,77,protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,48,private StompInactivityMonitor stompInactivityMonitor = new StompInactivityMonitor(this, wireFormat);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,121,public void onWebSocketError(Throwable arg0) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,136,protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,83,transport = new AmqpTransportFilter(transport, format, brokerService);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,84,IntrospectionSupport.setProperties(transport, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,85,return super.compositeConfigure(transport, format, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,45,transport = new AmqpTransportFilter(transport, format, brokerService);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,46,IntrospectionSupport.setProperties(transport, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,47,return super.compositeConfigure(transport, format, options);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,52,import org.apache.activemq.broker.region.cursors.OrderedPendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,53,import org.apache.activemq.broker.region.cursors.PendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,54,import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,55,import org.apache.activemq.broker.region.cursors.PrioritizedPendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,56,import org.apache.activemq.broker.region.cursors.StoreQueueCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,57,import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,112,protected PendingList pagedInPendingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,113,protected PendingList redeliveredWaitingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,345,if (prioritizedMessages && this.pagedInPendingDispatch instanceof OrderedPendingList) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,346,pagedInPendingDispatch = new PrioritizedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,347,redeliveredWaitingDispatch = new PrioritizedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,349,pagedInPendingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,350,redeliveredWaitingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,584,redeliveredWaitingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,592,if (!redeliveredWaitingDispatch.isEmpty() && (! this.brokerService.isStopping())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1119,doBrowseList(browseList, max, redeliveredWaitingDispatch, pagedInPendingDispatchLock, connectionContext, "redeliveredWaitingDispatch");
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1120,doBrowseList(browseList, max, pagedInPendingDispatch, pagedInPendingDispatchLock, connectionContext, "pagedInPendingDispatch");
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1582,pageInMoreMessages |= !pagedInPendingDispatch.isEmpty();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1594,if (pageInMoreMessages || hasBrowsers || !redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1699,pagedInPendingDispatch.remove(r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1846,if (pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1847,pagedInPendingDispatch.addAll(newlyPaged);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1851,if (!pagedInPendingDispatch.contains(qmr)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1852,pagedInPendingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1869,pagedInPendingSize = pagedInPendingDispatch.size();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1962,if (!redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1965,redeliveredWaitingDispatch = doActualDispatch(redeliveredWaitingDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1967,if (redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1968,if (!pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1971,pagedInPendingDispatch = doActualDispatch(pagedInPendingDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1977,if (redeliveredWaitingDispatch.isEmpty() && pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1978,pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1981,if (!pagedInPendingDispatch.contains(qmr)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1982,pagedInPendingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2181,for (MessageReference ref : pagedInPendingDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2184,pagedInPendingDispatch.remove(ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2234,+ pagedInPendingDispatch.size() + ") for subscription: "
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,91,public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,97,prefetchExtension.incrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,108,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,119,pullTimeout(dispatchCounterBeforePull);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,133,final void pullTimeout(long dispatchCounterBeforePull) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,135,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,150,if( !destinations.contains(node.getRegionDestination()) && node!=QueueMessageReference.NULL_MESSAGE) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,216,int index = 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,234,index++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,329,public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,332,if (getPrefetchSize() == 0 ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,335,prefetchExtension.incrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,339,if (currentDispatchedCount == dispatchedCounter.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,343,prefetchExtension.decrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,353,pullTimeout(currentDispatchedCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,366,private final void pullTimeout(long currentDispatchedCount) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,368,if (currentDispatchedCount == dispatchedCounter.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,374,prefetchExtension.decrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,586,Message message = node.getMessage();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyMessageStore.java,20,import java.util.concurrent.Future;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyMessageStore.java,141,return asyncAddTopicMessage(context,message,canOptimizeHint);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,26,import java.util.Collection;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,27,import java.util.HashSet;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,28,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,29,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,30,import java.util.Set;
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,167,getRootNode(key).appendMatchingValues(answer, paths, 0);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,222,public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,228,if (path.equals(ANY_DESCENDENT)) {
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,56,idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,57,LOG.trace("Using port {}", idGeneratorPort);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,58,hostName = InetAddressUtil.getLocalHostName();
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,59,ss = new ServerSocket(idGeneratorPort);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,60,stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,61,Thread.sleep(100);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,167,return findWildcardMatches(key);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,26,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,121,if (deleteOnUnlock) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,143,return lock != null && lock.isValid() && file.exists();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,443,if (value instanceof Double) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,446,if (value instanceof Float) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,449,if (value instanceof UTF8Buffer) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,450,return Float.valueOf(value.toString()).floatValue();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,452,if (value instanceof String) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,453,return Float.valueOf(value.toString()).floatValue();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,455,throw new MessageFormatException(" cannot read a double from " + value.getClass().getName());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,560,if (this.version.equals(Stomp.V1_1) && subscriptionId == null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,678,if (this.version.equals(Stomp.V1_1) && subscriptionId == null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,689,if (this.version.equals(Stomp.V1_1)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,49,import java.util.concurrent.Callable;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2836,if (highPriorityIndex != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2837,Entry<Long, MessageKeys> lastEntry = highPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2838,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2839,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2841,lastEntry = defaultPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2842,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2843,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2845,lastEntry = lowPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2846,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2847,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2852,Entry<Long, MessageKeys> lastEntry = defaultPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2854,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,371,public synchronized void close() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,372,if (!started) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,373,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,375,if (this.timer != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,376,this.timer.cancel();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,378,accessorPool.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,380,fileMap.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,381,fileByFileMap.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,382,dataFiles.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,383,lastAppendLocation.set(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,384,started = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,221,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,43,private Map<String, String> userPasswords;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,44,private Map<String, Set<Principal>> userGroups;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,76,userPasswords = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,77,userGroups = new HashMap<String, Set<Principal>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,55,System.out.println("File " + file + " allready exists, will not benchmark.");
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,51,super.addSubscription(context, sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,53,if (noSubs && !getConsumers().isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,55,final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,56,final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,58,final ActiveMQDestination newDestination = sub.getActiveMQDestination();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,59,final BaseDestination regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,61,for (Destination virtualDest : virtualDests) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,62,if (virtualDest.getActiveMQDestination().isTopic() &&
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,63,(virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,65,Topic topic = (Topic) getBaseDestination(virtualDest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,66,if (topic != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,68,final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,71,for (Message message : messages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,72,final Message copy = message.copy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,73,copy.setOriginalDestination(message.getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,74,copy.setDestination(newDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,75,copy.setRegionDestination(regionDest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,76,sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,94,if (destination.isQueue() && destination.isPattern() && broker.getDestinations(destination).isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,117,answer.addAll(child.getValue().removeValues());
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,118,answer.addAll(child.getValue().removeDesendentValues());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,780,message.getMessageId().setFutureOrSequenceLong(null);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,190,tr.shutdown(TimeUnit.SECONDS.toMillis(1));
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,242,if (TRANSPORTLOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,243,TRANSPORTLOG.debug(this + " failed: " + e, e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,245,TRANSPORTLOG.warn(this + " failed: " + e);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,200,try {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,201,peer.transportListener.onCommand(new ShutdownInfo());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,96,private long lastUpdated;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,225,protected void query() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,694,entries.clear();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,117,protected final List<Command> dispatchQueue = new LinkedList<Command>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,141,private final Map<ProducerId, ProducerBrokerExchange> producerExchanges = new HashMap<ProducerId, ProducerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,142,private final Map<ConsumerId, ConsumerBrokerExchange> consumerExchanges = new HashMap<ConsumerId, ConsumerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,232,if (info.getPrefetchSize() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1357,sd.locationIndex.remove(tx, previousKeys.location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/ListNode.java,197,entryToRemove = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,768,if (isAutoAcknowledgeEach()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,769,synchronized(deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,781,pendingAck = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1036,session.sendAck(oldPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1045,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1051,deliveredCounter = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1052,additionalWindowSize = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,149,private MessageAck pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,775,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,780,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,959,if (pendingAck != null && deliveredCounter > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,960,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1022,MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1023,pendingAck = new MessageAck(md, ackType, deliveredCounter);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1024,pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1025,if( oldPendingAck==null ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1026,pendingAck.setFirstMessageId(pendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1028,pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1049,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1050,pendingAck=null;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,335,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,336,connected.set(false);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,142,getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,858,if (store == null || (!context.isInTransaction() && !message.isPersistent())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,859,messageSent(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,596,List<MessageReference> rc = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,602,rc.addAll(pending.remove(context, destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,605,return rc;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,611,updateDestinationStats(rc, destination, dispatched);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,614,updateDestinationStats(rc, destination, dispatched);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,617,return rc;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,620,private void updateDestinationStats(List<MessageReference> rc, Destination destination, List<MessageReference> dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,627,rc.addAll(references);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,238,if (paramTypes.length != 0 && paramTypes[0].equals(String.class)) {
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,250,if (paramTypes.length != 0 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,162,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,164,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,166,if (outboundQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,168,if (outboundQueueConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,170,.lookup(outboundQueueConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,178,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,181,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,182,newConnection = outboundQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,183,.createQueueConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,185,newConnection = outboundQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,190,newConnection = (QueueConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,193,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,194,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,196,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,198,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,201,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,202,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,206,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,208,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,209,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,214,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,220,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,222,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,224,if (localQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,225,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,227,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,229,.lookup(localConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,230,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,231,newConnection = localQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,232,.createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,234,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,237,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,240,newConnection = embeddedConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,243,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,244,newConnection = localQueueConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,245,createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,247,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,253,newConnection = (QueueConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,256,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,257,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,259,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,261,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,264,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,265,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,269,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,271,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,272,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,277,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,160,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,162,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,164,if (outboundTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,166,if (outboundTopicConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,168,.lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,176,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,179,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,180,newConnection = outboundTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,181,.createTopicConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,183,newConnection = outboundTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,188,newConnection = (TopicConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,191,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,192,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,194,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,196,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,199,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,200,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,204,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,206,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,207,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,212,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,218,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,220,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,222,if (localTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,223,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,225,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,227,.lookup(localConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,228,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,229,newConnection = localTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,230,.createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,232,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,235,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,238,newConnection = embeddedConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,241,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,242,newConnection = localTopicConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,243,createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,245,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,251,newConnection = (TopicConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,254,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,255,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,257,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,259,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,262,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,263,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,267,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,269,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,270,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,275,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,666,addConsumerBrokerExchange(info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1503,private ConsumerBrokerExchange addConsumerBrokerExchange(ConsumerId id) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1508,TransportConnectionState state = lookupConnectionState(id);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1509,context = state.getContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1511,SessionState ss = state.getSessionState(id.getParentId());
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,49,import org.apache.activemq.transport.nio.SelectorManager;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,50,import org.apache.activemq.transport.nio.SelectorSelection;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,68,protected ServerSocket serverSocket;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,69,protected SelectorSelection selector;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,112,protected BlockingQueue<Socket> socketQueue = new LinkedBlockingQueue<Socket>();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,119,protected AtomicInteger currentTransportCount = new AtomicInteger();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,136,this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog, addr);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,137,configureServerSocket(this.serverSocket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,301,final ServerSocketChannel chan = serverSocket.getChannel();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,302,if (chan != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,304,chan.configureBlocking(false);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,305,selector = SelectorManager.getInstance().register(chan, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,307,public void onSelect(SelectorSelection sel) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,309,SocketChannel sc = chan.accept();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,322,onError(sel, e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,326,public void onError(SelectorSelection sel, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,327,Exception e = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,328,if (error instanceof Exception) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,329,e = (Exception)error;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,331,e = new Exception(error);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,333,if (!isStopping()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,334,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,336,LOG.warn("run()", e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,337,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,341,selector.setInterestOps(SelectionKey.OP_ACCEPT);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,342,selector.enable();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,344,selector = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,347,while (!isStopped()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,348,Socket socket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,349,try {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,350,socket = serverSocket.accept();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,351,if (socket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,352,if (isStopped() || getAcceptListener() == null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,353,socket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,355,if (useQueueForAccept) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,356,socketQueue.put(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,358,handleSocket(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,365,if (!isStopping()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,366,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,368,LOG.warn("run()", e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,369,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,458,if (selector != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,459,selector.disable();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,460,selector.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,461,selector = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,463,if (serverSocket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,464,serverSocket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,465,serverSocket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,467,super.doStop(stopper);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,133,private boolean resetNeeded;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,26,import org.apache.activemq.transport.InactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,60,LOG.trace("Not created with a TextWireFormat: " + wireFormat);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,90,HttpClientTransport httpTransport = (HttpClientTransport)transport.narrow(HttpClientTransport.class);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,91,if(httpTransport != null && httpTransport.isTrace() ) {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,100,transport = new InactivityMonitor(transport, null /* ignore wire format as no negotiation over http */);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,353,try {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,354,if (isReconnectOnException()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,355,if (connection.getExceptionListener() != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,356,parentExceptionListener = connection.getExceptionListener();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,358,connection.setExceptionListener(this);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,360,if (parentExceptionListener != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,361,connection.setExceptionListener(parentExceptionListener);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,363,parentExceptionListener = null;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,366,LOG.warn("Cannot set reconnect exception listener", jmse);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,372,close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,124,return getConnection().getExceptionListener();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,134,getConnection().setExceptionListener(exceptionListener);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,121,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,122,LOG.trace("Created new connection: {}", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,137,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,138,LOG.trace("Connection has expired: {} and will be destroyed", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,301,connectionsPool != null ? connectionsPool.getNumActive() : 0);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,115,private final TransportListener disposedListener = new DefaultTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,117,private final TransportListener myTransportListener = createTransportListener();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,184,TransportListener createTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,188,Command command = (Command) o;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,189,if (command == null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,190,return;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,192,if (command.isResponse()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,193,Object object = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,194,synchronized (requestMap) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,195,object = requestMap.remove(Integer.valueOf(((Response) command).getCorrelationId()));
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,197,if (object != null && object.getClass() == Tracked.class) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,198,((Tracked) object).onResponses(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,205,if (command.isConnectionControl()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,206,handleConnectionControl((ConnectionControl) command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,208,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,209,transportListener.onCommand(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,216,handleTransportFailure(error);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,219,transportListener.onException(new InterruptedIOException());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,225,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,226,transportListener.transportInterupted();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,232,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,233,transportListener.transportResumed();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,268,+ (reconnectOk ? "," : ", not") + " attempting to automatically reconnect", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,347,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,348,LOG.debug("Started " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,373,LOG.debug("Stopped " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,408,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,409,LOG.trace("Stopped backup: " + transport);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,582,myTransportListener.onCommand(response);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,592,myTransportListener.onCommand(dispatch);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,608,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,609,LOG.trace("Waiting for transport to reconnect..: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,614,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,615,LOG.info("Failover timed out after " + (end - start) + "ms");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,623,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,624,LOG.debug("Interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,649,LOG.debug("Cannot track the command " + command, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,690,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,691,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,700,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,701,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,769,LOG.error("Failed to parse URI: " + u);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,813,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,814,LOG.debug("urlList connectionList:" + l + ", from: " + uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,858,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,859,LOG.trace("restore requestMap, replay: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,913,LOG.error("Failed to read updateURIsURL: " + fileURL, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,951,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,952,LOG.debug("Doing rebalance from: " + connectedTransportURI + " to " + connectList);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,961,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,962,LOG.debug("Caught an exception stopping existing transport for rebalance", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1023,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1024,LOG.debug("Attempting  " + connectFailures + "th  connect to: " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1026,transport.setTransportListener(myTransportListener);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1029,if (started &&  !firstConnection) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1033,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1034,LOG.debug("Connection established");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1058,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1059,LOG.debug("transport resumed by transport listener not set");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1065,LOG.info("Successfully connected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1067,LOG.info("Successfully reconnected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1074,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1075,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1082,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1083,LOG.debug("Stop of failed transport: " + transport +
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1099,LOG.error("Failed to connect to " + uris + " after: " + connectFailures + " attempt(s)");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1396,LOG.error("Failed to Lookup INetAddress for URI[ " + first + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1398,LOG.error("Failed to Lookup INetAddress for URI[ " + second + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,997,if (transport == null && !firstConnection && (reconnectDelay > 0) && !disposed) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,998,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,999,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1000,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1002,try {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1003,sleepMutex.wait(reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1005,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1134,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1135,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,38,ManagedRegionBroker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,39,String currentState = "Good";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,170,this.currentState = "Getting Worried {";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,172,currentState += hs + " , ";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,174,currentState += " }";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,176,this.currentState = "Good";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,272,journal = new Journal() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,274,protected void cleanup() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,275,super.cleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,276,txStoreCleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,279,journal.setDirectory(getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,280,journal.setMaxFileLength(journalMaxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,281,journal.setWriteBatchSize(journalWriteBatchSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,282,IOHelper.mkdirs(journal.getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,283,journal.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,284,recoverPendingLocalTransactions();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,285,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,306,journal.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,307,journal = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,845,if (compressed) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,869,ByteSequence data = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,870,if (data == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,871,data = new ByteSequence(new byte[] {}, 0, 0);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,873,InputStream is = new ByteArrayInputStream(data);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,874,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,875,if (data.length != 0) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,876,is = new ByteArrayInputStream(decompress(data));
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,879,length = data.getLength();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,882,dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/Message.java,145,copy.content = content;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,146,copy.marshalledProperties = marshalledProperties;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,318,return this.maxBrowsePageSize > 0 ? this.maxBrowsePageSize : getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1108,messagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1109,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1110,maxPageInAttempts += (messages.size() / getMaxPageSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1112,messagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1115,while (shouldPageInMoreForBrowse(max) && maxPageInAttempts-- > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1116,pageInMessages(!memoryUsage.isFull(110));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1226,doPageIn(true, false);  // signal no expiry processing needed.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1596,pageInMessages(hasBrowsers);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1839,doPageIn(force, true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1842,private void doPageIn(boolean force, boolean processExpired) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1843,PendingList newlyPaged = doPageInForDispatch(force, processExpired);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1861,private PendingList doPageInForDispatch(boolean force, boolean processExpired) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1865,int toPageIn = Math.min(getMaxPageSize(), messages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1874,LOG.debug("{} toPageIn: {}, Inflight: {}, pagedInMessages.size {}, pagedInPendingDispatch.size {}, enqueueCount: {}, dequeueCount: {}, memUsage:{}",
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1875,new Object[]{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1876,this,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1877,toPageIn,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1878,destinationStatistics.getInflight().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1879,pagedInMessages.size(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1880,pagedInPendingSize,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1881,destinationStatistics.getEnqueues().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1882,destinationStatistics.getDequeues().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1890,if (toPageIn > 0 && (force || (!consumers.isEmpty() && pagedInPendingSize < getMaxPageSize()))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1898,while (messages.hasNext() && count < toPageIn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2118,protected void pageInMessages(boolean force) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2119,doDispatch(doPageInForDispatch(force, true));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2137,boolean zeroPrefetch = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2141,zeroPrefetch |= s.getPrefetchSize() == 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2148,if (total == 0 && zeroPrefetch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2149,total = 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1051,Checksum checksum = new Adler32();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1055,for (PageWrite w : batch) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1056,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1066,writeFile.seek(toOffset(w.page.getPageId()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1067,writeFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1068,w.done();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1072,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1074,if (recoveryPageCount > recoveryFileMaxPageCount) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1075,int t = Math.max(recoveryFileMinPageCount, batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1076,recoveryFile.setLength(recoveryFileSizeForPages(t));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1080,recoveryFile.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1082,recoveryFile.writeLong(nextTxid.get());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1086,recoveryFile.writeLong(checksum.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1088,recoveryFile.writeInt(batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1093,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1094,recoveryFile.sync();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,771,if (isGcIfInactive()&& this.lastActiveTime != 0l) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,284,return safeGetBroker().getTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,289,return safeGetBroker().getQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,294,return safeGetBroker().getTemporaryTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,299,return safeGetBroker().getTemporaryQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,304,return safeGetBroker().getTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,309,return safeGetBroker().getDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,314,return safeGetBroker().getQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,319,return safeGetBroker().getTemporaryTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,324,return safeGetBroker().getTemporaryQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,329,return safeGetBroker().getInactiveDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,334,return safeGetBroker().getTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,339,return safeGetBroker().getQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,344,return safeGetBroker().getTemporaryTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,349,return safeGetBroker().getTemporaryQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,354,return safeGetBroker().getDynamicDestinationProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,24,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,26,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,276,job.decrementRepeatCount();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,34,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,36,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,79,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,83,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,229,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,233,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,234,MessageDispatch md = (MessageDispatch)i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1361,LOG.warn("Non existent message update attempt rejected. Destination: {}://{}, Message id: {}", command.getDestination().getType(), command.getDestination().getName(), command.getMessageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1644,if (pendingAcks == null || pendingAcks.size() <= 1) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,53,this.i++;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,54,final Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + this.i);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,90,worker.release();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,62,return retainCounter.get()==0;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,72,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,73,while( (task= ioTasks.poll()) !=null ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,91,processIoTasks();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,93,int count = selector.select(10);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,101,Set keys = selector.selectedKeys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,103,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,104,final SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,107,final SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,109,if( key.isValid() ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,137,Set keys = selector.keys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,138,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,139,SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,140,SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,148,ignore.printStackTrace();
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,34,private BrokerSupport() {
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,51,public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,795,ActiveMQDestination deadLetterDestination = deadLetterStrategy.getDeadLetterQueueFor(message, subscription);
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,19,import org.apache.activemq.broker.region.*;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,23,import java.util.Set;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,27,public PolicyEntryProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,42,PolicyMap existingMap = plugin.getBrokerService().getDestinationPolicy();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,46,Set existingEntry = existingMap.get(updatedEntry.getDestination());
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,47,if (existingEntry.size() == 1) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,48,updatedEntry = fromDto(candidate, (PolicyEntry) existingEntry.iterator().next());
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,52,plugin.info("cannot modify policy matching multiple destinations: " + existingEntry + ", destination:" + updatedEntry.getDestination());
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,57,RegionBroker regionBroker = (RegionBroker) plugin.getBrokerService().getRegionBroker();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,58,for (Destination destination : regionBroker.getDestinations(updatedEntry.getDestination())) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,59,Destination target = destination;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,60,if (destination instanceof DestinationFilter) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,61,target = ((DestinationFilter)destination).getNext();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,63,if (target.getActiveMQDestination().isQueue()) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,64,updatedEntry.update((Queue) target);
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,66,updatedEntry.update((Topic) target);
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,68,plugin.debug("applied update to:" + target);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,645,getPersistenceAdapter().setUsageManager(getProducerSystemUsage());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,646,getPersistenceAdapter().setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,647,LOG.info("Using Persistence Adapter: {}", getPersistenceAdapter());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,651,getPersistenceAdapter().start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,795,stopper.stop(getManagementContext());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1187,if (persistenceAdapter == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,631,startException = e;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,665,startException = t;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,675,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,676,return;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,792,stopper.stop(persistenceAdapter);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,950,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1186,public PersistenceAdapter getPersistenceAdapter() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2972,public Throwable getStartException() {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,100,public void unlock() {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,555,LOG.debug("{} detail: {}", message, cause);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,290,message.setRegionDestination(Queue.this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1689,metadata.ackMessageFileMap.remove(candidate);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1691,boolean result = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1692,boolean empty = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1694,File directory = getTmpDataDirectory();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1695,if (directory.exists() && directory.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1696,File[] files = directory.listFiles();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1697,if (files != null && files.length > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1698,empty = false;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1699,for (int i = 0; i < files.length; i++) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1700,File file = files[i];
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1701,if (!file.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1702,result &= file.delete();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1707,if (!empty) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1708,String str = result ? "Successfully deleted" : "Failed to delete";
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1709,LOG.info("{} temporary storage", str);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1716,this.tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1731,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1732,tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1734,RuntimeException exception = new RuntimeException("Failed to start provided temp data store: " + tempDataStore, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1735,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1736,throw exception;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,804,if (LOG.isInfoEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,805,LOG.info("Some journal files are missing: " + missingJournalFiles);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,821,missingPredicates.add(new BTreeVisitor.BetweenVisitor<Location, Long>(new Location(id, (int) seq.getFirst()), new Location(id, (int) seq.getLast() + 1)));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,853,throw new IOException("Detected missing/corrupt journal files. "+matches.size()+" messages affected.");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeVisitor.java,169,return first+" <= key < "+last;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,196,public void doStart() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,96,message.setRegionDestination(regionDestination);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,350,ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,367,ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,372,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,373,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,388,ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,393,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,394,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,409,ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,418,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,419,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,498,ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,461,message.setRegionDestination(this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,640,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,738,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,739,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,720,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,728,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,729,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,655,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,660,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,661,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,19,import java.io.InterruptedIOException;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,38,import org.apache.activemq.command.Response;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,327,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,402,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,403,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,405,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,407,setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,413,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,414,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,416,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,418,setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,458,IntegerResponse response = (IntegerResponse)syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,522,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,562,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,622,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,718,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,759,private Response syncSendPacketWithInterruptionHandling(Command command) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,760,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,761,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,763,if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,764,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,765,Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,766,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,768,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,772,throw e;
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,42,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,43,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,44,LOG.debug("Operation interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,46,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,58,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,67,FutureResponse future = new FutureResponse(responseCallback);
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,125,dispose(error);
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,97,if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,101,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,102,throw new InterruptedIOException();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,133,public FailoverTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,159,public FanoutTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/util/ThreadPoolUtils.java,127,executorService.shutdownNow();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,744,sd.locationIndex.remove(tx, keys.location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,745,sd.messageIdIndex.remove(tx, keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,746,metadata.producerSequenceIdTracker.rollback(keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,747,undoCounter++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,64,boolean matches = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,65,MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,66,msgContext.setDestination(dest.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,67,msgContext.setMessageReference(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,68,List<Subscription> subs = dest.getConsumers();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,69,for (Subscription sub : subs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,70,if (sub.matches(message, msgContext)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,71,matches = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,72,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,75,if (matches == false) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,76,matches = tryMatchingCachedSubs(broker, dest, msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,78,return matches;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1401,md.setRollbackCause(e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,832,checkUsage(context, producerExchange, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,833,sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,834,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,835,if (store != null && message.isPersistent()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,836,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,838,if (messages.isCacheEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,839,result = store.asyncAddQueueMessage(context, message, isOptimizeStorage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,840,result.addListener(new PendingMarshalUsageTracker(message));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,842,store.addMessage(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,844,if (isReduceMemoryFootprint()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,845,message.clearMarshalledState();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,850,resetNeeded = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,851,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,854,orderedCursorAdd(message, context);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,856,sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,871,private void orderedCursorAdd(Message message, ConnectionContext context) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,878,cursorAdd(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1793,final boolean cursorAdd(final Message msg) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,86,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,90,return addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,46,private LinkedList<MessageId> pendingCachedIds = new LinkedList<>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,202,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,206,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,207,return tryAddMessageLast(node, 0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,186,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,97,nonPersistent.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,100,public synchronized boolean addMessageLast(MessageReference node) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,441,LOG.info("socketQueue interuppted - stopping");
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,442,if (!isStopping()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,109,protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,189,throw new IOException("Failed to move " + src + " to " + targetDirectory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,80,BrokerService brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,469,this.brokerService = brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,478,public BrokerService getBrokerService() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,479,return brokerService;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOSSLTransportFactory.java,41,TcpTransportServer result = new TcpTransportServer(this, location, serverSocketFactory) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,170,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,171,if (trace && peerCerts != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,172,LOG.debug("Peer Identity has been verified\n");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,174,return peerCerts;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,176,return null;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,77,usageLock.readLock().lock();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,83,inputBuffer = ByteBuffer.allocate(8 * 1024);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,87,NIOOutputStream outPutStream = new NIOOutputStream(channel, 16 * 1024);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,60,if (System.getProperty(getVmLockKey()) != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,61,throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,63,System.setProperty(getVmLockKey(), new Date().toString());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,78,System.setProperty(getVmLockKey(), new Date().toString());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,92,System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,114,System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,117,lock = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,607,&& !Thread.currentThread().isInterrupted()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1077,indexLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1081,indexLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1300,long id = sd.orderIndex.getNextMessageId(priority);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1405,LOG.debug("no message sequence exists for id: " + command.getMessageId() + " and sub: " + command.getSubscriptionKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2966,long getNextMessageId(int priority) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,359,Map transactionMap = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,360,synchronized (xaTransactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,361,transactionMap = xid.isXATransaction() ? xaTransactions : context.getTransactions();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,363,Transaction transaction = (Transaction)transactionMap.get(xid);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,121,Handler handler = null;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,122,try {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,123,handler = (Handler)Class.forName("org.eclipse.jetty.server.handler.GzipHandler", true, Handler.class.getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,125,handler = (Handler)Class.forName("org.eclipse.jetty.servlets.gzip.GzipHandler", true, Handler.class.getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,22,import org.apache.activemq.transport.https.Krb5AndCertsSslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,119,return new Krb5AndCertsSslSocketConnector(factory, auth);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,121,try {
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,122,Class<?> cls = Class.forName("org.eclipse.jetty.server.ssl.SslSelectChannelConnector", true, Server.class.getClassLoader());
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,123,return (Connector)cls.getConstructor(SslContextFactory.class).newInstance(factory);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,125,Class<?> c = Class.forName("org.eclipse.jetty.server.ServerConnector", true, Server.class.getClassLoader());
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,126,Connector connector = (Connector)c.getConstructor(Server.class, SslContextFactory.class).newInstance(server, factory);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,127,Server.class.getMethod("setStopTimeout", Long.TYPE).invoke(server, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,128,connector.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(connector, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,129,return connector;
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,30,Connector connector = null;
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,32,try {
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,33,connector = (Connector)Class.forName("org.eclipse.jetty.server.nio.SelectChannelConnector", true, Server.class.getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,35,Class<?> c = Class.forName("org.eclipse.jetty.server.ServerConnector", true, Server.class.getClassLoader());
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,36,connector = (Connector)c.getConstructor(Server.class).newInstance(server);
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,37,Server.class.getMethod("setStopTimeout", Long.TYPE).invoke(server, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,38,connector.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(connector, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,40,System.out.println(transportOptions);
activemq-http/src/main/java/org/apache/activemq/transport/WebTransportServerSupport.java,61,if (Server.getVersion().startsWith("8")) {
activemq-http/src/main/java/org/apache/activemq/transport/WebTransportServerSupport.java,62,connector.setServer(server);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,20,import java.net.ServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,21,import java.security.KeyManagementException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,22,import java.security.NoSuchAlgorithmException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,23,import java.security.NoSuchProviderException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,24,import java.security.Principal;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,25,import java.util.Collections;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,26,import java.util.List;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,27,import java.util.Random;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,28,import javax.net.ssl.SSLContext;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,29,import javax.net.ssl.SSLServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,30,import javax.net.ssl.SSLSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,32,import org.eclipse.jetty.http.HttpSchemes;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,33,import org.eclipse.jetty.io.EndPoint;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,34,import org.eclipse.jetty.server.Request;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,35,import org.eclipse.jetty.server.ssl.ServletSSL;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,36,import org.eclipse.jetty.server.ssl.SslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,37,import org.eclipse.jetty.util.ssl.SslContextFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,38,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,39,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,47,public class Krb5AndCertsSslSocketConnector extends SslSocketConnector {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,48,public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,49,static {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,50,System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,53,private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,55,private static final String REMOTE_PRINCIPAL = "remote_principal";
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,57,public enum MODE {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,58,KRB, CERTS, BOTH
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,61,private boolean useKrb;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,62,private boolean useCerts;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,64,public Krb5AndCertsSslSocketConnector() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,66,super();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,67,useKrb = false;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,68,useCerts = true;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,69,setPasswords();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,71,public Krb5AndCertsSslSocketConnector(SslContextFactory f, String auth) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,73,super(f);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,74,useKrb = false;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,75,useCerts = true;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,76,setPasswords();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,77,setMode(auth);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,80,public static boolean isKrb(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,81,return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,84,public void setMode(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,85,useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,86,useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,87,logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,92,private void setPasswords() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,93,if (!useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,94,Random r = new Random();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,95,System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,96,System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,101,public SslContextFactory getSslContextFactory() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,102,final SslContextFactory factory = super.getSslContextFactory();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,104,if (useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,105,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,108,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,109,SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,110,factory.getProvider());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,111,context.init(null, null, null);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,112,factory.setSslContext(context);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,118,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,129,protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,130,logIfDebug("Creating new KrbServerSocket for: " + host);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,131,SSLServerSocket ss = null;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,133,if (useCerts) // Get the server socket from the SSL super impl
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,134,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,135,else { // Create a default server socket
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,136,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,137,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,139,LOG.warn("Could not create KRB5 Listener", e);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,140,throw new IOException("Could not create KRB5 Listener: " + e.toString());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,145,if (useKrb) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,146,ss.setNeedClientAuth(true);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,147,String[] combined;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,148,if (useCerts) { // combine the cipher suites
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,149,String[] certs = ss.getEnabledCipherSuites();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,150,combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,151,System.arraycopy(certs, 0, combined, 0, certs.length);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,152,System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,154,combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,157,ss.setEnabledCipherSuites(combined);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,159,return ss;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,163,public void customize(EndPoint endpoint, Request request) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,164,if (useKrb) { // Add Kerberos-specific info
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,165,SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,166,Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,167,logIfDebug("Remote principal = " + remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,168,request.setScheme(HttpSchemes.HTTPS);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,169,request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,171,if (!useCerts) { // Add extra info that would have been added by
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,173,String cipherSuite = sslSocket.getSession().getCipherSuite();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,174,Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,175,;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,177,request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,178,request.setAttribute("javax.servlet.request.key_size", keySize);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,183,super.customize(endpoint, request);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,186,private void logIfDebug(String s) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,188,LOG.debug(s);
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,84,int port = getConnectorLocalPort();
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,101,if (Server.getVersion().startsWith("9")) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,102,return (Servlet)Class.forName("org.apache.activemq.transport.ws.jetty9.WSServlet", true,
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,103,getClass().getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,105,return (Servlet)Class.forName("org.apache.activemq.transport.ws.jetty8.WSServlet", true,
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,106,getClass().getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,17,package org.apache.activemq.transport.ws.jetty8;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,27,import org.apache.activemq.util.ByteSequence;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,28,import org.apache.activemq.util.IOExceptionSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,30,import org.eclipse.jetty.websocket.WebSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,31,import org.fusesource.mqtt.codec.DISCONNECT;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,32,import org.fusesource.mqtt.codec.MQTTFrame;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,33,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,34,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,50,public void onMessage(byte[] bytes, int offset, int length) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,51,if (!transportStartedAtLeastOnce()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,53,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,54,socketTransportStarted.await();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,60,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,61,MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,62,getProtocolConverter().onMQTTCommand(frame);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,64,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,81,public void onClose(int closeCode, String message) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,82,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,83,getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,85,LOG.warn("Failed to close WebSocket", e);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,17,package org.apache.activemq.transport.ws.jetty8;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,25,import org.apache.activemq.transport.stomp.Stomp;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,26,import org.apache.activemq.transport.stomp.StompFrame;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,33,import org.eclipse.jetty.websocket.WebSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,34,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,35,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,41,private static final Logger LOG = LoggerFactory.getLogger(StompSocket.class);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,18,package org.apache.activemq.transport.ws.jetty8;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,20,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,21,import javax.servlet.ServletException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,22,import javax.servlet.http.HttpServletRequest;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,23,import javax.servlet.http.HttpServletResponse;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,25,import org.apache.activemq.transport.Transport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,26,import org.apache.activemq.transport.TransportAcceptListener;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,27,import org.eclipse.jetty.websocket.WebSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,28,import org.eclipse.jetty.websocket.WebSocketServlet;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,33,public class WSServlet extends WebSocketServlet {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,34,private static final long serialVersionUID = -4716657876092884139L;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,36,private TransportAcceptListener listener;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,38,public void init() throws ServletException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,39,super.init();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,41,if (listener == null) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,42,throw new ServletException("No such attribute 'acceptListener' available in the ServletContext");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,52,public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,53,WebSocket socket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,54,if (protocol != null && protocol.startsWith("mqtt")) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,60,return socket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,61,if (req.getSubProtocols().contains("mqtt")) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,28,import org.apache.activemq.transport.tcp.SslTransportServer;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,91,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,92,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,93,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,94,isSSL = transportConnector.getServer().isSslServer();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,99,if (isSSL) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,113,boolean isSSL;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,114,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,115,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,116,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,117,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,119,isSSL = false;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,122,if (isSSL) {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,73,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,79,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,103,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,109,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,126,int nextMonth = getNext(month, currentMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,153,nextWeekDay = getNext(dayOfWeek, currentDayOfWeek);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,157,nextCalendarDay = getNext(dayOfMonth, currentDayOfMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,193,static int getNext(final CronEntry entry, final int current) throws MessageFormatException {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,212,result = entry.end + first - entry.start - current;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1417,BrokerSupport.resend(context, m.getMessage(), dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1418,removeMessage(context, m);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1419,messagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1421,messages.rollback(m.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1422,if (isDLQ()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1423,DeadLetterStrategy stratagy = getDeadLetterStrategy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1424,stratagy.rollback(m.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1427,messagesLock.writeLock().unlock();
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,117,broker.waitUntilStarted();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,65,public void marshal(Object command, DataOutput os) throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,66,StompFrame stomp = (org.apache.activemq.transport.stomp.StompFrame)command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,68,if (stomp.getAction().equals(Stomp.Commands.KEEPALIVE)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,69,os.write(Stomp.BREAK);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,70,return;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,73,StringBuilder buffer = new StringBuilder();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,88,os.write(buffer.toString().getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,52,protected final LinkedHashMap<MessageId, MessageDispatch> dispatchedMessage = new LinkedHashMap<MessageId, MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,53,protected final LinkedList<MessageDispatch> unconsumedMessage = new LinkedList<MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,69,synchronized (this) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,70,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,186,dispatchedMessage.remove(msgId);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,132,MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,133,getProtocolConverter().onMQTTCommand(frame);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,43,private int maxAmqpFrameSize = NO_AMQP_MAX_FRAME_SIZE;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1540,gcCandidateSet.remove(lastUpdate.getDataFileId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1528,pageFile.flush();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2336,public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2337,SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2338,if (messageSequences != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2339,long result = messageSequences.rangeSize();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2341,return result > 0 ? result - 1 : 0;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,205,Vector<TransactionInfo> toRollback = new Vector<TransactionInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2503,List<TransportConnector> al = new ArrayList<TransportConnector>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,998,LOG.error("KahaDB failed to store to Journal", ioe);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,200,firstAsyncException = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,203,if (firstAsyncException != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,204,throw firstAsyncException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,382,logger.info("Journal failed while writing at: " + wb.offset);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,384,firstAsyncException = e;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,385,if (wb != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,386,wb.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,387,wb.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,389,if (nextWriteBatch != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,390,nextWriteBatch.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,391,nextWriteBatch.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,416,if (write.onComplete != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1497,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1499,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1500,checkpointUpdate(tx, cleanup);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1516,void checkpointUpdate(Transaction tx, boolean cleanup) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2167,protected ObjectName createNetworkConnectorObjectName(NetworkConnector connector) throws MalformedObjectNameException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2502,Set<ActiveMQDestination> durableDestinations = getBroker().getDurableDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2541,connector.setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2542,connector.setDurableDestinations(durableDestinations);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2543,if (getDefaultSocketURIString() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2544,connector.setBrokerURL(getDefaultSocketURIString());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2546,if (networkConnectorStartExecutor != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2547,networkConnectorStartExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2549,public void run() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2550,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2551,LOG.info("Async start of {}", connector);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2552,connector.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2554,LOG.error("Async start of network connector: {} failed", connector, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2559,connector.start();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/NetworkConnectorProcessor.java,24,import java.util.TreeMap;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/NetworkConnectorProcessor.java,39,nc.start();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,45,private ExecutorService executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,84,if (initDone.compareAndSet(false, true)) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,87,if (dedicatedTaskRunner || "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.UseDedicatedTaskRunner"))) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,88,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,90,executor = createDefaultExecutor();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,92,LOG.debug("Initialized TaskRunnerFactory[{}] using ExecutorService: {}", name, executor);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,104,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,106,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,117,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,119,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,130,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,132,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,191,return executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,195,this.executor = executor;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,181,IntrospectionSupport.setProperties(socket, transportOptions);
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,139,public static boolean setProperties(Object target, Map props) {
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,152,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,344,subscriptions.put(info.getConsumerId(), sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,298,boolean isActive = destinationStatistics.getConsumers().getCount() != 0 ||
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,299,destinationStatistics.getProducers().getCount() != 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,300,if (isActive && isGcWithNetworkConsumers() && destinationStatistics.getConsumers().getCount() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,191,super.removeSubscription(context, sub, lastDeliveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,193,consumers.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,193,if (sub.matches(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,194,throw new JMSException("Destination still has an active subscription: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,144,addSubscriptionsForDestination(context, dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,772,if ((System.currentTimeMillis() - this.lastActiveTime) >= getInactiveTimeoutBeforeGC()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1559,LOG.trace("gc candidates after producerSequenceIdTrackerLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1567,LOG.trace("gc candidates after ackMessageFileMapLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1578,LOG.trace("gc candidates after tx range:" + Arrays.asList(inProgressTxRange) + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,427,if (writeFile.length() < PAGE_FILE_HEADER_SIZE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,428,writeFile.setLength(PAGE_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,430,nextFreePageId.set((writeFile.length() - PAGE_FILE_HEADER_SIZE) / pageSize);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1224,long originalMessageCount = this.destinationStatistics.getMessages().getCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1225,do {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1227,pagedInMessagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1228,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1229,list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1231,pagedInMessagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1234,for (MessageReference ref : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1236,QueueMessageReference r = (QueueMessageReference) ref;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1237,removeMessage(c, r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1245,if (this.destinationStatistics.getMessages().getCount() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1246,LOG.warn("{} after purge of {} messages, message count stats report: {}", getActiveMQDestination().getQualifiedName(), originalMessageCount, this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1250,gc();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1251,this.destinationStatistics.getMessages().setCount(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1252,getMessages().clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,128,protected transient Map<Integer, Set<Integer>> ackMessageFileMap = new HashMap<Integer, Set<Integer>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,134,destinations = new BTreeIndex<String, StoredDestination>(pageFile, is.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,284,metadata.destinations = new BTreeIndex<String, StoredDestination>(pageFile, tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,405,IOHelper.mkdirs(directory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,425,if( opened.compareAndSet(true, false)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,510,HashMap<KahaDestination, opCount> destinationOpCount = new HashMap<KahaDestination, opCount>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,553,ArrayList<TranInfo> infos = new ArrayList<TranInfo>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,629,Set<TransactionId> toRollback = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,630,Set<TransactionId> toDiscard = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,733,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,797,HashSet<Integer> missingJournalFiles = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,809,ArrayList<BTreeVisitor.Predicate<Location>> missingPredicates = new ArrayList<BTreeVisitor.Predicate<Location>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1287,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1414,referenceFileIds = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1532,final TreeSet<Integer> completeFileSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1533,final TreeSet<Integer> gcCandidateSet = new TreeSet<Integer>(completeFileSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1772,protected final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1881,final TreeMap<Long, Long> messageReferences = new TreeMap<Long, Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1882,final HashSet<String> subscriptionCache = new LinkedHashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1903,value.orderIndex.defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1904,value.locationIndex = new BTreeIndex<Location, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1905,value.messageIdIndex = new BTreeIndex<String, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1908,value.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1909,value.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1911,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1917,LinkedHashMap<String, SequenceSet> temp = new LinkedHashMap<String, SequenceSet>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1922,new BTreeIndex<Long, HashSet<String>>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1947,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1960,value.subLocations = new ListIndex<String, Location>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1966,value.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1975,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1976,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1982,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1987,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2070,rc.locationIndex = new BTreeIndex<Location, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2071,rc.messageIdIndex = new BTreeIndex<String, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2074,rc.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2075,rc.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2076,rc.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2077,rc.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2115,rc.subscriptionCursors = new HashMap<String, MessageOrderCursor>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2256,ArrayList<Long> unreferenced = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2274,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2319,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2355,private final LinkedHashMap<TransactionId, List<Operation>> inflightTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2357,protected final LinkedHashMap<TransactionId, List<Operation>> preparedTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2358,protected final Set<String> ackedAndPrepared = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2359,protected final Set<String> rolledBackAcks = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2801,final List<Long> pendingAdditions = new LinkedList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2827,defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2829,lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2830,highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,816,if (e instanceof SecurityException) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,818,delayedStop(2000, "Failed with SecurityException: " + e.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,135,private boolean starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,136,private boolean pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,240,if (!stopping.get() && !pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,315,if (pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,333,if (!pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,964,if (pendingStop || stopping.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1022,starting = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1043,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1071,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1095,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1096,if (starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1307,public synchronized boolean isStarting() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1308,return starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1321,protected synchronized void setStarting(boolean starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1322,this.starting = starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1328,public synchronized boolean isPendingStop() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1329,return pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1332,protected synchronized void setPendingStop(boolean pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1333,this.pendingStop = pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,39,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,131,private final AtomicBoolean started = new AtomicBoolean();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,557,this.subscriptionRecoveryPolicy.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,558,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,559,memoryUsage.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,563,scheduler.executePeriodically(expireMessagesTask, getExpireMessagesPeriod());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,569,if (taskRunner != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,570,taskRunner.shutdown();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,572,this.subscriptionRecoveryPolicy.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,573,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,574,memoryUsage.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,576,if (this.topicStore != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,577,this.topicStore.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,580,scheduler.cancel(expireMessagesTask);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,156,selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,158,public void onSelect(SelectorSelection selection) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,159,serviceRead();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,163,public void onError(SelectorSelection selection, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,164,if (error instanceof IOException) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,165,onException((IOException) error);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,167,onException(IOExceptionSupport.create(error));
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,127,contextHandler.setHandler(handler);
activemq-broker/src/main/java/org/apache/activemq/plugin/StatisticsBroker.java,123,statsMessage.setLong("averageMessageSize", (long) stats.getMessageSize().getAveragePerSecond());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,830,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,834,matches.add(value);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,845,for (Long sequenceId : matches) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,49,private static final int MAX_BATCH_SIZE = 32*1024*1024;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1315,private Runnable listener;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1336,this.listener = listener;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,21,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,266,if (ack.isStandardAck() || ack.isPoisonAck() || ack.isIndividualAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,267,if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,268,context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,271,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,278,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,298,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,299,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,302,prefetchExtension.addAndGet(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,303,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,304,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,319,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,320,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,325,throw new JMSException("Invalid acknowledgment: " + ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,486,return getDispatchedQueueSize() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,499,return getDispatchedQueueSize() <= (info.getPrefetchSize() * .4);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,507,return getDispatchedQueueSize() >= (info.getPrefetchSize() * .9);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,57,private final TreeMap<Long, ScheduledTask> jobs = new TreeMap<Long, ScheduledTask>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,60,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,168,List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,182,final List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,197,final List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,226,startTime = (startTime / 1000) * 1000;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,371,private final Map<String, InMemoryJob> jobs = new TreeMap<String, InMemoryJob>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,386,return new ArrayList<InMemoryJob>(jobs.values());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,60,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,135,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,172,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,201,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,232,startTime = (startTime / 1000) * 1000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,332,values = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,410,target = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,567,List<Long> keys = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,657,List<JobLocation> references = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,704,List<JobLocation> list = new ArrayList<JobLocation>(first.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,705,List<JobLocation> toRemove = new ArrayList<JobLocation>(list.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,847,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,858,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), in.readLong());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,89,session.getRemote().sendString(command.format());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,76,private boolean disposed;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,93,private boolean started;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,131,private boolean shuttingDown = false;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,133,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,134,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,211,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,212,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,149,public void clearMarshalledState() throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,600,LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getCurrentPrefetchSize()});
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,25,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,59,protected final AtomicInteger prefetchExtension = new AtomicInteger();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,397,for (Destination dest : destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,398,dest.wakeup();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,849,protected int getPrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,850,return this.prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,72,+ this.prefetchExtension + ", pending=" + getPendingQueueSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,68,private final AtomicInteger prefetchExtension = new AtomicInteger(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,487,protected Region getRegion(ActiveMQDestination destination) throws JMSException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/plist/PListStoreImpl.java,276,this.directory = new File(IOHelper.getDefaultDataDirectory() + File.pathSeparator + "delayedDB");
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,147,longFirstIndex = (int) (index - (index % BitArray.LONG_SIZE));
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,359,private boolean hasDurableSubChanged(ConsumerInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,45,public class MemoryPersistenceAdapter implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,64,public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore, TransactionIdTransformerAware {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,88,public class KahaDBStore extends MessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,66,public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, BrokerServiceAware {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,53,public boolean equals(Object o) {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,54,ConversionKey x = (ConversionKey)o;
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,55,return x.from == from && x.to == to;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,145,return;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,150,if (!done) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,151,queued = true;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,154,if (queued) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,155,executor.execute(runable);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1938,LOG.warn("{}, duplicate message {} paged in, is cursor audit disabled? Removing from store and redirecting to dlq", this, ref.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1941,store.removeMessage(connectionContext, new MessageAck(ref.getMessage(), MessageAck.POSION_ACK_TYPE, 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1942,broker.getRoot().sendToDeadLetterQueue(connectionContext, ref.getMessage(), null, new Throwable("duplicate paged in from store for " + destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,118,if (message.getMessageId().getEntryLocator() instanceof Long) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,133,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,134,if (trace && peerCerts != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,135,LOG.debug("Peer Identity has been verified\n");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,137,return peerCerts;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,139,return null;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,21,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,33,import org.apache.activemq.store.AbstractMessageStore;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,90,if( removed !=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,103,for (Iterator<Message> iter = messageTable.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,134,int count = 0;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,135,for (Iterator iter = messageTable.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,136,Map.Entry entry = (Entry)iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,138,count++;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,140,lastBatchId = (MessageId)entry.getKey();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,142,listener.recoverMessageReference((MessageId)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,144,listener.recoverMessage((Message)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,178,return (MemoryMessageStore)value;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,181,MessageStore delegate = ((ProxyMessageStore)value).getDelegate();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,212,public File getDirectory(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,221,public long size(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,48,public MemoryTopicMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable, Map<SubscriptionKey, SubscriptionInfo> subscriberDatabase) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,64,for (Iterator<MemoryTopicSub> i = topicSubMap.values().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,65,MemoryTopicSub sub = i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,70,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,71,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,85,MemoryTopicSub sub = new MemoryTopicSub();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,88,for (Iterator i = messageTable.entrySet().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,89,Map.Entry entry = (Entry)i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,90,sub.addMessage((MessageId)entry.getKey(), (Message)entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,97,org.apache.activemq.util.SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,34,private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,38,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,46,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,52,if( removed!=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,136,this.persistenceAdapter=persistenceAdapter;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,215,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,216,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,217,MemoryTransactionStore.this.acknowledge((TopicMessageStore)getDelegate(), clientId,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,218,subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,257,public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,298,listener.recover((XATransactionId)txid, tx.getMessages(), tx.getAcks());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,377,public void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,378,final MessageId messageId, final MessageAck ack) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,273,Message msg = (Message) wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,274,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,275,return listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,279,return listener.recoverMessageReference(new MessageId(reference));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,686,KahaProducerAuditCommand audit = (KahaProducerAuditCommand) load(metadata.producerSequenceIdTrackerLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,708,KahaAckMessageFileMapCommand audit = (KahaAckMessageFileMapCommand) load(metadata.ackMessageFileMapLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessor.java,92,throw new IOException("Invalid location: " + location + ", : " + e, e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1122,JournalCommand<?> command = load(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1123,KahaAddMessageCommand addMessage = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1124,switch (command.type()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1125,case KAHA_UPDATE_MESSAGE_COMMAND:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1126,addMessage = ((KahaUpdateMessageCommand)command).getMessage();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1127,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1128,default:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1129,addMessage = (KahaAddMessageCommand) command;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1131,Message msg = (Message) wireFormat.unmarshal(new DataInputStream(addMessage.getMessage().newInput()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1132,return msg;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,226,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,230,((Destination)node.getRegionDestination()).getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,231,broker.messageExpired(getContext(), node, this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,610,if (LOG.isInfoEnabled() && redoCounter % 100000 == 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,611,LOG.info("@" + recoveryPosition +  ", "  + redoCounter + " entries recovered ..");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,42,private boolean used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,57,used = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,71,public synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,72,used = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,76,return used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,97,synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,98,for (Pool pool : pools.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,99,pool.clearUsedMark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,103,synchronized void disposeUnused() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,387,protected synchronized void cleanup() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,738,boolean expired = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,739,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,740,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,742,Message message = messageReference.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,743,synchronized (message) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,744,expired = stampAsExpired(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,747,LOG.warn("unexpected exception on message expiry determination for: {}", messageReference, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,750,return expired;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,489,if (broker.isExpired(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,490,getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,491,broker.messageExpired(context, message, null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,471,if (broker.isExpired(reference)) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,20,import java.sql.Connection;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,21,import java.sql.PreparedStatement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,22,import java.sql.SQLException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,23,import java.sql.Statement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,25,import java.util.List;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,155,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,72,protected ReadWriteLock cleanupExclusiveLock = new ReentrantReadWriteLock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,85,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,86,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,140,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,162,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,173,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,192,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,201,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,212,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,225,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,254,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,266,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,277,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,286,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,306,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,316,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,328,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,337,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,348,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,357,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,367,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,378,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,402,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,413,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,432,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,442,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,459,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,468,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,495,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,506,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,534,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,554,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,565,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,576,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,597,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,608,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,632,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,643,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,668,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,679,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,694,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,713,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,750,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,759,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,778,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,788,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,806,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,815,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,825,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,833,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,841,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,849,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,852,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatementWithPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,859,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,869,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,883,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,908,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,916,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,989,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1004,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1013,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1045,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1053,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1061,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1072,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1081,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1092,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1131,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1141,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1152,cleanupExclusiveLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,148,result.setDurableDestinations(dest);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,150,return result;
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,153,protected Transport createLocalTransport() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,154,return TransportFactory.connect(localURI);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,594,Thread.sleep(policy.getNextDelay(attempt));
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,235,nextDelay = nextDelay * (long)(attempt * backOffMultiplier);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,48,import static javax.xml.bind.DatatypeConverter.parseBase64Binary;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,49,import static javax.xml.bind.DatatypeConverter.printBase64Binary;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,83,public void doCreateTables(TransactionContext c) throws SQLException, IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,84,Statement s = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,92,boolean alreadyExists = false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,93,ResultSet rs = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,94,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,95,rs = c.getConnection().getMetaData().getTables(null, null, this.statements.getFullMessageTableName(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,new String[] { "TABLE" });
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,97,alreadyExists = rs.next();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,100,close(rs);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,102,s = c.getConnection().createStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,103,String[] createStatments = this.statements.getCreateSchemaStatements();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,104,for (int i = 0; i < createStatments.length; i++) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,107,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,108,LOG.debug("Executing SQL: " + createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,109,s.execute(createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,111,if (alreadyExists) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,112,LOG.debug("Could not create JDBC tables; The message table already existed." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,114,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,116,LOG.warn("Could not create JDBC tables; they could already exist." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,118,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,119,JDBCPersistenceAdapter.log("Failure details: ", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,125,if(!c.getConnection().getAutoCommit()){
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,126,c.getConnection().commit();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,131,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,132,s.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,158,if(!c.getConnection().getAutoCommit()){
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,159,c.getConnection().commit();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,174,final BrokerService brokerService = this.broker.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,226,BrokerService bService = connector.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,227,if (bService.isShutdownOnSlaveFailure()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,228,if (brokerInfo != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,229,if (brokerInfo.isSlaveBroker()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,230,LOG.error("Slave has exception: {} shutting down master now.", e.getMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,231,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,232,doStop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,233,bService.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,235,LOG.warn("Failed to stop the master", ex);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1380,MBeanNetworkListener listener = new MBeanNetworkListener(broker.getBrokerService(), config, broker.getBrokerService().createDuplexNetworkConnectorObjectName(duplexName));
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1383,duplexBridge.setBrokerService(broker.getBrokerService());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1473,result.setLastStoredSequenceId(broker.getBrokerService().getPersistenceAdapter().getLastProducerSequenceId(id));
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,104,XAException xae = new XAException("Prepare cannot be called now.");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,105,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,185,XAException xae = new XAException("PRE COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,186,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,200,XAException xae = new XAException("POST COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,201,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,173,public static XAException newXAException(String s, int errorCode) {
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,174,XAException xaException = new XAException(s + " " + TransactionContext.xaErrorCodeMarker + errorCode);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,175,xaException.errorCode = errorCode;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,176,return xaException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,415,void done() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,416,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,417,browser.decrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,419,LOG.warn("decrement ref on browser: " + browser, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1592,boolean hasBrowsers = browserDispatches.size() > 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1605,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1620,LOG.debug("dispatch to browser: {}, already dispatched/paged count: {}", browser, alreadyDispatchedMessages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1622,for (MessageReference node : alreadyDispatchedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1888,toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1719,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1729,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1759,if (!reference.isDropped()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1760,reference.drop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1761,destinationStatistics.getMessages().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,561,for (MessageReference ref : unAckedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,583,if (!qmr.isDropped()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,36,private boolean copyMessage = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,41,return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isCopyMessage(), isConcurrentSend());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,88,return copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,97,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,45,private boolean copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,48,public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean copyMessage, boolean concurrentSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,52,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,116,Message forwarded_message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,117,if (copyMessage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,118,forwarded_message = message.copy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,119,forwarded_message.setDestination(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,121,else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,122,forwarded_message = message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,127,regionBroker.send(context, forwarded_message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,673,for (Destination dest :destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,674,dest.slowConsumer(context, this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,22,import javax.jms.*;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,25,import org.apache.activemq.command.*;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,35,private ActiveMQMessageTransformation() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,48,ActiveMQDestination activeMQDestination = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,50,if (destination != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,51,if (destination instanceof ActiveMQDestination) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,52,return (ActiveMQDestination)destination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,55,if (destination instanceof TemporaryQueue) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,56,activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,58,activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,60,activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,62,activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,67,return activeMQDestination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,149,BlobMessage blobMessage = (BlobMessage)message;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,150,ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,151,msg.setConnection(connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,153,msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,155,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,156,msg.setURL(blobMessage.getURL());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,160,activeMessage = msg;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,159,return new ActiveMQTopic(VIRTUALTOPIC_PREFIX + topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,161,return new ActiveMQTopic(topicName);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,284,this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,54,private long reconnectDelay = initialReconnectDelay;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,145,LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: "+event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,150,LOG.warn("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled for: " + event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,154,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,155,try {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,156,if (!running.get()) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,157,LOG.debug("Reconnecting disabled: stopped");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,158,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,161,LOG.debug("Waiting "+event.reconnectDelay+" ms before attempting to reconnect.");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,162,sleepMutex.wait(event.reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,164,LOG.debug("Reconnecting disabled: " + ie);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,165,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,166,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,170,if (!useExponentialBackOff) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,113,FileInputStream fis = new FileInputStream(persistFile);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,114,try {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,124,fis.close();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,67,public CompositeType getCompositeType() throws OpenDataException {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,101,return this.connector.isUpdateClusterClientsOnRemove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,34,import org.apache.activemq.store.PListStore;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,42,import org.apache.activemq.util.ByteSequence;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,398,expireOldMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,414,protected synchronized void expireOldMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,420,discardExpiredMessage(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,430,if (LOG.isTraceEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,432,LOG.trace("{}, flushToDisk() mem list size: {} {}", new Object[]{ name, memoryList.size(), (systemUsage != null ? systemUsage.getMemoryUsage() : "") });
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,382,UNSUBACK ack = new UNSUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,383,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,384,sendToMQTT(ack.encode());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,641,LOG.info("Usage Manager Memory Limit ({}) reached on {}, size {}. Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it. See http://activemq.apache.org/producer-flow-control.html for more info.",
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,642,memoryUsage.getLimit(), getActiveMQDestination().getQualifiedName(), destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,50,protected boolean hadSpace = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,379,if (this.batchList.isEmpty() && this.size >0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,41,private final Broker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,47,public QueueStorePrefetch(Queue queue, Broker broker) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,50,this.broker = broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,107,hadSpace = this.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,108,if (!broker.getBrokerService().isPersistent() || hadSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,109,this.store.recoverNextMessages(this.maxBatchSize, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,110,dealWithDuplicates(); // without the index lock
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,50,this.persistent = new QueueStorePrefetch(queue, broker);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,43,private boolean storeHasMessages = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,59,this.storeHasMessages=this.size > 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,73,public final synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,74,this.storeHasMessages = super.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,75,return this.storeHasMessages;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,89,storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,123,this.storeHasMessages = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,126,if (!this.storeHasMessages && (!this.batchList.isEmpty() || !hadSpace)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,127,this.storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,146,return "TopicStorePrefetch(" + clientId + "," + subscriberName + ",storeHasMessages=" + this.storeHasMessages +") " + this.subscription.getConsumerInfo().getConsumerId() + " - " + super.toString();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,350,public boolean recoverMessage(long sequenceId, byte[] data) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,351,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,352,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,353,msg.getMessageId().setFutureOrSequenceLong(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,354,listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,357,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,360,public boolean recoverMessageReference(String reference) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,361,if (listener.hasSpace()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,362,listener.recoverMessageReference(new MessageId(reference));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,363,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,365,return false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,619,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,625,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,655,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,661,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1110,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1119,while (rs.next() && count < maxReturned) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,599,if (counter >= maxReturned) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,128,if (info != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,129,return info.isDispatchAsync();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1002,String str = brokerName.replaceAll("[^a-zA-Z0-9\\.\\_\\-\\:]", "_");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1004,LOG.error("Broker Name: {} contained illegal characters - replaced with {}", brokerName, str);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1558,vmConnectorURI = new URI("vm://" + getBrokerName().replaceAll("[^a-zA-Z0-9\\.\\_\\-]", "_"));
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,132,activeEvents.remove(uri);
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,141,activeEvents.remove(uri);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,279,LOG.warn("Exception occurred processing: \n" + command + ": " + exception.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,973,LOG.debug("Stomp Connect heartbeat conf RW[" + hbReadInterval + "," + hbWriteInterval + "]");
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,988,LOG.warn("Could not send a receipt for " + command, e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,266,throw new ProtocolException("Unknown STOMP action: " + action);
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,91,if (escape == (0xFFFF & c)) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,93,if (i >= like.length()) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,95,break;
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,102,regexp.append(".*?"); // Do a non-greedy match
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,104,regexp.append("."); // match one
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,106,regexp.append("\\x");
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,107,regexp.append(Integer.toHexString(0xFFFF & c));
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,109,regexp.append(c);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1603,ArrayList<MessageReference> alreadyDispatchedMessages = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1606,alreadyDispatchedMessages = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,152,Iterator<MessageReference> iterator = iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,145,List<MessageReference> messageReferences = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,146,for (PendingNode pendingNode : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,147,messageReferences.add(pendingNode.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,149,return messageReferences;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,649,TransactionInfo info = new TransactionInfo(getConnectionId(), null, TransactionInfo.RECOVER);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,650,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,651,this.connection.checkClosedOrFailed();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,652,this.connection.ensureConnectionInfoSent();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,654,DataArrayResponse receipt = (DataArrayResponse)this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,655,DataStructure[] data = receipt.getData();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,656,XATransactionId[] answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,657,if (data instanceof XATransactionId[]) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,658,answer = (XATransactionId[])data;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,660,answer = new XATransactionId[data.length];
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,661,System.arraycopy(data, 0, answer, 0, data.length);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,663,LOG.debug("recover({})={}", flag, answer);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,664,return answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,666,throw toXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,physicalConnection.cleanup();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,787,xae.errorCode = original.errorCode;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,788,if (xae.errorCode == XA_OK) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,792,xae.initCause(original);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,48,private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,147,recoveringPullConsumers = new HashMap<ConsumerId, ConsumerInfo>();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,581,LOG.error("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,582,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,585,LOG.warn("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,586,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,352,LOG.error("Failed to create TopicSubscription ", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,249,long seq = ack.getLastMessageId().getFutureOrSequenceLong() != null ?
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,47,protected void initializeStreams() throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,48,codec = new StompCodec(this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,49,super.initializeStreams();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,50,if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,51,serviceRead();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,785,getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getFutureOrSequenceLong(), null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,236,connection = connectionsPool.borrowObject(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,237,synchronized (connection) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,238,if (connection.getConnection() != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,239,connection.incrementReferenceCount();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,240,break;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,244,connectionsPool.returnObject(key, connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,245,connection = null;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,238,if( !targetScores.isEmpty() ) {
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,240,int bestScore=0;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,242,if( entry.getValue().value > bestScore ) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,910,public void setObjectProperty(String name, Object value) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,911,initializeWriting();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,912,super.setObjectProperty(name, value);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,449,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,460,public int getMaxAuditDepth() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,209,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,226,public int getMaxAuditDepth() {
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,22,private long maxSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,23,private long minSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,80,public synchronized long getMinSize() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,125,private Marshaller<Key> keyMarshaller;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,395,public synchronized void setKeyMarshaller(Marshaller<Key> marshaller) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,136,PreparedStatement statement = connection.prepareStatement(getStatements().getCurrentDateTime());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,137,ResultSet resultSet = statement.executeQuery();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,138,long result = 0l;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,139,if (resultSet.next()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,140,Timestamp timestamp = resultSet.getTimestamp(1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,141,long diff = System.currentTimeMillis() - timestamp.getTime();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,142,if (Math.abs(diff) > maxAllowableDiffFromDBTime) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,144,result = (-diff);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,146,LOG.info(getLeaseHolderId() + " diff adjust from db: " + result + ", db time: " + timestamp);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,148,return result;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,407,class BrowserDispatch {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,408,QueueBrowserSubscription browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,410,public BrowserDispatch(QueueBrowserSubscription browserSubscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,411,browser = browserSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,412,browser.incrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,423,public QueueBrowserSubscription getBrowser() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,424,return browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,428,ConcurrentLinkedQueue<BrowserDispatch> browserDispatches = new ConcurrentLinkedQueue<BrowserDispatch>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,477,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,478,browserDispatches.add(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,589,browserDispatches.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1611,Iterator<BrowserDispatch> browsers = browserDispatches.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1613,BrowserDispatch browserDispatch = browsers.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1618,QueueBrowserSubscription browser = browserDispatch.getBrowser();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1634,browserDispatches.remove(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1637,LOG.warn("exception on dispatch to browser: {}", browserDispatch.getBrowser(), e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,26,import javax.jms.Destination;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,512,destination = activeMQDestinationMap.get(command.topicName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,262,LOG.info("Loaded the Bouncy Castle security provider.");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,128,String clientId = activationSpec.getClientId();
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,95,factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,69,public static final int MAX_CLIENT_TIMEOUT = 30000;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,97,public boolean waitForSpace(long timeout) throws InterruptedException {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,109,while (percentUsage >= 100 ) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,110,waitForSpaceCondition.await(timeout, TimeUnit.MILLISECONDS);
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,112,usageLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,59,final Set<TransactionId> recoveredPendingCommit = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,316,recoveredPendingCommit.addAll(inflightTransactions.keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,317,LOG.info("pending local transactions: " + recoveredPendingCommit);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,373,if (recoveredPendingCommit.contains(txid)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,313,process(load(location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,332,public void process(JournalCommand<?> command) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,336,getTx(TransactionIdConversion.convert(prepareCommand.getTransactionInfo()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,321,if (name.endsWith(".data") || name.endsWith(".redo") || name.endsWith(".log")) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,116,private final IdGenerator ACK_ID_GENERATOR = new IdGenerator();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,130,private static class AckEntry {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,132,private final String messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,133,private final StompSubscription subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,135,public AckEntry(String messageId, StompSubscription subscription) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,136,this.messageId = messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,137,this.subscription = subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,140,public MessageAck onMessageAck(TransactionId transactionId) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,141,return subscription.onStompMessageAck(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,144,public MessageAck onMessageNack(TransactionId transactionId) throws ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,145,return subscription.onStompMessageNack(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,148,public String getMessageId() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,149,return this.messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,153,public StompSubscription getSubscription() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,154,return this.subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,372,AckEntry pendingAck = this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,374,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,428,AckEntry pendingAck = this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,430,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,511,pedingAcks.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,542,pedingAcks.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,604,stompSubscription = new StompSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,606,stompSubscription = new StompQueueBrowserSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,863,String ackId = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,864,if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO && md.getMessage() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,865,AckEntry pendingAck = new AckEntry(md.getMessage().getMessageId().toString(), sub);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,866,ackId = this.ACK_ID_GENERATOR.generateId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,867,this.pedingAcks.put(ackId, pendingAck);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,869,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,870,sub.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,872,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,873,this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,30,public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,31,super(stompTransport, subscriptionId, consumerInfo, transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,35,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,38,super.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,24,import java.util.Map.Entry;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,59,public StompSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,66,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,74,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,103,protocolConverter.getStompTransport().sendToStomp(command);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,107,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,113,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,117,if (unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,123,ack = new MessageAck(unconsumedMessage.getLast(), MessageAck.STANDARD_ACK_TYPE, unconsumedMessage.size());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,124,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,if (!dispatchedMessage.containsKey(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,145,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,152,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,155,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,156,MessageId id = (MessageId)entry.getKey();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,157,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,160,if (!unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,161,unconsumedMessage.add(msg);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,165,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,169,if (id.equals(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,170,ack.setLastMessageId(id);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,183,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,205,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,208,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,656,protected List<JobLocation> getAllScheduledJobs(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,659,for (Iterator<Map.Entry<Long, List<JobLocation>>> i = this.index.iterator(tx); i.hasNext();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,660,Map.Entry<Long, List<JobLocation>> entry = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,661,List<JobLocation> scheduled = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,662,for (JobLocation job : scheduled) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,663,references.add(job);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,667,return references;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,815,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,816,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,843,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,844,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,926,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,927,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,896,sd.orderIndex.setBatch(tx, cursorPos);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,934,sd.orderIndex.setBatch(tx, pos);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1020,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1021,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1023,if (taskRunnerFactory != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1024,taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1025,+ getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1027,taskRunner = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1029,transport.start();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1030,active = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1031,BrokerInfo info = connector.getBrokerInfo().copy();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1032,if (connector.isUpdateClusterClients()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1033,info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1035,info.setPeerBrokerInfos(null);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1037,dispatchAsync(info);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1039,connector.onStarted(this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1044,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1049,setStarting(false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1050,if (isPendingStop()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1051,LOG.debug("Calling the delayed stop() after start() {}", this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1052,stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1070,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1094,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1097,LOG.debug("stopAsync() called in the middle of start(). Delaying till start completes..");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1098,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1524,metadata.ackMessageFileMapLocation = checkpointAckMessageFileMap();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2133,Iterator<Entry<String, SequenceSet>> subscriptions = rc.ackPositions.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2134,while (subscriptions.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2135,Entry<String, SequenceSet> subscription = subscriptions.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2136,SequenceSet pendingAcks = subscription.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2137,if (pendingAcks != null && !pendingAcks.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2138,Long lastPendingAck = pendingAcks.getTail().getLast();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2140,Long current = rc.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2141,if (current == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2142,current = new Long(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2147,if (!sequenceId.equals(lastPendingAck)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2148,current = current.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2151,rc.messageReferences.put(sequenceId, current);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2173,if (!rc.messageReferences.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2174,Long nextMessageId = (Long) rc.messageReferences.keySet().toArray()[rc.messageReferences.size() - 1];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2175,rc.orderIndex.nextMessageId =
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2176,Math.max(rc.orderIndex.nextMessageId, nextMessageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2199,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2200,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2201,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2203,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2204,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2219,for (Long ackPosition : allOutstanding) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2220,Long count = sd.messageReferences.get(ackPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2239,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2240,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2241,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2243,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2244,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2259,Long references = sd.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2260,if (references != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2261,references = references.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2263,if (references.longValue() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2264,sd.messageReferences.put(sequenceId, references);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2266,sd.messageReferences.remove(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2267,unreferenced.add(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2307,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2310,if (references > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2311,sd.messageReferences.put(messageSequence, Long.valueOf(references));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2312,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2314,sd.messageReferences.remove(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,463,metaData.setCleanShutdown(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,414,freeList = new SequenceSet();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,415,for (Iterator<Page> i = tx().iterator(true); i.hasNext(); ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,416,Page page = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,417,if (page.getType() == Page.PAGE_FREE_TYPE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,418,freeList.add(page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1263,List<Operation> tx = inflightTransactions.remove(key);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,277,destinationMap.removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,292,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,52,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,204,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,251,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,292,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,821,ConnectionContext answer = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,472,ConnectionContext context = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,84,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1067,MessageEvaluationContext messageEvalContext = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1173,&& messages.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,20,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,21,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,215,double value = flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,80,if (getDurableTopicPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,83,if (getOptimizeDurableTopicPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,86,if (getQueuePrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,89,if (getQueueBrowserPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,92,if (getTopicPrefetch() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,52,String SUBSCRIBE = "SUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,53,String UNSUBSCRIBE = "UNSUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,112,private final Map<String, LocalTransactionId> transactions = new ConcurrentHashMap<String, LocalTransactionId>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,290,HashMap<String, String> headers = new HashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,792,HashMap<String, String> responseHeaders = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,197,getInternalScheduler().schedule(msg.getMessageId().toString(),
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,198,new ByteSequence(packet.data, packet.offset, packet.length), cronEntry, delay, period, repeat);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,173,private final CopyOnWriteArrayList<ActiveMQSession> sessions = new CopyOnWriteArrayList<ActiveMQSession>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,174,private final CopyOnWriteArrayList<ActiveMQConnectionConsumer> connectionConsumers = new CopyOnWriteArrayList<ActiveMQConnectionConsumer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,175,private final CopyOnWriteArrayList<TransportListener> transportListeners = new CopyOnWriteArrayList<TransportListener>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,837,Map<String, String> options = new HashMap<String, String>(info.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1256,Map<String, String> options = new HashMap<String, String>(consumerInfo.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1366,if(exception!=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1370,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1381,forceCloseOnSecurityException(exception);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1383,if (jmsEx !=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1415,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1425,forceCloseOnSecurityException(er.getException());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1427,if (jmsEx !=null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,42,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,191,nonPersistent.addMessageLast(node);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,200,Set set = get(destination);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,815,RemoveSubscriptionInfo info = ((RemoveSubscriptionInfo) data);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,816,SubscriptionInfo subscriptionInfo = new SubscriptionInfo(info.getClientId(), info.getSubscriptionName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,820,if (removed) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,454,localClientId = configuration.getName() + "_" + remoteBrokerName + "_inbound_" + configuration.getBrokerName();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,479,duplexLocalConnectionInfo.setClientId(configuration.getName() + "_" + remoteBrokerName + "_inbound_duplex_"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,480,+ configuration.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,548,remoteConnectionInfo.setClientId(configuration.getName() + "_" + configuration.getBrokerName() + "_outbound");
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,75,ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,92,import org.apache.activemq.transport.tcp.SslTransport;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1182,sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,60,if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,87,return ds.isStaticallyIncluded() || !ds.getRemoteInfo().isNetworkSubscription();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,934,localBroker.oneway(sub.getLocalInfo().createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,89,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,268,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,269,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,270,int newExtension = Math.max(currentExtension, currentExtension + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,271,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,272,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,301,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,302,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,303,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,304,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,305,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,369,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,370,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,371,int newExtension = Math.max(0, currentExtension - (index + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,372,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,373,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,413,public void beforeEnd() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,415,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,416,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,417,int newExtension = Math.max(0, currentExtension - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,418,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,419,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,429,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,440,synchronized(dispatchLock) {
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,28,public class MessagePull extends BaseCommand {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,47,e.printStackTrace();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQStreamMessage.java,746,return rc;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2481,private Journal createJournal() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,149,location.setLatch(batch.latch);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,176,WriteBatch batch = enqueue(write);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,178,location.setLatch(batch.latch);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,77,private final AtomicBoolean connectorStarting = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,127,connectorStarting.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,136,connectorStarting.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,175,if (!connectorStarting.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,303,return connectorStarting.get() || (connectorServer != null && connectorServer.isActive());
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,52,if (ignoreAllErrors) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,94,lockable.getBrokerService().handleIOException(IOExceptionSupport.create(e));
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,87,super.addConnection(context, info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,605,if (getBrokerService().isStarted()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,607,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,608,String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,609,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,611,String url = getBrokerService().getVmConnectorURI().toString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,613,url = getBrokerService().getDefaultSocketURIString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,615,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,618,advisoryMessage.setDataStructure(command);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,619,advisoryMessage.setPersistent(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,620,advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,621,advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,622,advisoryMessage.setTargetConsumerId(targetConsumerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,623,advisoryMessage.setDestination(topic);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,624,advisoryMessage.setResponseRequired(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,625,advisoryMessage.setProducerId(advisoryProducerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,626,boolean originalFlowControl = context.isProducerFlowControl();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,627,final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,628,producerExchange.setConnectionContext(context);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,629,producerExchange.setMutable(true);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,630,producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,631,try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,632,context.setProducerFlowControl(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,633,next.send(producerExchange, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,635,context.setProducerFlowControl(originalFlowControl);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,if (!unconsumedMessage.isEmpty()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,345,ActiveMQConnection connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,346,connection.start();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,485,if (context == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1305,this.future.setException(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1321,public void setException(final Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1422,this.future.setException(e);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,55,public void purge() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,675,LOG.error("expired waiting for space..");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,63,public int removeMatchingMessages(String selector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,67,public int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,95,public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,101,public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,107,public int retryMessages() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1027,throw new IOException("Could not load journal record. Invalid location: "+location);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,205,if (!isCacheEnabled() && size==0 && isStarted() && useCache) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,206,if (LOG.isTraceEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,207,LOG.trace("{} - enabling cache for empty store {} {}", this, node.getMessageId(), node.getMessageId().getFutureOrSequenceLong());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,209,setCacheEnabled(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,236,if (lastCachedIds[SYNC_ADD] == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,238,for (ListIterator<MessageId> it = pendingCachedIds.listIterator(pendingCachedIds.size()); it.hasPrevious(); ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,239,MessageId lastPending = it.previous();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,240,Object futureOrLong = lastPending.getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,241,if (futureOrLong instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,242,Future future = (Future) futureOrLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,243,if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,244,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,246,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,247,future.get(5, TimeUnit.SECONDS);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,248,setLastCachedId(ASYNC_ADD, lastPending);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,250,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,252,LOG.debug("{} timed out waiting for async add", this, potentialDeadlock);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,LOG.debug("{} exception waiting for async add", this, worstCaseWeReplay);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,259,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,261,if (lastCachedIds[ASYNC_ADD] != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,if (isAsync(currentAdd) || Long.compare(((Long) currentAdd.getMessageId().getFutureOrSequenceLong()), ((Long) lastCachedIds[ASYNC_ADD].getFutureOrSequenceLong())) > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,264,setBatch(lastCachedIds[ASYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,268,setBatch(lastCachedIds[SYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,462,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,463,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,484,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,485,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2017,if (!closing.get() && !closed.get()) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,49,connection.connect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,50,connection.disconnect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,69,throw new IOException("PUT was not successful: " + connection.getResponseCode() + " "
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,248,tl.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2515,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2518,map.put("async", "false");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2519,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2540,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1370,Transport localTransport = NetworkBridgeFactory.createLocalTransport(broker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,184,duplexInboundLocalBroker = NetworkBridgeFactory.createLocalTransport(brokerService.getBroker());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,724,MessageAck ack = new MessageAck(message, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,726,remoteBroker.oneway(ack);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,911,localBroker.request(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,913,localBroker.oneway(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,74,public static Transport createLocalTransport(Broker broker) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,75,URI uri = broker.getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,78,map.put("async", "true");
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,687,addConsumerInfo((ConsumerInfo) command);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,768,synchronized (brokerService.getVmConnectorURI()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,909,if (isDuplex()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1205,&& !configuration.isSuppressDuplicateTopicSubscriptions()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,69,protected boolean warnOnProducerFlowControl = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,673,long nextWarn = start;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,681,long now = System.currentTimeMillis();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,682,if (now >= nextWarn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,683,getLog().info("{}: {} (blocking for: {}s)", new Object[]{ usage, warning, new Long(((now - start) / 1000))});
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,684,nextWarn = now + blockedProducerWarningInterval;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,639,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,640,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,341,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,342,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected boolean usePrefetchExtension = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,266,if (usePrefetchExtension && getPrefetchSize() != 0 && ack.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,299,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,414,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,841,public boolean isUsePrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,842,return usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,845,public void setUsePrefetchExtension(boolean usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,846,this.usePrefetchExtension = usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,643,while (pending.hasNext() && !isFull() && count < numberToDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,107,if (message.isRecievedByDFBridge()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,152,return systemUsage != null ? (!systemUsage.getMemoryUsage().isFull(memoryUsageHighWaterMark)) : true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,180,private final List<TransportConnector> transportConnectors = new CopyOnWriteArrayList<TransportConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,181,private final List<NetworkConnector> networkConnectors = new CopyOnWriteArrayList<NetworkConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,182,private final List<ProxyConnector> proxyConnectors = new CopyOnWriteArrayList<ProxyConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,183,private final List<JmsConnector> jmsConnectors = new CopyOnWriteArrayList<JmsConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,184,private final List<Service> services = new ArrayList<Service>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,221,private final List<Runnable> shutdownHooks = new ArrayList<Runnable>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,609,LOG.error("Failed to start Apache ActiveMQ ({}, {})", new Object[]{ getBrokerName(), brokerId }, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1311,Map<String, String> answer = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1432,return new ArrayList<TransportConnector>(transportConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1467,return new ArrayList<NetworkConnector>(networkConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1471,return new ArrayList<ProxyConnector>(proxyConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2289,List<DestinationInterceptor> answer = new ArrayList<DestinationInterceptor>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2516,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2640,Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import java.util.HashSet;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,35,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,253,MessageAvailableConsumer consumer, long deadline) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,304,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,305,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,306,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,308,if (isXmlContent(message)) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,309,response.setContentType(defaultContentType);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,311,response.setContentType("text/plain");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,398,for (Enumeration names = message.getPropertyNames(); names.hasMoreElements();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,663,return "KahaDBPersistenceAdapter[" + path + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,145,private String nameFromDestinationFilter(ActiveMQDestination destination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,396,File defaultDir = MessageDatabase.DEFAULT_DIRECTORY;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1247,ack.setPoisonCause(new Throwable("Exceeded redelivery policy limit:" + redeliveryPolicy
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1386,posionAck(md, "dispatch to " + getConsumerId() + " exceeds redelivery policy limit:" + redeliveryPolicy);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,187,if (!brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,188,Response response = service(command);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,189,if (response != null && !brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,190,dispatchSync(response);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,193,throw new BrokerStoppedException("Broker " + brokerService + " is being stopped");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,428,Collection<TransactionState> transactions = cs.getTransactionStates();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,429,for (TransactionState transaction : transactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,430,rc++;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,65,private static int defaultJmxPort = 1099;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,138,int id = getNextId();
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,184,return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection:" + id);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,40,log.debug("SENDING REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,45,log.debug("GOT RESPONSE: "+response);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,50,log.debug("SENDING ASNYC REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,55,log.debug("SENDING: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,60,log.debug("RECEIVED: " + command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,65,log.debug("RECEIVED Exception: "+error, error);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,93,synchronized (transactionStore) {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,94,transactionStore.rollback(getTransactionId());
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,96,try {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,97,fireAfterRollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,99,LOG.warn("POST ROLLBACK FAILED: ", e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,100,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,101,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,102,xae.initCause(e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,103,throw xae;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1052,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1053,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1057,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1058,checksum.update(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1060,throw IOExceptionSupport.create("Cannot create recovery file. Reason: " + t, t);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1062,recoveryFile.writeLong(w.page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1063,recoveryFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1071,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,38,private HashMap<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,212,public void setPortMapping(HashMap<Integer, Integer> portMapping) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/IntrospectionSupport.java,97,if (boolean.class.isAssignableFrom(to) && value instanceof String) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,160,public Set<String> getSelector(final String destination) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,161,return subSelectorCache.get(destination);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,259,return "ServerSessionImpl:" + serverSessionId + "{" + session +"}";
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,783,private XAException toXAException(JMSException e) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,802,private int parseFromMessageOr(String message, int fallbackCode) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,738,private void checkReadOnlyProperties() throws MessageNotWriteableException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,311,Location location = journal.getNextLocation(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,312,while (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,314,location = journal.getNextLocation(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,372,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,374,LOG.info("delivering pending commit outcome for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,375,broker.commitTransaction(null, txid, false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,378,LOG.info("delivering rollback outcome to store for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,379,broker.forgetTransaction(null, txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,381,persistCompletion(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,383,LOG.error("failed to deliver pending outcome for tid: " + txid, ex);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,218,Sequence sequence = new Sequence(location.getOffset(), nextOffset - 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,242,dataFile.setLength((int) dataFile.corruptedBlocks.removeLastSequence().getFirst());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,745,this.transactionContext = null;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,80,protected ByteSequence marshalledProperties;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,269,((JDBCPersistenceAdapter)persistenceAdapter).rollbackLastAck(context, priority, jdbcTopicMessageStore.getDestination(), subName, clientId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1037,String subName = rs.getString(3);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1038,String subId = rs.getString(4);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,562,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,567,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,589,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,592,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,611,protected int recoverRolledBackAcks(StoredDestination sd, Transaction tx, int maxReturned, MessageRecoveryListener listener) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,626,LOG.info("rolledback ack message {} with seq {} will be picked up in future batch {}", id, sequence, sd.orderIndex.cursor);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,897,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,901,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,941,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,945,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1290,StoredDestination sd = getStoredDestination(command.getDestination(), tx);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,59,public boolean removeMessage(String messageId) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,71,public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,77,public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,83,public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,89,public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1312,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1379,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1471,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1500,set.addAll(pagedInMessages.values());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,126,private PreviouslyDeliveredMap<MessageId, Boolean> previouslyDeliveredMessages;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,146,private boolean clearDeliveredList;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,755,inProgressClearRequiredFlag.decrementAndGet();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,762,clearDeliveredList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1132,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1133,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1160,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1161,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1236,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1267,if (nonBlockingRedelivery) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1268,if (!unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1270,final LinkedList<MessageDispatch> pendingRedeliveries =
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1271,new LinkedList<MessageDispatch>(deliveredMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1273,Collections.reverse(pendingRedeliveries);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1275,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1276,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1284,for(MessageDispatch dispatch : pendingRedeliveries) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1296,unconsumedMessages.stop();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1298,for (MessageDispatch md : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1299,unconsumedMessages.enqueueFirst(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1302,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1303,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1305,if (redeliveryDelay > 0 && !unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1307,session.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1311,if (started.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1312,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1320,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1326,if (messageListener.get() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1327,session.redispatch(this, unconsumedMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1338,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1339,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1343,removeFromDeliveredMessages(entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1383,if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1410,if (!unconsumedMessages.isRunning()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1412,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1455,if (previouslyDeliveredMessages.containsKey(md.getMessage().getMessageId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1457,previouslyDeliveredMessages.put(md.getMessage().getMessageId(), true);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1486,if (previouslyDeliveredMessages == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1487,previouslyDeliveredMessages = new PreviouslyDeliveredMap<MessageId, Boolean>(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1489,for (MessageDispatch delivered : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1490,previouslyDeliveredMessages.put(delivered.getMessage().getMessageId(), false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2028,for (MessageDispatch md : c) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2029,this.connection.rollbackDuplicate(dispatcher, md.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1373,int oldMaxSize = getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1374,setMaxPageSize((int) this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1375,doPageIn(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1376,setMaxPageSize(oldMaxSize);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,83,this.cleanupConnectionTemporaryDestinations();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,287,exception.printStackTrace(stream);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,315,protected void acknowledge(ConnectionContext context, MessageAck ack, MessageReference node) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,223,String remoteHost = transport.getRemoteAddress();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,230,String remoteHost = transport.getRemoteAddress();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,282,updated.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,792,if (!updated.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,793,return updated;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,795,ArrayList<URI> l = new ArrayList<URI>(uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,798,removed = l.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,941,List<URI> connectList = getConnectList();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,return new XAResource[]{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,new TransactionContext() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,244,public boolean isSameRM(XAResource xaresource) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,245,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,247,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,248,boolean result = super.isSameRM(xaresource);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,249,LOG.trace("{}.recover({})={}", getConnection(), xaresource, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,253,LOG.trace("isSameRM({}) failed", xaresource, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,254,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,255,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,257,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,262,protected String getResourceManagerId() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,263,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,264,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,265,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,266,return super.getResourceManagerId();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,268,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,273,public void commit(Xid xid, boolean onePhase) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,274,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,275,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,276,setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,277,super.commit(xid, onePhase);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,278,LOG.trace("{}.commit({},{})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,281,LOG.trace("{}.commit({},{}) failed", getConnection(), xid, onePhase, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,282,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,284,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,289,public void rollback(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,290,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,291,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,292,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,293,super.rollback(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,294,LOG.trace("{}.rollback({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,297,LOG.trace("{}.rollback({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,298,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,300,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,305,public Xid[] recover(int flags) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,306,Xid[] result = new Xid[]{};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,307,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,308,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,309,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,310,result = super.recover(flags);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,311,LOG.trace("{}.recover({})={}", getConnection(), flags, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,314,LOG.trace("{}.recover({}) failed", getConnection(), flags, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,315,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,317,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,319,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,323,public void forget(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,324,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,325,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,326,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,327,super.forget(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,328,LOG.trace("{}.forget({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,331,LOG.trace("{}.forget({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,332,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,334,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,338,private void throwXAException(JMSException e) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,339,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,340,xaException.errorCode = XAException.XAER_RMFAIL;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,341,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,344,private ActiveMQConnection newConnection() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,347,return connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,350,private void closeConnection(ActiveMQConnection original) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,351,ActiveMQConnection connection = getConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,352,if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,353,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,354,connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,357,setConnection(original);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,604,boolean willSent = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,606,if (connect != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,607,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,608,if (connect.willTopic() != null && connect.willMessage() != null && !willSent) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,609,willSent = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,610,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,611,PUBLISH publish = new PUBLISH();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,612,publish.topicName(connect.willTopic());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,613,publish.qos(connect.willQos());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,614,publish.messageId(packetIdGenerator.getNextSequenceId(getClientId()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,615,publish.payload(connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,616,ActiveMQMessage message = convertMessage(publish);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,617,message.setProducerId(producerId);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,618,message.onSend();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,620,sendToActiveMQ(message, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,622,LOG.warn("Failed to publish Will Message " + connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,626,sendToActiveMQ(connectionInfo.createRemoveCommand(), null);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,159,lastBatchId = messageId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,82,public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,89,public synchronized void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/store/PersistenceAdapter.java,190,void checkpoint(boolean sync) throws IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/AbstractKahaDBStore.java,669,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,83,public void checkpoint(boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,84,this.letter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,327,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,429,checkpointUpdate(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,994,startCheckpoint();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,165,public void checkpoint(final boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,167,persistenceAdapter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,233,checkpointUpdate(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,19,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,20,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,21,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,22,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,77,if (getMaxSlowDuration() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,80,for (SlowConsumerEntry entry : slowConsumers.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,81,entry.mark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,57,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,852,public void duplicateFromStore(Message message, Subscription durableSub) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,854,getLog().warn("duplicate message from store {}, redirecting for dlq processing", message.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,855,Throwable cause = new Throwable("duplicate from store for " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,861,acknowledge(connectionContext, durableSub, messageAck, message);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,131,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1677,if (tempDataStore == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1874,if (jobSchedulerStore == null) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,120,if( sslContext == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,121,if( provider == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,122,sslContext = SSLContext.getInstance(protocol);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,124,sslContext = SSLContext.getInstance(protocol, provider);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,126,sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,130,public void setSSLContext(SSLContext sslContext) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,294,if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,295,it.remove();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,198,activeSessions.remove(ss);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,230,if (!l.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,141,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,118,purgeInactiveDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,729,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,49,private boolean started=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,38,private boolean started;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,48,private boolean cacheEnabled=true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,86,persistenceAdapter.commitTransaction(ctx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,70,close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,136,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,139,if (connection != null && !connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,150,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,151,if (connection != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,152,connection.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,156,LOG.trace("Closing connection failed due: " + e.getMessage() + ". This exception is ignored.", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,158,connection = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,181,if (!connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,213,private void doRollback() throws SQLException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,214,if (addMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,215,addMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,216,addMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,218,if (removedMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,219,removedMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,220,removedMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,222,if (updateLastAckStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,223,updateLastAckStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,224,updateLastAckStatement = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,164,private final Set<TransactionStore> stores = new HashSet<TransactionStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,168,stores.add(store);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,171,public Set<TransactionStore> getStores() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,215,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,216,store.commit(txid, true, null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,264,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,265,store.rollback(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,358,getTx(xid).trackStore(adapter.createTransactionStore());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,30,import org.apache.activemq.ActiveMQMessageAudit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,86,final ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,132,Destination destination =  addDestination(context, amqDestination, false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,133,registerSync(destination, transaction, ack);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,136,private void registerSync(Destination destination, Transaction transaction, BaseCommand command) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,137,Synchronization sync = new PreparedDestinationCompletion(destination, command.isMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,148,final Destination destination;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,151,public PreparedDestinationCompletion(final Destination destination, boolean messageSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,177,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,185,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,186,destination.getDestinationStatistics().getEnqueues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,187,destination.getDestinationStatistics().getMessages().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,190,destination.getDestinationStatistics().getDequeues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,191,destination.getDestinationStatistics().getMessages().subtract(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Destination.java,242,public void clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,382,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,383,next.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,431,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,432,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1256,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,794,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,78,resetSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,329,setCacheEnabled(false);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,33,public class ProxyTopicMessageStore implements TopicMessageStore {
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,35,final TopicMessageStore delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,38,this.delegate = delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,87,return delegate.lookupSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,93,delegate.acknowledge(context, clientId, subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,98,delegate.addSubscription(subscriptionInfo, retroactive);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,103,delegate.deleteSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,109,delegate.recoverSubscription(clientId, subscriptionName, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,115,delegate.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,120,delegate.resetBatching(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,130,return delegate.getAllSubscriptions();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,140,return delegate.getMessageCount(clientId, subscriberName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,113,persistenceAdapter.commitTransaction(ctx);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,263,tx = preparedTransactions.remove(txid);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,75,setStateFinished();
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,91,LOG.warn("Store COMMIT FAILED: ", t);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,92,rollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,93,XAException xae = newXAException("STORE COMMIT FAILED: Transaction rolled back", XAException.XA_RBOTHER);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,109,queue.clearPendingMessages();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,87,private MemoryTransactionStore transactionStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,194,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,195,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,196,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,203,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,204,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,205,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,250,if (transactionStore == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,251,transactionStore = new JdbcMemoryTransactionStore(this);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,149,return perPriority[javax.jms.Message.DEFAULT_PRIORITY];
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,308,recovered.perPriority[isPrioritizedMessages() ? priority : javax.jms.Message.DEFAULT_PRIORITY].recovered = sequenceId;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,21,import java.util.HashMap;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,32,import org.apache.activemq.store.ProxyTopicMessageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,51,private HashMap<ActiveMQDestination, MessageStore> topicStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,52,private HashMap<ActiveMQDestination, MessageStore> queueStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,302,protected void onProxyTopicStore(ProxyTopicMessageStore proxyTopicMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,303,topicStores.put(proxyTopicMessageStore.getDestination(), proxyTopicMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,307,protected void onProxyQueueStore(ProxyMessageStore proxyQueueMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,308,queueStores.put(proxyQueueMessageStore.getDestination(), proxyQueueMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,316,JDBCTopicMessageStore jdbcTopicMessageStore = (JDBCTopicMessageStore) topicStores.get(lastAckCommand.getMessageAck().getDestination());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,323,((JDBCPersistenceAdapter)persistenceAdapter).getBrokerService().getRegionBroker().getDestinationMap().get(removeMessageCommand.getMessageAck().getDestination()).getDestinationStatistics().getMessages().increment();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,327,ActiveMQDestination destination = addMessageCommand.getMessage().getDestination();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,328,addMessageCommand.setMessageStore(destination.isQueue() ? queueStores.get(destination) : topicStores.get(destination));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2364,public void trackRecoveredAcks(ArrayList<MessageAck> acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2365,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2366,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2367,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2368,ackedAndPrepared.add(ack.getLastMessageId().toProducerKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2371,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2375,public void forgetRecoveredAcks(ArrayList<MessageAck> acks, boolean rollback) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2376,if (acks != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2377,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2378,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2379,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2380,final String id = ack.getLastMessageId().toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2381,ackedAndPrepared.remove(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2382,if (rollback) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2383,rolledBackAcks.add(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2387,this.indexLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,202,Message msg = (Message) ((JDBCPersistenceAdapter)persistenceAdapter).getWireFormat().unmarshal(new ByteSequence(message));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,206,tx.add(new RemoveMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,219,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,456,while (result && tokenizer.hasMoreTokens()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,467,boolean result = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,103,private final Map<Destination, String> mqttTopicMap = new LRUCache<Destination, String>(DEFAULT_CACHE_SIZE);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,548,topicName = mqttTopicMap.get(message.getJMSDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,550,String amqTopicName = findSubscriptionStrategy().onSend(message.getDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,552,mqttTopicMap.put(message.getJMSDestination(), topicName);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,176,diskBoundLocation = -1;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,798,serialExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,800,public void run() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,801,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,802,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,804,LOG.warn("failed to deliver remove command for destination: {}", destInfo.getDestination(), e);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,809,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,907,protected void addSubscription(DemandSubscription sub) throws IOException {
