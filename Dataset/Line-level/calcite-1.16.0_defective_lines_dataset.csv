File,Line_number,SRC
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3960,SqlNode selectItem = selectItems.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,67,final List<AbstractConverter> abstractConverters = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,356,planner.checkForSatisfiedConverters(set, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1136,void checkForSatisfiedConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1137,RelSet set,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1138,RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1139,int i = 0;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1140,while (i < set.abstractConverters.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1141,AbstractConverter converter = set.abstractConverters.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1143,changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1144,rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1145,converter.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1146,if (converted == null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1149,if (!isRegistered(converted)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1623,set.abstractConverters.add((AbstractConverter) rel);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,66,final RexExecutorImpl executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,71,RexExecutorImpl executor,
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,253,final RexExecutable exec =
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,61,private String compile(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,104,public RexExecutable getExecutable(RexBuilder rexBuilder, List<RexNode> exps,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,109,RelOptUtil.pushPastProject(topProject.getProjects(), bottomProject);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,53,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexWindow.java,55,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1175,final ImmutableBitSet groupSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1201,final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1237,final RelNode r = frame.rel;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,501,if (!belongsToDag(vertex)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,41,import org.apache.calcite.rex.RexLiteral;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1009,boolean allowAbstractConverters) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1059,RelTraitSet stepTraits =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1062,rel = getSubset(converted, stepTraits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1130,RelNode changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1131,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1132,RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1133,return changeTraitsUsingConverters(rel, toTraits, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,57,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,136,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.GROUP_ID;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,421,aggMap.put(GROUP_ID, grouping);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1279,case GROUP_ID: // "GROUP_ID()"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1283,keys = ImmutableIntList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1284,break;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,121,if (flatGroupSets.isEmpty()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2795,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2797,aggConverter.getAggCalls()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2798,false);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,107,public Result visitChild(int i, RelNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,109,stack.push(new Frame(i, e));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,541,final String lowerName = name.toLowerCase(Locale.ROOT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,542,if (lowerName.startsWith("expr$")) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,544,ordinalMap.put(lowerName, node);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,562,Frame(int ordinalInParent, RelNode r) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,564,this.r = r;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,104,protected final Map<String, SqlNode> ordinalMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,112,public abstract Result visitChild(int i, RelNode e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,354,return new Result(node, clauses, alias4, rel.getRowType(), aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,364,return new Result(node, clauses, alias5, rel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,365,ImmutableMap.of(alias4, rel.getRowType()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,822,final SqlNode mappedSqlNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,823,ordinalMap.get(field.getName().toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,824,if (mappedSqlNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,825,return mappedSqlNode;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,946,&& neededAlias != null
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,947,&& (aliases.size() != 1 || !aliases.containsKey(neededAlias))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,955,return new Builder(rel, clauseList, select, newContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1034,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1036,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1048,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1050,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1084,Context context, Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1085,this.rel = rel;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1086,this.clauses = clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1087,this.select = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1088,this.context = context;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1144,return SqlImplementor.this.result(select, clauses, rel, aliases);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,313,if (!inputRels.contains(previous)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3117,convertQueryRecursive(call.getSource(), false, targetRowType).project();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,496,match.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,145,buf.append(", ");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,149,buf.append("]");
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,23,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,37,import org.apache.calcite.sql.type.SqlTypeUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,39,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,40,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,41,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,44,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,124,private List<RelDataType> collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,125,SqlValidator validator,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,126,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,127,SqlCall call) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,128,List<RelDataType> argTypes =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,129,SqlTypeUtil.deriveAndCollectTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,130,validator, scope, call.getOperandList());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,131,return ImmutableNullableList.of(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,132,argTypes.get(VALUE_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,133,argTypes.get(LOWER_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,134,argTypes.get(UPPER_OPERAND));
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,139,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,143,collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,144,callBinding.getValidator(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,145,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,146,callBinding.getCall()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,23,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,381,groupSetTreeSet.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,384,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,407,final Map<ImmutableBitSet, Integer> filters = new LinkedHashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,408,final int z = groupCount + distinctAggCalls.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,413,for (Ord<ImmutableBitSet> groupSet : Ord.zip(groupSets)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,414,filters.put(groupSet.e, z + groupSet.i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,419,final RelNode distinct = relBuilder.peek();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,426,for (Map.Entry<ImmutableBitSet, Integer> entry : filters.entrySet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,427,final long v = groupValue(fullGroupSet, entry.getKey());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,429,relBuilder.alias(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,430,relBuilder.equals(nodeZ, relBuilder.literal(v)),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,445,newFilterArg = filters.get(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,449,newFilterArg =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,450,filters.get(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,453,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,464,remap(fullGroupSet, aggregate.getGroupSet()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,899,final Clause maxClause = maxClause();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,900,boolean needNew = false;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,903,Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,904,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,906,|| (maxClause == clause && !nonWrapSet.contains(clause))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,907,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,913,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,983,public Clause maxClause() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,219,return inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,220,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,221,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,262,private RelDataType inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,263,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,264,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,270,thenTypes.add(argTypes.get(j));
core/src/main/java/org/apache/calcite/runtime/Hook.java,89,QUERY_PLAN;
core/src/main/java/org/apache/calcite/rel/core/Project.java,244,&& false) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,245,pw.item("type", rowType);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,282,int trivialCount = 0;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,286,if (level != SqlExplainLevel.DIGEST_ATTRIBUTES) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,287,trivialCount = countTrivial(projects);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,304,pw.item(prefix + outFields.get(i).getName(), projects.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,103,EnumerableRel.Result result = rootRel.implement(this, prefer);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,26,import org.apache.calcite.schema.Table;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,56,final Table table = relOptTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,57,if (!EnumerableTableScan.canHandle(table)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,58,return null;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,291,&& table instanceof QueryableTable) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,302,throw new AssertionError();
core/src/main/java/org/apache/calcite/util/BitString.java,195,assert bytes != null;
core/src/main/java/org/apache/calcite/util/BitString.java,196,int bitCount = bytes.length * 8;
core/src/main/java/org/apache/calcite/util/BitString.java,199,for (int i = 7; i >= 0; --i) {
core/src/main/java/org/apache/calcite/util/BitString.java,200,sb.append(((b & 1) == 0) ? '0' : '1');
core/src/main/java/org/apache/calcite/util/BitString.java,201,b >>= 1;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1421,final RelDataType source = ((RexCall) node).getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1423,final RelDataType target = node.getType();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,610,ImmutableList.Builder<SqlNode> orderNodes = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,613,orderNodes.add(toSql(program, rfc));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,617,new SqlNodeList(orderNodes.build(), POS);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,633,final int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,634,BigDecimal divider = endUnit.multiplier.scaleByPowerOfTen(-scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,637,if (scale > 0) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,638,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,643,value = encodeIntervalOrDecimal(value, decimalType, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,886,assert o instanceof TimeString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,887,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,888,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,889,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,891,o = ((TimeString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,892,break;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,902,assert o instanceof TimestampString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,903,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,904,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,905,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,907,o = ((TimestampString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,908,break;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,34,import org.apache.calcite.sql.dialect.CalciteSqlDialect;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,59,import java.io.PrintWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,60,import java.io.StringWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,267,StringWriter stringWriter = new StringWriter(query.length());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,268,PrintWriter printWriter = new PrintWriter(stringWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,269,SqlWriter writer = new SqlPrettyWriter(CalciteSqlDialect.DEFAULT, true, printWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,271,query = stringWriter.toString();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,64,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,138,final SqlNodeList selectList =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,139,new SqlNodeList(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,140,Collections.singletonList(SqlIdentifier.star(SqlParserPos.ZERO)),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,141,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,145,final SqlPrettyWriter writer = new SqlPrettyWriter(jdbcSchema.dialect);
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,75,SqlWriter.FrameTypeEnum.SIMPLE);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,198,final SqlWriter.Frame joinFrame =
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,199,writer.startList(SqlWriter.FrameTypeEnum.JOIN);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,204,String natural = "";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,205,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,206,natural = "NATURAL ";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,213,writer.sep(natural + "CROSS JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,216,writer.sep(natural + "FULL JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,219,writer.sep(natural + "INNER JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,222,writer.sep(natural + "LEFT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,225,writer.sep(natural + "RIGHT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,253,writer.endList(joinFrame);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,338,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,339,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,340,unparseListClause(writer, pattern.orderList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,341,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,125,return toSqlString(null).getSql();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,145,if (dialect == null) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,146,dialect = AnsiSqlDialect.DEFAULT;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,148,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,149,writer.setAlwaysUseParentheses(forceParens);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,150,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,151,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,152,unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,19,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,108,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,110,: writer.startList("", "");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,111,commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,112,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,119,for (SqlNode node : list) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,120,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,121,node.unparse(writer, 2, 3);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,125,void andOrList(SqlWriter writer, SqlKind sepKind) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,126,SqlBinaryOperator sepOp =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,127,sepKind == SqlKind.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,128,? SqlStdOperatorTable.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,129,: SqlStdOperatorTable.OR;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,130,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,131,SqlNode node = list.get(i);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,132,writer.sep(sepKind.name(), false);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,140,int lprec = (i == 0) ? 0 : sepOp.getRightPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,141,int rprec = (i == (list.size() - 1)) ? 0 : sepOp.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,142,node.unparse(writer, lprec, rprec);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,338,unparseListClause(writer, clause, null);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,345,if (clause instanceof SqlNodeList) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,346,if (sepKind != null) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,347,((SqlNodeList) clause).andOrList(writer, sepKind);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,349,((SqlNodeList) clause).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,352,clause.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,93,final SqlWriter.Frame listFrame =
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,94,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,95,unparseListClause(writer, orderBy.orderList);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,96,writer.endList(listFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,146,SqlNode selectClause = select.selectList;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,147,if (selectClause == null) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,148,selectClause = SqlIdentifier.star(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,150,final SqlWriter.Frame selectListFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,151,writer.startList(SqlWriter.FrameTypeEnum.SELECT_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,152,unparseListClause(writer, selectClause);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,153,writer.endList(selectListFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,178,SqlKind whereSepKind = SqlKind.AND;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,181,whereSepKind = SqlKind.OR;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,186,while (node.getKind() == whereSepKind) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,195,final SqlWriter.Frame whereFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,196,writer.startList(SqlWriter.FrameTypeEnum.WHERE_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,197,unparseListClause(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,198,writer,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,199,new SqlNodeList(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,200,list,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,201,select.where.getParserPosition()),
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,202,whereSepKind);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,203,writer.endList(whereFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,210,final SqlWriter.Frame groupFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,211,writer.startList(SqlWriter.FrameTypeEnum.GROUP_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,212,if (select.groupBy.getList().isEmpty()) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,213,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,214,writer.startList(SqlWriter.FrameTypeEnum.SIMPLE, "(", ")");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,215,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,217,unparseListClause(writer, select.groupBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,219,writer.endList(groupFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,227,final SqlWriter.Frame windowFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,228,writer.startList(SqlWriter.FrameTypeEnum.WINDOW_DECL_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,229,for (SqlNode windowDecl : select.windowDecls) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,230,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,231,windowDecl.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,233,writer.endList(windowFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,237,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,238,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,239,unparseListClause(writer, select.orderBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,240,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,179,SUB_QUERY,
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,224,IDENTIFIER(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,127,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,128,SqlWriter.FrameTypeEnum.create("CASE");
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,299,writer.startList(FRAME_TYPE, "CASE", "END");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,26,import org.apache.calcite.util.Unsafe;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,35,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,135,new SqlPrettyWriter(AnsiSqlDialect.DEFAULT).getBean();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,141,private final StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,142,protected final PrintWriter pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,147,protected boolean alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,148,private boolean keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,150,private boolean quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,151,private int indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,152,private boolean clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,153,private boolean selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,154,private boolean selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,156,private boolean windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,157,private boolean updateSetListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,158,private boolean windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,159,private SubQueryStyle subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,160,private boolean whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,162,private boolean caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,163,private int lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,164,private int charCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,172,if (pw == null) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,173,pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,175,this.pw = pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,176,this.dialect = dialect;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,177,this.alwaysUseParentheses = alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,178,resetSettings();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,179,reset();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,185,this(dialect, alwaysUseParentheses, null);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,189,this(dialect, true);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,199,this.caseClausesOnNewLines = caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,207,this.subQueryStyle = subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,211,this.windowNewline = windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,215,this.windowDeclListNewline = windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,219,return indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,223,return alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,234,return quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,238,return clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,242,return selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,246,return whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,250,return selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,254,return keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,258,return lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,263,indentation = 4;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,264,clauseStartsLine = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,265,selectListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,266,selectListExtraIndentFlag = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,267,keywordsLowerCase = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,268,quoteAllIdentifiers = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,269,windowDeclListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,270,updateSetListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,271,windowNewline = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,272,subQueryStyle = SubQueryStyle.HYDE;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,273,alwaysUseParentheses = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,274,whereListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,275,lineLength = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,276,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,280,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,281,Unsafe.clear(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,302,this.indentation = indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,350,this.clauseStartsLine = clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,358,this.selectListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,386,public void setSelectListExtraIndentFlag(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,387,this.selectListExtraIndentFlag = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,394,public void setKeywordsLowerCase(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,395,this.keywordsLowerCase = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,404,public void setWhereListItemsOnSeparateLines(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,405,this.whereListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,408,public void setAlwaysUseParentheses(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,409,this.alwaysUseParentheses = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,413,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,414,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,415,indent(currentIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,423,Spaces.append(pw, indent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,424,charCount += indent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,434,public void setQuoteAllIdentifiers(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,435,this.quoteAllIdentifiers = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,455,int indentation = getIndentation();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,456,if (frameType instanceof FrameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,457,FrameTypeEnum frameTypeEnum = (FrameTypeEnum) frameType;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,459,switch (frameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,460,case WINDOW_DECL_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,461,case VALUES:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,462,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,463,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,464,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,465,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,466,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,467,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,468,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,469,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,470,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,471,windowDeclListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,472,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,473,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,475,case UPDATE_SET_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,476,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,477,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,478,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,479,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,480,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,481,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,482,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,483,updateSetListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,484,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,485,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,486,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,487,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,489,case SELECT_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,490,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,491,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,492,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,493,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,494,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,495,selectListExtraIndentFlag ? indentation : 0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,496,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,497,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,498,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,499,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,500,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,501,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,503,case ORDER_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,504,case GROUP_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,505,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,506,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,507,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,508,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,509,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,510,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,511,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,512,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,513,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,514,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,515,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,516,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,518,case SUB_QUERY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,519,switch (subQueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,520,case BLACK:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,526,open = Spaces.padRight("(", indentation);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,527,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,528,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,529,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,530,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,531,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,532,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,533,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,534,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,535,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,536,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,537,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,538,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,539,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,540,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,543,case HYDE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,549,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,550,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,551,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,552,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,553,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,554,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,555,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,556,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,557,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,558,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,559,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,560,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,561,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,562,nextWhitespace = NL;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,565,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,566,throw Util.unexpected(subQueryStyle);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,569,case ORDER_BY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,570,case OFFSET:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,571,case FETCH:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,572,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,573,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,574,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,575,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,576,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,577,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,578,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,579,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,580,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,581,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,582,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,583,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,585,case SELECT:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,586,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,587,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,588,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,589,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,590,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,591,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,592,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,593,isClauseStartsLine(), // newline before FROM, WHERE etc.
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,594,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,595,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,596,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,597,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,599,case SETOP:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,600,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,601,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,602,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,603,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,604,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,605,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,606,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,607,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,608,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,609,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,610,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,611,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,613,case WINDOW:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,614,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,615,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,616,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,617,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,618,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,619,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,620,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,621,windowNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,622,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,623,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,624,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,625,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,627,case FUN_CALL:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,628,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,629,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,630,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,631,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,632,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,633,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,634,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,635,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,636,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,637,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,638,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,639,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,640,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,642,case IDENTIFIER:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,643,case SIMPLE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,644,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,645,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,646,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,647,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,648,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,649,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,650,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,651,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,652,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,653,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,654,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,655,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,657,case WHERE_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,658,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,659,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,660,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,661,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,662,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,663,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,664,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,665,whereListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,666,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,667,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,668,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,669,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,671,case FROM_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,672,case JOIN:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,673,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,674,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,675,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,676,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,677,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,678,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,679,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,680,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,681,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,682,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,683,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,684,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,685,protected void sep(boolean printFirst, String sep) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,686,boolean newlineBefore =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,687,newlineBeforeSep
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,688,&& !sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,689,boolean newlineAfter =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,690,newlineAfterSep && sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,691,if ((itemCount > 0) || printFirst) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,692,if (newlineBefore && (itemCount > 0)) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,693,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,694,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,695,indent(currentIndent + sepIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,696,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,698,keyword(sep);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,699,nextWhitespace = newlineAfter ? NL : " ";
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,701,++itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,704,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,712,if (frameType.getName().equals("CASE")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,713,if (caseClausesOnNewLines) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,714,newlineAfterOpen = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,716,newlineBeforeClose = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,717,sepIndent = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,720,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,721,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,722,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,723,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,724,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,725,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,726,newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,727,newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,728,sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,729,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,730,newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,731,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,750,++frame.itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,757,if (frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,758,currentIndent += frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,794,if (endedFrame.frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,795,currentIndent -= this.frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,808,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,809,return sw.toString();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,827,pw.print(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,831,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,863,pw.print(nextWhitespace);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,864,charCount += nextWhitespace.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,875,&& ((charCount + s.length()) >= lineLength);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,891,pw.print(s);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,892,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,897,pw.print(x);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,898,charCount += String.valueOf(x).length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,908,pw.print(qName);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,909,charCount += qName.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,963,this.lineLength = lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1021,private final boolean newlineBeforeClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1022,private final boolean newlineAfterClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1023,private final boolean newlineAfterOpen;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1025,FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1026,FrameType frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1027,String keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1028,String open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1029,String close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1030,int extraIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1031,boolean newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1032,boolean newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1033,int sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1034,boolean newlineAfterSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1035,boolean newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1036,boolean newlineAfterClose) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1061,|| (newlineAfterOpen && (itemCount == 0))) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1062,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,61,final SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,62,writer.setAlwaysUseParentheses(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,63,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,64,writer.setIndentation(0);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,31,import org.apache.calcite.sql.dialect.CalciteSqlDialect;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,46,import java.io.PrintWriter;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,47,import java.io.StringWriter;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,173,final SqlNodeList selectList =
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,174,new SqlNodeList(ImmutableList.<SqlNode>of(SqlIdentifier.star(p)), p);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,197,final StringWriter sw = new StringWriter();
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,198,final PrintWriter pw = new PrintWriter(sw);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,199,final SqlPrettyWriter w =
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,200,new SqlPrettyWriter(CalciteSqlDialect.DEFAULT, false, pw);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,201,pw.print("INSERT INTO ");
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,203,pw.print(" ");
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,205,pw.flush();
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,206,final String sql = sw.toString();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,382,identifierList(modify.getInput().getRowType().getFieldNames()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4389,int iAdjusted = i;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4390,if (query instanceof SqlUpdate) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4391,int nUpdateColumns =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4392,((SqlUpdate) query).getTargetColumnList().size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4393,assert sourceFields.size() >= nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4394,iAdjusted -= sourceFields.size() - nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4396,SqlNode node = getNthExpr(query, iAdjusted, sourceCount);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4437,if (update.getTargetColumnList() != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4438,return update.getTargetColumnList().get(ordinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4488,final RelDataType sourceRowType = getNamespace(call).getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4489,checkTypeAssignment(sourceRowType, targetRowType, call);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,203,List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,223,RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,224,rel.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,36,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,86,final Map<Integer, Integer> mapInToOutPos = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,87,final List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,88,final Set<ImmutableBitSet> projUniqueKeySet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,94,mapInToOutPos.put(((RexInputRef) projExpr).getIndex(), i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,98,if (mapInToOutPos.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,101,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,107,if (childUniqueKeySet != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,110,for (ImmutableBitSet colMask : childUniqueKeySet) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,111,ImmutableBitSet.Builder tmpMask = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,112,boolean completeKeyProjected = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,113,for (int bit : colMask) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,114,if (mapInToOutPos.containsKey(bit)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,115,tmpMask.set(mapInToOutPos.get(bit));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,119,completeKeyProjected = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,120,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,123,if (completeKeyProjected) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,124,projUniqueKeySet.add(tmpMask.build());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,129,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,83,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,546,input = convert(sort.getInput(), traitSet);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,722,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,723,case CASE:
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,356,if (rank.get(target) < rank.get(ordinal1)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,433,SqlNode expanded = expand(selectItem, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3308,List<SqlNode> children = ((SqlCall) stripDot(current)).getOperandList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,756,final List<RexNode> castExps =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,757,RexUtil.generateCastExpressions(rexBuilder, castRowType, rowType);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,760,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,764,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/sql/SqlLateralOperator.java,40,writer.keyword(getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,234,|| Number.class.isAssignableFrom(elementType))) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,236,protected final List<RelNode> leaves = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1623,leaves.add(resultRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2414,return RelOptUtil.pushDownJoinConditions(originalJoin, relBuilder);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2527,leaves.add(r);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4203,leaves.add(root);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4360,if (leaves.contains(rel) || rel instanceof LogicalMatch) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,186,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,187,final CalciteCatalogReader catalogReader = createCatalogReader();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,188,this.validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,189,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,190,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,191,this.validator.setIdentifierExpansion(true);
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,248,if (o instanceof PdxInstance) {
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,249,return Util.toString(
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,250,((PdxInstance) o).getFieldNames(), "PDX[", ",", "]");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,59,return (Integer) expression0.evaluate(evaluator) + (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,60,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,63,+ (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,70,return (Integer) expression0.evaluate(evaluator) / (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,71,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,84,return (Integer) expression0.evaluate(evaluator) > (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,85,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,88,> (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,96,>= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,99,>= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,106,return (Integer) expression0.evaluate(evaluator) < (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,107,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,110,< (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,118,<= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,121,<= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,128,return (Integer) expression0.evaluate(evaluator) * (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,129,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,145,return (Integer) expression0.evaluate(evaluator) - (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,146,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,149,- (Double) expression1.evaluate(evaluator);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,509,new SqlSingleOperandTypeChecker() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,510,public boolean checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,511,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,512,SqlNode node,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,513,int iFormalOperand,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,514,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,515,assert 0 == iFormalOperand;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,516,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,517,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,518,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,519,node);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,520,boolean validationError = false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,521,if (!type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,522,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,524,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,526,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,527,type.getFieldList().get(0).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,528,if (typeName != SqlTypeName.MULTISET
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,529,&& typeName != SqlTypeName.ARRAY) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,530,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,534,if (validationError && throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,535,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,537,return !validationError;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,540,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,541,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,542,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,543,return checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,544,callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,545,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,546,0,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,547,throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,550,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,551,return SqlOperandCountRanges.of(1);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,554,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,555,return "UNNEST(<MULTISET>)";
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,558,public boolean isOptional(int i) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,559,return false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,562,public Consistency getConsistency() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,563,return Consistency.NONE;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,573,OperandTypes.or(COLLECTION_OR_MAP, RECORD_COLLECTION);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,232,for (SqlNode node : thenList) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,233,argTypes.add(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,234,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,235,callBinding.getScope(), node));
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,64,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,65,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,66,relFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,129,join.getTraitSet(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,176,static Expression fromInternal(Expression e, Class<?> targetType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,177,if (e == ConstantUntypedNull.INSTANCE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,178,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,180,if (!(e.getType() instanceof Class)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,181,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,183,if (targetType.isAssignableFrom((Class) e.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,184,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,187,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,189,if (targetType == java.sql.Time.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,190,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,192,if (targetType == java.sql.Timestamp.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,193,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,198,return Expressions.convert_(e,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,201,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,223,static Type toInternal(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,239,static Expression enforce(final Type storageType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,240,final Expression e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,241,if (storageType != null && e.type != storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,242,if (e.type == java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,243,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,244,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,246,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,247,return Expressions.call(BuiltInMethod.DATE_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,250,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,251,return Expressions.call(BuiltInMethod.TIME_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,253,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,254,return Expressions.call(BuiltInMethod.TIME_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,257,if (storageType == long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,258,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,260,if (storageType == Long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,261,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,265,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,147,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,266,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,902,RexToLixTranslator.convert(res, agg.result.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,927,offs = RexToLixTranslator.convert(offs, int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,187,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,216,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,247,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,651,if (fieldType != java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1022,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1233,return RexToLixTranslator.convert(result.accumulator().get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,27,import org.apache.calcite.linq4j.tree.ExpressionType;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,31,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,222,expression = EnumUtils.enforce(storageType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,516,convert = convert(operand, typeFactory.getJavaClass(targetType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,738,convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,927,public static Expression convert(Expression operand, Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,928,final Type fromType = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,929,return convert(operand, fromType, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,932,public static Expression convert(Expression operand, Type fromType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,933,Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,935,return operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,939,final Primitive toPrimitive = Primitive.of(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,940,final Primitive toBox = Primitive.ofBox(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,941,final Primitive fromBox = Primitive.ofBox(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,942,final Primitive fromPrimitive = Primitive.of(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,943,final boolean fromNumber = fromType instanceof Class
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,944,&& Number.class.isAssignableFrom((Class) fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,945,if (fromType == String.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,946,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,947,switch (toPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,948,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,949,case SHORT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,950,case INT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,951,case LONG:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,952,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,953,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,955,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,956,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,958,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,959,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,961,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,962,toPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,964,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,967,if (toBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,968,switch (toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,969,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,971,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,972,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,974,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,975,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,977,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,978,toBox.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,980,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,984,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,985,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,987,return Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,988,operand, toPrimitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,990,if (fromNumber || fromBox == Primitive.CHAR) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,992,return Expressions.unbox(operand, toPrimitive);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,996,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,997,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,999,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1004,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1005,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1006,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1007,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1008,Expressions.unbox(operand, toBox),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1009,toBox));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1014,if (operand instanceof UnaryExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1015,UnaryExpression una = (UnaryExpression) operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1016,if (una.nodeType == ExpressionType.Convert
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1017,|| Primitive.of(una.getType()) == toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1018,return Expressions.box(una.expression, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1023,if (toBox == Primitive.INT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1024,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1026,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1031,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1032,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1034,return Expressions.convert_(operand, java.sql.Date.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1039,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1040,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1042,return Expressions.convert_(operand, java.sql.Time.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1047,if (isA(fromType, Primitive.LONG)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1048,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1049,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1051,return Expressions.convert_(operand, java.sql.Timestamp.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1054,if (fromBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1057,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1058,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1059,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1060,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1061,BigDecimal.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1062,Expressions.unbox(operand, fromBox)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1064,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1072,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1073,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1074,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1075,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1076,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1078,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1080,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1081,switch (fromPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1082,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1083,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1086,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1087,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1089,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1090,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1093,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1094,fromPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1096,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1101,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1102,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1103,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1104,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1105,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1107,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1119,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1122,static boolean isA(Type fromType, Primitive primitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1123,return Primitive.of(fromType) == primitive
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1124,|| Primitive.ofBox(fromType) == primitive;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,170,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,181,Expression nonNull = RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,153,RexToLixTranslator.convert(recFromCtx, Object[].class);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,161,return RexToLixTranslator.convert(recordAccess, storageType);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,19,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,181,RexToLixTranslator.convert(Expressions.constant(o), clazz);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,333,call.getOperator().unparse(writer, call, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2316,flatElements[i] = (E) Integer.valueOf(++ordinality); // 1-based
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,176,&& token.s.equalsIgnoreCase("ALL")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,489,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,618,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,695,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,775,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,906,public static int mod(int b0, BigDecimal b1) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,907,return mod(b0, b1.intValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,197,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4014,private final Set<SubQuery> subQueryList = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4341,if (rowType == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4344,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4351,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4380,if (node.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4389,if (expr.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,32,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,108,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,111,final ImmutableIntList projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,112,final ImmutableList<RexNode> filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,116,filters = bindableScan.filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,117,projects = bindableScan.projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,119,filters = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,120,projects = scan.identity();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,123,final List<Integer> projects2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,124,Mappings.apply((Mapping) mapping, projects);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,125,call.transformTo(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,126,Bindables.BindableTableScan.create(scan.getCluster(), scan.getTable(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,127,filters, projects2));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,370,final SqlIdentifier sqlTargetTable =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,371,new SqlIdentifier(modify.getTable().getQualifiedName(), POS);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,865,if (LOGGER.isDebugEnabled()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,881,return subset;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,883,return register(rel, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,904,RelOptCost relCost = getCost(rel, rel.getCluster().getMetadataQuery());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,905,if (relCost.isLt(subset.bestCost)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,927,rel.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,327,subset.bestCost = otherSubset.bestCost;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,328,subset.best = otherSubset.best;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,356,final Set<RelSubset> activeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,357,final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,205,if (rel.set == set && traitSet.satisfies(rel.getTraitSet())) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,64,RelOptPlanner planner, SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,66,schema, EnumerableRel.Prefer.ANY, planner, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,67,convertletTable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,317,context.getRootSchema(), null, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,318,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,734,context.getRootSchema(), prefer, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,735,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1001,RelOptPlanner planner, Prepare.Materialization materialization) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1013,new CalciteMaterializer(this, context, catalogReader, schema, planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1014,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1077,RelOptPlanner planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1079,SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1084,this.planner = planner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1087,this.rexBuilder = new RexBuilder(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1164,final RelOptCluster cluster = prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1299,prepare.populateMaterializations(context, planner, materialization);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,273,buff.append(", r");
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,51,super("ITEM", SqlKind.OTHER_FUNCTION, 100, true, null, null, null);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,206,case OTHER_FUNCTION:
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,326,if (left.isA(SqlKind.OTHER_FUNCTION) && right.isA(SqlKind.LITERAL)) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,327,if (((RexCall) left).getOperator() != SqlStdOperatorTable.ITEM) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,328,return false;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,218,case OTHER_FUNCTION:
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,46,final Properties properties1 = new Properties(properties);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,47,properties1.setProperty(property.camelName(), value);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,48,return new CalciteConnectionConfigImpl(properties1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,738,SqlNode node = field(collation.getFieldIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,925,Context newContext;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,24,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,157,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,158,leftResult.physType.fieldReference(left_, pair.left)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,160,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,161,rightResult.physType.fieldReference(right_, pair.right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,225,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,226,fieldClass(field),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,227,fieldReference(v1, field)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,299,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,300,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,400,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,401,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,559,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,560,returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,561,fieldReference(v1, field0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1155,Types.castIfNecessary(acc.type, add.arguments().get(0)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1712,Types.castIfNecessary(type, operand),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1713,Types.castIfNecessary(type,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1714,Expressions.constant(timeUnit.multiplier)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1740,return Types.castIfNecessary(returnType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1857,return Types.castIfNecessary(returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1859,expressions.get(1)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,934,if (fromType.equals(toType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1021,return Expressions.box(operand, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1111,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1112,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1113,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1114,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1115,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,25,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,58,Expressions.assign(acc, Types.castIfNecessary(acc.type, next))));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,29,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,170,return Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,171,target.getClass(),
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,176,BuiltInMethod.REFLECTIVE_SCHEMA_GET_TARGET.method));
core/src/main/java/org/apache/calcite/schema/Schemas.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/schema/Schemas.java,200,return Types.castIfNecessary(clazz, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,454,if (returnType instanceof RecordType) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,456,return expression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,458,if (Types.isAssignableFrom(returnType, type)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,137,e.getLeft().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,178,Context rightContext, int leftFieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,199,rightContext, leftFieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,215,node = stripCastFromString(node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,269,private static RexNode stripCastFromString(RexNode node) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,283,final RexNode o0b = ((RexCall) o0).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,284,switch (o0b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,285,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,286,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,287,return call.clone(call.getType(), ImmutableList.of(o0b, o1));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,292,final RexNode o1b = ((RexCall) o1).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,293,switch (o1b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,294,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,295,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,296,return call.clone(call.getType(), ImmutableList.of(o0, o1b));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,580,final RexCall call = (RexCall) stripCastFromString(rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,599,return createLeftCall(op, nodeList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,151,writer.append("new java.math.BigDecimal(").append(exact).append("L");
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,324,subset.propagateCostImprovements0(planner, mq, rel, activeSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,330,RelNode rel, Set<RelSubset> activeSet) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,353,parentSubset.propagateCostImprovements(planner, mq, parent,
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,354,activeSet);
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,28,public static final CyclicMetadataException INSTANCE =
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,29,new CyclicMetadataException();
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,32,private CyclicMetadataException() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,297,if (!predicate.apply(join, joinType, exp)) {
core/src/main/java/org/apache/calcite/sql/SqlExplain.java,175,return getFormat() == SqlExplainFormat.XML;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,95,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,171,return copy(traitSet, getInput(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,172,new RexProgram(program.getInputRowType(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,173,exprs,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,175,(RexLocalRef) condition,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,176,program.getOutputRowType()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,137,throw new AssertionError(); // TODO:
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,180,assert curRelTrait.getTraitDef() == traitDef;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,110,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,160,.item("requiredColumns", requiredColumns.toString());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,91,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rex/RexProgram.java,245,return collectExplainTerms("", pw, pw.getDetailLevel());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,155,List<RexNode> newOperands = apply(call.getOperands());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,156,if (true) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,159,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java,31,.withNullCollation(NullCollation.LOW));
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,53,RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,55,RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,62,this(clazz, predicate, in, out, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,77,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,80,description == null
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,82,: description);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,254,return table.unwrap(ScannableTable.class).scan(dataContext);
core/src/main/java/org/apache/calcite/rel/core/Project.java,286,mapping.set(((RexInputRef) exp.e).getIndex(), exp.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,105,final Mappings.TargetMapping mapping = project.getMapping();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,106,if (mapping == null
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,107,|| Mappings.isIdentity(mapping)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1121,for (RelDataTypeField field : model.rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1122,exprList.add(rexBuilder.makeZeroLiteral(field.getType()));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1127,exprList.set(target,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1128,rexBuilder.ensureType(expr.e.getType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1129,RexInputRef.of(expr.i, input.rowType),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1130,false));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1132,throw MatchFailed.INSTANCE;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,922,if (needsNullIndicator(type)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,926,RelDataType indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,927,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,928,if (type.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,929,indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,930,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,931,indicatorType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,932,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,934,RelDataTypeField nullIndicatorField =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,935,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,937,0,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,938,indicatorType);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,939,list.add(nullIndicatorField);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,940,nested = true;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,184,restructured = false;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,185,List<RexNode> structuringExps = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,188,structuringExps = restructureFields(root.getRowType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,190,if (restructured) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,199,return flattened;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,207,if (field.getType().getSqlTypeName() == SqlTypeName.STRUCTURED) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,209,structuringExps.add(restructure(field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,211,structuringExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,212,new RexInputRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,213,iRestructureInput,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,214,field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,215,++iRestructureInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,221,private RexNode restructure(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,222,RelDataType structuredType) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,224,RexInputRef nullIndicator =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,225,RexInputRef.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,226,iRestructureInput++, flattenedRootType.getFieldList());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,229,List<RexNode> inputExprs = restructureFields(structuredType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,230,RexNode newInvocation =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,231,rexBuilder.makeNewInvocation(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,232,structuredType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,233,inputExprs);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,235,if (!structuredType.isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,237,return newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,242,RexNode[] caseOperands = new RexNode[3];
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,245,caseOperands[0] =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,246,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,247,SqlStdOperatorTable.IS_NULL,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,248,nullIndicator);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,257,caseOperands[2] = newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,259,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,260,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,261,caseOperands);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,281,int newOrdinal = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,285,RelNode oldInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,286,for (RelNode oldInput1 : currentRel.getInputs()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,287,RelDataType oldInputType = oldInput1.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,288,int n = oldInputType.getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,289,if (oldOrdinal < n) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,290,oldInput = oldInput1;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,291,break;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,294,newOrdinal += newInput.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,295,oldOrdinal -= n;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,297,assert oldInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,299,RelDataType oldInputType = oldInput.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,322,private int calculateFlattenedOffset(RelDataType rowType, int ordinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,323,int offset = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,324,if (SqlTypeUtil.needsNullIndicator(rowType)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,326,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,328,List<RelDataTypeField> oldFields = rowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,329,for (int i = 0; i < ordinal; ++i) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,330,RelDataType oldFieldType = oldFields.get(i).getType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,331,if (oldFieldType.isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,334,RelDataType flattened =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,335,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,336,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,337,oldFieldType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,338,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,339,final List<RelDataTypeField> fields = flattened.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,340,offset += fields.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,342,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,345,return offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,397,RelNode newRel =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,398,rel.copy(rel.getTraitSet(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,399,getNewForOldRel(rel.getInput()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,400,rel.getCondition().accept(new RewriteRexShuttle()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,471,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,472,rel.getProjects(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,473,rel.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,475,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,553,String fieldName =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,556,: fieldNames.get(i);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,557,if (!prefix.equals("")) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,558,fieldName = prefix + "$" + fieldName;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,570,RexInputRef inputRef = (RexInputRef) exp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,574,RelDataType flattenedType =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,575,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,576,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,577,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,578,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,579,List<RelDataTypeField> fieldList = flattenedType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,580,int n = fieldList.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,581,for (int j = 0; j < n; ++j) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,583,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,586,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,592,if (exp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,595,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,597,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,599,if (RexLiteral.isNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,600,((RexCall) exp).operands.get(0))) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,603,flattenNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,604,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,605,flattenedExps);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,606,return;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,609,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,618,int j = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,620,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,622,fieldName + "$" + (j++)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,660,flattenInputs(rel.getRowType().getFieldList(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,661,rexBuilder.makeRangeReference(newRel),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,662,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,689,flattenInputs(field.getType().getFieldList(), ref, flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,771,calculateFlattenedOffset(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1777,if (validator.getValidatedNodeType(node).isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1778,break;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,748,final UnifyRuleCall call = new UnifyRuleCall(rule, query, target, null);
core/src/main/java/org/apache/calcite/rel/mutable/MutableTableFunctionScan.java,72,&& inputs.equals(((MutableSetOp) obj).getInputs());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,94,private final RexToLixTranslator.InputGetter inputGetter;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,94,boolean allColumnsInAggregate = aggregate.getGroupSet().
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,95,contains(filterColumns);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,593,throw Extensions.todo();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java,99,return gotoStatement.expression.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,37,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/Match.java,68,protected final List<RexNode> partitionKeys;
core/src/main/java/org/apache/calcite/rel/core/Match.java,98,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,111,this.partitionKeys = ImmutableList.copyOf(partitionKeys);
core/src/main/java/org/apache/calcite/rel/core/Match.java,179,public List<RexNode> getPartitionKeys() {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,403,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,416,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,63,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,77,List<RexNode> partitionKeys, RelCollation orderKeys, RexNode interval) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,91,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,447,if (e.getPartitionKeys() != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,448,for (RexNode rex : e.getPartitionKeys()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,449,SqlNode sqlNode = context.toSql(null, rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,450,partitionSqlList.add(sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2129,final List<RexNode> partitionKeys = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2132,partitionKeys.add(e);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2272,definitionNodes.build(), measureNodes.build(), after,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2273,subsetMap, allRows, partitionKeys, orders, intervalNode);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1171,final Registrar registrar = new Registrar();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1172,registrar.extraNodes.addAll(fields());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1173,registrar.names.addAll(peek().getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1707,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1708,final List<RexNode> originalExtraNodes = fields();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1709,final List<RexNode> extraNodes = new ArrayList<>(originalExtraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1710,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1711,final RelFieldCollation collation =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1712,collation(node, RelFieldCollation.Direction.ASCENDING, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1713,extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1715,.contains(collation.getFieldIndex())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1716,fieldCollations.add(collation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1728,final boolean addedFields = extraNodes.size() > originalExtraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1730,assert !addedFields;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1760,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1761,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1767,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1768,project(originalExtraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1845,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1846,for (RexNode orderKey : orderKeys) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1847,final RelFieldCollation.Direction direction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1848,switch (orderKey.getKind()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1849,case DESCENDING:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1850,direction = RelFieldCollation.Direction.DESCENDING;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1851,orderKey = ((RexCall) orderKey).getOperands().get(0);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1852,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1853,case NULLS_FIRST:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1854,case NULLS_LAST:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1855,throw new AssertionError();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1856,default:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1857,direction = RelFieldCollation.Direction.ASCENDING;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1858,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1860,final RelFieldCollation.NullDirection nullDirection =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1861,direction.defaultNullDirection();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1862,final RexInputRef ref = (RexInputRef) orderKey;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1863,fieldCollations.add(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1864,new RelFieldCollation(ref.getIndex(), direction, nullDirection));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1897,ImmutableList.copyOf(partitionKeys), RelCollations.of(fieldCollations),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1990,final List<RexNode> extraNodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/util/Pair.java,208,return new AbstractList<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,209,public Pair<K, V> get(int index) {
core/src/main/java/org/apache/calcite/util/Pair.java,210,return Pair.of(ks.get(index), vs.get(index));
core/src/main/java/org/apache/calcite/util/Pair.java,213,public int size() {
core/src/main/java/org/apache/calcite/util/Pair.java,214,return size;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,127,BINDABLE_WINDOW_RULE);
core/src/main/java/org/apache/calcite/rel/core/Match.java,191,public abstract Match copy(RelNode input, RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/core/Match.java,192,RexNode pattern, boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,193,Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,
core/src/main/java/org/apache/calcite/rel/core/Match.java,194,RexNode after, Map<String, ? extends SortedSet<String>> subsets,
core/src/main/java/org/apache/calcite/rel/core/Match.java,195,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,196,RexNode interval);
core/src/main/java/org/apache/calcite/rel/core/Match.java,200,&& traitSet == getTraitSet()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,201,return this;
core/src/main/java/org/apache/calcite/rel/core/Match.java,204,return copy(inputs.get(0), rowType, pattern, strictStart, strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,205,patternDefinitions, measures, after, subsets, allRows,
core/src/main/java/org/apache/calcite/rel/core/Match.java,206,partitionKeys, orderKeys, interval);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,58,private LogicalMatch(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,80,return new LogicalMatch(cluster, traitSet, input, rowType, pattern,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,93,final RelTraitSet traitSet = getCluster().traitSetOf(Convention.NONE);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,94,return new LogicalMatch(getCluster(), traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,95,input,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,96,rowType,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,97,pattern, strictStart, strictEnd, patternDefinitions, measures,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,98,after, subsets, allRows, partitionKeys, orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,99,interval);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,20,import java.util.ArrayList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,21,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,28,static final Indent INDENT = new Indent(20);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,31,private int level;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,32,private String indent = "";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,78,indent = INDENT.get(++level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,85,indent = INDENT.get(--level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,95,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,147,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,199,private static class Indent extends ArrayList<String> {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,200,Indent(int initialCapacity) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,201,super(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,202,ensureSize(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,205,public synchronized String of(int index) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,206,ensureSize(index + 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,207,return get(index);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,210,private void ensureSize(int targetSize) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,211,if (targetSize < size()) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,212,return;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,214,char[] chars = new char[2 * targetSize];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,215,Arrays.fill(chars, ' ');
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,217,clear();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,218,for (int i = 0; i < targetSize; i++) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,467,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,476,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,477,RexNode second = removeCast(operands.get(1));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,494,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,495,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,496,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,497,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,498,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,499,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,502,return inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,30,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,111,inputRef = removeCast(inputRef);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,112,literal = removeCast(literal);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,165,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,166,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,167,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,168,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,169,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,170,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,173,return inputRef;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,76,super(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3347,case AND:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3354,final int left2 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3356,final RexNode e =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3357,pushDownEqualJoinConditions(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3358,operand,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3359,leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3360,rightCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3361,extraLeftExprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3363,final List<RexNode> remainingOperands = Util.skip(operands, i + 1);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3364,final int left3 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3365,fix(remainingOperands, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3366,fix(list, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3367,list.add(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,361,final String op = (String) map.get("op");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,363,if (op != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,442,final List<SqlOperator> operatorList =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,443,SqlStdOperatorTable.instance().getOperatorList();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,444,for (SqlOperator operator : operatorList) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,445,if (operator.getName().equals(op)) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,460,private String toJson(SqlOperator operator) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,462,return operator.getName();
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,273,final String aggName = (String) jsonAggCall.get("agg");
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,300,values2.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,301,SqlStdOperatorTable.AS.createCall(POS, value.left,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,302,new SqlIdentifier(value.right, POS)));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,307,new SqlIdentifier("DUAL", POS), null, null,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,327,final List<SqlNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,328,list.add(query);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,329,list.add(new SqlIdentifier("t", POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,330,for (String fieldName : fieldNames) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,331,list.add(new SqlIdentifier(fieldName, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,333,query = SqlStdOperatorTable.AS.createCall(POS, list);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,532,private SqlCall as(SqlNode e, String alias) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,533,return SqlStdOperatorTable.AS.createCall(POS, e,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,534,new SqlIdentifier(alias, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,119,node = SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,120,POS, node, new SqlIdentifier(name, POS));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,411,protected boolean requiresAliasForFromItems() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,76,String stringValue = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,80,assert value instanceof NlsString;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,81,writer.literal(value.toString());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,75,private final String identifierQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,76,private final String identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,77,private final String identifierEscapedQuote;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,160,return new ContextImpl(DatabaseProduct.UNKNOWN, null, null, -1, -1, null,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,275,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,276,buf.append(val); // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,277,return buf;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,279,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,280,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,281,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,282,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,283,buf.append(identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,284,buf.append(val2);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,285,buf.append(identifierEndQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,320,public String quoteStringLiteral(String val) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,321,if (containsNonAscii(val)) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,322,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,324,return buf.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,326,val = FakeUtil.replace(val, "'", "''");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,327,return "'" + val + "'";
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,348,private static boolean containsNonAscii(String s) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,351,if (c < 32 || c >= 128) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,394,&& (val.charAt(val.length() - 1) == '\'')) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,395,if (val.length() > 2) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,396,val = FakeUtil.replace(val, "''", "'");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,397,return val.substring(1, val.length() - 1);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,400,return "";
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,174,writer.literal(nls.asSql(true, false));
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,177,writer.literal(nls.asSql(false, false));
core/src/main/java/org/apache/calcite/util/NlsString.java,161,boolean suffix) {
core/src/main/java/org/apache/calcite/util/NlsString.java,163,if (prefix && (null != charsetName)) {
core/src/main/java/org/apache/calcite/util/NlsString.java,164,ret.append("_");
core/src/main/java/org/apache/calcite/util/NlsString.java,165,ret.append(charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,167,ret.append("'");
core/src/main/java/org/apache/calcite/util/NlsString.java,169,ret.append("'");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,403,final Object literal = map.get("literal");
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,24,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,36,this.inputs = ImmutableList.copyOf(inputs);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,51,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,57,return Expressions.call(target, method, translatedOperands);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,253,public Statement visit(TryStatement tryStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,254,return tryStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,41,return shuttle.visit(this);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,312,List<RelNode> inputRels = input.set.getRelsFromAllSubsets();
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,105,if (!description.matches("[A-Za-z][-A-Za-z0-9_.():]*")) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,81,? "ConverterRule<in=" + in + ",out=" + out + ">"
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,86,materialization.queryRel =
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,87,sqlToRelConverter2.convertQuery(node, true, true).rel;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,503,assert queryDescendant.rowType.equals(targetDescendant.rowType);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,540,MutableRel parent = result.call.query.replaceInParent(result.result);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,551,: Pair.of(result.result, result.call.query);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,140,private final boolean simplify;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,151,this.simplify = Hook.REL_BUILDER_SIMPLIFY.get(true);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1038,action.getConfig().getDefaultSchema() != null
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1049,action.getConfig().getContext(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1050,action.getConfig().getCostFactory());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,83,public abstract static class PrepareAction<R> {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,86,this.config = newConfigBuilder() //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,98,public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,99,SchemaPlus rootSchema, CalciteServerStatement statement);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,109,public static <R> R withPlanner(final PlannerAction<R> action, //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,111,return withPrepare(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,112,new Frameworks.PrepareAction<R>(config) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,113,public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,114,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,115,final CalciteSchema schema =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,116,CalciteSchema.from(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,117,Util.first(config.getDefaultSchema(), rootSchema));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,118,return action.apply(cluster, relOptSchema, schema.root().plus());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,142,public static <R> R withPrepare(PrepareAction<R> action) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,145,if (action.config.getTypeSystem() != RelDataTypeSystem.DEFAULT) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,147,action.config.getTypeSystem().getClass().getName());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,154,return new CalcitePrepareImpl().perform(statement, action);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,56,import org.apache.calcite.schema.SchemaPlus;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,57,import org.apache.calcite.server.CalciteServerStatement;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,197,final RelOptCluster[] clusters = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,198,final RelOptSchema[] relOptSchemas = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,199,Frameworks.withPrepare(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,200,new Frameworks.PrepareAction<Void>(config) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,201,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,202,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,203,clusters[0] = cluster;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,204,relOptSchemas[0] = relOptSchema;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,205,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,208,return new RelBuilder(config.getContext(), clusters[0], relOptSchemas[0]);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,484,ret = factory.createFilter(ret, conditionExp);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,635,return factory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,641,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,664,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,714,return factory.createFilter(rel, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,224,RelNode createFilter(RelNode input, RexNode condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,232,public RelNode createFilter(RelNode input, RexNode condition) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,233,return LogicalFilter.create(input, condition);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,72,factory.createFilter(newSemiJoin, filter.getCondition());
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,487,relBuilder.push(
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,488,filter.copy(filter.getTraitSet(), newInput, newConditionExpr));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,926,return filter(ImmutableList.copyOf(predicates));
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,74,return new PigFilter(input.getCluster(), input.getTraitSet().replace(PigRel.CONVENTION),
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,75,input, condition);
core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java,36,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,981,return call.result(call.query);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3355,final int right2 = rightCount + extraRightExprs.size();
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,25,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,87,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,194,if (RelOptUtil.classifyFilters(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3288,+ rightCount + extraRightExprs.size(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3289,0, 0, leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3290,leftCount, leftCount + extraLeftExprs.size(), rightCount);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1596,return values(frame.rel.getRowType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,40,public static final RelOptRule ENUMERABLE_SEMI_JOIN_RULE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,41,new EnumerableSemiJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,22,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,25,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,26,import org.apache.calcite.rel.InvalidRelException;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,27,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,31,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,32,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,34,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,43,EnumerableSemiJoin(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,44,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,45,RelTraitSet traits,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,46,RelNode left,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,47,RelNode right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,48,RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,49,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,51,throws InvalidRelException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,57,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,58,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,59,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,82,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,20,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,21,import org.apache.calcite.rel.convert.ConverterRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,24,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,25,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,30,class EnumerableSemiJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,31,EnumerableSemiJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,38,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,39,for (RelNode input : semiJoin.getInputs()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,40,if (!(input.getConvention() instanceof EnumerableConvention)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,41,input =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,42,convert(input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,43,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,45,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,342,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,343,return SemiJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,344,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,17,package org.apache.calcite.rel.core;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,21,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,22,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,23,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,25,import org.apache.calcite.rel.metadata.RelMdUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,26,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,27,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,29,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,30,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,31,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,32,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,34,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,35,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,44,public class SemiJoin extends EquiJoin {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,60,public SemiJoin(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,61,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,62,RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,63,RelNode left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,64,RelNode right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,65,RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,66,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,67,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,68,super(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,69,cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,70,traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,71,left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,72,right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,73,condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,74,leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,75,rightKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,77,JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,81,public static SemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,82,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,83,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,84,return new SemiJoin(cluster, cluster.traitSetOf(Convention.NONE), left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,85,right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,91,RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,92,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,93,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,94,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,95,return new SemiJoin(getCluster(), traitSet, left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,96,joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,100,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,102,return planner.getCostFactory().makeTinyCost();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,106,return Util.first(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,107,RelMdUtil.getSemiJoinRowCount(mq, left, right, joinType, condition),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,108,1D);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,118,return SqlValidatorUtil.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,119,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,120,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,121,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,122,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,123,null,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRelType.java,32,SEMIJOIN,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,247,case SEMIJOIN:
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,248,final MutableSemiJoin semiJoin = (MutableSemiJoin) node;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,249,relBuilder.push(fromMutable(semiJoin.getLeft(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,250,relBuilder.push(fromMutable(semiJoin.getRight(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,251,relBuilder.semiJoin(semiJoin.condition);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,252,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,17,package org.apache.calcite.rel.mutable;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,20,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,21,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,23,import java.util.Objects;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,26,public class MutableSemiJoin extends MutableBiRel {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,27,public final RexNode condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,28,public final ImmutableIntList leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,29,public final ImmutableIntList rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,31,private MutableSemiJoin(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,32,RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,33,MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,34,MutableRel right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,35,RexNode condition,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,36,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,37,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,38,super(MutableRelType.SEMIJOIN, left.cluster, rowType, left, right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,39,this.condition = condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,40,this.leftKeys = leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,41,this.rightKeys = rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,54,public static MutableSemiJoin of(RelDataType rowType, MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,55,MutableRel right, RexNode condition, ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,56,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,57,return new MutableSemiJoin(rowType, left, right, condition, leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,58,rightKeys);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,62,return obj == this
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,63,|| obj instanceof MutableSemiJoin
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,69,&& right.equals(((MutableSemiJoin) obj).right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,81,.append(")");
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,85,return MutableSemiJoin.of(rowType, left.clone(),
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,86,right.clone(), condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,19,import org.apache.calcite.linq4j.CorrelateJoinType;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,87,public CorrelateJoinType toLinq4j() {
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,90,return CorrelateJoinType.INNER;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,92,return CorrelateJoinType.LEFT;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,94,return CorrelateJoinType.SEMI;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,96,return CorrelateJoinType.ANTI;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,310,if (list.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,322,for (List<RexLiteral> tuple : e.getTuples()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,323,selects.add(ANONYMOUS_ROW.createCall(exprList(context, tuple)));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,206,return program.getCollations(mq.collations(input));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,114,.push(call.rel(3).getInput(0));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,56,private static final LoadingCache<Object, RelDataType> CACHE =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,346,return CACHE.getUnchecked(type);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,142,RelOptUtil.permute(child.cluster.getTypeFactory(), rowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3973,&& targetRowType.getFieldCount() >= i
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1356,permute(query, project.getInput(), mapping.inverse());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1357,final MutableRel result = unifyAggregates(aggregate2, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1358,return result == null ? null : call.result(result);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,143,Mappings.bijection(posList)),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1267,RelNode aggregate = aggregateFactory.createAggregate(r,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1277,RexNode node = registrar.extraNodes.get(groupField);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1281,fields.add(frame.fields.get(((RexInputRef) node).getIndex()));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,461,Map<Integer, Integer> mapNewInputToProjOutputs = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,575,combinedMap.put(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,587,postProjects.add(entry.getKey() + frame.corDefOutputs.size(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,588,entry.getValue());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,595,return register(rel, relBuilder.build(), combinedMap, corDefOutputs);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,99,info.leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,100,info.rightKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,19,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,20,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,21,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,23,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,28,import org.apache.calcite.rel.core.JoinInfo;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,33,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,35,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,39,public class EnumerableSemiJoin extends SemiJoin implements EnumerableRel {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,52,super(cluster, traits, left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,56,public static EnumerableSemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,66,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,71,RelNode left, RelNode right, JoinRelType joinType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,72,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,73,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,74,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,75,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,76,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,77,return new EnumerableSemiJoin(getCluster(), traitSet, left, right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,78,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,87,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,88,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,91,final double rightRowCount = right.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,92,final double leftRowCount = left.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,93,if (Double.isInfinite(leftRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,94,rowCount = leftRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,96,rowCount += Util.nLogN(leftRowCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,98,if (Double.isInfinite(rightRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,99,rowCount = rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,101,rowCount += rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,103,return planner.getCostFactory().makeCost(rowCount, 0, 0).multiplyBy(.01d);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,106,public Result implement(EnumerableRelImplementor implementor, Prefer pref) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,107,BlockBuilder builder = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,108,final Result leftResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,109,implementor.visitChild(this, 0, (EnumerableRel) left, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,110,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,111,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,113,final Result rightResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,114,implementor.visitChild(this, 1, (EnumerableRel) right, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,115,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,116,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,118,final PhysType physType = leftResult.physType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,119,return implementor.result(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,120,physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,121,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,122,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,123,BuiltInMethod.SEMI_JOIN.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,124,Expressions.list(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,125,leftExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,126,rightExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,127,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,129,.toBlock());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,47,return EnumerableSemiJoin.create(newInputs.get(0), newInputs.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,48,semiJoin.getCondition(), semiJoin.leftKeys, semiJoin.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,31,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,28,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,32,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,313,public Boolean areColumnsUnique(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,314,ImmutableBitSet columns, boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,317,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,27,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,152,public Double getDistinctRowCount(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,153,ImmutableBitSet groupKey, RexNode predicate) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,117,public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(SemiJoin rel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,118,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,119,return getNodeTypes(rel, SemiJoin.class, mq);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,25,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,88,public Double getPopulationSize(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,89,ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,90,return mq.getPopulationSize(rel.getLeft(), groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,37,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,191,public Double getRowCount(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,194,RexNode semiJoinSelectivity =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,195,RelMdUtil.makeSemiJoinSelectivityRexNode(mq, rel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,197,return NumberUtil.multiply(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,198,mq.getSelectivity(rel.getLeft(), semiJoinSelectivity),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,199,mq.getRowCount(rel.getLeft()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,180,public List<Double> averageColumnSizes(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,26,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,203,public Set<ImmutableBitSet> getUniqueKeys(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,204,boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,207,return mq.getUniqueKeys(rel.getLeft(), ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,28,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,117,public static double computeSemiJoinSelectivity(RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,118,SemiJoin rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,119,return computeSemiJoinSelectivity(mq, rel.getLeft(), rel.getRight(),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,120,rel.getLeftKeys(), rel.getRightKeys());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,35,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,370,if (rel instanceof SemiJoin) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,371,final SemiJoin semiJoin = (SemiJoin) rel;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,372,final MutableRel left = toMutable(semiJoin.getLeft());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,373,final MutableRel right = toMutable(semiJoin.getRight());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,374,return MutableSemiJoin.of(semiJoin.getRowType(), left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,375,semiJoin.getCondition(), semiJoin.getLeftKeys(), semiJoin.getRightKeys());
core/src/main/java/org/apache/calcite/tools/Programs.java,117,EnumerableRules.ENUMERABLE_SEMI_JOIN_RULE,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,645,if (from.getKind() == SqlKind.VALUES) {
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,40,private static void unparseCube(SqlWriter writer, SqlCall call) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,174,final DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,175,DateTimeUtils.parsePrecisionDateTimeLiteral(dateStr,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,176,Format.PER_THREAD.get().timestamp, DateTimeUtils.UTC_ZONE, -1);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,452,final Schema schema = new CalciteConnectionImpl.RootSchema();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,91,super();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,234,DatabaseMetaData metaData = connection.getMetaData();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,235,resultSet = metaData.getTables(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,236,catalog,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,237,schema,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,238,null,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,239,null);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,242,while (resultSet.next()) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,243,final String tableName = resultSet.getString(3);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,244,final String catalogName = resultSet.getString(1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,245,final String schemaName = resultSet.getString(2);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,246,final String tableTypeName = resultSet.getString(4);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,257,tableTypeName == null
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,259,: tableTypeName.toUpperCase(Locale.ROOT).replace(' ', '_');
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,266,new JdbcTable(this, catalogName, schemaName, tableName, tableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,267,builder.put(tableName, table);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,636,return call(SqlStdOperatorTable.AS, expr, literal(alias));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,493,String digest = vertex.getCurrentRel().getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,494,return mapDigestToVertex.get(digest) != null;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,822,String digest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,823,HepRelVertex equivVertex = mapDigestToVertex.get(digest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,889,String oldDigest = vertex.getCurrentRel().toString();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,890,if (mapDigestToVertex.get(oldDigest) == vertex) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,891,mapDigestToVertex.remove(oldDigest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,893,String newDigest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,901,mapDigestToVertex.put(newDigest, vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,966,Iterator<Map.Entry<String, HepRelVertex>> digestIter =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,88,if (newCalc.getDigest().equals(bottomCalc.getDigest())) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,182,return DatabaseProduct.DERBY;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,876,Context withIdentifierQuoteString(String identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,897,String identifierQuoteString, NullCollation nullCollation,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,964,public Context withIdentifierQuoteString(String identifierQuoteString) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,974,public Context withNullCollation(@Nonnull NullCollation nullCollation) {
core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java,40,.withIdentifierQuoteString("["));
core/src/main/java/org/apache/calcite/sql/dialect/RedshiftSqlDialect.java,30,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/sql/dialect/VerticaSqlDialect.java,28,.withIdentifierQuoteString("\""));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,310,extractColumnName(((RexCall) rexNode).getOperands().get(0), rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,312,final SqlTypeName toTypeName = rexNode.getType().getSqlTypeName();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,743,if (druidColumn.left == null || druidColumn.right != null) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1484,rewritingMapping.set(k, sourceIdx);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1517,for (int i = 0; i < queryAggregate.getAggCallList().size(); i++) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1519,rexBuilder.makeInputRef(result, queryAggregate.getGroupCount() + i));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,473,literal.getValueAs(BigDecimal.class).toString(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,476,literal.getValueAs(BigDecimal.class).toString(), POS);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,72,if (filter.isA(SqlKind.EQUALS)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,20,import org.apache.calcite.jdbc.CalciteSchema;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2988,private void checkRollUpInUsing(SqlIdentifier identifier, SqlNode leftOrRight) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2989,leftOrRight = stripAs(leftOrRight);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2991,if (leftOrRight instanceof SqlIdentifier) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2992,SqlIdentifier from = (SqlIdentifier) leftOrRight;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2995,String name = Util.last(identifier.names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2997,if (table != null && table.isRolledUp(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2998,throw newValidationError(identifier, RESOURCE.rolledUpNotAllowed(name, "USING"));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3041,checkRollUpInUsing(id, left);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3042,checkRollUpInUsing(id, right);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3376,String tableAlias = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3379,Table table = findTable(tableAlias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3380,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3382,catalogReader.getConfig());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3396,String tableAlias = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3399,Table table = findTable(tableAlias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3400,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3407,CalciteSchema.TableEntry entry = schema.getTable(tableName, caseSensitive);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3408,if (entry != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3409,return entry.getTable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3413,for (CalciteSchema subSchema : schema.getSubSchemaMap().values()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3415,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3416,return table;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3420,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3426,private Table findTable(String alias) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3427,List<String> names = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3428,if (tableScope == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3430,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3433,for (ScopeChild child : tableScope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3434,if (catalogReader.nameMatcher().matches(child.name, alias)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3435,names = ((SqlIdentifier) child.namespace.getNode()).names;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3436,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3439,if (names == null || names.size() == 0) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3440,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3446,CalciteSchema.TableEntry entry =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3447,SqlValidatorUtil.getTableEntry(catalogReader, names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3449,return entry == null ? null : entry.getTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,485,private static class TypeFinder extends VisitorImpl<Void> {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,511,if (constantExpression.value instanceof Type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,512,types.add((Type) constantExpression.value);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,570,if (SqlUtil.isNullLiteral(left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,571,return cx.convertExpression(left);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,573,RexNode arg = cx.convertExpression(left);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,90,final RelDataType operandType = callBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,91,final SqlSingleOperandTypeChecker checker = getChecker(operandType);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,96,private SqlSingleOperandTypeChecker getChecker(RelDataType operandType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,109,throw new AssertionError(operandType.getSqlTypeName());
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,513,return Arrays.equals(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,517,return Arrays.hashCode(t);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,98,for (RelNode input : setOp.getInputs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,101,Project p = pushProject.createProjectRefsAndExprs(input, true, false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,102,newSetOpInputs.add(pushProject.createNewProject(p, adjustments));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,106,SetOp newSetOp =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,107,setOp.copy(setOp.getTraitSet(), newSetOpInputs);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,109,call.transformTo(newSetOp);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,121,newFilterRel = filter.copy(filter.getTraitSet(), project.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,478,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,596,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,242,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,276,if (hasAmbiguousUnresolvedStar(namespace.getRowType(), field,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,277,columnName)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,495,if (hasAmbiguousUnresolvedStar(step.rowType, field0, name)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,547,private boolean hasAmbiguousUnresolvedStar(RelDataType rowType,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,548,RelDataTypeField field, String columnName) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,61,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,62,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,63,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,70,final RelNode input = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,71,if (!aggregate.getAggCallList().isEmpty() || aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,72,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,81,final RelNode newInput = convert(input, aggregate.getTraitSet().simplify());
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,175,return rexBuilder.makeExactLiteral(BigDecimal.ONE);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,177,return rexBuilder.makeCall(SqlStdOperatorTable.CASE, predicate,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,178,rexBuilder.makeExactLiteral(BigDecimal.ONE),
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,179,rexBuilder.makeExactLiteral(BigDecimal.ZERO));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,288,if (operand.ordinalInParent < inputs.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,292,successors = subset.set.subsets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,307,if (ascending) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,43,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,83,final List<RelNode> inputs = call.getChildRels(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,85,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,88,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,92,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,93,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,94,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,95,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,97,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,98,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,99,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,100,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,101,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,102,union.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,103,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,104,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,105,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,106,builder.push(LogicalUnion.create(newInputs, union.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,107,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,131,final List<RelNode> inputs = call.getChildRels(minus);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,133,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,136,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,144,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,145,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,146,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,147,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,149,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,150,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,151,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,152,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,153,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,154,minus.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,155,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,156,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,157,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,158,builder.push(LogicalMinus.create(newInputs, minus.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,159,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,191,return node instanceof Values
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,192,&& ((Values) node).getTuples().isEmpty();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,80,private final JdbcSchema jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,81,private final String jdbcCatalogName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,82,private final String jdbcSchemaName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,83,private final String jdbcTableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,84,private final Schema.TableType jdbcTableType;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,87,String jdbcSchemaName, String tableName, Schema.TableType jdbcTableType) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,89,this.jdbcSchema = jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,92,this.jdbcTableName = tableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,150,SqlIdentifier tableName() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,151,final List<String> strings = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,153,strings.add(jdbcSchema.catalog);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,156,strings.add(jdbcSchema.schema);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,158,strings.add(jdbcTableName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,159,return new SqlIdentifier(strings, SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,141,RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,142,RelCollation collation, RexNode offset, RexNode fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,156,public RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,157,RelCollation collation, RexNode offset, RexNode fetch) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,158,return createSort(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,261,RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,263,boolean semiJoinDone);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,278,public RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,279,JoinRelType joinType, Set<String> variablesStopped,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,280,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,281,return createJoin(left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,282,CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,228,final SqlIdentifier identifier =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,229,new SqlIdentifier(e.getTable().getQualifiedName(), SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,50,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2400,assert nTotalFields == (joinRel instanceof SemiJoin
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2401,? nSysFields + nFieldsLeft
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2402,: nSysFields + nFieldsLeft + nFieldsRight);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,89,!corr.getJoinType().toJoinType().generatesNullsOnLeft(),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,90,!corr.getJoinType().toJoinType().generatesNullsOnRight(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2400,LogicalCorrelate corr = LogicalCorrelate.create(leftRel, p.r,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2401,p.id, p.requiredColumns, SemiJoinType.of(joinType));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2405,return factory.createFilter(corr, joinCond);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,500,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,501,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,502,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,503,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,504,ImmutableList.of(0),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,505,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,506,0,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,507,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,508,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,509,extraName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,511,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,512,LogicalAggregate.create(ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,513,ImmutableBitSet.of(), null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,579,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,580,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,581,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,582,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,583,ImmutableList.of(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,584,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,585,projectedKeyCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,586,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,587,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,588,null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,590,ret = LogicalAggregate.create(ret, ImmutableBitSet.range(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,591,null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,149,return new AggregateCall(aggFunction, distinct, approximate, argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,320,return create(aggFunction, distinct, approximate, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/Window.java,317,return AggregateCall.create(op, aggCall.distinct,
core/src/main/java/org/apache/calcite/rel/core/Window.java,318,false, getProjectOrdinals(aggCall.getOperands()), -1,
core/src/main/java/org/apache/calcite/rel/core/Window.java,357,boolean distinct) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,282,return AggregateCall.create(aggregation, distinct, false, operands,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,160,over.isDistinct());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,297,aggCall.isApproximate(), aggCall.getArgList(), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,410,AggregateCall.create(SqlStdOperatorTable.GROUPING, false, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,456,AggregateCall.create(aggregation, false, aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,152,aggregateCall.isApproximate(), ImmutableList.of(i++), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,352,oldCall.isApproximate(), oldCall.getArgList(), oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,227,return AggregateCall.create(roll, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,228,aggregateCall.isApproximate(), ImmutableList.of(offset + i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,173,origCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,119,(SqlAggFunction) call.getOperator(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,120,call.getType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,121,clonedOperands,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,122,((Window.RexWinAggCall) call).ordinal,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,123,((Window.RexWinAggCall) call).distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,341,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,353,final RexOver over = new RexOver(type, operator, exprs, window, distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,359,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,360,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,370,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,377,operator, exprs, window, distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,383,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,384,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,396,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,639,getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,640,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,641,scale + exp.getType().getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,642,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1081,return getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1082,type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1083,valueNullability);
core/src/main/java/org/apache/calcite/rex/RexOver.java,66,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,54,over.isDistinct());
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,44,super("FILTER", SqlKind.FILTER, 2, true, ReturnTypes.ARG0_FORCE_NULLABLE,
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,155,if (call.getKind() == SqlKind.FILTER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,156,call.operand(0).accept(this);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1910,isDistinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5176,boolean distinct) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5239,distinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5280,distinct);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,762,return new AggCallImpl(aggFunction, distinct, approximate, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1963,boolean approximate, RexNode filter,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,75,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,81,super(cluster, traits);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,21,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,43,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,44,sort.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,55,RelNode x = convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,56,input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,57,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,59,new EnumerableLimit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,60,sort.getCluster(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,61,traitSet,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,62,x,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,242,SortUnionTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,130,public NullDirection defaultNullDirection() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,476,checkRollup:
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,477,if (groupSets.size() == groupSet.cardinality() + 1) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,478,ImmutableBitSet g = groupSet;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,479,for (ImmutableBitSet bitSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,480,if (!bitSet.equals(g)) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,481,break checkRollup;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,483,g = g.clear(g.length() - 1);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,485,assert g.isEmpty();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,202,List<SqlNode> groupByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,204,for (int group : e.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,205,final SqlNode field = builder.context.field(group);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,206,addSelect(selectList, field, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,207,groupByList.add(field);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,212,aggCallSqlNode = dialect.
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,213,rewriteSingleValueExpr(aggCallSqlNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,352,builder = x.builder(e, Clause.FETCH);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,357,builder = x.builder(e, Clause.OFFSET);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,675,public RelFieldCollation.NullDirection defaultNullDirection(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,878,Context withNullCollation(@Nonnull NullCollation nullCollation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,537,public RexNode call(SqlOperator operator, RexNode... operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,542,private RexNode call(SqlOperator operator, List<RexNode> operandList) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,553,public RexNode call(SqlOperator operator,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,44,import java.util.AbstractList;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,84,List<String> fieldNames = new AbstractList<String>() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,86,return rowType.getFieldList().get(index).getName();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,90,return rowType.getFieldCount();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,94,return SqlValidatorUtil.uniquify(fieldNames, true);
core/src/main/java/org/apache/calcite/util/Bug.java,154,public static final boolean CALCITE_461_FIXED = false;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1198,return this;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,372,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,90,static Class javaRowClass(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,91,JavaTypeFactory typeFactory, RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,92,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,93,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,95,final Type clazz = typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,96,return clazz instanceof Class ? (Class) clazz : Object[].class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,423,inputPhysType.convertTo(childExp, physType),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollect.java,60,Expressions.call(child_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,211,final RelDataType dummyType = this.rowType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,212,final Expression e3 =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,213,elementPhysType.convertTo(e2,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,214,PhysTypeImpl.of(typeFactory, dummyType, JavaRowFormat.LIST));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,53,import static org.apache.calcite.adapter.enumerable.EnumUtils.javaRowClass;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,75,fieldClasses.add(javaRowClass(typeFactory, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,242,final JavaRowFormat targetFormat = targetPhysType.getFormat();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,249,return Expressions.call(exp, BuiltInMethod.SELECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,250,generateSelector(o_, Util.range(fieldCount), targetFormat));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,169,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,170,return getJavaClass(type.getFieldList().get(0).getType());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2093,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1958,operand = Expressions.divide(operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1959,Expressions.constant(TimeUnit.DAY.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2045,return Expressions.modulo(operand, Expressions.constant(factor));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,682,if (id.names.size() == 1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,83,double rowCount = mq.getRowCount(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,84,double percentage = mq.getPercentageOriginalRows(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,103,double left = mq.getPercentageOriginalRows(rel.getLeft());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,104,double right = mq.getPercentageOriginalRows(rel.getRight());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1032,name = SqlValidatorUtil.F_SUGGESTER.apply(name, j, j++);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,569,return simplifier.simplifyAnds(operands);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1518,new SqlBaseContextVariable("PI", ReturnTypes.DOUBLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1519,SqlFunctionCategory.NUMERIC);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,202,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,203,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,204,final Integer precision = (Integer) map.get("precision");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,205,final Integer scale = (Integer) map.get("scale");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,206,final RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,207,if (precision == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,208,type = typeFactory.createSqlType(sqlTypeName);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,210,type = typeFactory.createSqlType(sqlTypeName, precision);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,212,type = typeFactory.createSqlType(sqlTypeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,214,final boolean nullable = (Boolean) map.get("nullable");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,215,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,228,Object toJson(Object value) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,286,final Map<String, Object> map =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,287,(Map<String, Object>) toJson(node.getType());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,307,final Object value2 = literal.getValue2();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,308,if (value2 == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,312,map = jsonBuilder.map();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,313,map.put("literal", null);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,314,map.put("type", literal.getTypeName().name());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,315,return map;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,317,return value2;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,345,map.put("class", call.getOperator().getClass().getName());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,365,final Object jsonType = map.get("type");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,366,final SqlOperator operator = toOp(op, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,368,RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,369,if (jsonType != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,370,type = toType(typeFactory, jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,372,type = rexBuilder.deriveReturnType(operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,374,return rexBuilder.makeCall(type, operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,404,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,405,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,407,return rexBuilder.makeNullLiteral(
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,408,typeFactory.createSqlType(sqlTypeName));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,410,return toRex(relInput, literal);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,439,private SqlOperator toOp(String op, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,456,SqlAggFunction toAggregation(String agg, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,457,return (SqlAggFunction) toOp(agg, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,78,Map<String, Object> o = mapper.readValue(s, TYPE_REF);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,169,inputs.add(toAggCall(jsonAggCall));
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,272,private AggregateCall toAggCall(Map<String, Object> jsonAggCall) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,275,relJson.toAggregation(aggName, jsonAggCall);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,40,private final JsonBuilder jsonBuilder;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,41,private final RelJson relJson;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,43,private final List<Object> relList;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,60,static final SqlPostfixOperator FOLLOWING_OPERATOR =
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,67,static final SqlPostfixOperator PRECEDING_OPERATOR =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,73,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,692,if (nodeList.size() == 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,693,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,695,final List<SqlNode> butLast = Util.skipLast(nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,696,final SqlNode last = nodeList.get(nodeList.size() - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,697,final SqlNode call = createLeftCall(op, butLast);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,698,return op.createCall(new SqlNodeList(ImmutableList.of(call, last), POS));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,246,return typeFactory.createStructType(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,247,Lists.transform(type.getFieldList(),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,253,type.getFieldNames());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,255,if (type instanceof JavaType) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,256,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,257,typeFactory.createSqlType(type.getSqlTypeName()),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,258,type.isNullable());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,260,return type;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,147,return canonize(kind, fieldNameList, typeList);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,298,type.getFieldNames());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,303,if (type instanceof RelRecordType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,304,return copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,306,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,307,type,
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,308,type.isNullable());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,324,if (nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,327,newType = copyRecordType((RelRecordType) type, false, true);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,331,newType = copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,359,final List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,360,final RelDataType type = CACHE.getIfPresent(new Key(kind, names, types));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,366,return CACHE.getUnchecked(new Key(kind, names2, types2));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,665,Key(StructKind kind, List<String> names, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,672,return Objects.hash(kind, names, types);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,680,&& types.equals(((Key) obj).types);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,40,public RelRecordType(StructKind kind, List<RelDataTypeField> fields) {
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,47,this(StructKind.FULLY_QUALIFIED, fields);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,57,return false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,444,+ "] could not be implemented; planner state:\n");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,223,private String originalRootString;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,241,private final Deque<VolcanoRuleCall> ruleCallStack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,312,this.originalRootString =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,313,RelOptUtil.toString(root, SqlExplainLevel.ALL_ATTRIBUTES);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1173,pw.println(originalRootString);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1174,pw.println("Sets:");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1229,pw.println();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1765,ruleCallStack.push(ruleCall);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1767,ruleCallStack.pop();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,212,getRule().onMatch(this);
core/src/main/java/org/apache/calcite/tools/Programs.java,278,return hep(
core/src/main/java/org/apache/calcite/tools/Programs.java,279,ImmutableList.of((RelOptRule) SubQueryRemoveRule.FILTER,
core/src/main/java/org/apache/calcite/tools/Programs.java,280,SubQueryRemoveRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,281,SubQueryRemoveRule.JOIN), true, metadataProvider);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,61,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,158,private final Map<Pair<String, RelDataType>, RelNode> mapDigestToRel =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1233,private static Pair<String, RelDataType> key(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1234,return Pair.of(rel.getDigest(), rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1249,final Pair<String, RelDataType> oldKey =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1250,Pair.of(oldDigest, rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1251,final RelNode removed = mapDigestToRel.remove(oldKey);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1255,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1256,final RelNode equivRel = mapDigestToRel.put(key, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1264,mapDigestToRel.put(key, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1307,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1308,RelNode equivRel = mapDigestToRel.get(key);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1512,Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1550,key = key(rel);
core/src/main/java/org/apache/calcite/rel/core/Values.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/core/Values.java,192,.itemIf("tuples", tuples, pw.nest());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1030,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1031,new NlsString(s, null, null),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1032,typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1033,SqlTypeName.CHAR,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1034,s.length()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1035,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexCall.java,76,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,77,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,78,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,219,this.digest = toJavaString(value, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,315,SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,317,return "null";
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,321,printAsJava(value, pw, typeName, false);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,422,printAsJava(value, pw, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,447,boolean java) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,543,return list.get(index).digest;
core/src/main/java/org/apache/calcite/rex/RexOver.java,96,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,97,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,98,sb.append(", ");
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,203,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,204,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,205,Coercibility.COERCIBLE);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,207,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,208,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,209,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,213,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,214,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,215,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,222,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,223,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,224,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,227,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,228,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,229,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,235,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,236,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,237,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,248,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,249,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,250,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,259,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,260,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,261,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,264,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,265,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,266,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,83,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,84,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,85,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,84,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,85,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,86,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,203,if (wrappedCharset != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,208,if (collation != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,112,public static Enumerable<Object> of(DataSource dataSource, String sql) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,118,public static Enumerable<Object> of(DataSource dataSource, String sql,
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,125,public static <T> Enumerable<T> of(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,80,if (LOGGER.isDebugEnabled()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,81,LOGGER.debug("Inferred ranges on interval : " + condensedRanges);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,83,return toInterval(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,84,ImmutableList.<Range>copyOf(condensedRanges.asRanges()));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,199,switch (call.getKind()) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,127,columns = getKeyspace().getMaterializedView(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,129,columns = getKeyspace().getTable(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,174,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,176,table = getKeyspace().getTable(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,202,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,204,table = getKeyspace().getTable(columnFamily);
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,128,TIME_ZONE("timeZone", Type.STRING, null, false),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,410,+ "\nexpression is " + newRel.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,396,if (operands.size() != 2 && predicate.getKind() == SqlKind.EQUALS) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,397,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,398,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,130,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,131,final Join join = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,132,final RexBuilder rexBuilder = aggregate.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,133,final RelBuilder relBuilder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,140,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,142,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,143,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,149,if (join.getJoinType() != JoinRelType.INNER) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,150,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,153,if (!allowFunctions && !aggregate.getAggCallList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,154,return;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,66,filter.getCondition());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,359,assert tempDigest != null : "post: return != null";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,360,String prefix = "rel#" + id + ":";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,364,this.desc = prefix + tempDigest;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,365,this.digest = this.desc.substring(prefix.length());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,417,pw.write(value.left + "=" + value.right);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,622,final SqlNode lowerBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,623,createSqlWindowBound(rexWindow.getLowerBound());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,624,final SqlNode upperBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,625,createSqlWindowBound(rexWindow.getUpperBound());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,305,return;
core/src/main/java/org/apache/calcite/runtime/CalciteException.java,61,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorException.java,59,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1078,Collections.replaceAll(terms, e, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1112,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1113,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1114,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1149,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1150,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1151,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1187,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1188,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1189,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1224,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1225,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1226,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1238,Collections.replaceAll(terms, e, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1250,Collections.replaceAll(terms, e, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,459,inferUnknownTypes(targetType, scope, expanded);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1695,RelDataType inferredType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1696,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1697,SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1772,if (operandTypeInference == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1775,Arrays.fill(operandTypes, unknownType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1783,inferUnknownTypes(operandTypes[i], scope, operands.get(i));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,56,import org.apache.calcite.rex.RexUtil.ExprSimplifier;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,543,final ExprSimplifier simplifier =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,547,RexNode expr2 = simplifier.apply(expList.get(i));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,110,final RexNode e3 = rexBuilder.makeCast(e.getType(), e2, true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,652,case INPUT_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,657,if (nullAs == RexImpTable.NullAs.NOT_POSSIBLE
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,658,&& input.type.equals(storageType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,661,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,663,return handleNull(input, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,683,case FIELD_ACCESS:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,933,long l = bd.unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,936,assert BigDecimal.valueOf(l, scale).equals(bd);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,938,if ((l >= Integer.MIN_VALUE) && (l <= Integer.MAX_VALUE)) {
core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java,105,return new SqlDataTypeSpec(new SqlIdentifier("_UNSIGNED", SqlParserPos.ZERO),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,161,NullCollation.HIGH, JethroDataSqlDialect.JethroInfo.EMPTY);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,520,type.getPrecision(),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,917,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,927,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,937,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,947,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,957,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,967,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,977,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,987,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java,33,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2378,final BuiltInMethod method =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2379,operand0.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2380,? BuiltInMethod.ADD_MONTHS
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2381,: BuiltInMethod.ADD_MONTHS_INT;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2382,return Expressions.call(method.method, trop0, trop1);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,68,return def.canonizeComposite(compositeTrait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,106,RelCompositeTrait<T> canonize(RelTraitDef<T> traitDef) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,107,T[] newTraits = null;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,108,for (int i = 0; i < traits.length; i++) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,109,final T trait = traits[i];
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,110,final T trait2 = traitDef.canonize(trait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,111,if (trait2 != trait) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,112,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,113,newTraits = traits.clone();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,115,newTraits[i] = trait2;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,118,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,119,return this;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,121,assert false;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,22,import com.google.common.cache.CacheBuilder;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,23,import com.google.common.cache.CacheLoader;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,24,import com.google.common.cache.LoadingCache;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,27,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,59,private final LoadingCache<T, T> canonicalMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,76,private final LoadingCache<Object, RelCompositeTrait> canonicalCompositeMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,79,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,80,new CacheLoader<Object, RelCompositeTrait>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,82,if (key instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,83,return (RelCompositeTrait) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,86,final List<RelMultipleTrait> list =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,87,(List<RelMultipleTrait>) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,88,final RelTraitDef def = list.get(0).getTraitDef();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,89,return (RelCompositeTrait) RelCompositeTrait.of(def, list);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,134,if (trait instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,135,RelCompositeTrait relCompositeTrait = (RelCompositeTrait) trait;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,136,return (T) canonizeComposite(relCompositeTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,140,+ " cannot canonize a "
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,141,+ trait.getClass().getName();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,143,return canonicalMap.getUnchecked(trait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,146,final RelCompositeTrait canonizeComposite(RelCompositeTrait compositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,147,return canonicalCompositeMap.getUnchecked(compositeTrait);
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,95,RelDataType nodeType = validator.deriveType(scope, call.getOperandList().get(0));
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,98,final String fieldName = call.getOperandList().get(1).toString();
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,99,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,102,throw SqlUtil.newContextException(SqlParserPos.ZERO, Static.RESOURCE.unknownField(fieldName));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,171,if (RexUtil.eq(first, second)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1378,final Map<String, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1380,map.put(e.toString(), map.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1384,final Integer integer = map.get(ref.getName());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1392,final Integer integer = map.get(call.toString());
core/src/main/java/org/apache/calcite/rel/core/Match.java,276,if (rex.toString().equals(aggCall.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,64,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,75,import java.util.Map.Entry;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,379,Map<String, RexNode> finalPreds = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,380,List<RexNode> finalResidualPreds = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,381,for (int i = 0; i < union.getInputs().size(); i++) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,382,RelNode input = union.getInputs().get(i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,383,RelOptPredicateList info = mq.getPulledUpPredicates(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,387,Map<String, RexNode> preds = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,388,List<RexNode> residualPreds = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,390,final String predDigest = pred.toString();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,391,if (i == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,392,preds.put(predDigest, pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,395,if (finalPreds.containsKey(predDigest)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,396,preds.put(predDigest, pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,398,residualPreds.add(pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,404,for (Entry<String, RexNode> e : finalPreds.entrySet()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,405,if (!preds.containsKey(e.getKey())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,407,for (int j = 0; j < i; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,408,finalResidualPreds.set(j,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,415,finalPreds = preds;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,418,List<RexNode> preds = new ArrayList<>(finalPreds.values());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,422,final RelOptPredicateList predicates = RelOptPredicateList.EMPTY;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,426,if (!disjPred.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,427,preds.add(disjPred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,499,final Map<String, ImmutableBitSet> exprFields;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,501,final Set<String> equalityPredicates;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,528,if (lPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,533,leftChildPredicates = lPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,537,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,541,if (rPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,547,rightChildPredicates = rPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,551,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,571,new ArrayList<>(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,680,private void infer(RexNode predicates, Set<String> allExprsDigests,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,685,&& equalityPredicates.contains(r.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,714,private void equivalent(int p1, int p2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,744,JoinConditionBasedPredicateInference.this.equivalent(lPos, rPos);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,745,JoinConditionBasedPredicateInference.this.equalityPredicates
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,746,.add(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,52,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,436,final List<RexNode> unionList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,437,final Set<String> strings = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,439,for (RexNode rex : RelOptUtil.conjunctions(pred1)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,440,if (strings.add(rex.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,441,unionList.add(rex);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,444,for (RexNode rex2 : RelOptUtil.conjunctions(pred2)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,445,if (strings.add(rex2.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,446,unionList.add(rex2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,466,final List<RexNode> list1 = RelOptUtil.conjunctions(pred1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,467,final List<RexNode> list2 = RelOptUtil.conjunctions(pred2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,468,final List<RexNode> minusList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,470,for (RexNode rex1 : list1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,471,boolean add = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,472,for (RexNode rex2 : list2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,473,if (rex2.toString().compareTo(rex1.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,474,add = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,475,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,478,if (add) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,479,minusList.add(rex1);
core/src/main/java/org/apache/calcite/rel/mutable/MutableFilter.java,46,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableFilter.java,52,return Objects.hash(input, condition.toString());
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,69,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,78,return Objects.hash(left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,79,condition.toString(), joinType, variablesSet);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,64,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,73,return Objects.hash(left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,74,condition.toString(), leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1371,List<String> additionalViewExprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1401,final Multimap<String, Integer> exprsLineage = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1410,int ref = ((RexInputRef) n).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1413,new RexInputRef(childTargetIdx, targetNode.getType()).toString(), k);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1426,new RexInputRef(targetIdx, targetNode.getType()).toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1545,final Multimap<String, Integer> viewExprs = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1548,viewExprs.put(viewExpr.toString(), numberViewExprs++);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1550,for (String additionalViewExpr : additionalViewExprs) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1596,Multimap<String, Integer> exprsLineage = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1613,exprsLineage.put(expr.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1675,Collection<Integer> c = exprsLineage.get(targetExpr.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2004,&& sourceEC.getEquivalenceClassesMap().get(uniqueKeyColumnRef).contains(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2005,foreignKeyColumnRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2304,Map<String, Integer> exprsLineage = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2305,Map<String, Integer> exprsLineageLosslessCasts = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2319,exprsLineage.put(e.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2321,exprsLineageLosslessCasts.put(((RexCall) e).getOperands().get(0).toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2324,return NodeLineage.of(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2338,Map<String, Integer> exprsLineage = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2339,Map<String, Integer> exprsLineageLosslessCasts = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2348,assert s.size() == 1;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2351,final RexNode e = RexUtil.swapColumnTableReferences(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2352,rexBuilder, s.iterator().next(), ec.getEquivalenceClassesMap(), tableMapping);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2353,exprsLineage.put(e.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2355,exprsLineageLosslessCasts.put(((RexCall) e).getOperands().get(0).toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2358,return NodeLineage.of(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2386,Integer pos = nodeLineage.exprsLineage.get(e.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2391,pos = nodeLineage.exprsLineageLosslessCasts.get(e.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2434,final RexNode expr, final Multimap<String, Integer> exprsLineage) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2446,final RexNode expr, final Multimap<String, Integer> exprsLineage,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2452,Collection<Integer> c = exprsLineage.get(ref.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2472,Collection<Integer> c = exprsLineage.get(inputRef.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2492,Collection<Integer> c = exprsLineage.get(call.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2609,private final Map<String, Integer> exprsLineage;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2610,private final Map<String, Integer> exprsLineageLosslessCasts;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2612,private NodeLineage(Map<String, Integer> exprsLineage,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2613,Map<String, Integer> exprsLineageLosslessCasts) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2614,this.exprsLineage = Collections.unmodifiableMap(exprsLineage);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2615,this.exprsLineageLosslessCasts = Collections.unmodifiableMap(exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2618,protected static NodeLineage of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2619,Map<String, Integer> exprsLineage, Map<String, Integer> exprsLineageLosslessCasts) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2620,return new NodeLineage(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,163,final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,188,if (RexUtil.eq(condition, filter.getCondition())) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,247,private final Map<String, RangeSet<Calendar>> operandRanges;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,254,Map<String, RangeSet<Calendar>> operandRanges,
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,341,final RangeSet<Calendar> calendarRangeSet =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,342,operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,370,final Map<String, RangeSet<Calendar>> save =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,409,RangeSet<Calendar> rangeSet = operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,448,operandRanges.put(operand.toString(), ImmutableRangeSet.copyOf(s2));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,578,RangeSet<Calendar> rangeSet = operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,590,operandRanges.put(operand.toString(), ImmutableRangeSet.copyOf(s2));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,64,if (join.getCondition().toString().equals(newCondition.toString())) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,670,addExpr(preserveLeft, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,674,addExpr(preserveRight, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,698,private void addExpr(List<RexNode> exprList, RexNode newExpr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,699,String newExprString = newExpr.toString();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,700,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,701,if (newExprString.compareTo(expr.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,702,return;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,705,exprList.add(newExpr);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,774,int match = findExprInList(rex, rexList1);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,780,match = findExprInList(rex, rexList2);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,789,private int findExprInList(RexNode rex, List<RexNode> rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,790,int match = 0;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,791,for (RexNode rexElement : rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,792,if (rexElement.toString().compareTo(rex.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,793,return match;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,795,match++;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,797,return -1;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,125,private final Map<Pair<String, String>, RexNode> irreducible;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,126,private final Map<Pair<String, String>, RexNode> results;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,176,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,188,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,548,if (!expr2.toString().equals(expList.get(i).toString())) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,420,return RexUtil.eq(subQuery, this.subQuery) ? replacement : subQuery;
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,118,if (RexUtil.eq(node, seek)) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,68,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,69,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexCall.java,80,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexCall.java,81,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexCall.java,95,public String toString() {
core/src/main/java/org/apache/calcite/rex/RexCall.java,101,digest = localDigest;
core/src/main/java/org/apache/calcite/rex/RexOver.java,100,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexOver.java,101,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,47,private final Map<Pair<String, String>, RexLocalRef> exprMap =
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,333,final Pair<String, String> key;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,602,final Multimap<String, Pair<String, RexNode>> equalityTerms = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,603,final Map<String, Pair<Range<C>, List<RexNode>>> rangeTerms =
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,605,final Map<String, String> equalityConstantTerms = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,606,final Set<String> negatedTerms = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,607,final Set<String> nullOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,609,final Set<String> comparedOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,655,RexNode left = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,656,comparedOperands.add(left.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,660,comparedOperands.add(leftCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,662,RexNode right = call.getOperands().get(1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,663,comparedOperands.add(right.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,667,comparedOperands.add(rightCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,680,final String literal = comparison.literal.toString();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,681,final String prevLiteral =
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,682,equalityConstantTerms.put(comparison.ref.toString(), literal);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,688,equalityTerms.put(left.toString(), Pair.of(right.toString(), term));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,698,negatedTerms.add(negatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,701,negatedTerms.add(invertNegatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,725,comparedOperands.add(((RexCall) term).operands.get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,728,comparedOperands.add(((RexCall) term).operands.get(1).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,736,nullOperands.add(((RexCall) term).getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,748,for (String ref1 : equalityTerms.keySet()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,749,final String literal1 = equalityConstantTerms.get(ref1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,753,Collection<Pair<String, RexNode>> references = equalityTerms.get(ref1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,754,for (Pair<String, RexNode> ref2 : references) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,755,final String literal2 = equalityConstantTerms.get(ref2.left);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,773,if (!comparedOperands.contains(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,785,final Set<String> termsSet = new HashSet<>(RexUtil.strings(terms));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,790,final List<String> terms2Set = RexUtil.strings(RelOptUtil.conjunctions(notDisjunction));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,802,for (String negatedTerm : negatedTerms) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1055,Map<String, Pair<Range<C>, List<RexNode>>> rangeTerms, RexNode term,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1057,Pair<Range<C>, List<RexNode>> p = rangeTerms.get(ref.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1059,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1073,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1244,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1256,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,112,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,115,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,997,public static Pair<String, String> makeKey(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,998,return Pair.of(expr.toString(), expr.getType().getFullTypeString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1074,addAnd(builder, digests, node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1081,Set<String> digests, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1089,if (!node.isAlwaysTrue() && digests.add(node.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1137,addOr(builder, digests, node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1143,Set<String> digests, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1147,addOr(builder, digests, operand);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1151,if (!node.isAlwaysFalse() && digests.add(node.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1660,if (eq(next, e)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2058,final Map<String, RexNode> mapDigestToExpr = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2067,final String key = expr.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2068,final RexNode previous = mapDigestToExpr.put(key, expr);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2076,return mapDigestToExpr.get(expr.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2312,final Map<String, RexNode> factors = commonFactors(operands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2341,private Map<String, RexNode> commonFactors(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2347,map.put(conjunction.toString(), conjunction);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2350,map.keySet().retainAll(strings(RelOptUtil.conjunctions(node)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2356,private RexNode removeFactor(Map<String, RexNode> factors, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2359,if (!factors.containsKey(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexVariable.java,35,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,36,assert name != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,37,this.name = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,38,this.digest = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,39,this.type = type;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,706,int x = findExpr(projectExprs.get(i), projectExprs, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,707,if (x >= 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,770,private int findExpr(RexNode seek, List<RexNode> exprs, int count) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,771,for (int i = 0; i < count; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,772,RexNode expr = exprs.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,773,if (expr.toString().equals(seek.toString())) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,774,return i;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,777,return -1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5038,if (expr.toString().equals(convertedInputExpr.toString())) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1936,SqlOperator nullOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1937,SqlOperator eqOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1939,nullOp = SqlStdOperatorTable.IS_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1940,eqOp = SqlStdOperatorTable.EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1942,nullOp = SqlStdOperatorTable.IS_NOT_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1943,eqOp = SqlStdOperatorTable.NOT_EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1947,RexNode[] whenThenElse = {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1949,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1952,rexBuilder.makeCall(nullOp, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1955,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1958,rexBuilder.makeCall(nullOp, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1961,rexBuilder.makeCall(eqOp,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1962,rexBuilder.makeNotNull(x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1965,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1966,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1967,whenThenElse);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2712,(List) rel.getInputs());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,790,if (node != call) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,91,String sql = generateSql(jdbcConvention.dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,154,final Expression enumerable =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,155,builder0.append(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,157,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,158,BuiltInMethod.RESULT_SET_ENUMERABLE_OF.method,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,159,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,160,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,161,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,162,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,163,sql_,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,164,rowBuilderFactory_));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,295,private String generateSql(SqlDialect dialect) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,301,return result.asStatement().toSqlString(dialect).getSql();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,955,return null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,105,Function1<ResultSet, Function0<T>> rowBuilderFactory) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,138,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,139,statement.setQueryTimeout(10);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,141,LOGGER.debug("Failed to set query timeout.");
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,153,throw new RuntimeException("while executing SQL [" + sql + "]", e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,155,if (statement != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,156,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,157,statement.close();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,162,if (connection != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,163,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,164,connection.close();
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,64,writer.print("?");
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,65,writer.setNeedWhitespace(true);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,153,final String sql = writer.toString();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,154,return new SqlString(dialect, sql);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,24,import org.apache.calcite.sql.util.SqlBuilder;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,813,return new SqlBuilder(dialect, toString()).toSqlString();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,31,private final String s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,39,public SqlString(SqlDialect dialect, String s) {
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,41,this.s = s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,42,assert s != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,43,assert dialect != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,47,return s.hashCode();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,53,&& s.equals(((SqlString) obj).s);
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,65,return s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,74,return s;
plus/src/main/java/org/apache/calcite/chinook/CalciteConnectionProvider.java,37,private static final String DRIVER_URL = "jdbc:calcite:";
plus/src/main/java/org/apache/calcite/chinook/CalciteConnectionProvider.java,43,private Properties provideConnectionInfo() throws IOException {
plus/src/main/java/org/apache/calcite/chinook/ConnectionFactory.java,33,return DBWrapper.valueOf(db).connection();
plus/src/main/java/org/apache/calcite/chinook/ConnectionFactory.java,39,private enum DBWrapper {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,111,for (RelTableRef leftRef : mq.getTableReferences(leftInput)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,119,for (RelTableRef rightRef : mq.getTableReferences(rightInput)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,148,for (RelTableRef tableRef : mq.getTableReferences(input)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,109,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,110,call.getType(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,111,call.getOperator(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,112,clonedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,236,if (accPhysType.getJavaRowType() instanceof JavaTypeFactoryImpl.SyntheticRecordType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,239,JavaTypeFactoryImpl.SyntheticRecordType synType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,241,accPhysType.getJavaRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,242,final ParameterExpression record0_ =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,243,Expressions.parameter(accPhysType.getJavaRowType(), "record0");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,244,initBlock.add(Expressions.declare(0, record0_, null));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,245,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,246,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,247,Expressions.assign(record0_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,248,Expressions.new_(accPhysType.getJavaRowType()))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,249,List<Types.RecordField> fieldList = synType.getRecordFields();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,250,for (int i = 0; i < initExpressions.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,251,Expression right = initExpressions.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,252,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,253,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,254,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,255,Expressions.field(record0_, fieldList.get(i)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,256,right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,258,initBlock.add(record0_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,260,initBlock.add(accPhysType.record(initExpressions));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,264,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,278,final BlockBuilder builder2 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,326,builder2.add(acc_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,327,final Expression accumulatorAdder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,328,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,330,Expressions.lambda(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,331,Function2.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,332,builder2.toBlock(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,333,acc_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,334,inParameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,393,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,394,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,413,Expressions.call(accumulatorInitializer, "apply"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,414,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,415,resultSelector))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,444,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,445,accumulatorAdder,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,785,AggregateCall.create(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,786,SqlStdOperatorTable.SINGLE_VALUE, false, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,787,ImmutableList.of(i), -1, 0, rel, null, null));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,68,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1253,apply(mapping, aggregate.aggCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1257,private static List<AggregateCall> apply(final Mapping mapping,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1258,List<AggregateCall> aggCallList) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1259,return Lists.transform(aggCallList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1314,aggregateCall.type, aggregateCall.name));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,344,typeChecker, (AggregateFunction) function, false, false, typeFactory);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,70,this(aggFunction, distinct, false, argList, -1, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,84,private AggregateCall(
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,85,SqlAggFunction aggFunction,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,86,boolean distinct,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,87,boolean approximate,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,88,List<Integer> argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,89,int filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,90,RelDataType type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,91,String name) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,107,return create(aggFunction, distinct, false, argList, -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,108,type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,115,return create(aggFunction, distinct, false, argList, -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,116,type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,134,return create(aggFunction, distinct, approximate, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,135,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,142,return create(aggFunction, distinct, false, argList, filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,150,filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,220,return new AggregateCall(aggFunction, distinct, approximate, argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,221,filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,261,&& filterArg == other.filterArg;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,265,return Objects.hash(aggFunction, distinct, argList, filterArg);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,289,public AggregateCall copy(List<Integer> args, int filterArg) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,291,filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,296,return copy(args, filterArg);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,321,newGroupKeyCount, input, newType, getName());
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,328,hasFilter() ? Mappings.apply(mapping, filterArg) : -1);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,283,filterOperand == null ? -1 : filterOperand, type, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1128,if (field.nullDirection != RelFieldCollation.NullDirection.UNSPECIFIED) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1129,boolean first = field.nullDirection == RelFieldCollation.NullDirection.FIRST;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1130,SqlNode nullDirectionNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1131,dialect.emulateNullDirection(context.field(field.getFieldIndex()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1132,first, field.direction.isDescending());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1133,if (nullDirectionNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1134,orderByList.add(nullDirectionNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1135,field = new RelFieldCollation(field.getFieldIndex(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1136,field.getDirection(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1137,RelFieldCollation.NullDirection.UNSPECIFIED);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1140,orderByList.add(context.toSql(field));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,334,final List<Integer> newArgs =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,339,aggCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,345,aggCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,411,ImmutableIntList.copyOf(fullGroupSet), -1, groupSets.size(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,412,relBuilder.peek(), null, "$g"));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,457,newArgList, newFilterArg, aggregate.getGroupCount(), distinct,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,458,null, aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,667,aggCall.isApproximate(), newArgs,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,668,newFilterArg, aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,756,aggCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,78,for (int key : aggregate.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,79,final RexNode rex = project.getProjects().get(key);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,80,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,81,final int newKey = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,82,newKeys.add(newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,83,map.put(key, newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,101,final ImmutableList.Builder<Integer> newArgs = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,102,for (int arg : aggregateCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,103,final RexNode rex = project.getProjects().get(arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,104,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,105,newArgs.add(((RexInputRef) rex).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,108,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,111,final int newFilterArg;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,112,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,113,final RexNode rex = project.getProjects().get(aggregateCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,114,if (!(rex instanceof RexInputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,115,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,117,newFilterArg = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,119,newFilterArg = -1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,121,aggCalls.add(aggregateCall.copy(newArgs.build(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,353,oldAggRel.getGroupCount(), oldAggRel.getInput(), null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,354,oldCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,244,aggregateCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,174,ImmutableList.of(groupCount + ord.i), -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,175,aggType, origCall.getName());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,303,aggCall = aggCall.copy(nullableArgs, aggCall.filterArg);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,51,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,65,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,81,boolean requiresOver) {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,108,validator.validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,72,SqlCall aggCall = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,78,validator.validateAggregateParams(aggCall, condition, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,95,SqlNode agg = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,97,if (!(agg instanceof SqlCall)) {
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,98,throw new IllegalStateException("Argument to SqlOverOperator"
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,99,+ " should be SqlCall, got " + agg.getClass() + ": " + agg);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,102,final SqlCall aggCall = (SqlCall) agg;
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,117,((SqlValidatorImpl) validator).setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,38,true);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,121,ImmutableIntList.of(), -1,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,150,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,151,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,211,return aggregateCall.copy(ImmutableIntList.of(arg), -1);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,263,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,264,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,58,operandTypeChecker, category, false, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,55,Preconditions.checkArgument(SqlKind.AVG_AGG_FUNCTIONS.contains(kind), "unsupported sql kind");
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlFirstLastValueAggFunction.java,51,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlHistogramAggFunction.java,56,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,85,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,78,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,40,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlSingleValueAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1940,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1952,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlSumAggFunction.java,57,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,61,boolean requiresOrder, boolean requiresOver, RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,64,SqlFunctionCategory.USER_DEFINED_FUNCTION, requiresOrder, requiresOver);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,302,SqlValidatorScope scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4800,validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5075,SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,798,for (int i : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,799,inputFieldsUsed.set(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1111,false, args, -1, longType, null)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4653,&& (op.isAggregator() || op.getKind() == SqlKind.FILTER)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4905,translateAgg((SqlCall) call.operand(0), call.operand(1), call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4939,translateAgg(call, null, call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4954,private void translateAgg(SqlCall call, SqlNode filter, SqlCall outerCall) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1255,aggCall1.approximate, args,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1256,filterArg, groupSet.cardinality(), r, null, aggCall1.alias);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,608,int newFilterArg = aggCall.filterArg;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,610,|| (uniqueFilterRefs.size() == 1 && allHaveFilters) // filters get extracted
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,611,|| project.getProjects().get(newFilterArg).isAlwaysTrue()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,612,newFilterArg = -1;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,614,newCalls.add(aggCall.copy(aggCall.getArgList(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1209,relBuilder.aggregateCall(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1210,rollupAgg,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1211,aggCall.isDistinct(), aggCall.isApproximate(), null,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1212,aggCall.name,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1213,rexBuilder.makeInputRef(relBuilder.peek(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1214,aggregate.getGroupCount() + i)));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1481,relBuilder.aggregateCall(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1482,rollupAgg, queryAggCall.isDistinct(), queryAggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1483,null, queryAggCall.name, rexBuilder.makeInputRef(input, k)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,277,final SortedSet<Integer> bottomGroupSet = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,278,bottomGroupSet.addAll(aggregate.getGroupSet().asList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,281,bottomGroupSet.addAll(aggCall.getArgList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,298,ImmutableBitSet.of(bottomGroupSet).cardinality(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,305,aggregate.copy(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,306,aggregate.getTraitSet(), relBuilder.build(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,307,false, ImmutableBitSet.of(bottomGroupSet), null, bottomAggregateCalls));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,319,newArgList.add(bottomGroupSet.headSet(arg).size());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,335,Lists.newArrayList(bottomGroupSet.size() + nonDistinctAggCallProcessedSoFar);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,360,for (int bottomGroup : bottomGroupSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,135,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,136,aggCall.isDistinct(), aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,137,filterArg, aggCall.name, args));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,302,builder.aggregateCall(SqlStdOperatorTable.COUNT, false, false, null,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,875,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,876,aggCall.isDistinct(), aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,877,filterArg, aggCall.name, args);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,149,aggregateCall(SqlStdOperatorTable.COLLECT, false, false, null,
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,150,getAlias(), row));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,733,return aggregateCall(aggFunction, distinct, false, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,734,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,740,return aggregateCall(aggFunction, distinct, approximate, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,741,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,747,return aggregateCall(aggFunction, distinct, false, filter, alias, operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,754,if (filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,755,if (filter.getType().getSqlTypeName() != SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,756,throw RESOURCE.filterMustBeBoolean().ex();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,758,if (filter.getType().isNullable()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,759,filter = call(SqlStdOperatorTable.IS_TRUE, filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,763,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,768,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,769,alias, operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,774,return aggregateCall(SqlStdOperatorTable.COUNT, false, false, null, alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,779,return aggregateCall(SqlStdOperatorTable.SUM, distinct, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,780,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,785,return aggregateCall(SqlStdOperatorTable.AVG, distinct, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,786,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,791,return aggregateCall(SqlStdOperatorTable.MIN, false, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,792,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,797,return aggregateCall(SqlStdOperatorTable.MAX, false, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,798,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1954,private static class AggCallImpl implements AggCall {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1958,private final RexNode filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1959,private final String alias;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1960,private final ImmutableList<RexNode> operands;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1964,String alias, ImmutableList<RexNode> operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1965,this.aggFunction = aggFunction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1968,this.filter = filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1970,this.operands = operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,101,Expression selector =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,102,EnumUtils.joinSelector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,104,: JoinRelType.INNER, physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,105,ImmutableList.of(leftResult.physType, rightResult.physType));
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,654,assert table != null;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,107,starRelOptTable.toRel(RelOptUtil.getContext(cluster));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,23,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2803,public static RelOptTable.ToRelContext getContext(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2804,final RelOptCluster cluster) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2805,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2806,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2807,return cluster;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2810,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2811,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2812,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,31,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,52,class LixToRelTranslator implements RelOptTable.ToRelContext {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,63,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,64,return cluster;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,67,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,68,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,69,return preparingStmt.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,65,public class PlannerImpl implements Planner {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,237,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,251,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,252,SqlParser parser = SqlParser.create(queryString, parserConfig);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,253,SqlNode sqlNode;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,254,try {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,255,sqlNode = parser.parseQuery();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,257,throw new RuntimeException("parse failed", e);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,260,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,261,final CalciteCatalogReader catalogReader =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,262,createCatalogReader().withSchemaPath(schemaPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,263,final SqlValidator validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,264,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,265,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,266,validator.setIdentifierExpansion(true);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,269,final RexBuilder rexBuilder = createRexBuilder();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,270,final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,271,final SqlToRelConverter.Config config = SqlToRelConverter
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,276,.build();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,277,final SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,278,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,279,catalogReader, cluster, convertletTable, config);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,282,root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,285,return PlannerImpl.this.root;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,178,RelOptUtil.getContext(cluster);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,401,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,402,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/Prepare.java,403,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,102,return ((TranslatableTable) table).toRel(translator, relOptTable);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,28,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,141,relBuilder.push(aggregateRelOptTable.toRel(RelOptUtil.getContext(cluster)));
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,284,RelOptUtil.getContext(factRel.getCluster()));
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,22,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,56,RelOptUtil.getContext(oldRel.getCluster()));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,121,private RelRoot expandView(RelOptTable.ToRelContext preparingStmt,
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,124,RelRoot root = preparingStmt.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,126,root = root.withRel(RelOptUtil.createCastRel(root.rel, rowType, true));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,127,return root;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,107,import java.util.ArrayDeque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,111,import java.util.Deque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2659,final Deque<RelNode> stack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3201,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3202,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3203,return cluster;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3207,RelDataType rowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3208,String queryString,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3209,List<String> schemaPath,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3210,List<String> viewPath) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3211,return viewExpander.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,638,final SqlCall aggFunctionCall =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,639,rexOver.getAggOperator().createCall(POS, nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,642,sqlWindow);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,723,SqlOperator op = aggCall.getAggregation();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,724,if (op instanceof SqlSumEmptyIsZeroAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,725,op = SqlStdOperatorTable.SUM;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,727,final List<SqlNode> operands = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,729,operands.add(field(arg));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,731,return op.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,732,aggCall.isDistinct() ? SqlSelectKeyword.DISTINCT.symbol(POS) : null,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,884,if (s.equals("(")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,885,throw new RuntimeException("Use 'startList'");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,887,if (s.equals(")")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,888,throw new RuntimeException("Use 'endList'");
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,119,final ImmutableList<ImmutableBitSet> newGroupSets =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,120,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,121,Iterables.transform(aggregate.getGroupSets(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,283,.aggregate(relBuilder.groupKey(belowAggregateKey, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,157,relBuilder.aggregate(relBuilder.groupKey(newGroupSet, null), newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,131,relBuilder.aggregate(relBuilder.groupKey(topAggRel.getGroupSet(), null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,128,relBuilder.aggregate(relBuilder.groupKey(aggRel.getGroupSet(), null),
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,110,relBuilder.aggregate(relBuilder.groupKey(groupSet, null),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,700,return groupKey_(groupSet, false, groupSets);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,707,return groupKey_(groupSet, indicator, groupSets);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,711,ImmutableList<ImmutableBitSet> groupSets) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,715,if (groupSets == null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,716,groupSets = ImmutableList.of(groupSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,721,Lists.transform(groupSets,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,727,return groupKey(nodes, indicator, nodeLists);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,90,public final ImmutableList<Node> nodes;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,98,public final ImmutableList<String> uniqueColumnNames;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,115,private Lattice(CalciteSchema rootSchema, ImmutableList<Node> nodes,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,118,Double rowCountEstimate, ImmutableList<Column> columns,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,119,ImmutableList<Measure> defaultMeasures, ImmutableList<Tile> tiles) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,131,for (int i = 0; i < nodes.size(); i++) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,132,Node node = nodes.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,133,if (i == 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,134,assert node.parent == null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,136,assert nodes.subList(0, i).contains(node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,144,uniqueColumnNames =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,145,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,164,String current) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,248,final List<Node> usedNodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,260,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,263,use(usedNodes, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,266,if (usedNodes.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,267,usedNodes.add(nodes.get(0));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,270,usedNodes.addAll(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,285,dialect.quoteIdentifier(buf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,286,dialect.quoteIdentifier(groupBuf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,287,final String fieldName = uniqueColumnNames.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,288,columnNames.add(fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,289,if (!column.alias.equals(fieldName)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,291,dialect.quoteIdentifier(buf, fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,294,if (groupSet.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,295,groupBuf.append("()");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,312,dialect.quoteIdentifier(buf, arg.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,326,for (Node node : usedNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,327,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,330,dialect.quoteIdentifier(buf, node.scan.getTable().getQualifiedName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,333,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,336,for (IntPair pair : node.link) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,340,final Column left = columns.get(node.parent.startCol + pair.source);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,341,dialect.quoteIdentifier(buf, left.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,344,dialect.quoteIdentifier(buf, right.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,366,private static void use(List<Node> usedNodes, Node node) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,367,if (!usedNodes.contains(node)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,368,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,369,use(usedNodes, node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,371,usedNodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,377,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,378,tables.add(node.scan.getTable().unwrap(Table.class));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,384,return new Builder(calciteSchema, sql);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,447,public static class Node {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,448,public final TableScan scan;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,449,public final Node parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,450,public final ImmutableList<IntPair> link;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,451,public final int startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,452,public final int endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,453,public final String alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,455,public Node(TableScan scan, Node parent, List<IntPair> link,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,456,int startCol, int endCol, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,458,this.parent = parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,459,this.link = link == null ? null : ImmutableList.copyOf(link);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,460,assert (parent == null) == (link == null);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,461,assert startCol >= 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,462,assert endCol > startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,463,this.startCol = startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,464,this.endCol = endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,465,this.alias = alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,471,public static final DirectedGraph.EdgeFactory<RelNode, Edge> FACTORY =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,480,Edge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,484,public RelNode getTarget() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,485,return (RelNode) target;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,488,public RelNode getSource() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,489,return (RelNode) source;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,498,public Measure(SqlAggFunction agg, Iterable<Column> args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,503,public int compareTo(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,504,int c = agg.getName().compareTo(measure.agg.getName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,505,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,506,return c;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,508,return compare(args, measure.args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,512,return "Measure: [agg: " + agg + ", args: " + args + "]";
core/src/main/java/org/apache/calcite/materialize/Lattice.java,523,&& this.args.equals(((Measure) obj).args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,557,public static class Column implements Comparable<Column> {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,559,public final String table;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,560,public final String column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,563,private Column(int ordinal, String table, String column, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,605,private final ImmutableList<Column> columns;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,607,private final ImmutableList.Builder<Measure> defaultMeasureListBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,608,ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,618,public Builder(CalciteSchema schema, String sql) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,635,final DirectedGraph<RelNode, Edge> graph =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,637,for (RelNode node : relNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,638,graph.addVertex(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,641,final RelNode source = relNodes.get(tempLink[0][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,642,final RelNode target = relNodes.get(tempLink[1][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,652,Node previous = null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,654,int previousColumn = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,655,for (RelNode relNode : TopologicalOrderIterator.of(graph)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,656,final List<Edge> edges = graph.getInwardEdges(relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,657,Node node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,658,final int column = previousColumn
core/src/main/java/org/apache/calcite/materialize/Lattice.java,659,+ relNode.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,660,if (previous == null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,663,+ relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,665,node = new Node((TableScan) relNode, null, null,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,666,previousColumn, column, aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,673,node = new Node((TableScan) relNode,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,674,map.get(edge.getSource()), edge.pairs, previousColumn, column,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,675,aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,677,nodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,678,map.put(relNode, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,679,previous = node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,680,previousColumn = column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,683,final ImmutableList.Builder<Column> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,684,final ImmutableListMultimap.Builder<String, Column> aliasBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,685,ImmutableListMultimap.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,686,int c = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,687,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,688,if (node.scan != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,689,for (String name : node.scan.getRowType().getFieldNames()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,690,final Column column = new Column(c++, node.alias, name, name);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,691,builder.add(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,692,aliasBuilder.put(column.alias, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,696,columns = builder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,697,columnsByAlias = aliasBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,741,return new Lattice(rootSchema, ImmutableList.copyOf(nodes), auto,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,743,columns, defaultMeasureListBuilder.build(), tileListBuilder.build());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,750,public ImmutableList<Column> resolveArgs(Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,816,for (Column column1 : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,826,public Measure resolveMeasure(String aggName, Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,829,return new Measure(agg, list);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,843,public void addMeasure(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,844,defaultMeasureListBuilder.add(measure);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,495,latticeBuilder.resolveMeasure(jsonMeasure.agg, jsonMeasure.args);
core/src/main/java/org/apache/calcite/plan/RelOptLattice.java,43,return lattice.nodes.get(0).scan.getTable();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,70,private HepProgram mainProgram;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,78,private Map<String, HepRelVertex> mapDigestToVertex;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,80,private final Set<RelOptRule> allRules;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,88,private boolean noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,95,private DirectedGraph<HepRelVertex, DefaultEdge> graph;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,130,boolean noDAG,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,135,this.onCopyHook =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,137,mapDigestToVertex = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,138,graph = DefaultDirectedGraph.create();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,142,allRules = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,143,this.noDAG = noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,820,if (!noDAG) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,411,public abstract class Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,415,protected Context(int fieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,416,this(fieldCount, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,419,protected Context(int fieldCount, boolean ignoreCast) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,555,sqlSubQuery = visitChild(0, subQuery.rel).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,773,return new AliasContext(aliases, qualified);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,777,return new JoinContext(leftContext, rightContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,781,return new MatchRecognizeContext(((AliasContext) context).aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,788,protected MatchRecognizeContext(Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,789,super(aliases, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,805,public class AliasContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,810,protected AliasContext(Map<String, RelDataType> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,811,boolean qualified) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,812,super(computeFieldCount(aliases));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,841,class JoinContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,846,private JoinContext(Context leftContext, Context rightContext) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,847,super(leftContext.fieldCount + rightContext.fieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,928,newContext = new Context(selectList.size()) {
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,92,return typeFactory.createStructType(typeList, lattice.uniqueColumnNames);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,179,private SqlRexConvertletTable convertletTable =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,180,StandardConvertletTable.INSTANCE;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,181,private SqlOperatorTable operatorTable = SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,182,private ImmutableList<Program> programs = ImmutableList.of();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,185,private SqlParser.Config parserConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,186,SqlParser.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,187,private SqlToRelConverter.Config sqlToRelConverterConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,188,SqlToRelConverter.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,192,private RelDataTypeSystem typeSystem = RelDataTypeSystem.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,194,private ConfigBuilder() {}
core/src/main/java/org/apache/calcite/tools/Frameworks.java,199,defaultSchema, costFactory, typeSystem, executor);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,311,RexExecutor executor) {
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,38,final Map<V, VertexInfo<V, E>> vertexMap =
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,57,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,63,.append(")");
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,64,return buf.toString();
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,27,this.source = source;
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,28,this.target = target;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,909,if (constants.containsKey(inputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,910,stack.add(Constancy.REDUCIBLE_CONSTANT);
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,36,String s = left.toString();
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,40,s += " DESC";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,43,s += " NULLS FIRST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,46,s += " NULLS LAST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,52,return s;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,960,List<AggregateCall> aggCallList = rel.getAggCallList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,961,HashSet<Integer> aggregatesArgs = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,962,for (AggregateCall aggregateCall: aggCallList) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,963,aggregatesArgs.addAll(aggregateCall.getArgList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,965,for (Integer aggregatesArg : aggregatesArgs) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,966,SqlNode selectNode = ((SqlSelect) node).getSelectList().get(aggregatesArg);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,967,if (!(selectNode instanceof SqlBasicCall)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,968,continue;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,970,for (SqlNode operand : ((SqlBasicCall) selectNode).getOperands()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,971,if (operand instanceof SqlCall) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,972,final SqlOperator operator = ((SqlCall) operand).getOperator();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,973,if (operator instanceof SqlAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,974,return true;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,687,if (!(target instanceof RexCorrelVariable)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,688,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,691,if (correlates == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,692,throw new RuntimeException("Cannot translate " + expr + " since "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,693,+ "correlate variables resolver is not defined");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,695,InputGetter getter =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,696,correlates.apply(((RexCorrelVariable) target).getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,697,return getter.field(list, fieldAccess.getField().getIndex(), storageType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,787,RexCall cast = (RexCall) refExp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,788,refExp = cast.getOperands().get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,790,if (refExp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,791,return ((RexCall) refExp).operands
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,792,.get(fieldAccess.getField().getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,794,if (!(refExp instanceof RexFieldAccess)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,797,fieldAccess = (RexFieldAccess) refExp;
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,418,METADATA_REL(Metadata.class, "rel");
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,32,super(left, ImmutableSet.copyOf(right));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,244,&& Primitive.is(expression0.getType())) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,256,&& Primitive.is(expression0.getType())) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,124,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexCall.java,125,case NOT:
core/src/main/java/org/apache/calcite/rex/RexCall.java,126,return operands.get(0).isAlwaysFalse();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1399,assert !generateNullsOnLeft : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1400,assert !generateNullsOnRight : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3305,assert c < 0 : "not sorted";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3321,assert c < 0 : "not sorted";
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,510,final RexNode disjunction = RexUtil.composeDisjunction(rexBuilder, terms);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,512,return rexBuilder.makeCast(call.getType(), disjunction);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,514,return disjunction;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,177,implementor.allCorrelateVariables);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,81,(JavaTypeFactory) getCluster().getTypeFactory(), bb, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableThetaJoin.java,183,implementor.allCorrelateVariables)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,277,inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,426,getBlockBuilderWinAggFrameResultContextFunction(typeFactory, result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,427,translatedConstants, comparator_, rows_, i_, startX, endX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,428,minX, maxX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,526,final JavaTypeFactory typeFactory, final Result result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,527,final List<Expression> translatedConstants,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1646,translatedOperands.get(2));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,109,private RexToLixTranslator(RexProgram program, JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,110,Expression root, InputGetter inputGetter, BlockBuilder list) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,111,this(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,113,new RexBuilder(typeFactory));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,116,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,117,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,118,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,119,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,120,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,121,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,122,Map<RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,123,RexBuilder builder) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,124,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,125,builder, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,128,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,129,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,130,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,131,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,132,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,133,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,134,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,135,RexBuilder builder,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,136,RexToLixTranslator parent) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,137,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,138,builder, parent, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,141,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,142,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,151,this.program = program;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,152,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,153,this.root = root;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,155,this.list = list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,156,this.exprNullableMap = exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,157,this.builder = builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,158,this.parent = parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,159,this.correlates = correlates;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,177,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,178,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,179,PhysType outputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,180,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,181,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,182,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,198,BlockBuilder list, InputGetter inputGetter) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,200,return new RexToLixTranslator(null, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,910,public static Expression translateCondition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,911,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,912,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,913,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,914,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,915,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,921,new RexToLixTranslator(program, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1217,nullable, builder, this, correlates);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,102,RexToLixTranslator.translateProjects(program, javaTypeFactory, builder,
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,103,null, root, inputGetter, correlates);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,80,RexToLixTranslator.translateProjects(programBuilder.getProgram(),
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,81,javaTypeFactory, blockBuilder, null, root_, getter, null);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,205,return trim_(s, false, true, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,210,return trim_(s, true, false, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,214,public static String trim(boolean leading, boolean trailing, String seek,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,216,return trim_(s, leading, trailing, seek.charAt(0));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,220,private static String trim_(String s, boolean left, boolean right, char c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,227,if (s.charAt(j - 1) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,239,if (s.charAt(i) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1476,s = trim_(s, true, true, ' ');
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,278,String.class),
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,350,null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,53,this(method.getGenericReturnType(), method, targetExpression, expressions);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,690,RelDataType int8Type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,691,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,692,final RexNode[] casts = new RexNode[2];
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,693,casts[0] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,694,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,695,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,696,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,697,exprs.get(0).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,698,exprs.get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,699,casts[1] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,700,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,701,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,702,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,703,exprs.get(1).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,704,exprs.get(1));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,122,public static String substring(String s, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,123,return s.substring(from - 1, Math.min(from - 1 + for_, s.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,127,public static String substring(String s, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,128,return s.substring(from - 1);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,132,public static ByteString substring(ByteString b, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,133,return b.substring(from - 1, Math.min(from - 1 + for_, b.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,137,public static ByteString substring(ByteString b, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,138,return b.substring(from - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,540,subQuery = (RexSubQuery) rex;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,541,sqlSubQuery = visitChild(0, subQuery.rel).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,542,List<RexNode> operands = subQuery.operands;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,543,SqlNode op0;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,544,if (operands.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,545,op0 = toSql(program, operands.get(0));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,547,final List<SqlNode> cols = toSql(program, operands);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,548,op0 = new SqlNodeList(cols, POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,550,return subQuery.getOperator().createCall(POS, op0, sqlSubQuery);
core/src/main/java/org/apache/calcite/profile/Profiler.java,207,map.put("cardinality", cardinality);
core/src/main/java/org/apache/calcite/profile/Profiler.java,211,map.put("expectedCardinality", expectedCardinality);
core/src/main/java/org/apache/calcite/profile/Profiler.java,212,map.put("surprise", surprise());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2544,c1 = c2;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2545,p1 = p2;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,81,StringBuilder out, CharSequence ... args) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,129,+ new String(bytes, StandardCharsets.UTF_8));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,148,try (final JsonParser parser = factory.createParser(in)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,649,+ new String(bytes, StandardCharsets.UTF_8));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,671,boolean addFilter, int startIndex, RelNode filter, RelNode ... trailingNodes) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,216,String bigString = new String(chars);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,219,add(bigString.substring(0, i * 2));
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,104,final PrintWriter out =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,871,if ((sqlNode instanceof SqlCall) && containsInOperator(sqlNode)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,872,SqlCall sqlCall = (SqlCall) sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,874,|| (sqlCall.getOperator() == SqlStdOperatorTable.OR)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,875,SqlNode[] sqlOperands = ((SqlBasicCall) sqlCall).operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,876,for (int i = 0; i < sqlOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,877,sqlOperands[i] = pushDownNotForIn(scope, sqlOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,879,return reg(scope, sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,881,SqlNode childNode = sqlCall.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,882,assert childNode instanceof SqlCall;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,883,SqlBasicCall childSqlCall = (SqlBasicCall) childNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,884,if (childSqlCall.getOperator() == SqlStdOperatorTable.AND) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,885,SqlNode[] andOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,886,SqlNode[] orOperands = new SqlNode[andOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,887,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,888,orOperands[i] = reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,889,SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,890,andOperands[i]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,892,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,893,orOperands[i] = pushDownNotForIn(scope, orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,895,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,896,SqlStdOperatorTable.OR.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,897,orOperands[0], orOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,899,SqlNode[] orOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,900,SqlNode[] andOperands = new SqlNode[orOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,901,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,902,andOperands[i] = reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,903,SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,904,orOperands[i]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,906,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,907,andOperands[i] = pushDownNotForIn(scope, andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,909,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,910,SqlStdOperatorTable.AND.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,911,andOperands[0], andOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,913,SqlNode[] notOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,914,assert notOperands.length == 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,915,return pushDownNotForIn(scope, notOperands[0]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,917,SqlNode[] inOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,918,SqlInOperator inOp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,919,(SqlInOperator) childSqlCall.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,920,if (inOp.kind == SqlKind.NOT_IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,921,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,922,SqlStdOperatorTable.IN.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,923,inOperands[0], inOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,925,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,926,SqlStdOperatorTable.NOT_IN.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,927,inOperands[0], inOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,932,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,937,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,941,return sqlNode;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,280,ImmutableList.of(((RexCall) a).getOperands().get(0))));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,418,return al;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,183,case RPAREN:
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,184,iter.previous();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,185,return;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,188,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,572,purgeSelectExprsKeepAliases();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,38,UNION, INTERSECT, EXCEPT,
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,336,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,449,return new SqlAdvisor(validator);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,146,final List<SqlMoniker> result;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,147,if (word.length() > 0) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,148,result = new ArrayList<SqlMoniker>();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,149,if (quoted) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,151,word = word.substring(1);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,152,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,153,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,154,if (cname.startsWith(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,155,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,160,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,161,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,163,&& cname.substring(0, word.length()).equalsIgnoreCase(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,164,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,169,result = completionHints;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,220,if (hintList.contains(star) && !isSelectListItem(sqlNode, pos)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,241,final SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,110,&& (sql.charAt(wordStart - 1) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,128,&& (sql.charAt(wordEnd) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,334,SqlSimpleParser simpleParser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,401,SqlSimpleParser parser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,430,SqlParser parser = SqlParser.create("");
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,444,SqlParser parser = SqlParser.create(sql);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,134,Tokenizer tokenizer = new Tokenizer(sql, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,278,case '"':
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,281,start = pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,282,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,283,while (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,284,c = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,285,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,286,if (c == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,287,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,288,char c1 = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,289,if (c1 == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,292,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,294,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,297,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,301,match = sql.substring(start, pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,302,if (match.startsWith("\" " + hintToken + " ")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,303,return new Token(TokenType.ID, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,305,return new Token(TokenType.DQID, match);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,52,SqlMatchRecognize matchRecognize;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,217,public SqlMatchRecognize getMatchRecognize() {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,218,return matchRecognize;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,221,public void setMatchRecognize(SqlMatchRecognize matchRecognize) {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,222,this.matchRecognize = matchRecognize;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5569,SqlNode expandedExpr = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5575,&& !DynamicRecordType.isDynamicStarColName(Util.last(id.names))) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5576,SqlNode[] inputs = new SqlNode[2];
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5577,inputs[0] = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5578,inputs[1] = SqlLiteral.createCharString(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5579,Util.last(id.names),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5580,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5581,SqlBasicCall item_call = new SqlBasicCall(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5582,SqlStdOperatorTable.ITEM,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5583,inputs,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5584,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5585,expandedExpr = item_call;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5757,expr = getScope().fullyQualify((SqlIdentifier) expr).identifier;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,228,if (NUMERIC_TYPES.contains(typeName)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,45,import java.util.Locale;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,406,assert map.comparator() == NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,407,return map.subMap(s.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,408,s.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,414,assert set.comparator() == NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,415,return set.subSet(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,416,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMap.java,28,import static org.apache.calcite.util.NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMap.java,62,if (map.containsKey(name)) {
core/src/main/java/org/apache/calcite/util/NameMap.java,63,return ImmutableSortedMap.of(name, map.get(name));
core/src/main/java/org/apache/calcite/util/NameMap.java,65,return ImmutableSortedMap.of();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,21,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,29,import java.util.TreeMap;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,31,import static org.apache.calcite.util.NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,38,private final NavigableMap<String, List<V>> map;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,41,private NameMultimap(NavigableMap<String, List<V>> map) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,43,assert this.map.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,48,this(new TreeMap<String, List<V>>(COMPARATOR));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,66,final List<V> list = map.get(key);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,77,if (caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,78,final List<V> list = map.get(name);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,79,if (list != null && !list.isEmpty()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,80,final ImmutableList.Builder<Map.Entry<String, V>> builder =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,81,ImmutableList.builder();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,82,for (V v : list) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,83,builder.add(Pair.of(name, v));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,85,return builder.build();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,87,return ImmutableList.of();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,107,return !range(name, caseSensitive).isEmpty();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,113,return map;
core/src/main/java/org/apache/calcite/util/NameSet.java,19,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/util/NameSet.java,20,import com.google.common.collect.ImmutableSortedSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,25,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameSet.java,26,import java.util.NavigableSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,28,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,48,private final NavigableSet<String> names;
core/src/main/java/org/apache/calcite/util/NameSet.java,51,private NameSet(NavigableSet<String> names) {
core/src/main/java/org/apache/calcite/util/NameSet.java,53,assert names.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameSet.java,58,this(new TreeSet<>(COMPARATOR));
core/src/main/java/org/apache/calcite/util/NameSet.java,63,return new NameSet(ImmutableSortedSet.copyOf(NameSet.COMPARATOR, names));
core/src/main/java/org/apache/calcite/util/NameSet.java,67,names.add(name);
core/src/main/java/org/apache/calcite/util/NameSet.java,74,if (caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameSet.java,75,if (names.contains(name)) {
core/src/main/java/org/apache/calcite/util/NameSet.java,76,return ImmutableList.of(name);
core/src/main/java/org/apache/calcite/util/NameSet.java,78,return ImmutableList.of();
core/src/main/java/org/apache/calcite/util/NameSet.java,89,if (names.contains(name)) {
core/src/main/java/org/apache/calcite/util/NameSet.java,90,return true;
core/src/main/java/org/apache/calcite/util/NameSet.java,92,if (!caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameSet.java,97,return false;
core/src/main/java/org/apache/calcite/util/NameSet.java,102,return Collections.unmodifiableSet(names);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,293,RelNode newInput = getNewForOldRel(oldInput1);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,300,newOrdinal += calculateFlattenedOffset(oldInputType, oldOrdinal);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,301,return newOrdinal;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,518,programBuilder.addCondition(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,519,new RexLocalRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,520,getNewForOldInput(conditionRef.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,521,conditionRef.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,571,int newOffset = getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,582,RelDataTypeField field = fieldList.get(j);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,585,new RexInputRef(newOffset + j, field.getType()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,743,final int newIndex = getNewForOldInput(oldIndex);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,749,RelDataType fieldType = removeDistinct(input.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,750,RexInputRef newInput = new RexInputRef(newIndex, fieldType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,751,return newInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,765,RelDataType fieldType = removeDistinct(fieldAccess.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,776,iInput += getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,777,return new RexInputRef(iInput, fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,90,import java.util.Iterator;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1004,final List<String> names = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1005,final List<RexNode> exprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1006,final Iterator<String> nameIterator = fieldNames.iterator();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1007,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1008,if (simplify) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1009,node = simplifier.simplifyPreservingType(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1011,exprList.add(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1012,String name = nameIterator.hasNext() ? nameIterator.next() : null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1013,names.add(name != null ? name : inferAlias(exprList, node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1015,final Frame frame = stack.peek();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1022,for (int i = 0; i < names.size(); ++i) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1023,RexNode node = exprList.get(i);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1024,String name = names.get(i);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1034,names.set(i, name);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1051,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1052,if (!force && RexUtil.isIdentity(exprList, inputRowType)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1053,if (names.equals(inputRowType.getFieldNames())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1064,projectFactory.createProject(frame.rel, ImmutableList.copyOf(exprList),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1065,names);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1073,public RelBuilder project(RexNode... nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1074,return project(ImmutableList.copyOf(nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1114,project(fields(), newFieldNames, true);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1118,if (peek().getRowType().getFieldNames().equals(oldFieldNames)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1119,final RelNode r = peek();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1120,if (r instanceof Project) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1121,stack.pop();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1122,push(((Project) r).getInput());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1125,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1133,private String inferAlias(List<RexNode> exprList, RexNode expr) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1139,return inferAlias(exprList, ((RexCall) expr).getOperands().get(0));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1142,for (;;) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1143,final int i = exprList.indexOf(expr);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1144,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1145,break;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,77,final ObjectMapper mapper = new ObjectMapper();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,78,mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,79,mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,80,mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,83,root = mapper.readValue(
core/src/main/java/org/apache/calcite/model/ModelHandler.java,84,uri.substring("inline:".length()), JsonRoot.class);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,324,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,325,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,330,RexNode simplified = simplifyIsNotNull(a);
core/src/main/java/org/apache/calcite/util/Sources.java,53,URL url_ = new URL(url);
core/src/main/java/org/apache/calcite/util/Sources.java,54,return new FileSource(url_);
core/src/main/java/org/apache/calcite/util/Sources.java,80,if (url.getProtocol().equals("file")) {
core/src/main/java/org/apache/calcite/util/Sources.java,81,this.file = new File(url.getFile());
core/src/main/java/org/apache/calcite/util/Sources.java,83,this.file = null;
core/src/main/java/org/apache/calcite/util/Sources.java,115,return file != null ? file.getPath() : url.toExternalForm();
core/src/main/java/org/apache/calcite/util/Sources.java,153,String path;
core/src/main/java/org/apache/calcite/util/Sources.java,155,path = child.file().getPath();
core/src/main/java/org/apache/calcite/util/Sources.java,160,path = child.url().getPath();
core/src/main/java/org/apache/calcite/util/Sources.java,161,if (path.startsWith("/")) {
core/src/main/java/org/apache/calcite/util/Sources.java,162,return child;
core/src/main/java/org/apache/calcite/util/Sources.java,166,return Sources.url(url + "/" + path);
file/src/main/java/org/apache/calcite/adapter/file/FileReader.java,68,doc = Jsoup.connect(source.path()).get();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,566,if (terms.containsAll(terms2)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,75,int windowCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,178,final int w = implementor.windowCount++;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,180,Expressions.parameter(int.class, builder.newName("prevStart" + w));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,182,Expressions.parameter(int.class, builder.newName("prevEnd" + w));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,124,if (variables.contains(declaration.parameter.name)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,125,Expression x = append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,126,newName(declaration.parameter.name, optimize),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,127,declaration.initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,136,add(statement);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,240,return (decl.modifiers & Modifier.FINAL) != 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,343,final SubstituteVariableVisitor visitor = new SubstituteVariableVisitor(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,496,private final Map<ParameterExpression, Expression> map;
core/src/main/java/org/apache/calcite/util/NameMap.java,23,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameMap.java,68,return map.subMap(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameMap.java,69,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,26,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,90,final ImmutableList.Builder<Map.Entry<String, V>> builder =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,91,ImmutableList.builder();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,92,NavigableMap<String, List<V>> m =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,93,map.subMap(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameMultimap.java,94,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,95,for (Map.Entry<String, List<V>> entry : m.entrySet()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,96,for (V v : entry.getValue()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,97,builder.add(Pair.of(entry.getKey(), v));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,100,return builder.build();
core/src/main/java/org/apache/calcite/util/NameSet.java,81,return names.subSet(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameSet.java,82,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameSet.java,93,final String s = names.ceiling(name.toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/util/NameSet.java,94,return s != null
core/src/main/java/org/apache/calcite/util/NameSet.java,95,&& s.equalsIgnoreCase(name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,131,if (SqlKind.AVG_AGG_FUNCTIONS.contains(kind)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,264,int argOrdinal) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,268,oldCall.filterArg >= 0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,273,oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,428,final int argRefOrdinal = lookupOrAdd(inputExprs, argRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,436,argSquared.getType(), oldAggRel, oldCall, argSquaredOrdinal);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1052,LAST_VALUE, COVAR_POP, COVAR_SAMP, REGR_SXX, REGR_SYY,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,49,SqlValidator.STRICT
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,50,? OperandTypes.ANY
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,51,: OperandTypes.ONE_OR_MORE,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,52,SqlFunctionCategory.NUMERIC, false, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,46,ReturnTypes.COVAR_FUNCTION,
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,52,Preconditions.checkArgument(kind == SqlKind.COVAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,53,|| kind == SqlKind.COVAR_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,54,|| kind == SqlKind.REGR_SXX
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,55,|| kind == SqlKind.REGR_SYY);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,441,exprList.add(cx.convertExpression(whenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,442,exprList.add(cx.convertExpression(thenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,444,exprList.add(cx.convertExpression(call.getElseOperand()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,446,RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,574,RelDataType type = dataType.deriveType(typeFactory);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1201,if (!sumRex.getType().equals(avgType)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1202,sumCast = SqlStdOperatorTable.CAST.createCall(pos,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1203,new SqlDataTypeSpec(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1204,new SqlIdentifier(avgType.getSqlTypeName().getName(), pos),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1205,avgType.getPrecision(), avgType.getScale(), null, null, pos));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1207,sumCast = sum;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1242,final RexNode argRex = cx.convertExpression(argInput);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1243,final SqlNode arg;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1244,if (!argRex.getType().equals(varType)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1245,arg = SqlStdOperatorTable.CAST.createCall(pos,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1246,new SqlDataTypeSpec(new SqlIdentifier(varType.getSqlTypeName().getName(), pos),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1247,varType.getPrecision(), varType.getScale(), null, null, pos));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1249,arg = argInput;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1252,final SqlNode argSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1253,SqlStdOperatorTable.MULTIPLY.createCall(pos, arg, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1254,final SqlNode sumArgSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1255,SqlStdOperatorTable.SUM.createCall(pos, argSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1256,final SqlNode sum =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1257,SqlStdOperatorTable.SUM.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1259,SqlStdOperatorTable.MULTIPLY.createCall(pos, sum, sum);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1260,final SqlNode count =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1261,SqlStdOperatorTable.COUNT.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1263,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1264,pos, sumSquared, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1266,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1267,pos, sumArgSquared, avgSumSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1270,denominator = count;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1272,final SqlNumericLiteral one =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1273,SqlLiteral.createExactNumeric("1", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1274,denominator =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1275,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1276,pos, count, one);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1279,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1280,pos, diff, denominator);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1283,final SqlNumericLiteral half =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1284,SqlLiteral.createExactNumeric("0.5", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1285,result =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1286,SqlStdOperatorTable.POWER.createCall(pos, div, half);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1199,SqlNode sqlNode1 = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1205,sqlToRelConverter.convertQuery(sqlNode1, true, false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,267,final SqlNode validatedSqlNode = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,281,root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,496,throw new AssertionError("invalid literal: " + node);
core/src/main/java/org/apache/calcite/sql/fun/SqlMonotonicBinaryOperator.java,76,switch (call.getOperandLiteralValue(1, BigDecimal.class).signum()) {
core/src/main/java/org/apache/calcite/sql/fun/SqlMonotonicBinaryOperator.java,103,switch (call.getOperandLiteralValue(0, BigDecimal.class).signum()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,790,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,791,hintList.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,792,new SqlMonikerImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,793,field.getName(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,794,SqlMonikerType.COLUMN));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,444,RexFieldAccess access = (RexFieldAccess) rex;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,445,final RexCorrelVariable variable =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,446,(RexCorrelVariable) access.getReferenceExpr();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,447,final Context aliasContext = correlTableMap.get(variable.id);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,448,return aliasContext.field(access.getField().getIndex());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,32,import java.io.IOException;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,34,import java.io.Writer;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,52,private static final File SRC_DIR = new File("/tmp");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,109,final File file = new File(SRC_DIR, className + ".java");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,110,try (Writer w = Util.printWriter(file)) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,111,String source = "public class " + className + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,114,+ " {\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,115,+ s + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,116,+ "}\n";
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,118,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,119,System.out.println(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,120,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,122,w.write(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,123,w.close();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,124,JaninoCompiler compiler = new JaninoCompiler();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,125,compiler.getArgs().setDestdir(CLASS_DIR.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,126,compiler.getArgs().setSource(source, file.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,127,compiler.getArgs().setFullClassName(className);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,128,compiler.compile();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,37,import net.hydromatic.tpcds.TpcdsColumn;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,38,import net.hydromatic.tpcds.TpcdsEntity;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,39,import net.hydromatic.tpcds.TpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,41,import java.sql.Date;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,51,private final int part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,52,private final int partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,86,this.part = part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,87,this.partCount = partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,90,for (TpcdsTable<?> tpcdsTable : TpcdsTable.getTables()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,92,builder.put(tpcdsTable.getTableName().toUpperCase(Locale.ROOT),
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,105,private class TpcdsQueryableTable<E extends TpcdsEntity>
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,107,private final TpcdsTable<E> tpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,109,TpcdsQueryableTable(TpcdsTable<E> tpcdsTable) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,116,Integer rowCount = TABLE_ROW_COUNTS.get(tpcdsTable.name);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,117,assert rowCount != null : tpcdsTable.name;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,127,final Enumerator<E> iterator =
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,128,Linq4j.iterableEnumerator(
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,129,tpcdsTable.createGenerator(scaleFactor, part, partCount));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,130,return new Enumerator<Object[]>() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,131,public Object[] current() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,132,final List<TpcdsColumn<E>> columns = tpcdsTable.getColumns();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,133,final Object[] objects = new Object[columns.size()];
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,134,int i = 0;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,135,for (TpcdsColumn<E> column : columns) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,136,objects[i++] = value(column, iterator.current());
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,138,return objects;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,141,private Object value(TpcdsColumn<E> tpcdsColumn, E current) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,142,final Class<?> type = realType(tpcdsColumn);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,143,if (type == String.class) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,144,return tpcdsColumn.getString(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,146,return tpcdsColumn.getDouble(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,148,return Date.valueOf(tpcdsColumn.getString(current));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,150,return tpcdsColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,154,public boolean moveNext() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,155,return iterator.moveNext();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,158,public void reset() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,159,iterator.reset();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,162,public void close() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,171,for (TpcdsColumn<E> column : tpcdsTable.getColumns()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,172,builder.add(column.getColumnName().toUpperCase(Locale.ROOT),
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,173,typeFactory.createJavaType(realType(column)));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,178,private Class<?> realType(TpcdsColumn<E> column) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,179,if (column.getColumnName().endsWith("date")) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,180,return Date.class;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,182,return column.getType();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,39,Map map = (Map) operand;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,41,int part = Util.first((Integer) map.get("part"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,42,int partCount = Util.first((Integer) map.get("partCount"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,43,boolean columnPrefix = Util.first((Boolean) map.get("columnPrefix"), true);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,44,return new TpcdsSchema(scale, part, partCount);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,88,? this
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,96,? this
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampDiffFunction.java,23,import org.apache.calcite.sql.type.ReturnTypes;
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampDiffFunction.java,57,ReturnTypes.INTEGER_NULLABLE, null,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1382,multiply(rexBuilder,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1383,rexBuilder.makeIntervalLiteral(unit.multiplier,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1384,new SqlIntervalQualifier(unit, null,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1426,cx.getTypeFactory().createSqlType(SqlTypeName.INTEGER),
core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java,193,format = "%Y-%m-%d %k:00:00";
core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java,196,format = "%Y-%m-%d %k:%i:00";
core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java,199,format = "%Y-%m-%d %k:%i:%s";
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,237,getOperator().unparse(writer, this, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,240,getOperator().unparse(writer, this, leftPrec, rightPrec);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,41,import org.apache.calcite.runtime.PredicateImpl;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,46,import com.google.common.base.Predicate;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,47,import com.google.common.base.Predicates;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,98,this(clazz, Predicates.<RelNode>alwaysTrue(), description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,116,new PredicateImpl<LogicalFilter>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,117,public boolean test(LogicalFilter input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,120,return RelOptUtil.disjunctions(input.getCondition()).size() == 1;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,271,private static final Predicate<Sort> SORT_PREDICATE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,272,new PredicateImpl<Sort>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,273,public boolean test(Sort input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,275,return input.offset == null && input.fetch == null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,278,private static final Predicate<CassandraFilter> FILTER_PREDICATE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,279,new PredicateImpl<CassandraFilter>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,280,public boolean test(CassandraFilter input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,282,return input.isSinglePartition();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,287,operand(CassandraFilter.class, null, FILTER_PREDICATE, any()));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,292,super(operand(Sort.class, null, SORT_PREDICATE, CASSANDRA_OP), "CassandraSortRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,22,import org.apache.calcite.rel.RelNode;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,53,import com.google.common.base.Function;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,116,this.hook = Hook.TRIMMED.add(new Function<RelNode, Void>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,117,public Void apply(RelNode node) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,118,CassandraSchema.this.addMaterializedViews();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,119,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,180,List<String> pKeyFields = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,186,List<String> cKeyFields = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,191,return Pair.of((List<String>) ImmutableList.copyOf(pKeyFields),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,192,(List<String>) ImmutableList.copyOf(cKeyFields));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,208,List<RelFieldCollation> keyCollations = new ArrayList<RelFieldCollation>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,240,List<String> columnNames = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,46,import java.util.Collections;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,100,return query(session, Collections.<Map.Entry<String, Class>>emptyList(),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,101,Collections.<Map.Entry<String, String>>emptyList(),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,102,Collections.<String>emptyList(), Collections.<String>emptyList(), 0, -1);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,121,Function1<String, Void> addField = new Function1<String, Void>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,122,public Void apply(String fieldName) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,123,SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,124,fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,125,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,146,selectString = Util.toString(new Iterable<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,147,public Iterator<String> iterator() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,148,final Iterator<Map.Entry<String, String>> selectIterator =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,149,selectFields.iterator();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,151,return new Iterator<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,153,return selectIterator.hasNext();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,157,Map.Entry<String, String> entry = selectIterator.next();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,158,return entry.getKey() + " AS " + entry.getValue();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,162,throw new UnsupportedOperationException();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,42,import com.google.common.base.Function;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,147,return Lists.transform(values,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,148,new Function<T, Expression>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,149,public Expression apply(T a0) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,150,return Expressions.constant(a0);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,26,import com.google.common.base.Predicates;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,43,super(RelNode.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,75,final List<ImmutableBitSet> keys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,283,return list.toArray(new Comparable[list.size()]);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,819,: ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,88,ImmutableList.<RelCollation>of(), null, queryable);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,96,return createCloneTable(typeFactory, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,97,ImmutableList.<RelCollation>of(), repList, source);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,118,Suppliers.memoize(
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,119,new Supplier<ArrayTable.Content>() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,120,public ArrayTable.Content get() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,121,final ColumnLoader loader =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,122,new ColumnLoader<>(typeFactory, source, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,123,repList);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,124,final List<RelCollation> collation2 =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,126,&& loader.sortField >= 0
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,128,: collations;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,129,return new ArrayTable.Content(loader.representationValues,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,130,loader.size(), collation2);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,56,private static final Function<Timestamp, Long> TIMESTAMP_TO_LONG =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,57,new Function<Timestamp, Long>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,58,public Long apply(Timestamp a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,59,return a0 == null ? null : a0.getTime();
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,63,private static final Function<Time, Integer> TIME_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,64,new Function<Time, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,65,public Integer apply(Time a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,66,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,67,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,68,: (int) (a0.getTime() % DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,72,private static final Function<Date, Integer> DATE_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,73,new Function<Date, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,74,public Integer apply(Date a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,75,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,76,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,77,: (int) (a0.getTime() / DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,267,return Lists.transform(list, TIMESTAMP_TO_LONG);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,274,return Lists.transform(list, TIME_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,281,return Lists.transform(list, DATE_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,32,import org.apache.calcite.util.ImmutableBitSet;
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,67,return Statistics.of(list.size(), ImmutableList.<ImmutableBitSet>of());
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTableScan.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTableScan.java,57,this.elasticsearchTable = Preconditions.checkNotNull(elasticsearchTable);
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,43,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,48,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,114,return Lists.transform(values,
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,115,new Function<T, Expression>() {
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,118,return Expressions.constant(t);
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,26,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,43,super(RelNode.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,52,private static final Function<RexNode, Type> REX_TO_INTERNAL_TYPE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,53,new Function<RexNode, Type>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,54,public Type apply(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,55,return toInternal(node.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,236,return Lists.transform(operandList, REX_TO_INTERNAL_TYPE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,51,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,371,final List<Expression> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,38,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,74,return new Node() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,75,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,76,final Sink sink =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,77,implementor.relSinks.get(EnumerableBindable.this).get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,78,final Enumerable<Object[]> enumerable = bind(implementor.dataContext);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,79,final Enumerator<Object[]> enumerator = enumerable.enumerator();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,80,while (enumerator.moveNext()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,81,sink.send(Row.asCopy(enumerator.current()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,101,super(EnumerableRel.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,35,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,50,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,98,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,99,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,100,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,104,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,105,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,106,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,34,super(LogicalCalc.class, RelOptUtil.CALC_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,35,EnumerableConvention.INSTANCE, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,26,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,38,super(LogicalCorrelate.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,23,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,32,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,34,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,62,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,63,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,64,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,68,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,69,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,70,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,32,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,33,EnumerableConvention.INSTANCE, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,25,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,42,super(RelNode.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,25,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,27,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,40,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,74,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,75,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,76,return RelMdCollation.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,80,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,81,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,82,return RelMdDistribution.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,99,leftKeys, rightKeys, ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,64,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,65,final List<RelCollation> collations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,71,final List<RelFieldCollation> fieldCollations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,31,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,76,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,77,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,78,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,32,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,33,EnumerableConvention.INSTANCE, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,23,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,24,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,25,import org.apache.calcite.rex.RexUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,26,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,28,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,37,RelFactories.FilterFactory FILTER_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,38,new RelFactories.FilterFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,39,public RelNode createFilter(RelNode child, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,40,return EnumerableFilter.create(child, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,44,RelFactories.ProjectFactory PROJECT_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,45,new RelFactories.ProjectFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,46,public RelNode createProject(RelNode child,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,47,List<? extends RexNode> projects, List<String> fieldNames) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,48,final RelOptCluster cluster = child.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,49,final RelDataType rowType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,50,RexUtil.createStructType(cluster.getTypeFactory(), projects,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,51,fieldNames, SqlValidatorUtil.F_SUGGESTER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,52,return EnumerableProject.create(child, projects, rowType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,45,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,49,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,72,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,74,Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,78,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,79,public RexToLixTranslator.InputGetter apply(String name) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,80,return getCorrelVariableGetter(name);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,142,new Function<ParameterExpression, Statement>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,143,public Statement apply(ParameterExpression input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,144,return Expressions.declare(Modifier.FINAL, input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,145,Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,146,Expressions.call(DataContext.ROOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,147,BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,148,Expressions.constant(input.name)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,149,input.type));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,173,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,180,Collections.<Type>singletonList(Bindable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,191,ImmutableList.<Type>of(Serializable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,305,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,403,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,458,corrVars.put(name, new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,459,public Expression field(BlockBuilder list, int index, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,460,Expression fieldReference =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,461,physType.fieldReference(pe, index, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,462,return corrBlock.append(name + "_" + index, fieldReference);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,27,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,45,super(LogicalTableFunctionScan.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,27,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,40,super(LogicalTableModify.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,34,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,48,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,79,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,80,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,81,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,82,if (table != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,83,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,85,return ImmutableList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,29,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,48,super(LogicalTableScan.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,119,inputTypes.toArray(new FlatProductInputType[inputTypes.size()])));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,26,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,28,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,41,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,65,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,66,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,67,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,71,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,72,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,73,return RelMdDistribution.values(rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,25,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,38,super(LogicalValues.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,56,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,432,final Function<AggImpState, List<RexNode>> rexArguments =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,433,new Function<AggImpState, List<RexNode>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,434,public List<RexNode> apply(AggImpState agg) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,435,List<Integer> argList = agg.call.getArgList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,436,List<RelDataType> inputTypes =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,437,EnumUtils.fieldRowTypes(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,438,result.physType.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,439,constants,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,440,argList);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,441,List<RexNode> args = new ArrayList<RexNode>(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,442,inputTypes.size());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,443,for (int i = 0; i < argList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,444,Integer idx = argList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,445,args.add(new RexInputRef(idx, inputTypes.get(i)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,447,return args;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,536,return new Function<BlockBuilder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,537,WinAggFrameResultContext>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,538,public WinAggFrameResultContext apply(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,539,final BlockBuilder block) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,540,return new WinAggFrameResultContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,541,public RexToLixTranslator rowTranslator(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,542,Expression row =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,543,getRow(rowIndex);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,544,final RexToLixTranslator.InputGetter inputGetter =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,545,new WindowRelInputGetter(row, inputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,546,result.physType.getRowType().getFieldCount(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,547,translatedConstants);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,549,return RexToLixTranslator.forAggregation(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,550,block, inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,553,public Expression computeIndex(Expression offset,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,554,WinAggImplementor.SeekType seekType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,555,Expression index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,556,if (seekType == WinAggImplementor.SeekType.AGG_INDEX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,557,index = jDecl.parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,559,index = i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,561,index = startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,563,index = endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,565,throw new IllegalArgumentException("SeekSet " + seekType
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,566,+ " is not supported");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,568,if (!Expressions.constant(0).equals(offset)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,569,index = block.append("idx", Expressions.add(index, offset));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,571,return index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,574,private Expression checkBounds(Expression rowIndex,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,575,Expression minIndex, Expression maxIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,576,if (rowIndex == i_ || rowIndex == startX || rowIndex == endX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,578,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,582,Expression res = block.append("rowInFrame",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,583,Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,584,ImmutableList.of(hasRows,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,585,Expressions.greaterThanOrEqual(rowIndex, minIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,586,Expressions.lessThanOrEqual(rowIndex, maxIndex))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,588,return res;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,591,public Expression rowInFrame(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,592,return checkBounds(rowIndex, startX, endX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,595,public Expression rowInPartition(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,596,return checkBounds(rowIndex, minX, maxX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,599,public Expression compareRows(Expression a, Expression b) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,600,return Expressions.call(comparator_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,601,BuiltInMethod.COMPARATOR_COMPARE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,602,getRow(a), getRow(b));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,605,public Expression getRow(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,606,return block.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,608,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,609,Expressions.arrayIndex(rows_, rowIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,610,inputPhysType.getJavaRowType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,613,public Expression index() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,614,return i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,617,public Expression startIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,618,return startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,621,public Expression endIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,622,return endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,625,public Expression hasRows() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,626,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,629,public Expression getFrameRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,630,return frameRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,633,public Expression getPartitionRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,634,return partitionRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,55,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,66,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,49,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,176,final List<Expression> expressions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,213,return Pair.of(parameter.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,214,Collections.<Expression>singletonList(parameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,265,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,266,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,335,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,369,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,370,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,371,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,372,Comparator.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,373,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,436,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,471,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,60,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,62,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,219,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,221,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,315,map.put(PI, new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,317,RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,318,return Expressions.constant(Math.PI);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,375,map.put(DEFAULT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,376,new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,377,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,378,RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,379,return Expressions.constant(null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,443,return new Supplier<T>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,444,public T get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,445,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,446,return constructor.newInstance();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,448,| InvocationTargetException e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,449,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,489,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,490,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,491,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,492,return implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,493,translator, call, nullAs, nullPolicy, harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,494,implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,510,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,511,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,512,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,513,assert call.getOperator() == AND
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,514,: "AND null semantics is supported only for AND operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,515,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,516,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,517,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,518,case NOT_POSSIBLE: // Just foldAnd
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,519,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,522,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,525,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,526,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,527,return Expressions.foldAnd(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,528,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,529,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,530,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,531,final List<Expression> nullAsTrue =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,532,translator.translateList(call2.getOperands(), NullAs.TRUE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,533,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,534,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,535,Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,536,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,537,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,538,Expressions.condition(hasFalse, BOXED_FALSE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,539,Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,540,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,541,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,542,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,555,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,556,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,557,RexToLixTranslator translator, RexCall call, final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,558,assert call.getOperator() == OR
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,559,: "OR null semantics is supported only for OR operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,560,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,561,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,562,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,563,case NOT_POSSIBLE: // Just foldOr
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,564,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,567,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,570,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,571,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,572,return Expressions.foldOr(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,573,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,574,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,575,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,576,final List<Expression> nullAsFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,577,translator.translateList(call2.getOperands(), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,578,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,579,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,580,Expression hasTrue = Expressions.foldOr(nullAsFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,581,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,582,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,583,Expressions.condition(hasTrue, BOXED_TRUE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,584,Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,585,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,586,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,587,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,622,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,623,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,624,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,625,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,626,return implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,627,translator, call2, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1322,return Collections.<Type>singletonList(afi.accumulatorType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1324,return Arrays.<Type>asList(afi.accumulatorType, afi.declaringClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,78,Util.<Method, SqlOperator>mapOf(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,112,Collections.<RexNode, Boolean>emptyMap(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1225,block, ImmutableMap.<RexNode, Boolean>of(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1234,Collections.<RexNode, Boolean>emptyMap(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggAddContextImpl.java,27,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,26,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,89,return ImmutableList.<RelOptRule>of(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,41,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,92,this.dataSource = Preconditions.checkNotNull(dataSource);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,93,this.dialect = Preconditions.checkNotNull(dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,38,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,57,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,58,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,93,this.jdbcTableType = Preconditions.checkNotNull(jdbcTableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,124,return Lists.transform(rowType.getFieldList(),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,125,new Function<RelDataTypeField, Pair<ColumnMetaData.Rep, Integer>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,126,public Pair<ColumnMetaData.Rep, Integer> apply(RelDataTypeField f) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,127,final RelDataType type = f.getType();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,128,final Class clazz = (Class) typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,129,final ColumnMetaData.Rep rep =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,130,Util.first(ColumnMetaData.Rep.of(clazz),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,131,ColumnMetaData.Rep.OBJECT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,132,return Pair.of(rep, type.getSqlTypeName().getJdbcOrdinal());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,25,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,36,super(RelNode.class, Predicates.<RelNode>alwaysTrue(), out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,130,return new Function1<ResultSet, Function0<Object[]>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,131,public Function0<Object[]> apply(ResultSet resultSet) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,132,try {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,133,return new ObjectArrayRowBuilder(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,134,resultSet,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,135,Pair.left(list).toArray(new ColumnMetaData.Rep[list.size()]),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,136,Ints.toArray(Pair.right(list)));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,138,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,215,CacheBuilder.newBuilder().softValues().build(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,216,new CacheLoader<List<String>, BasicDataSource>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,218,BasicDataSource dataSource = new BasicDataSource();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,219,dataSource.setUrl(key.get(0));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,220,dataSource.setUsername(key.get(1));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,221,dataSource.setPassword(key.get(2));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,222,dataSource.setDriverClassName(key.get(3));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,223,return dataSource;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,98,tables.toArray(new SqlOperatorTable[tables.size()])));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,43,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,45,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,46,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,60,private final List<Grouping> groups = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,108,return new AccumulatorFactory() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,109,public Accumulator get() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,110,final Accumulator accumulator = factory.get();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,111,return new FilterAccumulator(accumulator, call.filterArg);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,116,return new AccumulatorFactory() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,117,public Accumulator get() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,118,return new CountAccumulator(call);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,304,private final Map<Row, AccumulatorList> accumulators = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,75,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,76,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,177,this.filters = Preconditions.checkNotNull(filters);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,178,this.projects = Preconditions.checkNotNull(projects);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,185,return create(cluster, relOptTable, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,196,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,197,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,198,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,199,if (table != null) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,200,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,202,return ImmutableList.of();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,271,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,272,BindableConvention.INSTANCE, relBuilderFactory, "BindableFilterRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,302,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,303,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,304,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,340,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,341,BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,397,super(Sort.class, Predicates.<RelNode>alwaysTrue(), Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,453,super(LogicalJoin.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,523,super(LogicalUnion.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,598,super(LogicalValues.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,676,super(LogicalAggregate.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,741,super(LogicalWindow.class, Predicates.<RelNode>alwaysTrue(),
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,23,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,40,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,43,public final Map<RelNode, List<Sink>> relSinks = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,49,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,84,this.dataContext = Preconditions.checkNotNull(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,269,this.enumerator = Preconditions.checkNotNull(enumerator);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,20,import org.apache.calcite.adapter.enumerable.PhysType;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,53,import java.lang.reflect.Type;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,88,Pair.<Expression, PhysType>of(
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,93,final Function1<String, RexToLixTranslator.InputGetter> correlates =
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,94,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,95,public RexToLixTranslator.InputGetter apply(String a0) {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,96,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,120,final List<MemberDeclaration> declarations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,148,ImmutableList.<Type>of(Scalar.class), declarations);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,59,rightList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,26,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,43,super(RelNode.class, Predicates.<RelNode>alwaysTrue(), Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,25,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,28,import java.util.Collections;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,71,final List<Row> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,75,Collections.sort(list, comparator());
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,92,new Function<RelFieldCollation, Comparator<Row>>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,93,public Comparator<Row> apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,94,return comparator(input);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,104,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,105,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,106,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,107,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,108,return RelFieldCollation.compare(c1, c2, nullComparison);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,112,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,113,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,114,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,115,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,116,return RelFieldCollation.compare(c2, c1, -nullComparison);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,23,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,147,rowEnumerable = queryable.select(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,148,new Function1<Object, Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,149,public Row apply(Object o) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,150,final Object[] values = new Object[fields.size()];
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,151,for (int i = 0; i < fields.size(); i++) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,152,Field field = fields.get(i);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,153,try {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,154,values[i] = field.get(o);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,156,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,159,return new Row(values);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,273,enumerable = enumerable.where(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,274,new Predicate1<Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,276,context.values = row.getValues();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,277,Boolean b = (Boolean) condition.execute(context);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,278,return b != null && b;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,22,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,46,final Set<Row> rows = rel.all ? null : Sets.<Row>newHashSet();
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,45,final List<RexNode> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,47,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,69,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,73,import java.sql.PreparedStatement;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,127,Preconditions.checkNotNull(rootSchema != null
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,164,return iface.cast(
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,165,new RelRunner() {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,166,public PreparedStatement prepare(RelNode rel) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,167,try {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,168,return prepareStatement_(CalcitePrepare.Query.of(rel),
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,169,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,170,getHoldability());
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,172,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,280,Map<String, Object> map = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,338,final Map<Integer, CalciteServerStatement> statementMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,472,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,507,return connection.createDataContext(ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,559,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,22,import org.apache.calcite.avatica.AvaticaParameter;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,40,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,44,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,63,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,101,return new Predicate1<T>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,102,public boolean apply(T v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,103,return regex.matcher(v1.getName()).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,113,return new Predicate1<String>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,114,public boolean apply(String v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,115,return regex.matcher(v1).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,193,return createResultSet(Collections.<String, Object>emptyMap(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,202,return createResultSet(Collections.<String, Object>emptyMap(), columns,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,214,ImmutableList.<AvaticaParameter>of(), internalParameters, null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,215,columns, cursorFactory, null, ImmutableList.<RelCollation>of(), -1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,271,typeFilter = new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,272,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,273,return typeList.contains(v1.tableType);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,280,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,281,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,282,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,283,return tables(schema, matcher(tableNamePattern));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,334,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,335,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,336,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,337,return tables(schema, tableNameMatcher);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,340,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,341,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,342,public Enumerable<MetaColumn> apply(MetaTable schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,343,return columns(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,388,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,389,new Function1<CalciteSchema, MetaSchema>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,390,public MetaSchema apply(CalciteSchema calciteSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,391,return new CalciteMetaSchema(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,392,calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,394,calciteSchema.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,397,.orderBy(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,398,new Function1<MetaSchema, Comparable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,399,public Comparable apply(MetaSchema metaSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,400,return (Comparable) FlatLists.of(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,401,Util.first(metaSchema.tableCatalog, ""),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,402,metaSchema.tableSchem);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,409,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,410,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,411,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,412,return tables(schema, Functions.<String>truePredicate1());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,420,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,421,new Function1<String, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,422,public MetaTable apply(String name) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,423,final Table table =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,424,schema.calciteSchema.getTable(name, true).getTable();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,425,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,426,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,427,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,428,name);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,435,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,436,new Function1<Map.Entry<String, Table>, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,437,public MetaTable apply(Map.Entry<String, Table> pair) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,438,final Table table = pair.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,439,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,440,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,441,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,442,pair.getKey());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,451,.where(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,452,new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,453,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,454,return matcher.apply(v1.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,496,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,497,new Function1<RelDataTypeField, MetaColumn>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,498,public MetaColumn apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,499,final int precision =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,504,: -1;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,505,return new MetaColumn(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,506,table.tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,507,table.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,508,table.tableName,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,509,field.getName(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,510,field.getType().getSqlTypeName().getJdbcOrdinal(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,511,field.getType().getFullTypeString(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,512,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,515,: null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,516,10,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,518,? DatabaseMetaData.columnNullable
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,519,: DatabaseMetaData.columnNoNulls,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,520,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,521,field.getIndex() + 1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,522,field.getType().isNullable() ? "YES" : "NO");
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,742,_createIterable(h, signature, ImmutableList.<TypedValue>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,760,.createDataContext(ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,793,this.calciteTable = Preconditions.checkNotNull(calciteTable);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,66,Function0<CalcitePrepare> DEFAULT_FACTORY =
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,67,new Function0<CalcitePrepare>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,68,public CalcitePrepare apply() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,69,return new CalcitePrepareImpl();
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,73,new ThreadLocal<Deque<Context>>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,75,return new ArrayDeque<>();
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,28,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,60,resultSink = new Handler.ResultSink() {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,61,public void toBeCompleted() {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,86,signature.rootSchema, ImmutableList.<RelCollation>of(), -1, null,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,83,this.tableMap = Preconditions.checkNotNull(tableMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,88,this.latticeMap = Preconditions.checkNotNull(latticeMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,93,this.subSchemaMap = Preconditions.checkNotNull(subSchemaMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,102,this.functionMap = Preconditions.checkNotNull(functionMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,103,this.functionNames = Preconditions.checkNotNull(functionNames);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,104,this.nullaryFunctionMap = Preconditions.checkNotNull(nullaryFunctionMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,158,return new TableEntryImpl(this, name, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,163,return add(tableName, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,499,this.schema = Preconditions.checkNotNull(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,500,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,516,this.sqls = Preconditions.checkNotNull(sqls);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,655,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,39,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,40,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,41,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,248,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,249,public RelDataType apply(RelDataTypeField a0) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,250,return toSql(typeFactory, a0.getType());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,370,this.syntheticType = Preconditions.checkNotNull(syntheticType);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,371,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,372,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,19,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,21,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,36,ImmutableMap.<String, Table>of(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,42,return meta.tables(catalog).selectMany(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,43,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,44,public Enumerable<MetaColumn> apply(MetaTable table) {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,45,return meta.columns(table);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,30,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,45,.build(
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,46,new CacheLoader<Lattice.Column, Double>() {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,47,public Double load(@Nonnull Lattice.Column key) throws Exception {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,48,return provider.cardinality(ImmutableList.of(key));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,55,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,60,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,62,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,75,private static final Function<Column, String> GET_ALIAS =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,76,new Function<Column, String>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,77,public String apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,78,return input.alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,82,private static final Function<Column, Integer> GET_ORDINAL =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,83,new Function<Column, Integer>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,84,public Integer apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,85,return input.ordinal;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,101,private final Function<Integer, Column> toColumnFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,102,new Function<Integer, Column>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,103,public Column apply(Integer input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,104,return columns.get(input);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,107,private final Function<AggregateCall, Measure> toMeasureFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,108,new Function<AggregateCall, Measure>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,109,public Measure apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,110,return new Measure(input.getAggregation(),
core/src/main/java/org/apache/calcite/materialize/Lattice.java,111,Lists.transform(input.getArgList(), toColumnFunction));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,121,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,122,this.columns = Preconditions.checkNotNull(columns);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,126,this.defaultMeasures = Preconditions.checkNotNull(defaultMeasures);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,127,this.tiles = Preconditions.checkNotNull(tiles);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,140,List<String> nameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,146,SqlValidatorUtil.uniquify(Lists.transform(columns, GET_ALIAS), true));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,155,Preconditions.checkNotNull(statisticProviderFactory.apply(this));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,277,final Set<String> columnNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,376,final List<Table> tables = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,388,return Lists.transform(aggCallList, toMeasureFunction);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,457,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,472,new DirectedGraph.EdgeFactory<RelNode, Edge>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,473,public Edge createEdge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,474,return new Edge(source, target);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,478,final List<IntPair> pairs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,499,this.agg = Preconditions.checkNotNull(agg);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,537,return Lists.transform(args, GET_ORDINAL);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,565,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,566,this.column = Preconditions.checkNotNull(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,567,this.alias = Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,604,private final List<Node> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,619,this.rootSchema = Preconditions.checkNotNull(schema.root());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,626,List<RelNode> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,627,List<int[][]> tempLinks = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,631,List<String> aliases = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,653,final Map<RelNode, Node> map = Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,860,this.measures = Preconditions.checkNotNull(measures);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,861,this.dimensions = Preconditions.checkNotNull(dimensions);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,878,private final List<Measure> measureBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,879,private final List<Column> dimensionListBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/LatticeStatisticProvider.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,24,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,38,final Map<MaterializationKey, Materialization> keyMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,40,final Map<QueryKey, MaterializationKey> keyBySql = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,42,final Map<TileKey, MaterializationKey> keyByTile = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,78,this.rootSchema = Preconditions.checkNotNull(rootSchema);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,21,import org.apache.calcite.avatica.ColumnMetaData;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,41,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,45,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,66,new ThreadLocal<MaterializationService>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,68,return new MaterializationService();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,73,new Comparator<Pair<CalciteSchema.TableEntry, TileKey>>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,74,public int compare(Pair<CalciteSchema.TableEntry, TileKey> o0,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,75,Pair<CalciteSchema.TableEntry, TileKey> o1) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,77,final Table t0 = o0.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,78,final Table t1 = o1.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,79,int c = Double.compare(t0.getStatistic().getRowCount(),
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,80,t1.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,81,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,82,return c;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,85,return o0.left.name.compareTo(o1.left.name);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,210,new TileKey(lattice, groupSet, ImmutableList.<Lattice.Measure>of());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,270,final List<TileKey> obsolete = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,271,final LinkedHashSet<Lattice.Measure> measureSet = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,383,Lists.transform(calciteSignature.columns,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,384,new Function<ColumnMetaData, ColumnMetaData.Rep>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,385,public ColumnMetaData.Rep apply(ColumnMetaData column) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,386,return column.type.rep;
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,29,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,42,static final Factory FACTORY =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,43,new Factory() {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,44,public LatticeStatisticProvider apply(Lattice lattice) {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,45,return new ProfilerLatticeStatisticProvider(lattice);
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,51,private static final Function1<Object[], List<Comparable>> TO_LIST =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,52,new Function1<Object[], List<Comparable>>() {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,53,public List<Comparable> apply(Object[] values) {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,54,for (int i = 0; i < values.length; i++) {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,55,if (values[i] == null) {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,56,values[i] = NullSentinel.INSTANCE;
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,60,return (List) Arrays.asList(values);
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,64,private final Lattice lattice;
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,65,private final Supplier<Profiler.Profile> profile =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,66,Suppliers.memoize(new Supplier<Profiler.Profile>() {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,67,public Profiler.Profile get() {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,68,final ProfilerImpl profiler =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,72,.build();
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,73,final List<Profiler.Column> columns = new ArrayList<>();
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,74,for (Lattice.Column column : lattice.columns) {
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,75,columns.add(new Profiler.Column(column.ordinal, column.alias));
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,77,final String sql =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,78,lattice.sql(ImmutableBitSet.range(lattice.columns.size()),
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,79,false, ImmutableList.<Lattice.Measure>of());
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,80,final Table table =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,82,.createTable(lattice.rootSchema, sql,
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,83,ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,84,final ImmutableList<ImmutableBitSet> initialGroups =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,85,ImmutableList.of();
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,86,final Enumerable<List<Comparable>> rows =
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,87,((ScannableTable) table).scan(null).select(TO_LIST);
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,88,return profiler.profile(rows, columns, initialGroups);
core/src/main/java/org/apache/calcite/materialize/ProfilerLatticeStatisticProvider.java,94,this.lattice = Preconditions.checkNotNull(lattice);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,35,static final Factory FACTORY =
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,36,new LatticeStatisticProvider.Factory() {
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,37,public LatticeStatisticProvider apply(Lattice lattice) {
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,38,return new SqlLatticeStatisticProvider(lattice);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,42,static final Factory CACHED_FACTORY =
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,43,new LatticeStatisticProvider.Factory() {
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,44,public LatticeStatisticProvider apply(Lattice lattice) {
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,45,LatticeStatisticProvider provider = FACTORY.apply(lattice);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,46,return new CachingLatticeStatisticProvider(lattice, provider);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,54,this.lattice = Preconditions.checkNotNull(lattice);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,69,.createTable(lattice.rootSchema, sql, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,49,private static final Function<Attribute, Lattice.Column> TO_COLUMN =
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,50,new Function<Attribute, Lattice.Column>() {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,51,public Lattice.Column apply(Attribute input) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,52,return ((AttributeImpl) input).column;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,209,return lattice.getRowCount(Lists.transform(attributes, TO_COLUMN));
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,24,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,420,return Iterables.filter(classes,
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,421,new PredicateImpl<Class<? extends RelNode>>() {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,422,public boolean test(Class<? extends RelNode> input) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,423,return clazz.isAssignableFrom(input);
core/src/main/java/org/apache/calcite/plan/Contexts.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/Contexts.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/Contexts.java,85,final List<Context> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/Contexts.java,119,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/Contexts.java,142,this.contexts = Preconditions.checkNotNull(contexts);
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,35,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,62,CacheBuilder.newBuilder().weakKeys().build(
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,63,new CacheLoader<RelOptPlanner, ConversionData>() {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,64,public ConversionData load(@Nonnull RelOptPlanner key) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,65,return new ConversionData();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,43,this.traits = Preconditions.checkNotNull(traits);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,62,traitList.toArray(new RelMultipleTrait[traitList.size()]);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,79,this.planner = Preconditions.checkNotNull(planner);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,80,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,46,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,48,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,161,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,185,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,211,ImmutableList.<RelOptMaterialization>of(),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,212,ImmutableList.<RelOptLattice>of());
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,225,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,288,ImmutableList.<RelOptMaterialization>of(),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,289,ImmutableList.<RelOptLattice>of());
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,34,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,35,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,69,applied.add(
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,70,Pair.<RelNode, List<RelOptMaterialization>>of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,71,rel, ImmutableList.<RelOptMaterialization>of()));
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,105,final List<Pair<RelNode, RelOptLattice>> latticeUses = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,107,Sets.newHashSet(Iterables.transform(queryTables, GET_QUALIFIED_NAME));
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,109,final Supplier<RelNode> leafJoinRoot = Suppliers.memoize(
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,110,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,111,public RelNode get() {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,112,return RelOptMaterialization.toLeafJoinForm(rel);
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,166,final List<RelOptMaterialization> applicableMaterializations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,177,private static final Function<RelOptTable, List<String>> GET_QUALIFIED_NAME =
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,178,new Function<RelOptTable, List<String>>() {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,179,public List<String> apply(RelOptTable relOptTable) {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,180,return relOptTable.getQualifiedName();
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,70,ImmutableMap.<RexNode, RexNode>of());
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,92,this.pulledUpPredicates = Preconditions.checkNotNull(pulledUpPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,94,Preconditions.checkNotNull(leftInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,96,Preconditions.checkNotNull(rightInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,97,this.constantMap = Preconditions.checkNotNull(constantMap);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,28,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,100,this.operand = Preconditions.checkNotNull(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,101,this.relBuilderFactory = Preconditions.checkNotNull(relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,129,return new RelOptRuleOperand(clazz, null, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,148,return new RelOptRuleOperand(clazz, trait, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,164,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,185,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,191,return operand(clazz, trait, predicate, some(first, rest));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,575,new Function<RelNode, RelNode>() {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,576,public RelNode apply(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,577,return convert(rel, rel.getTraitSet().replace(trait));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,622,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleCall.java,234,transformTo(rel, ImmutableMap.<RelNode, RelNode>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,22,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,121,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,124,this.predicate = Preconditions.checkNotNull((Predicate) predicate);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,215,return predicate.apply(rel);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,37,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,42,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,83,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,106,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,107,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,108,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,113,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,138,public static final double EPSILON = 1.0e-5;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,142,public static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,143,new PredicateImpl<Filter>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,144,public boolean test(Filter filter) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,145,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,147,|| RexOver.containsOver(filter.getCondition()));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,153,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,154,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,155,public boolean test(Project project) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,156,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,158,|| RexOver.containsOver(project.getProjects(), null));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,164,public static final Predicate<Calc> CALC_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,165,new PredicateImpl<Calc>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,166,public boolean test(Calc calc) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,167,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,169,|| calc.getProgram().containsAggs());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,173,static final boolean B = false;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,175,private static final Function<RelDataTypeField, RelDataType> GET_TYPE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,176,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,177,public RelDataType apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,178,return field.getType();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,248,new Function<RelOptTable, String>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,250,return arg0.getQualifiedName().toString();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,351,return Lists.transform(type.getFieldList(), GET_TYPE);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,562,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,623,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,798,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1699,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2267,final Map<Integer, RexNode> projectMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2410,final List<RexNode> filtersToRemove = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2671,List<BitSet> newProjFields = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2702,Lists.transform(newProjFields, ImmutableBitSet.FROM_BIT_SET),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3111,final List<String> outputNameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3112,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3239,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3263,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,62,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,63,new CacheLoader<T, T>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,65,return key;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,22,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,554,new RelTraitSet(this, traits.toArray(new RelTrait[traits.size()]));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,35,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,73,this.builder = Preconditions.checkNotNull(builder);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,74,this.executor = Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,75,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,199,RexUtil.apply(firstUsageFinder, ImmutableList.<RexNode>of(), first);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,200,RexUtil.apply(secondUsageFinder, ImmutableList.<RexNode>of(), second);
core/src/main/java/org/apache/calcite/plan/Strong.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/Strong.java,90,return Preconditions.checkNotNull(MAP.get(kind), kind);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,47,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,63,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,64,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,65,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,69,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,125,ImmutableList.<UnifyRule>of(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,475,List<RelNode> sub = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,496,final Map<MutableRel, MutableRel> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,509,final List<Replacement> attempted = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,510,List<List<Replacement>> substitutions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,866,this.rule = Preconditions.checkNotNull(rule);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,867,this.query = Preconditions.checkNotNull(query);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,868,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,869,this.slots = Preconditions.checkNotNull(slots);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1260,new Function<AggregateCall, AggregateCall>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1261,public AggregateCall apply(AggregateCall call) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1262,return call.copy(Mappings.apply2(mapping, call.getArgList()),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1263,Mappings.apply(mapping, call.filterArg));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1277,final List<Integer> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1301,final List<AggregateCall> aggregateCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1585,private static final Predicate<LogicalFilter> PREDICATE =
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1586,new PredicateImpl<LogicalFilter>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1587,public boolean test(LogicalFilter input) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1588,return input.getCondition() instanceof RexInputRef;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1602,operand(LogicalFilter.class, null, PREDICATE,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,136,Util.first(onCopyHook, Functions.<RelNode, RelNode, Void>ignore2());
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,547,bindings.toArray(new RelNode[bindings.size()]),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,24,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,50,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,51,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,52,if (!(rel instanceof HepRelVertex)) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,53,return null;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,55,HepRelVertex vertex = (HepRelVertex) rel;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,56,final RelNode rel2 = vertex.getCurrentRel();
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,57,UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,58,rel.getCluster().getMetadataProvider().apply(rel2.getClass(),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,59,metadataClass);
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,60,return function.bind(rel2, mq);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,20,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,44,import java.util.Iterator;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,390,return new Iterable<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,391,public Iterator<RelNode> iterator() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,393,.where(
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,394,new Predicate1<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,395,public boolean apply(RelNode v1) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,396,return v1.getTraitSet().satisfies(traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,399,.iterator();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,40,import java.util.Collections;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,238,Collections.sort(
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,239,boostRemovals,
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,240,new Comparator<RelSubset>() {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,241,public int compare(RelSubset o1, RelSubset o2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,242,int o1children = countChildren(o1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,243,int o2children = countChildren(o2);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,244,int c = compare(o1children, o2children);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,245,if (c == 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,247,c = compare(o1.getId(), o2.getId());
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,249,return c;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,252,private int compare(int i1, int i2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,253,return (i1 < i2) ? -1 : ((i1 == i2) ? 0 : 1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,256,private int countChildren(RelSubset subset) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,257,int count = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,258,for (RelNode rel : subset.getRels()) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,259,count += rel.getInputs().size();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,261,return count;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,455,Collections.sort(matchList, MATCH_COMPARATOR);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,72,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,73,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,77,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,85,import java.util.Comparator;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,233,Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,237,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,286,return new VolcanoPlannerPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,287,public void initialize(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,288,Map<VolcanoPlannerPhase, Set<String>> phaseRuleMap) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,290,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS_MDR).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,291,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,292,phaseRuleMap.get(VolcanoPlannerPhase.CLEANUP).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,692,final Set<RelSubset> subsets = Sets.newHashSet();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1175,Ordering<RelSet> ordering = Ordering.from(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1176,new Comparator<RelSet>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1177,public int compare(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1178,RelSet o1,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1179,RelSet o2) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1180,return o1.id - o2.id;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,24,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,55,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,56,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,57,final RelSubset subset = (RelSubset) rel;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,58,final RelMetadataProvider provider =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,59,rel.getCluster().getMetadataProvider();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,69,if (subset.best != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,70,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,71,provider.apply(subset.best.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,72,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,73,final M metadata = function.bind(subset.best, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,74,if (metadata != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,75,return metadata;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,92,if (subset.set.inMetadataQuery) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,93,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,96,subset.set.inMetadataQuery = true;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,97,try {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,98,for (RelNode relCandidate : subset.set.rels) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,99,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,100,provider.apply(relCandidate.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,101,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,102,final M result = function.bind(relCandidate, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,103,if (result != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,104,return result;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,109,subset.set.inMetadataQuery = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,113,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,83,ImmutableMap.<RelNode, List<RelNode>>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,29,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,42,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,67,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,68,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,69,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,70,import com.google.common.collect.Collections2;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,97,ImmutableList.of(Preconditions.checkNotNull(defaultSchema),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,98,ImmutableList.<String>of()),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,105,this.rootSchema = Preconditions.checkNotNull(rootSchema);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,117,ImmutableList.of(schemaPath, ImmutableList.<String>of()), typeFactory, config);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,144,final List<Function> functions2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,254,predicate = Predicates.alwaysTrue();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,256,predicate = new PredicateImpl<Function>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,257,public boolean test(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,258,return function instanceof TableMacro
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,263,predicate = new PredicateImpl<Function>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,264,public boolean test(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,265,return !(function instanceof TableMacro
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,270,final Collection<Function> functions =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,271,Collections2.filter(getFunctionsFrom(opName.names), predicate);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,272,if (functions.isEmpty()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,273,return;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,275,operatorList.addAll(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,276,Collections2.transform(functions,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,277,new com.google.common.base.Function<Function, SqlOperator>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,278,public SqlOperator apply(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,279,return toOp(opName, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,291,ModelHandler.addFunctions(schema.plus(), null, ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,329,final Predicate<Integer> optional =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,330,new PredicateImpl<Integer>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,331,public boolean test(Integer input) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,332,return function.getParameters().get(input).isOptional();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,336,OperandTypes.family(typeFamilies, optional);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,359,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,360,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,361,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,362,final RelDataType type;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,363,if (function instanceof ScalarFunctionImpl) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,364,type = ((ScalarFunctionImpl) function).getReturnType(typeFactory,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,365,opBinding);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,367,type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,369,return toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,376,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,377,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,378,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,379,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,380,return toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,387,return Lists.transform(types,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,388,new com.google.common.base.Function<RelDataType, RelDataType>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,389,public RelDataType apply(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,390,return toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,53,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,129,final List<Callback> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,19,import org.apache.calcite.DataContext;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,39,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,144,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,502,return Collections.<Function1<Context, RelOptPlanner>>singletonList(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,503,new Function1<Context, RelOptPlanner>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,504,public RelOptPlanner apply(Context context) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,505,return createPlanner(context, null, null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,668,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,669,ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,674,ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,675,-1,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,676,new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,677,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,678,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,769,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,770,ImmutableMap.<String, Object>of(), null,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,771,ImmutableList.<ColumnMetaData>of(), Meta.CursorFactory.OBJECT,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,772,null, ImmutableList.<RelCollation>of(), -1, null,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,845,: ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1067,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1096,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1097,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1098,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1099,final RelOptCluster cluster =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1100,prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1102,.translate(queryable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1108,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1109,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1110,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1111,return rel;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1297,: ImmutableList.<Prepare.Materialization>of();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1322,return new Bindable() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1323,public Enumerable bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1324,switch (cursorFactory.style) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1325,case ARRAY:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1326,return Linq4j.singletonEnumerable(new String[] {explanation});
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1327,case OBJECT:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1328,default:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1329,return Linq4j.singletonEnumerable(explanation);
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,105,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,113,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,26,import org.apache.calcite.plan.RelOptLattice;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,27,import org.apache.calcite.plan.RelOptMaterialization;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,29,import org.apache.calcite.plan.RelOptSchema;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,146,new Frameworks.PlannerAction<Void>() {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,147,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,148,SchemaPlus rootSchema) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,149,Util.discard(rootSchema); // use our own defaultSchema
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,150,typeFactory = (JavaTypeFactory) cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,151,planner = cluster.getPlanner();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,152,planner.setExecutor(executor);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,153,return null;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,336,return program.run(planner, rel, requiredOutputTraits,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,337,ImmutableList.<RelOptMaterialization>of(),
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,338,ImmutableList.<RelOptLattice>of());
core/src/main/java/org/apache/calcite/prepare/Prepare.java,72,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,535,Collections.<String>nCopies(4, null));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,602,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,603,this.parameterRowType = Preconditions.checkNotNull(parameterRowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,604,this.fieldOrigins = Preconditions.checkNotNull(fieldOrigins);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,606,this.rootRel = Preconditions.checkNotNull(rootRel);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,62,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,63,import com.google.common.base.Functions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,64,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,99,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,112,final Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,113,(Function) Functions.constant(expression);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,115,expressionFunction, null);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,121,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,122,getClassExpressionFunction(schemaPlus, Util.last(path).left, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,124,expressionFunction, table.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,130,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,131,getClassExpressionFunction(tableEntry, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,133,table, expressionFunction, rowCount);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,154,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,155,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,156,return queryableTable.getExpression(schema, tableName, clazz);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,162,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,163,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,164,return Schemas.tableExpression(schema, Object[].class, tableName,
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,165,table.getClass());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,172,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,173,public Expression apply(Class input) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,174,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,25,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,31,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,33,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,34,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,49,import java.util.Comparator;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,122,new PriorityQueue<>(100,
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,123,new Comparator<Space>() {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,124,public int compare(Space s0, Space s1) {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,129,int c = Integer.compare(s0.columns.size(), s1.columns.size());
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,130,if (c == 0) {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,131,c = Double.compare(s0.surprise(), s1.surprise());
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,133,return c;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,146,final PartiallyOrderedSet<Space> results = new PartiallyOrderedSet<>(
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,147,new PartiallyOrderedSet.Ordering<Space>() {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,148,public boolean lessThan(Space e1, Space e2) {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,149,return e2.columnOrdinals.contains(e1.columnOrdinals);
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,154,final Function<Integer, Column> get =
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,155,new Function<Integer, Column>() {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,156,public Column apply(Integer input) {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,157,return columns.get(input);
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,265,&& predicate.apply(Pair.of(doneSpace, column))) {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,451,return ImmutableSortedSet.copyOf(Iterables.transform(ordinals, get));
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,503,Predicate<Pair<Space, Column>> predicate = Predicates.alwaysTrue();
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,516,new PredicateImpl<Pair<Space, Column>>() {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,517,public boolean test(Pair<Space, Column> spaceColumnPair) {
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,518,final Space space = spaceColumnPair.left;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,519,return false;
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,627,(Comparable) null));
core/src/main/java/org/apache/calcite/profile/ProfilerImpl.java,762,new PriorityQueue<>(11, Ordering.<Double>natural());
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,27,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,48,private static final Function<List<Comparable>, Comparable> ONLY =
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,49,new Function<List<Comparable>, Comparable>() {
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,50,public Comparable apply(List<Comparable> input) {
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,51,return Iterables.getOnlyElement(input);
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,100,new PartiallyOrderedSet.Ordering<Space>() {
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,101,public boolean lessThan(Space e1, Space e2) {
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,102,return e2.columnOrdinals.contains(e1.columnOrdinals);
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,111,final Function<Integer, Column> get =
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,112,new Function<Integer, Column>() {
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,113,public Column apply(Integer input) {
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,114,return columns.get(input);
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,126,new ArrayList<>(Collections.nCopies(columns.size(), (Space) null));
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,220,Iterables.transform(space.values, ONLY));
core/src/main/java/org/apache/calcite/profile/SimpleProfiler.java,298,return ImmutableSortedSet.copyOf(Iterables.transform(ordinals, get));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/RelCollations.java,43,new RelCollationImpl(ImmutableList.<RelFieldCollation>of()));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,134,return Lists.transform(fieldCollations,
core/src/main/java/org/apache/calcite/rel/RelCollations.java,135,new Function<RelFieldCollation, Integer>() {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,136,public Integer apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,137,return input.getFieldIndex();
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,92,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,212,this.direction = Preconditions.checkNotNull(direction);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,213,this.nullDirection = Preconditions.checkNotNull(nullDirection);
core/src/main/java/org/apache/calcite/rel/RelRoot.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelRoot.java,95,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,29,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,30,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,54,this(clazz, Predicates.<RelNode>alwaysTrue(), in, out,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,60,Predicate<? super R> predicate, RelTrait in, RelTrait out,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,61,String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,83,this.inTrait = Preconditions.checkNotNull(in);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,84,this.outTrait = Preconditions.checkNotNull(out);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,34,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,48,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,50,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,76,public static final Predicate<Aggregate> IS_SIMPLE =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,77,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,78,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,79,return input.getGroupType() == Group.SIMPLE;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,83,public static final Predicate<Aggregate> NO_INDICATOR =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,84,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,85,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,86,return !input.indicator;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,90,public static final Predicate<Aggregate> IS_NOT_GRAND_TOTAL =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,91,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,92,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,93,return input.getGroupCount() > 0;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,149,this.groupSet = Preconditions.checkNotNull(groupSet);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,355,final Set<String> containedNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,92,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,94,this.aggFunction = Preconditions.checkNotNull(aggFunction);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,30,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,147,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,42,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,43,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,61,this.distribution = Preconditions.checkNotNull(distribution);
core/src/main/java/org/apache/calcite/rel/core/Join.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Join.java,104,this.condition = Preconditions.checkNotNull(condition);
core/src/main/java/org/apache/calcite/rel/core/Join.java,106,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,50,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,51,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,129,this.remaining = Preconditions.checkNotNull(remaining);
core/src/main/java/org/apache/calcite/rel/core/Match.java,101,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/rel/core/Match.java,102,this.pattern = Preconditions.checkNotNull(pattern);
core/src/main/java/org/apache/calcite/rel/core/Match.java,108,this.after = Preconditions.checkNotNull(after);
core/src/main/java/org/apache/calcite/rel/core/Match.java,112,this.orderKeys = Preconditions.checkNotNull(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Project.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Project.java,197,if (false && !Util.isDistinct(
core/src/main/java/org/apache/calcite/rel/core/Project.java,198,Lists.transform(exps,
core/src/main/java/org/apache/calcite/rel/core/Project.java,199,new Function<RexNode, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Project.java,200,public Object apply(RexNode a0) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,201,return a0.toString();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,38,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,275,semiJoinDone, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,28,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,76,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,124,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,31,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,105,final List<RelDataType> inputRowTypes = Lists.transform(inputs,
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,106,new Function<RelNode, RelDataType>() {
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,107,public RelDataType apply(RelNode input) {
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,108,return input.getRowType();
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,60,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,98,ImmutableSet.<RelColumnMapping>of());
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,119,Preconditions.checkNotNull(updateColumnList);
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,120,Preconditions.checkNotNull(sourceExpressionList);
core/src/main/java/org/apache/calcite/rel/core/Values.java,31,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/core/Values.java,36,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Values.java,37,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Values.java,51,private static final Function<ImmutableList<RexLiteral>, Object> F =
core/src/main/java/org/apache/calcite/rel/core/Values.java,52,new Function<ImmutableList<RexLiteral>, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,53,public Object apply(ImmutableList<RexLiteral> tuple) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,54,String s = tuple.toString();
core/src/main/java/org/apache/calcite/rel/core/Values.java,55,assert s.startsWith("[");
core/src/main/java/org/apache/calcite/rel/core/Values.java,56,assert s.endsWith("]");
core/src/main/java/org/apache/calcite/rel/core/Values.java,57,return "{ " + s.substring(1, s.length() - 1) + " }";
core/src/main/java/org/apache/calcite/rel/core/Values.java,68,public static final Predicate<? super Values> IS_EMPTY =
core/src/main/java/org/apache/calcite/rel/core/Values.java,69,new PredicateImpl<Values>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,70,public boolean test(Values values) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,71,return values.getTuples().isEmpty();
core/src/main/java/org/apache/calcite/rel/core/Values.java,82,public static final Predicate<? super Values> IS_NOT_EMPTY =
core/src/main/java/org/apache/calcite/rel/core/Values.java,83,new PredicateImpl<Values>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,84,public boolean test(Values values) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,85,return !values.getTuples().isEmpty();
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,25,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,39,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,98,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,99,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,100,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,104,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,105,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,106,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,24,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,41,import java.util.List;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,72,this.variablesSet = Preconditions.checkNotNull(variablesSet);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,81,this(cluster, traitSet, child, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,90,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,103,return create(input, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,113,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,114,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,115,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,119,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,120,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,121,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,100,this.systemFieldList = Preconditions.checkNotNull(systemFieldList);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,118,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,136,input.getExpression("condition"), ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,138,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,164,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,171,joinType, false, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,113,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,114,RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,115,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,116,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,117,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,30,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,102,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,103,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,104,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,105,if (table != null) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,106,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,108,return ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,34,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,87,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,88,RelCollationTraitDef.INSTANCE, new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,89,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,90,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,106,ImmutableList.<ImmutableList<RexLiteral>>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,27,import org.apache.calcite.rex.RexFieldCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,37,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,184,new ArrayList<Map.Entry<String, RelDataType>>(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,185,child.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,352,new PredicateImpl<RexFieldCollation>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,353,public boolean test(RexFieldCollation rexFieldCollation) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,356,return rexFieldCollation.left instanceof RexLocalRef;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,69,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,70,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,71,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,72,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,73,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,74,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,75,new CachingInvocationHandler(metadata)));
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,105,this.metadata = Preconditions.checkNotNull(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,89,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,90,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,91,final List<Metadata> metadataList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,92,for (UnboundMetadata<M> function : functions) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,93,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,94,if (metadata != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,95,metadataList.add(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,98,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,99,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,100,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,101,new ChainedInvocationHandler(metadataList)));
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,85,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,109,new CacheLoader<Key, MetadataHandler>() {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,110,public MetadataHandler load(@Nonnull Key key) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,112,return load3(key.def, key.provider.handlers(key.def),
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,113,key.relClasses);
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,39,public static final UnboundMetadata<Metadata> DUMMY =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,40,new UnboundMetadata<Metadata>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,41,public Metadata bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,42,return null;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,55,return new CacheLoader<Pair<Class<RelNode>, Class<Metadata>>,
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,56,UnboundMetadata<Metadata>>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,58,Pair<Class<RelNode>, Class<Metadata>> key) throws Exception {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,59,final UnboundMetadata<Metadata> function =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,60,provider.apply(key.left, key.right);
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,62,return function != null ? function : DUMMY;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,33,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,133,final UnboundMetadata function =
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,134,new UnboundMetadata() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,135,public Metadata bind(final RelNode rel,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,136,final RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,137,return (Metadata) Proxy.newProxyInstance(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,138,space.metadataClass0.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,139,new Class[]{space.metadataClass0},
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,140,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,141,public Object invoke(Object proxy, Method method,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,142,Object[] args) throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,149,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,150,BuiltInMethod.METADATA_REL.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,151,return rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,153,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,154,BuiltInMethod.OBJECT_TO_STRING.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,155,return space.metadataClass0.getSimpleName() + "(" + rel
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,156,+ ")";
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,158,int i = methods.indexOf(method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,159,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,160,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,161,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,163,final Method handlerMethod = handlerMethods.get(i);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,164,if (handlerMethod == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,165,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,166,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,168,final Object[] args1;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,169,final List key;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,170,if (args == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,171,args1 = new Object[]{rel, mq};
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,172,key = FlatLists.of(rel, method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,174,args1 = new Object[args.length + 2];
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,175,args1[0] = rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,176,args1[1] = mq;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,177,System.arraycopy(args, 0, args1, 2, args.length);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,179,final Object[] args2 = args1.clone();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,180,args2[1] = method; // replace RelMetadataQuery with method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,181,for (int j = 0; j < args2.length; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,182,if (args2[j] == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,183,args2[j] = NullSentinel.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,186,args2[j] = args2[j].toString();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,189,key = FlatLists.copyOf(args2);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,191,if (mq.map.put(key, NullSentinel.INSTANCE) != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,192,throw CyclicMetadataException.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,194,try {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,195,return handlerMethod.invoke(target, args1);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,197,| UndeclaredThrowableException e) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,198,Util.throwIfUnchecked(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,199,throw new RuntimeException(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,201,mq.map.remove(key);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,316,Preconditions.checkNotNull(relNodeClass);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,198,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,199,inputPreds.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,200,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,202,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,205,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,286,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,287,inputPreds.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,288,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,290,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,293,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,51,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,54,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,172,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,305,final List<RelCollation> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,308,Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,43,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,49,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,68,private static final Predicate<RelNode> SAFE_REL =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,69,new PredicateImpl<RelNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,70,public boolean test(RelNode r) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,71,return r instanceof Aggregate || r instanceof Project;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,49,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,130,final Set<RexNode> originalExprs = Sets.newHashSet(inputRef);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,132,mapping.put(ref, originalExprs);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,240,final Set<RexNode> updatedExprs = Sets.newHashSet(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,241,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,242,originalExprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,243,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,245,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,248,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,295,final Set<RexNode> updatedExprs = Sets.newHashSet(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,296,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,297,originalExprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,298,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,300,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,303,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,396,return Sets.newHashSet(expr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,61,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,65,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,525,exprFields = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,556,equivalence = Maps.newTreeMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,572,Lists.transform(exprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,573,new Function<RexNode, Void>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,574,public Void apply(RexNode input) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,575,return input.accept(eF);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,703,return new Iterable<Mapping>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,704,public Iterator<Mapping> iterator() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,705,ImmutableBitSet fields = exprFields.get(predicate.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,706,if (fields.cardinality() == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,707,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,709,return new ExprsItr(fields);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,723,exprs = Linq4j.asEnumerable(exprs).where(new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,724,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,725,return expr != null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,222,List<List<Double>> inputColumnSizeList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,36,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,91,return Sets.newHashSet(RelTableRef.of(rel.getTable(), 0));
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,35,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,36,import java.lang.reflect.Method;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,112,new ThreadLocal<JaninoRelMetadataProvider>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,113,protected JaninoRelMetadataProvider initialValue() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,114,return JaninoRelMetadataProvider.DEFAULT;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,120,this.metadataProvider = Preconditions.checkNotNull(metadataProvider);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,149,new Class[] {handlerClass},
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,150,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,152,throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,153,final RelNode r = (RelNode) args[0];
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,154,throw new JaninoRelMetadataProvider.NoHandler(r.getClass());
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,62,return Lists.transform(inputs,
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,63,new Function<MutableRel, MutableRel>() {
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,64,public MutableRel apply(MutableRel mutableRel) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,65,return mutableRel.clone();
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,72,this.cluster = Preconditions.checkNotNull(cluster);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,73,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,74,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,59,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,278,private static List<RelNode> fromMutables(List<MutableRel> nodes, final RelBuilder relBuilder) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,280,new Function<MutableRel, RelNode>() {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,281,public RelNode apply(MutableRel mutableRel) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,282,return fromMutable(mutableRel, relBuilder);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,411,return Lists.transform(nodes,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,412,new Function<RelNode, MutableRel>() {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,413,public MutableRel apply(RelNode relNode) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,414,return toMutable(relNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,68,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,384,return result(sqlInsert, ImmutableList.<Clause>of(), modify, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,418,Lists.transform(exprs,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,419,new Function<RexNode, SqlNode>() {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,420,public SqlNode apply(RexNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,421,return context.toSql(null, e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,430,Lists.transform(names,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,431,new Function<String, SqlNode>() {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,432,public SqlNode apply(String name) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,433,return new SqlIdentifier(name, POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,503,List<SqlNode> rhl = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,75,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,109,this.dialect = Preconditions.checkNotNull(dialect);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,733,POS, operands.toArray(new SqlNode[operands.size()]));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1070,ImmutableMap.<String, RelDataType>of(neededAlias, neededType));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,216,: ImmutableList.<RelOptMaterialization>of();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1367,.project(relBuilder.fields(), ImmutableList.<String>of(), true).build();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1838,ImmutableList.<BiMap<RelTableRef, RelTableRef>>of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1839,HashBiMap.<RelTableRef, RelTableRef>create());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1856,HashBiMap.<RelTableRef, RelTableRef>create(m);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1938,return ImmutableTriple.<RexNode, RexNode, RexNode>of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1969,DefaultDirectedGraph.create(Edge.FACTORY);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2118,return ImmutableTriple.<RexNode, RexNode, RexNode>of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2119,compensationColumnsEquiPred, compensationRangePred, compensationResidualPred);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2626,public static final DirectedGraph.EdgeFactory<RelTableRef, Edge> FACTORY =
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2627,new DirectedGraph.EdgeFactory<RelTableRef, Edge>() {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2628,public Edge createEdge(RelTableRef source, RelTableRef target) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2629,return new Edge(source, target);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,311,final List<AggregateCall> topAggregateCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,710,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,848,null, ImmutableList.<AggregateCall>of()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,27,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,43,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,61,private static final Predicate<RelNode> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,62,new PredicateImpl<RelNode>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,63,public boolean test(@Nullable RelNode relNode) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,64,return !(relNode instanceof Project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,77,this(operand(aggregateClass, operand(inputClass, null, PREDICATE, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,122,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,123,public ImmutableBitSet apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,124,return Mappings.apply(mapping, input);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,38,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,100,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,101,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,102,return newGroupSet.indexOf(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,137,final List<AggregateCall> topAggCallList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,48,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,49,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,51,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,83,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,84,operand(joinClass, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,170,final List<Integer> leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,171,final List<Integer> rightKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,172,final List<Boolean> filterNulls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,240,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,266,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,301,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,302,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,303,return map.get(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,327,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,423,return new SqlSplittableAggFunction.Registry<E>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,424,public int register(E e) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,425,int i = list.indexOf(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,426,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,427,i = list.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,428,list.add(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,430,return i;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,34,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,76,final List<Integer> newKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,134,final List<Integer> posList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,90,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,45,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,46,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,157,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,158,final Map<AggregateCall, RexNode> aggCallMapping = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,160,final List<RexNode> projList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,190,Collections.<String>nCopies(extraArgCount, null)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,49,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,63,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,70,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,157,final List<AggregateCall> aggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,235,List<Integer> newArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,80,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,150,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,31,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,67,operand(Aggregate.class, null, Predicates.not(Aggregate.IS_NOT_GRAND_TOTAL),
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,68,operand(Values.class, null, Values.IS_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,129,final RexNode[] exprs = exprList.toArray(new RexNode[exprList.size()]);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,33,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,47,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,48,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,95,new PredicateImpl<Filter>() {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,97,try (ExtractFinder finder = ExtractFinder.THREAD_INSTANCES.get()) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,99,: "previous user did not clean up";
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,100,filter.getCondition().accept(finder);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,104,|| finder.opKinds.contains(SqlKind.CEIL);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,177,super(operand(Filter.class, null, FILTER_PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,208,new ThreadLocal<ExtractFinder>() {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,210,return new ExtractFinder();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,256,this.rexBuilder = Preconditions.checkNotNull(rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,257,this.timeUnit = Preconditions.checkNotNull(timeUnit);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,260,this.operandRanges = Preconditions.checkNotNull(operandRanges);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,261,this.timeUnitRanges = Preconditions.checkNotNull(timeUnitRanges);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,106,final List<RexNode> pushedConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,107,final List<RexNode> remainingConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,36,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,52,public static final Predicate TRUE_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,53,new Predicate() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,54,public boolean apply(Join join, JoinRelType joinType, RexNode exp) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,55,return true;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,93,this.predicate = Preconditions.checkNotNull(predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,140,: Lists.<RexNode>newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,30,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,38,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,55,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,56,new PredicateImpl<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,57,public boolean test(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,60,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,61,return table.unwrap(FilterableTable.class) != null
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,62,|| table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,70,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,85,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,122,final List<RexNode> top = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,123,final List<RexNode> bottom = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,137,final List<RexNode> newBottomList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,190,Collections.<RelDataTypeField>emptyList());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,40,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,137,final List<ImmutableBitSet> projFieldsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,138,final List<int[]> joinFieldRefCountsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,150,final List<Pair<JoinRelType, RexNode>> joinSpecs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,209,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,391,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,482,final Map<Integer, int[]> refCountsMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,533,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,137,List<Integer> treeOrder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,160,this.parent = Preconditions.checkNotNull(parent);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,198,this.left = Preconditions.checkNotNull(left);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,199,this.right = Preconditions.checkNotNull(right);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,37,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,465,fieldsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,466,factorsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,50,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,301,sortedFactors.toArray(new Integer[sortedFactors.size()]);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,496,List<RexNode> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1636,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,77,: ImmutableList.<RelOptMaterialization>of();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,41,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,95,final List<Vertex> vertexes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,105,final List<LoptMultiJoin.Edge> unusedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,127,final List<LoptMultiJoin.Edge> usedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,177,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,226,List<Pair<RelNode, Mappings.TargetMapping>> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,375,this.conditions = Preconditions.checkNotNull(conditions);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,37,public static final ProjectFilterTransposeRule INSTANCE = new ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,38,LogicalProject.class, LogicalFilter.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,39,PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,41,new ProjectJoinTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,42,PushProjector.ExprCondition.TRUE,
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,27,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,30,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,47,private static final Predicate<Project> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,48,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,49,public boolean test(Project input) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,50,return isTrivial(input);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,67,super(operand(Project.class, null, PREDICATE, any()), relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,68,null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,43,new ProjectSetOpTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,44,PushProjector.ExprCondition.FALSE, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,29,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,53,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,54,new PredicateImpl<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,55,public boolean test(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,57,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,58,return table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,66,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,81,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,41,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,51,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,53,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,55,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,81,private static final Predicate<Calc> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,82,new PredicateImpl<Calc>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,83,public boolean test(Calc calc) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,84,return RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,88,private static final Predicate<Project> PREDICATE2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,89,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,90,public boolean test(Project project) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,91,return RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,132,operand(Calc.class, null, PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,161,super(operand(Project.class, null, PREDICATE2, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,194,new Function<RexLocalRef, RexNode>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,195,public RexNode apply(RexLocalRef a0) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,196,return program.expandLocalRef(a0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,317,final Set<Integer> newSet = Sets.newHashSet(i);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,40,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,41,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,79,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,127,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,180,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,206,new RemoveEmptySingleRule(Project.class, Predicates.<Project>alwaysTrue(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,207,RelFactories.LOGICAL_BUILDER, "PruneEmptyProject");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,274,new RemoveEmptySingleRule(Aggregate.class, Aggregate.IS_NOT_GRAND_TOTAL,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,291,operand(Values.class, null, Values.IS_EMPTY, none()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,320,operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,339,this(clazz, Predicates.<R>alwaysTrue(), RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,348,operand(clazz, null, predicate,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,349,operand(Values.class, null, Values.IS_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,34,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,41,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,42,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,45,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,213,this.relBuilder = Preconditions.checkNotNull(relBuilder);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,580,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,818,ExprCondition FALSE =
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,819,new ExprConditionImpl() {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,821,return false;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,828,ExprCondition TRUE =
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,829,new ExprConditionImpl() {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,831,return true;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,837,abstract static class ExprConditionImpl extends PredicateImpl<RexNode>
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,838,implements ExprCondition {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,845,class OperatorExprCondition extends ExprConditionImpl {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,380,final List<RexNode> expandedExprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,397,final List<RexLocalRef> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,565,final List<RexNode> constExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,566,List<Boolean> addCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,567,final List<RexNode> removableCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,579,final List<RexNode> reducedExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,619,final List<RexNode> reducedValues = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,31,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,37,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,49,new PredicateImpl<Join>() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,50,public boolean test(Join input) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,51,switch (input.getJoinType()) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,52,case LEFT:
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,53,case INNER:
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,54,return true;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,55,default:
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,56,return false;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,63,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,64,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,65,return input.getRowType().getFieldCount() == 0;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,83,operand(joinClass, null, IS_LEFT_OR_INNER,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,92,operand(joinClass, null, IS_LEFT_OR_INNER,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,94,operand(aggregateClass, null, IS_EMPTY_AGGREGATE, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,126,final List<Integer> newRightKeyBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,143,ImmutableList.<RelNode>of(newSort));
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,121,Pair.<RexNode, String>of(rexBuilder.makeInputRef(input, j),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,78,operand(LogicalValues.class, null, Values.IS_NOT_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,95,operand(LogicalValues.class, null, Values.IS_NOT_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,113,operand(LogicalValues.class, null, Values.IS_NOT_EMPTY,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,48,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,133,operand(Aggregate.class, null, Aggregate.NO_INDICATOR, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,196,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,329,List<RelNode> inputsToUnion = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/DynamicRecordTypeImpl.java,23,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/type/DynamicRecordTypeImpl.java,72,return new SqlTypeExplicitPrecedenceList(Collections.<SqlTypeName>emptyList());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,411,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,59,.build(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,60,new CacheLoader<Object, RelDataType>() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,62,if (k instanceof RelDataType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,63,return (RelDataType) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,66,final Key key = (Key) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,67,final ImmutableList.Builder<RelDataTypeField> list =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,68,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,69,for (int i = 0; i < key.names.size(); i++) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,70,list.add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,71,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,72,key.names.get(i), i, key.types.get(i)));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,74,return new RelRecordType(key.kind, list.build());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,107,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,316,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeField.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeField.java,38,class ToFieldIndex implements Function<RelDataTypeField, Integer> {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeField.java,48,class ToFieldName implements Function<RelDataTypeField, String> {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,88,final List<Slot> slots = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,301,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,302,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,303,return typeFactory.copyType(protoType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,321,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,322,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,323,final RelDataType type = typeFactory.createSqlType(typeName);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,324,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,343,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,344,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,345,final RelDataType type = typeFactory.createSqlType(typeName, precision);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,346,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,365,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,366,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,367,final RelDataType type =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,368,typeFactory.createSqlType(typeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,369,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,42,this.kind = Preconditions.checkNotNull(kind);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,52,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,81,private static final Function<RelDataTypeField, RexInputRef> TO_INPUT_REF =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,82,new Function<RelDataTypeField, RexInputRef>() {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,83,public RexInputRef apply(RelDataTypeField input) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,84,return new RexInputRef(input.getIndex(), input.getType());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,131,return Lists.transform(rowType.getFieldList(), TO_INPUT_REF);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,276,ImmutableList.<RelCollation>of()));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,394,ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1110,return makeLiteral(Preconditions.checkNotNull(date),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1124,return makeLiteral(Preconditions.checkNotNull(time),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1135,return makeLiteral(Preconditions.checkNotNull(time),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1152,return makeLiteral(Preconditions.checkNotNull(timestamp),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1163,return makeLiteral(Preconditions.checkNotNull(timestamp),
core/src/main/java/org/apache/calcite/rex/RexCall.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexCall.java,59,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rex/RexCall.java,60,this.op = Preconditions.checkNotNull(op);
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,41,this.id = Preconditions.checkNotNull(id);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,119,new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,120,public Expression field(BlockBuilder list, int index,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,121,Type storageType) {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,122,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,214,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,215,this.typeName = Preconditions.checkNotNull(typeName);
core/src/main/java/org/apache/calcite/rex/RexOver.java,69,this.window = Preconditions.checkNotNull(window);
core/src/main/java/org/apache/calcite/rex/RexPermuteInputsShuttle.java,69,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rex/RexProgram.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,517,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexProgram.java,577,Collections.sort(outputCollations, Ordering.natural());
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,70,this.inputRowType = Preconditions.checkNotNull(inputRowType);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,71,this.rexBuilder = Preconditions.checkNotNull(rexBuilder);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,25,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,272,return Iterables.transform(iterable, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,273,public RexNode apply(@Nullable RexNode t) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,274,return t == null ? null : t.accept(RexShuttle.this);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,70,this.rexBuilder = Preconditions.checkNotNull(rexBuilder);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,71,this.predicates = Preconditions.checkNotNull(predicates);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,73,this.executor = Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,949,executor.reduce(rexBuilder, ImmutableList.<RexNode>of(e), reducedValues);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,950,return Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1290,this.ref = Preconditions.checkNotNull(ref);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1291,this.kind = Preconditions.checkNotNull(kind);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1292,this.literal = Preconditions.checkNotNull(literal);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,192,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,193,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,194,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,195,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,196,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,197,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,198,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,199,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,200,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,202,List<SqlNode> operandList =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,203,new ArrayList<SqlNode>(Arrays.asList(operands));
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,204,SqlDataTypeSpec typeSpec =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,205,SqlTypeUtil.convertTypeToSpec(call.getType());
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,206,operandList.add(typeSpec);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,207,return new SqlBasicCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,208,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,209,operandList.toArray(new SqlNode[operandList.size()]),
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,210,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,223,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,224,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,225,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,226,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,227,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,228,assert op instanceof SqlCaseOperator;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,229,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,230,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,231,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,232,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,234,SqlNodeList whenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,235,SqlNodeList thenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,236,int i = 0;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,237,while (i < operands.length - 1) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,238,whenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,239,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,240,thenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,241,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,243,SqlNode elseExpr = operands[i];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,244,SqlNode[] newOperands = new SqlNode[3];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,245,newOperands[0] = whenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,246,newOperands[1] = thenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,247,newOperands[2] = elseExpr;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,248,return op.createCall(null, SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,89,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,100,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,33,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,49,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,50,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,51,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,56,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,57,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,76,private static final Function<? super RexNode, ? extends RexNode> ADD_NOT =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,77,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,78,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,79,return new RexCall(input.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,80,ImmutableList.of(input));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,84,private static final Predicate1<RexNode> IS_FLAT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,85,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,86,public boolean apply(RexNode v1) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,87,return isFlat(v1);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,91,private static final Function<Object, String> TO_STRING =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,92,new Function<Object, String>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,93,public String apply(Object input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,94,return input.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,98,private static final Function<RexNode, RelDataType> TYPE_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,99,new Function<RexNode, RelDataType>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,100,public RelDataType apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,101,return input.getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,105,private static final Function<RelDataType, RelDataTypeFamily> FAMILY_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,106,new Function<RelDataType, RelDataTypeFamily>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,107,public RelDataTypeFamily apply(RelDataType input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,108,return input.getFamily();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,581,List<RexNode> conjuctions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1071,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1105,return Preconditions.checkNotNull(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1135,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1267,return Iterables.transform(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1268,nodes, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1269,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1270,return input.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1374,|| !exists(exprs,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1375,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1376,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1377,return isCallTo(expr, op);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1392,&& all(call.getOperands(), IS_FLAT_PREDICATE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1646,return Lists.transform(nodes, TYPE_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1650,return Lists.transform(types, FAMILY_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1762,return new RexCall(e.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1763,ImmutableList.of(e));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1891,new PredicateImpl<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1892,public boolean test(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1893,switch (input.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1894,case EQUALS:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1895,RexCall call2 = (RexCall) input;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1898,&& call2.getOperands().get(1) instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1899,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1902,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1909,Iterables.transform(notTerms, notFn(rexBuilder))),
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1928,public static Function<RexNode, RexNode> notFn(final RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1929,return new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1930,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1935,: input.getKind() == SqlKind.NOT
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1937,: rexBuilder.makeCall(SqlStdOperatorTable.NOT, input);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2238,final List<RexNode> cnfOperands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2261,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2275,return toCnf2(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2278,return toCnf2(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2316,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2327,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2342,final Map<String, RexNode> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2357,List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2377,return Lists.transform(list, TO_STRING);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2399,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2416,return toDnf(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2419,return toDnf(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2429,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2515,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2516,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2517,public boolean test(Project project) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2518,for (RexNode node : project.getProjects()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2519,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2520,node.accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2522,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2525,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2531,new PredicateImpl<Filter>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2532,public boolean test(Filter filter) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2533,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2534,filter.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2535,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2537,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2543,public static final Predicate<Join> JOIN_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2544,new PredicateImpl<Join>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2545,public boolean test(Join join) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2546,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2547,join.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2548,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2550,return true;
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,52,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,71,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,139,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,161,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,23,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,33,private static final Function1<?, ?> SLICE =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,34,new Function1<Object[], Object>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,35,public Object apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,36,return a0[0];
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,40,private static final Function1<Object[], Row> ARRAY_TO_ROW =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,41,new Function1<Object[], Row>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,42,public Row apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,43,return Row.asCopy(a0);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,53,return enumerable.select((Function1<E[], E>) SLICE);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,59,return enumerable.select(ARRAY_TO_ROW);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,66,return new Supplier<Enumerable<Row>>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,67,public Enumerable<Row> get() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,68,return toRow(supplier.get());
core/src/main/java/org/apache/calcite/runtime/GeoFunctions.java,41,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/runtime/GeoFunctions.java,577,this.g = Preconditions.checkNotNull(g);
core/src/main/java/org/apache/calcite/runtime/GeoFunctions.java,609,this.mg = Preconditions.checkNotNull(mg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/runtime/Hook.java,91,private final List<Function<Object, Object>> handlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,94,private final ThreadLocal<List<Function<Object, Object>>> threadHandlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,95,new ThreadLocal<List<Function<Object, Object>>>() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,96,protected List<Function<Object, Object>> initialValue() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,97,return new ArrayList<>();
core/src/main/java/org/apache/calcite/runtime/Hook.java,115,public <T, R> Closeable add(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,117,handlers.add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,118,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,119,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,120,remove(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,126,private boolean remove(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,131,public <T, R> Closeable addThread(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,133,threadHandlers.get().add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,134,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,135,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,136,removeThread(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,142,private boolean removeThread(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,149,public static <V> Function<Holder<V>, Void> property(final V v) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,150,return new Function<Holder<V>, Void>() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,151,public Void apply(Holder<V> holder) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,152,holder.set(v);
core/src/main/java/org/apache/calcite/runtime/Hook.java,153,return null;
core/src/main/java/org/apache/calcite/runtime/Hook.java,160,for (Function<Object, Object> handler : handlers) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,161,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,163,for (Function<Object, Object> handler : threadHandlers.get()) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,164,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,179,Closeable EMPTY =
core/src/main/java/org/apache/calcite/runtime/Hook.java,180,new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,181,public void close() {}
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,30,import javax.net.ssl.HostnameVerifier;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,32,import javax.net.ssl.SSLSession;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,52,httpsConn.setHostnameVerifier(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,53,new HostnameVerifier() {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,54,public boolean verify(String arg0, SSLSession arg1) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,55,return true;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,54,new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,55,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,56,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,57,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,58,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,59,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,60,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,62,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,64,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,65,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,66,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,67,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,68,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,70,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,76,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,77,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,78,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,79,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,80,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,81,if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,82,long v = resultSet.getLong(i + 1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,83,if (v == 0 && resultSet.wasNull()) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,84,list.add(null);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,86,list.add(v);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,89,list.add(resultSet.getObject(i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,92,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,94,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,230,return new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,231,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,232,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,233,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,235,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,236,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,240,assert columnCount == primitives.length;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,241,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,242,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,243,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,244,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,245,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,247,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,253,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,254,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,255,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,256,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,257,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,258,list.add(primitives[i].jdbcGet(resultSet, i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,260,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,262,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,78,new Function1<List<Object>, Enumerable<Object>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,79,public Enumerable<Object> apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,80,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,85,new Function1<Object[], Enumerable<Object[]>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,86,public Enumerable<Object[]> apply(Object[] lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,87,final List<Enumerator<Object>> enumerators = new ArrayList<>();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,88,for (Object list : lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,89,enumerators.add(Linq4j.enumerator((List) list));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,91,final Enumerator<List<Object>> product = Linq4j.product(enumerators);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,92,return new AbstractEnumerable<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,93,public Enumerator<Object[]> enumerator() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,94,return Linq4j.transform(product,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,95,new Function1<List<Object>, Object[]>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,96,public Object[] apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,97,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,112,new ThreadLocal<Map<String, AtomicLong>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,114,return new HashMap<String, AtomicLong>();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2116,return new Function1<Object, Enumerable<ComparableList<Comparable>>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2117,public Enumerable<ComparableList<Comparable>> apply(Object row) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2118,return p2(new Object[] { row }, fieldCounts, withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2119,inputTypes);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2124,return new Function1<Object, Enumerable<FlatLists.ComparableList<Comparable>>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2125,public Enumerable<FlatLists.ComparableList<Comparable>> apply(Object lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2126,return p2((Object[]) lists, fieldCounts, withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2127,inputTypes);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2147,Linq4j.enumerator(list),
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2148,new Function1<Comparable, List<Comparable>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2149,public List<Comparable> apply(Comparable a0) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2150,return FlatLists.of(a0);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2166,new Function1<Entry<Comparable, Comparable>, List<Comparable>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2167,public List<Comparable> apply(Entry<Comparable, Comparable> e) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2168,return FlatLists.of(e.getKey(), e.getValue());
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,30,com.google.common.base.Function<FunctionParameter, String> NAME_FN =
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,31,new com.google.common.base.Function<FunctionParameter, String>() {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,32,public String apply(FunctionParameter p) {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,33,return p.getName();
core/src/main/java/org/apache/calcite/schema/Schemas.java,38,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/schema/Schemas.java,63,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,64,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,65,CalciteSchema.TableEntry> TO_TABLE_ENTRY =
core/src/main/java/org/apache/calcite/schema/Schemas.java,66,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,67,CalciteSchema.TableEntry>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,68,public CalciteSchema.TableEntry apply(
core/src/main/java/org/apache/calcite/schema/Schemas.java,69,CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,70,final CalciteSchema.TableEntry starTable = entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,72,== Schema.TableType.STAR;
core/src/main/java/org/apache/calcite/schema/Schemas.java,73,return entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,77,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,78,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,79,Lattice> TO_LATTICE =
core/src/main/java/org/apache/calcite/schema/Schemas.java,80,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,81,Lattice>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,82,public Lattice apply(CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,83,return entry.getLattice();
core/src/main/java/org/apache/calcite/schema/Schemas.java,248,return table.scan(root, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/schema/Schemas.java,256,return table.scan(root, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/schema/Schemas.java,451,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,452,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,453,return table.getRowType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,462,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,463,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,464,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,475,return Lists.transform(list, TO_TABLE_ENTRY);
core/src/main/java/org/apache/calcite/schema/Schemas.java,483,return Lists.transform(list, TO_LATTICE);
core/src/main/java/org/apache/calcite/schema/Schemas.java,491,final List<CalciteSchema.LatticeEntry> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/schema/Schemas.java,523,String t = Preconditions.checkNotNull(base);
core/src/main/java/org/apache/calcite/schema/Schemas.java,561,list.add(Pair.<String, Schema>of(s.getName(), s));
core/src/main/java/org/apache/calcite/schema/Schemas.java,575,this.map = ImmutableMap.<String, Object>of();
core/src/main/java/org/apache/calcite/schema/Schemas.java,601,new PathImpl(ImmutableList.<Pair<String, Schema>>of());
core/src/main/java/org/apache/calcite/schema/Statistics.java,48,return ImmutableList.<RelReferentialConstraint>of();
core/src/main/java/org/apache/calcite/schema/Statistics.java,62,return of(null, ImmutableList.<ImmutableBitSet>of(),
core/src/main/java/org/apache/calcite/schema/Statistics.java,63,referentialConstraints, ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/schema/Statistics.java,69,return of(rowCount, keys, ImmutableList.<RelReferentialConstraint>of(),
core/src/main/java/org/apache/calcite/schema/Statistics.java,70,ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/schema/Statistics.java,78,return of(rowCount, keys, ImmutableList.<RelReferentialConstraint>of(), collations);
core/src/main/java/org/apache/calcite/schema/Table.java,81,boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, SqlNode parent,
core/src/main/java/org/apache/calcite/schema/Table.java,82,CalciteConnectionConfig config);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,73,this.initMethod = Preconditions.checkNotNull(initMethod);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,74,this.addMethod = Preconditions.checkNotNull(addMethod);
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,110,this.key = Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,42,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,189,final Map<Integer, RexNode> projectMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,66,this.lattice = Preconditions.checkNotNull(lattice);
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,49,this.operator = Preconditions.checkNotNull(operator);
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,68,this.operator = Preconditions.checkNotNull(operator);
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,35,private static final Function<SqlLiteral, BitString> F =
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,36,new Function<SqlLiteral, BitString>() {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,37,public BitString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,38,return ((SqlBinaryStringLiteral) literal).getBitString();
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,73,BitString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlCall.java,87,operandList.toArray(new SqlNode[operandList.size()]));
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,33,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,157,return Lists.transform(operator.getParamNames(),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,158,new Function<String, SqlNode>() {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,159,public SqlNode apply(String paramName) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,160,for (SqlNode operand2 : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,161,final SqlCall call2 = (SqlCall) operand2;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,162,assert operand2.getKind() == SqlKind.ARGUMENT_ASSIGNMENT;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,163,final SqlIdentifier id = call2.operand(1);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,164,if (id.getSimple().equals(paramName)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,165,return call2.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,168,return DEFAULT_CALL;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,37,private static final Function<SqlLiteral, NlsString> F =
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,38,new Function<SqlLiteral, NlsString>() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,39,public NlsString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,40,return ((SqlCharStringLiteral) literal).getNlsString();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,86,NlsString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,31,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,344,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,358,Preconditions.checkNotNull(SqlTypeName.get(collectionName),
core/src/main/java/org/apache/calcite/sql/SqlDdl.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlDdl.java,34,this.operator = Preconditions.checkNotNull(operator);
core/src/main/java/org/apache/calcite/sql/SqlDescribeSchema.java,67,return ImmutableNullableList.<SqlNode>of(schema);
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,78,return ImmutableNullableList.<SqlNode>of(table, column);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,33,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,136,this.nullCollation = Preconditions.checkNotNull(context.nullCollation());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,138,Preconditions.checkNotNull(context.databaseProduct());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,816,private final Supplier<SqlDialect> dialect =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,817,Suppliers.memoize(new Supplier<SqlDialect>() {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,818,public SqlDialect get() {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,819,final SqlDialect dialect =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,820,SqlDialectFactoryImpl.simple(DatabaseProduct.this);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,821,if (dialect != null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,822,return dialect;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,824,return new SqlDialect(SqlDialect.EMPTY_CONTEXT
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,828,.withNullCollation(nullCollation));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,832,private String databaseProductName;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,833,private String quoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,834,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,838,this.databaseProductName =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,839,Preconditions.checkNotNull(databaseProductName);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,840,this.quoteString = quoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,841,this.nullCollation = Preconditions.checkNotNull(nullCollation);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,899,this.databaseProduct = Preconditions.checkNotNull(databaseProduct);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,905,this.nullCollation = Preconditions.checkNotNull(nullCollation);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,906,this.jethroInfo = Preconditions.checkNotNull(jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,19,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,43,private static final Function1<Integer, String> ARG_FN =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,44,new Function1<Integer, String>() {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,45,public String apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,46,return "arg" + a0;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,126,this.category = Preconditions.checkNotNull(category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,164,return Functions.generate(paramTypes.size(), ARG_FN);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,40,private static final Function<String, String> STAR_TO_EMPTY =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,41,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,42,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,43,return s.equals("*") ? "" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,47,private static final Function<String, String> EMPTY_TO_STAR =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,48,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,49,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,50,return s.equals("") ? "*" : s.equals("*") ? "\"*\"" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,134,return new SqlIdentifier(Lists.transform(names, STAR_TO_EMPTY), null, pos,
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,159,return Lists.transform(names, EMPTY_TO_STAR);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,178,String[] nameArray = names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,277,return new SqlIdentifier(Lists.transform(id.names, STAR_TO_EMPTY), null, id.pos,
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,278,id.componentPositions);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,112,TimeUnitRange.of(Preconditions.checkNotNull(startUnit), endUnit);
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,604,this.order = Preconditions.checkNotNull(order);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,63,this.natural = Preconditions.checkNotNull(natural);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,64,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,66,this.conditionType = Preconditions.checkNotNull(conditionType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,70,Preconditions.checkNotNull(conditionType.symbolValue(JoinConditionType.class));
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,71,Preconditions.checkNotNull(joinType.symbolValue(JoinType.class));
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,78,this.tableRef = Preconditions.checkNotNull(tableRef);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,79,this.pattern = Preconditions.checkNotNull(pattern);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,82,this.patternDefList = Preconditions.checkNotNull(patternDefList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,84,this.measureList = Preconditions.checkNotNull(measureList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,90,this.partitionList = Preconditions.checkNotNull(partitionList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,91,this.orderList = Preconditions.checkNotNull(orderList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,122,tableRef = Preconditions.checkNotNull(operand);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,134,patternDefList = Preconditions.checkNotNull((SqlNodeList) operand);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,138,measureList = Preconditions.checkNotNull((SqlNodeList) operand);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,31,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,61,this.pos = Preconditions.checkNotNull(pos);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,175,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,299,operandList.toArray(new SqlNode[operandList.size()]));
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,68,this.keywordList = Preconditions.checkNotNull(keywordList != null
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,75,this.windowDecls = Preconditions.checkNotNull(windowDecls != null
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,100,keywordList = Preconditions.checkNotNull((SqlNodeList) operand);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,118,windowDecls = Preconditions.checkNotNull((SqlNodeList) operand);
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,110,final List<SqlNode> operandList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,26,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,27,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,42,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,45,import com.google.common.collect.Iterables;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,74,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,91,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,389,new PredicateImpl<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,390,public boolean test(SqlOperator input) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,391,return input.getKind() == sqlKind;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,492,new PredicateImpl<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,493,public boolean test(SqlOperator operator) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,494,return operator.getSyntax() == syntax;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,504,new PredicateImpl<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,505,public boolean test(SqlOperator operator) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,506,SqlOperandCountRange od = operator.getOperandCountRange();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,507,return od.isValidCount(argTypes.size());
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,526,new PredicateImpl<SqlFunction>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,527,public boolean test(SqlFunction function) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,528,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,529,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,531,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,533,final List<RelDataType> permutedArgTypes;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,534,if (argNames != null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,537,final Map<Integer, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,538,for (Ord<String> argName : Ord.zip(argNames)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,539,final int i = function.getParamNames().indexOf(argName.e);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,540,if (i < 0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,541,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,543,map.put(i, argName.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,545,permutedArgTypes = Functions.generate(paramTypes.size(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,546,new Function1<Integer, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,547,public RelDataType apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,548,if (map.containsKey(a0)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,549,return argTypes.get(map.get(a0));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,551,return null;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,556,permutedArgTypes = Lists.newArrayList(argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,557,while (permutedArgTypes.size() < argTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,558,paramTypes.add(null);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,561,for (Pair<RelDataType, RelDataType> p
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,562,: Pair.zip(paramTypes, permutedArgTypes)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,563,final RelDataType argType = p.right;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,564,final RelDataType paramType = p.left;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,565,if (argType != null
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,566,&& !SqlTypeUtil.canCastFrom(paramType, argType, false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,567,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,570,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,594,sqlFunctions =
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,595,Lists.newArrayList(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,596,Iterables.filter(sqlFunctions,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,597,new PredicateImpl<SqlFunction>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,598,public boolean test(SqlFunction function) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,599,final List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,600,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,601,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,603,final RelDataType paramType = paramTypes.get(argType.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,604,return precList.compareTypePrecedence(paramType, bestMatch) >= 0;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,683,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,931,private final List<SqlNode> ancestors = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,948,if (predicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,955,if (postPredicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,21,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,243,new PredicateImpl<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,244,public boolean test(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,245,return input instanceof SqlIdentifier
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,247,.equals(UPPER_HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,250,new PredicateImpl<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,251,public boolean test(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,252,return input.getParserPosition().startsAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,21,import org.apache.calcite.adapter.enumerable.NotNullImplementor;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,24,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,66,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,67,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,68,RexCall call, List<Expression> operands) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,69,return Expressions.call(GET_COMPLETION_HINTS,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,70,Iterables.concat(Collections.singleton(ADVISOR), operands));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorHint.java,46,: names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/dialect/JethroDataSqlDialect.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/dialect/JethroDataSqlDialect.java,129,Preconditions.checkNotNull(name); // not currently used
core/src/main/java/org/apache/calcite/sql/dialect/JethroDataSqlDialect.java,225,ImmutableSetMultimap.<String, JethroSupportedFunction>of());
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,24,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,47,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,48,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,49,final List<RelDataType> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,50,for (int i = 1, n = opBinding.getOperandCount(); i < n; i++) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,51,if (i < n - 1) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,52,++i;
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,54,list.add(opBinding.getOperandType(i));
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,56,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,57,RelDataType type = typeFactory.leastRestrictive(list);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,58,if (opBinding.getOperandCount() % 2 == 1) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,59,type = typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,61,return type;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,23,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,59,ReturnTypes.cascade(ReturnTypes.ARG0, new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,60,public RelDataType transformType(SqlOperatorBinding binding,
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,61,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,63,SqlTypeTransform transform;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,64,if (binding.getOperandCount() < 3) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,65,transform = SqlTypeTransforms.FORCE_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,67,RelDataType defValueType = binding.getOperandType(2);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,69,? SqlTypeTransforms.FORCE_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,70,: SqlTypeTransforms.TO_NOT_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,72,return transform.transformType(binding, type);
core/src/main/java/org/apache/calcite/sql/fun/SqlQuantifyOperator.java,50,this.comparisonKind = Preconditions.checkNotNull(comparisonKind);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,2231,Pair.<SqlNode, AuxiliaryConverter>of(copy(call, f),
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,2242,return new SqlBasicCall(operator, list.toArray(new SqlNode[list.size()]),
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,25,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,60,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,61,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,62,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,394,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,237,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,242,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,247,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,282,this.parserFactory = Preconditions.checkNotNull(factory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,320,this.conformance = Preconditions.checkNotNull(conformance);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,321,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,322,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,323,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,324,this.parserFactory = Preconditions.checkNotNull(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,49,private static final Function<SqlNode, SqlParserPos> NODE_TO_POS =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,50,new Function<SqlNode, SqlParserPos>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,51,public SqlParserPos apply(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,52,return input.getParserPosition();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,193,return Iterables.transform(nodes, NODE_TO_POS);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,201,return sum(Lists.transform(nodes, NODE_TO_POS));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,23,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,50,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,574,return list.toArray(new String[list.size()]);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,578,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,611,Preconditions.checkNotNull(list);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,654,final Predicate<PrecedenceClimbingParser.Token> predicate =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,655,new PredicateImpl<PrecedenceClimbingParser.Token>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,656,public boolean test(PrecedenceClimbingParser.Token t) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,657,if (t instanceof PrecedenceClimbingParser.Op) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,658,final SqlOperator op = ((ToTreeListItem) t.o).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,659,return stopperKind != SqlKind.OTHER
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,660,&& op.kind == stopperKind
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,661,|| minPrec > 0
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,662,&& op.getLeftPrec() < minPrec;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,664,return false;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,668,PrecedenceClimbingParser parser = list.parser(start, predicate);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,817,public PrecedenceClimbingParser parser(int start, Predicate
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,818,<PrecedenceClimbingParser.Token> predicate) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,891,new PrecedenceClimbingParser.Special() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,892,public PrecedenceClimbingParser.Result apply(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,893,PrecedenceClimbingParser parser,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,894,PrecedenceClimbingParser.SpecialOp op) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,895,final List<PrecedenceClimbingParser.Token> tokens =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,896,parser.all();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,897,final SqlSpecialOperator op1 =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,898,(SqlSpecialOperator) ((ToTreeListItem) op.o).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,899,SqlSpecialOperator.ReduceResult r =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,900,op1.reduceExpr(tokens.indexOf(op),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,901,new TokenSequenceImpl(parser));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,902,return new PrecedenceClimbingParser.Result(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,903,tokens.get(r.startOrdinal),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,904,tokens.get(r.endOrdinal - 1),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,905,parser.atom(r.node));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,950,new ThreadLocal<Format>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,952,return new Format();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1145,return names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,41,this.elementType = Preconditions.checkNotNull(elementType);
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,48,this.consistency = Preconditions.checkNotNull(consistency);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,96,this.allowedRules = Preconditions.checkNotNull(allowedRules);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,97,this.composition = Preconditions.checkNotNull(composition);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,58,return optional.apply(i);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,123,while (min > 0 && optional.apply(min - 1)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,21,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,42,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,43,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,44,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,45,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,46,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,47,final RelDataType unknownType =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,48,callBinding.getValidator().getUnknownType();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,49,RelDataType knownType = unknownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,50,for (SqlNode operand : callBinding.operands()) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,51,knownType = callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,52,callBinding.getScope(), operand);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,53,if (!knownType.equals(unknownType)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,54,break;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,63,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,64,operandTypes[i] = knownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,75,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,76,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,77,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,78,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,79,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,80,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,81,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,84,: returnType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,94,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,95,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,96,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,97,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,98,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,99,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,100,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,101,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,102,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,115,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,116,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,117,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,118,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,119,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,120,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,121,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,122,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,123,typeFactory.createSqlType(SqlTypeName.VARCHAR, 1024);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,51,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,52,this.intervalQualifier = Preconditions.checkNotNull(intervalQualifier);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,87,TimeUnit thisStart = Preconditions.checkNotNull(typeName.getStartUnit());
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,90,Preconditions.checkNotNull(that.typeName.getStartUnit());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,21,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,29,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,30,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,65,Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,82,return family(families, Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,208,new PredicateImpl<Integer>() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,209,public boolean test(Integer number) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,210,return number == 1;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,291,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,487,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,189,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,194,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,195,final int n = opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,196,RelDataType type1 = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,197,for (int i = 0; i < n; i++) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,198,type1 = opBinding.getOperandType(i);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,199,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,200,break;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,203,return type1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,303,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,304,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,305,return opBinding.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,306,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,313,public static final SqlReturnTypeInference MULTISET =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,314,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,315,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,316,final SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,317,ExplicitOperatorBinding newBinding =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,318,new ExplicitOperatorBinding(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,319,opBinding,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,320,new AbstractList<RelDataType>() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,322,public RelDataType get(int index) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,323,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,325,.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,326,assert type != null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,327,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,330,public int size() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,331,return opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,334,RelDataType biggestElementType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,335,LEAST_RESTRICTIVE.inferReturnType(newBinding);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,336,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,337,biggestElementType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,338,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,386,public static final SqlReturnTypeInference DECIMAL_SCALE0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,387,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,388,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,389,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,390,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,391,if (SqlTypeUtil.isDecimal(type1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,392,if (type1.getScale() == 0) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,393,return type1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,395,int p = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,396,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,397,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,398,opBinding.getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,399,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,400,p,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,401,0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,402,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,403,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,405,.createTypeWithNullability(ret, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,407,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,410,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,426,public static final SqlReturnTypeInference DECIMAL_PRODUCT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,427,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,428,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,429,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,430,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,431,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,432,return typeFactory.createDecimalProduct(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,459,public static final SqlReturnTypeInference DECIMAL_QUOTIENT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,460,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,461,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,462,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,463,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,464,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,465,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,466,return typeFactory.createDecimalQuotient(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,503,public static final SqlReturnTypeInference DECIMAL_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,504,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,505,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,506,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,507,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,508,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,510,&& SqlTypeUtil.isExactNumeric(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,512,|| SqlTypeUtil.isDecimal(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,513,int p1 = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,514,int p2 = type2.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,515,int s1 = type1.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,516,int s2 = type2.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,518,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,519,int scale = Math.max(s1, s2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,520,final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,521,assert scale <= typeSystem.getMaxNumericScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,522,int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,523,precision =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,524,Math.min(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,525,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,526,typeSystem.getMaxNumericPrecision());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,527,assert precision > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,529,return typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,530,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,531,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,532,scale);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,536,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,574,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,575,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,576,final RelDataType argType0 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,577,final RelDataType argType1 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,579,final boolean containsAnyType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,581,|| (argType1.getSqlTypeName() == SqlTypeName.ANY);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,583,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,585,&& SqlTypeUtil.inCharOrBinaryFamilies(argType1))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,586,Preconditions.checkArgument(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,587,SqlTypeUtil.sameNamedType(argType0, argType1));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,589,SqlCollation pickedCollation = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,590,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,591,&& SqlTypeUtil.inCharFamily(argType0)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,592,if (!SqlTypeUtil.isCharTypeComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,593,opBinding.collectOperandTypes().subList(0, 2))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,594,throw opBinding.newError(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,595,RESOURCE.typeNotComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,596,argType0.getFullTypeString(),
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,597,argType1.getFullTypeString()));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,600,pickedCollation =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,601,SqlCollation.getCoercibilityDyadicOperator(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,602,argType0.getCollation(), argType1.getCollation());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,603,assert null != pickedCollation;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,607,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,608,argType0.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,609,if (SqlTypeUtil.isBoundedVariableWidth(argType1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,610,typeName = argType1.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,613,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,614,int typePrecision;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,615,final long x =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,616,(long) argType0.getPrecision() + (long) argType1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,617,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,618,final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,619,if (argType0.getPrecision() == RelDataType.PRECISION_NOT_SPECIFIED
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,620,|| argType1.getPrecision() == RelDataType.PRECISION_NOT_SPECIFIED
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,621,|| x > typeSystem.getMaxPrecision(typeName)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,622,typePrecision = RelDataType.PRECISION_NOT_SPECIFIED;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,624,typePrecision = (int) x;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,627,ret = typeFactory.createSqlType(typeName, typePrecision);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,628,if (null != pickedCollation) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,629,RelDataType pickedType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,630,if (argType0.getCollation().equals(pickedCollation)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,631,pickedType = argType0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,633,pickedType = argType1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,635,throw new AssertionError("should never come here");
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,637,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,638,typeFactory.createTypeWithCharsetAndCollation(ret,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,639,pickedType.getCharset(), pickedType.getCollation());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,641,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,666,public static final SqlReturnTypeInference SCOPE =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,667,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,668,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,669,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,670,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,671,return callBinding.getValidator().getNamespace(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,672,callBinding.getCall()).getRowType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,681,public static final SqlReturnTypeInference MULTISET_PROJECT0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,682,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,683,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,684,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,685,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,686,final RelDataType recordMultisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,687,opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,688,RelDataType multisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,689,recordMultisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,690,assert multisetType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,691,+ recordMultisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,692,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,693,multisetType.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,694,assert fields.size() > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,695,final RelDataType firstColType = fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,696,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,697,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,698,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,706,public static final SqlReturnTypeInference MULTISET_RECORD =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,707,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,708,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,709,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,710,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,711,final RelDataType multisetType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,712,RelDataType componentType = multisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,713,assert componentType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,714,+ multisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,715,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,717,.add(SqlUtil.deriveAliasFromOrdinal(0), componentType).build();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,718,return typeFactory.createMultisetType(type, -1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,725,public static final SqlReturnTypeInference RECORD_TO_SCALAR =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,726,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,727,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,728,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,729,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,731,final RelDataType recordType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,733,boolean isStruct = recordType.isStruct();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,734,int fieldCount = recordType.getFieldCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,736,assert isStruct && (fieldCount == 1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,738,RelDataTypeField fieldType = recordType.getFieldList().get(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,739,assert fieldType != null
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,740,: "expected a record type with one field: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,741,+ recordType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,742,final RelDataType firstColType = fieldType.getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,743,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,744,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,745,true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,756,public static final SqlReturnTypeInference AGG_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,757,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,759,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,760,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,762,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,763,if (opBinding.getGroupCount() == 0 || opBinding.hasFilter()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,764,return typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,766,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,778,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,780,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,781,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,783,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,785,return typeFactory.createTypeWithNullability(sumType, false);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,793,public static final SqlReturnTypeInference FRACTIONAL_RANK =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,794,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,796,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,797,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,798,return typeFactory.getTypeSystem().deriveFractionalRankType(typeFactory);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,806,public static final SqlReturnTypeInference RANK =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,807,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,809,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,810,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,811,return typeFactory.getTypeSystem().deriveRankType(typeFactory);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,815,public static final SqlReturnTypeInference AVG_AGG_FUNCTION =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,816,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,818,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,819,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,820,final RelDataType relDataType = typeFactory.getTypeSystem().deriveAvgAggType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,821,typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,822,if (opBinding.getGroupCount() == 0 || opBinding.hasFilter()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,823,return typeFactory.createTypeWithNullability(relDataType, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,825,return relDataType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,830,public static final SqlReturnTypeInference COVAR_FUNCTION =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,831,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,833,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,834,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,835,final RelDataType relDataType = typeFactory.getTypeSystem().deriveCovarType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,836,typeFactory, opBinding.getOperandType(0), opBinding.getOperandType(1));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,837,if (opBinding.getGroupCount() == 0 || opBinding.hasFilter()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,838,return typeFactory.createTypeWithNullability(relDataType, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,840,return relDataType;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,33,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,374,Preconditions.checkNotNull(to);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,375,Preconditions.checkNotNull(from);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,403,CacheBuilder.newBuilder().build(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,404,new CacheLoader<Set<SqlTypeName>, ImmutableSet<SqlTypeName>>() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,405,public ImmutableSet<SqlTypeName> load(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,407,return Sets.immutableEnumSet(key);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,47,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,48,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,49,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,50,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,51,return SqlTypeUtil.makeNullableIfOperandsAre(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,52,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,54,Preconditions.checkNotNull(typeToTransform));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,63,public static final SqlTypeTransform TO_NULLABLE_ALL =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,64,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,65,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,66,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,67,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,68,return typeFactory.createTypeWithNullability(type,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,69,SqlTypeUtil.allNullable(opBinding.collectOperandTypes()));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,78,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,79,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,80,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,81,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,82,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,83,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,84,false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,93,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,94,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,95,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,96,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,97,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,98,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,99,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,161,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,162,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,163,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,164,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,165,return typeToTransform.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,176,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,177,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,178,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,179,return opBinding.getTypeFactory().createMultisetType(typeToTransform,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,180,-1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,190,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,191,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,192,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,193,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,194,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,195,typeToTransform.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,196,assert fields.size() == 1;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,197,return fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,67,List<RelDataType> argTypes2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,203,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1175,ImmutableList.<RelDataType>of(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1176,ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/sql/util/SqlShuttle.java,111,this.clonedOperands = operands.toArray(new SqlNode[operands.size()]);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,212,.acceptCall(this, call, true, ArgHandlerImpl.<Void>instance());
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,28,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,85,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,30,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,61,Suppliers.memoize(
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,62,new Supplier<Resolved>() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,63,public Resolved get() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,64,assert temporaryGroupExprList == null;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,65,temporaryGroupExprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,66,try {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,67,return resolve();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,69,temporaryGroupExprList = null;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,152,return Pair.of(ImmutableList.<SqlNode>of(), groupExprs.build());
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,156,return Pair.of(ImmutableList.<SqlNode>of(),
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,163,return Pair.of(ImmutableList.<SqlNode>of(), ImmutableList.<SqlNode>of());
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,25,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,55,.where(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,56,new Predicate1<SqlMoniker>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,57,public boolean apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,58,return input.getType() == SqlMonikerType.SCHEMA;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,61,.select(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,62,new Function1<SqlMoniker, List<String>>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,63,public List<String> apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,64,return input.getFullyQualifiedNames();
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,67,.into(Sets.<List<String>>newHashSet());
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,465,Collections.sort(resolved.resolves, c);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,77,this.parentScope = Preconditions.checkNotNull(parentScope);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,177,resolvedNamespace = Preconditions.checkNotNull(resolveImpl(id));
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,60,Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,70,return Lists.transform(children, ScopeChild.NAMESPACE_FN);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,79,return Lists.transform(children, ScopeChild.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,40,this.names = Preconditions.checkNotNull(names);
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,32,static final Function<ScopeChild, SqlValidatorNamespace> NAMESPACE_FN =
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,33,new Function<ScopeChild, SqlValidatorNamespace>() {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,34,public SqlValidatorNamespace apply(ScopeChild input) {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,35,return input.namespace;
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,39,static final Function<ScopeChild, String> NAME_FN =
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,40,new Function<ScopeChild, String>() {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,41,public String apply(ScopeChild input) {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,42,return input.name;
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,40,this.id = Preconditions.checkNotNull(id);
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,45,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,36,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,79,return Lists.transform(types,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,80,new com.google.common.base.Function<RelDataType, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,81,public RelDataType apply(RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,82,return toSql(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,101,new Function<FunctionParameter, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,102,public RelDataType apply(FunctionParameter input) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,103,return input.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,78,return Lists.transform(function.getParameters(), FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,24,import org.apache.calcite.linq4j.tree.ParameterExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,48,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,72,Preconditions.checkNotNull(paramTypes),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,79,FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,129,final List<Object> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,184,Expressions.lambda(bb.toBlock(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,185,Collections.<ParameterExpression>emptyList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,103,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,104,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,106,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,301,this.opTab = Preconditions.checkNotNull(opTab);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,302,this.catalogReader = Preconditions.checkNotNull(catalogReader);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,303,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,304,this.conformance = Preconditions.checkNotNull(conformance);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1562,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1563,Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1579,Preconditions.checkNotNull(scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1580,Preconditions.checkNotNull(expr);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1608,Bug.upgrade("guava-17");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1609,return Preconditions.checkNotNull(scope.nullifyType(operand, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1833,this.nullCollation = Preconditions.checkNotNull(nullCollation);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2304,Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2305,Preconditions.checkNotNull(enclosingNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2957,Preconditions.checkNotNull(targetRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3199,names = Lists.transform(names,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3200,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3201,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3202,return s.toUpperCase(Locale.ROOT);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3528,String inputs = Joiner.on(", ").join(scope.getChildNames());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3738,Preconditions.checkNotNull(orderScope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3956,final Set<String> aliases = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5123,ImmutableList.<RelDataType>of(), null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5311,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5328,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5345,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5362,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,28,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,237,return Lists.transform(steps(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,238,new Function<Step, String>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,239,public String apply(Step input) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,240,return input.name;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,263,this.parent = Preconditions.checkNotNull(parent);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,267,this.kind = Preconditions.checkNotNull(kind);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,317,this.namespace = Preconditions.checkNotNull(namespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,320,this.path = Preconditions.checkNotNull(path);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,52,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,57,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,222,Lists.transform(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,223,sourceRowType.getFieldList(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,224,new RelDataTypeField.ToFieldIndex()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,272,new Function<SqlNode, List<String>>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,273,public List<String> apply(SqlNode o) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,274,return ((SqlIdentifier) o).names;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,719,GroupAnalyzer groupAnalyzer,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,813,List<ImmutableBitSet> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,917,Set<ImmutableBitSet> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,942,final Set<List<ImmutableBitSet>> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,946,Set<ImmutableBitSet> flattenedBitSets = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1051,: ImmutableList.<SqlValidatorNamespace>of();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1139,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1140,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1141,return Util.first(original, "EXPR$") + attempt;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1146,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1147,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1148,return Util.first(original, "$f") + Math.max(size, attempt);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,23,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,33,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,51,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,56,this(validator, table, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,111,return new TableNamespace(
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,112,validator, validatorTable, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,154,final Predicate<SqlNode> nameMatches = new PredicateImpl<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,156,if (sqlNode instanceof SqlIdentifier) {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,157,final SqlIdentifier identifier = (SqlIdentifier) sqlNode;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,158,return Util.last(identifier.names).equals(extendedField.getName());
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,160,return false;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,164,Iterables.find(extendList.getList(), nameMatches);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,81,map.put(parameterType,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,82,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,83,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,84,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,85,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,86,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,87,return (RexNode) method.invoke(ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,88,cx, call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,90,throw new RuntimeException("while converting " + call, e);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,127,map.put(opClass,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,128,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,129,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,130,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,131,return (RexNode) method.invoke(ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,132,cx, call.getOperator(), call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,134,throw new RuntimeException("while converting " + call, e);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,194,alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,195,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,196,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,197,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,198,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,199,Preconditions.checkArgument(call.getOperator() == alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,201,final SqlCall newCall =
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,202,target.createCall(SqlParserPos.ZERO, call.getOperandList());
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,203,return cx.convertExpression(newCall);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,89,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,90,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,97,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,98,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,100,import com.google.common.collect.Multimaps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,121,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,169,private final HashSet<LogicalCorrelate> generatedCorRels = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,264,return new Function2<RelNode, RelNode, Void>() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,265,public Void apply(RelNode oldNode, RelNode newNode) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,266,if (cm.mapRefRelToCorRef.containsKey(oldNode)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,267,cm.mapRefRelToCorRef.putAll(newNode,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,268,cm.mapRefRelToCorRef.get(oldNode));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,270,if (oldNode instanceof LogicalCorrelate
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,271,&& newNode instanceof LogicalCorrelate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,272,LogicalCorrelate oldCor = (LogicalCorrelate) oldNode;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,273,CorrelationId c = oldCor.getCorrelationId();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,274,if (cm.mapCorToCorRel.get(c) == oldNode) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,275,cm.mapCorToCorRel.put(c, newNode);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,278,if (generatedCorRels.contains(oldNode)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,279,generatedCorRels.add((LogicalCorrelate) newNode);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,282,return null;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,323,projectPulledAboveLeftCorrelator, null, ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,334,ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,354,List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,374,ImmutableSortedMap.<CorDef, Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,466,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,534,Map<Integer, Integer> combinedMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,546,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,557,List<Integer> aggArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,642,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,758,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,797,return new Frame(r, r, ImmutableSortedMap.<CorDef, Integer>of(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,905,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1123,ImmutableSet.<CorrelationId>of(), rel.getJoinType().toJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1155,ImmutableSet.<CorrelationId>of(), rel.getJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1159,Map<Integer, Integer> mapOldToNewOutputs = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1259,List<Pair<RexNode, String>> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1307,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1415,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1474,this.currentRel = Preconditions.checkNotNull(currentRel);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1475,this.map = Preconditions.checkNotNull(map);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1476,this.cm = Preconditions.checkNotNull(cm);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1858,List<RexNode> tmpRightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1859,List<RexNode> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1958,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1977,operand(LogicalAggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2027,final Set<Integer> isCountStar = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2065,List<RexNode> rightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2066,List<RexNode> tmpCorrelatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2076,List<RexFieldAccess> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2077,List<RexInputRef> correlatedInputRefJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2231,Pair.<RexNode, String>of(rexBuilder.makeLiteral(true),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2236,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2251,List<RexNode> joinOutputProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2282,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2293,argList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2312,List<RexNode> newAggOutputProjectList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2376,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2435,Set<Integer> isCount = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2645,Multimaps.newSortedSetMultimap(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2646,new HashMap<RelNode, Collection<CorRef>>(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2647,new Supplier<TreeSet<CorRef>>() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2648,public TreeSet<CorRef> get() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2649,Bug.upgrade("use MultimapBuilder when we're on Guava-16");
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2650,return Sets.newTreeSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2763,this.r = Preconditions.checkNotNull(r);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,68,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,851,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,852,public ImmutableBitSet apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,853,return Mappings.apply(inputMapping, input);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,76,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,78,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,131,private final Map<RelNode, RelNode> oldToNewRelMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,204,final List<RexNode> structuringExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,313,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,314,public Integer apply(Integer oldInput) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,315,return getNewForOldInput(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,470,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,502,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,584,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,596,Pair.<RexNode, String>of(rexBuilder.makeLiteral(false),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,611,Collections.<String>nCopies(call.getOperands().size(), null),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,659,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,840,final List<Pair<RexNode, String>> flattenedExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,173,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,175,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,181,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,182,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,320,this.cluster = Preconditions.checkNotNull(cluster);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,719,final Map<Integer, Integer> squished = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,721,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,737,final List<Pair<RexNode, String>> undoProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,763,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1039,leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1109,false, ImmutableList.<Integer>of(), -1, longType, null),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1114,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1428,new Function<Pair<RexNode, SqlNode>, RexNode>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1429,public RexNode apply(Pair<RexNode, SqlNode> pair) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1430,return rexBuilder.makeCall(comparisonOp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1431,pair.left,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1432,ensureSqlType(pair.left.getType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1433,bb.convertExpression(pair.right)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2170,List<RexNode> newOperands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2202,final Map<String, TreeSet<String>> subsetMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2412,joinCond, ImmutableSet.<CorrelationId>of(), joinType, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2424,final List<CorrelationId> correlNames = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2629,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2740,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3225,final Supplier<Blackboard> bb = new Supplier<Blackboard>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3226,public Blackboard get() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3227,RexNode sourceRef = rexBuilder.makeRangeReference(scan);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3228,return createInsertBlackboard(table, sourceRef,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3229,table.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3296,Collections.<RexNode>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3299,Collections.<String>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3316,final Supplier<Blackboard> bb = new Supplier<Blackboard>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3317,public Blackboard get() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3318,return createInsertBlackboard(targetTable, sourceRef,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3319,targetColumnNames);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3798,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4104,final List<Integer> leftJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4315,return Pair.<RexNode, Map<String, Integer>>of(c, fields.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4512,subQuery = Preconditions.checkNotNull(getSubQuery(expr));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4513,rex = Preconditions.checkNotNull(subQuery.expr);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4560,return Preconditions.checkNotNull(rex);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4753,private final Map<String, String> nameMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5224,ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,100,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,101,SqlStdOperatorTable.CHARACTER_LENGTH,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,103,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,104,SqlStdOperatorTable.IS_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,106,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,107,SqlStdOperatorTable.IS_NOT_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,112,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,113,SqlStdOperatorTable.CAST,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,114,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,115,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,116,return convertCast(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,119,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,120,SqlStdOperatorTable.IS_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,121,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,122,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,123,return convertIsDistinctFrom(cx, call, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,126,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,127,SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,128,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,129,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,130,return convertIsDistinctFrom(cx, call, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,134,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,135,SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,136,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,137,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,138,return convertPlus(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,143,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,144,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,145,final RexCall e =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,146,(RexCall) StandardConvertletTable.this.convertCall(cx, call,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,147,call.getOperator());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,148,switch (e.getOperands().get(0).getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,149,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,150,case TIME:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,151,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,152,return convertDatetimeMinus(cx, SqlStdOperatorTable.MINUS_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,153,call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,154,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,155,return e;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,169,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,170,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,171,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,172,final RexNode operand0 =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,173,cx.convertExpression(call.getOperandList().get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,174,final RexNode operand1 =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,175,cx.convertExpression(call.getOperandList().get(1));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,176,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,177,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,178,return rexBuilder.makeCall(type, SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,179,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,180,rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,181,operand0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,182,rexBuilder.makeCast(type, operand0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,183,rexBuilder.makeCast(type, operand1)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,188,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,189,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,190,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,191,final List<RexNode> operands = convertExpressionList(cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,192,call.getOperandList(), SqlOperandTypeChecker.Consistency.NONE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,193,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,194,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,195,final List<RexNode> exprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,196,for (int i = 1; i < operands.size() - 1; i += 2) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,197,exprs.add(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,198,RelOptUtil.isDistinctFrom(rexBuilder, operands.get(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,199,operands.get(i), true));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,200,exprs.add(operands.get(i + 1));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,202,if (operands.size() % 2 == 0) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,203,exprs.add(Util.last(operands));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,205,exprs.add(rexBuilder.makeNullLiteral(type));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,207,return rexBuilder.makeCall(type, SqlStdOperatorTable.CASE, exprs);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,212,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,213,SqlStdOperatorTable.NOT_LIKE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,214,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,215,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,216,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,217,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,218,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,219,SqlStdOperatorTable.LIKE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,220,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,221,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,222,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,227,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,228,SqlStdOperatorTable.NOT_SIMILAR_TO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,229,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,230,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,231,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,232,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,233,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,234,SqlStdOperatorTable.SIMILAR_TO.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,235,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,236,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,237,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,242,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,243,SqlStdOperatorTable.UNARY_PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,244,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,245,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,246,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,247,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,252,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,253,SqlStdOperatorTable.DOT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,254,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,255,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,256,return cx.getRexBuilder().makeCall(SqlStdOperatorTable.DOT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,257,cx.convertExpression(call.operand(0)),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,258,cx.getRexBuilder().makeLiteral(call.operand(1).toString()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,262,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,263,SqlStdOperatorTable.AS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,264,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,265,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,266,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,267,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,271,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,272,SqlStdOperatorTable.SQRT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,273,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,274,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,275,SqlNode expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,276,SqlStdOperatorTable.POWER.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,277,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,278,call.operand(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,279,SqlLiteral.createExactNumeric(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,281,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,301,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,302,SqlStdOperatorTable.AVG,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,304,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,305,SqlStdOperatorTable.STDDEV_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,307,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,308,SqlStdOperatorTable.STDDEV_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,310,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,311,SqlStdOperatorTable.STDDEV,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,313,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,314,SqlStdOperatorTable.VAR_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,316,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,317,SqlStdOperatorTable.VAR_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,319,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,320,SqlStdOperatorTable.VARIANCE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,334,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,335,SqlStdOperatorTable.ELEMENT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,336,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,337,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,338,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,339,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,340,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,341,cx.getValidator().getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,342,if (!type.getComponentType().isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,343,return cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,344,SqlStdOperatorTable.ELEMENT_SLICE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,345,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,346,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,350,return StandardConvertletTable.this.convertCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,351,cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,352,call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,359,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,360,SqlStdOperatorTable.ELEMENT_SLICE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,361,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,362,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,363,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,364,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,365,final RexNode expr =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,366,cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,367,SqlStdOperatorTable.ELEMENT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,368,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,369,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,370,return cx.getRexBuilder().makeFieldAccess(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,371,expr,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,372,0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,740,ImmutableList.<RexNode>of(cx.getRexBuilder().makeLiteral(key)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,760,new RexCallBinding(cx.getTypeFactory(), fun, exprs, ImmutableList.<RelCollation>of()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,855,final List<RexNode> exprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,883,final List<RelDataType> nonCharacterTypes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,40,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,203,this.context = Preconditions.checkNotNull(c);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,208,Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,209,this.executor = executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,215,this.convertletTable = Preconditions.checkNotNull(convertletTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,220,this.operatorTable = Preconditions.checkNotNull(operatorTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,239,this.parserConfig = Preconditions.checkNotNull(parserConfig);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,246,Preconditions.checkNotNull(sqlToRelConverterConfig);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,265,return programs(Programs.listOf(Preconditions.checkNotNull(ruleSets)));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,279,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/tools/Programs.java,67,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/Programs.java,79,private static final Function<RuleSet, Program> RULE_SET_TO_PROGRAM =
core/src/main/java/org/apache/calcite/tools/Programs.java,80,new Function<RuleSet, Program>() {
core/src/main/java/org/apache/calcite/tools/Programs.java,81,public Program apply(RuleSet ruleSet) {
core/src/main/java/org/apache/calcite/tools/Programs.java,82,return of(ruleSet);
core/src/main/java/org/apache/calcite/tools/Programs.java,159,return Lists.transform(Arrays.asList(ruleSets), RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,164,return Lists.transform(ruleSets, RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,195,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,196,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,197,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,198,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,199,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,200,final HepPlanner hepPlanner = new HepPlanner(hepProgram,
core/src/main/java/org/apache/calcite/tools/Programs.java,201,null, noDag, null, RelOptCostImpl.FACTORY);
core/src/main/java/org/apache/calcite/tools/Programs.java,203,List<RelMetadataProvider> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Programs.java,204,if (metadataProvider != null) {
core/src/main/java/org/apache/calcite/tools/Programs.java,205,list.add(metadataProvider);
core/src/main/java/org/apache/calcite/tools/Programs.java,207,hepPlanner.registerMetadataProviders(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,208,RelMetadataProvider plannerChain =
core/src/main/java/org/apache/calcite/tools/Programs.java,209,ChainedRelMetadataProvider.of(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,210,rel.getCluster().setMetadataProvider(plannerChain);
core/src/main/java/org/apache/calcite/tools/Programs.java,212,hepPlanner.setRoot(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,213,return hepPlanner.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,226,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,227,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,228,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,229,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,230,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,231,final int joinCount = RelOptUtil.countJoins(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,232,final Program program;
core/src/main/java/org/apache/calcite/tools/Programs.java,233,if (joinCount < minJoinCount) {
core/src/main/java/org/apache/calcite/tools/Programs.java,234,program = ofRules(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,241,.build();
core/src/main/java/org/apache/calcite/tools/Programs.java,242,final Program program1 =
core/src/main/java/org/apache/calcite/tools/Programs.java,243,of(hep, false, DefaultRelMetadataProvider.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,249,final List<RelOptRule> list = Lists.newArrayList(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,250,list.removeAll(
core/src/main/java/org/apache/calcite/tools/Programs.java,251,ImmutableList.of(JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,252,JoinAssociateRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,253,JoinPushThroughJoinRule.LEFT,
core/src/main/java/org/apache/calcite/tools/Programs.java,254,JoinPushThroughJoinRule.RIGHT));
core/src/main/java/org/apache/calcite/tools/Programs.java,255,list.add(bushy
core/src/main/java/org/apache/calcite/tools/Programs.java,256,? MultiJoinOptimizeBushyRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,257,: LoptOptimizeJoinRule.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,258,final Program program2 = ofRules(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,260,program = sequence(program1, program2);
core/src/main/java/org/apache/calcite/tools/Programs.java,262,return program.run(
core/src/main/java/org/apache/calcite/tools/Programs.java,263,planner, rel, requiredOutputTraits, materializations, lattices);
core/src/main/java/org/apache/calcite/tools/Programs.java,285,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,286,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,287,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,288,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,289,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,290,return null;
core/src/main/java/org/apache/calcite/tools/Programs.java,304,new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,305,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,306,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,307,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,308,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,309,planner.setRoot(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,311,for (RelOptMaterialization materialization : materializations) {
core/src/main/java/org/apache/calcite/tools/Programs.java,312,planner.addMaterialization(materialization);
core/src/main/java/org/apache/calcite/tools/Programs.java,314,for (RelOptLattice lattice : lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,315,planner.addLattice(lattice);
core/src/main/java/org/apache/calcite/tools/Programs.java,318,final RelNode rootRel2 =
core/src/main/java/org/apache/calcite/tools/Programs.java,320,? rel
core/src/main/java/org/apache/calcite/tools/Programs.java,321,: planner.changeTraits(rel, requiredOutputTraits);
core/src/main/java/org/apache/calcite/tools/Programs.java,322,assert rootRel2 != null;
core/src/main/java/org/apache/calcite/tools/Programs.java,324,planner.setRoot(rootRel2);
core/src/main/java/org/apache/calcite/tools/Programs.java,325,final RelOptPlanner planner2 = planner.chooseDelegate();
core/src/main/java/org/apache/calcite/tools/Programs.java,326,final RelNode rootRel3 = planner2.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,327,assert rootRel3 != null : "could not implement exp";
core/src/main/java/org/apache/calcite/tools/Programs.java,328,return rootRel3;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,75,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,76,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,119,private static final Function<RexNode, String> FN_TYPE =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,120,new Function<RexNode, String>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,121,public String apply(RexNode input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,122,return input + ": " + input.getType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,224,return new RelBuilderFactory() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,225,public RelBuilder create(RelOptCluster cluster, RelOptSchema schema) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,226,return new RelBuilder(context, cluster, schema);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,436,Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,437,Preconditions.checkNotNull(fieldName);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,547,+ "; operands: " + Lists.transform(operandList, FN_TYPE));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,658,return groupKey(ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,722,new Function<ImmutableBitSet, ImmutableList<RexNode>>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,723,public ImmutableList<RexNode> apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,724,return fields(ImmutableIntList.of(input.toArray()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,899,throw RESOURCE.tableNotFound(Joiner.on(".").join(names)).ex();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,963,return project(nodes, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1045,field = new Field(ImmutableSet.<String>of(), fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1287,fields.add(new Field(ImmutableSet.<String>of(), fieldType));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1298,fields.add(new Field(ImmutableSet.<String>of(), fieldType));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1308,fields.add(new Field(ImmutableSet.<String>of(), fieldType));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1406,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1410,return join(joinType, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1494,Lists.transform(pair.fields, new Function<Field, Field>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1495,public Field apply(Field field) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1497,.add(alias).build(), field.right);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1668,return sortLimit(offset, fetch, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1820,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1830,Lists.transform(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1831,aggregateCalls, new Function<AggregateCall, AggCall>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1832,public AggCall apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1833,return new AggCallImpl2(input);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1935,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1980,this.aggregateCall = Preconditions.checkNotNull(aggregateCall);
core/src/main/java/org/apache/calcite/util/BitSets.java,88,return new Iterable<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,89,public Iterator<Integer> iterator() {
core/src/main/java/org/apache/calcite/util/BitSets.java,90,return new Iterator<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,91,int i = bitSet.nextSetBit(0);
core/src/main/java/org/apache/calcite/util/BitSets.java,93,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/BitSets.java,94,return i >= 0;
core/src/main/java/org/apache/calcite/util/BitSets.java,97,public Integer next() {
core/src/main/java/org/apache/calcite/util/BitSets.java,98,int prev = i;
core/src/main/java/org/apache/calcite/util/BitSets.java,99,i = bitSet.nextSetBit(i + 1);
core/src/main/java/org/apache/calcite/util/BitSets.java,100,return prev;
core/src/main/java/org/apache/calcite/util/BitSets.java,103,public void remove() {
core/src/main/java/org/apache/calcite/util/BitSets.java,104,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/CancelFlag.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,39,this.atomicBoolean = Preconditions.checkNotNull(atomicBoolean);
core/src/main/java/org/apache/calcite/util/Compatible.java,25,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/util/Compatible.java,77,new Class<?>[] {Compatible.class},
core/src/main/java/org/apache/calcite/util/Compatible.java,78,new InvocationHandler() {
core/src/main/java/org/apache/calcite/util/Compatible.java,80,throws Throwable {
core/src/main/java/org/apache/calcite/util/Compatible.java,81,if (method.getName().equals("asMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,83,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,85,final Method guavaMethod = Maps.class.getMethod(
core/src/main/java/org/apache/calcite/util/Compatible.java,86,method.getName(), method.getParameterTypes());
core/src/main/java/org/apache/calcite/util/Compatible.java,87,return guavaMethod.invoke(null, args);
core/src/main/java/org/apache/calcite/util/Compatible.java,89,Set set = (Set) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,90,Function function = (Function) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,91,return CompatibleGuava11.asMap(set, function);
core/src/main/java/org/apache/calcite/util/Compatible.java,94,if (method.getName().equals("navigableSet")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,95,ImmutableSortedSet set = (ImmutableSortedSet) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,96,return CompatibleGuava11.navigableSet(set);
core/src/main/java/org/apache/calcite/util/Compatible.java,98,if (method.getName().equals("navigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,99,ImmutableSortedMap map = (ImmutableSortedMap) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,100,return CompatibleGuava11.navigableMap(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,102,if (method.getName().equals("immutableNavigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,103,Map map = (Map) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,104,ImmutableSortedMap sortedMap = ImmutableSortedMap.copyOf(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,105,return CompatibleGuava11.navigableMap(sortedMap);
core/src/main/java/org/apache/calcite/util/Compatible.java,107,if (method.getName().equals("setSchema")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,108,Connection connection = (Connection) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,109,String schema = (String) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,111,connection.getClass().getMethod("setSchema", String.class);
core/src/main/java/org/apache/calcite/util/Compatible.java,112,return method1.invoke(connection, schema);
core/src/main/java/org/apache/calcite/util/Compatible.java,114,if (method.getName().equals("getParameterName")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,115,final Method m = (Method) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,116,final int i = (Integer) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,117,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,118,final Method method1 =
core/src/main/java/org/apache/calcite/util/Compatible.java,119,m.getClass().getMethod("getParameters");
core/src/main/java/org/apache/calcite/util/Compatible.java,120,Object parameters = method1.invoke(m);
core/src/main/java/org/apache/calcite/util/Compatible.java,121,final Object parameter = Array.get(parameters, i);
core/src/main/java/org/apache/calcite/util/Compatible.java,122,final Method method3 = parameter.getClass().getMethod("getName");
core/src/main/java/org/apache/calcite/util/Compatible.java,123,return method3.invoke(parameter);
core/src/main/java/org/apache/calcite/util/Compatible.java,125,return "arg" + i;
core/src/main/java/org/apache/calcite/util/Compatible.java,128,return null;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,20,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,41,import static com.google.common.base.Preconditions.checkNotNull;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,67,return super.retainAll(checkNotNull(c)); // GWT compatibility
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,83,checkNotNull(collection); // for GWT
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,242,this.set = checkNotNull(set);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,243,this.function = checkNotNull(function);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,342,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,355,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,395,if (com.google.common.base.Objects.equal(o, entry.getValue())) {
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,406,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,408,Set<K> toRemove = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,420,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,422,Set<K> toRetain = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,457,this.backingIterator = checkNotNull(backingIterator);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,27,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,53,public static final Comparator<ImmutableBitSet> COMPARATOR =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,54,new Comparator<ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,55,public int compare(ImmutableBitSet o1, ImmutableBitSet o2) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,56,if (o1.equals(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,57,return 0;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,59,if (o1.contains(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,60,return -1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,62,if (o2.contains(o1)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,63,return 1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,65,return o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,86,public static final Function<? super BitSet, ImmutableBitSet> FROM_BIT_SET =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,87,new Function<BitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,88,public ImmutableBitSet apply(BitSet input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,89,return ImmutableBitSet.of(BitSets.toIter(input));
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,260,List<List<ImmutableBitSet>> singletons = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,261,for (Integer bit : this) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,266,new Function<List<ImmutableBitSet>, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,267,public ImmutableBitSet apply(List<ImmutableBitSet> input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,268,return ImmutableBitSet.union(input);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,468,public int compareTo(ImmutableBitSet o) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,891,return Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,892,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,893,public ImmutableBitSet apply(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,894,return bitSet.permute(map);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,924,Maps.newTreeMap();
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,207,private final List<E> contents = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,94,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,95,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,96,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,97,if (!exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,98,bounds[0] = Math.min(bounds[0], start);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,99,bounds[1] = Math.max(bounds[1], end);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,139,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,140,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,141,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,142,if (start <= n && n <= end) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,143,bs[0] = !exclude;
core/src/main/java/org/apache/calcite/util/NameSet.java,37,public static final Comparator<String> COMPARATOR =
core/src/main/java/org/apache/calcite/util/NameSet.java,38,new Comparator<String>() {
core/src/main/java/org/apache/calcite/util/NameSet.java,39,public int compare(String o1, String o2) {
core/src/main/java/org/apache/calcite/util/NameSet.java,40,int c = o1.compareToIgnoreCase(o2);
core/src/main/java/org/apache/calcite/util/NameSet.java,41,if (c == 0) {
core/src/main/java/org/apache/calcite/util/NameSet.java,42,c = o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/NameSet.java,44,return c;
core/src/main/java/org/apache/calcite/util/Pair.java,232,return new Iterable<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,233,public Iterator<Pair<K, V>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,234,final Iterator<? extends K> kIterator = ks.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,235,final Iterator<? extends V> vIterator = vs.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,237,return new Iterator<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,238,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,239,return kIterator.hasNext() && vIterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,243,public Pair<K, V> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,244,return (Pair<K, V>) Pair.of(kIterator.next(), vIterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,247,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,248,kIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,249,vIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,291,return new Iterable<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,292,public Iterator<L> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,293,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,294,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,295,return new Iterator<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,296,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,297,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,300,public L next() {
core/src/main/java/org/apache/calcite/util/Pair.java,301,return iterator.next().getKey();
core/src/main/java/org/apache/calcite/util/Pair.java,304,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,305,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,322,return new Iterable<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,323,public Iterator<R> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,324,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,325,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,326,return new Iterator<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,327,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,328,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,331,public R next() {
core/src/main/java/org/apache/calcite/util/Pair.java,332,return iterator.next().getValue();
core/src/main/java/org/apache/calcite/util/Pair.java,335,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,336,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,379,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,380,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,381,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,382,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,383,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/util/Pair.java,385,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,386,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,387,T previous = first;
core/src/main/java/org/apache/calcite/util/Pair.java,389,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,390,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,393,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,394,final T current = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,395,final Pair<T, T> pair = of(previous, current);
core/src/main/java/org/apache/calcite/util/Pair.java,396,previous = current;
core/src/main/java/org/apache/calcite/util/Pair.java,397,return pair;
core/src/main/java/org/apache/calcite/util/Pair.java,400,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,401,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/Pair.java,419,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,420,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,421,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,422,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,423,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/util/Pair.java,425,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,426,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,427,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,428,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,431,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,432,return of(first, iterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,435,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,436,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,20,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,74,new Ordering<ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,75,public boolean lessThan(ImmutableBitSet e1, ImmutableBitSet e2) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,76,return e1.contains(e2);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,102,this(ordering, new HashMap<E, Node<E>>(), null, null);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,114,this(ordering, new HashMap<E, Node<E>>(), childFunction, parentFunction);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,125,this(ordering, new HashMap<E, Node<E>>(collection.size() * 3 / 2), null,
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,126,null);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,542,final Deque<E> unseen = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,543,unseen.addAll(getNonChildren());
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,644,closure(parentFunction, e, list, new HashSet<E>());
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,659,for (E p : Preconditions.checkNotNull(generator.apply(e))) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,714,return Lists.transform(list,
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,715,new Function<Node<E>, E>() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,716,public E apply(Node<E> node) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,717,return node.e;
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,22,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,110,Preconditions.checkNotNull(r);
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,191,if (predicate.apply(token)) {
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,355,new PrecedenceClimbingParser(ImmutableList.<Token>of());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,289,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,429,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/Sources.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/Sources.java,79,this.url = Preconditions.checkNotNull(url);
core/src/main/java/org/apache/calcite/util/Sources.java,88,this.file = Preconditions.checkNotNull(file);
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,53,return new Memo() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,54,public void close() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,55,if (previous == initialValue) {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,56,remove();
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,58,set(previous);
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,43,this.elements = Preconditions.checkNotNull(elements);
core/src/main/java/org/apache/calcite/util/Util.java,32,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/Util.java,100,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/util/Util.java,102,import static com.google.common.base.Preconditions.checkNotNull;
core/src/main/java/org/apache/calcite/util/Util.java,152,.build(
core/src/main/java/org/apache/calcite/util/Util.java,153,new CacheLoader<Class, Map<String, Enum>>() {
core/src/main/java/org/apache/calcite/util/Util.java,156,return enumConstants(clazz);
core/src/main/java/org/apache/calcite/util/Util.java,822,checkNotNull(throwable);
core/src/main/java/org/apache/calcite/util/Util.java,1606,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1607,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1608,return cast(iterable.iterator(), clazz);
core/src/main/java/org/apache/calcite/util/Util.java,1634,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1635,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1636,return new Filterator<>(iterable.iterator(), includeFilter);
core/src/main/java/org/apache/calcite/util/Util.java,1901,return v0 != null ? v0 : ImmutableList.<T>of();
core/src/main/java/org/apache/calcite/util/Util.java,2202,public static <K, V> Map<K, V> asIndexMap(
core/src/main/java/org/apache/calcite/util/Util.java,2206,Collections2.transform(values,
core/src/main/java/org/apache/calcite/util/Util.java,2207,new Function<V, Map.Entry<K, V>>() {
core/src/main/java/org/apache/calcite/util/Util.java,2208,public Map.Entry<K, V> apply(@Nullable V input) {
core/src/main/java/org/apache/calcite/util/Util.java,2209,return Pair.of(function.apply(input), input);
core/src/main/java/org/apache/calcite/util/Util.java,2290,return ImmutableList.copyOf((Iterable) lists);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,561,translationVector.addAll(Collections.<String>nCopies(count, null));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,572,translationVector.toArray(new String[translationVector.size()]);
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,44,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,45,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,46,return new BreadthFirstIterator<V, E>(graph, root);
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,48,return create(DefaultEdge.<V>factory());
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,43,return new DirectedGraph.EdgeFactory<V, DefaultEdge>() {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,44,public DefaultEdge createEdge(V v0, V v1) {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,45,return new DefaultEdge(v0, v1);
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,19,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,20,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,45,final List<V> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,46,buildListRecurse(list, Sets.<V>newHashSet(), graph, start);
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,45,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,46,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,47,return new TopologicalOrderIterator<V, E>(graph);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,64,setStringArray(list.toArray(new String[list.size()]));
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,93,return argsList.toArray(new String[argsList.size()]);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,101,return fileNameList.toArray(new String[fileNameList.size()]);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,24,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,222,Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,223,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,224,public ImmutableBitSet apply(ImmutableBitSet input1) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,225,return Mappings.apply(mapping, input1);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,349,Function<Integer, Integer> function,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,609,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,610,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,611,int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,613,? null
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,614,: mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,655,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,656,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,657,int target = mapping.getTargetOpt(source);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,658,return target < 0 ? null : target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,684,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,685,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,686,final int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,687,if (source2 < 0 || source2 >= mapping.getSourceCount()) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,688,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,690,int target = mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,691,if (target < 0) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,692,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,694,return target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,719,return new Iterable<IntPair>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,720,public Iterator<IntPair> iterator() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,721,return invert(pairs.iterator());
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,59,new ThreadLocal<Function2<Void, File, String>>() {
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,61,return Functions.ignore2();
druid/src/main/java/org/apache/calcite/adapter/druid/DefaultDimensionSpec.java,20,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DefaultDimensionSpec.java,37,this.dimension = Preconditions.checkNotNull(dimension);
druid/src/main/java/org/apache/calcite/adapter/druid/DefaultDimensionSpec.java,38,this.outputName = Preconditions.checkNotNull(outputName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,40,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,87,this.url = Preconditions.checkNotNull(url);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,88,this.coordinatorUrl = Preconditions.checkNotNull(coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,34,import com.google.common.base.Function;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,89,List<Interval> intervals = Lists.transform(ranges,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,92,if (!range.hasLowerBound() && !range.hasUpperBound()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,93,return DruidTable.DEFAULT_INTERVAL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,97,: DruidTable.DEFAULT_INTERVAL.getStartMillis();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,100,: DruidTable.DEFAULT_INTERVAL.getEndMillis();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,102,&& range.lowerBoundType() == BoundType.OPEN) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,103,start++;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,106,&& range.upperBoundType() == BoundType.CLOSED) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,107,end++;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,109,return new Interval(start, end, ISOChronology.getInstanceUTC());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,29,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,185,Preconditions.checkNotNull(functionName, "druid functionName");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,186,Preconditions.checkNotNull(args, "args");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,191,final String arg = Preconditions.checkNotNull(args.get(i), "arg #%s", i);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,202,Preconditions.checkNotNull(druidOperator, "druid operator missing");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,203,Preconditions.checkNotNull(args, "args");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,207,final String arg = Preconditions.checkNotNull(args.get(i), "arg #%s", i);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,246,Preconditions.checkNotNull(input, "input");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,247,Preconditions.checkNotNull(granularity, "granularity");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,261,Preconditions.checkNotNull(input, "input");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java,262,Preconditions.checkNotNull(granularity, "granularity");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,31,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,34,import com.google.common.collect.Lists;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,395,final List<DruidJsonFilter> jsonFilters = Lists.newArrayList();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,451,this.expression = Preconditions.checkNotNull(expression);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,618,Preconditions.checkNotNull(column);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,69,import com.google.common.base.Function;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,70,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,71,import com.google.common.base.Predicate;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,190,this.converterOperatorMap = Preconditions.checkNotNull(converterOperatorMap, "Operator map "
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,191,+ "can not be null");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,777,return Pair.<List<String>, List<VirtualColumn>>of(projectedColumnsBuilder.build(),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,980,return new QuerySpec(QueryType.SCAN,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,981,Preconditions.checkNotNull(scanQuery.toQuery(), "Can not plan Scan Druid Query"),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,982,scanColumnNames);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1031,.uniqueIndex(aggregateStageFieldNames, new Function<String, String>() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1033,return DruidExpressions.fromColumn(input);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1074,Lists.transform(queryOutputFieldNames,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1075,new Function<String, String>() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1077,if (timeExtractColumn.equals(input)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1078,return "timestamp";
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1080,return input;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1328,public String toQuery() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1526,this.queryType = Preconditions.checkNotNull(queryType);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1527,this.queryString = Preconditions.checkNotNull(queryString);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1777,return Iterables.indexOf(this.getRowType().getFieldList(), new Predicate<RelDataTypeField>() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1779,return druidTable.timestampFieldName.equals(input.getName());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,39,import org.apache.calcite.rel.rules.PushProjector;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,43,import org.apache.calcite.rel.type.RelDataTypeField;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,64,import com.google.common.base.Predicate;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,66,import com.google.common.collect.Iterables;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,78,import javax.annotation.Nullable;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,179,int timestampFieldIdx = Iterables
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,180,.indexOf(query.getRowType().getFieldList(), new Predicate<RelDataTypeField>() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,182,return query.druidTable.timestampFieldName.equals(input.getName());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,820,PushProjector.ExprCondition.FALSE,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,24,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,36,import javax.annotation.Nonnull;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,58,this.url = Preconditions.checkNotNull(url);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,59,this.coordinatorUrl = Preconditions.checkNotNull(coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,73,ImmutableSet.copyOf(tableNames),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,75,.build(new CacheLoader<String, Table>() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,77,final Map<String, SqlTypeName> fieldMap = new LinkedHashMap<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,78,final Set<String> metricNameSet = new LinkedHashSet<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,79,final Map<String, List<ComplexMetric>> complexMetrics = new HashMap<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,81,connection.metadata(tableName, DruidTable.DEFAULT_TIMESTAMP_COLUMN,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,82,null, fieldMap, metricNameSet, complexMetrics);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,84,return DruidTable.create(DruidSchema.this, tableName, null,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,85,fieldMap, metricNameSet, DruidTable.DEFAULT_TIMESTAMP_COLUMN,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,86,complexMetrics);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,87,this.timestampFieldName = Preconditions.checkNotNull(timestampFieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,88,this.schema = Preconditions.checkNotNull(schema);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,89,this.dataSource = Preconditions.checkNotNull(dataSource);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,182,SqlNode parent,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,183,CalciteConnectionConfig config) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,248,ImmutableList.<RelNode>of(scan));
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,20,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,48,this.dimension = Preconditions.checkNotNull(dimension);
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,49,this.extractionFunction = Preconditions.checkNotNull(extractionFunction);
druid/src/main/java/org/apache/calcite/adapter/druid/Granularities.java,22,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/Granularities.java,91,this.type = Preconditions.checkNotNull(type);
druid/src/main/java/org/apache/calcite/adapter/druid/Granularities.java,92,this.period = Preconditions.checkNotNull(period);
druid/src/main/java/org/apache/calcite/adapter/druid/Granularities.java,93,this.timeZone = Preconditions.checkNotNull(timeZone);
druid/src/main/java/org/apache/calcite/adapter/druid/NaryOperatorConverter.java,24,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/NaryOperatorConverter.java,38,this.operator = Preconditions.checkNotNull(operator);
druid/src/main/java/org/apache/calcite/adapter/druid/NaryOperatorConverter.java,39,this.druidOperatorName = Preconditions.checkNotNull(druidOperatorName);
druid/src/main/java/org/apache/calcite/adapter/druid/VirtualColumn.java,20,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/VirtualColumn.java,39,this.name = Preconditions.checkNotNull(name);
druid/src/main/java/org/apache/calcite/adapter/druid/VirtualColumn.java,40,this.expression = Preconditions.checkNotNull(expression);
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,75,return new Function1<SearchHit, Map>() {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,76,public Map apply(SearchHit searchHitFields) {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,77,return (Map) searchHitFields.fields();
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,84,return new Function1<SearchHit, Object>() {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,85,public Object apply(SearchHit searchHitFields) {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,86,if (searchHitFields.fields().isEmpty()) {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,87,return convert(searchHitFields.getSource(), fieldClass);
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,89,return convert(searchHitFields.getFields(), fieldClass);
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,103,return new Function1<SearchHit, Object[]>() {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,105,Object[] objects = new Object[fields.size()];
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,106,for (int i = 0; i < fields.size(); i++) {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,107,final Map.Entry<String, Class> field = fields.get(i);
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,108,final String name = field.getKey();
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Enumerator.java,115,return objects;
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,75,return new Function1<SearchHit, Map>() {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,76,public Map apply(SearchHit searchHitFields) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,77,return (Map) searchHitFields.getFields();
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,84,return new Function1<SearchHit, Object>() {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,85,public Object apply(SearchHit searchHitFields) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,86,if (searchHitFields.getFields().isEmpty()) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,87,return convert(searchHitFields.getSource(), fieldClass);
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,89,return convert(searchHitFields.getFields(), fieldClass);
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,103,return new Function1<SearchHit, Object[]>() {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,104,public Object[] apply(SearchHit searchHitFields) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,105,Object[] objects = new Object[fields.size()];
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,106,for (int i = 0; i < fields.size(); i++) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,107,final Map.Entry<String, Class> field = fields.get(i);
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,108,final String name = field.getKey();
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,109,if (searchHitFields.getFields().isEmpty()) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,110,objects[i] = convert(searchHitFields.getSource().get(name),
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,111,field.getValue());
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,113,objects[i] = convert(searchHitFields.getField(name).getValue(),
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,114,field.getValue());
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Enumerator.java,117,return objects;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,334,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[fieldTypes.size()]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,340,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[fieldTypes.size()]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,27,import java.io.FilenameFilter;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,80,File[] files = directoryFile.listFiles(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,81,new FilenameFilter() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,82,public boolean accept(File dir, String name) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,83,final String nameSansGz = trim(name, ".gz");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,85,|| nameSansGz.endsWith(".json");
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,83,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,84,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,85,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,89,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,90,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,91,String s = region(c) + "";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,92,return s.length() == 1 ? " " + s : s;
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,116,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,117,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,118,return solutionSet.contains(c) ? "* " : "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,355,CellContent SPACE = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,356,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,357,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,24,import org.apache.calcite.linq4j.function.Function1;
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,106,new Function1<String, Object[]>() {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,107,public Object[] apply(String s) {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,108,return new Object[] {s};
file/src/main/java/org/apache/calcite/adapter/file/FileRowConverter.java,24,import com.google.common.base.Joiner;
file/src/main/java/org/apache/calcite/adapter/file/FileRowConverter.java,270,String cellString = Joiner.on(" ").join(cellText).trim();
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,32,import java.io.FilenameFilter;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,92,File[] files = baseDirectory.listFiles(
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,93,new FilenameFilter() {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,94,public boolean accept(File dir, String name) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,95,final String nameSansGz = trim(name, ".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,97,|| nameSansGz.endsWith(".json");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,42,import com.google.common.base.Predicate;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,211,new Predicate<Sort>() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,212,public boolean apply(Sort input) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,214,return input.offset == null;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,219,super(operand(Sort.class, null, predicate, any()), "GeodeSortLimitRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchemaFactory.java,60,ModelHandler.addFunctions(parentSchema, null, ImmutableList.<String>of(),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverter.java,42,import com.google.common.base.Function;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverter.java,155,return Lists.transform(values,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverter.java,156,new Function<T, Expression>() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverter.java,157,public Expression apply(T a0) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverter.java,158,return Expressions.constant(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/DefaultQueryable.java,54,this(QueryableRecorder.<T>instance());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,38,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,373,return (int) longCount(enumerable, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,405,return Linq4j.asEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,406,new Iterable<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,407,public Iterator<TSource> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,408,return new Iterator<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,410,private boolean nonFirst;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,412,private Iterator<TSource> rest;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,414,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,415,return !nonFirst || rest.hasNext();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,418,public TSource next() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,419,if (nonFirst) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,420,return rest.next();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,422,final TSource first = os.current();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,423,nonFirst = true;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,424,rest = Linq4j.enumeratorIterator(os);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,425,return first;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,429,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,430,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,686,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,687,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,688,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,704,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,705,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,706,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,722,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,723,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,724,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,742,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,743,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,744,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,910,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,951,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1330,return EnumerableDefaults.where(outer.enumerator(),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1331,new Predicate1<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1332,public boolean apply(TSource v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1333,final TKey key = outerKeySelector.apply(v0);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1334,return innerLookup.contains(key);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1351,final List<TResult> result = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1519,return longCount(source, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1678,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MIN;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1684,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MAX;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1813,Functions.<TSource, TResult>ofTypePredicate(clazz));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1837,Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1847,return orderBy(source, keySelector, Collections.<TKey>reverseOrder());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2310,return skipWhile(source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2311,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2313,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2326,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2454,source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2455,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2457,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2469,source, new Predicate2<TSource, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2470,public boolean apply(TSource v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2472,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2484,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2534,Extensions.<TKey>comparableComparator(), false);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2555,Extensions.<TKey>comparableComparator(), true);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2577,return toMap(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2588,return toMap(source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2659,return toLookup(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2671,source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2765,return new Function1<Wrapped<TSource>, TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2766,public TSource apply(Wrapped<TSource> a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2767,return a0.element;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2774,return new Function1<TSource, Wrapped<TSource>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2775,public Wrapped<TSource> apply(TSource a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2776,return Wrapped.upAs(comparer, a0);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3327,ImmutableList.of(Linq4j.<Object>enumerator(lefts),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3328,Linq4j.<Object>enumerator(rights)));
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,114,new Function2<BigDecimal, BigDecimal, BigDecimal>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,115,public BigDecimal apply(BigDecimal v1, BigDecimal v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,116,return v1.add(v2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,121,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,122,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,123,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,128,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,129,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,130,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,135,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,136,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,137,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,142,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,143,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,144,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,148,static final Function2 COMPARABLE_MIN =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,149,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,150,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,151,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,155,static final Function2 COMPARABLE_MAX =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,156,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,157,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,158,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,163,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,164,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,165,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,170,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,171,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,172,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,177,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,178,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,179,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,184,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,185,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,186,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,191,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,192,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,193,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,198,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,199,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,200,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,205,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,206,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,207,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,212,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,213,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,214,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,231,private static final Comparator<Comparable> COMPARABLE_COMPARATOR =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,232,new Comparator<Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,233,public int compare(Comparable o1, Comparable o2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,235,return o1.compareTo(o2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,241,return (Comparator<T>) (Comparator) COMPARABLE_COMPARATOR;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,19,import com.google.common.base.Preconditions;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,36,this.key = Preconditions.checkNotNull(key);
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,37,this.values = Preconditions.checkNotNull(values);
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,21,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,393,return new Iterable<List<T>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,394,public Iterator<List<T>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,395,final List<Enumerator<T>> enumerators = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,396,for (Iterable<T> iterable : iterables) {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,397,enumerators.add(iterableEnumerator(iterable));
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,399,return enumeratorIterator(
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,400,new CartesianProductListEnumerator<>(enumerators));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,55,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,56,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,57,return zip(iterable.iterator());
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,117,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,118,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,119,return new Iterator<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,120,int i = elementList.size() - 1;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,122,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,123,return i >= 0;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,126,public Ord<E> next() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,127,return Ord.of(i, elementList.get(i--));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,130,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,131,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,900,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1036,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,31,Function1<Object, Object> IDENTITY = new Function1<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,32,public Object apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,33,return v0;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,40,Collections.<Class<? extends Function>, Class>unmodifiableMap(
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,77,private static final Function1 CONSTANT_NULL_FUNCTION1 =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,78,new Function1() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,79,public Object apply(Object s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,80,return null;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,85,new Function1<Object, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,86,public String apply(Object a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,87,return a0.toString();
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,111,return new Function1<T, R>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,112,public R apply(T s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,113,return r;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,197,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,198,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,199,return v1 == null || clazz.isInstance(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,206,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,207,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,208,return p1.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,218,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,219,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,220,return function.apply(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,230,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,231,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,232,return function.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,263,return new Function1<T1, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,264,public Integer apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,265,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,275,return new Function1<T1, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,276,public Double apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,277,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,287,return new Function1<T1, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,288,public Long apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,289,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,299,return new Function1<T1, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,300,public Float apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,301,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,30,Predicate1<Object> TRUE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,31,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,32,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,41,Predicate1<Object> FALSE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,42,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,43,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,31,Predicate2<Object, Object> TRUE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,32,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,33,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,42,Predicate2<Object, Object> FALSE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,43,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,44,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,45,new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,46,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,47,return new DeterministicCodeOptimizer(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,97,return new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,98,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,99,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,100,return constructor.newInstance(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,102,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,105,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,108,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,20,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,157,return writer.append("new java.math.BigDecimal(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,158,bigDecimal.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,163,return writer.append("new java.math.BigInteger(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,164,bigInteger.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,194,Lists.transform(Arrays.asList(value.getClass().getFields()),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,195,new Function<Field, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,196,public Object apply(Field field) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,197,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,198,return field.get(value);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,200,throw new RuntimeException(e);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,71,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,72,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,73,public String apply(ParameterExpression parameter) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,74,final String modifiers =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,75,Modifier.toString(parameter.modifier);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,77,+ Types.className(parameter.getType()) + " "
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,78,+ parameter.name;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeterministicCodeOptimizer.java,72,ImmutableSet.<Class>of(Byte.class, Boolean.class, Short.class,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,527,return new ConditionalExpression(Arrays.<Node>asList(test, ifFalse, ifTrue),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,965,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,974,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue, ifFalse));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1917,return new_(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1918,constructor.getDeclaringClass(), Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1926,return new_(type, Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2840,return new TryStatement(body, Collections.<CatchBlock>emptyList(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2841,finally_);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,22,import java.lang.reflect.InvocationHandler;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,28,import java.util.Collections;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,62,this((Class) function.getClass(), function, null,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,63,Collections.<ParameterExpression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,82,return new Invokable() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,83,public Object dynamicInvoke(Object... args) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,84,final Evaluator evaluator = new Evaluator();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,85,for (int i = 0; i < args.length; i++) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,86,evaluator.push(parameterList.get(i), args[i]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,88,return evaluator.evaluate(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,102,new Class[]{Types.toClass(type)},
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,103,new InvocationHandler() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,105,throws Throwable {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,106,return x.dynamicInvoke(args);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,227,&& ((Class) type).getDeclaredMethods().length == 1) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,228,return ((Class) type).getDeclaredMethods()[0];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,72,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,73,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,74,public String apply(ParameterExpression a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,75,return a0.declString();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,19,import com.google.common.base.Preconditions;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,35,this.body = Preconditions.checkNotNull(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,36,this.catchBlocks = Preconditions.checkNotNull(catchBlocks);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,156,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,164,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,565,return typeArguments.toArray(new Type[typeArguments.size()]);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,82,return new Function1<Document, Map>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,83,public Map apply(Document a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,84,return (Map) a0;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,91,return new Function1<Document, Object>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,92,public Object apply(Document a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,93,return convert(a0.get(fieldName), fieldClass);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,103,return new Function1<Document, Object[]>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,104,public Object[] apply(Document a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,105,Object[] objects = new Object[fields.size()];
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,106,for (int i = 0; i < fields.size(); i++) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,107,final Map.Entry<String, Class> field = fields.get(i);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,108,final String name = field.getKey();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,109,objects[i] = convert(a0.get(name), field.getValue());
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,111,return objects;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,42,import com.google.common.base.Function;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,154,return Lists.transform(values,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,155,new Function<T, Expression>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,156,public Expression apply(T a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,157,return Expressions.constant(a0);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,26,import com.google.common.base.Predicates;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,42,super(RelNode.class, Predicates.<RelNode>alwaysTrue(), MongoRel.CONVENTION,
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,30,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,99,+ ");";
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,115,+ Joiner.on(";\n").join(distinctCalls) + generateCall + "\n};";
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,133,return "  GENERATE " + Joiner.on(", ").join(allFields) + ';';
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,148,final String fields = Joiner.on(", ").join(getArgNames(relAlias, aggCall));
pig/src/main/java/org/apache/calcite/adapter/pig/PigFilter.java,30,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigFilter.java,80,String allFilterConditions = Joiner.on(" AND ").join(filterConditionsConjunction);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRel.java,22,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigRel.java,86,return Joiner.on("\n").join(statements);
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,32,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,68,return Joiner.on(", ").join(fieldNamesAndTypes);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,26,import com.google.common.base.Preconditions;
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,139,this.op = Preconditions.checkNotNull(op);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,140,this.pos = Preconditions.checkNotNull(pos);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,157,this.target = Preconditions.checkNotNull(target);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,167,this.name = Preconditions.checkNotNull(name);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,336,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,346,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,356,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,411,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,469,this.id = Preconditions.checkNotNull(id);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,470,this.type = Preconditions.checkNotNull(type);
plus/src/main/java/org/apache/calcite/adapter/os/DuTableFunction.java,22,import org.apache.calcite.linq4j.function.Function1;
plus/src/main/java/org/apache/calcite/adapter/os/DuTableFunction.java,47,.select(new Function1<String, Object[]>() {
plus/src/main/java/org/apache/calcite/adapter/os/DuTableFunction.java,48,public Object[] apply(String a0) {
plus/src/main/java/org/apache/calcite/adapter/os/DuTableFunction.java,49,final String[] fields = a0.split("\t");
plus/src/main/java/org/apache/calcite/adapter/os/DuTableFunction.java,50,return new Object[] {Long.valueOf(fields[0]), fields[1]};
plus/src/main/java/org/apache/calcite/adapter/os/Processes.java,23,import com.google.common.base.Supplier;
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,23,import com.google.common.base.Function;
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,24,import com.google.common.base.Preconditions;
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,61,this.in = Preconditions.checkNotNull(in);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,62,this.out = Preconditions.checkNotNull(out);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,63,this.err = Preconditions.checkNotNull(err);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,289,Maps.asMap(fields, new Function<String, Object>() {
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,290,public Object apply(String columnLabel) {
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,291,try {
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,292,final int i = fieldOrdinals.get(columnLabel);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,293,switch (m.getColumnType(i)) {
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,294,case Types.BOOLEAN:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,295,final boolean b = r.getBoolean(i);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,296,return !b && r.wasNull() ? null : b;
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,297,case Types.DECIMAL:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,298,case Types.FLOAT:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,299,case Types.REAL:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,300,case Types.DOUBLE:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,301,final double d = r.getDouble(i);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,302,return d == 0D && r.wasNull() ? null : d;
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,303,case Types.BIGINT:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,304,case Types.INTEGER:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,305,case Types.SMALLINT:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,306,case Types.TINYINT:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,307,final long v = r.getLong(i);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,308,return v == 0L && r.wasNull() ? null : v;
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,309,default:
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,310,return r.getString(i);
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,313,throw new RuntimeException(e);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,33,import org.apache.calcite.util.ImmutableBitSet;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,42,import java.util.Collections;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,118,return Statistics.of(rowCount, Collections.<ImmutableBitSet>emptyList());
plus/src/main/java/org/apache/calcite/chinook/EnvironmentFairy.java,29,private static final ThreadLocal<User> USER = new ThreadLocal<User>() {
plus/src/main/java/org/apache/calcite/chinook/EnvironmentFairy.java,31,return User.ADMIN;
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateForeignSchema.java,74,this.name = Preconditions.checkNotNull(name);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateMaterializedView.java,46,import com.google.common.base.Preconditions;
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateMaterializedView.java,71,this.name = Preconditions.checkNotNull(name);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateMaterializedView.java,73,this.query = Preconditions.checkNotNull(query);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateSchema.java,37,import com.google.common.base.Preconditions;
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateSchema.java,57,this.name = Preconditions.checkNotNull(name);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateSchema.java,61,return ImmutableNullableList.<SqlNode>of(name);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateTable.java,95,this.name = Preconditions.checkNotNull(name);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateTable.java,240,this.strategy = Preconditions.checkNotNull(strategy);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateTable.java,294,this.protoStoredRowType = Preconditions.checkNotNull(protoStoredRowType);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateTable.java,295,this.protoRowType = Preconditions.checkNotNull(protoRowType);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateTable.java,297,Preconditions.checkNotNull(initializerExpressionFactory);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateView.java,42,import com.google.common.base.Preconditions;
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateView.java,65,this.name = Preconditions.checkNotNull(name);
server/src/main/java/org/apache/calcite/sql/ddl/SqlCreateView.java,67,this.query = Preconditions.checkNotNull(query);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDropObject.java,52,return ImmutableList.<SqlNode>of(name);
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,26,import com.google.common.base.Predicates;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,43,super(RelNode.class, Predicates.<RelNode>alwaysTrue(),
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,168,return new Iterable<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,169,public Iterator<E> iterator() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,170,return new Iterator<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,171,public boolean hasNext() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,172,return enumeration.hasMoreElements();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,175,public E next() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,176,return enumeration.nextElement();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,179,public void remove() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,180,throw new UnsupportedOperationException();
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,93,primitives.toArray(new Primitive[primitives.size()])));
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,25,import com.google.common.base.Predicates;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,36,super(RelNode.class, Predicates.<RelNode>alwaysTrue(), out,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,74,import java.util.Iterator;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,399,file.map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,400,new Function<String, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,402,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,407,file.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,408,new Function<String, String>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,410,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,414,).map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,415,new Function<Tuple2<String, Iterable<String>>, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,417,return pair._1() + ":" + Iterables.size(pair._2());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,436,rdd.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,437,new Function<Integer, Integer>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,438,public Integer call(Integer integer) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,439,return integer % 2;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,443,file.flatMap(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,444,new FlatMapFunction<String, Pair<String, Integer>>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,445,public Iterator<Pair<String, Integer>> call(String x) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,446,if (!x.startsWith("a")) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,447,return Collections.emptyIterator();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,449,return Collections.singletonList(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,450,Pair.of(x.toUpperCase(Locale.ROOT), x.length())).iterator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,596,return convert;
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,163,resolved.found(namespace, false, this, path, remainingNames);
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,169,resolved.found(namespace, false, this, path, remainingNames);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,120,arguments.add(null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1871,SqlNode newExpr = registerFrom(usingScope, matchRecognizeScope, expr,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1872,expr, null, null, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1939,boolean forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1994,SqlValidatorScope usingScope2 = usingScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1995,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1996,usingScope2 = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2002,usingScope2,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2007,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2014,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2037,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2073,forceLeftNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2077,final SqlValidatorScope rightParentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2078,if (rightIsLateral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2079,rightParentScope = joinScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2081,rightParentScope = parentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2085,rightParentScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2091,forceRightNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2106,registerNamespace(usingScope, alias, newNs, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2117,if (tableScope != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2118,tableScope.meetLateral();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2127,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2134,tableScope == null ? parentScope : tableScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2140,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2153,case UNNEST:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2160,usingScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2183,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2189,registerNamespace(usingScope, child.name, child.namespace,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2190,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2203,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3704,final Table table = ((RelOptTable) ns.getTable()).unwrap(Table.class);
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,34,private boolean beforeLateral;
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,44,super(parent);
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,45,this.node = node;
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,46,this.beforeLateral = true;
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,53,boolean nullable) {
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,54,if (beforeLateral) {
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,55,super.addChild(ns, alias, nullable);
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,63,public void meetLateral() {
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,64,this.beforeLateral = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2440,lookup.bb.scope.getValidator().getCatalogReader().nameMatcher();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2451,boolean correlInCurrentScope = ancestorScope == bb.scope;
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,57,class SqlTimestampAddFunction extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,63,switch (opBinding.getOperandLiteralValue(0, TimeUnit.class)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,64,case HOUR:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,65,case MINUTE:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,66,case SECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,67,case MILLISECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,68,case MICROSECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,69,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,70,typeFactory.createSqlType(SqlTypeName.TIMESTAMP),
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,72,|| opBinding.getOperandType(2).isNullable());
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,73,default:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,74,return opBinding.getOperandType(2);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1381,cx.convertExpression(call.operand(2)),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1385,unitLiteral.getParserPosition())),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1386,cx.convertExpression(call.operand(1))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1968,case DECADE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1969,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1970,case TIMESTAMP_WITH_LOCAL_TIME_ZONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1971,operand = Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1972,BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1973,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1974,Expressions.call(BuiltInMethod.TIME_ZONE.method, translator.getRoot()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1976,case TIMESTAMP:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1977,operand = Expressions.divide(operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1978,Expressions.constant(TimeUnit.DAY.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1980,case DATE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1981,operand = Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1982,BuiltInMethod.UNIX_DATE_EXTRACT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1983,Expressions.constant(TimeUnitRange.YEAR), operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1984,return Expressions.divide(operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1985,Expressions.constant(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1987,.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1989,break;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,439,final String schemaName = con.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,492,final String schemaName = connection.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,95,Meta.Signature signature, TimeZone timeZone, Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,376,ImmutableList.of(new MetaCatalog(connection.getCatalog())));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,385,Enumerable<MetaSchema> schemas(String catalog) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,393,connection.getCatalog(),
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,50,Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,72,Iterable<Object> iterable) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,114,CalciteConnectionImpl getCalciteConnection() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,41,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,53,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,118,final RelOptLattice lattice = call.getPlanner().getLattice(table);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,122,lattice.getAggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,123,call.getPlanner(), aggregate.getGroupSet(), measures);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,28,import org.apache.commons.dbcp.BasicDataSource;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,57,if (SqlTypeName.CHAR_TYPES.contains(fromType) && SqlTypeName.DATETIME_TYPES.contains(toType)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,62,(toType)) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,263,childPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,264,rightPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1955,&& bb.root instanceof Values) {
elasticsearch2/src/main/java/org/apache/calcite/adapter/elasticsearch2/Elasticsearch2Table.java,43,public Elasticsearch2Table(Client client, String indexName, String typeName) {
elasticsearch5/src/main/java/org/apache/calcite/adapter/elasticsearch5/Elasticsearch5Table.java,50,public Elasticsearch5Table(Client client, String indexName, String typeName) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoSchema.java,47,public MongoSchema(String host, String database,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,59,return castCharToDateTime(timeZone, operandExpression,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,60,toType);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,102,final SqlTypeName toType) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,108,DruidExpressions.stringLiteral(""),
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,43,SqlStdOperatorTable.MULTISET_EXCEPT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,45,SqlStdOperatorTable.MULTISET_INTERSECT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,47,SqlStdOperatorTable.MULTISET_UNION_ALL,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,111,public static final SqlMultisetSetOperator MULTISET_UNION =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,112,new SqlMultisetSetOperator("MULTISET UNION", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,117,public static final SqlMultisetSetOperator MULTISET_UNION_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,123,public static final SqlMultisetSetOperator MULTISET_EXCEPT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,124,new SqlMultisetSetOperator("MULTISET EXCEPT", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,129,public static final SqlMultisetSetOperator MULTISET_EXCEPT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,135,public static final SqlMultisetSetOperator MULTISET_INTERSECT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,136,new SqlMultisetSetOperator("MULTISET INTERSECT", 18, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,141,public static final SqlMultisetSetOperator MULTISET_INTERSECT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1946,public static final SqlFunction FUSION =
core/src/main/java/org/apache/calcite/schema/Schemas.java,541,assert rootSchema.name.equals(iterator.next());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,147,case CEIL:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,149,return simplifyCeilFloor((RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,970,private RexNode simplifyCeilFloor(RexCall e) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,977,case CEIL:
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,22,INSTANCE,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,89,: new RexSimplify(rexBuilder, predicates, unknownAsFalse, executor);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,97,: new RexSimplify(rexBuilder, predicates, unknownAsFalse, executor);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,194,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,265,terms.set(i, withUnknownAsFalse(false).simplify(terms.get(i)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,274,return simplify(((RexCall) a).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,278,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,284,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,293,simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, operand)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,295,return simplify(rexBuilder.makeCall(SqlStdOperatorTable.OR, newOperands));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,302,simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, operand)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,304,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,340,return simplify(a);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,348,return simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, a));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,362,return simplify(rexBuilder.makeCall(notKind, arg));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,364,RexNode a2 = simplify(a);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,573,simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,599,return simplify(terms.get(0));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,799,terms.add(simplify(call));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,905,final RexNode term = simplify(terms.get(i));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,975,final RexNode operand = simplify(e.getOperands().get(0));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1881,final Set<SqlKind> flags = EnumSet.noneOf(SqlKind.class);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1883,flags.clear();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1884,RexNode e = bb.convertSortExpression(order, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1885,orderKeys.add(new RexFieldCollation(e, flags));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4567,public RexNode convertSortExpression(SqlNode expr, Set<SqlKind> flags) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4572,flags.add(expr.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4573,final SqlNode operand = ((SqlCall) expr).operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4574,return convertSortExpression(operand, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4576,return convertExpression(expr);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,76,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,82,import java.util.Set;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,877,final Set<RelDataTypeFamily> families =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,878,Sets.newHashSet(RexUtil.families(types));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,879,if (families.size() < 2) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,247,side.split.put(aggCall.i, ((RexInputRef) singleton).getIndex());
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,43,import java.util.Locale;
core/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,109,.toLowerCase(Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1185,final boolean isCountStar = Granularities.all() == timeseriesGranularity
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1186,&& aggregations.size() == 1
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1187,&& aggregations.get(0).type.equals("count");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1210,generator.writeBooleanField("skipEmptyBuckets", !isCountStar);
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,126,final RelDataTypeFactory.Builder builder =
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,127,rel.getCluster().getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,64,final RelDataTypeFactory.Builder builder =
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,65,opBinding.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,218,private boolean allowBangEqual =
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,219,SqlConformanceEnum.DEFAULT.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,231,this.allowBangEqual = config.allowBangEqual();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,277,this.allowBangEqual = conformance.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,23,import org.apache.calcite.sql.type.MultisetSqlType;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,62,private RelDataType inferReturnType() {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,63,final SqlNode operand = unnest.operand(0);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,64,RelDataType type = validator.getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,68,if (type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,69,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,71,MultisetSqlType t = (MultisetSqlType) type;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,72,return t.getComponentType();
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,336,return Collections.singletonList(t0).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,447,return Arrays.asList(t0, t1).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,577,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,689,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + "]";
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,726,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,854,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + ", " + t4 + "]";
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,894,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1038,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + ", " + t4
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1082,return o.equals(this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,189,for (Ord<RexNode> o : Ord.zip(project.getProjects())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,190,if (o.e instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,191,int sIdx = ((RexInputRef) o.e).getIndex();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,192,m.set(sIdx, o.i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,193,columnsMappedBuilder.set(sIdx);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,199,final ImmutableBitSet columnsMapped = columnsMappedBuilder.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,200,for (RexNode r : inputInfo.pulledUpPredicates) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,201,RexNode r2 = projectPredicate(rexBuilder, input, r, columnsMapped);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,202,if (!r2.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,203,r2 = r2.accept(new RexPermuteInputsShuttle(m, input));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,204,projectPullUpPredicates.add(r2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,210,if (RexLiteral.isNullLiteral(expr.e)) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1875,&& !Join.class.isAssignableFrom(c)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,47,ReturnTypes.LEAST_RESTRICTIVE,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1218,RelDataTypeFamily family1 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1219,RelDataTypeFamily family2 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1223,if (type1.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1224,family1 = type1.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1226,if (type2.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1227,family2 = type2.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1229,if (family1 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1230,family1 = type1.getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1232,if (family2 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1233,family2 = type2.getFamily();
core/src/main/java/org/apache/calcite/sql/validate/MatchRecognizeScope.java,25,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql/validate/MatchRecognizeScope.java,29,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql/validate/MatchRecognizeScope.java,50,: new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,128,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,133,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,356,: new TreeSet<>(String.CASE_INSENSITIVE_ORDER),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,422,List<Map.Entry<String, RelDataType>> types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,425,if (expandStar(selectItems, aliases, types, includeSystemVars, scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,462,types.add(Pair.of(alias, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,467,List<Map.Entry<String, RelDataType>> types, boolean includeSystemVars,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,480,final int before = types.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,493,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,515,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,524,for (int i = before; i < types.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,525,final Map.Entry<String, RelDataType> entry = types.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,528,types.set(i,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,556,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,568,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,582,List<Map.Entry<String, RelDataType>> types, boolean includeSystemVars,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,591,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,601,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3032,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3033,SqlIdentifier id = (SqlIdentifier) list.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3061,SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3062,leftRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3063,rightRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3066,final SqlNameMatcher nameMatcher = catalogReader.nameMatcher();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3142,if (Collections.frequency(rowType.getFieldNames(), name) > 1) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4004,assert fieldList.size() >= aliases.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4097,final List<Map.Entry<String, RelDataType>> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4100,types.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4101,Pair.of(SqlUtil.deriveAliasFromOrdinal(types.size()),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4121,types.add(targetField);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4123,return typeFactory.createStructType(types);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5013,: new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,62,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,687,&& (Collections.frequency(rightNames, name) == 1)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2039,SqlValidatorUtil.deriveNaturalJoinColumnList(leftRowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2040,rightRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2041,conditionExp = convertUsing(leftNamespace, rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2042,columnList);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,19,import org.apache.calcite.avatica.AvaticaResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,84,closed = true;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,85,final CalciteConnectionImpl connection1 =
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,86,(CalciteConnectionImpl) connection;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,87,connection1.server.removeStatement(handle);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,88,if (openResultSet != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,89,AvaticaResultSet c = openResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,90,openResultSet = null;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,91,c.close();
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,95,connection1.getDriver().handler.onStatementClose(this);
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,66,static int nextId = 0;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,98,protected int id;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,115,this.id = nextId++;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,90,new JdbcToEnumerableConverterRule(out, RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,91,new JdbcJoinRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,92,new JdbcCalcRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,93,new JdbcProjectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,94,new JdbcFilterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,95,new JdbcAggregateRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,96,new JdbcSortRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,97,new JdbcUnionRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,98,new JdbcIntersectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,99,new JdbcMinusRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,100,new JdbcTableModificationRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,101,new JdbcValuesRule(out));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,110,super(clazz, in, out, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,119,super(Join.class, Convention.NONE, out, "JdbcJoinRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,270,private JdbcCalcRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,271,super(Calc.class, Convention.NONE, out, "JdbcCalcRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,343,public JdbcProjectRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,344,super(Project.class, Convention.NONE, out, "JdbcProjectRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,405,super(Filter.class, Convention.NONE, out, "JdbcFilterRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,448,super(Aggregate.class, Convention.NONE, out, "JdbcAggregateRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,526,super(Sort.class, Convention.NONE, out, "JdbcSortRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,589,super(Union.class, Convention.NONE, out, "JdbcUnionRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,631,private JdbcIntersectRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,632,super(Intersect.class, Convention.NONE, out, "JdbcIntersectRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,675,private JdbcMinusRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,676,super(Minus.class, Convention.NONE, out, "JdbcMinusRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,711,private JdbcTableModificationRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,712,super(TableModify.class, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,785,private JdbcValuesRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,786,super(Values.class, Convention.NONE, out, "JdbcValuesRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,24,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,56,super(operand(LogicalFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,62,LogicalFilter oldFilter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,80,final RelFactories.FilterFactory factory =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,81,RelFactories.DEFAULT_FILTER_FACTORY;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,82,RelNode newFilterRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,83,factory.createFilter(oldFilter.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,84,oldFilterCond.accept(rewriteShuttle));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1038,final String postProjectFieldName = pair.right;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1046,postAggs.add(new JsonExpressionPostAgg(postProjectFieldName, expression, null));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1047,postProjectDimListBuilder.add(postProjectFieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,46,final int index = RexLiteral.intValue(call.getOperands().get(1)) - 1;
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,48,final int length;
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,51,length = RexLiteral.intValue(call.getOperands().get(2));
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,54,length = -1;
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,56,return DruidQuery.format("substring(%s, %s, %s)",
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,57,arg,
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,58,DruidExpressions.numberLiteral(index),
druid/src/main/java/org/apache/calcite/adapter/druid/SubstringOperatorConversion.java,59,DruidExpressions.numberLiteral(length));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,170,RelDataType originalType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,171,aggregate.getRowType().getFieldList().get(projects.size()).getType();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,172,if (!originalType.equals(map.get(i).getType())) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,173,expr = rexBuilder.makeCast(originalType, map.get(i), true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,175,expr = map.get(i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,180,expr = relBuilder.field(source);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,181,++source;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,75,IntervalValue interval = (IntervalValue) value;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,76,writer.keyword("INTERVAL");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,77,if (interval.getSign() == -1) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,78,writer.print("-");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,80,writer.literal("'" + value.toString() + "'");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,81,writer.keyword(interval.intervalQualifier.toString());
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,205,private boolean useDefaultStartPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,253,private boolean useDefaultFractionalSecondPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,308,unparse(RelDataTypeSystem.DEFAULT, writer);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,311,public void unparse(RelDataTypeSystem typeSystem, SqlWriter writer) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,312,final String start = timeUnitRange.startUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,313,final int fractionalSecondPrecision =
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,314,getFractionalSecondPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,315,final int startPrecision = getStartPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,316,if (timeUnitRange.startUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,317,if (!useDefaultFractionalSecondPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,318,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,319,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,320,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,321,writer.print(getFractionalSecondPrecision(typeSystem));
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,322,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,324,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,325,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,326,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,328,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,331,if (!useDefaultStartPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,332,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,333,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,334,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,336,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,339,if (null != timeUnitRange.endUnit) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,340,writer.keyword("TO");
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,341,final String end = timeUnitRange.endUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,343,&& (!useDefaultFractionalSecondPrecision())) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,344,final SqlWriter.Frame frame = writer.startFunCall(end);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,345,writer.print(fractionalSecondPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,346,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,348,writer.keyword(end);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,52,InferTypes.FIRST_KNOWN,
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,53,OperandTypes.MINUS_DATE_OPERATOR);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,67,final SqlWriter.Frame frame = writer.startList("(", ")");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,68,call.operand(0).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,69,writer.sep("-");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,70,call.operand(1).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,71,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,72,call.operand(2).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,20,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,21,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,39,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,54,import org.apache.calcite.sql.type.IntervalSqlType;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,538,new SqlSpecialOperator("DATETIME_PLUS", SqlKind.PLUS, 40, true, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,539,InferTypes.FIRST_KNOWN, OperandTypes.PLUS_OPERATOR) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,541,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,542,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,543,final RelDataType leftType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,544,final IntervalSqlType unitType =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,545,(IntervalSqlType) opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,546,switch (unitType.getIntervalQualifier().getStartUnit()) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,547,case HOUR:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,548,case MINUTE:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,549,case SECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,550,case MILLISECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,551,case MICROSECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,552,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,553,typeFactory.createSqlType(SqlTypeName.TIMESTAMP),
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,554,leftType.isNullable() || unitType.isNullable());
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,555,default:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,556,return leftType;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,483,public static final SqlSingleOperandTypeChecker MINUS_DATE_OPERATOR =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,294,public RelOptPredicateList getPredicates(SemiJoin semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,295,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,296,RexBuilder rB = semiJoin.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,297,final RelNode left = semiJoin.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,298,final RelNode right = semiJoin.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,300,final RelOptPredicateList leftInfo = mq.getPulledUpPredicates(left);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,301,final RelOptPredicateList rightInfo = mq.getPulledUpPredicates(right);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,303,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,304,new JoinConditionBasedPredicateInference(semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,305,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,306,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates, false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,308,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,313,RexBuilder rB = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,314,RelNode left = join.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,315,RelNode right = join.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,320,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,322,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,323,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,324,false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,326,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,377,RexBuilder rB = union.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,402,finalResidualPreds.add(RexUtil.composeConjunction(rB, residualPreds, false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,409,RexUtil.composeConjunction(rB,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,424,new RexSimplify(rB, predicates, true, executor);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,429,return RelOptPredicateList.of(rB, preds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,500,final Set<String> allExprsDigests;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,506,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,507,this(joinRel, joinRel instanceof SemiJoin, lPreds, rPreds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,511,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,526,allExprsDigests = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,538,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,552,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,598,final Set<String> allExprsDigests = new HashSet<>(this.allExprsDigests);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,603,infer(leftChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,612,infer(rightChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,681,List<RexNode> inferedPredicates, boolean includeEqualityInference,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,694,&& !isAlwaysTrue(tr)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,695,inferedPredicates.add(tr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,696,allExprsDigests.add(tr.toString());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,936,final RexNode x = simplifierUnknownAsFalse.simplifyAnds(predicates);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,937,if (x.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,944,final RexNode x2 = simplifierUnknownAsFalse.removeNullabilityCast(x);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,946,if (!x2.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,948,final RelNode filter = filterFactory.createFilter(frame.rel, x2);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,148,private final RelBuilder relBuilder;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,153,private final ReflectUtil.MethodDispatcher<Frame> dispatcher =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,154,ReflectUtil.createMethodDispatcher(Frame.class, this, "decorrelateRel",
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,160,private RelNode currentRel;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,162,private final Context context;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,167,private final Map<RelNode, Frame> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,252,.build();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,72,final List<SqlNode> columnNames = Util.skip(operands, 2);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,73,for (final SqlNode operand : columnNames) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,74,String name = ((SqlIdentifier) operand).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,75,if (nameList.contains(name)) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,76,throw validator.newValidationError(operand,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,77,RESOURCE.aliasListDuplicate(name));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,79,nameList.add(name);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,81,if (nameList.size() != rowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,83,final SqlNode node = operands.size() == 3
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,85,: new SqlNodeList(columnNames, SqlParserPos.sum(columnNames));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,86,throw validator.newValidationError(node,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,87,RESOURCE.aliasListDegree(rowType.getFieldCount(), getString(rowType),
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,88,nameList.size()));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,91,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,92,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,95,typeList,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,96,nameList);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,603,currentRel = parent;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,826,boolean alreadySorted = collation.getFieldCollations().isEmpty();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,827,for (RelCollation inputCollation : mq.collations(input)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,829,alreadySorted = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,830,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,834,boolean alreadySmaller = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,836,if (rowCount != null && fetch != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,837,final int offsetVal = offset == null ? 0 : RexLiteral.intValue(offset);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,838,final int limit = RexLiteral.intValue(fetch);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,839,if ((double) offsetVal + (double) limit < rowCount) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,840,alreadySmaller = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,843,return alreadySorted && alreadySmaller;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,372,static DruidJsonFilter toDruidFilters(final RexNode rexNode, RelDataType rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,373,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,383,return toDruidFilters(Iterables.getOnlyElement(((RexCall) rexNode).getOperands()), rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,384,druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,387,final DruidJsonFilter simpleFilter = toDruidFilters(Iterables
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,388,.getOnlyElement(((RexCall) rexNode).getOperands()), rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,397,final DruidJsonFilter druidFilter = toDruidFilters(e, rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,461,final DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,462,.toDruidFilters(filter.getCondition(), filter.getInput().getRowType(), this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,706,private static DruidJsonFilter computeFilter(@Nullable Filter filterRel,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,707,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,714,return DruidJsonFilter.toDruidFilters(filter, inputRowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,958,final DruidJsonFilter jsonFilter = computeFilter(filter, this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1015,havingJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1016,.toDruidFilters(havingFilter.getCondition(), havingFilter.getInput().getRowType(), this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1441,DruidJsonFilter druidFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1442,.toDruidFilters(filterNode, druidQuery.table.getRowType(), druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,169,DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,170,.toDruidFilters(e, filter.getInput().getRowType(), query);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,273,final DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,274,.toDruidFilters(cond, query.getTopNode().getRowType(), query);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,214,min = Math.min(min, range.getMax());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1947,case MATCH_RECOGNIZE:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1948,convertMatchRecognize(bb, (SqlCall) from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1949,return;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2115,protected void convertMatchRecognize(Blackboard bb, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2116,final SqlMatchRecognize matchRecognize = (SqlMatchRecognize) call;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4800,this.bb = bb;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4801,this.aggregatingSelectScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4802,(AggregatingSelectScope) bb.getValidator().getSelectScope(select);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,26,import java.net.URLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,31,import javax.net.ssl.HttpsURLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,42,URLConnection conn = new URL(url).openConnection();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,43,final HttpURLConnection httpConn = (HttpURLConnection) conn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,48,if (httpConn instanceof HttpsURLConnection) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,49,HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,50,httpsConn.setSSLSocketFactory(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,51,TrustAllSslSocketFactory.createSSLSocketFactory());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,60,return httpConn;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2010,final SqlJoin join = (SqlJoin) from;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2011,final SqlValidatorScope scope = validator.getJoinScope(from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2012,final Blackboard fromBlackboard = createBlackboard(scope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2013,SqlNode left = join.getLeft();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2014,SqlNode right = join.getRight();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2015,final boolean isNatural = join.isNatural();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2016,final JoinType joinType = join.getJoinType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2017,final SqlValidatorScope leftScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2018,Util.first(validator.getJoinScope(left),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2019,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2020,final Blackboard leftBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2021,createBlackboard(leftScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2022,final SqlValidatorScope rightScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2023,Util.first(validator.getJoinScope(right),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2024,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2025,final Blackboard rightBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2026,createBlackboard(rightScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2027,convertFrom(leftBlackboard, left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2028,RelNode leftRel = leftBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2029,convertFrom(rightBlackboard, right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2030,RelNode rightRel = rightBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2031,JoinRelType convertedJoinType = convertJoinType(joinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2032,RexNode conditionExp;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2033,final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2034,final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2035,if (isNatural) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2036,final RelDataType leftRowType = leftNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2037,final RelDataType rightRowType = rightNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2038,final List<String> columnList =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2044,conditionExp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2045,convertJoinCondition(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2046,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2047,leftNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2048,rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2049,join.getCondition(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2050,join.getConditionType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2051,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2052,rightRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2055,final RelNode joinRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2056,createJoin(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2057,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2058,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2059,rightRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2060,conditionExp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2061,convertedJoinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2062,bb.setRoot(joinRel, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2584,private RexNode convertJoinCondition(Blackboard bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2586,SqlValidatorNamespace rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2587,SqlNode condition,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2588,JoinConditionType conditionType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2591,if (condition == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2592,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2596,switch (conditionType) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2597,case ON:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2598,bb.setRoot(ImmutableList.of(leftRel, rightRel));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2599,return bb.convertExpression(condition);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2600,case USING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2601,final SqlNodeList list = (SqlNodeList) condition;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2602,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2603,for (SqlNode columnName : list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2604,final SqlIdentifier id = (SqlIdentifier) columnName;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2605,String name = id.getSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2606,nameList.add(name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2608,return convertUsing(leftNamespace, rightNamespace, nameList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2609,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2610,throw Util.unexpected(conditionType);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,33,import io.airlift.tpch.TpchColumn;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,34,import io.airlift.tpch.TpchEntity;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,35,import io.airlift.tpch.TpchTable;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,123,return tpchColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,162,return column.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,91,RelTraitSet traitSet = cluster.traitSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,840,final int ref = lookupGroupExpr(groupAnalyzer, groupExpr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,65,return mq.getColumnOrigins(rel.getInput(), iOutputColumn);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,757,public SqlImplementor implementor() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,929,public SqlNode field(int ordinal) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,47,import org.apache.calcite.sql.SqlBinaryOperator;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,196,SqlNode sqlCondition = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,198,SqlNode x = convertConditionToSqlNode(operand, leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,200,if (sqlCondition == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,201,sqlCondition = x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,203,sqlCondition = op.createCall(POS, sqlCondition, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,206,return sqlCondition;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,561,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,562,case IN:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,563,return SqlStdOperatorTable.NOT_IN
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,564,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,565,case LIKE:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,566,return SqlStdOperatorTable.NOT_LIKE
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,567,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,568,case SIMILAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,569,return SqlStdOperatorTable.NOT_SIMILAR_TO
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,570,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,571,default:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,596,if (op instanceof SqlBinaryOperator && nodeList.size() > 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,601,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,691,private SqlNode createLeftCall(SqlOperator op, List<SqlNode> nodeList) {
core/src/main/java/org/apache/calcite/config/Lex.java,30,ORACLE(Quoting.DOUBLE_QUOTE, Casing.TO_UPPER, Casing.UNCHANGED, true),
core/src/main/java/org/apache/calcite/config/Lex.java,37,MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,45,MYSQL_ANSI(Quoting.DOUBLE_QUOTE, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,51,SQL_SERVER(Quoting.BRACKET, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,58,JAVA(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, true);
core/src/main/java/org/apache/calcite/config/Lex.java,68,boolean caseSensitive) {
core/src/main/java/org/apache/calcite/config/Lex.java,69,this.quoting = quoting;
core/src/main/java/org/apache/calcite/config/Lex.java,70,this.unquotedCasing = unquotedCasing;
core/src/main/java/org/apache/calcite/config/Lex.java,71,this.quotedCasing = quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,501,public abstract void switchTo(String stateName);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,255,SqlParser.ConfigBuilder configBuilder = SqlParser.configBuilder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,256,configBuilder.setUnquotedCasing(Casing.UNCHANGED);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,260,parsedQuery = (SqlSelect) SqlParser.create(query, configBuilder.build()).parseQuery();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,469,return SqlParser.create(sql, parserConfig.build());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,747,.setCaseSensitive(config.caseSensitive());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,751,parserConfig.setParserFactory(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,84,return create(s, configBuilder().build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,197,Config DEFAULT = configBuilder().build();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,212,private Casing quotedCasing = Lex.ORACLE.quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,213,private Casing unquotedCasing = Lex.ORACLE.unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,214,private Quoting quoting = Lex.ORACLE.quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,215,private int identifierMaxLength = DEFAULT_IDENTIFIER_MAX_LENGTH;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,216,private boolean caseSensitive = Lex.ORACLE.caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,217,private SqlConformance conformance = SqlConformanceEnum.DEFAULT;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,220,private SqlParserImplFactory parserFactory = SqlParserImpl.FACTORY;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,226,this.quotedCasing = config.quotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,227,this.unquotedCasing = config.unquotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,228,this.quoting = config.quoting();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,229,this.identifierMaxLength = config.identifierMaxLength();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,230,this.conformance = config.conformance();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,232,this.parserFactory = config.parserFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,238,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,243,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,248,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,252,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,253,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,257,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,258,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,264,if (allowBangEqual != conformance.isBangEqualAllowed()) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,265,setConformance(
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,266,new SqlDelegatingConformance(conformance) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,276,this.conformance = conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,278,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,283,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,287,setCaseSensitive(lex.caseSensitive);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,288,setUnquotedCasing(lex.unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,289,setQuotedCasing(lex.quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,290,setQuoting(lex.quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,291,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,297,return new ConfigImpl(identifierMaxLength, quotedCasing, unquotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,298,quoting, caseSensitive, conformance, parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,306,private static class ConfigImpl implements Config {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,307,private final int identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,308,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,309,private final SqlConformance conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,310,private final Casing quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,311,private final Casing unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,312,private final Quoting quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,313,private final SqlParserImplFactory parserFactory;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,315,private ConfigImpl(int identifierMaxLength, Casing quotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,316,Casing unquotedCasing, Quoting quoting, boolean caseSensitive,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,317,SqlConformance conformance, SqlParserImplFactory parserFactory) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,318,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,319,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,327,public int identifierMaxLength() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,328,return identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,331,public Casing quotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,332,return quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,335,public Casing unquotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,336,return unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,339,public Quoting quoting() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,340,return quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,343,public boolean caseSensitive() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,344,return caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,347,public SqlConformance conformance() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,348,return conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,351,public boolean allowBangEqual() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,352,return conformance.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,355,public SqlParserImplFactory parserFactory() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,356,return parserFactory;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1279,for (int i = 0; i < groupCount; i++) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1287,projects.add(groupCount + i);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,250,public final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,259,this.groupSets = ImmutableList.copyOf(groupSets);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,127,ImmutableList.copyOf((Iterable) groupKeys);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,131,final int groupCount = groupKeyList.get(0).nodes.size();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,138,for (Ord<GroupKeyImpl> groupKey : Ord.reverse(groupKeyList)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1190,if (unique != null && unique) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1196,if (maxRowCount != null && maxRowCount <= 1D) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1204,final SortedSet<ImmutableBitSet> groupSetSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1205,new TreeSet<>(ImmutableBitSet.ORDERING);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1213,groupSetSet.add(groupSet2);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1215,groupSets = ImmutableList.copyOf(groupSetSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1226,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1227,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1228,registrar.registerExpressions(aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1229,if (aggCall1.filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1230,registrar.registerExpression(aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1240,final AggregateCall aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1241,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1242,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1243,final List<Integer> args =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1244,registrar.registerExpressions(aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1245,final int filterArg = aggCall1.filter == null ? -1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1246,: registrar.registerExpression(aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1247,if (aggCall1.distinct && !aggCall1.aggFunction.isQuantifierAllowed()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1248,throw new IllegalArgumentException("DISTINCT not allowed");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1250,if (aggCall1.filter != null && !aggCall1.aggFunction.allowsFilter()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1251,throw new IllegalArgumentException("FILTER not allowed");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1253,aggregateCall =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1254,AggregateCall.create(aggCall1.aggFunction, aggCall1.distinct,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1258,aggregateCall = ((AggCallImpl2) aggCall).aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1260,aggregateCalls.add(aggregateCall);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1976,private static class AggCallImpl2 implements AggCall {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1312,boolean allowCast) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1327,return makeCharLiteral(padRight((NlsString) value, type.getPrecision()));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,48,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,444,Comparable value,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,446,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,533,assert value == null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,314,if (simplified != null) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,315,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,317,return call;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,918,terms.set(i, term);
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,63,assert kind == SqlKind.IN || kind == SqlKind.NOT_IN;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,123,GEOMETRY(PrecScale.NO_NO, true, ExtraSqlTypes.GEOMETRY, SqlTypeFamily.GEO);
core/src/main/java/org/apache/calcite/util/Util.java,1985,if (size < 15) {
core/src/main/java/org/apache/calcite/util/Util.java,2015,if (isDistinct(list)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,127,case BETWEEN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,128,case IN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,238,ImmutableList.builder();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,265,if (e.getKind() != SqlKind.IN && e.getKind() != SqlKind.NOT_IN) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,353,case IN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,354,case NOT_IN:
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,110,List<RexNode> disjunctions = RelOptUtil.disjunctions(condition);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,71,new Translator(MongoRules.mongoFieldNames(getRowType()));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,85,Translator(List<String> fieldNames) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,97,for (RexNode node : RelOptUtil.disjunctions(condition)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,83,final MongoRel.Implementor mongoImplementor = new MongoRel.Implementor();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,184,RelDataTypeFamily castFrom = call.getOperandType(0).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,185,RelDataTypeFamily castTo = call.getOperandType(1).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,186,if (castFrom instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,187,&& castTo instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,188,&& nonMonotonicCasts.containsEntry(castFrom, castTo)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3811,inferUnknownTypes(unknownType, groupScope, groupList);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,28,import org.apache.calcite.rel.type.RelDataTypeSystem;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,31,import org.apache.calcite.schema.Function;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,32,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,46,import org.apache.calcite.sql.type.FamilyOperandTypeChecker;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,51,import org.apache.calcite.sql.type.SqlTypeFactoryImpl;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,73,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,143,private Collection<Function> getFunctionsFrom(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,252,final Predicate<Function> predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,296,final SqlTypeFactoryImpl typeFactory =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,297,new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,301,for (Function function : schema.getFunctions(name, true)) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,303,table.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,304,toOp(typeFactory, id, function));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,310,private SqlOperator toOp(SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,311,return toOp(typeFactory, name, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,319,private static SqlOperator toOp(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,320,SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,321,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,322,List<SqlTypeFamily> typeFamilies = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,323,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,324,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,325,argTypes.add(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,326,typeFamilies.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,327,Util.first(type.getSqlTypeName().getFamily(), SqlTypeFamily.ANY));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,335,final FamilyOperandTypeChecker typeChecker =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,337,final List<RelDataType> paramTypes = toSql(typeFactory, argTypes);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,339,return new SqlUserDefinedFunction(name, infer((ScalarFunction) function),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,340,InferTypes.explicit(argTypes), typeChecker, paramTypes, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,342,return new SqlUserDefinedAggFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,343,infer((AggregateFunction) function), InferTypes.explicit(argTypes),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,346,return new SqlUserDefinedTableMacro(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,347,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,348,(TableMacro) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,350,return new SqlUserDefinedTableFunction(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,351,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,352,(TableFunction) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,385,private static List<RelDataType> toSql(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,386,final RelDataTypeFactory typeFactory, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,407,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,418,public void registerRules(RelOptPlanner planner) throws Exception {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,83,operandTypeChecker, null, funcType);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,123,if (hasAssignment() && !(call.getOperator() instanceof SqlUnresolvedFunction)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,127,if (call.getOperator() instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,128,final List<RelDataType> paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,129,((SqlFunction) call.getOperator()).getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,130,if (paramTypes != null && operandList.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,131,final List<SqlNode> list = Lists.newArrayList(operandList);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,132,while (list.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,133,list.add(DEFAULT_CALL);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,135,return list;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,138,return operandList;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,156,final SqlFunction operator = (SqlFunction) call.getOperator();
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,30,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,56,private final List<RelDataType> paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,80,operandTypeChecker, null, category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,120,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,127,this.paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,128,paramTypes == null ? null : ImmutableList.copyOf(paramTypes);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,155,return paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,505,SqlUtil.lookupRoutine(validator.getOperatorTable(), getNameAsId(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,410,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,411,SqlIdentifier funcName,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,412,List<RelDataType> argTypes,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,413,List<String> argNames,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,414,SqlSyntax sqlSyntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,415,SqlKind sqlKind,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,516,SqlSyntax syntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,517,final Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,613,private static RelDataType bestMatch(List<SqlFunction> sqlFunctions, int i,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,617,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,618,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,19,import org.apache.calcite.jdbc.JavaTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,20,import org.apache.calcite.linq4j.function.Experimental;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,21,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,23,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,25,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,33,import org.apache.calcite.sql.type.SqlTypeName;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,39,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,40,import java.util.List;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,54,public final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,62,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,63,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,66,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,70,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,71,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,72,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,73,argTypes.add(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,75,return toSql(argTypes);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,78,private List<RelDataType> toSql(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,87,private RelDataType toSql(RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,88,if (type instanceof RelDataTypeFactoryImpl.JavaType
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,90,== Object.class) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,91,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,92,typeFactory.createSqlType(SqlTypeName.ANY), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,94,return JavaTypeFactoryImpl.toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,98,public List<RelDataType> getParameterTypes(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,99,final RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,100,return Lists.transform(function.getParameters(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,109,public RelDataType getReturnType(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,110,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,51,this(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,52,paramTypes, function, SqlFunctionCategory.USER_DEFINED_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,56,protected SqlUserDefinedFunction(SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,59,SqlOperandTypeChecker operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,60,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,63,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,64,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,65,paramTypes, category);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,43,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,45,super(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,46,paramTypes, function, SqlFunctionCategory.USER_DEFINED_TABLE_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,70,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,71,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3116,String clause) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3301,SqlNode current, SqlValidatorScope scope, String optionalClause) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3326,SqlNode current, SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3369,SqlCall aggCall, SqlNode parent) {
core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java,63,assert expr.getType().getFieldList().get(field.getIndex()) == field;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,287,public static SqlOperatorTable operatorTable(String className) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,292,className, "*", true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,135,for (Map.Entry<String, ScalarFunction> entry
core/src/main/java/org/apache/calcite/model/ModelHandler.java,136,: ScalarFunctionImpl.createAll(clazz).entries()) {
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,219,try {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,220,final SqlNode node = call.operand(ordinal);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,221,return SqlLiteral.unchain(node).getValueAs(clazz);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,228,return SqlUtil.isNullLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,232,return SqlUtil.isLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,241,public SqlKind getKind() {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,259,public <T> T getValueAs(Class<T> clazz) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,434,if (node instanceof SqlIntervalQualifier) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,435,SqlIntervalQualifier qualifier = (SqlIntervalQualifier) node;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,436,return qualifier.timeUnitRange;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,486,if (node instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,55,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,212,if (allowCast) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,213,if (node.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,214,SqlCall call = (SqlCall) node;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,215,if (isLiteral(call.operand(0), false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,217,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,221,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,40,InferTypes.RETURN_TYPE, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlCollectionTableOperator.java,40,OperandTypes.ANY);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,66,SqlTypeFamily family = families.get(iFormalOperand);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,67,if (family == SqlTypeFamily.ANY) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,70,GEO;
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,86,opTab.lookupOperatorOverloads(sqlFunction.getSqlIdentifier(),
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,88,for (SqlOperator operator2 : list) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,89,if (operator2.isAggregator() && !operator2.requiresOver()) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,92,if (aggregate) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,93,found(call);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,57,if (operator instanceof SqlUserDefinedTableFunction) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,58,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,59,: "User-defined table function should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,60,final SqlUserDefinedTableFunction udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,61,(SqlUserDefinedTableFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,62,return udf.getRowType(validator.typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,64,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,65,: "User-defined table macro should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,66,final SqlUserDefinedTableMacro udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,67,(SqlUserDefinedTableMacro) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,69,.getRowType(validator.typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,71,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,20,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,24,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,38,public class SqlUserDefinedTableFunction extends SqlUserDefinedFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,67,public RelDataType getRowType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,68,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,70,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,71,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,72,return getFunction().getRowType(typeFactory, arguments);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,84,public Type getElementType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,85,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,87,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,88,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,20,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,22,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,23,import org.apache.calcite.linq4j.tree.FunctionExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,27,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,32,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,37,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,38,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,39,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,43,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,44,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,45,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,49,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,53,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,62,public class SqlUserDefinedTableMacro extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,83,public TranslatableTable getTable(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,84,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,85,List<Object> arguments = convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,86,tableMacro, getNameAsId(), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,101,public static List<Object> convertArguments(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,102,List<SqlNode> operandList, Function function,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,103,SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,104,boolean failOnNonLiteral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,105,List<Object> arguments = new ArrayList<>(operandList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,107,for (Pair<FunctionParameter, SqlNode> pair
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,108,: Pair.zip(function.getParameters(), operandList)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,109,try {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,110,final Object o = getValue(pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,111,final Object o2 = coerce(o, pair.left.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,112,arguments.add(o2);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,118,+ ") is not literal: " + pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,126,private static Object getValue(SqlNode right) throws NonLiteralException {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,127,switch (right.getKind()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,128,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,130,for (SqlNode o : ((SqlCall) right).getOperandList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,131,list.add(getValue(o));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,133,return ImmutableNullableList.copyOf(list);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,134,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,135,final ImmutableMap.Builder<Object, Object> builder2 =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,136,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,137,final List<SqlNode> operands = ((SqlCall) right).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,138,for (int i = 0; i < operands.size(); i += 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,139,final SqlNode key = operands.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,140,final SqlNode value = operands.get(i + 1);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,141,builder2.put(getValue(key), getValue(value));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,143,return builder2.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,144,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,145,if (SqlUtil.isNullLiteral(right, true)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,146,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,148,if (SqlUtil.isLiteral(right)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,149,return ((SqlLiteral) right).getValue();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,151,if (right.getKind() == SqlKind.DEFAULT) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,152,return null; // currently NULL is the only default value
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,154,throw new NonLiteralException();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,158,private static Object coerce(Object o, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,159,if (o == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,160,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,162,if (!(type instanceof RelDataTypeFactoryImpl.JavaType)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,163,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,165,final RelDataTypeFactoryImpl.JavaType javaType =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,166,(RelDataTypeFactoryImpl.JavaType) type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,167,final Class clazz = javaType.getJavaClass();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,169,if (clazz.isAssignableFrom(o.getClass())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,170,return o;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,179,BlockBuilder bb = new BlockBuilder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,180,final Expression expr =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,182,bb.add(Expressions.return_(null, expr));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,183,final FunctionExpression convert =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,186,return convert.compile().dynamicInvoke();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,191,private static class NonLiteralException extends Exception {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2336,final TranslatableTable table =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2337,udf.getTable(typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2349,elementType = udtf.getElementType(typeFactory, callBinding.operands());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,61,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,66,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,47,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,52,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,38,static final String ROWTIME_COLUMN_NAME = "ROWTIME";
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,65,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,70,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,44,class CsvEnumerator<E> implements Enumerator<E> {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,46,private final String[] filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,63,CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,64,List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,65,this(source, cancelFlag, fieldTypes, identityList(fieldTypes.size()));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,68,CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,69,List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,75,CsvEnumerator(Source source, AtomicBoolean cancelFlag, boolean stream,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,79,this.filterValues = filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,93,int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,94,if (fields.length == 1) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,95,final int field = fields[0];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,98,return new ArrayRowConverter(fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,111,static RelDataType deduceRowType(JavaTypeFactory typeFactory, Source source,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,112,List<CsvFieldType> fieldTypes, Boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,117,names.add(CsvSchemaFactory.ROWTIME_COLUMN_NAME);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,174,public static CSVReader openCsv(Source source) throws IOException {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,206,String filterValue = filterValues[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,235,static int[] identityList(int n) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,328,private final CsvFieldType[] fieldTypes;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,329,private final int[] fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,333,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,335,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,336,this.stream = false;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,339,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields, boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,341,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,354,final Object[] objects = new Object[fields.length];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,355,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,356,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,357,objects[i] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,363,final Object[] objects = new Object[fields.length + 1];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,365,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,366,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,367,objects[i + 1] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,374,private static class SingleColumnRowConverter extends RowConverter {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,33,enum CsvFieldType {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamReader.java,17,package org.apache.calcite.adapter.csv;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,19,import org.apache.calcite.adapter.csv.CsvFilterableTable;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,55,this.tables = ImmutableList.copyOf(tables);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,91,final Source baseSource = Sources.of(baseDirectory);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,100,if (files == null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,101,System.out.println("directory " + baseDirectory + " not found");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,102,files = new File[0];
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,105,for (File file : files) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,106,Source source = Sources.of(file);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,107,Source sourceSansGz = source.trim(".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,108,final Source sourceSansJson = sourceSansGz.trimOrNull(".json");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,109,if (sourceSansJson != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,114,final Source sourceSansCsv = sourceSansGz.trimOrNull(".csv");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,115,if (sourceSansCsv != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,116,addTable(builder, source, sourceSansCsv.relative(baseSource).path(),
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,117,null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,149,final Table table = new CsvFilterableTable(source, null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,37,public FileSchemaFactory() {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,46,File directoryFile = baseDirectory;
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,48,if (baseDirectory != null && directory != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,50,if (!directoryFile.isAbsolute()) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,17,package org.apache.calcite.adapter.csv;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,402,protected void notifyDiscard(
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,403,RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,559,RelNode joinRel, ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,562,RelNode left = joinRel.getInputs().get(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,563,RelNode right = joinRel.getInputs().get(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,574,return numDistinctVals(population, mq.getRowCount(joinRel));
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,383,Join joinRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,386,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,393,filters.add(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,403,shiftRightFilter(joinRel, left, multiJoin,
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,751,return selfJoin.getLeftFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,753,return selfJoin.getRightFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,767,return selfJoin.getLeftFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,780,return selfJoin.getRightFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,796,assert selfJoin.getRightFactor() == rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,797,return selfJoin.getColumnMapping().get(rightOffset);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,831,private class RemovableSelfJoin {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,835,private int leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,841,private int rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,848,private Map<Integer, Integer> columnMapping;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,859,public int getLeftFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,860,return leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,863,public int getRightFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,864,return rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,867,public Map<Integer, Integer> getColumnMapping() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,868,return columnMapping;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,63,return getNlsString().getCollation();
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,169,NlsString nls = ((SqlCharStringLiteral) rand).getNlsString();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,58,private static DruidJsonFilter toEqualityKindDruidFilter(RexNode rexNode, RelDataType rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,59,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,60,if (rexNode.getKind() != SqlKind.EQUALS && rexNode.getKind() != SqlKind.NOT_EQUALS) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,154,final String literalValue = DruidJsonFilter.toDruidLiteral(rexLiteral, rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,161,final Pair<String, ExtractionFunction> druidColumn = DruidQuery.toDruidColumn(refNode, rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,162,druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1097,throw new IllegalStateException("Can not plan Druid Query");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1111,private JsonLimit computeSort(@Nullable Integer fetch, List<Integer> collationIndexes,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1112,List<Direction> collationDirections, ImmutableBitSet numericCollationIndexes,
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,192,result.add("  " + fieldName + DISTINCT_FIELD_SUFFIX + " = DISTINCT " + relAlias + '.'
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,193,+ fieldName + ";\n");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,24,import org.apache.calcite.plan.RelOptRuleOperand;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,32,import org.apache.calcite.rel.core.RelFactories;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,62,CassandraFilterRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,63,CassandraProjectRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,64,CassandraSortRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,65,CassandraLimitRule.INSTANCE
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,94,protected final Convention out;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,96,CassandraConverterRule(Class<? extends RelNode> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,97,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,101,<R extends RelNode> CassandraConverterRule(Class<R> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,102,Predicate<? super R> predicate,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,103,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,104,super(clazz, predicate, Convention.NONE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,105,CassandraRel.CONVENTION, RelFactories.LOGICAL_BUILDER, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,106,this.out = CassandraRel.CONVENTION;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,114,private static class CassandraFilterRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,124,private static final CassandraFilterRule INSTANCE = new CassandraFilterRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,126,private CassandraFilterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,127,super(operand(LogicalFilter.class, operand(CassandraTableScan.class, none())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,210,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,221,public RelNode convert(LogicalFilter filter, CassandraTableScan scan) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,239,private static class CassandraProjectRule extends CassandraConverterRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,240,private static final CassandraProjectRule INSTANCE = new CassandraProjectRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,242,private CassandraProjectRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,243,super(LogicalProject.class, "CassandraProjectRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,257,public RelNode convert(RelNode rel) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,270,private static class CassandraSortRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,285,private static final RelOptRuleOperand CASSANDRA_OP =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,286,operand(CassandraToEnumerableConverter.class,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,289,private static final CassandraSortRule INSTANCE = new CassandraSortRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,291,private CassandraSortRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,304,public boolean matches(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,371,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,385,private static class CassandraLimitRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,386,private static final CassandraLimitRule INSTANCE = new CassandraLimitRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,388,private CassandraLimitRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,389,super(operand(EnumerableLimit.class, operand(CassandraToEnumerableConverter.class, any())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,401,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,33,public static final ConverterRule INSTANCE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,41,public CassandraToEnumerableConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,42,RelBuilderFactory relBuilderFactory) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,44,CassandraRel.CONVENTION, EnumerableConvention.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,45,relBuilderFactory, "CassandraToEnumerableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,31,EnumerableAggregateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,32,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,33,EnumerableConvention.INSTANCE, "EnumerableAggregateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,91,public static final EnumerableToBindableConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,99,public EnumerableToBindableConverterRule(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,100,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,102,EnumerableConvention.INSTANCE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,103,relBuilderFactory, "EnumerableToBindableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,31,EnumerableCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,39,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,30,EnumerableCollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,31,super(Collect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,37,public EnumerableCorrelateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,43,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,31,EnumerableFilterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,37,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,30,public class EnumerableFilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,37,super(operand(EnumerableFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,40,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,33,public static final EnumerableInterpreterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,41,public EnumerableInterpreterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,43,BindableConvention.INSTANCE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,44,relBuilderFactory, "EnumerableInterpreterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,31,EnumerableIntersectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,32,super(LogicalIntersect.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,33,EnumerableConvention.INSTANCE, "EnumerableIntersectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,36,EnumerableJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,37,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,38,LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,39,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,40,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,31,class EnumerableLimitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,33,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,34,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,44,EnumerableMergeJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,45,super(LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,46,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,47,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,30,EnumerableMinusRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,31,super(LogicalMinus.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,31,EnumerableProjectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,37,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,27,public class EnumerableProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,34,super(operand(EnumerableProject.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,37,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,20,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,35,new EnumerableJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,38,new EnumerableMergeJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,44,new EnumerableCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,50,new EnumerableProjectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,53,new EnumerableFilterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,56,new EnumerableCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,59,new EnumerableAggregateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,62,new EnumerableSortRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,65,new EnumerableLimitRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,68,new EnumerableUnionRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,71,new EnumerableIntersectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,74,new EnumerableMinusRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,77,new EnumerableTableModifyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,80,new EnumerableValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,83,new EnumerableWindowRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,86,new EnumerableCollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,89,new EnumerableUncollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,92,new EnumerableFilterToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,95,new EnumerableProjectToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,98,new EnumerableTableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,101,new EnumerableTableFunctionScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,29,EnumerableSortRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,30,super(Sort.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,35,public EnumerableTableFunctionScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,36,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,44,public EnumerableTableFunctionScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,46,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,53,LogicalTableFunctionScan tbl = (LogicalTableFunctionScan) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,56,tbl.getCall(), tbl.getColumnMappings());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,39,public EnumerableTableModifyRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,41,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,27,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,38,public EnumerableTableScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,39,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,47,public EnumerableTableScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,49,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,30,EnumerableUncollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,31,super(Uncollect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,30,EnumerableUnionRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,31,super(LogicalUnion.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,37,public EnumerableValuesRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,30,EnumerableWindowRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,31,super(LogicalWindow.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,27,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,106,protected final JdbcConvention out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,108,JdbcConverterRule(Class<? extends RelNode> clazz, RelTrait in,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,109,JdbcConvention out, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,111,this.out = out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,347,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,404,public JdbcFilterRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,408,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,447,public JdbcAggregateRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,451,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,529,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,588,public JdbcUnionRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,592,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,635,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,679,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,34,public JdbcToEnumerableConverterRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,35,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,37,EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,45,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,89,new BindableTableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,92,new BindableFilterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,95,new BindableProjectRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,98,new BindableSortRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,101,new BindableJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,107,new BindableValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,110,new BindableAggregateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,113,new BindableWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,142,public static class BindableTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,150,super(operand(LogicalTableScan.class, none()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,270,public BindableFilterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,275,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,339,public BindableProjectRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,345,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,396,public BindableSortRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,398,BindableConvention.INSTANCE, relBuilderFactory, "BindableSortRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,401,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,452,public BindableJoinRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,454,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,458,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,524,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,528,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,597,public BindableValuesRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,599,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,675,public BindableAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,677,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,681,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,740,public BindableWindowRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,742,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,746,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,34,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,42,public NoneToBindableConverterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,44,BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,25,public abstract class CommonRelSubExprRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,34,super(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,417,protected boolean equals(RelOptRule that) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,618,private static class ConverterRelOptRuleOperand extends RelOptRuleOperand {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,312,new TraitMatchingRule(converter, RelFactories.LOGICAL_BUILDER));
core/src/main/java/org/apache/calcite/plan/hep/HepProgramBuilder.java,115,instruction.rule = rule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,103,public static class ExpandConversionRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,105,new ExpandConversionRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,113,super(operand(AbstractConverter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,116,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,36,public abstract class ConverterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,78,super(convertOperand(clazz, predicate, in),
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,79,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,87,assert in.getTraitDef() == out.getTraitDef();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,92,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,127,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,33,public class TraitMatchingRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,36,private final ConverterRule converter;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,42,this(converterRule, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,54,super(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,55,operand(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,56,converterRule.getOperand().getMatchedClass(),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,57,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,58,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,60,assert converterRule.getOperand().childPolicy
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,61,== RelOptRuleOperandChildPolicy.ANY;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,62,this.converter = converterRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,68,return converter.getOutConvention();
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,73,if (input.getTraitSet().contains(converter.getOutTrait())) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,74,converter.onMatch(call);
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,45,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,48,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,81,public static final AggregateExpandDistinctAggregatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,87,public static final AggregateExpandDistinctAggregatesRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,91,public final boolean useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,99,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,100,this.useGroupingSets = useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,120,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,171,if (useGroupingSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,78,relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,83,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,60,public static final AggregateFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,64,this(
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,65,operand(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,66,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,67,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,73,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,76,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,67,public static final AggregateJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,72,public static final AggregateJoinTransposeRule EXTENDED =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,76,private final boolean allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,82,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,85,this.allowFunctions = allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,208,if (!allowFunctions) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,52,public static final AggregateProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,60,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,61,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,62,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,65,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,64,public static final AggregateProjectPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,70,public static final AggregateProjectPullUpConstantsRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,89,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,91,operand(inputClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,92,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,97,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,86,public static final AggregateReduceFunctionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,95,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,108,public void onMatch(RelOptRuleCall ruleCall) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,38,public static final AggregateRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,60,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,61,public static final AggregateStarTableRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,68,public static final AggregateStarTableRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,105,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,44,public static final AggregateUnionAggregateRule AGG_ON_FIRST_INPUT =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,51,public static final AggregateUnionAggregateRule AGG_ON_SECOND_INPUT =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,63,public static final AggregateUnionAggregateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,79,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,81,operand(unionClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,82,operand(firstUnionInputClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,83,operand(secondUnionInputClass, any()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,84,relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,99,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,54,public static final AggregateUnionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,71,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,72,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,73,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,74,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,57,public static final AggregateValuesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,66,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,69,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,41,public static final CalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,53,operand(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,54,Calc.class,
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,55,operand(Calc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,56,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,24,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,40,public static final CalcRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,51,super(operand(LogicalCalc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,57,LogicalCalc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,58,RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,59,if (!program.isTrivial()) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,60,return;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,42,public static final CalcSplitRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,51,super(operand(Calc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,39,private final Class consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,41,private final boolean coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,49,this(consumerRelClass, coerceNames, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,63,operand(consumerRelClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,64,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,66,this.consumerRelClass = consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,67,this.coerceNames = coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,76,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,78,if (consumerRel.getClass() != consumerRelClass) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,92,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,100,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,94,private static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,110,new FilterDateRangeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,178,relBuilderFactory, "FilterDateRangeRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,53,public static final FilterAggregateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,67,RelBuilderFactory builderFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,69,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,70,operand(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,71,operand(aggregateClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,72,builderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,76,RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,77,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,91,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,42,public static final FilterCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,54,operand(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,55,Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,56,operand(LogicalCalc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,57,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,69,if (calc.getProgram().containsAggs()) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,44,public static final FilterCorrelateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,52,public FilterCorrelateRule(RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,54,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,55,operand(Correlate.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,56,builderFactory, "FilterCorrelateRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,60,public static final FilterJoinRule FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,67,public static final FilterJoinRule DUMB_FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,72,public static final FilterJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,76,private final boolean smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,81,private final Predicate predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,89,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,90,boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,91,super(operand, relBuilderFactory, "FilterJoinRule:" + id);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,92,this.smart = smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,101,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,102,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,103,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,104,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,113,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,114,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,115,RelFactories.ProjectFactory projectFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,116,Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,117,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,118,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,146,if (smart
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,305,public static class JoinConditionPushRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,308,super(RelOptRule.operand(Join.class, RelOptRule.any()),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,310,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,327,public static class FilterIntoJoinRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,330,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,331,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,332,operand(Join.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,334,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,342,this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,36,public static final FilterMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,46,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,47,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,48,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,22,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,34,public static final FilterMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,51,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,28,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,44,public static final FilterProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,48,private final boolean copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,49,private final boolean copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,64,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,67,copyFilter, copyProject, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,77,projectFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,78,RelBuilder.proto(filterFactory, projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,86,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,87,this.copyFilter = copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,88,this.copyProject = copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,93,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,97,if (RexOver.containsOver(project.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,120,if (copyFilter) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,129,RelNode newProjRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,130,copyProject
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,137,call.transformTo(newProjRel);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,44,public static final FilterRemoveIsNotDistinctFromRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,94,private class RemoveIsNotDistinctFromRexShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,95,RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,103,public RexNode visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,41,public static final FilterSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,51,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,52,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,53,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,58,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,43,public static final FilterTableFunctionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,53,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,54,operand(LogicalTableFunctionScan.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,55,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,54,public abstract class FilterTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,67,public static final FilterTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,81,public static final FilterTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,99,this(operand, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,105,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,48,public static final FilterToCalcRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,59,super(operand(LogicalFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,70,public static final IntersectToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,76,public IntersectToDistinctRule(Class<? extends Intersect> intersectClazz,
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,78,super(operand(intersectClazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,83,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,40,public static final JoinAddRedundantSemiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,54,public static final JoinAssociateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,64,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,65,operand(Join.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,66,operand(RelSubset.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,67,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,72,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,61,private final boolean swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,71,this.swapOuter = swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,75,this(LogicalJoin.class, RelFactories.LOGICAL_BUILDER, swapOuter);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,140,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,42,public static final JoinExtractFilterRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,53,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,61,public static final JoinProjectTransposeRule BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,68,public static final JoinProjectTransposeRule LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,74,public static final JoinProjectTransposeRule RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,82,public static final JoinProjectTransposeRule BOTH_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,90,public static final JoinProjectTransposeRule LEFT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,97,public static final JoinProjectTransposeRule RIGHT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,106,private final boolean includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,114,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,115,this.includeOuter = includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,122,this(operand, description, false, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,128,this(operand, description, false,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,129,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,136,this(operand, description, includeOuter,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,137,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,143,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,144,Join joinRel = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,145,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,147,Project leftProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,148,Project rightProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,155,&& (includeOuter || !joinType.generatesNullsOnLeft())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,156,leftProj = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,157,leftJoinChild = getProjectChild(call, leftProj, true);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,159,leftProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,163,&& (includeOuter || !joinType.generatesNullsOnRight())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,164,rightProj = getRightChild(call);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,165,rightJoinChild = getProjectChild(call, rightProj, false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,167,rightProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,168,rightJoinChild = joinRel.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,170,if ((leftProj == null) && (rightProj == null)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,183,RelDataType joinChildrenRowType =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,188,joinRel.getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,197,int nProjExprs = joinRel.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,199,final RexBuilder rexBuilder = joinRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,202,leftProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,209,List<RelDataTypeField> leftFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,211,int nFieldsLeft = leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,213,rightProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,230,RexProgram bottomProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,237,RexProgramBuilder topProgramBuilder =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,242,topProgramBuilder.addCondition(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,243,RexProgram topProgram = topProgramBuilder.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,244,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,253,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,256,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,257,joinRel.copy(joinRel.getTraitSet(), newCondition,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,258,leftJoinChild, rightJoinChild, joinRel.getJoinType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,259,joinRel.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,264,List<RexLocalRef> projList = mergedProgram.getProjectList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,265,List<RelDataTypeField> newJoinFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,266,newJoinRel.getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,267,int nJoinFields = newJoinFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,285,relBuilder.push(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,286,relBuilder.project(newProjExprs, joinRel.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,290,relBuilder.convert(joinRel.getRowType(), false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,352,Project projRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,360,if (projRel != null) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,362,projRel.getNamedProjects();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,387,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,388,field.getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,40,public static final JoinPushExpressionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,44,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,46,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,50,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,52,this(clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,68,public static final RelOptRule RIGHT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,69,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,71,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,75,public static final RelOptRule LEFT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,76,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,78,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,80,private final boolean right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,86,Class<? extends Join> clazz, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,87,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,88,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,89,operand(clazz, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,91,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,92,this.right = right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,97,Class<? extends Join> clazz, ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,98,this(description, right, clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,102,if (right) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,27,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,44,public static final JoinPushTransitivePredicatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,49,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,55,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,57,this(clazz, RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,70,final RexBuilder rexBuilder = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,73,RelNode lChild = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,75,RelNode curr = lChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,78,call.getPlanner().onCopy(curr, lChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,81,RelNode rChild = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,83,RelNode curr = rChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,86,call.getPlanner().onCopy(curr, rChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,90,lChild, rChild, join.getJoinType(), join.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,77,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,82,public boolean matches(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,106,public static final JoinToMultiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,113,this(clazz, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,119,public JoinToMultiJoinRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,121,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,122,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,123,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,124,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,125,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,130,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,38,public static final JoinUnionTransposeRule LEFT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,46,public static final JoinUnionTransposeRule RIGHT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,63,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,71,public static final LoptOptimizeJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,76,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,297,final TreeSet<Integer> sortedFactors = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,298,sortedFactors.addAll(simpleFactors.keySet());
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1642,Pair.of(
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1643,(RexNode) rexBuilder.makeInputRef(currFields.get(i).getType(), i),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,23,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,48,public static final MaterializedViewFilterScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,54,.build();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,60,super(operand(Filter.class, operand(TableScan.class, null, none())),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,61,relBuilderFactory, "MaterializedViewFilterScanRule");
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,80,Collections.singletonList((RelNode) scan));
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,88,new HepPlanner(program, planner.getContext());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,69,public static final MultiJoinOptimizeBushyRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,78,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,62,public static final MultiJoinProjectTransposeRule MULTI_BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,63,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,64,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,65,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,66,operand(MultiJoin.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,67,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,68,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,69,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,72,public static final MultiJoinProjectTransposeRule MULTI_LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,73,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,74,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,75,some(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,76,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,77,operand(MultiJoin.class, any())))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,78,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,81,public static final MultiJoinProjectTransposeRule MULTI_RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,82,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,83,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,84,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,85,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,86,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,87,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,96,this(operand, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,104,super(operand, description, false, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,48,public static final ProjectCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,60,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,61,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,62,operand(LogicalCalc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,63,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,69,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,70,final LogicalCalc calc = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,29,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,46,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,56,public ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,57,Class<? extends Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,58,Class<? extends Filter> filterClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,59,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,61,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,62,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,63,projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,64,operand(filterClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,71,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,72,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,78,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,40,public static final ProjectJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,50,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,62,RelBuilderFactory relFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,67,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,74,Project origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,84,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,86,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,89,preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,91,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,97,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,98,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,102,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,103,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,110,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,112,List<RelDataTypeField> projJoinFieldList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,113,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,115,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,116,leftProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,117,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,118,rightProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,120,pushProject.convertRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,122,projJoinFieldList,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,127,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,131,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,132,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,138,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,139,pushProject.createNewProject(newJoinRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,40,public static final ProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,46,private final boolean force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,57,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,58,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,59,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,61,this.force = force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,66,this(force, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,101,if (!force) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,112,if (force
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,36,public static final ProjectMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,44,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,45,operand(MultiJoin.class, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,50,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,54,public static final ProjectRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,42,public static final ProjectSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,51,private PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,65,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,66,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,67,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,69,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,76,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,77,SetOp setOp = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,85,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,86,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,87,origProj, null, setOp, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,88,pushProject.locateAllRefs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,90,List<RelNode> newSetOpInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,91,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,17,package org.apache.calcite.rel.rules;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,20,import org.apache.calcite.plan.RelOptRuleCall;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,22,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,23,import org.apache.calcite.rel.core.Project;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,25,import org.apache.calcite.rel.core.Sort;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,26,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,28,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,38,public static final ProjectSortTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,39,new ProjectSortTransposeRule(Project.class, Sort.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,40,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,45,private ProjectSortTransposeRule(Class<Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,46,Class<Sort> sortClass, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,47,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,48,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,49,operand(sortClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,50,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,54,protected ProjectSortTransposeRule(RelOptRuleOperand operand) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,55,this(operand, RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,59,protected ProjectSortTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,60,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,61,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,67,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,68,final Sort sort = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,69,if (sort.getClass() != Sort.class) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,70,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,72,RelNode newProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,73,project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,74,project.getTraitSet(), ImmutableList.of(sort.getInput()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,75,final Sort newSort =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,76,sort.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,77,sort.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,78,newProject,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,79,sort.getCollation(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,80,sort.offset,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,81,sort.fetch);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,82,call.transformTo(newSort);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,52,public abstract class ProjectTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,63,public static final ProjectTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,77,public static final ProjectTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,96,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,45,public static final ProjectToCalcRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,56,super(operand(LogicalProject.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,23,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,95,public static final ProjectToWindowRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,98,public static final ProjectToWindowRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,110,public ProjectToWindowRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,111,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,112,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,131,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,133,relBuilderFactory, "ProjectToWindowRule");
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,136,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,137,Calc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,138,assert RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,162,relBuilderFactory, "ProjectToWindowRule:project");
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,167,assert RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,50,public static final ProjectWindowTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,60,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,61,operand(LogicalWindow.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,62,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,66,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,67,final LogicalWindow window = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,180,final LogicalProject newTopProj = project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,193,private ImmutableBitSet findReference(final LogicalProject project,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,194,final LogicalWindow window) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,46,import static org.apache.calcite.plan.RelOptRule.any;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,47,import static org.apache.calcite.plan.RelOptRule.none;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,48,import static org.apache.calcite.plan.RelOptRule.operand;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,49,import static org.apache.calcite.plan.RelOptRule.some;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,50,import static org.apache.calcite.plan.RelOptRule.unordered;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,78,operand(LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,81,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,82,final LogicalUnion union = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,84,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,86,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,87,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,96,builder.push(union).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,109,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,126,operand(LogicalMinus.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,130,final LogicalMinus minus = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,132,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,134,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,135,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,140,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,148,builder.push(minus).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,161,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,179,operand(LogicalIntersect.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,182,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,183,LogicalIntersect intersect = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,184,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,185,builder.push(intersect).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,186,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,220,new RemoveEmptySingleRule(Filter.class, "PruneEmptyFilter");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,233,new RemoveEmptySingleRule(Sort.class, "PruneEmptySort");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,247,operand(Sort.class, any()), "PruneSortLimit0") {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,249,Sort sort = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,250,if (sort.fetch != null
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,252,&& RexLiteral.intValue(sort.fetch) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,275,RelFactories.LOGICAL_BUILDER, "PruneEmptyAggregate");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,289,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,290,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,292,operand(RelNode.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,295,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,296,if (join.getJoinType().generatesNullsOnLeft()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,299,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,301,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,317,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,318,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,319,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,323,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,324,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,327,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,329,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,340,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,347,super(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,350,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,353,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,70,public static final ReduceDecimalsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,79,super(operand(LogicalCalc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,85,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,124,public class DecimalShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,129,public DecimalShuttle(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,222,private class ExpanderMap {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,271,public RexExpander getExpander(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,293,public abstract class RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,297,RexBuilder builder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,303,RelDataType int8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,309,RelDataType real8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,314,public RexExpander(RexBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,725,private class CastExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,824,private class BinaryArithmeticExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,835,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1015,private class FloorExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1064,private class CeilExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1115,private class CaseExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1152,private class PassThroughExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1157,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1187,private class CastArgAsDoubleExpander extends CastArgAsTypeExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1207,private abstract class CastArgAsTypeExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1214,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1247,private class ReinterpretExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1252,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1257,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,114,public static final ReduceExpressionsRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,122,public static final ReduceExpressionsRule JOIN_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,130,public static final ReduceExpressionsRule CALC_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,134,protected final boolean matchNullability;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,141,public static class FilterReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,145,this(filterClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,150,super(filterClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,164,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,268,public static class ProjectReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,272,this(projectClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,277,super(projectClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,289,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,305,public static class JoinReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,309,this(joinClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,314,super(joinClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,332,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,361,public static class CalcReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,365,this(calcClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,370,super(calcClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,392,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,465,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,466,boolean matchNullability, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,467,String description) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,468,super(operand(clazz, any()), relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,469,this.matchNullability = matchNullability;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,473,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,474,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,475,this(clazz, true, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,830,private final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,849,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,40,public static final SemiJoinFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,49,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,51,some(operand(LogicalFilter.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,52,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,60,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,62,RelNode newSemiJoin =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,49,public static final SemiJoinJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,60,some(operand(Join.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,61,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,67,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,79,int nFieldsX = join.getLeft().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,80,int nFieldsY = join.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,81,int nFieldsZ = semiJoin.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,82,int nTotalFields = nFieldsX + nFieldsY + nFieldsZ;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,112,RexNode newSemiJoinFilter;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,154,RelNode leftSemiJoinOp;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,167,RelNode leftJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,168,RelNode rightJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,170,leftJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,171,rightJoinRel = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,173,leftJoinRel = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,174,rightJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,177,RelNode newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,181,leftJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,182,rightJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,186,call.transformTo(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,56,public static final SemiJoinProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,67,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,75,LogicalProject project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,121,RexBuilder rexBuilder = project.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,122,RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,123,RelNode rightChild = semiJoin.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,37,public static final SemiJoinRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,49,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,69,public static final SemiJoinRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,73,public static final SemiJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,77,protected SemiJoinRule(Class<Project> projectClass, Class<Join> joinClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,78,Class<Aggregate> aggregateClass, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,79,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,80,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,81,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,82,some(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,84,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,85,operand(aggregateClass, any()))))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,86,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,89,protected SemiJoinRule(Class<Join> joinClass, Class<Aggregate> aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,90,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,91,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,93,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,95,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,163,super(projectClass, joinClass, aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,164,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,184,super(joinClass, aggregateClass, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,189,final Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,190,final RelNode left = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,191,final Aggregate aggregate = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,192,perform(call, null, join, left, aggregate);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,48,public static final SortJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,58,this(sortClass, joinClass, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,65,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,66,operand(joinClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,67,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,55,public static final SortProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,65,this(sortClass, projectClass, RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,73,this(sortClass, projectClass, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,81,this(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,82,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,84,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,90,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,95,super(operand);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,100,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,152,equiv = ImmutableMap.of((RelNode) newSort, project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,35,public static final SortRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,44,super(operand(Sort.class, any()), relBuilderFactory, "SortRemoveRule");
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,52,private final boolean matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,57,this(Sort.class, Union.class, matchNullFetch, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,70,super(
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,71,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,72,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,73,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,74,this.matchNullFetch = matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,87,&& (matchNullFetch || sort.fetch != null);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,44,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,67,public static final SubQueryRemoveRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,92,public static final SubQueryRemoveRule FILTER =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,126,public static final SubQueryRemoveRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,158,public SubQueryRemoveRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,159,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,160,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,161,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,37,new TableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,47,super(operand(LogicalTableScan.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,32,public static final UnionEliminatorRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,40,public UnionEliminatorRule(Class<? extends Union> clazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,42,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,43,public static final UnionMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,46,public static final UnionMergeRule INTERSECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,49,public static final UnionMergeRule MINUS_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,56,public UnionMergeRule(Class<? extends SetOp> unionClazz, String description,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,59,operand(unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,60,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,61,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,62,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,66,public UnionMergeRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,68,this(unionClazz, null, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,50,public static final UnionPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,36,public static final UnionToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,44,public UnionToDistinctRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,52,this(unionClazz, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,75,public static final ValuesReduceRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,92,public static final ValuesReduceRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,109,public static final ValuesReduceRule PROJECT_FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,134,public ValuesReduceRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,135,RelBuilderFactory relBuilderFactory, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,136,super(operand, relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,137,Util.discard(LOGGER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,44,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,60,new DeltaProjectTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,61,new DeltaFilterTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,62,new DeltaAggregateTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,63,new DeltaSortTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,64,new DeltaUnionTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,65,new DeltaJoinTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,66,new DeltaTableScanRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,67,new DeltaTableScanToEmptyRule(RelFactories.LOGICAL_BUILDER));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,77,public DeltaProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,78,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,79,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,80,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,81,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,104,public DeltaFilterTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,105,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,106,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,107,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,108,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,130,public DeltaAggregateTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,131,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,132,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,134,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,158,public DeltaSortTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,159,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,160,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,161,operand(Sort.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,162,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,185,public DeltaUnionTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,186,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,187,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,188,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,189,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,220,public DeltaTableScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,221,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,222,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,223,operand(TableScan.class, none())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,224,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,261,public DeltaTableScanToEmptyRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,262,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,263,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,264,operand(TableScan.class, none())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,265,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,295,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,303,public DeltaJoinTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,304,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,305,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,306,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,307,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,310,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1720,private final class RemoveSingleAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1722,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1723,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1725,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1730,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1773,private final class RemoveCorrelationForScalarProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1775,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1777,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1783,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1791,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1830,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1896,if (!checkCorVars(correlate, project, filter, correlatedKeyList)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1910,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1921,if (!checkCorVars(correlate, project, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1936,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1961,projectJoinOutputWithNullability(join, project, nullIndicatorPos);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1965,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1970,private final class RemoveCorrelationForScalarAggregateRule
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1971,extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1973,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1975,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1982,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1991,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2041,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2082,removeCorrelationExpr(joinKey, false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2105,if (!checkCorVars(correlate,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2106,aggInputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2107,filter,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2155,joinCond =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2156,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2164,if (!checkCorVars(correlate, aggInputProject, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2228,right =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2229,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2230,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2262,removeCorrelationExpr(aggInputProjExpr,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2319,removeCorrelationExpr(aggOutputProjects.get(0), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2335,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2348,private final class AdjustProjectForCountAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2349,final boolean flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2352,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2353,flavor
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2355,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2359,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2361,this.flavor = flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2364,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2369,if (flavor) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2397,if (generatedCorRels.contains(correlate)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2403,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2463,generatedCorRels.add(newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2468,if (cm.mapCorToCorRel.get(correlate.getCorrelationId()) == correlate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2469,cm.mapCorToCorRel.put(correlate.getCorrelationId(), newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2473,aggregateCorrelatorOutput(newCorrelate, aggOutputProject, isCount);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,30,import org.apache.calcite.rel.core.RelFactories;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,56,import org.apache.calcite.tools.RelBuilderFactory;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,88,public static final DruidFilterRule FILTER =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,89,new DruidFilterRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,90,public static final DruidProjectRule PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,91,new DruidProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,92,public static final DruidAggregateRule AGGREGATE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,93,new DruidAggregateRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,94,public static final DruidAggregateProjectRule AGGREGATE_PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,95,new DruidAggregateProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,96,public static final DruidSortRule SORT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,97,new DruidSortRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,98,public static final DruidSortProjectTransposeRule SORT_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,99,new DruidSortProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,100,public static final DruidProjectSortTransposeRule PROJECT_SORT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,101,new DruidProjectSortTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,102,public static final DruidProjectFilterTransposeRule PROJECT_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,103,new DruidProjectFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,104,public static final DruidFilterProjectTransposeRule FILTER_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,105,new DruidFilterProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,106,public static final DruidAggregateFilterTransposeRule AGGREGATE_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,107,new DruidAggregateFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,108,public static final DruidFilterAggregateTransposeRule FILTER_AGGREGATE_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,109,new DruidFilterAggregateTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,111,new DruidPostAggregationProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,112,public static final DruidAggregateExtractProjectRule PROJECT_EXTRACT_RULE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,113,new DruidAggregateExtractProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,115,new DruidHavingFilterRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,136,public static class DruidFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,143,public DruidFilterRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,144,super(operand(Filter.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,145,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,148,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,257,public static class DruidHavingFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,259,public DruidHavingFilterRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,260,super(operand(Filter.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,261,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,287,public static class DruidProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,294,public DruidProjectRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,295,super(operand(Project.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,296,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,299,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,382,public static class DruidPostAggregationProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,389,public DruidPostAggregationProjectRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,390,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,391,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,392,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,393,operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,394,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,397,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,437,public static class DruidAggregateRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,444,public DruidAggregateRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,445,super(operand(Aggregate.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,446,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,449,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,483,public static class DruidAggregateProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,490,public DruidAggregateProjectRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,491,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,492,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,493,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,494,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,495,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,498,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,725,public static class DruidSortProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,726,extends SortProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,733,public DruidSortProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,734,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,735,operand(Sort.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,736,operand(Project.class, operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,737,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,746,public static class DruidProjectSortTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,754,public DruidProjectSortTransposeRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,755,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,756,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,757,operand(Sort.class, operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,758,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,766,public static class DruidSortRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,773,public DruidSortRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,774,super(operand(Sort.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,775,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,778,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,806,public static class DruidProjectFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,807,extends ProjectFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,814,public DruidProjectFilterTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,815,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,816,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,817,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,818,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,819,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,830,public static class DruidFilterProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,831,extends FilterProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,838,public DruidFilterProjectTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,839,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,840,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,841,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,842,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,843,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,844,true, true, relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,853,public static class DruidAggregateFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,854,extends AggregateFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,861,public DruidAggregateFilterTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,862,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,863,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,864,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,865,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,866,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,867,relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,876,public static class DruidFilterAggregateTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,877,extends FilterAggregateTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,884,public DruidFilterAggregateTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,885,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,886,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,887,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,888,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,889,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,890,relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,900,public static class DruidAggregateExtractProjectRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,901,extends AggregateExtractProjectRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,908,public DruidAggregateExtractProjectRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,909,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,910,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,911,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,912,operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,913,relBuilderFactory);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,34,public class CsvProjectTableScanRule extends RelOptRule {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,35,public static final CsvProjectTableScanRule INSTANCE =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,43,public CsvProjectTableScanRule(RelBuilderFactory relBuilderFactory) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,44,super(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,45,operand(LogicalProject.class,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,46,operand(CsvTableScan.class, none())),
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,47,relBuilderFactory,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,147,private static final GeodeProjectRule INSTANCE = new GeodeProjectRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,149,private GeodeProjectRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,150,super(LogicalProject.class, "GeodeProjectRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,167,final RelTraitSet traitSet = project.getTraitSet().replace(out);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,171,convert(project.getInput(), out),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,183,private static final GeodeAggregateRule INSTANCE = new GeodeAggregateRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,185,GeodeAggregateRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,186,super(LogicalAggregate.class, "GeodeAggregateRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,191,final RelTraitSet traitSet = aggregate.getTraitSet().replace(out);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,207,private static class GeodeSortLimitRule extends RelOptRule {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,210,new GeodeSortLimitRule(
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,218,GeodeSortLimitRule(Predicate<Sort> predicate) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,241,private static class GeodeFilterRule extends RelOptRule {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,243,private static final GeodeFilterRule INSTANCE = new GeodeFilterRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,245,private GeodeFilterRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,246,super(operand(LogicalFilter.class, operand(GeodeTableScan.class, none())),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,337,public void onMatch(RelOptRuleCall call) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,361,protected final Convention out;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,363,GeodeConverterRule(Class<? extends RelNode> clazz, String description) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,364,super(clazz, Convention.NONE, GeodeRel.CONVENTION, description);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,365,this.out = GeodeRel.CONVENTION;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,30,public static final ConverterRule INSTANCE = new GeodeToEnumerableConverterRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,32,private GeodeToEnumerableConverterRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,33,super(RelNode.class, GeodeRel.CONVENTION, EnumerableConvention.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,24,import org.apache.calcite.plan.RelTrait;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,250,protected final Convention out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,252,MongoConverterRule(Class<? extends RelNode> clazz, RelTrait in,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,253,Convention out, String description) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,254,super(clazz, in, out, description);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,255,this.out = out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,264,public static final MongoSortRule INSTANCE = new MongoSortRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,266,private MongoSortRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,267,super(Sort.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,271,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,287,private static final MongoFilterRule INSTANCE = new MongoFilterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,289,private MongoFilterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,290,super(LogicalFilter.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,294,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,310,private static final MongoProjectRule INSTANCE = new MongoProjectRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,312,private MongoProjectRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,313,super(LogicalProject.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,317,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,500,public static final RelOptRule INSTANCE = new MongoAggregateRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,502,private MongoAggregateRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,503,super(LogicalAggregate.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,507,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,33,public static final ConverterRule INSTANCE =
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,34,new MongoToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,41,public MongoToEnumerableConverterRule(RelBuilderFactory relBuilderFactory) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,43,EnumerableConvention.INSTANCE, relBuilderFactory,
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,54,private static final PigFilterRule INSTANCE = new PigFilterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,56,private PigFilterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,57,super(LogicalFilter.class, Convention.NONE, PigRel.CONVENTION, "PigFilterRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,60,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,73,private static final PigTableScanRule INSTANCE = new PigTableScanRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,75,private PigTableScanRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,76,super(LogicalTableScan.class, Convention.NONE, PigRel.CONVENTION, "PigTableScanRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,79,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,81,final RelTraitSet traitSet = scan.getTraitSet().replace(PigRel.CONVENTION);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,91,private static final PigProjectRule INSTANCE = new PigProjectRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,93,private PigProjectRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,94,super(LogicalProject.class, Convention.NONE, PigRel.CONVENTION, "PigProjectRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,97,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,110,private static final PigAggregateRule INSTANCE = new PigAggregateRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,112,private PigAggregateRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,113,super(LogicalAggregate.class, Convention.NONE, PigRel.CONVENTION, "PigAggregateRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,116,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,129,private static final PigJoinRule INSTANCE = new PigJoinRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,131,private PigJoinRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,132,super(LogicalJoin.class, Convention.NONE, PigRel.CONVENTION, "PigJoinRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,135,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,30,new PigToEnumerableConverterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,32,private PigToEnumerableConverterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,33,super(RelNode.class, PigRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,17,package org.apache.calcite.adapter.spark;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableConvention;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,20,import org.apache.calcite.plan.RelTraitSet;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,21,import org.apache.calcite.rel.RelNode;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,22,import org.apache.calcite.rel.convert.ConverterRule;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,33,public class EnumerableToSparkConverterRule extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,34,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,35,new EnumerableToSparkConverterRule(RelFactories.LOGICAL_BUILDER);
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,42,public EnumerableToSparkConverterRule(RelBuilderFactory relBuilderFactory) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,44,EnumerableConvention.INSTANCE, SparkRel.CONVENTION, relBuilderFactory,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,48,public RelNode convert(RelNode rel) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,49,RelTraitSet newTraitSet = rel.getTraitSet().replace(getOutTrait());
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,50,return new EnumerableToSparkConverter(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,51,rel.getCluster(), newTraitSet, rel);
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,37,SparkRel.CONVENTION, relBuilderFactory, "JdbcToSparkConverterRule");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,93,EnumerableToSparkConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,94,SparkToEnumerableConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,101,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,102,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,104,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,105,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,106,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,118,public static final SparkToEnumerableConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,119,new SparkToEnumerableConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,121,private SparkToEnumerableConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,122,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,123,RelNode.class, SparkRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,133,public static final SparkValuesRule SPARK_VALUES_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,134,new SparkValuesRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,138,private SparkValuesRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,139,super(LogicalValues.class, Convention.NONE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,213,public static final SparkCalcRule SPARK_CALC_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,214,new SparkCalcRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,220,private static class SparkCalcRule
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,221,extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,222,private SparkCalcRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,223,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,224,LogicalCalc.class,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,225,Convention.NONE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,226,SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,230,public RelNode convert(RelNode rel) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,21,import org.apache.calcite.plan.RelOptRule;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,25,import org.apache.calcite.rel.core.RelFactories;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,57,extends RelOptRule {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,76,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,77,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,78,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,79,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,80,operand(SplunkTableScan.class, none())))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,81,RelFactories.LOGICAL_BUILDER, "proj on filter on proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,84,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,85,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,86,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,87,operand(SplunkTableScan.class, none()))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,88,RelFactories.LOGICAL_BUILDER, "filter on proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,91,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,92,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,93,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,94,RelFactories.LOGICAL_BUILDER, "filter");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,97,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,98,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,99,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,100,RelFactories.LOGICAL_BUILDER, "proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,103,protected SplunkPushDownRule(RelOptRuleOperand rule, String id) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,104,this(rule, RelFactories.LOGICAL_BUILDER, id);
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,108,protected SplunkPushDownRule(RelOptRuleOperand rule,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,110,super(rule, relBuilderFactory, "SplunkPushDownRule: " + id);
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,115,public void onMatch(RelOptRuleCall call) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,301,s = s.append(" NOT ");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,34,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,263,defineUnary(UNARY_MINUS, Negate, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,264,defineUnary(UNARY_PLUS, UnaryPlus, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,300,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,123,final Result leftResult = visitChild(0, e.getLeft()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,124,final Result rightResult = visitChild(1, e.getRight()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,153,Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,154,parseCorrelTable(e, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,166,final Builder builder = x.builder(e, Clause.WHERE);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,174,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,177,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,179,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,180,x.builder(e, Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,181,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,183,SqlNode sqlExpr = builder.context.toSql(null, ref);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,184,addSelect(selectList, sqlExpr, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,187,builder.setSelect(new SqlNodeList(selectList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,194,final Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,223,return builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,256,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,257,parseCorrelTable(e, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,259,Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,262,: x.builder(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,341,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,342,Builder builder = x.builder(e, Clause.ORDER_BY);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,349,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,354,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,359,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,361,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,378,visitChild(0, modify.getInput()).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,387,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,399,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,441,final Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,155,final Result result = visitChild(input.i, input.e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,371,final ImmutableMap.Builder<String, RelDataType> builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,372,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,867,final Expressions.FluentList<Clause> clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,875,this.clauses = Expressions.list(clauses);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,933,return ((SqlCall) selectItem).operand(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,984,Clause maxClause = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,985,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,986,if (maxClause == null || clause.ordinal() > maxClause.ordinal()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,987,maxClause = clause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,990,assert maxClause != null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,991,return maxClause;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,116,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,71,boolean deep, Resolved resolved) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,72,if (names.size() == 1
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,73,&& names.equals(withItem.name.names)) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,74,final SqlValidatorNamespace ns = validator.getNamespace(withItem);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,75,final Step path = Path.EMPTY.plus(ns.getRowType(), 0, names.get(0),
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,76,StructKind.FULLY_QUALIFIED);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,77,resolved.found(ns, false, null, path, null);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,78,return;
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,80,super.resolve(names, nameMatcher, deep, resolved);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTableScan.java,66,planner.addRule(CassandraToEnumerableConverterRule.INSTANCE);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,34,new CassandraToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,33,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,92,new EnumerableToBindableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,34,new EnumerableInterpreterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,23,import org.apache.calcite.rel.rules.FilterSetOpTransposeRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,24,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,69,planner.addRule(FilterSetOpTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,70,planner.addRule(ProjectRemoveRule.INSTANCE);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,117,ImmutableList.of(
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,118,NoneToBindableConverterRule.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,33,import org.apache.calcite.rel.rules.CalcSplitRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,34,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,35,import org.apache.calcite.rel.rules.ProjectTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,35,new NoneToBindableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,28,import org.apache.calcite.rel.rules.AggregateFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,29,import org.apache.calcite.rel.rules.AggregateProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,30,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,31,import org.apache.calcite.rel.rules.JoinProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,32,import org.apache.calcite.rel.rules.ProjectFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,33,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,34,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,205,ImmutableList.of(ProjectFilterTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,206,AggregateProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,207,AggregateFilterTransposeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,274,ImmutableList.of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,275,JoinProjectTransposeRule.RIGHT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,276,JoinProjectTransposeRule.LEFT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,277,FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,278,ProjectRemoveRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,279,ProjectMergeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,24,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,25,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,26,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,165,public boolean isDistinct() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,171,public boolean isKey(ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,186,public final RelOptQuery getQuery() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,212,public boolean isValid(boolean fail) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,245,public final double getRows() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,254,public final Set<String> getVariablesStopped() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,287,public final RelOptCost computeSelfCost(RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,82,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, true,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,83,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,88,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,89,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,61,new AggregateFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,63,private AggregateFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,68,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,69,RelFactories.LOGICAL_BUILDER, false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,73,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,74,RelFactories.LOGICAL_BUILDER, true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,53,new AggregateProjectMergeRule(Aggregate.class, Project.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,65,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,66,LogicalProject.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,71,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,72,RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,87,new AggregateReduceFunctionsRule(operand(LogicalAggregate.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,88,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,24,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,39,new AggregateRemoveRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,40,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,32,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,36,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,62,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,64,some(operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,65,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,69,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,71,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,72,operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,73,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,76,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,77,final Project project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,78,final StarTable.StarTableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,79,final RelNode rel =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,80,AggregateProjectMergeRule.apply(call, aggregate, project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,81,final Aggregate aggregate2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,82,final Project project2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,83,if (rel instanceof Aggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,84,project2 = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,85,aggregate2 = (Aggregate) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,87,project2 = (Project) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,88,aggregate2 = (Aggregate) project2.getInput();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,90,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,92,apply(call, project2, aggregate2, scan);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,25,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,26,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,45,new AggregateUnionAggregateRule(LogicalAggregate.class, LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,46,LogicalAggregate.class, RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,52,new AggregateUnionAggregateRule(LogicalAggregate.class, LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,53,RelNode.class, LogicalAggregate.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,64,new AggregateUnionAggregateRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,65,LogicalUnion.class, RelNode.class, RelNode.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,66,RelFactories.LOGICAL_BUILDER, "AggregateUnionAggregateRule");
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,28,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,55,new AggregateUnionTransposeRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,56,LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,58,new AggregateValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,42,new CalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,41,new CalcRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,43,new CalcSplitRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,54,new FilterAggregateTransposeRule(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,55,RelFactories.LOGICAL_BUILDER, Aggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,43,new FilterCalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,45,new FilterCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,61,new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,68,new FilterIntoJoinRule(false, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,37,new FilterMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,35,new FilterMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,45,new FilterRemoveIsNotDistinctFromRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,42,new FilterSetOpTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,44,new FilterTableFunctionTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,68,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,69,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,71,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,74,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,75,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,76,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,82,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,83,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,84,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,86,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,89,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,90,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,91,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,49,new FilterToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,25,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,71,new IntersectToDistinctRule(LogicalIntersect.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,41,new JoinAddRedundantSemiJoinRule(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,42,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,55,new JoinAssociateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,56,public static final JoinCommuteRule INSTANCE = new JoinCommuteRule(false);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,59,public static final JoinCommuteRule SWAP_OUTER = new JoinCommuteRule(true);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,74,private JoinCommuteRule(boolean swapOuter) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,20,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,21,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,43,new JoinExtractFilterRule(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,44,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,62,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,63,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,64,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,65,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,69,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,70,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,71,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,75,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,76,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,77,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,78,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,79,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,83,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,84,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,85,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,86,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,88,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,91,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,92,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,93,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,95,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,98,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,99,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,100,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,101,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,102,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,104,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,41,new JoinPushExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,45,new JoinPushTransitivePredicatesRule(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,26,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,107,new JoinToMultiJoinRule(LogicalJoin.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,39,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,40,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,41,operand(Union.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,42,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,43,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,47,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,48,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,49,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,50,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,51,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,72,new LoptOptimizeJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,32,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,49,new MaterializedViewFilterScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,70,new MultiJoinOptimizeBushyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,49,new ProjectCalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,26,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,43,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,37,new ProjectMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,55,new ProjectRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,64,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,65,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,67,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,70,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,71,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,72,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,78,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,79,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,80,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,82,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,85,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,86,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,87,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,46,new ProjectToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,96,new CalcToWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,99,new ProjectToLogicalProjectAndWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,51,new ProjectWindowTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,71,new ReduceDecimalsRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,31,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,32,import org.apache.calcite.rel.logical.LogicalCalc;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,33,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,34,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,106,public static final ReduceExpressionsRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,108,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,115,new ProjectReduceExpressionsRule(LogicalProject.class, true,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,116,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,124,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,131,new CalcReduceExpressionsRule(LogicalCalc.class, true,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,132,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,41,new SemiJoinFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,50,new SemiJoinJoinTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,57,new SemiJoinProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,64,private SemiJoinProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,38,new SemiJoinRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,70,new ProjectToSemiJoinRule(Project.class, Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,71,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:project");
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,74,new JoinToSemiJoinRule(Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,75,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:join");
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,32,import org.apache.calcite.rel.logical.LogicalSort;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,49,new SortJoinTransposeRule(LogicalSort.class,
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,50,LogicalJoin.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,32,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,56,new SortProjectTransposeRule(Sort.class, LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,57,RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,36,new SortRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,42,public static final SortUnionTransposeRule INSTANCE = new SortUnionTransposeRule(false);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,48,public static final SortUnionTransposeRule MATCH_NULL_FETCH = new SortUnionTransposeRule(true);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,56,private SortUnionTransposeRule(boolean matchNullFetch) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,33,new UnionEliminatorRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,27,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,28,import org.apache.calcite.rel.logical.LogicalMinus;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,29,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,44,new UnionMergeRule(LogicalUnion.class, "UnionMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,45,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,47,new UnionMergeRule(LogicalIntersect.class, "IntersectMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,48,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,50,new UnionMergeRule(LogicalMinus.class, "MinusMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,51,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,51,new UnionPullUpConstantsRule(Union.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,37,new UnionToDistinctRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,25,import org.apache.calcite.rel.core.Values;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,76,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,77,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,79,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,81,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,82,LogicalFilter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,83,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,84,apply(call, null, filter, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,93,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,94,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,96,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,98,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,99,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,100,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,101,apply(call, project, null, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,110,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,111,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,112,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,114,none()))),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,115,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,117,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,118,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,119,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,120,LogicalValues values = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,121,apply(call, project, filter, values);
core/src/main/java/org/apache/calcite/tools/Programs.java,40,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,41,import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,42,import org.apache.calcite.rel.rules.AggregateStarTableRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,44,import org.apache.calcite.rel.rules.FilterAggregateTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,46,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,47,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,48,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,50,import org.apache.calcite.rel.rules.JoinAssociateRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,51,import org.apache.calcite.rel.rules.JoinCommuteRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,53,import org.apache.calcite.rel.rules.JoinToMultiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,54,import org.apache.calcite.rel.rules.LoptOptimizeJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,55,import org.apache.calcite.rel.rules.MultiJoinOptimizeBushyRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,57,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,59,import org.apache.calcite.rel.rules.SemiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,60,import org.apache.calcite.rel.rules.SortProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,61,import org.apache.calcite.rel.rules.SubQueryRemoveRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,130,SemiJoinRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,131,SemiJoinRule.JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,134,? JoinAssociateRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,135,: ProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,136,AggregateStarTableRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,137,AggregateStarTableRule.INSTANCE2,
core/src/main/java/org/apache/calcite/tools/Programs.java,138,FilterTableScanRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,139,FilterProjectTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,140,FilterJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,141,AggregateExpandDistinctAggregatesRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,142,AggregateReduceFunctionsRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,143,FilterAggregateTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,144,JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,147,SortProjectTransposeRule.INSTANCE);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,21,import org.apache.calcite.rel.core.RelFactories;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,36,new CsvProjectTableScanRule(RelFactories.LOGICAL_BUILDER);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,81,planner.addRule(CsvProjectTableScanRule.INSTANCE);
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,27,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,85,planner.removeRule(AggregateExpandDistinctAggregatesRule.INSTANCE);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,49,import org.apache.calcite.rel.rules.FilterToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,50,import org.apache.calcite.rel.rules.ProjectToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,91,ProjectToCalcRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,92,FilterToCalcRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,182,private static String literalValue(RexLiteral literal) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,183,Object value = literal.getValue2();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,461,final SimpleDateFormat format =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,462,new SimpleDateFormat(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,464,Locale.ROOT);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,465,format.setTimeZone(DateTimeUtils.UTC_ZONE);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,56,import java.util.Locale;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,60,import java.util.TimeZone;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,78,final TimeZone utc = DateTimeUtils.UTC_ZONE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,80,new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,81,UTC_TIMESTAMP_FORMAT.setTimeZone(utc);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,82,TIMESTAMP_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,83,TIMESTAMP_FORMAT.setTimeZone(utc);
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,98,if (!TimeExtractionFunction.ISO_TIME_FORMAT.equals(format)) {
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,69,public static final String ISO_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,108,return new TimeExtractionFunction(ISO_TIME_FORMAT, null, timeZone, null);
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,149,return new TimeExtractionFunction(ISO_TIME_FORMAT, granularity, timeZone,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2144,scopes.put(node, parentScope);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,221,map.put("agg", toJson(node.getAggregation()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,948,final Map<String, RelDataType> newAliases =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,956,needNew ? null : aliases);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,227,return type.isNullable() ? Integer.class : int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,229,return type.isNullable() ? Long.class : long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,36,AND,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,39,OR,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,42,NOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,22,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,79,import static org.apache.calcite.linq4j.tree.ExpressionType.AndAlso;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,88,import static org.apache.calcite.linq4j.tree.ExpressionType.Not;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,90,import static org.apache.calcite.linq4j.tree.ExpressionType.OrElse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,102,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.CASE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,217,private final Map<SqlOperator, CallImplementor> map = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,224,defineMethod(ROW, BuiltInMethod.ARRAY.method, NullPolicy.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,240,final TrimImplementor trimImplementor = new TrimImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,241,defineImplementor(TRIM, NullPolicy.STRICT, trimImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,244,defineBinary(AND, AndAlso, NullPolicy.AND, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,245,defineBinary(OR, OrElse, NullPolicy.OR, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,246,defineUnary(NOT, Not, NullPolicy.NOT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,273,defineImplementor(RAND, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,274,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,275,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,276,new ReflectiveCallNotNullImplementor(BuiltInMethod.RAND.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,279,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,280,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,281,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,282,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,285,defineImplementor(RAND_INTEGER, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,286,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,287,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,288,null,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,289,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,290,BuiltInMethod.RAND_INTEGER.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,291,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,294,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,295,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,296,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,297,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,323,defineImplementor(DATETIME_PLUS, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,324,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,325,defineImplementor(MINUS_DATE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,326,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,327,defineImplementor(EXTRACT, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,328,new ExtractImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,329,defineImplementor(FLOOR, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,332,BuiltInMethod.UNIX_DATE_FLOOR.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,333,defineImplementor(CEIL, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,336,BuiltInMethod.UNIX_DATE_CEIL.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,338,map.put(IS_NULL, new IsXxxImplementor(null, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,339,map.put(IS_NOT_NULL, new IsXxxImplementor(null, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,340,map.put(IS_TRUE, new IsXxxImplementor(true, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,341,map.put(IS_NOT_TRUE, new IsXxxImplementor(true, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,342,map.put(IS_FALSE, new IsXxxImplementor(false, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,343,map.put(IS_NOT_FALSE, new IsXxxImplementor(false, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,347,new MethodImplementor(BuiltInMethod.LIKE.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,348,defineImplementor(LIKE, NullPolicy.STRICT, likeImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,349,defineImplementor(NOT_LIKE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,350,NotImplementor.of(likeImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,352,new MethodImplementor(BuiltInMethod.SIMILAR.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,353,defineImplementor(SIMILAR_TO, NullPolicy.STRICT, similarImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,354,defineImplementor(NOT_SIMILAR_TO, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,355,NotImplementor.of(similarImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,363,map.put(CASE, new CaseImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,365,map.put(CAST, new CastOptimizedImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,367,defineImplementor(REINTERPRET, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,368,new ReinterpretImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,370,final CallImplementor value = new ValueConstructorImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,456,private void defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,457,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,458,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,459,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,460,boolean harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,461,CallImplementor callImplementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,462,createImplementor(implementor, nullPolicy, harmonize);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,463,map.put(operator, callImplementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,466,private static RexCall call2(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,467,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,468,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,469,RexCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,470,if (!harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,471,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,473,final List<RexNode> operands2 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,474,harmonize(translator, call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,475,if (operands2.equals(call.getOperands())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,476,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,478,return call.clone(call.getType(), operands2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,485,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,486,case ANY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,487,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,488,case SEMI_STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,497,case AND:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,499,if (nullAs == NullAs.FALSE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,500,nullPolicy2 = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,547,case OR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,592,case NOT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,596,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,597,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,598,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,599,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,600,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,601,return Expressions.call(BuiltInMethod.NOT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,602,translator.translateList(call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,603,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,604,return Expressions.not(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,605,translator.translate(call.getOperands().get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,606,negate(nullAs)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,610,private NullAs negate(NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,611,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,612,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,613,return NullAs.TRUE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,614,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,615,return NullAs.FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,616,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,617,return nullAs;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,621,case NONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,630,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,631,throw new AssertionError(nullPolicy);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,635,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,636,SqlOperator operator, String functionName, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,637,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,638,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,639,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,640,new MethodNameImplementor(functionName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,641,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,644,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,645,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,646,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,647,operator, nullPolicy, new MethodImplementor(method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,650,private void defineMethodReflective(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,651,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,652,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,653,operator, nullPolicy, new ReflectiveCallNotNullImplementor(method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,654,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,657,private void defineUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,658,SqlOperator operator, ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,659,NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,660,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,661,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,662,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,663,new UnaryImplementor(expressionType), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,666,private void defineBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,667,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,668,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,669,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,670,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,671,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,672,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,673,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,674,new BinaryImplementor(expressionType, backupMethodName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,675,true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,678,public static final RexImpTable INSTANCE = new RexImpTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,680,public CallImplementor get(final SqlOperator operator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,688,return ((ImplementableFunction) udf).getImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,722,static Expression maybeNegate(boolean negate, Expression expression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,723,if (!negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,724,return expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,726,return Expressions.not(expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,741,Expressions.equal(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,742,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,743,NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,749,private static boolean nullable(RexCall call, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,750,return call.getOperands().get(i).getType().isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,754,private static List<RexNode> harmonize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,755,final RexToLixTranslator translator, final List<RexNode> operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,756,int nullCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,757,final List<RelDataType> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,758,final RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,759,translator.builder.getTypeFactory();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,760,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,761,RelDataType type = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,762,type = toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,763,if (translator.isNullable(operand)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,764,++nullCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,766,type = typeFactory.createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,768,types.add(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,770,if (allSame(types)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,773,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,775,final RelDataType type = typeFactory.leastRestrictive(types);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,776,if (type == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,780,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,782,assert (nullCount > 0) == type.isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,783,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,784,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,785,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,786,translator.builder.ensureType(type, operand, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,788,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,815,private static Expression implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,816,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,817,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,818,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,819,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,820,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,821,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,822,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,823,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,826,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,827,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,828,return Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,829,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,830,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,832,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,833,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,836,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,837,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,838,return Expressions.foldOr(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,839,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,840,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,842,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,844,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,845,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,846,return implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,847,translator, call2, nullAs, nullPolicy, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,849,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,850,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,851,throw e;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,852,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,853,return FALSE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,854,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,855,return TRUE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,856,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,857,return NULL_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,862,private static Expression implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,863,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,864,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,865,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,866,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,867,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,868,final List<Expression> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,869,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,870,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,873,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,874,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,875,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,876,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,877,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,880,final Expression box =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,881,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,882,implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,883,return optimize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,884,Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,885,Expressions.foldOr(list),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,887,box));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,888,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,891,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,892,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,893,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,894,operand.e, NullAs.IS_NOT_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,895,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,898,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,899,return Expressions.foldAnd(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,900,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,903,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,904,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,905,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,906,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,907,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,910,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,911,return Expressions.foldOr(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,912,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,919,final Map<RexNode, Boolean> nullable = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,920,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,921,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,924,for (RexNode arg : call.getOperands()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,925,if (translator.isNullable(arg) && !nullable.containsKey(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,926,nullable.put(arg, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,930,nullable.put(call, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,931,translator = translator.setNullable(nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,933,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,934,return implementCall(translator, call, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,938,private static Expression implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,939,final RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,940,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,941,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,942,final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,943,List<Expression> translatedOperands =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,944,translator.translateList(call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,947,if (nullAs == NullAs.NOT_POSSIBLE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,948,List<Expression> nullHandled = translatedOperands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,949,for (int i = 0; i < translatedOperands.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,950,RexNode arg = call.getOperands().get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,951,Expression e = translatedOperands.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,952,if (!translator.isNullable(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,953,if (nullHandled == translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,954,nullHandled = new ArrayList<>(translatedOperands.subList(0, i));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,956,nullHandled.add(translator.handleNull(e, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,958,nullHandled.add(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,961,translatedOperands = nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,963,Expression result =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,964,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,965,return translator.handleNull(result, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1023,x,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1033,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1034,BuiltInMethod.IS_TRUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1035,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1037,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1038,BuiltInMethod.IS_NOT_FALSE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1039,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1631,private static class TrimImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1632,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1633,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1634,final Object value =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1635,((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1645,translatedOperands.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1657,super(methodName);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1662,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1663,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1671,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1677,Expression operand = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1693,final ConstantExpression tur =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1694,(ConstantExpression) translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1695,final TimeUnitRange timeUnitRange = (TimeUnitRange) tur.value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1719,private static class MethodImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1722,MethodImplementor(Method method) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1726,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1727,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1728,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1729,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1738,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1739,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1769,private static class MethodNameImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1772,MethodNameImplementor(String methodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1776,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1777,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1778,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1779,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1783,translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1788,private static class BinaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1812,BinaryImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1813,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1814,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1819,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1820,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1821,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1822,List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1839,return callBackupMethodAnyType(translator, call, expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1842,final Type type0 = expressions.get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1843,final Type type1 = expressions.get(1).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1851,expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1855,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1856,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1858,Expressions.makeBinary(expressionType, expressions.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1894,private static class UnaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1897,UnaryImplementor(ExpressionType expressionType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1901,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1902,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1903,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1904,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1905,final Expression operand = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1906,final UnaryExpression e = Expressions.makeUnary(expressionType, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1907,if (e.type.equals(operand.type)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1912,return Expressions.convert_(e, operand.type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1917,private static class ExtractImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1918,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1919,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1921,(TimeUnitRange) ((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1923,Expression operand = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1963,translatedOperands.get(0), operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2074,private static class CaseImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2075,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2076,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2077,return implementRecurse(translator, call, nullAs, 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2080,private Expression implementRecurse(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2081,RexCall call, NullAs nullAs, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2082,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2083,if (i == operands.size() - 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2085,return translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2086,translator.builder.ensureType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2087,call.getType(), operands.get(i), false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2089,Expression ifTrue;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2090,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2091,ifTrue = translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2092,translator.builder.ensureType(call.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2093,operands.get(i + 1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2094,false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2096,ifTrue = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2099,Expression ifFalse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2100,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2101,ifFalse = implementRecurse(translator, call, nullAs, i + 2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2103,if (ifTrue == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2104,throw RexToLixTranslator.AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2106,ifFalse = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2109,Expression test = translator.translate(operands.get(i), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2111,return ifTrue == null || ifFalse == null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2113,: Expressions.condition(test, ifTrue, ifFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2120,private static class CastOptimizedImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2121,private final CallImplementor accurate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2123,private CastOptimizedImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2124,accurate = createImplementor(new CastImplementor(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2125,NullPolicy.STRICT, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2128,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2129,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2132,if (call.getType().equals(arg.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2134,return translator.translate(arg, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2138,&& nullAs == NullAs.NULL
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2142,translator.typeFactory, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2144,return accurate.implement(translator, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2149,private static class CastImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2150,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2151,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2152,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2153,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2154,assert call.getOperands().size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2155,final RelDataType sourceType = call.getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2160,final boolean nullable =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2163,&& !Primitive.is(translatedOperands.get(0).getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2165,translator.nullifyType(call.getType(), nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2167,targetType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2168,translatedOperands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2173,private static class ReinterpretImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2174,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2175,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2176,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2177,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2179,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2185,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2186,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2187,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2188,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2189,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2190,return translator.translateConstructor(call.getOperands(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2191,call.getOperator().getKind());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2196,private static class ItemImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2197,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2198,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2199,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2200,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2201,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2203,getImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2204,call.getOperands().get(0).getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2209,final NullPolicy nullPolicy = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2210,return implementNullSemantics0(translator, call, nullAs, nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2211,false, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2217,return new MethodImplementor(BuiltInMethod.ARRAY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2219,return new MethodImplementor(BuiltInMethod.MAP_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2221,return new MethodImplementor(BuiltInMethod.ANY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2231,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2232,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2233,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2234,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2235,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2236,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2237,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2238,return Expressions.constant(false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2239,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2240,return Expressions.constant(true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2280,private static class IsXxxImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2281,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2282,private final Boolean seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2283,private final boolean negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2285,IsXxxImplementor(Boolean seek, boolean negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2286,this.seek = seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2287,this.negate = negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2290,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2291,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2292,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2293,assert operands.size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2294,if (seek == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2295,return translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2296,negate ? NullAs.IS_NOT_NULL : NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2298,return maybeNegate(negate == seek,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2299,translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2300,seek ? NullAs.FALSE : NullAs.TRUE));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2306,private static class NotImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2307,private final NotNullImplementor implementor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2309,NotImplementor(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2313,private static NotNullImplementor of(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2317,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2318,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2319,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2320,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2322,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2329,implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2330,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2331,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2333,Expression trop0 = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2336,Expression trop1 = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,33,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,46,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,54,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,61,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,62,import java.util.LinkedHashMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,76,public class RexToLixTranslator {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,96,private final Map<? extends RexNode, Boolean> exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,97,private final RexToLixTranslator parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,147,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,149,RexToLixTranslator parent,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,221,Expression expression = translate0(expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,223,assert expression != null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,224,return list.append("v", expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,609,public Expression handleNull(Expression input, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,610,final Expression nullHandled = nullAs.handle(input);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,613,if (nullHandled instanceof ConstantExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,614,return nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,619,if (nullHandled == input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,620,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,627,String unboxVarName = "v_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,628,if (input instanceof ParameterExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,629,unboxVarName = ((ParameterExpression) input).name + "_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,631,ParameterExpression unboxed = Expressions.parameter(nullHandled.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,632,list.newName(unboxVarName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,633,list.add(Expressions.declare(Modifier.FINAL, unboxed, nullHandled));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,635,return unboxed;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,646,private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,647,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,648,if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,649,nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,651,switch (expr.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,653,final int index = ((RexInputRef) expr).getIndex();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,654,Expression x = inputGetter.field(list, index, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,656,Expression input = list.append("inp" + index + "_", x); // safe to share
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,664,case LOCAL_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,665,return translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,666,deref(expr),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,667,nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,668,storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,669,case LITERAL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,670,return translateLiteral(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,671,(RexLiteral) expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,672,nullifyType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,673,expr.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,675,&& nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,676,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,677,nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,678,case DYNAMIC_PARAM:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,679,return translateParameter((RexDynamicParam) expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,680,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,681,throw new RuntimeException("Cannot translate " + expr + ". Correlated"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,682,+ " variables should always be referenced by field access");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,684,RexFieldAccess fieldAccess = (RexFieldAccess) expr;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,685,RexNode target = deref(fieldAccess.getReferenceExpr());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,698,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,699,if (expr instanceof RexCall) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,700,return translateCall((RexCall) expr, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,702,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,721,private Expression translateCall(RexCall call, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,722,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,723,CallImplementor implementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,724,RexImpTable.INSTANCE.get(operator);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,725,if (implementor == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,726,throw new RuntimeException("cannot translate call " + call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,728,return implementor.implement(this, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,732,private Expression translateParameter(RexDynamicParam expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,733,RexImpTable.NullAs nullAs, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,734,if (storageType == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,735,storageType = typeFactory.getJavaClass(expr.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,737,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,739,Expressions.call(root, BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,740,Expressions.constant("?" + expr.getIndex())),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,741,storageType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,763,throw AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1127,public Expression translateConstructor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1128,List<RexNode> operandList, SqlKind kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1129,switch (kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1130,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1131,Expression map =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1132,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1134,Expressions.new_(LinkedHashMap.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1135,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1136,for (int i = 0; i < operandList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1137,RexNode key = operandList.get(i++);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1138,RexNode value = operandList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1139,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1140,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1141,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1142,map,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1143,BuiltInMethod.MAP_PUT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1144,Expressions.box(translate(key)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1145,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1147,return map;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1148,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1149,Expression lyst =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1150,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1152,Expressions.new_(ArrayList.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1153,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1154,for (RexNode value : operandList) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1155,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1156,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1157,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1158,lyst,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1159,BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1160,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1162,return lyst;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1163,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1164,throw new AssertionError("unexpected: " + kind);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1180,if (!e.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1181,return false;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1183,final Boolean b = isKnownNullable(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1184,return b == null || b;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1193,protected Boolean isKnownNullable(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1194,if (!exprNullableMap.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1195,Boolean nullable = exprNullableMap.get(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1196,if (nullable != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1197,return nullable;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1200,return parent == null ? null : parent.isKnownNullable(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1205,public RexToLixTranslator setNullable(RexNode e, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1206,return setNullable(Collections.singletonMap(e, nullable));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1213,if (nullable == null || nullable.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1214,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1216,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1237,public RelDataType nullifyType(RelDataType type, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1238,if (!nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1239,final Primitive primitive = javaPrimitive(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1240,if (primitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1241,return typeFactory.createJavaType(primitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1244,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1247,private Primitive javaPrimitive(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1248,if (type instanceof RelDataTypeFactoryImpl.JavaType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1249,return Primitive.ofBox(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1250,((RelDataTypeFactoryImpl.JavaType) type).getJavaClass());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1252,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1293,static class AlwaysNull extends ControlFlowException {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1295,public static final AlwaysNull INSTANCE = new AlwaysNull();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1297,private AlwaysNull() {}
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,19,import org.apache.calcite.runtime.FlatLists;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,41,private final String string;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,58,this.string = computeString();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,472,List<RelTrait> newTraits;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,473,switch (traits.length) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,474,case 0:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,475,newTraits = ImmutableList.of(canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,476,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,477,case 1:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,478,newTraits = FlatLists.of(traits[0], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,479,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,480,case 2:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,481,newTraits = FlatLists.of(traits[0], traits[1], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,482,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,483,default:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,485,.add(canonizedTrait).build();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,487,return cache.getOrAdd(newTraits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,548,RelTraitSet getOrAdd(List<RelTrait> traits) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,549,RelTraitSet traitSet1 = map.get(traits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,550,if (traitSet1 != null) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,551,return traitSet1;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,555,map.put(traits, traitSet);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,556,return traitSet;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,52,return index
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,54,^ type.hashCode();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,105,fieldCounts.add(elementType.getFieldCount());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,106,inputTypes.add(FlatProductInputType.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,114,final Expression lambda =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,115,Expressions.call(BuiltInMethod.FLAT_PRODUCT.method,
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,95,SqlWindow w = validator.resolveWindow(window, scope, false);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,530,SqlWindow win = validator.resolveWindow(this, operandScope, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2724,public boolean isAggregate(SqlNode selectNode) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,38,import org.apache.calcite.rel.rules.ProjectSortTransposeRule;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,747,extends ProjectSortTransposeRule {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,65,connector.setSoLingerTime(-1);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,391,return dummyProject(fieldCount, newInput);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,418,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,440,relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of("DUMMY"));
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,441,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,888,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,60,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,65,preserveExprCondition, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,69,PushProjector.ExprCondition preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,70,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,79,Project origProj;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,80,Filter filter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,82,origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,85,origProj = null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,88,RelNode rel = filter.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,89,RexNode origFilter = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,92,&& RexOver.containsOver(origProj.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,101,PushProjector pushProjector =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,102,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,103,origProj, origFilter, rel, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,104,RelNode topProject = pushProjector.convertProject(null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,821,relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2413,final ImmutableBitSet inputBits = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2636,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2637,pushShuttle(project).visitList(nodes, list);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2638,return list;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3592,super(true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3593,this.inputBitSet = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3594,this.extraFields = extraFields;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3608,return analyze(node).inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3618,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3622,inputBitSet.set(inputRef.getIndex());
core/src/main/java/org/apache/calcite/rel/core/Match.java,228,private static class AggregateFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,254,for (RexNode rex : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,255,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,298,private static class PatternVarFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,311,for (RexNode node : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,312,node.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,323,for (RexNode rex : rexNodeList) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,324,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,35,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,122,for (RexNode expr : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,123,expr.accept(vuv);
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,268,final List<RexNode> rexNodesWindow = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,269,for (RexNode rexNode : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,270,rexNodesWindow.add(rexNode.accept(shuttle));
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,272,final List<RexNode> refToWindow = toInputRefs(rexNodesWindow);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,135,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,215,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,201,private static class ExtractFinder extends RexVisitorImpl
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,139,.visitList(bottom, newBottomList);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,457,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,39,import org.apache.calcite.rex.RexVisitorImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,382,for (final Ord<RexNode> expr : Ord.zip(exprs)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,383,expr.e.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,384,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,385,public Void visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,386,graph.addEdge(localRef.getIndex(), expr.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,387,return null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,175,final List<RexNode> topProjExps = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,176,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,177,topProjExps.add(rexNode.accept(indexAdjustment));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,209,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,210,rexNode.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,230,for (Window.RexWinAggCall rexWinAggCall : group.aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,231,rexWinAggCall.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,113,topChildExprs = ImmutableList.copyOf(RexUtil.apply(mapping, topChildExprs));
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,32,public class LogicVisitor implements RexBiVisitor<Logic, Logic> {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,80,public Logic visitCall(RexCall call, Logic logic) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,117,private Logic end(RexNode node, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,124,public Logic visitInputRef(RexInputRef inputRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,125,return end(inputRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,128,public Logic visitLocalRef(RexLocalRef localRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,129,return end(localRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,132,public Logic visitLiteral(RexLiteral literal, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,133,return end(literal, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,136,public Logic visitOver(RexOver over, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,140,public Logic visitCorrelVariable(RexCorrelVariable correlVariable,
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,141,Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,142,return end(correlVariable, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,145,public Logic visitDynamicParam(RexDynamicParam dynamicParam, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,146,return end(dynamicParam, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,149,public Logic visitRangeRef(RexRangeRef rangeRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,150,return end(rangeRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,153,public Logic visitFieldAccess(RexFieldAccess fieldAccess, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,157,public Logic visitSubQuery(RexSubQuery subQuery, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,167,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,171,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,115,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,116,expr.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,165,public void visitList(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,166,List<? extends RexNode> exprs, List<RexNode> outExprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,167,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,168,outExprs.add(expr.accept(this));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1264,public static Iterable<RexNode> apply(Mappings.TargetMapping mapping,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1266,final RexPermuteInputsShuttle shuttle = RexPermuteInputsShuttle.of(mapping);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1578,public static Iterable<RexNode> shift(Iterable<RexNode> nodes, int offset) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1579,return new RexShiftShuttle(offset).apply(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2039,RexVisitor<Void> visitor =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2040,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2042,occurrences.add(ref.getTableRef());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2043,return super.visitTableInputRef(ref);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2046,for (RexNode e : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2047,e.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2200,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2201,operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,61,for (RexNode partitionKey : window.partitionKeys) {
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,62,partitionKey.accept(this);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,373,ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,462,new RelOptUtil.InputFinder(inputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,463,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,465,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,570,new RelOptUtil.InputFinder(combinedInputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,571,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,573,final ImmutableBitSet fieldsUsedPlus = inputFinder.inputBitSet.build();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,345,private static Pair<List<RexNode>, List<RexNode>> splitProjects(final RexBuilder rexBuilder,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,346,final RelNode input, List<RexNode> nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,347,final RelOptUtil.InputReferencedVisitor visitor = new RelOptUtil.InputReferencedVisitor();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,348,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,349,node.accept(visitor);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,363,final List<RexNode> aboveNodes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,364,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,365,aboveNodes.add(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,366,node.accept(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,367,new RexShuttle() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,369,final int index = positions.indexOf(ref.getIndex());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,370,return rexBuilder.makeInputRef(belowTypes.get(index), index);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,114,final List<String> strings = visitList(call.operands);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,133,List<String> visitList(List<RexNode> list) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,134,final List<String> strings = new ArrayList<>();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,135,for (RexNode node : list) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,136,strings.add(node.accept(this));
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,138,return strings;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,52,import java.util.ArrayList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,238,public List<String> visitList(List<RexNode> list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,240,for (RexNode node : list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,241,strings.add(node.accept(this));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,243,return strings;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,153,return set.getOrCreateSubset(getCluster(), traitSet1);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,983,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,984,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,985,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,986,return getSubset(rel, traits, false);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,989,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,990,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,991,RelTraitSet traits,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,992,boolean createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1000,if (createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1001,return set.getOrCreateSubset(rel.getCluster(), traits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1415,root =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1416,set.getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1417,root.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1418,root.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1339,subset.getCluster(), subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1669,return subset;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,219,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,324,this.relBuilder = config.getRelBuilderFactory().create(cluster, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2410,final Join originalJoin =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2411,(Join) RelFactories.DEFAULT_JOIN_FACTORY.createJoin(leftRel, rightRel,
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,65,return ImmutableNullableList.of(keywords, targetTable, source, columnList);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,90,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,41,public abstract class AbstractJoinExtractFilterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,77,public final class AggregateExpandDistinctAggregatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,56,public class AggregateExtractProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,59,public class AggregateFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,66,public class AggregateJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,51,public class AggregateProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,60,public class AggregateProjectPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,82,public class AggregateReduceFunctionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,60,public class AggregateStarTableRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,41,public class AggregateUnionAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,53,public class AggregateUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,38,public class CalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,41,public class CalcSplitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,36,public class CoerceInputsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,175,public static class FilterDateRangeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,47,public class FilterAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,39,public class FilterCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,42,public class FilterCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,49,public abstract class FilterJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,33,public class FilterMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,38,public class FilterProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,40,public final class FilterRemoveIsNotDistinctFromRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,40,public class FilterSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,42,public class FilterTableFunctionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,45,public class FilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,69,public class IntersectToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,39,public class JoinAddRedundantSemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,50,public class JoinAssociateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,52,public class JoinCommuteRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,58,public class JoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,38,public class JoinPushExpressionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,65,public class JoinPushThroughJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,42,public class JoinPushTransitivePredicatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,60,public class JoinToCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,105,public class JoinToMultiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,37,public class JoinUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,70,public class LoptOptimizeJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,47,public class MaterializedViewFilterScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,68,public class MultiJoinOptimizeBushyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,45,public class ProjectCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,36,public class ProjectFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,39,public class ProjectJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,39,public class ProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,35,public class ProjectMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,41,public class ProjectSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,37,public class ProjectSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,42,public class ProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,78,public abstract class ProjectToWindowRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,47,public class ProjectWindowTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,69,public class ReduceDecimalsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,39,public class SemiJoinFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,48,public class SemiJoinJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,55,public class SemiJoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,36,public class SemiJoinRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,47,public abstract class SemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,46,public class SortJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,54,public class SortProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,34,public class SortRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,37,public class SortUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,66,public abstract class SubQueryRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,33,public class TableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,42,public class UnionMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,48,public class UnionPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,35,public class UnionToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,66,public abstract class ValuesReduceRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,70,public static class DeltaProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,97,public static class DeltaFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,123,public static class DeltaAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,151,public static class DeltaSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,178,public static class DeltaUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,213,public static class DeltaTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,254,public static class DeltaTableScanToEmptyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,291,public static class DeltaJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,36,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,61,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,569,predicates.constantMap, constExps, addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,570,if (constExps.isEmpty() && removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,578,if (!removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,580,for (RexNode exp : removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,581,RexCall call = (RexCall) exp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,582,reducedExprs.add(call.getOperands().get(0));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,584,RexReplacer replacer =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,586,Collections.nCopies(removableCasts.size(), false));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,587,replacer.mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,591,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,662,List<RexNode> constExps, List<Boolean> addCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,663,List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,666,addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,840,private final List<RexNode> removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,846,List<Boolean> addCasts, List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,853,this.removableCasts = removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,988,if (call.getOperator() == SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,989,reduceCasts(call);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1003,private void reduceCasts(RexCall outerCast) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1004,List<RexNode> operands = outerCast.getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1005,if (operands.size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1006,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1008,RelDataType outerCastType = outerCast.getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1009,RelDataType operandType = operands.get(0).getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1010,if (operandType.equals(outerCastType)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1011,removableCasts.add(outerCast);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1012,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1020,if (!(operands.get(0) instanceof RexCall)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1021,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1023,RexCall innerCast = (RexCall) operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1024,if (innerCast.getOperator() != SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1025,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1027,if (innerCast.getOperands().size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1028,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1030,RelDataType outerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1031,typeFactory.createTypeWithNullability(outerCastType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1032,RelDataType innerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1033,typeFactory.createTypeWithNullability(operandType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1034,if (outerTypeNullable != innerTypeNullable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1035,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1037,if (operandType.isNullable()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1038,removableCasts.add(innerCast);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,66,ImmutableIntList list = ImmutableIntList.copyOf(numbers);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,67,if (numbers.size() > 1
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,68,&& !Ordering.natural().isOrdered(list)) {
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,69,list = ImmutableIntList.copyOf(Ordering.natural().sortedCopy(list));
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,138,return getTraitDef().canonize(
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,139,new RelDistributionImpl(type,
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,140,ImmutableIntList.copyOf(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,124,ImmutableList.of(RelCollations.of(RexUtil.apply(map, fc))));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1249,newFieldCollations.add(apply(mapping, fieldCollation));
core/src/main/java/org/apache/calcite/util/Permutation.java,418,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,419,return targets[source];
core/src/main/java/org/apache/calcite/util/Permutation.java,421,throw new Mappings.NoElementException("invalid source " + source);
core/src/main/java/org/apache/calcite/util/Permutation.java,429,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,430,return sources[target];
core/src/main/java/org/apache/calcite/util/Permutation.java,432,throw new Mappings.NoElementException("invalid target " + target);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,849,int getTarget(int target);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,24,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,25,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,26,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,27,import org.apache.calcite.rex.RexProgramBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,65,RexBuilder rexBuilder = topFilter.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,66,RexProgram bottomProgram = createProgram(bottomFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,67,RexProgram topProgram = createProgram(topFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,69,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,70,RexProgramBuilder.mergePrograms(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,71,topProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,72,bottomProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,73,rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,75,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,76,mergedProgram.expandLocalRef(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,77,mergedProgram.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,81,.filter(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,92,private RexProgram createProgram(Filter filterRel) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,93,RexProgramBuilder programBuilder =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,94,new RexProgramBuilder(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,95,filterRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,96,filterRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,97,programBuilder.addIdentity();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,98,programBuilder.addCondition(filterRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,99,return programBuilder.getProgram();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,331,planner.reregister(this, otherRel);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,222,return rexBuilder.makeInputRef(field.getType(), arg);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,81,return create(getCluster(), rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,44,LogicalValues values = (LogicalValues) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,45,return EnumerableValues.create(values.getCluster(), values.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,46,values.getTuples());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,253,call.transformTo(call.builder().push(sort).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,354,SingleRel single = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,355,call.transformTo(call.builder().push(single).empty().build());
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,124,Preconditions.checkArgument(updateColumnList == null);
core/src/main/java/org/apache/calcite/rel/RelCollations.java,67,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,70,final ImmutableList.Builder<RelFieldCollation> builder =
core/src/main/java/org/apache/calcite/rel/RelCollations.java,71,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,72,final Set<Integer> set = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,73,for (RelFieldCollation fieldCollation : fieldCollations) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,74,if (set.add(fieldCollation.getFieldIndex())) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,75,builder.add(fieldCollation);
core/src/main/java/org/apache/calcite/rel/RelCollations.java,78,return new RelCollationImpl(builder.build());
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,71,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,72,new RelDistributionImpl(RelDistribution.Type.HASH_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,73,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,79,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,80,new RelDistributionImpl(RelDistribution.Type.RANGE_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,81,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,413,protected MulticastRelOptListener getListener() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,244,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,258,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,277,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,265,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,272,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,300,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,305,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,457,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,462,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,29,import org.apache.calcite.plan.RelOptListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,217,RelOptListener listener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1673,public void addListener(RelOptListener newListener) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1676,if (listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1677,throw Util.needToImplement("multiple VolcanoPlanner listeners");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1679,listener = newListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,118,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,125,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,138,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,145,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,198,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,205,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,225,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,232,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,39,&& rel.equals(((MutableScan) obj).rel);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,43,return rel.hashCode();
core/src/main/java/org/apache/calcite/util/Sources.java,89,this.url = null;
core/src/main/java/org/apache/calcite/util/Sources.java,93,return (url != null ? url : file).toString();
core/src/main/java/org/apache/calcite/util/Sources.java,97,if (url == null) {
core/src/main/java/org/apache/calcite/util/Sources.java,98,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/Sources.java,143,if (url != null) {
core/src/main/java/org/apache/calcite/util/Sources.java,165,if (url != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,180,if (withDetail) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,183,&& typeSystem.getDefaultPrecision(typeName) > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,184,printPrecision = true;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,186,if (typeName.getDefaultScale() > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,187,printScale = true;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2222,int y = m / 12;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2223,y0 += y;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2224,m0 += m - y * 12;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,605,final int updateCount;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,621,MetaResultSet.create(h.connectionId, h.id, false, signature, null);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java,61,return rowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,38,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,39,agg.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,44,convert(agg.getInput(), EnumerableConvention.INSTANCE),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,38,final RelTraitSet traitSet = union.getTraitSet().replace(out);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,40,convertList(union.getInputs(), out), union.all);
core/src/main/java/org/apache/calcite/plan/Convention.java,47,boolean canConvertConvention(Convention toConvention);
core/src/main/java/org/apache/calcite/plan/Convention.java,62,boolean useAbstractConvertersForConversion(RelTraitSet fromTraits,
core/src/main/java/org/apache/calcite/plan/Convention.java,63,RelTraitSet toTraits);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,147,final RelSubset subset = getOrCreateSubset(rel.getCluster(), traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,153,VolcanoPlanner planner, RelOptCluster cluster, RelSubset subset, boolean subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,156,for (RelSubset other : subsets) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,161,|| (subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,162,&& !subset.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,164,|| (!subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,165,&& !other.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,166,other.getTraitSet(), subset.getTraitSet()))) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,171,subset.getTraitSet().difference(other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,173,boolean addAbstractConverter = true;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,174,int numTraitNeedConvert = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,176,for (RelTrait curOtherTrait : difference) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,177,RelTraitDef traitDef = curOtherTrait.getTraitDef();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,178,RelTrait curRelTrait = subset.getTraitSet().getTrait(traitDef);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,182,if (curRelTrait == null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,183,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,184,break;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,187,boolean canConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,188,boolean needConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,189,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,192,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,193,cluster.getPlanner(), curRelTrait, curOtherTrait, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,194,needConvert = !curRelTrait.satisfies(curOtherTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,197,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,198,cluster.getPlanner(), curOtherTrait, curRelTrait, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,199,needConvert = !curOtherTrait.satisfies(curRelTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,202,if (!canConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,203,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,207,if (needConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,208,numTraitNeedConvert++;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,212,if (addAbstractConverter && numTraitNeedConvert > 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,213,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,214,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,215,new AbstractConverter(cluster, subset, null, other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,216,planner.register(converter, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,218,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,219,new AbstractConverter(cluster, other, null, subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,220,planner.register(converter, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,227,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,228,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,233,final VolcanoPlanner planner =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,234,(VolcanoPlanner) cluster.getPlanner();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,236,addAbstractConverters(planner, cluster, subset, true);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,242,addAbstractConverters(planner, cluster, subset, false);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,322,RelSubset subset =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,323,getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,324,otherSubset.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,325,otherSubset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,96,boolean boosted;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,106,this.boosted = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,553,return rel2.set.getOrCreateSubset(rel.getCluster(), toTraits.simplify());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,121,RexNode condition = variableReplacer.go(oldCondition);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,187,private static class VariableReplacer {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,201,public RexNode go(RexNode rex) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,202,if (rex instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,203,ImmutableList.Builder<RexNode> builder =
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,204,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,205,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,206,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,207,builder.add(go(operand));
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,209,return call.clone(call.getType(), builder.build());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,211,RexInputRef var = (RexInputRef) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,212,int index = var.getIndex();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,213,if (index < leftFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,215,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,216,leftFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,217,rightFields.size() + index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,219,index -= leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,220,if (index < rightFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,222,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,223,rightFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,224,index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,228,+ ", rightFieldCount=" + rightFields.size());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,230,return rex;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,436,if (canAssignFrom(left.getType(), operand.getType())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,468,private static boolean canAssignFrom(RelDataType type1, RelDataType type2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,474,return name1.compareTo(name2) >= 0;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,476,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,446,routines = filterRoutinesByTypePrecedence(sqlSyntax, routines, argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,515,private static Iterator<SqlOperator> filterRoutinesByParameterType(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,581,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,592,final RelDataType bestMatch = bestMatch(sqlFunctions, argType.i, precList);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,614,RelDataTypePrecedenceList precList) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,621,final RelDataType paramType = paramTypes.get(i);
core/src/main/java/org/apache/calcite/rel/core/Window.java,232,assert orderKeys != null : "precondition: ordinals != null";
core/src/main/java/org/apache/calcite/rel/core/Window.java,233,assert keys != null;
core/src/main/java/org/apache/calcite/rel/core/Window.java,234,this.keys = keys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,236,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,237,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,238,this.orderKeys = orderKeys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,248,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/rel/core/Window.java,249,buf.append("window(partition ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,250,buf.append(keys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,251,buf.append(" order by ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,252,buf.append(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,253,buf.append(isRows ? " rows " : " range ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,254,if (lowerBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,255,if (upperBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,256,buf.append("between ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,257,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,258,buf.append(" and ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,259,buf.append(upperBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,261,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,266,buf.append(" aggs ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,267,buf.append(aggCalls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,331,RelDataType type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,332,SqlAggFunction operator,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,333,List<RexNode> exprs,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,334,List<RexNode> partitionKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,335,ImmutableList<RexFieldCollation> orderKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,336,RexWindowBound lowerBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,337,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,338,boolean physical,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,342,assert operator != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,343,assert exprs != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,344,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,345,assert orderKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,352,physical);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,382,Preconditions.checkArgument(physical, "DISALLOW PARTIAL over RANGE");
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,423,boolean isRows) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,429,isRows);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,66,RexWindowBound lowerBound = window.getLowerBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,67,RexWindowBound upperBound = window.getUpperBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,68,if (update[0]
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,70,|| (upperBound != window.getUpperBound() && upperBound != null)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,71,return new RexWindow(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,72,clonedPartitionKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,73,clonedOrderKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,74,lowerBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,75,upperBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,76,window.isRows());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,21,import java.io.PrintWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,22,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,59,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,60,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,84,StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/rex/RexWindow.java,85,PrintWriter pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,86,int clauseCount = 0;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,88,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,89,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,91,pw.print("PARTITION BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,94,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,96,RexNode partitionKey = partitionKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,97,pw.print(partitionKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,101,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,102,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,104,pw.print("ORDER BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,107,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,109,RexFieldCollation orderKey = orderKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,110,pw.print(orderKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,113,if (lowerBound == null) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,116,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,117,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,119,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,120,pw.print("ROWS ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,122,pw.print("RANGE ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,124,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,126,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,127,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,129,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,130,pw.print("ROWS BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,132,pw.print("RANGE BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,134,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,135,pw.print(" AND ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,136,pw.print(upperBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,138,return sw.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,19,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,20,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,22,import org.apache.calcite.sql.SqlWindow;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,38,|| SqlWindow.isUnboundedFollowing(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,39,return new RexWindowBoundUnbounded(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,41,if (SqlWindow.isCurrentRow(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,42,return new RexWindowBoundCurrentRow();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,44,return new RexWindowBoundBounded(rexNode);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,111,private static class RexWindowBoundUnbounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,112,private final SqlNode node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,114,RexWindowBoundUnbounded(SqlNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,115,this.node = node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,119,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,123,return SqlWindow.isUnboundedPreceding(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,127,return SqlWindow.isUnboundedFollowing(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,131,return ((SqlLiteral) node).getValue().toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,135,return isPreceding() ? 0 : 2;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,139,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,140,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,142,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,143,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,146,RexWindowBoundUnbounded that = (RexWindowBoundUnbounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,148,if (!node.equals(that.node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,149,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,152,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,156,return node.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,163,private static class RexWindowBoundCurrentRow extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,165,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,169,return "CURRENT ROW";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,173,return 1;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,177,return getClass() == obj.getClass();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,181,return 123;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,188,private static class RexWindowBoundBounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,189,private final SqlKind sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,190,private final RexNode offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,192,RexWindowBoundBounded(RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,193,assert node instanceof RexCall
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,194,: "RexWindowBoundBounded window bound should be either 'X preceding'"
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,195,+ " or 'X following' call. Actual type is " + node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,196,RexCall call = (RexCall) node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,197,this.offset = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,198,this.sqlKind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,199,assert this.offset != null
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,200,: "RexWindowBoundBounded offset should not be null";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,203,private RexWindowBoundBounded(SqlKind sqlKind, RexNode offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,204,this.sqlKind = sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,205,this.offset = offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,209,return sqlKind == SqlKind.PRECEDING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,213,return sqlKind == SqlKind.FOLLOWING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,217,return offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,221,R r = offset.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,222,if (r instanceof RexNode && r != offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,223,return new RexWindowBoundBounded(sqlKind, (RexNode) r);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,225,return this;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,229,return offset.toString() + " " + sqlKind.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,233,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,234,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,236,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,237,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,240,RexWindowBoundBounded that = (RexWindowBoundBounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,242,if (!offset.equals(that.offset)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,243,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,245,if (sqlKind != that.sqlKind) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,246,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,249,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,253,int result = sqlKind.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,254,result = 31 * result + offset.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,255,return result;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,233,final SqlWindow tmp;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,234,if (lowerBound == null || upperBound == null) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,236,tmp = new SqlWindow(getParserPosition(), null, null, partitionList,
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,237,orderList, isRows, lowerBound, upperBound, allowPartial);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,238,tmp.populateBounds();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,240,tmp = this;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,242,if (tmp.lowerBound instanceof SqlLiteral
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,243,&& tmp.upperBound instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,244,int lowerKey = RexWindowBound.create(tmp.lowerBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,245,int upperKey = RexWindowBound.create(tmp.upperBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,246,return lowerKey > -1 && lowerKey <= upperKey;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,248,return false;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,763,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,764,SqlWindow.createUnboundedPreceding(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,767,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,768,SqlWindow.createCurrentRow(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,771,SqlParserPos pos = orderList.getParserPosition();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,772,setUpperBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,773,orderList.size() == 0
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,775,: SqlWindow.createCurrentRow(pos));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,381,SqlWindow resolveWindow(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,384,boolean populateBounds);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4725,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4726,boolean populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4746,if (populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4747,window.populateBounds();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1852,validator.resolveWindow(windowOrRef, bb.scope, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1855,if (aggCall.getKind() == SqlKind.ROW_NUMBER) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1856,window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1857,window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1858,window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1866,RexNode lowerBound = bb.convertExpression(window.getLowerBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1867,RexNode upperBound = bb.convertExpression(window.getUpperBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1868,SqlNodeList orderList = window.getOrderList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1869,if ((orderList.size() == 0) && !window.isRows()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1907,RexWindowBound.create(window.getLowerBound(), lowerBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1908,RexWindowBound.create(window.getUpperBound(), upperBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1909,window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1911,RexNode overNode = rexAgg.accept(visitor);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1913,return overNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5168,private final SqlWindow window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5175,SqlWindow window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5181,this.window = window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5236,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5237,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5277,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5278,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/rex/RexOver.java,151,public static boolean containsOver(List<RexNode> exprs, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,186,joinType.generatesNullsOnRight())))).toBlock());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,148,boolean.class, boolean.class),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3247,Function2<TSource, TInner, TResult> resultSelector) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3274,int c = leftKey.compareTo(rightKey);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3303,int c = leftKey.compareTo(leftKey2);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3319,int c = rightKey.compareTo(rightKey2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1000,return SqlStdOperatorTable.AS.createCall(POS, node,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1001,new SqlIdentifier(neededAlias, POS));
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,70,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,75,OperandTypes.COMPARABLE_ORDERED,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1435,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1446,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1452,if (s.startsWith("0")) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,250,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,251,return val; // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,253,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,254,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,255,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,256,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,257,return identifierQuoteString + val2 + identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,309,s = s.replaceAll(" ", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,310,s = s.replaceAll("\n", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,311,s = s.replaceAll("\t", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,312,s = s.replaceAll("\r", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,313,s = s.replaceAll("\f", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,314,s = s.replaceAll("'", "");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,902,String qName = name;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,905,qName = dialect.quoteIdentifier(name);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,907,maybeWhitespace(qName);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,870,sig = sig.replaceAll("'", "");
core/src/main/java/org/apache/calcite/util/BitString.java,51,assert bits.replaceAll("1", "").replaceAll("0", "").length() == 0
core/src/main/java/org/apache/calcite/util/Util.java,716,return s.replaceAll("\r\n", "\n");
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,159,private static Integer parseIntString(String valueString) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,160,return Integer.parseInt(valueString.replaceAll("[^0-9]", ""));
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,402,value = value.replaceAll("%", "*");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1699,return Expressions.call(floorMethod, tur,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1700,call(operand, type, TimeUnit.DAY));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,71,import org.apache.calcite.rex.RexMultisetUtil;
core/src/main/java/org/apache/calcite/sql/SqlDialectFactoryImpl.java,116,return new MysqlSqlDialect(c);
core/src/main/java/org/apache/calcite/sql/SqlDialectFactoryImpl.java,134,return new PostgresqlSqlDialect(c);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,70,import com.google.common.collect.LinkedHashMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,76,import com.google.common.collect.SetMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,249,private final SetMultimap<String, Class> ruleNames =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,250,LinkedHashMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,462,if (ruleNames.put(ruleName, rule.getClass())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,463,Set<Class> x = ruleNames.get(ruleName);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,464,if (x.size() > 1) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,465,throw new RuntimeException("Rule description '" + ruleName
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,466,+ "' is not unique; classes: " + x);
