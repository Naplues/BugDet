File,Line_number,SRC
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,19,import java.io.IOException;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,20,import java.io.Reader;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,21,import java.util.Arrays;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,23,import java.util.regex.Matcher;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,24,import java.util.regex.Pattern;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,119,protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java,20,import java.io.Reader;
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java,45,protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java,46,Tokenizer tokenizer = new WikipediaTokenizer(reader);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,52,import org.apache.lucene.util.OpenBitSet;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,155,Directory dir = FSDirectory.open(new File(this.indexDir));
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,170,OpenBitSet clusterDocBitset = getClusterDocBitset(reader, idSet, this.idField);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,238,private static OpenBitSet getClusterDocBitset(IndexReader reader,
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,243,OpenBitSet bitset = new OpenBitSet(numDocs);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,83,Directory dir = FSDirectory.open(file);
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,62,private int slice;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,65,if (slice >= numSlices()) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,68,int i = slice++;
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,34,public SparseColumnMatrix(int rows, int columns, RandomAccessSparseVector[] columnVectors) {
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,37,for (int col = 0; col < columnSize(); col++) {
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,38,this.columnVectors[col] = this.columnVectors[col].clone();
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,40,public SparseMatrix(int rows, int columns, Map<Integer, RandomAccessSparseVector> rowVectors) {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,43,for (Map.Entry<Integer, RandomAccessSparseVector> entry : rowVectors.entrySet()) {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,44,this.rowVectors.put(entry.getKey(), entry.getValue().clone());
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,64,public Iterator<MatrixSlice> iterator() {
math/src/main/java/org/apache/mahout/math/VectorView.java,125,Element decorated = vector.getElement(el.index());
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,91,+ " conjunction with -sort", false);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,92,addOption(buildOption("filter", "fi", "Only dump out those vectors whose name matches the filter."
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,127,if ("text".equals(dictionaryType)) {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,128,dictionary = VectorHelper.loadTermDictionary(new File(dictFile));
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,130,dictionary = VectorHelper.loadTermDictionary(conf, dictFile);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,133,throw new IOException("Invalid dictionary type: " + dictionaryType);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,181,: Integer.MAX_VALUE;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,209,(transposeKeyValue ? keyWritable : valueWritable)).get();
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,219,if (filters != null
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,220,&& vector instanceof NamedVector
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,221,&& !filters.contains(((NamedVector) vector).getName())) {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,223,continue;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,225,if (sizeOnly) {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,226,if (vector instanceof NamedVector) {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,227,writer.write(((NamedVector) vector).getName());
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,228,writer.write(":");
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,230,writer.write(String.valueOf(i++));
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,231,writer.write(":");
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,233,writer.write(String.valueOf(vector.size()));
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,234,writer.write('\n');
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,236,if (vector instanceof NamedVector) {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,237,writer.write(((NamedVector) vector).getName());
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,241,String fmtStr;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,242,if (useCSV) {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,243,fmtStr = VectorHelper.vectorToCSVString(vector, namesAsComments);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,245,fmtStr = VectorHelper.vectorToJson(vector, dictionary, maxIndexesPerVector,
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,246,sortVectors);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,248,writer.write(fmtStr);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,249,writer.write('\n');
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,251,itemCount++;
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,123,return iterator();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,79,out.write(idColumn + ",target,score");
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,80,out.newLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,82,String line = in.readLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,83,csv.firstLine(line);
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,84,line = in.readLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,85,Map<String, Double> results = new HashMap<String, Double>();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,86,int k = 0;
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,87,while (line != null) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,88,Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,89,csv.processLine(line, v, false);
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,90,Vector scores = learner.classifyFull(v);
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,91,results.clear();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,92,if (maxScoreOnly) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,93,results.put(csv.getTargetLabel(scores.maxValueIndex()),
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,96,for (int i = 0; i < scores.size(); i++) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,97,results.put(csv.getTargetLabel(i), scores.get(i));
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,101,for (Map.Entry<String,Double> entry : results.entrySet()) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,102,out.write(csv.getIdString(line) + ',' + entry.getKey() + ',' + entry.getValue());
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,103,out.newLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,105,k++;
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,106,if (k % 100 == 0) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,109,line = in.readLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,111,out.flush();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,112,out.close();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosState.java,50,protected void intitializeBasisAndSingularVectors() {
math/src/main/java/org/apache/mahout/math/set/OpenHashSet.java,367,protected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor) {
math/src/main/java/org/apache/mahout/math/solver/ConjugateGradientSolver.java,82,return solve(a, b, null, b.size(), DEFAULT_MAX_ERROR);
math/src/main/java/org/apache/mahout/math/solver/ConjugateGradientSolver.java,99,return solve(a, b, precond, b.size(), DEFAULT_MAX_ERROR);
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,42,? new RandomAccessSparseVector[rows]
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,43,: new SequentialAccessSparseVector[rows],
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,44,true,
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,45,randomAccess);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,57,public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,58,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java,57,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track1/Track1Recommender.java,50,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Recommender.java,56,return recommender.recommend(userID, howMany, rescorer);
core/src/main/java/org/apache/mahout/common/IOUtils.java,29,import org.apache.hadoop.mapred.lib.MultipleOutputs;
core/src/main/java/org/apache/mahout/common/IOUtils.java,145,throw (Error) lastThr;
core/src/main/java/org/apache/mahout/common/IOUtils.java,149,.initCause(lastThr);
core/src/main/java/org/apache/mahout/common/IOUtils.java,193,mo.close();
integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,30,import org.apache.hadoop.mapred.Utils.OutputFileUtils.OutputFilesFilter;
integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,70,pathArr = FileUtil.stat2Paths(fs.listStatus(input, new OutputFilesFilter()));
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,29,import org.apache.hadoop.mapred.JobConf;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,30,import org.apache.hadoop.mapred.OutputCollector;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,31,import org.apache.hadoop.mapred.lib.MultipleOutputs;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,54,private static final String DOWNSAMPLING_FACTOR =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,56,private static final String RANDOM_SELECTION_PCT =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,61,private SplitInputJob() {
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,107,JobConf oldApiJob = new JobConf(initialConf);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,108,MultipleOutputs.addNamedOutput(oldApiJob, TRAINING_TAG,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,109,org.apache.hadoop.mapred.SequenceFileOutputFormat.class,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,110,keyClass, valueClass);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,111,MultipleOutputs.addNamedOutput(oldApiJob, TEST_TAG,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,112,org.apache.hadoop.mapred.SequenceFileOutputFormat.class,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,113,keyClass, valueClass);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,116,Job job = new Job(oldApiJob);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,143,public void setup(Context context) {
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,144,downsamplingFactor =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,145,context.getConfiguration().getInt(DOWNSAMPLING_FACTOR, 1);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,172,private OutputCollector<WritableComparable<?>, Writable> trainingCollector = null;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,173,private OutputCollector<WritableComparable<?>, Writable> testCollector = null;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,179,protected void setup(Context context) throws IOException {
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,180,randomSelectionPercent =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,181,context.getConfiguration().getFloat(RANDOM_SELECTION_PCT, 0);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,182,multipleOutputs =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,183,new MultipleOutputs(new JobConf(context.getConfiguration()));
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,184,trainingCollector = multipleOutputs.getCollector(TRAINING_TAG, null);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,185,testCollector = multipleOutputs.getCollector(TEST_TAG, null);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,197,testCollector.collect(key, value);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,199,trainingCollector.collect(key, value);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,207,multipleOutputs.close();
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,33,import org.apache.hadoop.mapred.Utils.OutputFileUtils.OutputFilesFilter;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,105,pathArr = FileUtil.stat2Paths(fs.listStatus(input, new OutputFilesFilter()));
core/src/main/java/org/apache/mahout/common/mapreduce/TransposeMapper.java,37,RandomAccessSparseVector tmp = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,231,Configuration conf = TransposeJob.buildTransposeJobConf(initialConf, rowPath, outputPath, numRows);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,232,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,242,Path outputVectorTmpPath = new Path(outputTmpBasePath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,243,new Path(Long.toString(System.nanoTime())));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,244,Configuration conf =
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,245,TimesSquaredJob.createTimesJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,246,v,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,247,numRows,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,248,rowPath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,249,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,250,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,251,Vector result = TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,266,Path outputVectorTmpPath = new Path(outputTmpBasePath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,267,new Path(Long.toString(System.nanoTime())));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,268,Configuration conf =
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,269,TimesSquaredJob.createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,270,v,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,271,rowPath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,272,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,273,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,274,Vector result = TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,28,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,30,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,31,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,32,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,33,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,34,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,35,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,36,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,37,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,38,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,39,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,51,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,65,return createTimesSquaredJobConf(new Configuration(), v, matrixInputPath, outputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,68,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,69,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,70,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,71,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,72,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,73,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,74,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,75,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,76,TimesSquaredMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,77,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,80,public static Configuration createTimesJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,81,int outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,82,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,83,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,84,return createTimesJobConf(new Configuration(), v, outDim, matrixInputPath, outputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,87,public static Configuration createTimesJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,88,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,89,int outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,90,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,91,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,92,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,93,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,94,outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,95,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,96,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,97,TimesMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,98,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,101,public static Configuration createTimesSquaredJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,102,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,103,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,104,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,106,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,107,return createTimesSquaredJobConf(new Configuration(), v, matrixInputPath, outputVectorPathBase, mapClass, redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,110,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,111,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,112,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,113,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,114,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,116,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,117,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,118,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,119,v.size(),
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,120,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,121,outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,122,mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,123,redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,126,public static Configuration createTimesSquaredJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,127,int outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,128,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,129,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,130,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,132,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,134,return createTimesSquaredJobConf(new Configuration(),
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,135,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,136,outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,137,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,138,outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,139,mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,140,redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,143,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,144,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,145,int outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,146,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,147,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,148,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,150,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,151,JobConf conf = new JobConf(initialConf, TimesSquaredJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,152,conf.setJobName("TimesSquaredJob: " + matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,153,FileSystem fs = FileSystem.get(matrixInputPath.toUri(), conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,159,SequenceFile.Writer inputVectorPathWriter = new SequenceFile.Writer(fs,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,160,conf, inputVectorPath, NullWritable.class, VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,161,Writable inputVW = new VectorWritable(v);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,162,inputVectorPathWriter.append(NullWritable.get(), inputVW);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,163,Closeables.close(inputVectorPathWriter, false);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,165,DistributedCache.setCacheFiles(new URI[] {ivpURI}, conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,170,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,171,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,172,FileOutputFormat.setOutputPath(conf, new Path(outputVectorPathBase, OUTPUT_VECTOR_FILENAME));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,173,conf.setMapperClass(mapClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,174,conf.setMapOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,175,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,176,conf.setReducerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,177,conf.setCombinerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,178,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,179,conf.setOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,180,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,181,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,184,public static Vector retrieveTimesSquaredOutputVector(Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,185,Path outputPath = FileOutputFormat.getOutputPath(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,186,Path outputFile = new Path(outputPath, "part-00000");
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,196,public static class TimesSquaredMapper<T extends WritableComparable> extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,197,implements Mapper<T,VectorWritable, NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,200,private OutputCollector<NullWritable,VectorWritable> out;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,207,void setOut(OutputCollector<NullWritable,VectorWritable> out) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,208,this.out = out;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,212,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,230,: new DenseVector(outDim);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,237,public void map(T rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,238,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,239,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,240,Reporter rep) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,241,setOut(out);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,255,public void close() throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,256,if (out != null) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,257,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,265,public void map(IntWritable rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,266,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,267,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,268,Reporter rep) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,269,setOut(out);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,277,public static class VectorSummingReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,278,implements Reducer<NullWritable,VectorWritable,NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,283,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,291,public void reduce(NullWritable n,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,292,Iterator<VectorWritable> vectors,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,293,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,294,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,295,while (vectors.hasNext()) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,296,VectorWritable v = vectors.next();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,301,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,21,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,24,import org.apache.hadoop.io.WritableComparable;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,25,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,26,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,27,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,28,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,29,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,30,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,31,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,32,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,33,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,34,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,37,import org.apache.mahout.math.RandomAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,38,import org.apache.mahout.math.SequentialAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,39,import org.apache.mahout.math.Vector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,43,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,52,public static final String NUM_ROWS_KEY = "SparseRowMatrix.numRows";
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,78,public static Configuration buildTransposeJobConf(Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,79,Path matrixOutputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,80,int numInputRows) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,81,return buildTransposeJobConf(new Configuration(), matrixInputPath, matrixOutputPath, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,84,public static Configuration buildTransposeJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,85,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,86,Path matrixOutputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,87,int numInputRows) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,88,JobConf conf = new JobConf(initialConf, TransposeJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,89,conf.setJobName("TransposeJob: " + matrixInputPath + " transpose -> " + matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,90,FileSystem fs = FileSystem.get(matrixInputPath.toUri(), conf);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,91,matrixInputPath = fs.makeQualified(matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,92,matrixOutputPath = fs.makeQualified(matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,93,conf.setInt(NUM_ROWS_KEY, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,95,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,96,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,97,FileOutputFormat.setOutputPath(conf, matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,99,conf.setMapperClass(TransposeMapper.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,100,conf.setMapOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,101,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,102,conf.setCombinerClass(MergeVectorsCombiner.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,103,conf.setReducerClass(MergeVectorsReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,104,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,105,conf.setOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,106,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,107,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,110,public static class TransposeMapper extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,111,implements Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,113,private int newNumCols;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,116,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,117,newNumCols = conf.getInt(NUM_ROWS_KEY, Integer.MAX_VALUE);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,121,public void map(IntWritable r, VectorWritable v, OutputCollector<IntWritable, VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,122,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,123,int row = r.get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,127,RandomAccessSparseVector tmp = new RandomAccessSparseVector(newNumCols, 1);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,128,tmp.setQuick(row, e.get());
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,129,r.set(e.index());
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,130,out.collect(r, new VectorWritable(tmp));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,135,public static class MergeVectorsCombiner extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,136,implements Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,141,out.collect(key, VectorWritable.merge(vectors));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,145,public static class MergeVectorsReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,146,implements Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,151,Vector merged = VectorWritable.merge(vectors).get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,152,out.collect(key, new VectorWritable(new SequentialAccessSparseVector(merged)));
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,34,private static final int NUM_FLAGS = 3;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,38,public MatrixWritable() {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,114,Matrix r;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,116,r = new DenseMatrix(rows, columns);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,118,r = new SparseRowMatrix(rows, columns, !sequential);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,121,for (int row = 0; row < rows; row++) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,122,r.viewRow(row).assign(VectorWritable.readVector(in));
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,130,r.setColumnLabelBindings(columnLabelBindings);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,133,r.setRowLabelBindings(rowLabelBindings);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,137,return r;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,141,public static void writeMatrix(DataOutput out, Matrix matrix) throws IOException {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,144,if (row.isDense()) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,158,for (int i = 0; i < matrix.rowSize(); i++) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,159,VectorWritable.writeVector(out, matrix.viewRow(i), false);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,69,return new SparseRowMatrix(rows, columns);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,121,return new SparseRowMatrix(rows, columns);
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,112,for (Vector vectorEntry : rowVectors.values()) {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,113,result[COL] = Math.max(result[COL], vectorEntry
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,114,.getNumNondefaultElements());
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassifier.java,237,writer.close();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,18,package org.apache.mahout.classifier.df.split;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,21,import org.apache.mahout.classifier.df.data.Data;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,22,import org.apache.mahout.classifier.df.data.DataUtils;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,23,import org.apache.mahout.classifier.df.data.Dataset;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,24,import org.apache.mahout.classifier.df.data.Instance;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,26,import java.util.Arrays;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,32,public class OptIgSplit extends IgSplit {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,34,private int[][] counts;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,36,private int[] countAll;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,38,private int[] countLess;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,41,public Split computeSplit(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,42,if (data.getDataset().isNumerical(attr)) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,43,return numericalSplit(data, attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,45,return categoricalSplit(data, attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,52,private static Split categoricalSplit(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,53,double[] values = data.values(attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,54,int[][] counts = new int[values.length][data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,55,int[] countAll = new int[data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,57,Dataset dataset = data.getDataset();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,60,for (int index = 0; index < data.size(); index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,61,Instance instance = data.get(index);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,62,counts[ArrayUtils.indexOf(values, instance.get(attr))][(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,63,countAll[(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,66,int size = data.size();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,69,double invDataSize = 1.0 / size;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,71,for (int index = 0; index < values.length; index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,72,size = DataUtils.sum(counts[index]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,73,hyx += size * invDataSize * entropy(counts[index], size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,76,double ig = hy - hyx;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,77,return new Split(attr, ig);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,83,private static double[] sortedValues(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,84,double[] values = data.values(attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,85,Arrays.sort(values);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,87,return values;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,93,void initCounts(Data data, double[] values) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,94,counts = new int[values.length][data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,95,countAll = new int[data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,96,countLess = new int[data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,99,void computeFrequencies(Data data, int attr, double[] values) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,100,Dataset dataset = data.getDataset();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,102,for (int index = 0; index < data.size(); index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,103,Instance instance = data.get(index);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,104,counts[ArrayUtils.indexOf(values, instance.get(attr))][(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,105,countAll[(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,112,Split numericalSplit(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,113,double[] values = sortedValues(data, attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,115,initCounts(data, values);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,117,computeFrequencies(data, attr, values);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,119,int size = data.size();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,120,double hy = entropy(countAll, size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,121,double invDataSize = 1.0 / size;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,123,int best = -1;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,124,double bestIg = -1.0;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,127,for (int index = 0; index < values.length; index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,128,double ig = hy;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,131,size = DataUtils.sum(countLess);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,132,ig -= size * invDataSize * entropy(countLess, size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,135,size = DataUtils.sum(countAll);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,136,ig -= size * invDataSize * entropy(countAll, size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,138,if (ig > bestIg) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,139,bestIg = ig;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,140,best = index;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,143,DataUtils.add(countLess, counts[index]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,144,DataUtils.dec(countAll, counts[index]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,147,if (best == -1) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,148,throw new IllegalStateException("no best split found !");
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,150,return new Split(attr, bestIg, values[best]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,159,private static double entropy(int[] counts, int dataSize) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,160,if (dataSize == 0) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,161,return 0.0;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,164,double entropy = 0.0;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,165,double invDataSize = 1.0 / dataSize;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,167,for (int count : counts) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,168,if (count == 0) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,169,continue; // otherwise we get a NaN
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,171,double p = count * invDataSize;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,172,entropy += -p * Math.log(p) / LOG2;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,175,return entropy;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,130,int nbTrees = numTrees / numMaps;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,131,if (partition == 0) {
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,132,nbTrees += numTrees - nbTrees * numMaps;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,135,return nbTrees;
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,58,SparseMatrix clone = (SparseMatrix) super.clone();
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,59,clone.rowVectors = rowVectors.clone();
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,49,import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,202,for (VectorWritable vw : new SequenceFileDirValueIterable<VectorWritable>(input, PathType.LIST,
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,204,Vector pdfPerCluster = clusterClassifier.classify(vw.get());
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,206,classifyAndWrite(clusterModels, clusterClassificationThreshold, emitMostLikely, writer, vw, pdfPerCluster);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,229,WeightedVectorWritable wvw = new WeightedVectorWritable(pdf.get(), vw.get());
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,236,private static void write(List<Cluster> clusterModels, SequenceFile.Writer writer, WeightedVectorWritable wvw,
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,239,writer.append(new IntWritable(cluster.getId()), wvw);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,90,Vector pdfPerCluster = clusterClassifier.classify(vw.get());
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,96,writeAllAboveThreshold(vw, context, pdfPerCluster);
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,35,if (row < 0 || row > matrix.rowSize()) {
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,38,if (column < 0 || column > matrix.columnSize()) {
core/src/main/java/org/apache/mahout/classifier/sgd/TPrior.java,20,import org.apache.commons.math.special.Gamma;
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,292,if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,306,double t = (ks == p ? 0.0 : Math.abs(e[ks])) + (ks == k + 1 ? 0.0 : Math.abs(e[ks - 1]));
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,307,if (Math.abs(s[ks]) <= eps * t) {
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java,94,boolean trainComplementary = Boolean.parseBoolean(getOption(TRAIN_COMPLEMENTARY));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,34,private static final Pattern COMMA_PATTERN = Pattern.compile(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,62,if (line.startsWith(ARFFModel.ARFF_SPARSE)) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,64,String[] splits = COMMA_PATTERN.split(line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,67,split = split.trim();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,75,String[] splits = COMMA_PATTERN.split(line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,34,import java.util.regex.Pattern;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,52,private static final Pattern COMMA_PATTERN = Pattern.compile(",");
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,53,private static final Pattern SPACE_PATTERN = Pattern.compile(" ");
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,83,String lower = line.toLowerCase(Locale.ENGLISH);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,84,Integer labelNumInt = labelNumber;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,183,String[] dictionary = new String[dict.size()];
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,216,WeightedVectorWritable wvw = new WeightedVectorWritable(pdfPerCluster.maxValue(), vw.get());
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,217,write(clusterModels, writer, wvw, maxValueIndex);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,271,job.setOutputValueClass(WeightedVectorWritable.class);
integration/src/main/java/org/apache/mahout/utils/clustering/AbstractClusterWriter.java,31,import org.apache.mahout.clustering.classify.WeightedVectorWritable;
integration/src/main/java/org/apache/mahout/utils/clustering/AbstractClusterWriter.java,49,protected final Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
integration/src/main/java/org/apache/mahout/utils/clustering/AbstractClusterWriter.java,68,protected Map<Integer, List<WeightedVectorWritable>> getClusterIdToPoints() {
integration/src/main/java/org/apache/mahout/utils/clustering/CSVClusterWriter.java,21,import org.apache.mahout.clustering.classify.WeightedVectorWritable;
integration/src/main/java/org/apache/mahout/utils/clustering/CSVClusterWriter.java,51,List<WeightedVectorWritable> points = getClusterIdToPoints().get(cluster.getId());
integration/src/main/java/org/apache/mahout/utils/clustering/CSVClusterWriter.java,53,for (WeightedVectorWritable point : points) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,34,import org.apache.mahout.clustering.classify.WeightedVectorWritable;
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,87,private Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,260,public Map<Integer, List<WeightedVectorWritable>> getClusterIdToPoints() {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,299,List<WeightedVectorWritable> pointList = result.get(keyValue);
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,24,import org.apache.mahout.clustering.classify.WeightedVectorWritable;
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,43,public ClusterDumperWriter(Writer writer, Map<Integer,List<WeightedVectorWritable>> clusterIdToPoints,
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,72,Map<Integer,List<WeightedVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,73,List<WeightedVectorWritable> points = clusterIdToPoints.get(clusterWritable.getValue().getId());
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,76,for (Iterator<WeightedVectorWritable> iterator = points.iterator(); iterator.hasNext();) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,77,WeightedVectorWritable point = iterator.next();
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,79,if (point instanceof WeightedPropertyVectorWritable) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,80,WeightedPropertyVectorWritable tmp = (WeightedPropertyVectorWritable) point;
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,81,Map<Text,Text> map = tmp.getProperties();
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,83,writer.write(" : [");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,84,if (map != null) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,85,for (Map.Entry<Text,Text> entry : map.entrySet()) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,86,writer.write(entry.getKey().toString());
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,87,writer.write("=");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,88,writer.write(entry.getValue().toString());
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,91,writer.write("]");
integration/src/main/java/org/apache/mahout/utils/clustering/GraphMLClusterWriter.java,51,public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
integration/src/main/java/org/apache/mahout/utils/clustering/GraphMLClusterWriter.java,117,List<WeightedVectorWritable> points = clusterIdToPoints.get(cluster.getId());
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,53,import org.apache.mahout.clustering.classify.WeightedVectorWritable;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,83,private final Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,113,for (Map.Entry<Integer, List<WeightedVectorWritable>> integerListEntry : clusterIdToPoints.entrySet()) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,114,List<WeightedVectorWritable> wvws = integerListEntry.getValue();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,115,List<TermInfoClusterInOut> termInfos = getClusterLabels(integerListEntry.getKey(), wvws);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,121,writer.write(String.valueOf(wvws.size()));
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,147,Collection<WeightedVectorWritable> wvws) throws IOException {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,149,if (wvws.size() < minNumIds) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,150,log.info("Skipping small cluster {} with size: {}", integer, wvws.size());
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,154,log.info("Processing Cluster {} with {} documents", integer, wvws.size());
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,161,for (WeightedVectorWritable wvw : wvws) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,162,Vector vector = wvw.getVector();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,218,int clusterSize = wvws.size();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,20,import org.apache.mahout.math.list.DoubleArrayList;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,43,private boolean sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,46,private DoubleArrayList starter = new DoubleArrayList(100);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,49,private final double[] q = new double[5];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,59,sorted = false;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,67,if (n < 100) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,68,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,71,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,72,for (int i = 0; i <= 4; i++) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,73,q[i] = getQuartile(i);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,77,starter = null;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,80,q[0] = Math.min(sample, q[0]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,81,q[4] = Math.max(sample, q[4]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,83,double rate = 2 * (q[3] - q[1]) / n;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,84,q[1] += (Math.signum(sample - q[1]) - 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,85,q[2] += Math.signum(sample - q[2]) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,86,q[3] += (Math.signum(sample - q[3]) + 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,88,if (q[1] < q[0]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,89,q[1] = q[0];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,92,if (q[3] > q[4]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,93,q[3] = q[4];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,114,private void sort() {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,115,if (!sorted && starter != null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,116,starter.sort();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,117,sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,126,if (n > 100 || starter == null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,127,return q[i];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,129,sort();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,130,switch (i) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,131,case 0:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,132,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,133,throw new IllegalArgumentException("Must have at least one sample to estimate minimum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,135,return starter.get(0);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,136,case 1:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,137,case 2:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,138,case 3:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,139,if (n >= 2) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,140,double x = i * (n - 1) / 4.0;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,141,int k = (int) Math.floor(x);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,142,double u = x - k;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,143,return starter.get(k) * (1 - u) + starter.get(k + 1) * u;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,145,throw new IllegalArgumentException("Must have at least two samples to estimate quartiles");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,147,case 4:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,148,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,149,throw new IllegalArgumentException("Must have at least one sample to estimate maximum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,151,return starter.get(starter.size() - 1);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,152,default:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,153,throw new IllegalArgumentException("Quartile number must be in the range [0..4] not " + i);
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java,195,int filenumber = 0;
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java,213,filenumber++;
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java,214,String filename = outputDirPath + "/chunk-" + decimalFormatter.format(filenumber) + ".xml";
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java,222,if (filenumber >= numChunks) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,85,if (lower.startsWith(ARFFModel.ARFF_COMMENT)) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,86,continue;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,90,String label;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,91,ARFFType type;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,92,if (lower.contains(ARFFType.NUMERIC.getIndicator())) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,93,label = ARFFType.NUMERIC.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,94,type = ARFFType.NUMERIC;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,96,label = ARFFType.STRING.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,97,type = ARFFType.STRING;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,99,label = ARFFType.NOMINAL.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,100,type = ARFFType.NOMINAL;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,102,int classIdx = lower.indexOf(ARFFType.NOMINAL.getIndicator());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,103,String[] classes = COMMA_PATTERN.split(line.substring(classIdx + 1, line.length() - 1));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,104,for (int i = 0; i < classes.length; i++) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,109,label = ARFFType.DATE.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,110,type = ARFFType.DATE;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,112,DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,113,int idx = lower.lastIndexOf(ARFFType.DATE.getIndicator());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,114,String[] split = SPACE_PATTERN.split(line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,115,if (split.length >= 4) { //we have a date format
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,116,String formStr = line.substring(idx + ARFFType.DATE.getIndicator().length()).trim();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,117,if (formStr.startsWith("\"")) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,118,formStr = formStr.substring(1, formStr.length() - 1);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,120,format = new SimpleDateFormat(formStr, Locale.ENGLISH);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,122,model.addDateFormat(labelNumInt, format);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,125,throw new UnsupportedOperationException("Invalid attribute: " + line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,127,model.addLabel(label, labelNumInt);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,128,model.addType(labelNumInt, type);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,129,labelNumber++;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,132,break; //skip it
integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java,144,return Double.parseDouble(data);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/TasteHadoopUtils.java,54,return 0x7FFFFFFF & Longs.hashCode(id);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java,39,FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java,44,abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,23,import java.util.Locale;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,89,trace(String.format("%s:%s", Arrays.toString(originalForm1), Arrays.toString(originalForm2)), n);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,81,public class PrefixAdditionFilter implements FileFilter {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,82,private final MailProcessor processor;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,84,private long messageCount;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,86,public PrefixAdditionFilter(MailProcessor processor, ChunkedWriter writer) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,87,this.processor = processor;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,89,this.messageCount = 0;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,93,return messageCount;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,97,public boolean accept(File current) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,98,if (current.isDirectory()) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,100,PrefixAdditionFilter nested = new PrefixAdditionFilter(
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,104,long dirCount = nested.getMessageCount();
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,107,messageCount += dirCount;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,109,try {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,110,messageCount += processor.parseMboxLineByLine(current);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,112,throw new IllegalStateException("Error processing " + current, e);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,115,return false;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,66,options.getInput().listFiles(filter);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,103,current.listFiles(nested);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,22,import java.util.Comparator;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,23,import java.util.List;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,34,import org.apache.mahout.common.iterator.sequencefile.PathFilters;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,35,import org.apache.mahout.common.iterator.sequencefile.PathType;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,36,import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,37,import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterable;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,158,+ o1.getPath());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,164,+ o2.getPath());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,192,FileStatus[] files = fs.globStatus(glob);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,193,if (files == null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,194,return null;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,197,List<double[]> denseData = Lists.newArrayList();
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,203,Arrays.sort(files, PARTITION_COMPARATOR);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,205,for (FileStatus fstat : files) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,206,for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(fstat.getPath(),
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,207,true,
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,208,conf)) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,209,Vector v = value.get();
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,210,int size = v.size();
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,211,double[] row = new double[size];
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,212,for (int i = 0; i < size; i++) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,213,row[i] = v.get(i);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,216,denseData.add(row);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDHelper.java,220,return denseData.toArray(new double[denseData.size()][]);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,348,long seed = rnd.nextLong();
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,361,Omega omega = new Omega(seed, k + p);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,364,SSVDHelper.saveVector(s_b0, sbPath =
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,365,new Path(pcaBasePath, "somega.seq"), conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,368,if (overwrite) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,369,fs.delete(outputPath, true);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,385,seed,
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,139,uHat = new DenseMatrix(SSVDHelper.loadDistributedRowMatrix(fs,
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,140,uHatPath, context.getConfiguration()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,104,uHat =
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,105,new DenseMatrix(SSVDHelper.loadDistributedRowMatrix(fs, uHatPath, conf));
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,79,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,80,result.append('{');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,81,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,82,boolean first = true;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,83,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,84,if (first) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,85,first = false;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,87,result.append(',');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,89,Element e = it.next();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,90,result.append(e.index());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,91,result.append(':');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,92,result.append(e.get());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,94,result.append('}');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,95,return result.toString();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,150,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,151,result.append('{');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,152,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,153,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,154,Element e = it.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,155,result.append(e.index());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,156,result.append(':');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,157,result.append(e.get());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,158,result.append(',');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,163,return result.toString();
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,20,import com.google.common.base.CharMatcher;
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,23,import com.google.common.base.Splitter;
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,73,private static final Splitter COMMA = Splitter.on(',').trimResults(CharMatcher.is('"'));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,169,variableNames = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,243,List<String> values = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,274,List<String> values = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,296,List<String> values = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,321,List<String> values = Lists.newArrayList(COMMA.split(line));
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,160,if (result.length() > 1) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,161,result.setCharAt(result.length() - 1, '}');
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,21,import java.util.Iterator;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,54,PathType.LIST,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,55,PathFilters.partFilter(),
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,56,null,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,57,true,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,58,conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,21,import java.util.HashMap;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,22,import java.util.Map;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,56,private final Map<String,Path> postProcessedClusterDirectories = new HashMap<String,Path>();
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,58,private final Map<String,SequenceFile.Writer> writersForClusters;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,66,this.writersForClusters = new HashMap<String,SequenceFile.Writer>();
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,67,fileSystem = clusteredPoints.getFileSystem(conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,78,PathType.GLOB,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,79,PathFilters.partFilter(),
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,80,null,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,81,false,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,82,conf)) {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,137,public Map<String,Path> getPostProcessedClusterDirectories() {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,26,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,69,DefaultOptionCreator.SEQUENTIAL_METHOD);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,78,private ClusterOutputPostProcessorDriver() {}
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,98,InterruptedException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,99,ClassNotFoundException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,122,new Configuration());
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,139,InterruptedException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,140,ClassNotFoundException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,145,job.setMapOutputKeyClass(Text.class);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,148,job.setOutputKeyClass(Text.class);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,150,int numberOfClusters = ClusterCountReader.getNumberOfClusters(input, conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,173,SequenceFileIterator<Writable,Writable> it =
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,174,new SequenceFileIterator<Writable,Writable>(fileStatus.getPath(), true, conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,23,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,32,Mapper<IntWritable,WeightedVectorWritable,Text,VectorWritable> {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,38,protected void map(IntWritable key, WeightedVectorWritable vector, Context context) throws IOException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,39,InterruptedException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,40,context.write(new Text(key.toString().trim()), new VectorWritable(vector.getVector()));
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,22,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,29,public class ClusterOutputPostProcessorReducer extends Reducer<Text,VectorWritable,Text,VectorWritable> {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,34,protected void reduce(Text key, Iterable<VectorWritable> values, Context context) throws IOException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,35,InterruptedException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,37,context.write(key, value);
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,20,import java.util.List;
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,69,abuilder.withName("minSupport").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,73,abuilder.withName("analyzerName").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,77,abuilder.withName("chunkSize").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,81,abuilder.withName("weight").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,85,abuilder.withName("minDF").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,94,abuilder.withName("maxDFSigma").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,101,abuilder.withName("minLLR").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,103,.withShortName("ml").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,106,abuilder.withName("numReducers").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,110,abuilder.withName("norm").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,112,+ "Must be greater or equal to 0.  The default is not to normalize").withShortName("n").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,115,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,117,.withShortName("lnorm").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,121,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,123,+ " (2 = bigrams, 3 = trigrams, etc) Default Value:1").withShortName("ng").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,126,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,128,.withShortName("seq").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,131,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,133,.withShortName("nv").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,138,.create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,146,.create();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,125,writeFile(outDir, file, maxDocs, model, dictOut, delimiter);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,128,writeFile(outDir, input, maxDocs, model, dictOut, delimiter);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,138,private static void writeLabelBindings(File dictOut, ARFFModel arffModel, String delimiter) throws IOException {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,139,Map<String,Integer> labels = arffModel.getLabelBindings();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,142,writer.write("Label bindings for Relation " + arffModel.getRelation() + '\n');
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,143,for (Map.Entry<String,Integer> entry : labels.entrySet()) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,144,writer.write(entry.getKey());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,145,writer.write(delimiter);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,146,writer.write(String.valueOf(entry.getValue()));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,147,writer.write('\n');
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,149,writer.write('\n');
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,155,private static void writeFile(String outDir,
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,160,String delimiter) throws IOException {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,170,writeLabelBindings(dictOut, model, delimiter);
core/src/main/java/org/apache/mahout/classifier/df/DFUtils.java,40,private DFUtils() { }
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,27,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,28,import org.apache.hadoop.io.WritableUtils;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,29,import org.apache.mahout.classifier.df.DFUtils;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,31,import java.io.DataInput;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,32,import java.io.DataOutput;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,40,public class Dataset implements Writable {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,90,private Dataset() {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,165,public int nbInstances() {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,166,return nbInstances;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,300,return read(input);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,306,public static Dataset read(DataInput in) throws IOException {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,307,Dataset dataset = new Dataset();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,309,dataset.readFields(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,310,return dataset;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,314,public void readFields(DataInput in) throws IOException {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,315,int nbAttributes = in.readInt();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,316,attributes = new Attribute[nbAttributes];
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,317,for (int attr = 0; attr < nbAttributes; attr++) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,318,String name = WritableUtils.readString(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,319,attributes[attr] = Attribute.valueOf(name);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,322,ignored = DFUtils.readIntArray(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,325,values = new String[nbAttributes][];
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,326,for (int attr = 0; attr < nbAttributes; attr++) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,327,if (attributes[attr].isCategorical()) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,328,values[attr] = WritableUtils.readStringArray(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,332,labelId = in.readInt();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,333,nbInstances = in.readInt();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,337,public void write(DataOutput out) throws IOException {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,338,out.writeInt(attributes.length); // nb attributes
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,339,for (Attribute attr : attributes) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,340,WritableUtils.writeString(out, attr.name());
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,343,DFUtils.writeArray(out, ignored);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,346,for (String[] vals : values) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,347,if (vals != null) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,348,WritableUtils.writeStringArray(out, vals);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,352,out.writeInt(labelId);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,353,out.writeInt(nbInstances);
core/src/main/java/org/apache/mahout/classifier/df/tools/Describe.java,52,private Describe() {
core/src/main/java/org/apache/mahout/classifier/df/tools/Describe.java,119,DFUtils.storeWritable(new Configuration(), fPath, dataset);
core/src/main/java/org/apache/mahout/classifier/df/tools/UDistrib.java,59,private UDistrib() {
core/src/main/java/org/apache/mahout/classifier/df/tools/UDistrib.java,164,int nbInstances = dataset.nbInstances();
core/src/main/java/org/apache/mahout/classifier/df/tools/UDistrib.java,169,log.info("progress : {} / {}", id, nbInstances);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,112,Closeables.closeQuietly(vectorWriter);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,122,Closeables.closeQuietly(tiWriter);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,131,Path clusters = new Path(output, Cluster.INITIAL_CLUSTERS_DIR);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,133,log.info("Running KMeans");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,137,ClusterDumper clusterDumper = new ClusterDumper(new Path(output, "clusters-*-final"), new Path(output,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,139,for (FileStatus part : fs.listStatus(clustersIn, PathFilters.logsCRCFilter())) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,140,Path inPart = part.getPath();
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,141,Path path = new Path(output, inPart.getName());
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,142,SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, path, IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,143,try {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,144,for (ClusterWritable clusterWritable : new SequenceFileValueIterable<ClusterWritable>(inPart, true, conf)) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,145,Cluster cluster = clusterWritable.getValue();
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,146,if (log.isDebugEnabled()) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,147,log.debug("C-{}: {}", cluster.getId(), AbstractCluster.formatVector(cluster.getCenter(), null));
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,149,writer.append(new IntWritable(cluster.getId()), new VectorWritable(cluster.getCenter()));
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,152,Closeables.closeQuietly(writer);
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,39,private TreeVisualizer() {
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,100,Map<String, Field> fields = new HashMap<String, Field>();
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,217,Map<String, Field> reflectMap = getReflectMap();
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,220,prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(), attrNames, reflectMap);
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,235,Map<String, Field> reflectMap = getReflectMap();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,20,import org.apache.hadoop.conf.Configured;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,21,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,41,public VectorWritable() {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,154,Varint.writeUnsignedVarInt(vector.getNumNondefaultElements(), out);
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,95,if (lr != null) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,96,lr.close();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,98,targetCategories = csv.getTargetCategories();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,136,out.writeInt(targetCategories.size());
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,137,for (String category : targetCategories) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,138,out.writeUTF(category);
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,52,Configuration baseConf,
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,64,pruneVectorsPartial(tfDir, partialVectorOutputPath, path, maxDF, baseConf);
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,73,Configuration baseConf) throws IOException, InterruptedException,
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,42,private long maxDf = -1;
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,53,if (maxDf > -1) {
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,62,if (df > maxDf) {
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,80,maxDf = conf.getLong(HighDFWordsPruner.MAX_DF, -1);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,62,private VectorDumper() {
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,79,addOption("useKey", "u", "If the Key is a vector than dump that instead", false);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,80,addOption("printKey", "p", "Print out the key as well, delimited by tab (or the value if useKey is true", false);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,85,addOption("nameOnly", "N", "Use the name as the value for each NamedVector (skip other vectors)", false);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,87,addOption("quiet", "q", "Print only file contents", false);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,88,addOption("sizeOnly", "sz", "Dump only the size of the vector", false);
integration/src/main/java/org/apache/mahout/utils/SplitInput.java,286,SplitInputJob.run(new Configuration(), inputDir, mapRedOutputDirectory,
integration/src/main/java/org/apache/mahout/utils/SplitInput.java,287,keepPct, testRandomSelectionPct);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,93,run(input, clustersIn, output, clusterClassificationThreshold, true, runSequential);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,131,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,161,Path clustersOut = buildClusters(new Configuration(),
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,172,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,225,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,312,public static void clusterData(Path input,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,459,public static void clusterData(Path input, Path clustersIn, Path output,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,465,clusterDataMR(input, clustersIn, output);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,511,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,224,public static void runPFPGrowth(Parameters params) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,225,InterruptedException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,226,ClassNotFoundException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,227,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,229,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,241,maxPerGroup++;
core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java,164,DistributedConjugateGradientSolver.this.setConf(new Configuration());
core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java,89,ToolRunner.run(new Entropy(), args);
core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java,96,ToolRunner.run(new ConditionalEntropy(), args);
core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGainRatio.java,42,ToolRunner.run(job, args);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java,45,for (String item : items) {
core/src/main/java/org/apache/mahout/clustering/lda/cvb/ModelTrainer.java,244,writeModel.awaitTermination();
core/src/main/java/org/apache/mahout/clustering/lda/cvb/ModelTrainer.java,250,writeModel.reset();
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,156,ThreadPoolExecutor threadPool = new ThreadPoolExecutor(numThreads, numThreads, 0, TimeUnit.SECONDS,
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,249,initializeThreadPool();
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,252,public void awaitTermination() {
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,63,int numClusters = 3;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,64,runSequentialKMeansClusterer(conf, samples, output, measure, numClusters, convergenceDelta);
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,66,int maxIterations = 10;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,67,runSequentialKMeansClassifier(conf, samples, output, measure, maxIterations, convergenceDelta);
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,73,DistanceMeasure measure, int numClusters, double convergenceDelta) throws IOException {
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,87,int maxIter = 10;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,93,DistanceMeasure measure, int maxIterations, double convergenceDelta) throws IOException, InterruptedException,
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,96,RandomSeedGenerator.buildRandom(conf, samples, clustersIn, 3, measure);
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,27,private final Matrix base;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,28,private final int[] rowPivot;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,29,private final int[] rowUnpivot;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,30,private final int[] columnPivot;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,31,private final int[] columnUnpivot;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,257,Closeables.closeQuietly(writer);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,110,boolean overwrite =
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,111,pargs.containsKey(keyFor(DefaultOptionCreator.OVERWRITE_OPTION));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,146,fs.mkdirs(getOutputPath());
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,67,return 1;
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,91,return 1;
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,112,return 1;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,573,for (int row = 0; row < size; row++) {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,81,return '\n' + "nCalls = " + nCalls + ";\n" + "sum = " + sumTime / 1000000000.0 + "s;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,82,+ "min = " + minTime / 1000000.0 + "ms;\n" + "max = " + maxTime / 1000000.0 + "ms;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,84,/ 1000000.0 + "ms;";
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,91,public final class Call {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,92,private final long startTime = System.nanoTime();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,24,import java.util.Iterator;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,27,import java.util.Random;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,31,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,32,import com.google.common.collect.Maps;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,33,import com.google.common.io.Closeables;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,43,import org.apache.hadoop.conf.Configuration;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,44,import org.apache.hadoop.fs.FileSystem;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,45,import org.apache.hadoop.fs.Path;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,46,import org.apache.hadoop.io.IntWritable;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,47,import org.apache.hadoop.io.SequenceFile;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,48,import org.apache.hadoop.io.Writable;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,54,import org.apache.mahout.common.distance.DistanceMeasure;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,59,import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,63,import org.apache.mahout.math.SparseMatrix;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,65,import org.apache.mahout.math.VectorWritable;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,71,private static final Logger log = LoggerFactory.getLogger(VectorBenchmarks.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,76,private final Vector[][] vectors;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,77,private final Vector[] clusters;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,78,private final SparseMatrix clusterDistances;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,82,private final int cardinality;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,83,private final int sparsity;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,84,private final int numVectors;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,85,private final int loop;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,86,private final int opsPerUnit;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,87,private final Map<String,Integer> implType = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,88,private final Map<String,List<String[]>> statsMap = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,89,private final int numClusters;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,91,public VectorBenchmarks(int cardinality, int sparsity, int numVectors, int numClusters, int loop, int opsPerUnit) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,92,Random r = RandomUtils.getRandom();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,94,this.sparsity = sparsity;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,97,this.loop = loop;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,100,Vector v = new SequentialAccessSparseVector(cardinality, sparsity); // sparsity!
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,102,int[] indexes = new int[sparsity];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,103,double[] values = new double[sparsity];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,105,while (j < sparsity) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,108,if (!featureSpace.get(index)) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,119,vectors = new Vector[3][numVectors];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,120,clusters = new Vector[numClusters];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,121,clusterDistances = new SparseMatrix(numClusters, numClusters);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,124,private void printStats(TimingStatistics stats, String benchmarkName, String implName, String content) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,128,private void printStats(TimingStatistics stats, String benchmarkName, String implName) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,132,private void printStats(TimingStatistics stats,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,133,String benchmarkName,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,134,String implName,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,135,String content,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,136,int multiplier) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,137,float speed = multiplier * loop * numVectors * sparsity * 1000.0f * 12 / stats.getSumTime();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,138,float opsPerSec = loop * numVectors * 1000000000.0f / stats.getSumTime();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,153,implStats.set(implId,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,154,TAB_NEWLINE_PATTERN.split(stats + "\tSpeed = " + opsPerSec + " /sec\tRate = " + speed + " MB/s"));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,158,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,159,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,160,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,161,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,162,vectors[0][i] = new DenseVector(randomVectors.get(i));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,163,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,166,printStats(stats, "Create (copy)", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,168,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,169,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,170,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,171,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,172,vectors[1][i] = new RandomAccessSparseVector(randomVectors.get(i));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,173,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,176,printStats(stats, "Create (copy)", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,178,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,179,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,180,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,181,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,182,vectors[2][i] = new SequentialAccessSparseVector(randomVectors.get(i));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,183,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,186,printStats(stats, "Create (copy)", "SeqSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,190,private void buildVectorIncrementally(TimingStatistics stats, int randomIndex, Vector v, boolean useSetQuick) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,203,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,213,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,218,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,219,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,220,vectors[0][i] = new DenseVector(cardinality);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,221,buildVectorIncrementally(stats, i, vectors[0][i], false);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,224,printStats(stats, "Create (incrementally)", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,227,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,228,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,229,vectors[1][i] = new RandomAccessSparseVector(cardinality);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,230,buildVectorIncrementally(stats, i, vectors[1][i], false);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,233,printStats(stats, "Create (incrementally)", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,244,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,245,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,246,for (int i = 0; i < numClusters; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,247,clusters[i] = new RandomAccessSparseVector(cardinality);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,248,buildVectorIncrementally(stats, i, clusters[i], false);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,251,printStats(stats, "Create (incrementally)", "Clusters");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,254,public void cloneBenchmark() {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,255,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,256,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,257,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,258,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,259,vectors[0][i] = vectors[0][i].clone();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,260,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,263,printStats(stats, "Clone", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,265,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,266,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,267,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,268,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,269,vectors[1][i] = vectors[1][i].clone();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,270,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,273,printStats(stats, "Clone", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,275,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,276,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,277,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,278,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,279,vectors[2][i] = vectors[2][i].clone();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,280,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,283,printStats(stats, "Clone", "SeqSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,287,public void serializeBenchmark() throws IOException {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,288,Configuration conf = new Configuration();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,289,FileSystem fs = FileSystem.get(conf);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,290,SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,291,new Path("/tmp/dense-vector"), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,293,Writable one = new IntWritable(0);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,294,VectorWritable vec = new VectorWritable();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,295,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,297,try {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,298,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,299,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,300,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,301,vec.set(vectors[0][i]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,302,writer.append(one, vec);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,303,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,307,Closeables.closeQuietly(writer);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,309,printStats(stats, "Serialize", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,311,writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,312,new Path("/tmp/randsparse-vector"), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,314,try {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,315,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,316,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,317,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,318,vec.set(vectors[1][i]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,319,writer.append(one, vec);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,320,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,324,Closeables.closeQuietly(writer);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,326,printStats(stats, "Serialize", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,328,writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,329,new Path("/tmp/seqsparse-vector"), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,330,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,331,try {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,332,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,333,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,334,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,335,vec.set(vectors[2][i]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,336,writer.append(one, vec);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,337,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,341,Closeables.closeQuietly(writer);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,343,printStats(stats, "Serialize", "SeqSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,347,public void deserializeBenchmark() throws IOException {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,348,doDeserializeBenchmark("DenseVector", "/tmp/dense-vector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,349,doDeserializeBenchmark("RandSparseVector", "/tmp/randsparse-vector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,350,doDeserializeBenchmark("SeqSparseVector", "/tmp/seqsparse-vector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,353,private void doDeserializeBenchmark(String name, String pathString) throws IOException {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,354,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,355,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,356,Iterator<?> iterator = new SequenceFileValueIterator<Writable>(new Path(pathString), true, new Configuration());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,357,while (iterator.hasNext()) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,358,iterator.next();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,359,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,360,call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,362,printStats(stats, "Deserialize", name);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,365,public void dotBenchmark() {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,366,double result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,367,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,368,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,369,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,370,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,371,result += vectors[0][i].dot(vectors[0][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,372,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,376,printStats(stats, "DotProduct", "DenseVector", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,377,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,378,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,379,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,380,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,381,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,382,result += vectors[1][i].dot(vectors[1][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,383,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,387,printStats(stats, "DotProduct", "RandSparseVector", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,388,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,389,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,390,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,391,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,392,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,393,result += vectors[2][i].dot(vectors[2][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,394,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,398,printStats(stats, "DotProduct", "SeqSparseVector", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,399,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,400,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,401,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,402,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,403,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,404,result += vectors[0][i].dot(vectors[1][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,405,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,409,printStats(stats, "DotProduct", "Dense.fn(Rand)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,410,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,412,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,413,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,414,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,415,result += vectors[0][i].dot(vectors[2][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,416,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,420,printStats(stats, "DotProduct", "Dense.fn(Seq)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,421,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,422,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,423,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,424,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,425,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,426,result += vectors[1][i].dot(vectors[0][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,427,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,431,printStats(stats, "DotProduct", "Rand.fn(Dense)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,432,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,433,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,434,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,435,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,436,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,437,result += vectors[1][i].dot(vectors[2][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,438,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,442,printStats(stats, "DotProduct", "Rand.fn(Seq)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,443,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,444,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,445,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,446,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,447,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,448,result += vectors[2][i].dot(vectors[0][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,449,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,453,printStats(stats, "DotProduct", "Seq.fn(Dense)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,454,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,455,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,456,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,457,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,458,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,459,result += vectors[2][i].dot(vectors[1][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,460,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,464,printStats(stats, "DotProduct", "Seq.fn(Rand)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,470,public void closestCentroidBenchmark(DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,472,for (int i = 0; i < numClusters; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,473,for (int j = 0; j < numClusters; j++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,474,double distance = Double.POSITIVE_INFINITY;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,475,if (i != j) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,476,distance = measure.distance(clusters[i], clusters[j]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,478,clusterDistances.setQuick(i, j, distance);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,482,long distanceCalculations = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,483,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,484,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,485,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,486,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,487,Vector vector = vectors[1][i];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,488,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,489,for (int k = 0; k < numClusters; k++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,490,double distance = measure.distance(vector, clusters[k]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,491,distanceCalculations++;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,492,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,493,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,497,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,499,printStats(stats,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,500,measure.getClass().getName(),
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,505,distanceCalculations = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,506,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,507,Random rand = RandomUtils.getRandom();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,509,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,510,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,511,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,512,Vector vector = vectors[1][i];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,513,int closestCentroid = rand.nextInt(numClusters);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,514,double dist = measure.distance(vector, clusters[closestCentroid]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,515,distanceCalculations++;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,516,for (int k = 0; k < numClusters; k++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,517,if (closestCentroid != k) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,518,double centroidDist = clusterDistances.getQuick(k, closestCentroid);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,519,if (centroidDist < 2 * dist) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,520,dist = measure.distance(vector, clusters[k]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,521,closestCentroid = k;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,522,distanceCalculations++;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,527,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,529,printStats(stats,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,530,measure.getClass().getName(),
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,535,public void distanceMeasureBenchmark(DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,536,double result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,537,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,538,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,539,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,540,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,541,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,542,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,543,double distance = measure.distance(vectors[0][i], vectors[0][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,544,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,545,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,548,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,549,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,553,printStats(stats, measure.getClass().getName(), "DenseVector", "minDistance = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,554,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,555,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,556,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,557,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,558,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,559,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,560,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,561,double distance = measure.distance(vectors[1][i], vectors[1][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,562,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,563,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,566,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,567,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,571,printStats(stats, measure.getClass().getName(), "RandSparseVector", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,572,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,573,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,574,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,575,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,576,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,577,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,578,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,579,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,580,double distance = measure.distance(vectors[2][i], vectors[2][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,581,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,582,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,585,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,586,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,590,printStats(stats, measure.getClass().getName(), "SeqSparseVector", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,591,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,592,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,593,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,594,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,595,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,596,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,597,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,598,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,599,double distance = measure.distance(vectors[0][i], vectors[1][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,600,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,601,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,604,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,605,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,609,printStats(stats, measure.getClass().getName(), "Dense.fn(Rand)", "minDistance = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,610,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,611,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,612,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,613,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,614,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,615,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,616,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,617,double distance = measure.distance(vectors[0][i], vectors[2][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,618,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,619,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,622,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,623,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,627,printStats(stats, measure.getClass().getName(), "Dense.fn(Seq)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,628,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,629,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,630,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,631,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,632,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,633,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,634,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,635,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,636,double distance = measure.distance(vectors[1][i], vectors[0][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,637,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,638,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,641,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,642,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,646,printStats(stats, measure.getClass().getName(), "Rand.fn(Dense)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,647,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,648,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,649,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,650,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,651,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,652,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,653,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,654,double distance = measure.distance(vectors[1][i], vectors[2][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,655,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,656,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,659,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,660,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,664,printStats(stats, measure.getClass().getName(), "Rand.fn(Seq)", "minDistance = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,665,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,666,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,667,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,668,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,669,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,670,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,671,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,672,double distance = measure.distance(vectors[2][i], vectors[0][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,673,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,674,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,677,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,678,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,682,printStats(stats, measure.getClass().getName(), "Seq.fn(Dense)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,683,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,684,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,685,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,686,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,687,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,688,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,689,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,690,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,691,double distance = measure.distance(vectors[2][i], vectors[1][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,692,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,693,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,696,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,697,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,701,printStats(stats, measure.getClass().getName(), "Seq.fn(Rand)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,702,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,712,Option vectorSizeOpt = obuilder.withLongName("vectorSize").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,713,abuilder.withName("vs").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,716,Option vectorSparsityOpt = obuilder.withLongName("sparsity").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,717,abuilder.withName("sp").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,719,Option numVectorsOpt = obuilder.withLongName("numVectors").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,720,abuilder.withName("nv").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,722,Option numClustersOpt = obuilder.withLongName("numClusters").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,723,abuilder.withName("vs").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,725,Option loopOpt = obuilder.withLongName("loop").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,726,abuilder.withName("loop").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,728,Option numOpsOpt = obuilder.withLongName("numOps").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,729,abuilder.withName("numOps").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,731,+ "E.g In distance measure, the distance is calculated numOps times"
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,732,+ " and the total time is measured. Default: 10").withShortName("no").create();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,737,.withOption(numVectorsOpt).withOption(loopOpt).withOption(numOpsOpt).withOption(helpOpt).create();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,745,CommandLineUtil.printHelp(group);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,749,int cardinality = 1000;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,760,int sparsity = 1000;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,761,if (cmdLine.hasOption(vectorSparsityOpt)) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,762,sparsity = Integer.parseInt((String) cmdLine.getValue(vectorSparsityOpt));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,765,int numVectors = 100;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,770,int loop = 200;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,771,if (cmdLine.hasOption(loopOpt)) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,772,loop = Integer.parseInt((String) cmdLine.getValue(loopOpt));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,780,VectorBenchmarks mark = new VectorBenchmarks(cardinality, sparsity, numVectors, numClusters, loop, numOps);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,781,mark.createBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,782,mark.incrementalCreateBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,783,mark.cloneBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,784,mark.dotBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,785,mark.serializeBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,786,mark.deserializeBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,787,mark.distanceMeasureBenchmark(new CosineDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,788,mark.distanceMeasureBenchmark(new SquaredEuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,789,mark.distanceMeasureBenchmark(new EuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,790,mark.distanceMeasureBenchmark(new ManhattanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,791,mark.distanceMeasureBenchmark(new TanimotoDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,793,mark.closestCentroidBenchmark(new CosineDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,794,mark.closestCentroidBenchmark(new SquaredEuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,795,mark.closestCentroidBenchmark(new EuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,796,mark.closestCentroidBenchmark(new ManhattanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,797,mark.closestCentroidBenchmark(new TanimotoDistanceMeasure());
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,355,for (int i = 0; i < length - 1; i++) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java,35,import org.apache.mahout.math.function.DoubleFunction;
core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java,21,import java.util.HashSet;
core/src/main/java/org/apache/mahout/cf/taste/impl/model/PlusAnonymousConcurrentUserDataModel.java,21,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/knn/KnnItemBasedRecommender.java,20,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,22,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/df/data/Data.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/Classifier.java,51,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java,47,import java.util.HashSet;
core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/BaumWelchTrainer.java,36,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/ViterbiEvaluator.java,37,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/sgd/GradientMachine.java,33,import java.util.HashSet;
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java,25,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,25,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,23,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,21,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,22,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,42,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/common/AbstractJob.java,22,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,41,import java.io.File;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,45,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,22,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java,20,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,27,import com.google.common.collect.Lists;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,31,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,32,import org.apache.hadoop.fs.Path;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,33,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,36,import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,39,import org.apache.mahout.fpm.pfpgrowth.convertors.string.TopKStringPatterns;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/Omega.java,20,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,38,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Callable.java,22,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/classifier/df/mapreduce/TestForest.java,21,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticModelParameters.java,29,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayMinHash.java,32,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmClusterEvaluator.java,25,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleCombiner.java,21,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,22,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,21,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,40,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,22,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaDatasetCreatorDriver.java,22,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaDatasetCreatorMapper.java,22,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaMapper.java,21,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,41,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/regex/ChainTransformer.java,20,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/regex/RegexMapper.java,28,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,49,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,26,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,25,import com.google.common.collect.AbstractIterator;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,31,import org.apache.mahout.math.NamedVector;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,33,import org.apache.mahout.utils.Bump125;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,34,import org.slf4j.Logger;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,35,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/als/ImplicitFeedbackAlternatingLeastSquaresSolver.java,43,OpenIntObjectHashMap Y) {
core/src/main/java/org/apache/mahout/clustering/lda/cvb/InMemoryCollapsedVariationalBayes0.java,369,int burnInIterations = (Integer)cmdLine.getValue(burnInOpt);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/InMemoryCollapsedVariationalBayes0.java,377,double modelCorpusFraction = (Double) cmdLine.getValue(modelCorpusFractionOption);
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,109,addOption(OUTPUT_FORMAT_OPT, "of", "The optional output format to write the results as.  Options: TEXT, CSV or GRAPH_ML", "TEXT");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,120,if (parseArguments(args) == null) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,160,if ("true".equals(params.get("useFPG2"))) {
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,102,int indexToRemove = random.nextInt(currentSize); // evict one chosen randomly
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,103,chosenTexts.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,104,chosenClusters.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,105,chosenTexts.add(newText);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,106,ClusterWritable clusterWritable = new ClusterWritable();
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,107,clusterWritable.setValue(newCluster);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,108,chosenClusters.add(clusterWritable);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFType.java,39,return line.substring(ARFFModel.ATTRIBUTE.length(), idx).trim();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,88,model.setRelation(line.substring(ARFFModel.RELATION.length()).trim());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,105,model.addNominal(label, classes[i].trim(), i + 1);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java,118,Integer ord = classes.get(data);
core/src/main/java/org/apache/mahout/classifier/sgd/CrossFoldLearner.java,126,if (k == trackingKey % models.size()) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java,96,pathFilter = constructor.newInstance(conf, keyPrefix, options, writer, fs);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,71,VectorWritable vectorWritable = new VectorWritable(vector);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,72,context.write(key, vectorWritable);
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,177,int[] offset = {row, column};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,178,int[] size = {rowStride == 0 ? 1 : rowStride, columnStride == 0 ? 1 : columnStride};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,179,return matrix.viewPart(offset, size);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,331,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,333,buf.append(((NamedVector) v).getName()).append(" = ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,335,int nzero = 0;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,336,Iterator<Vector.Element> iterateNonZero = v.iterateNonZero();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,337,while (iterateNonZero.hasNext()) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,338,iterateNonZero.next();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,339,nzero++;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,342,if (nzero < v.size() || bindings != null) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,343,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,344,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,345,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,346,if (elem == 0.0) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,347,continue;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,349,String label;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,350,if (bindings != null && (label = bindings[i]) != null) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,351,buf.append(label).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,353,buf.append(i).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,355,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,358,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,359,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,360,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,361,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,364,if (buf.length() > 1) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,365,buf.setLength(buf.length() - 2);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,367,buf.append(']');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,368,return buf.toString();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,44,public class QRDecomposition {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,47,private final Matrix qr;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,50,private final int originalRows;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,51,private final int originalColumns;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,54,private final Vector rDiag;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,67,qr = a.clone();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,68,originalRows = a.numRows();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,69,originalColumns = a.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,70,rDiag = new DenseVector(originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,73,Vector[] QRcolumnsPart = new Vector[originalColumns];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,74,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,75,QRcolumnsPart[k] = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,79,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,82,double nrm = 0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,85,for (int i = k; i < originalRows; i++) { // fixes bug reported by hong.44@osu.edu
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,86,nrm = Algebra.hypot(nrm, qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,90,if (nrm != 0.0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,92,if (qr.getQuick(k, k) < 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,93,nrm = -nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,95,QRcolumnsPart[k].assign(Functions.div(nrm));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,97,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,98,QR[i][k] /= nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,102,qr.setQuick(k, k, qr.getQuick(k, k) + 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,105,for (int j = k + 1; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,106,Vector QRcolj = qr.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,107,double s = QRcolumnsPart[k].dot(QRcolj);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,110,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,111,double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,112,double s = 0.0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,113,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,114,s += QR[i][k]*QR[i][j];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,117,s = -s / qr.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,120,for (int i = k; i < originalRows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,121,qr.setQuick(i, j, qr.getQuick(i, j) + s * qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,126,rDiag.setQuick(k, -nrm);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,136,int columns = Math.min(originalColumns, originalRows);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,137,Matrix q = qr.like(originalRows, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,138,for (int k = columns - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,139,Vector QRcolk = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,140,q.set(k, k, 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,141,for (int j = k; j < columns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,142,if (qr.get(k, k) != 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,143,Vector Qcolj = q.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,144,double s = -QRcolk.dot(Qcolj) / qr.get(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,145,Qcolj.assign(QRcolk, Functions.plusMult(s));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,158,int rows = Math.min(originalRows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,159,Matrix r = qr.like(rows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,160,for (int i = 0; i < rows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,161,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,162,if (i < j) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,163,r.setQuick(i, j, qr.getQuick(i, j));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,165,r.setQuick(i, j, rDiag.getQuick(i));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,167,r.setQuick(i, j, 0);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,180,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,181,if (rDiag.getQuick(j) == 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,182,return false;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,185,return true;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,196,if (B.numRows() != originalRows) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,200,int columns = B.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,201,Matrix x = B.like(originalColumns, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,210,for (int k = Math.min(originalColumns, originalRows) - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,216,for (int c = 0; c < columns; c++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,228,return String.format(Locale.ENGLISH, "QR(%d,%d,fullRank=%s)", originalColumns, originalRows, hasFullRank());
core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java,48,private boolean sequentialVecs;
core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java,56,sequentialVecs = conf.getBoolean(USE_SEQUENTIAL, false);
core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java,75,if (sequentialVecs) {
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,35,import org.apache.mahout.common.ClassUtils;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,37,import org.apache.mahout.common.ClassUtils;
core/src/main/java/org/apache/mahout/vectorizer/document/SequenceFileTokenizerMapper.java,29,import org.apache.mahout.common.ClassUtils;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,22,import java.util.Set;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,97,Collections.sort(entries, Ordering.natural().reverse());
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,139,new SequenceFileDirIterator<IntWritable,VectorWritable>(new Path(rowPath, "*"),
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,58,Vector score = model.createScoringVector();
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,59,for (int label = 0; label < model.numLabels(); label++) {
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,60,score.set(label, getScoreForLabelInstance(label, instance));
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,62,return score;
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,67,r = classifyFull(instance);
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,294,int istop = 0;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,425,istop = 7;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,429,istop = 6;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,433,istop = 5;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,437,istop = 4;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,444,istop = 3;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,448,istop = 2;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,452,istop = 1;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,457,throw new IllegalStateException(String.format("bad code match %d vs %d", istop, stop.ordinal()));
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,463,if ((n <= 40) || (iteration <= 10) || (iteration >= iterationLimit - 10) || ((iteration % 10) == 0) || (test3 <= 1.1 * ctol) || (test2 <= 1.1 * aTolerance) || (test1 <= 1.1 * rtol) || (istop != 0)) {
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,456,if (stop != StopCode.CONTINUE && stop.ordinal() != istop + 1) {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,34,implements WritableComparable<BinaryComparable>, Serializable, Cloneable {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,148,public static final class Comparator extends WritableComparator implements Serializable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,27,public class VarLongWritable implements WritableComparable<VarLongWritable>, Cloneable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,62,public VarLongWritable clone() {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,63,return new VarLongWritable(value);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,23,import java.io.Serializable;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,28,class GramKeyGroupComparator extends WritableComparator implements Serializable {
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,19,import org.apache.commons.math.linear.Array2DRowRealMatrix;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,20,import org.apache.commons.math.linear.EigenDecomposition;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,21,import org.apache.commons.math.linear.EigenDecompositionImpl;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,22,import org.apache.commons.math.linear.RealMatrix;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,47,EigenDecomposition evd2 = new EigenDecompositionImpl(
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,48,new Array2DRowRealMatrix(bbt), 0);
integration/src/main/java/org/apache/mahout/cf/taste/web/RecommenderServlet.java,140,writer.print("\"},");
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java,361,if (similarity > queue.get(queue.size() - 1).getSimilarity()) {
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,26,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,82,JobConf oldApiConf = new JobConf(initialConf);
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,84,org.apache.hadoop.mapred.FileOutputFormat.setOutputPath(oldApiConf,
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,85,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,86,Job job = new Job(initialConf);
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,107,new SequenceFileValueIterator<VectorWritable>(tmpFile, true, oldApiConf);
core/src/main/java/org/apache/mahout/math/hadoop/MatrixColumnMeansJob.java,130,Mapper<IntWritable, VectorWritable, NullWritable, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,122,xiPath = new Path(getTempPath(), "xi");
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,123,MatrixColumnMeansJob.run(conf, inputPaths[0], getTempPath());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,127,new SSVDSolver(conf, inputPaths, getTempPath(), r, k, p, reduceTasks);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,139,solver.setPcaMeanPath(xiPath);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,144,FileSystem fs = FileSystem.get(getOutputPath().toUri(), conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,24,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,61,String.valueOf(false));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,151,if (computeU) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,152,FileStatus[] uFiles = fs.globStatus(new Path(solver.getUPath()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,153,if (uFiles != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,154,for (FileStatus uf : uFiles) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,155,fs.rename(uf.getPath(), getOutputPath());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,159,if (computeV) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,160,FileStatus[] vFiles = fs.globStatus(new Path(solver.getVPath()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,161,if (vFiles != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,162,for (FileStatus vf : vFiles) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,163,fs.rename(vf.getPath(), getOutputPath());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,256,return endOfData();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,258,element.advanceIndex();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,259,return element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,300,if (index > values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,311,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,314,return OrderedIntDoubleMapping.DEFAULT_VALUE;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,325,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,159,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,161,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,162,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,163,double value = iter.next().get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,219,public Vector logNormalize(double power, double normLength) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,291,return lengthSquared + v.getLengthSquared() - 2 * this.dot(v);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,293,Vector randomlyAccessed;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,296,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,298,randomlyAccessed = this;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,302,randomlyAccessed = v;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,305,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,306,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,307,double value = e.get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,581,return size;
math/src/main/java/org/apache/mahout/math/DenseVector.java,98,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,120,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,126,this.lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,148,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,201,public double getLengthSquared() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,202,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,203,return lengthSquared;
math/src/main/java/org/apache/mahout/math/DenseVector.java,206,double result = 0.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,207,for (double value : values) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,208,result += value * value;
math/src/main/java/org/apache/mahout/math/DenseVector.java,211,lengthSquared = result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,212,return result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,284,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,135,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,228,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,189,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,288,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,324,lengthSquared = -1;
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,57,private WeightedVectorWritable weightedVW;
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,80,weightedVW = new WeightedVectorWritable(1, null);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,94,write(vw, context, maxValueIndex);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,109,write(vw, context, clusterIndex);
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,118,weightedVW.setVector(vw.get());
core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java,119,context.write(clusterId, weightedVW);
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,41,ClusterWritable first = null;
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,43,ClusterWritable cw = iter.next();
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,44,if (first == null) {
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,45,first = cw;
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,47,first.getValue().observe(cw.getValue());
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,51,models.add(first.getValue());
core/src/main/java/org/apache/mahout/clustering/iterator/CIReducer.java,54,context.write(key, first);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,134,qRowValue.set(qRow);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,137,outputQRow(key, qRowValue);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,297,private void outputQRow(Writable key, Writable value) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,298,outputs.getCollector(OUTPUT_Q, null).collect(key, value);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,154,public void setcUHalfSigma(boolean cUHat) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,155,this.cUHalfSigma = cUHat;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,158,public void setcVHalfSigma(boolean cVHat) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,159,this.cVHalfSigma = cVHat;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,519,cUHalfSigma);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,535,cVHalfSigma);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,50,private static final String PROP_U_HALFSIGMA = "ssvd.u.halfsigma";
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,84,if (uHalfSigma) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,85,job.getConfiguration().set(PROP_U_HALFSIGMA, "y");
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,147,if (context.getConfiguration().get(PROP_U_HALFSIGMA) != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,46,private static final String PROP_V_HALFSIGMA = "ssvd.v.halfsigma";
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,113,if (conf.get(PROP_V_HALFSIGMA) != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,160,boolean vHalfSigma) throws ClassNotFoundException,
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,189,if (vHalfSigma) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,190,job.getConfiguration().set(PROP_V_HALFSIGMA, "y");
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,24,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,25,import com.google.common.collect.Maps;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,52,private final Map<Integer, List<VectorWritable>> representativePoints;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,53,private final Map<Integer, Double> stDevs = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,56,private boolean pruned;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,68,public CDbwEvaluator(Map<Integer, List<VectorWritable>> representativePoints,
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,69,List<Cluster> clusters,
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,70,DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,88,measure = ClassUtils.instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY),
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,89,DistanceMeasure.class);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,106,for (ClusterWritable clusterWritable :
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,107,new SequenceFileDirValueIterable<ClusterWritable>(clustersIn, PathType.LIST, PathFilters.logsCRCFilter(), conf)) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,108,Cluster cluster = clusterWritable.getValue();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,109,clusters.add(cluster);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,139,private boolean invalidCluster(Cluster clusterI) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,140,List<VectorWritable> repPts = representativePoints.get(clusterI.getId());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,141,if (repPts.size() < 2) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,142,return true;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,144,for (VectorWritable vw : repPts) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,145,Vector vector = vw.get();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,146,if (!vector.equals(clusterI.getCenter())) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,147,return false;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,150,return true;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,153,private void pruneInvalidClusters() {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,154,if (pruned) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,155,return;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,157,for (Iterator<Cluster> it = clusters.iterator(); it.hasNext();) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,158,Cluster cluster = it.next();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,159,if (invalidCluster(cluster)) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,160,log.info("Pruning cluster Id={}", cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,161,it.remove();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,162,representativePoints.remove(cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,165,pruned = true;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,176,double interDensity(Vector uIJ, int cI, int cJ) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,180,Double stdevI = stDevs.get(cI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,181,Double stdevJ = stDevs.get(cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,184,double avgStd = (stdevI + stdevJ) / 2.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,186,if (measure.distance(uIJ, vwI.get()) <= avgStd) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,191,if (measure.distance(uIJ, vwJ.get()) <= avgStd) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,207,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,219,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,228,double sumI = 0.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,243,sumI += sumJ / r;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,245,return sumI / c;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,255,public double separation() {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,256,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,257,double minDistanceSum = 0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,261,for (int j = 0; j < clusters.size(); j++) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,262,if (i == j) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,263,continue;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,269,for (VectorWritable aRepI : closRepI) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,270,for (VectorWritable aRepJ : closRepJ) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,277,minDistanceSum += minDistance;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,280,return minDistanceSum / (1.0 + interClusterDensity());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,289,public double interClusterDensity() {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,290,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,291,double sum = 0.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,293,for (int i = 0; i < clusters.size(); i++) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,294,Integer cI = clusters.get(i).getId();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,295,List<VectorWritable> repI = representativePoints.get(cI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,296,for (int j = 1; j < clusters.size(); j++) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,297,Integer cJ = clusters.get(j).getId();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,298,if (i == j) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,299,continue;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,301,List<VectorWritable> repJ = representativePoints.get(cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,302,double minDistance = Double.MAX_VALUE; // the distance between the closest representative points
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,303,Vector uIJ = null; // the midpoint between the closest representative points
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,305,for (VectorWritable aRepI : repI) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,306,for (VectorWritable aRepJ : repJ) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,307,Vector closRepI = aRepI.get();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,308,Vector closRepJ = aRepJ.get();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,309,double distance = measure.distance(closRepI, closRepJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,310,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,312,minDistance = distance;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,313,uIJ = closRepI.plus(closRepJ).divide(2);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,317,double stDevI = stDevs.get(cI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,318,double stDevJ = stDevs.get(cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,319,double interDensity = interDensity(uIJ, cI, cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,320,double stdSum = stDevI + stDevJ;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,321,double density = 0.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,322,if (stdSum > 0.0) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,323,density = minDistance * interDensity / stdSum;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,326,if (log.isDebugEnabled()) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,327,log.debug("minDistance[{},{}]={}", new Object[] {cI, cJ, minDistance});
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,328,log.debug("stDev[{}]={}", cI, stDevI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,329,log.debug("stDev[{}]={}", cJ, stDevJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,330,log.debug("interDensity[{},{}]={}", new Object[] {cI, cJ, interDensity});
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,331,log.debug("density[{},{}]={}", new Object[] {cI, cJ, density});
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,334,sum += density;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,337,log.debug("interClusterDensity={}", sum);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,338,return sum;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,24,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,39,public class ClusterEvaluator {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,43,private final Map<Integer, List<VectorWritable>> representativePoints;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,49,private boolean pruned;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,61,public ClusterEvaluator(Map<Integer, List<VectorWritable>> representativePoints,
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,62,List<Cluster> clusters, DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,77,measure = ClassUtils.instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,91,for (ClusterWritable clusterWritable :
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,92,new SequenceFileDirValueIterable<ClusterWritable>(clustersIn, PathType.LIST, PathFilters.logsCRCFilter(), conf)) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,94,clusters.add(cluster);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,107,private boolean invalidCluster(Cluster clusterI) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,108,List<VectorWritable> repPts = representativePoints.get(clusterI.getId());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,109,if (repPts.size() < 2) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,110,return true;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,112,for (VectorWritable vw : repPts) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,113,Vector vector = vw.get();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,114,if (!vector.equals(clusterI.getCenter())) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,115,return false;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,118,return true;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,121,private void pruneInvalidClusters() {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,122,if (pruned) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,123,return;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,125,for (Iterator<Cluster> it = clusters.iterator(); it.hasNext();) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,126,Cluster cluster = it.next();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,127,if (invalidCluster(cluster)) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,128,log.info("Pruning cluster Id={}", cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,129,it.remove();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,130,representativePoints.remove(cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,133,pruned = true;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,142,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,143,double max = 0;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,144,double min = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,147,for (int i = 0; i < clusters.size(); i++) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,148,Cluster clusterI = clusters.get(i);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,149,for (int j = i + 1; j < clusters.size(); j++) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,150,Cluster clusterJ = clusters.get(j);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,151,double d = measure.distance(clusterI.getCenter(), clusterJ.getCenter());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,159,log.info("Inter-Cluster Density = {}", density);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,170,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,174,double max = 0;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,175,double min = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,180,double d = measure.distance(repPoints.get(i).get(), repPoints.get(j).get());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,188,avgDensity += density;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,191,avgDensity = clusters.isEmpty() ? 0 : avgDensity / clusters.size();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,192,log.info("Intra-Cluster Density = {}", avgDensity);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,193,return avgDensity;
math/src/main/java/org/apache/mahout/math/MatrixView.java,96,if (offset[ROW] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,97,throw new IndexException(offset[ROW], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,102,if (offset[COL] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,103,throw new IndexException(offset[COL], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,108,int[] origin = offset.clone();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,122,Path usersFile = hasOption("usersFile") ? inputFile : new Path(getOption("usersFile"));
integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java,481,stmt = conn.prepareStatement(getPreferenceSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,63,line = line.substring(1, line.length() - 1);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,71,result.setQuick(idx, model.getValue(data, idx));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,77,result.setQuick(i, model.getValue(splits[i], i));
core/src/main/java/org/apache/mahout/common/AbstractJob.java,617,if (oozieActionConfXml != null) {
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,86,sumActual += actual;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,87,sumActualSquared += actual * actual;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,88,sumResult += result;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,89,sumResultSquared += result * result;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,90,double absolute = Math.abs(actual - result);
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,91,sumAbsolute += absolute;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,92,sumAbsoluteSquared += absolute * absolute;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,95,double varActual = sumActualSquared - sumActual * sumActual / results.size();
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,96,double varResult = sumResultSquared - sumResult * sumResult / results.size();
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,97,double varAbsolute = sumResultSquared - sumActual * sumResult /  results.size();
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,99,double correlation;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,100,if (varActual * varResult <= 0) {
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,101,correlation = 0.0;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,103,correlation = varAbsolute / Math.sqrt(varActual * varResult);
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,112,NumberFormat decimalFormatter = new DecimalFormat("0.####");
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,114,returnString.append(StringUtils.rightPad("Correlation coefficient", 40)).append(": ").append(
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,115,StringUtils.leftPad(decimalFormatter.format(correlation), 10)).append('\n');
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,116,returnString.append(StringUtils.rightPad("Mean absolute error", 40)).append(": ").append(
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,117,StringUtils.leftPad(decimalFormatter.format(sumAbsolute / results.size()), 10)).append('\n');
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,118,returnString.append(StringUtils.rightPad("Root mean squared error", 40)).append(": ").append(
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,119,StringUtils.leftPad(decimalFormatter.format(Math.sqrt(sumAbsoluteSquared / results.size())),
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,120,10)).append('\n');
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,64,public void classify(Data data, double[] predictions) {
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,73,predictions[index] = tree.classify(data.get(index));
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,91,if (prediction != -1) {
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,96,return sum / cnt;
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,101,if (prediction != -1) {
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,107,return -1; // no prediction available
core/src/main/java/org/apache/mahout/classifier/df/builder/DecisionTreeBuilder.java,123,return new Leaf(-1);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,188,if (code == -1) {
core/src/main/java/org/apache/mahout/classifier/df/node/CategoricalNode.java,36,public CategoricalNode() { }
core/src/main/java/org/apache/mahout/classifier/df/node/CategoricalNode.java,49,return -1;
examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java,115,double[] predictions = new double[test.size()];
examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java,118,sumTestErrM += ErrorEstimate.errorRate(testLabels, predictions);
examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java,121,sumTestErrOne += ErrorEstimate.errorRate(testLabels, predictions);
math/src/main/java/org/apache/mahout/math/list/ObjectArrayList.java,72,elements((T[])new Object[initialCapacity]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,23,import org.apache.commons.cli.Options;
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,48,Options ops = new Options();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,49,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,50,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,51,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,58,formatter.printHelp();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,60,formatter.printFooter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,62,pw.flush();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,66,Options ops = new Options();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,67,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,68,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,69,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,78,pw.flush();
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,93,+ "  Multiple items may be specified by repeating the argument.", true, 1, 100, false, null));
