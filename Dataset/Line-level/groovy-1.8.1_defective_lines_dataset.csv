File,Line_number,SRC
src/main/org/codehaus/groovy/vmplugin/v5/Java5.java,362,Class[] interfaceClasses = clazz.getInterfaces();
src/main/org/codehaus/groovy/vmplugin/v5/Java5.java,365,ret[i] = makeClassNode(cu, interfaceTypes[i], interfaceClasses[i]);
src/main/groovy/lang/Script.java,85,Object boundClosure = binding.getVariable(name);
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,102,return new Double(((Integer) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,119,return new Double(((Integer) receiver).intValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,136,return new Double(((Long) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,153,return new Double(((Long) receiver).doubleValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,170,return new Double(((Float) receiver).doubleValue() / ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,187,return new Double(((Float) receiver).doubleValue() / ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,204,return new Double(((Float) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,213,return new Double(((Float) receiver).doubleValue() / ((Float) args[0]).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,217,return new Double(((Float) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,229,return new Double(((Float) receiver).doubleValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,246,return new Double(((Double) receiver).doubleValue() / ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,255,return new Double(((Double) receiver).doubleValue() / ((Integer) args[0]).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,259,return new Double(((Double) receiver).doubleValue() / ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,271,return new Double(((Double) receiver).doubleValue() / ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,288,return new Double(((Double) receiver).doubleValue() / ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,305,return new Double(((Double) receiver).doubleValue() / ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,111,return new Double(((Double) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,128,return new Double(((Double) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,145,return new Double(((Double) receiver).doubleValue() - ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,162,return new Double(((Double) receiver).doubleValue() - ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,179,return new Double(((Float) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,196,return new Double(((Float) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,213,return new Double(((Float) receiver).doubleValue() - ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,230,return new Double(((Float) receiver).doubleValue() - ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,247,return new Double(((Long) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,264,return new Double(((Long) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,281,return new Long(((Long) receiver).longValue() - ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,298,return new Long(((Long) receiver).longValue() - ((Integer) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,315,return new Double(((Integer) receiver).doubleValue() - ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,332,return new Double(((Integer) receiver).doubleValue() - ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,349,return new Long(((Integer) receiver).longValue() - ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,366,return new Integer(((Integer) receiver).intValue() - ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,113,return new Double(((Double) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,130,return new Double(((Double) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,147,return new Double(((Double) receiver).doubleValue() * ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,164,return new Double(((Double) receiver).doubleValue() * ((Integer) arg).intValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,181,return new Double(((Float) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,198,return new Double(((Float) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,215,return new Double(((Float) receiver).doubleValue() * ((Long) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,232,return new Double(((Float) receiver).doubleValue() * ((Integer) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,249,return new Double(((Long) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,266,return new Double(((Long) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,283,return new Long(((Long) receiver).longValue() * ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,300,return new Long(((Long) receiver).longValue() * ((Integer) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,317,return new Double(((Integer) receiver).doubleValue() * ((Double) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,334,return new Double(((Integer) receiver).doubleValue() * ((Float) arg).doubleValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,351,return new Long(((Integer) receiver).longValue() * ((Long) arg).longValue());
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,368,return new Integer(((Integer) receiver).intValue() * ((Integer) arg).intValue());
src/main/org/codehaus/groovy/ast/expr/ArgumentListExpression.java,50,addExpression(new VariableExpression(parameter.getName()));
src/main/groovy/lang/MetaClassImpl.java,2825,answer = MetaClassHelper.chooseMostGeneralMethodWith1NullParam(methods);
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,386,ClassNode superType = type.getSuperClass();
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,391,return c.getParameters();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,996,if (left instanceof ClassExpression) {
src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java,582,int returnValueIdx = controller.getCompileStack().defineTemporaryVariable("returnValue", type, true);
src/main/org/codehaus/groovy/classgen/asm/StatementWriter.java,587,operandStack.doGroovyCast(returnType);
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,101,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,118,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,135,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,152,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,169,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,186,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,203,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,228,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,245,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,270,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,287,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberDiv.java,304,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,110,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,127,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,144,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,161,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,178,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,195,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,212,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,229,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,246,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,263,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,280,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,297,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,314,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,331,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,348,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMinus.java,365,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,112,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,129,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,146,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,163,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,180,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,197,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,214,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,231,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,248,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,265,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,282,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,299,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,316,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,333,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,350,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberMultiply.java,367,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,118,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,135,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,152,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,169,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,186,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,203,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,220,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,237,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,254,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,271,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,288,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,305,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,322,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,339,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,356,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/runtime/dgmimpl/NumberNumberPlus.java,373,if (checkPojoMetaClass()) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,61,public SimpleGroovyClassDoc(List<String> importedClassesAndPackages, String name, List<LinkArgument> links) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,76,this(importedClassesAndPackages, name, new ArrayList<LinkArgument>());
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,358,Matcher m = NAME_ARGS_REGEX.matcher(type);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDocAssembler.java,81,SimpleGroovyClassDoc currentClassDoc = new SimpleGroovyClassDoc(importedClassesAndPackages, className, links);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDocAssembler.java,124,current = new SimpleGroovyClassDoc(importedClassesAndPackages, className, links);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDocAssembler.java,224,currentClassDoc = new SimpleGroovyClassDoc(importedClassesAndPackages, className, links);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDocAssembler.java,390,return recurseDownImportBranch(child);
src/main/org/codehaus/groovy/groovydoc/GroovyRootDoc.java,23,GroovyClassDoc classNamed(String arg0);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,421,GroovyClassDoc doc = rootDoc.classNamed(slashedName);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,467,doc = rootDoc.classNamed(name);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyRootDoc.java,41,public GroovyClassDoc classNamed(String name) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyRootDoc.java,48,if (shortKey.equals(name)) {
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,415,private ClassLoader getParentLoader() {
src/main/org/codehaus/groovy/util/ReferenceBundle.java,34,private static final ReferenceBundle softReferences, weakReferences;
src/main/groovy/ui/text/TextEditor.java,28,import java.awt.Toolkit;
src/main/groovy/ui/text/TextEditor.java,63,import javax.swing.text.StyledDocument;
src/main/groovy/ui/text/TextEditor.java,80,private static final Pattern TAB_BACK_PATTERN =
src/main/groovy/ui/text/TextEditor.java,81,Pattern.compile("^(([\t])|(    )|(   )|(  )|( ))", Pattern.MULTILINE);
src/main/groovy/ui/text/TextEditor.java,82,private static final Pattern LINE_START =
src/main/groovy/ui/text/TextEditor.java,83,Pattern.compile("^", Pattern.MULTILINE);
src/main/groovy/ui/text/TextEditor.java,88,private static Toolkit toolkit = Toolkit.getDefaultToolkit();
src/main/groovy/ui/text/TextEditor.java,102,private int lastUpdate;
src/main/groovy/ui/text/TextEditor.java,105,new MouseAdapter() {
src/main/groovy/ui/text/TextEditor.java,106,Cursor cursor;
src/main/groovy/ui/text/TextEditor.java,107,public void mouseEntered(MouseEvent me) {
src/main/groovy/ui/text/TextEditor.java,108,if (contains(me.getPoint())) {
src/main/groovy/ui/text/TextEditor.java,109,cursor = getCursor();
src/main/groovy/ui/text/TextEditor.java,110,Cursor curs =
src/main/groovy/ui/text/TextEditor.java,111,Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);
src/main/groovy/ui/text/TextEditor.java,112,getRootPane().getLayeredPane().setCursor(curs);
src/main/groovy/ui/text/TextEditor.java,114,else {
src/main/groovy/ui/text/TextEditor.java,115,getRootPane().getLayeredPane().setCursor(cursor);
src/main/groovy/ui/text/TextEditor.java,118,public void mouseExited(MouseEvent me) {
src/main/groovy/ui/text/TextEditor.java,119,getRootPane().getLayeredPane().setCursor(null);
src/main/groovy/ui/text/TextEditor.java,133,private boolean searchable = true;
src/main/groovy/ui/text/TextEditor.java,169,action = action == null ?
src/main/groovy/ui/text/TextEditor.java,170,aMap.get(DefaultEditorKit.deletePrevCharAction) : null;
src/main/groovy/ui/text/TextEditor.java,185,keyStroke =
src/main/groovy/ui/text/TextEditor.java,186,KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK, false);
src/main/groovy/ui/text/TextEditor.java,194,keyStroke =
src/main/groovy/ui/text/TextEditor.java,195,KeyStroke.getKeyStroke(KeyEvent.VK_F3, KeyEvent.SHIFT_MASK, false);
src/main/groovy/ui/text/TextEditor.java,205,keyStroke =
src/main/groovy/ui/text/TextEditor.java,206,KeyStroke.getKeyStroke(KeyEvent.VK_TAB, KeyEvent.SHIFT_MASK, false);
src/main/groovy/ui/text/TextEditor.java,211,keyStroke =
src/main/groovy/ui/text/TextEditor.java,212,KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.CTRL_MASK, false);
src/main/groovy/ui/text/TextEditor.java,221,keyStroke =
src/main/groovy/ui/text/TextEditor.java,222,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false);
src/main/groovy/ui/text/TextEditor.java,240,StyledDocument doc = (StyledDocument)getDocument();
src/main/groovy/ui/text/TextEditor.java,244,numPages =
src/main/groovy/ui/text/TextEditor.java,245,(int)Math.ceil(getSize().getHeight() / paper.getImageableHeight());
src/main/groovy/ui/text/TextEditor.java,259,throws PrinterException {
src/main/groovy/ui/text/TextEditor.java,261,StyledDocument doc = (StyledDocument)getDocument();
src/main/groovy/ui/text/TextEditor.java,270,getSize().getHeight());
src/main/groovy/ui/text/TextEditor.java,278,((Graphics2D)graphics).translate(paper.getImageableX(), y);
src/main/groovy/ui/text/TextEditor.java,285,((Graphics2D)graphics).translate(0, -y);
src/main/groovy/ui/text/TextEditor.java,287,graphics.setClip(rect.x, 0, rect.width, (int)paper.getHeight() + 100);
src/main/groovy/ui/text/TextEditor.java,292,String name = getName() == null ?
src/main/groovy/ui/text/TextEditor.java,293,System.getProperty("user.name").trim() : getName().trim();
src/main/groovy/ui/text/TextEditor.java,300,((Graphics2D)graphics).drawString(header,
src/main/groovy/ui/text/TextEditor.java,301,(float)(paper.getImageableWidth()/2 - width/2),
src/main/groovy/ui/text/TextEditor.java,302,(float)paper.getImageableY()/2 + fm.getHeight());
src/main/groovy/ui/text/TextEditor.java,304,((Graphics2D)graphics).translate(0, paper.getImageableY() - fm.getHeight());
src/main/groovy/ui/text/TextEditor.java,305,double height = paper.getImageableHeight() + paper.getImageableY()/2;
src/main/groovy/ui/text/TextEditor.java,307,((Graphics2D)graphics).drawString(name,
src/main/groovy/ui/text/TextEditor.java,308,(float)(paper.getImageableWidth()/2 - width/2),
src/main/groovy/ui/text/TextEditor.java,309,(float)height - fm.getHeight()/2);
src/main/groovy/ui/text/TextEditor.java,311,((Graphics2D)graphics).translate(0, fm.getHeight());
src/main/groovy/ui/text/TextEditor.java,313,((Graphics2D)graphics).drawString(pageStr,
src/main/groovy/ui/text/TextEditor.java,314,(float)(paper.getImageableWidth()/2 - width/2),
src/main/groovy/ui/text/TextEditor.java,315,(float)height - fm.getHeight()/2);
src/main/groovy/ui/text/TextEditor.java,322,public boolean getScrollableTracksViewportWidth(){
src/main/groovy/ui/text/TextEditor.java,328,int parentWidth = parent.getSize().width;
src/main/groovy/ui/text/TextEditor.java,329,bool = (parent != null) ?
src/main/groovy/ui/text/TextEditor.java,330,(ui.getPreferredSize(this).width < parent.getSize().width) : true;
src/main/groovy/ui/text/TextEditor.java,357,e.getKeyCode() == KeyEvent.VK_INSERT) {
src/main/groovy/ui/text/TextEditor.java,386,Math.max(size.width, width),
src/main/groovy/ui/text/TextEditor.java,387,Math.max(size.height, height));
src/main/groovy/ui/text/TextEditor.java,389,else {
src/main/groovy/ui/text/TextEditor.java,417,if (isOvertypeMode()) {
src/main/groovy/ui/text/TextEditor.java,418,setCaret(overtypeCaret);
src/main/groovy/ui/text/TextEditor.java,420,else {
src/main/groovy/ui/text/TextEditor.java,421,setCaret(defaultCaret);
src/main/groovy/ui/text/TextEditor.java,434,private class FindAction extends AbstractAction {
src/main/groovy/ui/text/TextEditor.java,446,private class ShiftTabAction extends AbstractAction {
src/main/groovy/ui/text/TextEditor.java,450,Document doc = TextEditor.this.getDocument();
src/main/groovy/ui/text/TextEditor.java,451,int end = Utilities.getRowEnd(TextEditor.this,
src/main/groovy/ui/text/TextEditor.java,452,getSelectionEnd());
src/main/groovy/ui/text/TextEditor.java,455,Element el =
src/main/groovy/ui/text/TextEditor.java,456,Utilities.getParagraphElement(TextEditor.this,
src/main/groovy/ui/text/TextEditor.java,457,getSelectionStart());
src/main/groovy/ui/text/TextEditor.java,464,TAB_BACK_PATTERN.matcher(getSelectedText()).replaceAll("") :
src/main/groovy/ui/text/TextEditor.java,465,getSelectedText().replaceAll("^\t", "");
src/main/groovy/ui/text/TextEditor.java,472,catch (Exception e) {
src/main/groovy/ui/text/TextEditor.java,484,int end = Utilities.getRowEnd(TextEditor.this,
src/main/groovy/ui/text/TextEditor.java,485,getSelectionEnd());
src/main/groovy/ui/text/TextEditor.java,488,Element el =
src/main/groovy/ui/text/TextEditor.java,489,Utilities.getParagraphElement(TextEditor.this,
src/main/groovy/ui/text/TextEditor.java,490,getSelectionStart());
src/main/groovy/ui/text/TextEditor.java,499,else {
src/main/groovy/ui/text/TextEditor.java,504,catch (Exception e) {
src/main/groovy/ui/text/TextEditor.java,521,component.getUI().modelToView(component, getDot());
src/main/groovy/ui/text/TextEditor.java,526,g.getFontMetrics().charWidth('w'),
src/main/groovy/ui/text/TextEditor.java,527,g.getFontMetrics().getHeight());
src/main/groovy/ui/text/TextEditor.java,532,catch (BadLocationException e) {
src/main/groovy/lang/GroovyClassLoader.java,844,File path = new File(decodeFileName(ret.getFile())).getParentFile();
src/main/groovy/servlet/AbstractHttpServlet.java,168,public URLConnection getResourceConnection(String name) throws ResourceException {
src/main/groovy/servlet/AbstractHttpServlet.java,190,url = new URL("file", "", servletContext.getRealPath(tryScriptName));
src/main/groovy/servlet/AbstractHttpServlet.java,198,private boolean isFile(URL ret) {
src/main/groovy/servlet/AbstractHttpServlet.java,199,return ret != null && ret.getProtocol().equals("file");
src/main/groovy/util/Node.java,211,String attribute = property.substring(1);
src/main/groovy/util/Node.java,212,Node n = (Node) object;
src/main/groovy/util/Node.java,213,n.attributes().put(attribute, newValue);
src/main/groovy/time/BaseDuration.java,106,buffer.add((seconds == 0 ? (millis < 0 ? "-0" : "0") : seconds) + "." + DefaultGroovyMethods.padLeft("" + Math.abs(millis), 3, "0")  + " seconds");
src/main/groovy/util/GroovyScriptEngine.java,168,DependencyTracker dt = new DependencyTracker(source, cache);
src/main/groovy/util/GroovyScriptEngine.java,208,String entryName = getPath(clazz);
src/main/groovy/util/GroovyScriptEngine.java,211,Set<String> value = convertToPaths(entry.getValue());
src/main/groovy/util/GroovyScriptEngine.java,220,private String getPath(Class clazz) {
src/main/groovy/util/GroovyScriptEngine.java,224,return classNode.getModule().getContext().getName();
src/main/groovy/util/GroovyScriptEngine.java,227,private Set<String> convertToPaths(Set<String> orig) {
src/main/groovy/util/GroovyScriptEngine.java,232,ret.add(getPath(clazz));
src/main/groovy/util/GroovyScriptEngine.java,470,clazz = groovyLoader.parseClass(DefaultGroovyMethods.getText(conn.getInputStream(), encoding), path);
src/main/org/codehaus/groovy/tools/gse/DependencyTracker.java,46,if (!node.isPrimaryClassNode()) return;
src/main/org/codehaus/groovy/tools/gse/DependencyTracker.java,60,addToCache(node.getSuperClass());
src/main/org/codehaus/groovy/tools/gse/DependencyTracker.java,61,addToCache(node.getInterfaces());
src/main/groovy/servlet/AbstractHttpServlet.java,169,String basePath = servletContext.getRealPath("/");
src/main/groovy/servlet/AbstractHttpServlet.java,170,if (name.startsWith(basePath)) name = name.substring(basePath.length());
src/main/groovy/servlet/GroovyServlet.java,140,error.append(" Script processing failed.");
src/main/groovy/util/GroovyScriptEngine.java,67,private static WeakReference<ThreadLocal<StringSetMap>> dependencyCache = new WeakReference<ThreadLocal<StringSetMap>>(null);
src/main/groovy/util/GroovyScriptEngine.java,69,private static synchronized ThreadLocal<StringSetMap> getDepCache() {
src/main/groovy/util/GroovyScriptEngine.java,70,ThreadLocal<StringSetMap> local = dependencyCache.get();
src/main/groovy/util/GroovyScriptEngine.java,71,if (local != null) return local;
src/main/groovy/util/GroovyScriptEngine.java,72,local = new ThreadLocal<StringSetMap>() {
src/main/groovy/util/GroovyScriptEngine.java,74,protected StringSetMap initialValue() {
src/main/groovy/util/GroovyScriptEngine.java,75,return new StringSetMap();
src/main/groovy/util/GroovyScriptEngine.java,78,dependencyCache = new WeakReference<ThreadLocal<StringSetMap>>(local);
src/main/groovy/util/GroovyScriptEngine.java,79,return local;
src/main/groovy/util/GroovyScriptEngine.java,82,private static WeakReference<ThreadLocal<CompilationUnit>> localCu = new WeakReference<ThreadLocal<CompilationUnit>>(null);
src/main/groovy/util/GroovyScriptEngine.java,84,private static synchronized ThreadLocal<CompilationUnit> getLocalCompilationUnit() {
src/main/groovy/util/GroovyScriptEngine.java,85,ThreadLocal<CompilationUnit> local = localCu.get();
src/main/groovy/util/GroovyScriptEngine.java,87,local = new ThreadLocal<CompilationUnit>();
src/main/groovy/util/GroovyScriptEngine.java,88,localCu = new WeakReference<ThreadLocal<CompilationUnit>>(local);
src/main/groovy/util/GroovyScriptEngine.java,103,private final long lastModified;
src/main/groovy/util/GroovyScriptEngine.java,106,public ScriptCacheEntry(Class clazz, long modified, Set<String> depend) {
src/main/groovy/util/GroovyScriptEngine.java,146,getLocalCompilationUnit().set(cu);
src/main/groovy/util/GroovyScriptEngine.java,147,final StringSetMap cache = getDepCache().get();
src/main/groovy/util/GroovyScriptEngine.java,187,ThreadLocal<CompilationUnit> localCu = getLocalCompilationUnit();
src/main/groovy/util/GroovyScriptEngine.java,188,ThreadLocal<StringSetMap> localCache = getDepCache();
src/main/groovy/util/GroovyScriptEngine.java,195,if (origDep != null) localCache.get().put(".", origDep);
src/main/groovy/util/GroovyScriptEngine.java,199,StringSetMap cache = localCache.get();
src/main/groovy/util/GroovyScriptEngine.java,201,long now = System.currentTimeMillis();
src/main/groovy/util/GroovyScriptEngine.java,212,ScriptCacheEntry cacheEntry = new ScriptCacheEntry(clazz, now, value);
src/main/groovy/util/GroovyScriptEngine.java,216,localCu.set(null);
src/main/groovy/util/GroovyScriptEngine.java,221,ThreadLocal<CompilationUnit> localCu = getLocalCompilationUnit();
src/main/groovy/util/GroovyScriptEngine.java,223,ClassNode classNode = localCu.get().getClassNode(name);
src/main/groovy/util/GroovyScriptEngine.java,544,long now = System.currentTimeMillis();
src/main/groovy/util/GroovyScriptEngine.java,551,URLConnection conn = rc.getResourceConnection(scriptName);
src/main/groovy/util/GroovyScriptEngine.java,553,long lastMod = ((conn.getLastModified() / 1000) + 1) * 1000 - 1;
src/main/groovy/util/GroovyScriptEngine.java,555,forceClose(conn);
src/main/groovy/util/GroovyScriptEngine.java,558,ScriptCacheEntry newEntry = new ScriptCacheEntry(depEntry.scriptClass, lastMod, depEntry.dependencies);
src/main/groovy/util/GroovyScriptEngine.java,559,scriptCache.put(scriptName, newEntry);
src/main/org/codehaus/groovy/classgen/Verifier.java,1215,if (node.isInterface()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,1216,if (node.isDerivedFrom(testNode)) return true;
src/main/org/codehaus/groovy/classgen/Verifier.java,1218,if (node.implementsInterface(testNode)) return true;
src/main/groovy/lang/Closure.java,394,return DefaultTypeTransformation.castToBoolean(call(candidate));
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,806,boolean syntheticPublic = ((modifiers & Opcodes.ACC_SYNTHETIC) != 0);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,807,modifiers &= ~Opcodes.ACC_SYNTHETIC;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,808,MethodNode methodNode = new MethodNode(name, modifiers, returnType, parameters, exceptions, code);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,866,Statement code = statementList(node);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,870,ConstructorNode constructorNode = classNode.addConstructor(modifiers, parameters, exceptions, code);
src/main/org/codehaus/groovy/classgen/InnerClassVisitor.java,212,super.visitConstructorOrMethod(node, isConstructor);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,352,int resultValueId = compileStack.defineTemporaryVariable("$result", rightType, true);
src/main/groovy/util/GroovyScriptEngine.java,548,long nextPossibleRecompilationTime = depEntry.lastModified + config.getMinimumRecompilationInterval();
src/main/groovy/util/GroovyScriptEngine.java,549,if (nextPossibleRecompilationTime > now) continue;
src/main/groovy/util/GroovyScriptEngine.java,313,String message = "Cannot open URL: " + scriptURL;
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,62,import java.util.Collections;
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,63,import java.util.HashMap;
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,64,import java.util.Map;
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,264,Map<String, Closure> closures = new HashMap<String, Closure>();
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,267,closures.put(name, new MethodClosure(scriptObject, name));
src/main/org/codehaus/groovy/jsr223/GroovyScriptEngineImpl.java,271,globalClosures.putAll(closures);
src/main/groovy/util/GroovyScriptEngine.java,462,String path = conn.getURL().getPath();
src/main/org/codehaus/groovy/control/SourceUnit.java,111,this(source.getPath(), new URLReaderSource(source, configuration), configuration, loader, er);
src/main/org/codehaus/groovy/runtime/callsite/PerInstancePojoMetaClassSite.java,33,if (info.hasPerInstanceMetaClasses()) {
src/main/org/codehaus/groovy/runtime/callsite/PerInstancePojoMetaClassSite.java,34,try {
src/main/org/codehaus/groovy/runtime/callsite/PerInstancePojoMetaClassSite.java,35,return InvokerHelper.getMetaClass(receiver).invokeMethod(receiver, name, args);
src/main/org/codehaus/groovy/runtime/callsite/PerInstancePojoMetaClassSite.java,37,throw ScriptBytecodeAdapter.unwrap(gre);
src/main/org/codehaus/groovy/runtime/callsite/PerInstancePojoMetaClassSite.java,40,return CallSiteArray.defaultCall(this, receiver, args);
src/main/org/codehaus/groovy/classgen/Verifier.java,169,addCovariantMethods(node);
src/main/org/codehaus/groovy/runtime/CurriedClosure.java,104,System.arraycopy(arguments, 0, newCurriedParams, 0, index);
src/main/org/codehaus/groovy/runtime/CurriedClosure.java,105,System.arraycopy(curriedParams, 0, newCurriedParams, index, curriedParams.length);
src/main/org/codehaus/groovy/runtime/CurriedClosure.java,107,System.arraycopy(arguments, index, newCurriedParams, curriedParams.length + index, arguments.length - index);
src/main/org/codehaus/groovy/ast/ClassHelper.java,30,import java.util.WeakHashMap;
src/main/org/codehaus/groovy/ast/ClassHelper.java,357,static Map<Class, SoftReference<ClassNode>> classCache = new WeakHashMap<Class,SoftReference<ClassNode>>();
src/main/groovy/sql/Sql.java,193,private static final Pattern NAMED_QUERY_PATTERN = Pattern.compile("(?::|\\?(\\d?)\\.?)(\\w*)");
src/main/groovy/sql/Sql.java,3667,int index = (indexStr == null || indexStr.length() == 0) ? 0 : new Integer(indexStr) - 1;
src/main/groovy/sql/Sql.java,3669,indexPropList.add(new Tuple(new Object[]{index, prop.length() == 0 ? "<this>" : prop}));
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,82,String[] transformClassNames = getTransformClassNames(transformClassAnnotation);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,83,Class[] transformClasses = getTransformClasses(transformClassAnnotation);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,85,if(transformClassNames.length == 0 && transformClasses.length == 0) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,86,source.getErrorCollector().addError(new SimpleMessage("@GroovyASTTransformationClass in " +
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,90,if(transformClassNames.length > 0 && transformClasses.length > 0) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,91,source.getErrorCollector().addError(new SimpleMessage("@GroovyASTTransformationClass in " +
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,92,annotation.getClassNode().getName() +  " should specify transforms only by class names or by classes and not by both", source));
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,107,for (Class klass : transformClasses) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,136,private String[] getTransformClassNames(Annotation transformClassAnnotation) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,139,return (String[]) valueMethod.invoke(transformClassAnnotation);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,141,source.addException(e);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,142,return new String[0];
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,146,private Class[] getTransformClasses(Annotation transformClassAnnotation) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,147,try {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,149,return (Class[]) classesMethod.invoke(transformClassAnnotation);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,152,return new Class[0];
src/main/groovy/util/Node.java,389,answer.addAll(children);
src/main/groovy/util/Node.java,416,answer.add(childNode);
src/main/groovy/util/Node.java,417,List children = childNode.getDirectChildren();
src/main/groovy/util/Node.java,418,nextLevelChildren.addAll(children);
src/main/groovy/json/JsonTokenType.java,38,STRING          ( "a string",                           Pattern.compile("\"([^\"\\\\]*|\\\\[\"\\\\bfnrt\\/]|\\\\u[0-9a-fA-F]{4})*\"", Pattern.DOTALL));
src/main/groovy/sql/SqlWhereVisitor.java,52,boolean leaf = (right instanceof ConstantExpression);
src/main/groovy/sql/SqlWhereVisitor.java,86,case Types.COMPARE_EQUAL :
src/main/groovy/sql/SqlWhereVisitor.java,88,case Types.LOGICAL_AND :
src/main/groovy/sql/SqlWhereVisitor.java,90,case Types.LOGICAL_OR :
src/main/groovy/sql/SqlWhereVisitor.java,92,default :
src/main/groovy/sql/Sql.java,3438,abstract Statement execute(Connection conn, String sql) throws SQLException;
src/main/groovy/sql/Sql.java,3444,CreatePreparedStatementCommand(int returnGeneratedKeys) {
src/main/groovy/sql/Sql.java,3448,PreparedStatement execute(Connection connection, String sql) throws SQLException {
src/main/groovy/sql/Sql.java,3456,boolean appearsLikeStoredProc(String sql) {
src/main/groovy/sql/Sql.java,3464,Statement execute(Connection conn, String sql) throws SQLException {
src/main/groovy/sql/Sql.java,3475,AbstractQueryCommand(String sql) {
src/main/groovy/sql/Sql.java,3487,final ResultSet execute() throws SQLException {
src/main/groovy/sql/Sql.java,3488,connection = createConnection();
src/main/groovy/sql/Sql.java,3489,setInternalConnection(connection);
src/main/groovy/sql/Sql.java,3509,public final void closeResources(){
src/main/groovy/sql/Sql.java,3510,Sql.this.closeResources(connection, statement);
src/main/groovy/sql/Sql.java,3519,public final void closeResources(ResultSet rs) {
src/main/groovy/sql/Sql.java,3520,Sql.this.closeResources(connection, statement, rs);
src/main/groovy/sql/Sql.java,3530,protected abstract ResultSet runQuery(Connection connection) throws SQLException;
src/main/groovy/sql/Sql.java,3533,protected final class PreparedQueryCommand extends AbstractQueryCommand {
src/main/groovy/sql/Sql.java,3536,PreparedQueryCommand(String sql, List<Object> queryParams) {
src/main/groovy/sql/Sql.java,3549,protected final class QueryCommand extends AbstractQueryCommand {
src/main/groovy/sql/Sql.java,3551,QueryCommand(String sql) {
src/main/groovy/sql/Sql.java,3607,public ExtractIndexAndSql(String sql) {
src/main/groovy/sql/Sql.java,3611,public List<Tuple> getIndexPropList() {
src/main/groovy/sql/Sql.java,3615,public String getNewSql() {
src/main/groovy/sql/Sql.java,3619,public ExtractIndexAndSql invoke() {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,17,package org.codehaus.groovy.transform;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,19,import org.codehaus.groovy.ast.*;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,20,import org.codehaus.groovy.classgen.GeneratorContext;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,21,import org.codehaus.groovy.control.*;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,22,import org.codehaus.groovy.control.messages.SimpleMessage;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,23,import org.codehaus.groovy.control.messages.WarningMessage;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,25,import groovy.lang.GroovyClassLoader;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,27,import java.io.BufferedReader;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,28,import java.io.IOException;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,29,import java.io.InputStreamReader;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,30,import java.net.URL;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,31,import java.util.*;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,54,public final class ASTTransformationVisitor extends ClassCodeVisitorSupport {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,56,private CompilePhase phase;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,57,private SourceUnit source;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,58,private List<ASTNode[]> targetNodes;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,59,private Map<ASTNode, List<ASTTransformation>> transforms;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,60,private Map<Class<? extends ASTTransformation>, ASTTransformation> transformInstances;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,61,private static CompilationUnit compUnit;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,62,private static Set<String> globalTransformNames = new HashSet<String>();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,64,private ASTTransformationVisitor(CompilePhase phase) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,65,this.phase = phase;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,68,protected SourceUnit getSourceUnit() {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,69,return source;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,83,public void visitClass(ClassNode classNode) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,85,Map<Class<? extends ASTTransformation>, Set<ASTNode>> baseTransforms = classNode.getTransforms(phase);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,86,if (!baseTransforms.isEmpty()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,87,transformInstances = new HashMap<Class<? extends ASTTransformation>, ASTTransformation>();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,88,for (Class<? extends ASTTransformation> transformClass : baseTransforms.keySet()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,89,try {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,90,transformInstances.put(transformClass, transformClass.newInstance());
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,92,source.getErrorCollector().addError(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,93,new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,95,, //+ " declared by " + annotation.getClassNode().getName(),
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,96,source));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,98,source.getErrorCollector().addError(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,99,new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,101,, //+ " declared by " + annotation.getClassNode().getName(),
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,102,source));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,109,transforms = new HashMap<ASTNode, List<ASTTransformation>>();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,110,for (Map.Entry<Class<? extends ASTTransformation>, Set<ASTNode>> entry : baseTransforms.entrySet()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,111,for (ASTNode node : entry.getValue()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,112,List<ASTTransformation> list = transforms.get(node);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,113,if (list == null)  {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,114,list = new ArrayList<ASTTransformation>();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,115,transforms.put(node, list);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,117,list.add(transformInstances.get(entry.getKey()));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,121,targetNodes = new LinkedList<ASTNode[]>();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,124,super.visitClass(classNode);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,127,for (ASTNode[] node : targetNodes) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,128,for (ASTTransformation snt : transforms.get(node[0])) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,129,snt.visit(node, source);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,140,public void visitAnnotations(AnnotatedNode node) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,141,super.visitAnnotations(node);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,142,for (AnnotationNode annotation : node.getAnnotations()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,143,if (transforms.containsKey(annotation)) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,144,targetNodes.add(new ASTNode[]{annotation, node});
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,149,public static void addPhaseOperations(final CompilationUnit compilationUnit) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,150,addGlobalTransforms(compilationUnit);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,152,compilationUnit.addPhaseOperation(new CompilationUnit.PrimaryClassNodeOperation() {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,153,public void call(SourceUnit source, GeneratorContext context, ClassNode classNode) throws CompilationFailedException {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,154,ASTTransformationCollectorCodeVisitor collector =
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,155,new ASTTransformationCollectorCodeVisitor(source, compilationUnit.getTransformLoader());
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,156,collector.visitClass(classNode);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,159,for (CompilePhase phase : CompilePhase.values()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,160,final ASTTransformationVisitor visitor = new ASTTransformationVisitor(phase);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,161,switch (phase) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,162,case INITIALIZATION:
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,163,case PARSING:
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,164,case CONVERSION:
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,166,break;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,168,default:
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,169,compilationUnit.addPhaseOperation(new CompilationUnit.PrimaryClassNodeOperation() {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,170,public void call(SourceUnit source, GeneratorContext context, ClassNode classNode) throws CompilationFailedException {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,171,visitor.source = source;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,172,visitor.visitClass(classNode);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,175,break;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,181,public static void addGlobalTransformsAfterGrab() {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,182,doAddGlobalTransforms(compUnit, false);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,185,public static void addGlobalTransforms(CompilationUnit compilationUnit) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,186,compUnit = compilationUnit;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,187,doAddGlobalTransforms(compilationUnit, true);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,190,private static void doAddGlobalTransforms(CompilationUnit compilationUnit, boolean isFirstScan) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,191,GroovyClassLoader transformLoader = compilationUnit.getTransformLoader();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,192,Map<String, URL> transformNames = new LinkedHashMap<String, URL>();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,193,try {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,194,Enumeration<URL> globalServices = transformLoader.getResources("META-INF/services/org.codehaus.groovy.transform.ASTTransformation");
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,195,while (globalServices.hasMoreElements()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,196,URL service = globalServices.nextElement();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,197,String className;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,198,BufferedReader svcIn = new BufferedReader(new InputStreamReader(service.openStream()));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,199,try {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,200,className = svcIn.readLine();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,202,compilationUnit.getErrorCollector().addError(new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,204,+ service.toExternalForm() + " because of exception " + ioe.toString(), null));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,205,continue;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,207,while (className != null) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,208,if (!className.startsWith("#") && className.length() > 0) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,209,if (transformNames.containsKey(className)) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,210,if (!service.equals(transformNames.get(className))) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,211,compilationUnit.getErrorCollector().addWarning(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,212,WarningMessage.POSSIBLE_ERRORS,
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,215,+ " and "
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,217,+ " - the former definition will be used and the latter ignored.",
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,218,null,
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,219,null);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,223,transformNames.put(className, service);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,226,try {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,227,className = svcIn.readLine();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,229,compilationUnit.getErrorCollector().addError(new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,231,+ service.toExternalForm() + " because of exception " + ioe.toString(), null));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,233,continue;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,239,compilationUnit.getErrorCollector().addError(new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,241,null));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,243,try {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,244,Class.forName("java.lang.annotation.Annotation"); // test for 1.5 JVM
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,247,StringBuffer sb = new StringBuffer();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,248,sb.append("Global ASTTransformations are not enabled in retro builds of groovy.\n");
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,249,sb.append("The following transformations will be ignored:");
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,250,for (Map.Entry<String, URL> entry : transformNames.entrySet()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,251,sb.append('\t');
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,252,sb.append(entry.getKey());
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,253,sb.append('\n');
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,255,compilationUnit.getErrorCollector().addWarning(new WarningMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,256,WarningMessage.POSSIBLE_ERRORS, sb.toString(), null, null));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,257,return;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,262,if(isFirstScan) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,263,for (Map.Entry<String, URL> entry : transformNames.entrySet()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,264,globalTransformNames.add(entry.getKey());
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,266,addPhaseOperationsForGlobalTransforms(compilationUnit, transformNames, isFirstScan);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,268,Iterator<Map.Entry<String, URL>> it = transformNames.entrySet().iterator();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,269,while(it.hasNext()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,270,Map.Entry<String, URL> entry = it.next();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,271,if(!globalTransformNames.add(entry.getKey())) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,273,it.remove();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,276,addPhaseOperationsForGlobalTransforms(compilationUnit, transformNames, isFirstScan);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,280,private static void addPhaseOperationsForGlobalTransforms(CompilationUnit compilationUnit,
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,281,Map<String, URL> transformNames, boolean isFirstScan) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,282,GroovyClassLoader transformLoader = compilationUnit.getTransformLoader();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,283,for (Map.Entry<String, URL> entry : transformNames.entrySet()) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,284,try {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,285,Class gTransClass = transformLoader.loadClass(entry.getKey(), false, true, false);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,287,GroovyASTTransformation transformAnnotation = (GroovyASTTransformation) gTransClass.getAnnotation(GroovyASTTransformation.class);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,288,if (transformAnnotation == null) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,289,compilationUnit.getErrorCollector().addWarning(new WarningMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,290,WarningMessage.POSSIBLE_ERRORS,
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,293,+ " the global tranform associated with it may fail and cause the compilation to fail.",
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,294,null,
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,295,null));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,296,continue;
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,298,if (ASTTransformation.class.isAssignableFrom(gTransClass)) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,299,final ASTTransformation instance = (ASTTransformation)gTransClass.newInstance();
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,300,CompilationUnit.SourceUnitOperation suOp = new CompilationUnit.SourceUnitOperation() {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,301,public void call(SourceUnit source) throws CompilationFailedException {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,302,instance.visit(new ASTNode[] {source.getAST()}, source);
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,305,if(isFirstScan) {
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,306,compilationUnit.addPhaseOperation(suOp, transformAnnotation.phase().getPhaseNumber());
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,308,compilationUnit.addNewPhaseOperation(suOp, transformAnnotation.phase().getPhaseNumber());
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,311,compilationUnit.getErrorCollector().addError(new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,313,+ entry.getValue().toExternalForm() + " is not an ASTTransformation.", null));
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,316,compilationUnit.getErrorCollector().addError(new SimpleMessage(
src/main/org/codehaus/groovy/transform/ASTTransformationVisitor.java,318,+ entry.getValue().toExternalForm() + "  because of exception " + e.toString(), null));
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,98,verifyClassAndAddTransform(annotation, klass);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,108,verifyClassAndAddTransform(annotation, klass);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,112,private void verifyClassAndAddTransform(AnnotationNode annotation, Class klass) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,113,if (ASTTransformation.class.isAssignableFrom(klass)) {
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,114,classNode.addTransform(klass, annotation);
src/main/org/codehaus/groovy/transform/ASTTransformationCollectorCodeVisitor.java,116,source.getErrorCollector().addError(new SimpleMessage("Not an ASTTransformation: " +
src/main/groovy/lang/MetaClassImpl.java,492,int index = Arrays.binarySearch(mopMethods, mopName, CachedClass.CachedMethodComparatorWithString.INSTANCE);
src/main/groovy/lang/MetaClassImpl.java,493,if (index >= 0) {
src/main/groovy/lang/MetaClassImpl.java,494,int from = index;
src/main/groovy/lang/MetaClassImpl.java,496,from--;
src/main/groovy/lang/MetaClassImpl.java,497,int to = index;
src/main/groovy/lang/MetaClassImpl.java,499,to++;
src/main/groovy/lang/MetaClassImpl.java,501,int matchingMethod = findMatchingMethod(mopMethods, from, to, method);
src/main/groovy/lang/MetaClassImpl.java,502,if (matchingMethod != -1) {
src/main/groovy/lang/MetaClassImpl.java,503,e.methodsForSuper = mopMethods[matchingMethod];
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,523,printType(out, type);
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,147,if (type == Types.EQUAL) {
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,663,val = "\"" + escapeStringAnnotationValue(constValue.toString()) + "\"";
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,730,private static String escapeStringAnnotationValue(String value) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,60,ClassNode cNode = (ClassNode) parent;
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,61,if (cNode.isInterface()) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,62,addError("Error processing interface '" + cNode.getName() +
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,64,return;
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,66,ClassNode sNode = cNode.getSuperClass();
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,67,for (ConstructorNode cn : sNode.getDeclaredConstructors()) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,68,Parameter[] params = cn.getParameters();
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,69,if (cn.isPrivate()) continue;
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,70,Parameter[] pcopy = new Parameter[params.length];
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,71,List<Expression> args = new ArrayList<Expression>();
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,72,for (int i = 0; i < params.length; i++) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,73,Parameter p = params[i];
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,74,pcopy[i] = p.hasInitialExpression() ?
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,75,new Parameter(p.getType(), p.getName(), p.getInitialExpression()) :
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,76,new Parameter(p.getType(), p.getName());
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,77,args.add(new VariableExpression(p.getName(), p.getType()));
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,79,if (isClashing(cNode, pcopy)) continue;
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,80,BlockStatement body = new BlockStatement();
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,81,body.addStatement(new ExpressionStatement(new ConstructorCallExpression(ClassNode.SUPER, new ArgumentListExpression(args))));
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,82,cNode.addConstructor(cn.getModifiers(), pcopy, cn.getExceptions(), body);
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,87,private boolean isClashing(ClassNode cNode, Parameter[] pcopy) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,88,for (ConstructorNode cn : cNode.getDeclaredConstructors()) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,89,if (conflictingTypes(pcopy, cn.getParameters())) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,96,private boolean conflictingTypes(Parameter[] pcopy, Parameter[] parameters) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,97,if (pcopy.length != parameters.length) return false;
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,98,for (int i = 0; i < pcopy.length; i++) {
src/main/org/codehaus/groovy/transform/InheritConstructorsASTTransformation.java,99,if (!pcopy[i].getType().equals(parameters[i].getType())) {
src/main/groovy/lang/MetaClassImpl.java,1962,classPropertyIndexForSuper = classPropertyIndex;
src/main/groovy/lang/MetaClassImpl.java,1963,final SingleKeyHashMap cPI = classPropertyIndex.getNotNull(theCachedClass);
src/main/groovy/lang/MetaClassImpl.java,1964,for (Iterator interfaceIter = interfaces.iterator(); interfaceIter.hasNext();) {
src/main/groovy/lang/MetaClassImpl.java,1965,CachedClass iclass = (CachedClass) interfaceIter.next();
src/main/groovy/lang/MetaClassImpl.java,1966,SingleKeyHashMap iPropertyIndex = cPI;
src/main/groovy/lang/MetaClassImpl.java,1968,classPropertyIndex.put(iclass, iPropertyIndex);
src/main/groovy/lang/MetaClassImpl.java,1970,classPropertyIndex.put(ReflectionCache.OBJECT_CLASS, cPI);
src/main/groovy/lang/MetaClassImpl.java,82,import java.util.ArrayList;
src/main/groovy/lang/MetaClassImpl.java,83,import java.util.Arrays;
src/main/groovy/lang/MetaClassImpl.java,84,import java.util.Collection;
src/main/groovy/lang/MetaClassImpl.java,85,import java.util.Collections;
src/main/groovy/lang/MetaClassImpl.java,86,import java.util.Comparator;
src/main/groovy/lang/MetaClassImpl.java,87,import java.util.HashMap;
src/main/groovy/lang/MetaClassImpl.java,88,import java.util.HashSet;
src/main/groovy/lang/MetaClassImpl.java,89,import java.util.Iterator;
src/main/groovy/lang/MetaClassImpl.java,90,import java.util.LinkedList;
src/main/groovy/lang/MetaClassImpl.java,91,import java.util.List;
src/main/groovy/lang/MetaClassImpl.java,92,import java.util.Map;
src/main/groovy/lang/MetaClassImpl.java,93,import java.util.Set;
src/main/groovy/lang/MetaClassImpl.java,1967,addFields(iclass, iPropertyIndex);
src/main/groovy/lang/MetaClassImpl.java,1978,Set interfaces = theCachedClass.getInterfaces();
src/main/groovy/lang/MetaClassImpl.java,1987,inheritStaticInterfaceFields(superClasses, interfaces);
src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,520,throw new SecurityException("Method definitions are not allowed");
src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,644,throw new SecurityException(clazz.getSimpleName() + "s are not allowed");
src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,646,throw new SecurityException(clazz.getSimpleName() + "s are not allowed");
src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,650,throw new SecurityException("Expression [" + clazz.getSimpleName() + "] is not allowed");
src/main/groovy/sql/GroovyRowResult.java,50,Object value = result.get(property);
src/main/groovy/sql/GroovyRowResult.java,52,return value;
src/main/groovy/sql/GroovyRowResult.java,60,return value;
src/main/groovy/sql/GroovyRowResult.java,156,public Object remove(Object key) {
src/main/groovy/sql/GroovyRowResult.java,157,return result.remove(key);
src/main/groovy/sql/GroovyRowResult.java,55,return null;
src/main/groovy/sql/GroovyRowResult.java,57,String propertyUpper = property.toUpperCase();
src/main/groovy/sql/GroovyRowResult.java,58,value = result.get(propertyUpper);
src/main/groovy/sql/GroovyRowResult.java,63,return null;
src/main/groovy/sql/GroovyRowResult.java,93,return (obj);
src/main/groovy/sql/GroovyRowResult.java,101,return (result.toString());
src/main/groovy/sql/GroovyRowResult.java,114,return result.containsKey(key);
src/main/groovy/sql/GroovyRowResult.java,132,else
src/main/groovy/sql/GroovyRowResult.java,133,return null;
src/main/groovy/xml/dom/DOMCategory.java,261,self.getFirstChild().setNodeValue(value);
src/main/groovy/servlet/TemplateServlet.java,26,import java.io.FileReader;
src/main/groovy/servlet/TemplateServlet.java,27,import java.io.IOException;
src/main/groovy/servlet/TemplateServlet.java,132,if (file == null) {
src/main/groovy/servlet/TemplateServlet.java,133,throw new NullPointerException("file");
src/main/groovy/servlet/TemplateServlet.java,144,this.lastModified = file.lastModified();
src/main/groovy/servlet/TemplateServlet.java,145,this.length = file.length();
src/main/groovy/servlet/TemplateServlet.java,156,if (file == null) {
src/main/groovy/servlet/TemplateServlet.java,157,throw new NullPointerException("file");
src/main/groovy/servlet/TemplateServlet.java,159,if (file.lastModified() != this.lastModified) {
src/main/groovy/servlet/TemplateServlet.java,160,return false;
src/main/groovy/servlet/TemplateServlet.java,162,if (file.length() != this.length) {
src/main/groovy/servlet/TemplateServlet.java,163,return false;
src/main/groovy/servlet/TemplateServlet.java,181,private final Map cache;
src/main/groovy/servlet/TemplateServlet.java,201,this.cache = new WeakHashMap();
src/main/groovy/servlet/TemplateServlet.java,224,protected Template getTemplate(File file) throws ServletException {
src/main/groovy/servlet/TemplateServlet.java,226,String key = file.getAbsolutePath();
src/main/groovy/servlet/TemplateServlet.java,244,log("Cached template needs recompilation!");
src/main/groovy/servlet/TemplateServlet.java,249,log("Cache miss.");
src/main/groovy/servlet/TemplateServlet.java,256,if (template == null) {
src/main/groovy/servlet/TemplateServlet.java,257,if (verbose) {
src/main/groovy/servlet/TemplateServlet.java,258,log("Creating new template from file " + file + "...");
src/main/groovy/servlet/TemplateServlet.java,264,Reader reader = null;
src/main/groovy/servlet/TemplateServlet.java,265,try {
src/main/groovy/servlet/TemplateServlet.java,266,reader = fileEncoding == null ? new FileReader(file) : new InputStreamReader(new FileInputStream(file), fileEncoding);
src/main/groovy/servlet/TemplateServlet.java,267,template = engine.createTemplate(reader);
src/main/groovy/servlet/TemplateServlet.java,269,throw new ServletException("Creation of template failed: " + e, e);
src/main/groovy/servlet/TemplateServlet.java,271,if (reader != null) {
src/main/groovy/servlet/TemplateServlet.java,272,try {
src/main/groovy/servlet/TemplateServlet.java,273,reader.close();
src/main/groovy/servlet/TemplateServlet.java,281,log("Created and added template to cache. [key=" + key + "]");
src/main/groovy/servlet/TemplateServlet.java,289,throw new ServletException("Template is null? Should not happen here!");
src/main/groovy/servlet/TemplateServlet.java,378,String name = file.getName();
src/main/groovy/servlet/TemplateServlet.java,379,if (!file.exists()) {
src/main/groovy/servlet/TemplateServlet.java,380,response.sendError(HttpServletResponse.SC_NOT_FOUND);
src/main/groovy/servlet/TemplateServlet.java,381,return; // throw new IOException(file.getAbsolutePath());
src/main/groovy/servlet/TemplateServlet.java,383,if (!file.canRead()) {
src/main/groovy/servlet/TemplateServlet.java,384,response.sendError(HttpServletResponse.SC_FORBIDDEN, "Can not read \"" + name + "\"!");
src/main/groovy/servlet/TemplateServlet.java,385,return; // throw new IOException(file.getAbsolutePath());
src/main/groovy/servlet/TemplateServlet.java,391,long getMillis = System.currentTimeMillis();
src/main/groovy/servlet/TemplateServlet.java,392,Template template = getTemplate(file);
src/main/groovy/servlet/TemplateServlet.java,393,getMillis = System.currentTimeMillis() - getMillis;
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,42,import java.util.regex.Matcher;
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,232,String description = calcThenSetPackageDescription(src, filename, packageDoc);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,233,calcThenSetSummary(description, packageDoc);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,236,private String calcThenSetPackageDescription(String src, String filename, SimpleGroovyPackageDoc packageDoc) {
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,245,description = replaceTags(description, packageDoc);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,246,packageDoc.setDescription(description);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,251,private String replaceTags(String orig, SimpleGroovyPackageDoc packageDoc) {
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,255,result = replaceAllTags(result, "", "", SimpleGroovyClassDoc.LINK_REGEX, packageDoc);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,258,result = replaceAllTags(result, "<TT>", "</TT>", SimpleGroovyClassDoc.CODE_REGEX, packageDoc);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,261,result = replaceAllTags(result + "@endMarker", "<DL><DT><B>$1:</B></DT><DD>", "</DD></DL>", SimpleGroovyClassDoc.TAG_REGEX, packageDoc);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,269,private String replaceAllTags(String self, String s1, String s2, Pattern regex, SimpleGroovyPackageDoc packageDoc) {
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,270,Matcher matcher = regex.matcher(self);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,271,if (matcher.find()) {
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,272,matcher.reset();
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,273,StringBuffer sb = new StringBuffer();
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,274,while (matcher.find()) {
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,275,String tagname = matcher.group(1);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,276,if (tagname.equals("see") || tagname.equals("link")) {
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,277,matcher.appendReplacement(sb, s1 + SimpleGroovyClassDoc.getDocUrl(
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,278,SimpleGroovyClassDoc.encodeSpecialSymbols(matcher.group(2)), false, links, packageDoc.getRelativeRootPath(), rootDoc, null) + s2);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,280,matcher.appendReplacement(sb, s1 + SimpleGroovyClassDoc.encodeSpecialSymbols(matcher.group(2)) + s2);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,283,matcher.appendTail(sb);
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,284,return sb.toString();
src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java,286,return self;
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,194,StringBuffer sb = new StringBuffer();
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,357,if (type.indexOf("(") < 0) return type;
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,440,if (!relativeRoot.endsWith("/")) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,473,Class c = null;
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,716,if (!tagname.equals("interface")) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,718,if (tagname.equals("link")) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,719,content = getDocUrl(content);
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,741,if (!tagname.equals("interface")) {
src/main/org/codehaus/groovy/tools/groovydoc/SimpleGroovyClassDoc.java,743,if ("see".equals(tagname)) {
src/main/groovy/util/FactoryBuilderSupport.java,17,package groovy.util;
src/main/groovy/util/FactoryBuilderSupport.java,19,import groovy.lang.Binding;
src/main/groovy/util/FactoryBuilderSupport.java,20,import groovy.lang.Closure;
src/main/groovy/util/FactoryBuilderSupport.java,21,import groovy.lang.DelegatingMetaClass;
src/main/groovy/util/FactoryBuilderSupport.java,22,import groovy.lang.GroovyClassLoader;
src/main/groovy/util/FactoryBuilderSupport.java,23,import groovy.lang.MetaClass;
src/main/groovy/util/FactoryBuilderSupport.java,24,import groovy.lang.MissingMethodException;
src/main/groovy/util/FactoryBuilderSupport.java,25,import groovy.lang.MissingPropertyException;
src/main/groovy/util/FactoryBuilderSupport.java,26,import groovy.lang.Reference;
src/main/groovy/util/FactoryBuilderSupport.java,27,import groovy.lang.Script;
src/main/groovy/util/FactoryBuilderSupport.java,28,import org.codehaus.groovy.runtime.InvokerHelper;
src/main/groovy/util/FactoryBuilderSupport.java,29,import org.codehaus.groovy.runtime.MetaClassHelper;
src/main/groovy/util/FactoryBuilderSupport.java,30,import org.codehaus.groovy.runtime.metaclass.MissingMethodExceptionNoStack;
src/main/groovy/util/FactoryBuilderSupport.java,32,import java.lang.reflect.InvocationTargetException;
src/main/groovy/util/FactoryBuilderSupport.java,33,import java.lang.reflect.Method;
src/main/groovy/util/FactoryBuilderSupport.java,34,import java.lang.reflect.Modifier;
src/main/groovy/util/FactoryBuilderSupport.java,35,import java.util.ArrayList;
src/main/groovy/util/FactoryBuilderSupport.java,36,import java.util.Collections;
src/main/groovy/util/FactoryBuilderSupport.java,37,import java.util.HashMap;
src/main/groovy/util/FactoryBuilderSupport.java,38,import java.util.LinkedHashMap;
src/main/groovy/util/FactoryBuilderSupport.java,39,import java.util.LinkedList;
src/main/groovy/util/FactoryBuilderSupport.java,40,import java.util.List;
src/main/groovy/util/FactoryBuilderSupport.java,41,import java.util.Map;
src/main/groovy/util/FactoryBuilderSupport.java,42,import java.util.Set;
src/main/groovy/util/FactoryBuilderSupport.java,43,import java.util.TreeSet;
src/main/groovy/util/FactoryBuilderSupport.java,44,import java.util.logging.Level;
src/main/groovy/util/FactoryBuilderSupport.java,45,import java.util.logging.Logger;
src/main/groovy/util/FactoryBuilderSupport.java,59,public abstract class FactoryBuilderSupport extends Binding {
src/main/groovy/util/FactoryBuilderSupport.java,60,public static final String CURRENT_FACTORY = "_CURRENT_FACTORY_";
src/main/groovy/util/FactoryBuilderSupport.java,61,public static final String PARENT_FACTORY = "_PARENT_FACTORY_";
src/main/groovy/util/FactoryBuilderSupport.java,62,public static final String PARENT_NODE = "_PARENT_NODE_";
src/main/groovy/util/FactoryBuilderSupport.java,63,public static final String CURRENT_NODE = "_CURRENT_NODE_";
src/main/groovy/util/FactoryBuilderSupport.java,64,public static final String PARENT_CONTEXT = "_PARENT_CONTEXT_";
src/main/groovy/util/FactoryBuilderSupport.java,65,public static final String PARENT_NAME = "_PARENT_NAME_";
src/main/groovy/util/FactoryBuilderSupport.java,66,public static final String CURRENT_NAME = "_CURRENT_NAME_";
src/main/groovy/util/FactoryBuilderSupport.java,67,public static final String OWNER = "owner";
src/main/groovy/util/FactoryBuilderSupport.java,68,public static final String PARENT_BUILDER = "_PARENT_BUILDER_";
src/main/groovy/util/FactoryBuilderSupport.java,69,public static final String CURRENT_BUILDER = "_CURRENT_BUILDER_";
src/main/groovy/util/FactoryBuilderSupport.java,70,public static final String CHILD_BUILDER = "_CHILD_BUILDER_";
src/main/groovy/util/FactoryBuilderSupport.java,71,private static final Logger LOG = Logger.getLogger(FactoryBuilderSupport.class.getName());
src/main/groovy/util/FactoryBuilderSupport.java,79,public static void checkValueIsNull(Object value, Object name) {
src/main/groovy/util/FactoryBuilderSupport.java,80,if (value != null) {
src/main/groovy/util/FactoryBuilderSupport.java,81,throw new RuntimeException("'" + name + "' elements do not accept a value argument.");
src/main/groovy/util/FactoryBuilderSupport.java,94,public static boolean checkValueIsType(Object value, Object name, Class type) {
src/main/groovy/util/FactoryBuilderSupport.java,95,if (value != null) {
src/main/groovy/util/FactoryBuilderSupport.java,96,if (type.isAssignableFrom(value.getClass())) {
src/main/groovy/util/FactoryBuilderSupport.java,97,return true;
src/main/groovy/util/FactoryBuilderSupport.java,99,throw new RuntimeException("The value argument of '" + name + "' must be of type "
src/main/groovy/util/FactoryBuilderSupport.java,100,+ type.getName() + ". Found: " + value.getClass());
src/main/groovy/util/FactoryBuilderSupport.java,103,return false;
src/main/groovy/util/FactoryBuilderSupport.java,116,public static boolean checkValueIsTypeNotString(Object value, Object name, Class type) {
src/main/groovy/util/FactoryBuilderSupport.java,117,if (value != null) {
src/main/groovy/util/FactoryBuilderSupport.java,118,if (type.isAssignableFrom(value.getClass())) {
src/main/groovy/util/FactoryBuilderSupport.java,119,return true;
src/main/groovy/util/FactoryBuilderSupport.java,121,return false;
src/main/groovy/util/FactoryBuilderSupport.java,123,throw new RuntimeException("The value argument of '" + name + "' must be of type "
src/main/groovy/util/FactoryBuilderSupport.java,124,+ type.getName() + " or a String. Found: " + value.getClass());
src/main/groovy/util/FactoryBuilderSupport.java,127,return false;
src/main/groovy/util/FactoryBuilderSupport.java,131,private ThreadLocal<LinkedList<Map<String, Object>>> contexts = new ThreadLocal<LinkedList<Map<String, Object>>>();
src/main/groovy/util/FactoryBuilderSupport.java,132,protected LinkedList<Closure> attributeDelegates = new LinkedList<Closure>(); //
src/main/groovy/util/FactoryBuilderSupport.java,133,private List<Closure> disposalClosures = new ArrayList<Closure>(); // because of reverse iteration use ArrayList
src/main/groovy/util/FactoryBuilderSupport.java,134,private Map<String, Factory> factories = new HashMap<String, Factory>();
src/main/groovy/util/FactoryBuilderSupport.java,135,private Closure nameMappingClosure;
src/main/groovy/util/FactoryBuilderSupport.java,136,private ThreadLocal<FactoryBuilderSupport> localProxyBuilder = new ThreadLocal<FactoryBuilderSupport>();
src/main/groovy/util/FactoryBuilderSupport.java,137,private FactoryBuilderSupport globalProxyBuilder;
src/main/groovy/util/FactoryBuilderSupport.java,138,protected LinkedList<Closure> preInstantiateDelegates = new LinkedList<Closure>();
src/main/groovy/util/FactoryBuilderSupport.java,139,protected LinkedList<Closure> postInstantiateDelegates = new LinkedList<Closure>();
src/main/groovy/util/FactoryBuilderSupport.java,140,protected LinkedList<Closure> postNodeCompletionDelegates = new LinkedList<Closure>();
src/main/groovy/util/FactoryBuilderSupport.java,141,protected Map<String, Closure[]> explicitProperties = new HashMap<String, Closure[]>();
src/main/groovy/util/FactoryBuilderSupport.java,142,protected Map<String, Closure> explicitMethods = new HashMap<String, Closure>();
src/main/groovy/util/FactoryBuilderSupport.java,143,protected Map<String, Set<String>> registrationGroup = new HashMap<String, Set<String>>();
src/main/groovy/util/FactoryBuilderSupport.java,144,protected String registrationGroupName = ""; // use binding to store?
src/main/groovy/util/FactoryBuilderSupport.java,146,protected boolean autoRegistrationRunning = false;
src/main/groovy/util/FactoryBuilderSupport.java,147,protected boolean autoRegistrationComplete = false;
src/main/groovy/util/FactoryBuilderSupport.java,149,public FactoryBuilderSupport() {
src/main/groovy/util/FactoryBuilderSupport.java,150,this(false);
src/main/groovy/util/FactoryBuilderSupport.java,153,public FactoryBuilderSupport(boolean init) {
src/main/groovy/util/FactoryBuilderSupport.java,154,globalProxyBuilder = this;
src/main/groovy/util/FactoryBuilderSupport.java,155,registrationGroup.put(registrationGroupName, new TreeSet<String>());
src/main/groovy/util/FactoryBuilderSupport.java,156,if (init) {
src/main/groovy/util/FactoryBuilderSupport.java,157,autoRegisterNodes();
src/main/groovy/util/FactoryBuilderSupport.java,161,private Set<String> getRegistrationGroup(String name) {
src/main/groovy/util/FactoryBuilderSupport.java,162,Set<String> group = registrationGroup.get(name);
src/main/groovy/util/FactoryBuilderSupport.java,163,if (group == null ) {
src/main/groovy/util/FactoryBuilderSupport.java,164,group = new TreeSet<String>();
src/main/groovy/util/FactoryBuilderSupport.java,165,registrationGroup.put(name, group);
src/main/groovy/util/FactoryBuilderSupport.java,167,return group;
src/main/groovy/util/FactoryBuilderSupport.java,173,public void autoRegisterNodes() {
src/main/groovy/util/FactoryBuilderSupport.java,175,synchronized (this) {
src/main/groovy/util/FactoryBuilderSupport.java,176,if (autoRegistrationRunning || autoRegistrationComplete) {
src/main/groovy/util/FactoryBuilderSupport.java,178,return;
src/main/groovy/util/FactoryBuilderSupport.java,181,autoRegistrationRunning = true;
src/main/groovy/util/FactoryBuilderSupport.java,182,try {
src/main/groovy/util/FactoryBuilderSupport.java,183,callAutoRegisterMethods(getClass());
src/main/groovy/util/FactoryBuilderSupport.java,185,autoRegistrationComplete = true;
src/main/groovy/util/FactoryBuilderSupport.java,186,autoRegistrationRunning = false;
src/main/groovy/util/FactoryBuilderSupport.java,190,private void callAutoRegisterMethods(Class declaredClass) {
src/main/groovy/util/FactoryBuilderSupport.java,191,if (declaredClass == null) {
src/main/groovy/util/FactoryBuilderSupport.java,192,return;
src/main/groovy/util/FactoryBuilderSupport.java,194,callAutoRegisterMethods(declaredClass.getSuperclass());
src/main/groovy/util/FactoryBuilderSupport.java,196,for (Method method : declaredClass.getDeclaredMethods()) {
src/main/groovy/util/FactoryBuilderSupport.java,197,if (method.getName().startsWith("register") && method.getParameterTypes().length == 0) {
src/main/groovy/util/FactoryBuilderSupport.java,198,registrationGroupName = method.getName().substring("register".length());
src/main/groovy/util/FactoryBuilderSupport.java,199,registrationGroup.put(registrationGroupName, new TreeSet<String>());
src/main/groovy/util/FactoryBuilderSupport.java,200,try {
src/main/groovy/util/FactoryBuilderSupport.java,201,if (Modifier.isPublic(method.getModifiers())) {
src/main/groovy/util/FactoryBuilderSupport.java,202,method.invoke(this);
src/main/groovy/util/FactoryBuilderSupport.java,205,throw new RuntimeException("Could not init " + getClass().getName() + " because of an access error in " + declaredClass.getName() + "." + method.getName(), e);
src/main/groovy/util/FactoryBuilderSupport.java,207,throw new RuntimeException("Could not init " + getClass().getName() + " because of an exception in " + declaredClass.getName() + "." + method.getName(), e);
src/main/groovy/util/FactoryBuilderSupport.java,209,registrationGroupName = "";
src/main/groovy/util/FactoryBuilderSupport.java,219,public Object getVariable(String name) {
src/main/groovy/util/FactoryBuilderSupport.java,220,return getProxyBuilder().doGetVariable(name);
src/main/groovy/util/FactoryBuilderSupport.java,223,private Object doGetVariable(String name) {
src/main/groovy/util/FactoryBuilderSupport.java,224,return super.getVariable(name);
src/main/groovy/util/FactoryBuilderSupport.java,233,public void setVariable(String name, Object value) {
src/main/groovy/util/FactoryBuilderSupport.java,234,getProxyBuilder().doSetVariable(name, value);
src/main/groovy/util/FactoryBuilderSupport.java,237,private void doSetVariable(String name, Object value) {
src/main/groovy/util/FactoryBuilderSupport.java,238,super.setVariable(name, value);
src/main/groovy/util/FactoryBuilderSupport.java,241,public Map getVariables() {
src/main/groovy/util/FactoryBuilderSupport.java,242,return getProxyBuilder().doGetVariables();
src/main/groovy/util/FactoryBuilderSupport.java,245,private Map doGetVariables() {
src/main/groovy/util/FactoryBuilderSupport.java,246,return super.getVariables();
src/main/groovy/util/FactoryBuilderSupport.java,252,public Object getProperty(String property) {
src/main/groovy/util/FactoryBuilderSupport.java,253,try {
src/main/groovy/util/FactoryBuilderSupport.java,254,return getProxyBuilder().doGetProperty(property);
src/main/groovy/util/FactoryBuilderSupport.java,256,if ((getContext() != null) && (getContext().containsKey(property))) {
src/main/groovy/util/FactoryBuilderSupport.java,257,return getContext().get(property);
src/main/groovy/util/FactoryBuilderSupport.java,259,return getMetaClass().getProperty(this, property);
src/main/groovy/util/FactoryBuilderSupport.java,264,private Object doGetProperty(String property) {
src/main/groovy/util/FactoryBuilderSupport.java,265,Closure[] accessors = resolveExplicitProperty(property);
src/main/groovy/util/FactoryBuilderSupport.java,266,if (accessors != null) {
src/main/groovy/util/FactoryBuilderSupport.java,267,if (accessors[0] == null) {
src/main/groovy/util/FactoryBuilderSupport.java,269,throw new MissingPropertyException(property + " is declared as write only");
src/main/groovy/util/FactoryBuilderSupport.java,271,return accessors[0].call();
src/main/groovy/util/FactoryBuilderSupport.java,274,return super.getProperty(property);
src/main/groovy/util/FactoryBuilderSupport.java,281,public void setProperty(String property, Object newValue) {
src/main/groovy/util/FactoryBuilderSupport.java,282,getProxyBuilder().doSetProperty(property, newValue);
src/main/groovy/util/FactoryBuilderSupport.java,285,private void doSetProperty(String property, Object newValue) {
src/main/groovy/util/FactoryBuilderSupport.java,286,Closure[] accessors = resolveExplicitProperty(property);
src/main/groovy/util/FactoryBuilderSupport.java,287,if (accessors != null) {
src/main/groovy/util/FactoryBuilderSupport.java,288,if (accessors[1] == null) {
src/main/groovy/util/FactoryBuilderSupport.java,290,throw new MissingPropertyException(property + " is declared as read only");
src/main/groovy/util/FactoryBuilderSupport.java,292,accessors[1].call(newValue);
src/main/groovy/util/FactoryBuilderSupport.java,295,super.setProperty(property, newValue);
src/main/groovy/util/FactoryBuilderSupport.java,302,public Map<String, Factory> getFactories() {
src/main/groovy/util/FactoryBuilderSupport.java,303,return Collections.unmodifiableMap(getProxyBuilder().factories);
src/main/groovy/util/FactoryBuilderSupport.java,309,public Map<String, Closure> getExplicitMethods() {
src/main/groovy/util/FactoryBuilderSupport.java,310,return Collections.unmodifiableMap(getProxyBuilder().explicitMethods);
src/main/groovy/util/FactoryBuilderSupport.java,316,public Map<String, Closure[]> getExplicitProperties() {
src/main/groovy/util/FactoryBuilderSupport.java,317,return Collections.unmodifiableMap(getProxyBuilder().explicitProperties);
src/main/groovy/util/FactoryBuilderSupport.java,323,public Map<String, Factory> getLocalFactories() {
src/main/groovy/util/FactoryBuilderSupport.java,324,return Collections.unmodifiableMap(factories);
src/main/groovy/util/FactoryBuilderSupport.java,330,public Map<String, Closure> getLocalExplicitMethods() {
src/main/groovy/util/FactoryBuilderSupport.java,331,return Collections.unmodifiableMap(explicitMethods);
src/main/groovy/util/FactoryBuilderSupport.java,337,public Map<String, Closure[]> getLocalExplicitProperties() {
src/main/groovy/util/FactoryBuilderSupport.java,338,return Collections.unmodifiableMap(explicitProperties);
src/main/groovy/util/FactoryBuilderSupport.java,341,public Set<String> getRegistrationGroups() {
src/main/groovy/util/FactoryBuilderSupport.java,342,return Collections.unmodifiableSet(registrationGroup.keySet());
src/main/groovy/util/FactoryBuilderSupport.java,345,public Set<String> getRegistrationGroupItems(String group) {
src/main/groovy/util/FactoryBuilderSupport.java,346,Set<String> groupSet = registrationGroup.get(group);
src/main/groovy/util/FactoryBuilderSupport.java,347,if (groupSet != null) {
src/main/groovy/util/FactoryBuilderSupport.java,348,return Collections.unmodifiableSet(groupSet);
src/main/groovy/util/FactoryBuilderSupport.java,350,return Collections.emptySet();
src/main/groovy/util/FactoryBuilderSupport.java,354,public List<Closure> getAttributeDelegates() {
src/main/groovy/util/FactoryBuilderSupport.java,355,return Collections.unmodifiableList(attributeDelegates);
src/main/groovy/util/FactoryBuilderSupport.java,358,public List<Closure> getPreInstantiateDelegates() {
src/main/groovy/util/FactoryBuilderSupport.java,359,return Collections.unmodifiableList(preInstantiateDelegates);
src/main/groovy/util/FactoryBuilderSupport.java,362,public List<Closure> getPostInstantiateDelegates() {
src/main/groovy/util/FactoryBuilderSupport.java,363,return Collections.unmodifiableList(postInstantiateDelegates);
src/main/groovy/util/FactoryBuilderSupport.java,366,public List<Closure> getPostNodeCompletionDelegates() {
src/main/groovy/util/FactoryBuilderSupport.java,367,return Collections.unmodifiableList(postNodeCompletionDelegates);
src/main/groovy/util/FactoryBuilderSupport.java,373,public Map<String, Object> getContext() {
src/main/groovy/util/FactoryBuilderSupport.java,374,LinkedList<Map<String, Object>> contexts = getProxyBuilder().contexts.get();
src/main/groovy/util/FactoryBuilderSupport.java,375,if (contexts != null && !contexts.isEmpty()) {
src/main/groovy/util/FactoryBuilderSupport.java,376,return contexts.getFirst();
src/main/groovy/util/FactoryBuilderSupport.java,378,return null;
src/main/groovy/util/FactoryBuilderSupport.java,384,public Object getCurrent() {
src/main/groovy/util/FactoryBuilderSupport.java,385,return getContextAttribute(CURRENT_NODE);
src/main/groovy/util/FactoryBuilderSupport.java,391,public Factory getCurrentFactory() {
src/main/groovy/util/FactoryBuilderSupport.java,392,return (Factory) getContextAttribute(CURRENT_FACTORY);
src/main/groovy/util/FactoryBuilderSupport.java,398,public String getCurrentName() {
src/main/groovy/util/FactoryBuilderSupport.java,399,return (String) getContextAttribute(CURRENT_NAME);
src/main/groovy/util/FactoryBuilderSupport.java,405,public FactoryBuilderSupport getCurrentBuilder() {
src/main/groovy/util/FactoryBuilderSupport.java,406,return (FactoryBuilderSupport) getContextAttribute(CURRENT_BUILDER);
src/main/groovy/util/FactoryBuilderSupport.java,412,public Object getParentNode() {
src/main/groovy/util/FactoryBuilderSupport.java,413,return getContextAttribute(PARENT_NODE);
src/main/groovy/util/FactoryBuilderSupport.java,419,public Factory getParentFactory() {
src/main/groovy/util/FactoryBuilderSupport.java,420,return (Factory) getContextAttribute(PARENT_FACTORY);
src/main/groovy/util/FactoryBuilderSupport.java,426,public Map getParentContext() {
src/main/groovy/util/FactoryBuilderSupport.java,427,return (Map) getContextAttribute(PARENT_CONTEXT);
src/main/groovy/util/FactoryBuilderSupport.java,433,public String getParentName() {
src/main/groovy/util/FactoryBuilderSupport.java,434,return (String) getContextAttribute(PARENT_NAME);
src/main/groovy/util/FactoryBuilderSupport.java,437,public FactoryBuilderSupport getChildBuilder() {
src/main/groovy/util/FactoryBuilderSupport.java,438,return (FactoryBuilderSupport) getContextAttribute(CHILD_BUILDER);
src/main/groovy/util/FactoryBuilderSupport.java,441,public Object getContextAttribute(String key) {
src/main/groovy/util/FactoryBuilderSupport.java,442,Map context = getContext();
src/main/groovy/util/FactoryBuilderSupport.java,443,if (context != null) {
src/main/groovy/util/FactoryBuilderSupport.java,444,return context.get(key);
src/main/groovy/util/FactoryBuilderSupport.java,446,return null;
src/main/groovy/util/FactoryBuilderSupport.java,455,public Object invokeMethod(String methodName) {
src/main/groovy/util/FactoryBuilderSupport.java,456,return getProxyBuilder().invokeMethod(methodName, null);
src/main/groovy/util/FactoryBuilderSupport.java,459,public Object invokeMethod(String methodName, Object args) {
src/main/groovy/util/FactoryBuilderSupport.java,460,Object name = getProxyBuilder().getName(methodName);
src/main/groovy/util/FactoryBuilderSupport.java,461,Object result;
src/main/groovy/util/FactoryBuilderSupport.java,462,Object previousContext = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,463,try {
src/main/groovy/util/FactoryBuilderSupport.java,464,result = getProxyBuilder().doInvokeMethod(methodName, name, args);
src/main/groovy/util/FactoryBuilderSupport.java,467,if (getContexts().contains(previousContext)) {
src/main/groovy/util/FactoryBuilderSupport.java,468,Map<String, Object> context = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,469,while (context != null && context != previousContext) {
src/main/groovy/util/FactoryBuilderSupport.java,470,getProxyBuilder().popContext();
src/main/groovy/util/FactoryBuilderSupport.java,471,context = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,474,throw e;
src/main/groovy/util/FactoryBuilderSupport.java,476,return result;
src/main/groovy/util/FactoryBuilderSupport.java,487,public Closure addAttributeDelegate(Closure attrDelegate) {
src/main/groovy/util/FactoryBuilderSupport.java,488,getProxyBuilder().attributeDelegates.addFirst(attrDelegate);
src/main/groovy/util/FactoryBuilderSupport.java,489,return attrDelegate;
src/main/groovy/util/FactoryBuilderSupport.java,497,public void removeAttributeDelegate(Closure attrDelegate) {
src/main/groovy/util/FactoryBuilderSupport.java,498,getProxyBuilder().attributeDelegates.remove(attrDelegate);
src/main/groovy/util/FactoryBuilderSupport.java,509,public Closure addPreInstantiateDelegate(Closure delegate) {
src/main/groovy/util/FactoryBuilderSupport.java,510,getProxyBuilder().preInstantiateDelegates.addFirst(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,511,return delegate;
src/main/groovy/util/FactoryBuilderSupport.java,519,public void removePreInstantiateDelegate(Closure delegate) {
src/main/groovy/util/FactoryBuilderSupport.java,520,getProxyBuilder().preInstantiateDelegates.remove(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,531,public Closure addPostInstantiateDelegate(Closure delegate) {
src/main/groovy/util/FactoryBuilderSupport.java,532,getProxyBuilder().postInstantiateDelegates.addFirst(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,533,return delegate;
src/main/groovy/util/FactoryBuilderSupport.java,541,public void removePostInstantiateDelegate(Closure delegate) {
src/main/groovy/util/FactoryBuilderSupport.java,542,getProxyBuilder().postInstantiateDelegates.remove(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,553,public Closure addPostNodeCompletionDelegate(Closure delegate) {
src/main/groovy/util/FactoryBuilderSupport.java,554,getProxyBuilder().postNodeCompletionDelegates.addFirst(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,555,return delegate;
src/main/groovy/util/FactoryBuilderSupport.java,563,public void removePostNodeCompletionDelegate(Closure delegate) {
src/main/groovy/util/FactoryBuilderSupport.java,564,getProxyBuilder().postNodeCompletionDelegates.remove(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,567,public void registerExplicitProperty(String name, Closure getter, Closure setter) {
src/main/groovy/util/FactoryBuilderSupport.java,568,registerExplicitProperty(name, registrationGroupName, getter, setter);
src/main/groovy/util/FactoryBuilderSupport.java,571,public void registerExplicitProperty(String name, String groupName, Closure getter, Closure setter) {
src/main/groovy/util/FactoryBuilderSupport.java,573,if (getter != null) getter.setDelegate(this);
src/main/groovy/util/FactoryBuilderSupport.java,574,if (setter != null) setter.setDelegate(this);
src/main/groovy/util/FactoryBuilderSupport.java,575,explicitProperties.put(name, new Closure[]{getter, setter});
src/main/groovy/util/FactoryBuilderSupport.java,576,String methodNameBase = MetaClassHelper.capitalize(name);
src/main/groovy/util/FactoryBuilderSupport.java,577,if (getter != null) {
src/main/groovy/util/FactoryBuilderSupport.java,578,getRegistrationGroup(groupName).add("get" + methodNameBase);
src/main/groovy/util/FactoryBuilderSupport.java,580,if (setter != null) {
src/main/groovy/util/FactoryBuilderSupport.java,581,getRegistrationGroup(groupName).add("set" + methodNameBase);
src/main/groovy/util/FactoryBuilderSupport.java,585,public void registerExplicitMethod(String name, Closure closure) {
src/main/groovy/util/FactoryBuilderSupport.java,586,registerExplicitMethod(name, registrationGroupName, closure);
src/main/groovy/util/FactoryBuilderSupport.java,589,public void registerExplicitMethod(String name, String groupName, Closure closure) {
src/main/groovy/util/FactoryBuilderSupport.java,591,closure.setDelegate(this);
src/main/groovy/util/FactoryBuilderSupport.java,592,explicitMethods.put(name, closure);
src/main/groovy/util/FactoryBuilderSupport.java,593,getRegistrationGroup(groupName).add(name);
src/main/groovy/util/FactoryBuilderSupport.java,603,public void registerBeanFactory(String theName, Class beanClass) {
src/main/groovy/util/FactoryBuilderSupport.java,604,registerBeanFactory(theName, registrationGroupName, beanClass);
src/main/groovy/util/FactoryBuilderSupport.java,615,public void registerBeanFactory(String theName, String groupName, final Class beanClass) {
src/main/groovy/util/FactoryBuilderSupport.java,616,getProxyBuilder().registerFactory(theName, new AbstractFactory() {
src/main/groovy/util/FactoryBuilderSupport.java,617,public Object newInstance(FactoryBuilderSupport builder, Object name, Object value,
src/main/groovy/util/FactoryBuilderSupport.java,618,Map properties) throws InstantiationException, IllegalAccessException {
src/main/groovy/util/FactoryBuilderSupport.java,619,if (checkValueIsTypeNotString(value, name, beanClass)) {
src/main/groovy/util/FactoryBuilderSupport.java,620,return value;
src/main/groovy/util/FactoryBuilderSupport.java,622,return beanClass.newInstance();
src/main/groovy/util/FactoryBuilderSupport.java,627,getRegistrationGroup(groupName).add(theName);
src/main/groovy/util/FactoryBuilderSupport.java,636,public void registerFactory(String name, Factory factory) {
src/main/groovy/util/FactoryBuilderSupport.java,637,registerFactory(name, registrationGroupName, factory);
src/main/groovy/util/FactoryBuilderSupport.java,647,public void registerFactory(String name, String groupName, Factory factory) {
src/main/groovy/util/FactoryBuilderSupport.java,648,getProxyBuilder().factories.put(name, factory);
src/main/groovy/util/FactoryBuilderSupport.java,649,getRegistrationGroup(groupName).add(name);
src/main/groovy/util/FactoryBuilderSupport.java,650,factory.onFactoryRegistration(this, name, groupName);
src/main/groovy/util/FactoryBuilderSupport.java,662,protected Object createNode(Object name, Map attributes, Object value) {
src/main/groovy/util/FactoryBuilderSupport.java,663,Object node;
src/main/groovy/util/FactoryBuilderSupport.java,665,Factory factory = getProxyBuilder().resolveFactory(name, attributes, value);
src/main/groovy/util/FactoryBuilderSupport.java,666,if (factory == null) {
src/main/groovy/util/FactoryBuilderSupport.java,667,LOG.log(Level.WARNING, "Could not find match for name '" + name + "'");
src/main/groovy/util/FactoryBuilderSupport.java,668,throw new MissingMethodExceptionNoStack((String) name, Object.class, new Object[]{attributes, value});
src/main/groovy/util/FactoryBuilderSupport.java,671,getProxyBuilder().getContext().put(CURRENT_FACTORY, factory);
src/main/groovy/util/FactoryBuilderSupport.java,672,getProxyBuilder().getContext().put(CURRENT_NAME, String.valueOf(name));
src/main/groovy/util/FactoryBuilderSupport.java,673,getProxyBuilder().preInstantiate(name, attributes, value);
src/main/groovy/util/FactoryBuilderSupport.java,674,try {
src/main/groovy/util/FactoryBuilderSupport.java,675,node = factory.newInstance(getProxyBuilder().getChildBuilder(), name, value, attributes);
src/main/groovy/util/FactoryBuilderSupport.java,676,if (node == null) {
src/main/groovy/util/FactoryBuilderSupport.java,677,LOG.log(Level.WARNING, "Factory for name '" + name + "' returned null");
src/main/groovy/util/FactoryBuilderSupport.java,678,return null;
src/main/groovy/util/FactoryBuilderSupport.java,681,if (LOG.isLoggable(Level.FINE)) {
src/main/groovy/util/FactoryBuilderSupport.java,682,LOG.fine("For name: " + name + " created node: " + node);
src/main/groovy/util/FactoryBuilderSupport.java,685,throw new RuntimeException("Failed to create component for '" + name + "' reason: "
src/main/groovy/util/FactoryBuilderSupport.java,686,+ e, e);
src/main/groovy/util/FactoryBuilderSupport.java,688,getProxyBuilder().postInstantiate(name, attributes, node);
src/main/groovy/util/FactoryBuilderSupport.java,689,getProxyBuilder().handleNodeAttributes(node, attributes);
src/main/groovy/util/FactoryBuilderSupport.java,690,return node;
src/main/groovy/util/FactoryBuilderSupport.java,702,protected Factory resolveFactory(Object name, Map attributes, Object value) {
src/main/groovy/util/FactoryBuilderSupport.java,703,getProxyBuilder().getContext().put(CHILD_BUILDER, getProxyBuilder());
src/main/groovy/util/FactoryBuilderSupport.java,704,return getProxyBuilder().factories.get(name);
src/main/groovy/util/FactoryBuilderSupport.java,716,protected Closure resolveExplicitMethod(String methodName, Object args) {
src/main/groovy/util/FactoryBuilderSupport.java,717,return explicitMethods.get(methodName);
src/main/groovy/util/FactoryBuilderSupport.java,727,protected Closure[] resolveExplicitProperty(String propertyName) {
src/main/groovy/util/FactoryBuilderSupport.java,728,return explicitProperties.get(propertyName);
src/main/groovy/util/FactoryBuilderSupport.java,739,private Object doInvokeMethod(String methodName, Object name, Object args) {
src/main/groovy/util/FactoryBuilderSupport.java,740,Reference explicitResult = new Reference();
src/main/groovy/util/FactoryBuilderSupport.java,741,if (checkExplicitMethod(methodName, args, explicitResult)) {
src/main/groovy/util/FactoryBuilderSupport.java,742,return explicitResult.get();
src/main/groovy/util/FactoryBuilderSupport.java,744,return dispathNodeCall(name, args);
src/main/groovy/util/FactoryBuilderSupport.java,748,protected boolean checkExplicitMethod(String methodName, Object args, Reference result) {
src/main/groovy/util/FactoryBuilderSupport.java,749,Closure explicitMethod = resolveExplicitMethod(methodName, args);
src/main/groovy/util/FactoryBuilderSupport.java,750,if (explicitMethod != null) {
src/main/groovy/util/FactoryBuilderSupport.java,751,if (args instanceof Object[]) {
src/main/groovy/util/FactoryBuilderSupport.java,752,result.set(explicitMethod.call((Object[]) args));
src/main/groovy/util/FactoryBuilderSupport.java,755,result.set(explicitMethod.call(args));
src/main/groovy/util/FactoryBuilderSupport.java,757,return true;
src/main/groovy/util/FactoryBuilderSupport.java,759,return false;
src/main/groovy/util/FactoryBuilderSupport.java,763,protected Object dispathNodeCall(Object name, Object args) {
src/main/groovy/util/FactoryBuilderSupport.java,764,Object node;
src/main/groovy/util/FactoryBuilderSupport.java,765,Closure closure = null;
src/main/groovy/util/FactoryBuilderSupport.java,766,List list = InvokerHelper.asList(args);
src/main/groovy/util/FactoryBuilderSupport.java,768,final boolean needToPopContext;
src/main/groovy/util/FactoryBuilderSupport.java,769,if (getProxyBuilder().getContexts().isEmpty()) {
src/main/groovy/util/FactoryBuilderSupport.java,771,getProxyBuilder().newContext();
src/main/groovy/util/FactoryBuilderSupport.java,772,needToPopContext = true;
src/main/groovy/util/FactoryBuilderSupport.java,774,needToPopContext = false;
src/main/groovy/util/FactoryBuilderSupport.java,777,try {
src/main/groovy/util/FactoryBuilderSupport.java,778,Map namedArgs = Collections.EMPTY_MAP;
src/main/groovy/util/FactoryBuilderSupport.java,789,&& (list.get(0) instanceof LinkedHashMap)) {
src/main/groovy/util/FactoryBuilderSupport.java,790,namedArgs = (Map) list.get(0);
src/main/groovy/util/FactoryBuilderSupport.java,791,list = list.subList(1, list.size());
src/main/groovy/util/FactoryBuilderSupport.java,794,&& (list.get(list.size() - 1) instanceof Closure)) {
src/main/groovy/util/FactoryBuilderSupport.java,795,closure = (Closure) list.get(list.size() - 1);
src/main/groovy/util/FactoryBuilderSupport.java,796,list = list.subList(0, list.size() - 1);
src/main/groovy/util/FactoryBuilderSupport.java,798,Object arg;
src/main/groovy/util/FactoryBuilderSupport.java,799,if (list.size() == 0) {
src/main/groovy/util/FactoryBuilderSupport.java,800,arg = null;
src/main/groovy/util/FactoryBuilderSupport.java,802,arg = list.get(0);
src/main/groovy/util/FactoryBuilderSupport.java,804,arg = list;
src/main/groovy/util/FactoryBuilderSupport.java,806,node = getProxyBuilder().createNode(name, namedArgs, arg);
src/main/groovy/util/FactoryBuilderSupport.java,808,Object current = getProxyBuilder().getCurrent();
src/main/groovy/util/FactoryBuilderSupport.java,809,if (current != null) {
src/main/groovy/util/FactoryBuilderSupport.java,810,getProxyBuilder().setParent(current, node);
src/main/groovy/util/FactoryBuilderSupport.java,813,if (closure != null) {
src/main/groovy/util/FactoryBuilderSupport.java,814,Factory parentFactory = getProxyBuilder().getCurrentFactory();
src/main/groovy/util/FactoryBuilderSupport.java,815,if (parentFactory.isLeaf()) {
src/main/groovy/util/FactoryBuilderSupport.java,816,throw new RuntimeException("'" + name + "' doesn't support nesting.");
src/main/groovy/util/FactoryBuilderSupport.java,818,boolean processContent = true;
src/main/groovy/util/FactoryBuilderSupport.java,819,if (parentFactory.isHandlesNodeChildren()) {
src/main/groovy/util/FactoryBuilderSupport.java,820,processContent = parentFactory.onNodeChildren(this, node, closure);
src/main/groovy/util/FactoryBuilderSupport.java,822,if (processContent) {
src/main/groovy/util/FactoryBuilderSupport.java,824,String parentName = getProxyBuilder().getCurrentName();
src/main/groovy/util/FactoryBuilderSupport.java,825,Map parentContext = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,826,getProxyBuilder().newContext();
src/main/groovy/util/FactoryBuilderSupport.java,827,try {
src/main/groovy/util/FactoryBuilderSupport.java,828,getProxyBuilder().getContext().put(OWNER, closure.getOwner());
src/main/groovy/util/FactoryBuilderSupport.java,829,getProxyBuilder().getContext().put(CURRENT_NODE, node);
src/main/groovy/util/FactoryBuilderSupport.java,830,getProxyBuilder().getContext().put(PARENT_FACTORY, parentFactory);
src/main/groovy/util/FactoryBuilderSupport.java,831,getProxyBuilder().getContext().put(PARENT_NODE, current);
src/main/groovy/util/FactoryBuilderSupport.java,832,getProxyBuilder().getContext().put(PARENT_CONTEXT, parentContext);
src/main/groovy/util/FactoryBuilderSupport.java,833,getProxyBuilder().getContext().put(PARENT_NAME, parentName);
src/main/groovy/util/FactoryBuilderSupport.java,834,getProxyBuilder().getContext().put(PARENT_BUILDER, parentContext.get(CURRENT_BUILDER));
src/main/groovy/util/FactoryBuilderSupport.java,835,getProxyBuilder().getContext().put(CURRENT_BUILDER, parentContext.get(CHILD_BUILDER));
src/main/groovy/util/FactoryBuilderSupport.java,837,getProxyBuilder().setClosureDelegate(closure, node);
src/main/groovy/util/FactoryBuilderSupport.java,838,closure.call();
src/main/groovy/util/FactoryBuilderSupport.java,840,getProxyBuilder().popContext();
src/main/groovy/util/FactoryBuilderSupport.java,845,getProxyBuilder().nodeCompleted(current, node);
src/main/groovy/util/FactoryBuilderSupport.java,846,node = getProxyBuilder().postNodeCompletion(current, node);
src/main/groovy/util/FactoryBuilderSupport.java,848,if (needToPopContext) {
src/main/groovy/util/FactoryBuilderSupport.java,850,getProxyBuilder().popContext();
src/main/groovy/util/FactoryBuilderSupport.java,853,return node;
src/main/groovy/util/FactoryBuilderSupport.java,863,public Object getName(String methodName) {
src/main/groovy/util/FactoryBuilderSupport.java,864,if (getProxyBuilder().nameMappingClosure != null) {
src/main/groovy/util/FactoryBuilderSupport.java,865,return getProxyBuilder().nameMappingClosure.call(methodName);
src/main/groovy/util/FactoryBuilderSupport.java,867,return methodName;
src/main/groovy/util/FactoryBuilderSupport.java,876,protected FactoryBuilderSupport getProxyBuilder() {
src/main/groovy/util/FactoryBuilderSupport.java,877,FactoryBuilderSupport proxy = localProxyBuilder.get();
src/main/groovy/util/FactoryBuilderSupport.java,878,if (proxy == null) {
src/main/groovy/util/FactoryBuilderSupport.java,879,return globalProxyBuilder;
src/main/groovy/util/FactoryBuilderSupport.java,881,return proxy;
src/main/groovy/util/FactoryBuilderSupport.java,890,protected void setProxyBuilder(FactoryBuilderSupport proxyBuilder) {
src/main/groovy/util/FactoryBuilderSupport.java,891,globalProxyBuilder = proxyBuilder;
src/main/groovy/util/FactoryBuilderSupport.java,894,public Closure getNameMappingClosure() {
src/main/groovy/util/FactoryBuilderSupport.java,895,return nameMappingClosure;
src/main/groovy/util/FactoryBuilderSupport.java,898,public void setNameMappingClosure(Closure nameMappingClosure) {
src/main/groovy/util/FactoryBuilderSupport.java,899,this.nameMappingClosure = nameMappingClosure;
src/main/groovy/util/FactoryBuilderSupport.java,910,protected void handleNodeAttributes(Object node, Map attributes) {
src/main/groovy/util/FactoryBuilderSupport.java,912,if (node == null) {
src/main/groovy/util/FactoryBuilderSupport.java,913,return;
src/main/groovy/util/FactoryBuilderSupport.java,916,for (Closure attrDelegate : getProxyBuilder().attributeDelegates) {
src/main/groovy/util/FactoryBuilderSupport.java,917,FactoryBuilderSupport builder = this;
src/main/groovy/util/FactoryBuilderSupport.java,918,if (attrDelegate.getOwner() instanceof FactoryBuilderSupport) {
src/main/groovy/util/FactoryBuilderSupport.java,919,builder = (FactoryBuilderSupport) attrDelegate.getOwner();
src/main/groovy/util/FactoryBuilderSupport.java,921,builder = (FactoryBuilderSupport) attrDelegate.getDelegate();
src/main/groovy/util/FactoryBuilderSupport.java,924,attrDelegate.call(new Object[]{builder, node, attributes});
src/main/groovy/util/FactoryBuilderSupport.java,927,if (getProxyBuilder().getCurrentFactory().onHandleNodeAttributes(getProxyBuilder().getChildBuilder(), node, attributes)) {
src/main/groovy/util/FactoryBuilderSupport.java,928,getProxyBuilder().setNodeAttributes(node, attributes);
src/main/groovy/util/FactoryBuilderSupport.java,935,protected void newContext() {
src/main/groovy/util/FactoryBuilderSupport.java,936,getContexts().addFirst(new HashMap<String, Object>());
src/main/groovy/util/FactoryBuilderSupport.java,946,protected void nodeCompleted(Object parent, Object node) {
src/main/groovy/util/FactoryBuilderSupport.java,947,getProxyBuilder().getCurrentFactory().onNodeCompleted(getProxyBuilder().getChildBuilder(), parent, node);
src/main/groovy/util/FactoryBuilderSupport.java,955,protected Map<String, Object> popContext() {
src/main/groovy/util/FactoryBuilderSupport.java,956,if (!getProxyBuilder().getContexts().isEmpty()) {
src/main/groovy/util/FactoryBuilderSupport.java,957,return getProxyBuilder().getContexts().removeFirst();
src/main/groovy/util/FactoryBuilderSupport.java,959,return null;
src/main/groovy/util/FactoryBuilderSupport.java,971,protected void postInstantiate(Object name, Map attributes, Object node) {
src/main/groovy/util/FactoryBuilderSupport.java,972,for (Closure postInstantiateDelegate : getProxyBuilder().postInstantiateDelegates) {
src/main/groovy/util/FactoryBuilderSupport.java,973,(postInstantiateDelegate).call(new Object[]{this, attributes, node});
src/main/groovy/util/FactoryBuilderSupport.java,988,protected Object postNodeCompletion(Object parent, Object node) {
src/main/groovy/util/FactoryBuilderSupport.java,989,for (Closure postNodeCompletionDelegate : getProxyBuilder().postNodeCompletionDelegates) {
src/main/groovy/util/FactoryBuilderSupport.java,990,(postNodeCompletionDelegate).call(new Object[]{this, parent, node});
src/main/groovy/util/FactoryBuilderSupport.java,993,return node;
src/main/groovy/util/FactoryBuilderSupport.java,1005,protected void preInstantiate(Object name, Map attributes, Object value) {
src/main/groovy/util/FactoryBuilderSupport.java,1006,for (Closure preInstantiateDelegate : getProxyBuilder().preInstantiateDelegates) {
src/main/groovy/util/FactoryBuilderSupport.java,1007,(preInstantiateDelegate).call(new Object[]{this, attributes, value});
src/main/groovy/util/FactoryBuilderSupport.java,1014,protected void reset() {
src/main/groovy/util/FactoryBuilderSupport.java,1015,getProxyBuilder().getContexts().clear();
src/main/groovy/util/FactoryBuilderSupport.java,1030,protected void setClosureDelegate(Closure closure, Object node) {
src/main/groovy/util/FactoryBuilderSupport.java,1031,closure.setDelegate(this);
src/main/groovy/util/FactoryBuilderSupport.java,1040,protected void setNodeAttributes(Object node, Map attributes) {
src/main/groovy/util/FactoryBuilderSupport.java,1043,for (Map.Entry entry : (Set<Map.Entry>) attributes.entrySet()) {
src/main/groovy/util/FactoryBuilderSupport.java,1044,String property = entry.getKey().toString();
src/main/groovy/util/FactoryBuilderSupport.java,1045,Object value = entry.getValue();
src/main/groovy/util/FactoryBuilderSupport.java,1046,InvokerHelper.setProperty(node, property, value);
src/main/groovy/util/FactoryBuilderSupport.java,1056,protected void setParent(Object parent, Object child) {
src/main/groovy/util/FactoryBuilderSupport.java,1057,getProxyBuilder().getCurrentFactory().setParent(getProxyBuilder().getChildBuilder(), parent, child);
src/main/groovy/util/FactoryBuilderSupport.java,1058,Factory parentFactory = getProxyBuilder().getParentFactory();
src/main/groovy/util/FactoryBuilderSupport.java,1059,if (parentFactory != null) {
src/main/groovy/util/FactoryBuilderSupport.java,1060,parentFactory.setChild(getProxyBuilder().getCurrentBuilder(), parent, child);
src/main/groovy/util/FactoryBuilderSupport.java,1067,protected LinkedList<Map<String, Object>> getContexts() {
src/main/groovy/util/FactoryBuilderSupport.java,1068,LinkedList<Map<String, Object>> contexts = getProxyBuilder().contexts.get();
src/main/groovy/util/FactoryBuilderSupport.java,1069,if (contexts == null) {
src/main/groovy/util/FactoryBuilderSupport.java,1070,contexts = new LinkedList<Map<String, Object>>();
src/main/groovy/util/FactoryBuilderSupport.java,1071,getProxyBuilder().contexts.set(contexts);
src/main/groovy/util/FactoryBuilderSupport.java,1073,return contexts;
src/main/groovy/util/FactoryBuilderSupport.java,1080,protected Map<String, Object> getContinuationData() {
src/main/groovy/util/FactoryBuilderSupport.java,1081,Map<String, Object> data = new HashMap<String, Object>();
src/main/groovy/util/FactoryBuilderSupport.java,1082,data.put("proxyBuilder", localProxyBuilder.get());
src/main/groovy/util/FactoryBuilderSupport.java,1083,data.put("contexts", contexts.get());
src/main/groovy/util/FactoryBuilderSupport.java,1084,return data;
src/main/groovy/util/FactoryBuilderSupport.java,1093,protected void restoreFromContinuationData(Map<String, Object> data) {
src/main/groovy/util/FactoryBuilderSupport.java,1095,localProxyBuilder.set((FactoryBuilderSupport) data.get("proxyBuilder"));
src/main/groovy/util/FactoryBuilderSupport.java,1097,contexts.set((LinkedList<Map<String, Object>>) data.get("contexts"));
src/main/groovy/util/FactoryBuilderSupport.java,1100,public Object build(Class viewClass) {
src/main/groovy/util/FactoryBuilderSupport.java,1101,if (Script.class.isAssignableFrom(viewClass)) {
src/main/groovy/util/FactoryBuilderSupport.java,1102,Script script = InvokerHelper.createScript(viewClass, this);
src/main/groovy/util/FactoryBuilderSupport.java,1103,return build(script);
src/main/groovy/util/FactoryBuilderSupport.java,1105,throw new RuntimeException("Only scripts can be executed via build(Class)");
src/main/groovy/util/FactoryBuilderSupport.java,1109,public Object build(Script script) {
src/main/groovy/util/FactoryBuilderSupport.java,1114,MetaClass scriptMetaClass = script.getMetaClass();
src/main/groovy/util/FactoryBuilderSupport.java,1115,script.setMetaClass(new FactoryInterceptorMetaClass(scriptMetaClass, this));
src/main/groovy/util/FactoryBuilderSupport.java,1116,script.setBinding(this);
src/main/groovy/util/FactoryBuilderSupport.java,1120,public Object build(final String script, GroovyClassLoader loader) {
src/main/groovy/util/FactoryBuilderSupport.java,1121,return build(loader.parseClass(script));
src/main/groovy/util/FactoryBuilderSupport.java,1137,public Object withBuilder(FactoryBuilderSupport builder, Closure closure) {
src/main/groovy/util/FactoryBuilderSupport.java,1138,if (builder == null || closure == null) {
src/main/groovy/util/FactoryBuilderSupport.java,1139,return null;
src/main/groovy/util/FactoryBuilderSupport.java,1142,Object result = null;
src/main/groovy/util/FactoryBuilderSupport.java,1143,Object previousContext = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,1144,FactoryBuilderSupport previousProxyBuilder = localProxyBuilder.get();
src/main/groovy/util/FactoryBuilderSupport.java,1145,try {
src/main/groovy/util/FactoryBuilderSupport.java,1146,localProxyBuilder.set(builder);
src/main/groovy/util/FactoryBuilderSupport.java,1147,closure.setDelegate(builder);
src/main/groovy/util/FactoryBuilderSupport.java,1148,result = closure.call();
src/main/groovy/util/FactoryBuilderSupport.java,1150,catch (RuntimeException e) {
src/main/groovy/util/FactoryBuilderSupport.java,1152,localProxyBuilder.set(previousProxyBuilder);
src/main/groovy/util/FactoryBuilderSupport.java,1153,if (getProxyBuilder().getContexts().contains(previousContext)) {
src/main/groovy/util/FactoryBuilderSupport.java,1154,Map<String, Object> context = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,1155,while (context != null && context != previousContext) {
src/main/groovy/util/FactoryBuilderSupport.java,1156,getProxyBuilder().popContext();
src/main/groovy/util/FactoryBuilderSupport.java,1157,context = getProxyBuilder().getContext();
src/main/groovy/util/FactoryBuilderSupport.java,1160,throw e;
src/main/groovy/util/FactoryBuilderSupport.java,1162,finally {
src/main/groovy/util/FactoryBuilderSupport.java,1163,localProxyBuilder.set(previousProxyBuilder);
src/main/groovy/util/FactoryBuilderSupport.java,1166,return result;
src/main/groovy/util/FactoryBuilderSupport.java,1185,public Object withBuilder(FactoryBuilderSupport builder, String name, Closure closure) {
src/main/groovy/util/FactoryBuilderSupport.java,1186,if (name == null) {
src/main/groovy/util/FactoryBuilderSupport.java,1187,return null;
src/main/groovy/util/FactoryBuilderSupport.java,1189,Object result = getProxyBuilder().withBuilder(builder, closure);
src/main/groovy/util/FactoryBuilderSupport.java,1190,return getProxyBuilder().invokeMethod(name, new Object[]{result});
src/main/groovy/util/FactoryBuilderSupport.java,1211,public Object withBuilder(Map attributes, FactoryBuilderSupport builder, String name, Closure closure) {
src/main/groovy/util/FactoryBuilderSupport.java,1212,if (name == null) {
src/main/groovy/util/FactoryBuilderSupport.java,1213,return null;
src/main/groovy/util/FactoryBuilderSupport.java,1215,Object result = getProxyBuilder().withBuilder(builder, closure);
src/main/groovy/util/FactoryBuilderSupport.java,1216,return getProxyBuilder().invokeMethod(name, new Object[]{attributes, result});
src/main/groovy/util/FactoryBuilderSupport.java,1219,public void addDisposalClosure(Closure closure) {
src/main/groovy/util/FactoryBuilderSupport.java,1220,disposalClosures.add(closure);
src/main/groovy/util/FactoryBuilderSupport.java,1223,public void dispose() {
src/main/groovy/util/FactoryBuilderSupport.java,1224,for (int i = disposalClosures.size() - 1; i >= 0; i--) {
src/main/groovy/util/FactoryBuilderSupport.java,1225,disposalClosures.get(i).call();
src/main/groovy/util/FactoryBuilderSupport.java,1230,class FactoryInterceptorMetaClass extends DelegatingMetaClass {
src/main/groovy/util/FactoryBuilderSupport.java,1232,FactoryBuilderSupport factory;
src/main/groovy/util/FactoryBuilderSupport.java,1234,public FactoryInterceptorMetaClass(MetaClass delegate, FactoryBuilderSupport factory) {
src/main/groovy/util/FactoryBuilderSupport.java,1235,super(delegate);
src/main/groovy/util/FactoryBuilderSupport.java,1236,this.factory = factory;
src/main/groovy/util/FactoryBuilderSupport.java,1239,public Object invokeMethod(Object object, String methodName, Object arguments) {
src/main/groovy/util/FactoryBuilderSupport.java,1240,try {
src/main/groovy/util/FactoryBuilderSupport.java,1241,return delegate.invokeMethod(object, methodName, arguments);
src/main/groovy/util/FactoryBuilderSupport.java,1244,try {
src/main/groovy/util/FactoryBuilderSupport.java,1245,if (factory.getMetaClass().respondsTo(factory, methodName).isEmpty()) {
src/main/groovy/util/FactoryBuilderSupport.java,1247,return factory.invokeMethod(methodName, arguments);
src/main/groovy/util/FactoryBuilderSupport.java,1249,return InvokerHelper.invokeMethod(factory, methodName, arguments);
src/main/groovy/util/FactoryBuilderSupport.java,1253,Throwable root = mme;
src/main/groovy/util/FactoryBuilderSupport.java,1254,while (root.getCause() != null) {
src/main/groovy/util/FactoryBuilderSupport.java,1255,root = root.getCause();
src/main/groovy/util/FactoryBuilderSupport.java,1257,root.initCause(mme2);
src/main/groovy/util/FactoryBuilderSupport.java,1259,throw mme;
src/main/groovy/util/FactoryBuilderSupport.java,1264,public Object invokeMethod(Object object, String methodName, Object[] arguments) {
src/main/groovy/util/FactoryBuilderSupport.java,1265,try {
src/main/groovy/util/FactoryBuilderSupport.java,1266,return delegate.invokeMethod(object, methodName, arguments);
src/main/groovy/util/FactoryBuilderSupport.java,1269,try {
src/main/groovy/util/FactoryBuilderSupport.java,1270,if (factory.getMetaClass().respondsTo(factory, methodName).isEmpty()) {
src/main/groovy/util/FactoryBuilderSupport.java,1272,return factory.invokeMethod(methodName, arguments);
src/main/groovy/util/FactoryBuilderSupport.java,1274,return InvokerHelper.invokeMethod(factory, methodName, arguments);
src/main/groovy/util/FactoryBuilderSupport.java,1278,Throwable root = mme;
src/main/groovy/util/FactoryBuilderSupport.java,1279,while (root.getCause() != null) {
src/main/groovy/util/FactoryBuilderSupport.java,1280,root = root.getCause();
src/main/groovy/util/FactoryBuilderSupport.java,1282,root.initCause(mme2);
src/main/groovy/util/FactoryBuilderSupport.java,1284,throw mme;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,914,field = controller.getClassNode().getSuperClass().getDeclaredField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,920,field = controller.getClassNode().getDeclaredField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,950,ClassNode iterType = controller.getClassNode();
src/main/groovy/util/Node.java,130,child.parent = this;
src/main/groovy/util/Node.java,135,child.parent = null;
src/main/groovy/util/Node.java,156,getParentList(parent).remove(this);
src/main/groovy/util/Node.java,157,NodeBuilder b = new NodeBuilder();
src/main/groovy/util/Node.java,158,Node newNode = (Node) b.invokeMethod("dummyNode", c);
src/main/groovy/util/Node.java,159,List<Node> children = newNode.children();
src/main/groovy/util/Node.java,160,Node result = this;
src/main/groovy/util/Node.java,161,for (Node child : children) {
src/main/groovy/util/Node.java,162,result = parent.appendNode(child.name(), child.attributes(), child.value());
src/main/groovy/util/Node.java,175,List<Node> children = newNode.children();
src/main/groovy/util/Node.java,176,for (Node child : children) {
src/main/groovy/util/Node.java,177,parent.appendNode(child.name(), child.attributes(), child.value());
src/main/groovy/util/Node.java,229,StringBuffer buffer = null;
src/main/groovy/util/Node.java,237,if (buffer == null) {
src/main/groovy/util/Node.java,238,buffer = new StringBuffer();
src/main/groovy/util/Node.java,239,buffer.append(previousText);
src/main/groovy/util/Node.java,241,buffer.append(childText);
src/main/groovy/util/Node.java,245,if (buffer != null) {
src/main/groovy/util/Node.java,246,return buffer.toString();
src/main/groovy/util/Node.java,253,return "";
src/main/groovy/util/slurpersupport/Node.java,115,final StringBuffer buff = new StringBuffer();
src/main/groovy/util/slurpersupport/Node.java,116,final Iterator iter = this.children.iterator();
src/main/groovy/util/slurpersupport/Node.java,117,while (iter.hasNext()) {
src/main/groovy/util/slurpersupport/Node.java,118,final Object child = iter.next();
src/main/groovy/util/slurpersupport/Node.java,121,buff.append(((Node) child).text());
src/main/groovy/util/slurpersupport/Node.java,123,buff.append(child);
src/main/groovy/util/slurpersupport/Node.java,126,return buff.toString();
src/main/groovy/util/slurpersupport/Node.java,172,final Iterator iter = this.children.iterator();
src/main/groovy/util/slurpersupport/Node.java,173,while (iter.hasNext()) {
src/main/groovy/util/slurpersupport/Node.java,174,final Object child = iter.next();
src/main/groovy/util/slurpersupport/Node.java,213,final Iterator attrs = this.attributes.keySet().iterator();
src/main/groovy/util/slurpersupport/Node.java,215,while (attrs.hasNext()) {
src/main/groovy/util/slurpersupport/Node.java,216,final Object key = attrs.next();
src/main/groovy/util/slurpersupport/Node.java,282,final Iterator entries = tagMap.entrySet().iterator();
src/main/groovy/util/slurpersupport/Node.java,283,while (entries.hasNext()) {
src/main/groovy/util/slurpersupport/Node.java,284,final Map.Entry entry = (Map.Entry) entries.next();
src/main/groovy/util/slurpersupport/Node.java,294,final Iterator iter = this.children.iterator();
src/main/groovy/util/slurpersupport/Node.java,295,while (iter.hasNext()) {
src/main/groovy/util/slurpersupport/Node.java,296,final Object child = iter.next();
src/main/groovy/xml/dom/DOMCategory.java,237,StringBuffer sb = new StringBuffer();
src/main/groovy/xml/dom/DOMCategory.java,310,public static Element replaceNode(NodesHolder self, Closure c) {
src/main/groovy/xml/dom/DOMCategory.java,314,return replaceNode((Element) self.item(0), c);
src/main/groovy/xml/dom/DOMCategory.java,317,public static Element replaceNode(Element self, Closure c) {
src/main/groovy/xml/dom/DOMCategory.java,319,DOMBuilder b = new DOMBuilder(self.getOwnerDocument());
src/main/groovy/xml/dom/DOMCategory.java,320,Element newNode = (Element) b.invokeMethod("rootNode", c);
src/main/groovy/xml/dom/DOMCategory.java,323,Node n = newNode.getFirstChild();
src/main/groovy/xml/dom/DOMCategory.java,324,while (n != null && n.getNodeType() != Node.ELEMENT_NODE) {
src/main/groovy/xml/dom/DOMCategory.java,325,n = n.getNextSibling();
src/main/groovy/xml/dom/DOMCategory.java,328,if (n == null) throw new GroovyRuntimeException("Replacement node must be an element.");
src/main/groovy/xml/dom/DOMCategory.java,331,newNode = (Element) n;
src/main/groovy/xml/dom/DOMCategory.java,332,self.getParentNode().replaceChild(newNode, self);
src/main/groovy/xml/dom/DOMCategory.java,333,return newNode;
src/main/groovy/xml/dom/DOMCategory.java,345,parent.insertBefore(iter.next(), beforeNode);
src/main/groovy/xml/dom/DOMCategory.java,445,StringBuffer sb = new StringBuffer();
src/main/groovy/xml/dom/DOMCategory.java,483,for (int i = 0; i < nodeLists.size(); i++) {
src/main/groovy/xml/dom/DOMCategory.java,484,NodeList nl = (NodeList) nodeLists.get(i);
src/main/groovy/xml/dom/DOMCategory.java,492,for (int i = 0; i < nodeLists.size(); i++) {
src/main/groovy/xml/dom/DOMCategory.java,493,NodeList nl = (NodeList) nodeLists.get(i);
src/main/groovy/util/Node.java,168,List<Node> list = this.parent().children();
src/main/groovy/util/Node.java,170,List<Node> leftOvers = new ArrayList<Node>(list.subList(afterIndex + 1, list.size()));
src/main/groovy/util/Node.java,230,for (Iterator iter = coll.iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,231,Object child = iter.next();
src/main/groovy/util/Node.java,329,for (Iterator iter = children().iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,330,Object child = iter.next();
src/main/groovy/util/Node.java,350,for (Iterator iter = children().iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,351,Object child = iter.next();
src/main/groovy/util/Node.java,383,for (Iterator iter = InvokerHelper.asIterator(value); iter.hasNext();) {
src/main/groovy/util/Node.java,412,List working = new NodeList(nextLevelChildren);
src/main/groovy/util/Node.java,414,for (Iterator iter = working.iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,415,Node childNode = (Node) iter.next();
src/main/groovy/util/Node.java,426,for (Iterator iter = InvokerHelper.asIterator(value); iter.hasNext();) {
src/main/groovy/util/Node.java,180,for (Node child : leftOvers) {
src/main/groovy/util/Node.java,181,this.parent().children().add(child);
src/main/groovy/json/JsonLexer.java,111,currentContent.append((char) read);
src/main/groovy/json/JsonLexer.java,113,if (currentContent.charAt(currentContent.length() - 1) == '"' && currentContent.charAt(currentContent.length() - 2) != '\\' &&
src/main/groovy/sql/Sql.java,367,Object driverClassName = args.remove("driverClassName");
src/main/groovy/sql/Sql.java,368,if (driverClassName == null) driverClassName = args.remove("driver");
src/main/groovy/sql/Sql.java,369,if (driverClassName != null) loadDriver(driverClassName.toString());
src/main/groovy/sql/Sql.java,371,Object url = args.remove("url");
src/main/groovy/sql/Sql.java,372,if (url == null) throw new IllegalArgumentException("Argument 'url' is required");
src/main/groovy/sql/Sql.java,374,Properties props = (Properties) args.remove("properties");
src/main/groovy/sql/Sql.java,383,if (props != null) connection = DriverManager.getConnection(url.toString(), props);
src/main/groovy/sql/Sql.java,384,else if (args.containsKey("user")) {
src/main/groovy/sql/Sql.java,385,Object user = args.remove("user");
src/main/groovy/sql/Sql.java,386,Object password = args.remove("password");
src/main/groovy/sql/Sql.java,392,Sql result = (Sql) InvokerHelper.invokeConstructorOf(Sql.class, args);
src/main/org/codehaus/groovy/runtime/callsite/PojoMetaClassSite.java,55,&& version == classInfo.getVersion(); // metaClass is still valid
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1208,statement = labelledStatement(node);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1209,break;
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,186,& ~(isInterface ? Opcodes.ACC_ABSTRACT : 0));
src/main/groovy/lang/MetaClassImpl.java,1174,cacheEntry = new MetaMethodIndex.CacheEntry ();
src/main/groovy/lang/MetaClassImpl.java,1175,cacheEntry.params = params;
src/main/groovy/lang/MetaClassImpl.java,1176,cacheEntry.method = (MetaMethod) chooseMethod(e.name, methods, params);
src/main/groovy/lang/MetaClassImpl.java,1195,cacheEntry = new MetaMethodIndex.CacheEntry ();
src/main/groovy/lang/MetaClassImpl.java,1197,cacheEntry.params = classes;
src/main/groovy/lang/MetaClassImpl.java,1198,cacheEntry.method = (MetaMethod) chooseMethod(e.name, e.methodsForSuper, classes);
src/main/groovy/lang/MetaClassImpl.java,1199,if (cacheEntry.method.isAbstract()) cacheEntry.method = null;
src/main/groovy/lang/MetaClassImpl.java,1221,cacheEntry = new MetaMethodIndex.CacheEntry ();
src/main/groovy/lang/MetaClassImpl.java,1223,cacheEntry.params = classes;
src/main/groovy/lang/MetaClassImpl.java,1224,cacheEntry.method = (MetaMethod) chooseMethod(e.name, methods, classes);
src/main/groovy/lang/MetaClassImpl.java,1255,cacheEntry = new MetaMethodIndex.CacheEntry ();
src/main/groovy/lang/MetaClassImpl.java,1257,cacheEntry.params = classes;
src/main/groovy/lang/MetaClassImpl.java,1258,cacheEntry.method = pickStaticMethod(methodName, classes);
src/main/org/codehaus/groovy/runtime/metaclass/MetaMethodIndex.java,47,public Class [] params;
src/main/org/codehaus/groovy/runtime/metaclass/MetaMethodIndex.java,48,public MetaMethod method;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,300,boolean hasPrivate = false;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,301,boolean hasPublic = false;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,1225,Map<String, GenericsType> oldPNames = genericParameterNames;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,1226,genericParameterNames = new HashMap<String, GenericsType>(genericParameterNames);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,1227,currentClass = node;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,1281,genericParameterNames = oldPNames;
src/main/org/codehaus/groovy/ast/ASTNode.java,147,if (metaDataMap.size()==0) metaDataMap=null;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,541,arg = arg.replaceAll("\\\"", "\\\\\"");    // double quotation mark
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,543,return "\"" + arg + "\"";
src/main/org/codehaus/groovy/ast/GenericsType.java,17,package org.codehaus.groovy.ast;
src/main/org/codehaus/groovy/ast/GenericsType.java,25,public class GenericsType extends ASTNode {
src/main/org/codehaus/groovy/ast/GenericsType.java,26,private final ClassNode[] upperBounds;
src/main/org/codehaus/groovy/ast/GenericsType.java,27,private final ClassNode lowerBound;
src/main/org/codehaus/groovy/ast/GenericsType.java,28,private ClassNode type;
src/main/org/codehaus/groovy/ast/GenericsType.java,29,private String name;
src/main/org/codehaus/groovy/ast/GenericsType.java,30,private boolean placeholder;
src/main/org/codehaus/groovy/ast/GenericsType.java,31,private boolean resolved;
src/main/org/codehaus/groovy/ast/GenericsType.java,32,private boolean wildcard;
src/main/org/codehaus/groovy/ast/GenericsType.java,34,public GenericsType(ClassNode type, ClassNode[] upperBounds, ClassNode lowerBound) {
src/main/org/codehaus/groovy/ast/GenericsType.java,35,this.type = type;
src/main/org/codehaus/groovy/ast/GenericsType.java,36,this.name = type.isGenericsPlaceHolder() ? type.getUnresolvedName() : type.getName();
src/main/org/codehaus/groovy/ast/GenericsType.java,37,this.upperBounds = upperBounds;
src/main/org/codehaus/groovy/ast/GenericsType.java,38,this.lowerBound = lowerBound;
src/main/org/codehaus/groovy/ast/GenericsType.java,39,placeholder = type.isGenericsPlaceHolder();
src/main/org/codehaus/groovy/ast/GenericsType.java,40,resolved = false;
src/main/org/codehaus/groovy/ast/GenericsType.java,43,public GenericsType(ClassNode basicType) {
src/main/org/codehaus/groovy/ast/GenericsType.java,44,this(basicType, null, null);
src/main/org/codehaus/groovy/ast/GenericsType.java,47,public ClassNode getType() {
src/main/org/codehaus/groovy/ast/GenericsType.java,48,return type;
src/main/org/codehaus/groovy/ast/GenericsType.java,51,public void setType(ClassNode type) {
src/main/org/codehaus/groovy/ast/GenericsType.java,52,this.type = type;
src/main/org/codehaus/groovy/ast/GenericsType.java,55,public String toString() {
src/main/org/codehaus/groovy/ast/GenericsType.java,57,if (upperBounds != null) {
src/main/org/codehaus/groovy/ast/GenericsType.java,58,ret += " extends ";
src/main/org/codehaus/groovy/ast/GenericsType.java,59,for (int i = 0; i < upperBounds.length; i++) {
src/main/org/codehaus/groovy/ast/GenericsType.java,61,if (i + 1 < upperBounds.length) ret += " & ";
src/main/org/codehaus/groovy/ast/GenericsType.java,66,return ret;
src/main/org/codehaus/groovy/ast/GenericsType.java,69,public ClassNode[] getUpperBounds() {
src/main/org/codehaus/groovy/ast/GenericsType.java,70,return upperBounds;
src/main/org/codehaus/groovy/ast/GenericsType.java,73,public String getName() {
src/main/org/codehaus/groovy/ast/GenericsType.java,74,return name;
src/main/org/codehaus/groovy/ast/GenericsType.java,77,public boolean isPlaceholder() {
src/main/org/codehaus/groovy/ast/GenericsType.java,78,return placeholder;
src/main/org/codehaus/groovy/ast/GenericsType.java,81,public void setPlaceholder(boolean placeholder) {
src/main/org/codehaus/groovy/ast/GenericsType.java,82,this.placeholder = placeholder;
src/main/org/codehaus/groovy/ast/GenericsType.java,83,type.setGenericsPlaceHolder(placeholder);
src/main/org/codehaus/groovy/ast/GenericsType.java,86,public boolean isResolved() {
src/main/org/codehaus/groovy/ast/GenericsType.java,87,return resolved || placeholder;
src/main/org/codehaus/groovy/ast/GenericsType.java,90,public void setResolved(boolean res) {
src/main/org/codehaus/groovy/ast/GenericsType.java,91,resolved = res;
src/main/org/codehaus/groovy/ast/GenericsType.java,94,public void setName(String name) {
src/main/org/codehaus/groovy/ast/GenericsType.java,95,this.name = name;
src/main/org/codehaus/groovy/ast/GenericsType.java,98,public boolean isWildcard() {
src/main/org/codehaus/groovy/ast/GenericsType.java,99,return wildcard;
src/main/org/codehaus/groovy/ast/GenericsType.java,102,public void setWildcard(boolean wildcard) {
src/main/org/codehaus/groovy/ast/GenericsType.java,103,this.wildcard = wildcard;
src/main/org/codehaus/groovy/ast/GenericsType.java,106,public ClassNode getLowerBound() {
src/main/org/codehaus/groovy/ast/GenericsType.java,107,return lowerBound;
src/main/org/codehaus/groovy/classgen/InnerClassVisitor.java,73,innerClass.addConstructor(PUBLIC_SYNTHETIC, new Parameter[0], null, null);
src/main/org/codehaus/groovy/ant/Groovyc.java,751,jointOptions.add(optionStr.replace("-X", "-FX"));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2024,public static <T> Collection<T> collect(Collection<?> self, Collection<T> collection, Closure<? extends T> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2025,for (Iterator iter = self.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2026,collection.add(closure.call(iter.next()));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2027,if (closure.getDirective() == Closure.DONE) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1978,public static <T> List<T> collect(Object self, Closure<T> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1979,return (List<T>) collect(self, new ArrayList<T>(), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1992,public static <T> Collection<T> collect(Object self, Collection<T> collection, Closure<? extends T> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1993,for (Iterator iter = InvokerHelper.asIterator(self); iter.hasNext();) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1994,collection.add(closure.call(iter.next()));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1996,return collection;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2009,public static <T> List<T> collect(Collection<?> self, Closure<T> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2010,return (List<T>) collect(self, new ArrayList<T>(self.size()), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2031,return collection;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2041,public static List collectAll(Collection self, Closure closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2042,return collectNested(self, closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2056,public static List collectNested(Collection self, Closure closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2057,return (List) collectNested(self, new ArrayList(self.size()), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2067,public static Collection collectAll(Collection self, Collection collection, Closure closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2068,return collectNested(self, collection, closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2085,public static Collection collectNested(Collection self, Collection collection, Closure closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2089,collection.add(collectNested(c, createSimilarCollection(collection, c.size()), closure));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2091,collection.add(closure.call(item));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2093,if (closure.getDirective() == Closure.DONE) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2097,return collection;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2121,result.addAll(closure.call(next));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2123,return result;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2141,return collectMany(toList(self), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2159,return collectMany(toList(self), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2174,public static <T> Collection<T> collect(Map<?, ?> self, Collection<T> collection, Closure<? extends T> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2176,collection.add(callClosureForMapEntry(closure, entry));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2178,return collection;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2192,public static <T> List<T> collect(Map self, Closure<T> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2193,return (List<T>) collect(self, new ArrayList<T>(self.size()), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2213,public static <K, V> Map<K, V> collectEntries(Map<?, ?> self, Map<K, V> result, Closure<?> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2215,addEntry(result, callClosureForMapEntry(closure, entry));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2217,return result;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2236,public static Map<?, ?> collectEntries(Map<?, ?> self, Closure<?> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2237,return collectEntries(self, createSimilarMap(self), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2259,public static <K, V> Map<K, V> collectEntries(Collection<?> self, Map<K, V> result, Closure<?> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2261,addEntry(result, closure.call(next));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2263,return result;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2286,public static <K, V> Map<K, V> collectEntries(Object[] self, Map<K, V> result, Closure<?> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2287,return collectEntries(toList(self), result, closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2308,public static <K, V> Map<K, V> collectEntries(Collection<?> self, Closure<?> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2309,return collectEntries(self, new LinkedHashMap<K, V>(), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2331,public static <K, V> Map<K, V> collectEntries(Object[] self, Closure<?> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2332,return collectEntries(toList(self), new LinkedHashMap<K, V>(), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2118,public static <T> Collection<T> collectMany(Collection self, Closure<Collection<T>> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2119,Collection<T> result = createSimilarCollection(self);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2140,public static <T> Collection<T> collectMany(Object[] self, Closure<Collection<T>> closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2158,public static <T> Collection<T> collectMany(Iterator<Object> self, Closure<Collection<T>> closure) {
src/main/groovy/json/JsonToken.java,71,BigDecimal v = new BigDecimal(text);
src/main/groovy/json/JsonToken.java,72,if(v.compareTo(MAX_FLOAT) <= 0 && v.compareTo(MIN_FLOAT) >= 0) {
src/main/groovy/json/JsonToken.java,73,return new Float(text);
src/main/groovy/json/JsonToken.java,75,return new Double(text);
src/main/groovy/json/JsonToken.java,77,return v;
src/main/org/codehaus/groovy/classgen/GeneratorContext.java,76,return "_" + classShortName + methodName + "closure" + getNextInnerClassIdx();
src/main/org/codehaus/groovy/control/CompilationUnit.java,22,import org.codehaus.groovy.ast.ASTNode;
src/main/org/codehaus/groovy/control/CompilationUnit.java,23,import org.codehaus.groovy.ast.ClassNode;
src/main/org/codehaus/groovy/control/CompilationUnit.java,24,import org.codehaus.groovy.ast.CompileUnit;
src/main/org/codehaus/groovy/control/CompilationUnit.java,25,import org.codehaus.groovy.ast.ModuleNode;
src/main/org/codehaus/groovy/control/CompilationUnit.java,957,body.call(context, new GeneratorContext(this.ast), classNode);
src/main/org/codehaus/groovy/classgen/InnerClassVisitor.java,171,if (!isStatic(superInnerCN) && superCN.getOuterClass().equals(classNode.getOuterClass())) {
src/main/org/codehaus/groovy/ant/Groovyc.java,799,commandLineList.add("org.codehaus.groovy.tools.FileSystemCompiler");
src/main/org/codehaus/groovy/ant/Groovyc.java,903,FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames);
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,58,unit.getClassLoader().setResourceLoader(new GroovyResourceLoader() {
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,59,public URL loadGroovySource(String filename) throws MalformedURLException {
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,60,return null;
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,83,System.err.println("Copyright 2003-2010 The Codehaus. http://groovy.codehaus.org/");
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,148,doCompilation(configuration, null, filenames);
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,162,commandLineCompile(args);
src/main/groovy/json/JsonLexer.java,173,if (input.indexOf(92) > -1) {
src/main/groovy/json/JsonLexer.java,174,Matcher m = p.matcher(input
src/main/groovy/json/JsonLexer.java,182,.replaceAll("\\\\\"", "\""));
src/main/groovy/json/JsonLexer.java,185,StringBuffer sb = new StringBuffer();
src/main/groovy/json/JsonLexer.java,186,while (m.find()) {
src/main/groovy/json/JsonLexer.java,187,m.appendReplacement(sb, new String(new char[] { (char)Integer.valueOf(m.group(1), 16).intValue() }));
src/main/groovy/json/JsonLexer.java,189,m.appendTail(sb);
src/main/groovy/json/JsonLexer.java,191,return sb.toString();
src/main/groovy/json/JsonLexer.java,193,return input;
src/main/org/codehaus/groovy/classgen/asm/OptimizingStatementWriter.java,611,resultType = double_TYPE;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,16,package org.codehaus.groovy.transform;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,18,import groovy.lang.GroovyObject;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,19,import org.codehaus.groovy.GroovyBugError;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,20,import org.codehaus.groovy.ast.*;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,21,import org.codehaus.groovy.ast.expr.*;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,22,import org.codehaus.groovy.ast.stmt.ExpressionStatement;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,23,import org.codehaus.groovy.ast.stmt.ReturnStatement;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,24,import org.codehaus.groovy.classgen.Verifier;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,25,import org.codehaus.groovy.control.CompilePhase;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,26,import org.codehaus.groovy.control.SourceUnit;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,27,import org.codehaus.groovy.control.messages.SyntaxErrorMessage;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,28,import org.codehaus.groovy.syntax.SyntaxException;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,29,import org.codehaus.groovy.syntax.Token;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,30,import org.codehaus.groovy.syntax.Types;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,31,import org.objectweb.asm.Opcodes;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,33,import java.lang.reflect.Modifier;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,34,import java.util.ArrayList;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,35,import java.util.Arrays;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,36,import java.util.List;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,37,import java.util.Set;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,47,public class DelegateASTTransformation implements ASTTransformation, Opcodes {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,48,private static final ClassNode DEPRECATED_TYPE = ClassHelper.make(Deprecated.class);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,49,private static final ClassNode GROOVYOBJECT_TYPE = ClassHelper.make(GroovyObject.class);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,51,public void visit(ASTNode[] nodes, SourceUnit source) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,52,if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,53,throw new GroovyBugError("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,56,AnnotatedNode parent = (AnnotatedNode) nodes[1];
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,57,AnnotationNode node = (AnnotationNode) nodes[0];
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,59,if (parent instanceof FieldNode) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,60,FieldNode fieldNode = (FieldNode) parent;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,61,final ClassNode type = fieldNode.getType();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,62,final ClassNode owner = fieldNode.getOwner();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,63,if (type.equals(ClassHelper.OBJECT_TYPE) || type.equals(GROOVYOBJECT_TYPE)) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,64,addError("@Delegate field '" + fieldNode.getName() + "' has an inappropriate type: " + type.getName() +
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,66,return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,68,if (type.equals(owner)) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,69,addError("@Delegate field '" + fieldNode.getName() + "' has an inappropriate type: " + type.getName() +
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,71,return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,73,final List<MethodNode> fieldMethods = getAllMethods(type);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,74,for (ClassNode next : type.getAllInterfaces()) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,75,fieldMethods.addAll(getAllMethods(next));
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,77,final Expression deprecatedElement = node.getMember("deprecated");
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,78,final boolean deprecated = hasBooleanValue(deprecatedElement, true);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,80,final List<MethodNode> ownerMethods = getAllMethods(owner);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,81,for (MethodNode mn : fieldMethods) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,82,addDelegateMethod(fieldNode, owner, ownerMethods, mn, deprecated);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,85,for (PropertyNode prop : type.getProperties()) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,87,continue;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,88,String name = prop.getName();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,89,addGetterIfNeeded(fieldNode, owner, prop, name);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,90,addSetterIfNeeded(fieldNode, owner, prop, name);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,93,final Expression interfacesElement = node.getMember("interfaces");
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,94,if (hasBooleanValue(interfacesElement, false)) return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,96,final Set<ClassNode> allInterfaces = type.getAllInterfaces();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,97,final Set<ClassNode> ownerIfaces = owner.getAllInterfaces();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,98,for (ClassNode iface : allInterfaces) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,99,if (Modifier.isPublic(iface.getModifiers()) && !ownerIfaces.contains(iface)) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,100,final ClassNode[] ifaces = owner.getInterfaces();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,101,final ClassNode[] newIfaces = new ClassNode[ifaces.length + 1];
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,102,System.arraycopy(ifaces, 0, newIfaces, 0, ifaces.length);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,103,newIfaces[ifaces.length] = iface;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,104,owner.setInterfaces(newIfaces);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,110,private List<MethodNode> getAllMethods(ClassNode type) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,111,ClassNode node = type;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,112,List<MethodNode> result = new ArrayList<MethodNode>();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,113,while (node != null) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,114,result.addAll(node.getMethods());
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,115,node = node.getSuperClass();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,117,return result;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,120,private boolean hasBooleanValue(Expression expression, boolean bool) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,121,return expression instanceof ConstantExpression && ((ConstantExpression) expression).getValue().equals(bool);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,124,private void addSetterIfNeeded(FieldNode fieldNode, ClassNode owner, PropertyNode prop, String name) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,125,String setterName = "set" + Verifier.capitalize(name);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,126,if ((prop.getModifiers() & ACC_FINAL) == 0 && owner.getSetterMethod(setterName) == null) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,127,owner.addMethod(setterName,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,128,ACC_PUBLIC,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,129,ClassHelper.VOID_TYPE,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,130,new Parameter[]{new Parameter(nonGeneric(prop.getType()), "value")},
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,131,null,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,132,new ExpressionStatement(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,133,new BinaryExpression(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,134,new PropertyExpression(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,135,new VariableExpression(fieldNode),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,136,name),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,137,Token.newSymbol(Types.EQUAL, -1, -1),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,138,new VariableExpression("value"))));
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,142,private void addGetterIfNeeded(FieldNode fieldNode, ClassNode owner, PropertyNode prop, String name) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,143,String getterName = "get" + Verifier.capitalize(name);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,144,if (owner.getGetterMethod(getterName) == null) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,145,owner.addMethod(getterName,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,146,ACC_PUBLIC,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,147,nonGeneric(prop.getType()),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,148,Parameter.EMPTY_ARRAY,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,149,null,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,150,new ReturnStatement(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,151,new PropertyExpression(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,152,new VariableExpression(fieldNode),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,153,name)));
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,157,private void addDelegateMethod(FieldNode fieldNode, ClassNode owner, List<MethodNode> ownMethods, MethodNode candidate, boolean deprecated) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,159,return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,162,return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,165,for (MethodNode mn : GROOVYOBJECT_TYPE.getMethods()) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,166,if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor())) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,167,return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,172,for (MethodNode mn : owner.getMethods()) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,173,if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor())) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,174,return;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,180,MethodNode existingNode = null;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,181,for (MethodNode mn : ownMethods) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,182,if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor()) && !mn.isAbstract() && !mn.isStatic()) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,183,existingNode = mn;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,184,break;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,187,if (existingNode == null || existingNode.getCode() == null) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,188,final ArgumentListExpression args = new ArgumentListExpression();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,189,final Parameter[] params = candidate.getParameters();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,190,final Parameter[] newParams = new Parameter[params.length];
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,191,for (int i = 0; i < newParams.length; i++) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,192,Parameter newParam = new Parameter(nonGeneric(params[i].getType()), params[i].getName());
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,193,newParam.setInitialExpression(params[i].getInitialExpression());
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,194,newParams[i] = newParam;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,195,args.addExpression(new VariableExpression(newParam));
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,198,MethodNode newMethod = owner.addMethod(candidate.getName(),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,199,candidate.getModifiers() & (~ACC_ABSTRACT) & (~ACC_NATIVE),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,200,nonGeneric(candidate.getReturnType()),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,201,newParams,
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,202,candidate.getExceptions(),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,203,new ExpressionStatement(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,204,new MethodCallExpression(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,205,new VariableExpression(fieldNode),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,206,candidate.getName(),
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,207,args)));
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,208,newMethod.setGenericsTypes(candidate.getGenericsTypes());
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,212,private ClassNode nonGeneric(ClassNode type) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,213,if (type.isUsingGenerics()) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,214,final ClassNode nonGen = ClassHelper.makeWithoutCaching(type.getName());
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,215,nonGen.setRedirect(type);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,216,nonGen.setGenericsTypes(null);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,217,nonGen.setUsingGenerics(false);
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,218,return nonGen;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,220,return type;
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,224,public void addError(String msg, ASTNode expr, SourceUnit source) {
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,225,int line = expr.getLineNumber();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,226,int col = expr.getColumnNumber();
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,227,source.getErrorCollector().addErrorAndContinue(
src/main/org/codehaus/groovy/transform/DelegateASTTransformation.java,229,);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2037,ConstantExpression constantExpression = new ConstantExpression(value);
src/main/groovy/grape/GrabAnnotationTransformation.java,68,private static final List<String> GRAB_OPTIONAL = Arrays.asList("classifier", "transitive", "conf", "ext", "type", "changing", "force");
src/main/groovy/grape/GrabAnnotationTransformation.java,384,if (attrs.group(2) == null || attrs.group(3) == null) continue;
src/main/groovy/grape/GrabAnnotationTransformation.java,385,node.addMember(attrs.group(2), new ConstantExpression(attrs.group(3)));
src/main/groovy/lang/GroovyClassLoader.java,777,return parseClass(source.openStream(), className);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,281,mv.visitVarInsn(ALOAD, 0);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,282,mv.visitMethodInsn(INVOKESPECIAL, BytecodeHelper.getClassInternalName(controller.getClassNode().getSuperClass()), "<init>", "()V");
src/main/org/codehaus/groovy/classgen/Verifier.java,814,if (!statements.isEmpty()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,815,Statement code = constructorNode.getCode();
src/main/org/codehaus/groovy/classgen/Verifier.java,816,BlockStatement block = new BlockStatement();
src/main/org/codehaus/groovy/classgen/Verifier.java,817,List<Statement> otherStatements = block.getStatements();
src/main/org/codehaus/groovy/classgen/Verifier.java,818,if (code instanceof BlockStatement) {
src/main/org/codehaus/groovy/classgen/Verifier.java,819,block = (BlockStatement) code;
src/main/org/codehaus/groovy/classgen/Verifier.java,820,otherStatements = block.getStatements();
src/main/org/codehaus/groovy/classgen/Verifier.java,822,otherStatements.add(code);
src/main/org/codehaus/groovy/classgen/Verifier.java,824,if (!otherStatements.isEmpty()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,825,if (first != null) {
src/main/org/codehaus/groovy/classgen/Verifier.java,827,otherStatements.remove(0);
src/main/org/codehaus/groovy/classgen/Verifier.java,828,statements.add(0, firstStatement);
src/main/org/codehaus/groovy/classgen/Verifier.java,830,Statement stmtThis$0 = getImplicitThis$0StmtIfInnerClass(otherStatements);
src/main/org/codehaus/groovy/classgen/Verifier.java,831,if (stmtThis$0 != null) {
src/main/org/codehaus/groovy/classgen/Verifier.java,834,statements.add(1, stmtThis$0);
src/main/org/codehaus/groovy/classgen/Verifier.java,836,statements.addAll(otherStatements);
src/main/org/codehaus/groovy/classgen/Verifier.java,838,BlockStatement newBlock = new BlockStatement(statements, block.getVariableScope());
src/main/org/codehaus/groovy/classgen/Verifier.java,839,newBlock.setSourcePosition(block);
src/main/org/codehaus/groovy/classgen/Verifier.java,840,constructorNode.setCode(newBlock);
src/main/org/codehaus/groovy/classgen/Verifier.java,872,Expression expr = ((ExpressionStatement) bstmt).getExpression();
src/main/org/codehaus/groovy/classgen/Verifier.java,873,if (expr instanceof BinaryExpression) {
src/main/org/codehaus/groovy/classgen/Verifier.java,874,Expression lExpr = ((BinaryExpression) expr).getLeftExpression();
src/main/org/codehaus/groovy/classgen/Verifier.java,875,if (lExpr instanceof FieldExpression) {
src/main/org/codehaus/groovy/classgen/Verifier.java,876,if ("this$0".equals(((FieldExpression) lExpr).getFieldName())) {
src/main/org/codehaus/groovy/classgen/Verifier.java,877,stmts.remove(bstmt); // remove from here and let the caller reposition it
src/main/org/codehaus/groovy/classgen/Verifier.java,878,return bstmt;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,8350,if (coercedEquals(o1, o2)) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,8370,if (!coercedEquals(t, operand)) ansSet.add(t);
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,173,private static Object[] fitToVargs(Object[] argumentArray, CachedClass[] paramTypes) {
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,174,Class vargsClass = ReflectionCache.autoboxType(paramTypes[paramTypes.length - 1].getTheClass().getComponentType());
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,180,Object vargs = MetaClassHelper.makeArray(null, vargsClass, 0);
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,190,Object wrapped = MetaClassHelper.makeArray(lastArgument, vargsClass, 1);
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,191,System.arraycopy(argumentArray, argumentArray.length - 1, wrapped, 0, 1);
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,207,int numberOfVargs = argumentArray.length - paramTypes.length;
src/main/org/codehaus/groovy/reflection/ParameterTypes.java,208,Object vargs = MetaClassHelper.makeCommonArray(argumentArray, paramTypes.length - 1, vargsClass);
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,477,super.visitConstructorOrMethod(node, isConstructor);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,16,package org.codehaus.groovy.runtime;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,18,import java.lang.reflect.Method;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,19,import java.util.Map;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,21,import groovy.lang.Closure;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,30,public class ConvertedMap extends ConversionHandler {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,37,protected ConvertedMap(Map closures) {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,38,super(closures);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,42,throws Throwable {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,43,Map m = (Map) getDelegate();
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,44,Closure cl = (Closure) m.get(method.getName());
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,45,if (cl == null) {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,46,throw new UnsupportedOperationException();
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,48,return cl.call(args);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,51,public String toString() {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,52,return DefaultGroovyMethods.toString(getDelegate());
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,55,protected boolean checkMethod(Method method) {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,56,return isCoreObjectMethod(method);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,68,public static boolean isCoreObjectMethod(Method method) {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,69,return ConversionHandler.isCoreObjectMethod(method) && !"toString".equals(method.getName());
src/main/org/codehaus/groovy/reflection/CachedClass.java,16,package org.codehaus.groovy.reflection;
src/main/org/codehaus/groovy/reflection/CachedClass.java,18,import groovy.lang.*;
src/main/org/codehaus/groovy/reflection/CachedClass.java,20,import org.codehaus.groovy.classgen.asm.BytecodeHelper;
src/main/org/codehaus/groovy/reflection/CachedClass.java,21,import org.codehaus.groovy.runtime.callsite.CallSiteClassLoader;
src/main/org/codehaus/groovy/reflection/CachedClass.java,22,import org.codehaus.groovy.util.LazyReference;
src/main/org/codehaus/groovy/reflection/CachedClass.java,23,import org.codehaus.groovy.util.FastArray;
src/main/org/codehaus/groovy/reflection/CachedClass.java,24,import org.codehaus.groovy.util.ReferenceBundle;
src/main/org/codehaus/groovy/reflection/CachedClass.java,26,import java.lang.reflect.AccessibleObject;
src/main/org/codehaus/groovy/reflection/CachedClass.java,27,import java.lang.reflect.Constructor;
src/main/org/codehaus/groovy/reflection/CachedClass.java,28,import java.lang.reflect.Field;
src/main/org/codehaus/groovy/reflection/CachedClass.java,29,import java.lang.reflect.Method;
src/main/org/codehaus/groovy/reflection/CachedClass.java,30,import java.security.AccessController;
src/main/org/codehaus/groovy/reflection/CachedClass.java,31,import java.security.PrivilegedAction;
src/main/org/codehaus/groovy/reflection/CachedClass.java,32,import java.util.*;
src/main/org/codehaus/groovy/reflection/CachedClass.java,37,public class CachedClass {
src/main/org/codehaus/groovy/reflection/CachedClass.java,38,private final Class cachedClass;
src/main/org/codehaus/groovy/reflection/CachedClass.java,39,public ClassInfo classInfo;
src/main/org/codehaus/groovy/reflection/CachedClass.java,41,private static ReferenceBundle softBundle = ReferenceBundle.getSoftBundle();
src/main/org/codehaus/groovy/reflection/CachedClass.java,43,private final LazyReference<CachedField[]> fields = new LazyReference<CachedField[]>(softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,44,public CachedField[] initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,46,AccessController.doPrivileged(new PrivilegedAction/*<Field[]>*/() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,47,public /*Field[]*/ Object run() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,48,final Field[] df = getTheClass().getDeclaredFields();
src/main/org/codehaus/groovy/reflection/CachedClass.java,49,try {
src/main/org/codehaus/groovy/reflection/CachedClass.java,50,AccessibleObject.setAccessible(df, true);
src/main/org/codehaus/groovy/reflection/CachedClass.java,54,return df;
src/main/org/codehaus/groovy/reflection/CachedClass.java,57,CachedField [] fields = new CachedField[declaredFields.length];
src/main/org/codehaus/groovy/reflection/CachedClass.java,59,fields[i] = new CachedField(declaredFields[i]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,60,return fields;
src/main/org/codehaus/groovy/reflection/CachedClass.java,64,private LazyReference<CachedConstructor[]> constructors = new LazyReference<CachedConstructor[]>(softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,65,public CachedConstructor[] initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,67,AccessController.doPrivileged(new PrivilegedAction/*<Constructor[]>*/() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,68,public /*Constructor[]*/ Object run() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,69,return getTheClass().getDeclaredConstructors();
src/main/org/codehaus/groovy/reflection/CachedClass.java,72,CachedConstructor [] constructors = new CachedConstructor[declaredConstructors.length];
src/main/org/codehaus/groovy/reflection/CachedClass.java,74,constructors[i] = new CachedConstructor(CachedClass.this, declaredConstructors[i]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,75,return constructors;
src/main/org/codehaus/groovy/reflection/CachedClass.java,79,private LazyReference<CachedMethod[]> methods = new LazyReference<CachedMethod[]>(softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,80,public CachedMethod[] initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,82,AccessController.doPrivileged(new PrivilegedAction/*<Method[]>*/() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,83,public /*Method[]*/ Object run() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,84,final Method[] dm = getTheClass().getDeclaredMethods();
src/main/org/codehaus/groovy/reflection/CachedClass.java,85,try {
src/main/org/codehaus/groovy/reflection/CachedClass.java,86,AccessibleObject.setAccessible(dm, true);
src/main/org/codehaus/groovy/reflection/CachedClass.java,90,return dm;
src/main/org/codehaus/groovy/reflection/CachedClass.java,93,List<CachedMethod> methods = new ArrayList<CachedMethod>(declaredMethods.length);
src/main/org/codehaus/groovy/reflection/CachedClass.java,94,List<CachedMethod> mopMethods = new ArrayList<CachedMethod>(declaredMethods.length);
src/main/org/codehaus/groovy/reflection/CachedClass.java,95,for (int i = 0; i != declaredMethods.length; ++i) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,96,final CachedMethod cachedMethod = new CachedMethod(CachedClass.this, declaredMethods[i]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,97,final String name = cachedMethod.getName();
src/main/org/codehaus/groovy/reflection/CachedClass.java,99,if (name.indexOf('+') >= 0) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,101,continue;
src/main/org/codehaus/groovy/reflection/CachedClass.java,103,continue;
src/main/org/codehaus/groovy/reflection/CachedClass.java,107,mopMethods.add(cachedMethod);
src/main/org/codehaus/groovy/reflection/CachedClass.java,108,else
src/main/org/codehaus/groovy/reflection/CachedClass.java,109,methods.add(cachedMethod);
src/main/org/codehaus/groovy/reflection/CachedClass.java,111,CachedMethod [] resMethods = methods.toArray(new CachedMethod[methods.size()]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,112,Arrays.sort(resMethods);
src/main/org/codehaus/groovy/reflection/CachedClass.java,114,final CachedClass superClass = getCachedSuperClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,115,if (superClass != null) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,116,superClass.getMethods();
src/main/org/codehaus/groovy/reflection/CachedClass.java,117,final CachedMethod[] superMopMethods = superClass.mopMethods;
src/main/org/codehaus/groovy/reflection/CachedClass.java,119,mopMethods.add(superMopMethods[i]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,121,CachedClass.this.mopMethods = mopMethods.toArray(new CachedMethod[mopMethods.size()]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,122,Arrays.sort(CachedClass.this.mopMethods, CachedMethodComparatorByName.INSTANCE);
src/main/org/codehaus/groovy/reflection/CachedClass.java,124,return resMethods;
src/main/org/codehaus/groovy/reflection/CachedClass.java,128,private LazyReference<CachedClass> cachedSuperClass = new LazyReference<CachedClass>(softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,129,public CachedClass initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,131,return ReflectionCache.getCachedClass(getTheClass().getSuperclass());
src/main/org/codehaus/groovy/reflection/CachedClass.java,132,else
src/main/org/codehaus/groovy/reflection/CachedClass.java,134,return ReflectionCache.OBJECT_CLASS;
src/main/org/codehaus/groovy/reflection/CachedClass.java,135,else
src/main/org/codehaus/groovy/reflection/CachedClass.java,136,return ReflectionCache.OBJECT_ARRAY_CLASS;
src/main/org/codehaus/groovy/reflection/CachedClass.java,140,private final LazyReference<CallSiteClassLoader> callSiteClassLoader = new LazyReference<CallSiteClassLoader>(softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,141,public CallSiteClassLoader initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,142,return
src/main/org/codehaus/groovy/reflection/CachedClass.java,143,AccessController.doPrivileged(new PrivilegedAction<CallSiteClassLoader>() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,144,public CallSiteClassLoader run() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,145,return new CallSiteClassLoader(CachedClass.this.cachedClass);
src/main/org/codehaus/groovy/reflection/CachedClass.java,151,private final LazyReference<LinkedList<ClassInfo>> hierarchy = new LazyReference<LinkedList<ClassInfo>>(softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,152,public LinkedList<ClassInfo> initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,153,Set<ClassInfo> res = new LinkedHashSet<ClassInfo> ();
src/main/org/codehaus/groovy/reflection/CachedClass.java,155,res.add(classInfo);
src/main/org/codehaus/groovy/reflection/CachedClass.java,158,res.addAll(iface.getHierarchy());
src/main/org/codehaus/groovy/reflection/CachedClass.java,160,final CachedClass superClass = getCachedSuperClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,162,res.addAll(superClass.getHierarchy());
src/main/org/codehaus/groovy/reflection/CachedClass.java,165,res.add(ReflectionCache.OBJECT_CLASS.classInfo);
src/main/org/codehaus/groovy/reflection/CachedClass.java,167,return new LinkedList<ClassInfo> (res);
src/main/org/codehaus/groovy/reflection/CachedClass.java,171,static final MetaMethod[] EMPTY = new MetaMethod[0];
src/main/org/codehaus/groovy/reflection/CachedClass.java,173,int hashCode;
src/main/org/codehaus/groovy/reflection/CachedClass.java,175,public  CachedMethod [] mopMethods;
src/main/org/codehaus/groovy/reflection/CachedClass.java,176,public static final CachedClass[] EMPTY_ARRAY = new CachedClass[0];
src/main/org/codehaus/groovy/reflection/CachedClass.java,178,private final LazyReference<Set<CachedClass>> declaredInterfaces = new LazyReference<Set<CachedClass>> (softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,179,public Set<CachedClass> initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,180,Set<CachedClass> res = new HashSet<CachedClass> (0);
src/main/org/codehaus/groovy/reflection/CachedClass.java,182,Class[] classes = getTheClass().getInterfaces();
src/main/org/codehaus/groovy/reflection/CachedClass.java,183,for (Class cls : classes) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,184,res.add(ReflectionCache.getCachedClass(cls));
src/main/org/codehaus/groovy/reflection/CachedClass.java,186,return res;
src/main/org/codehaus/groovy/reflection/CachedClass.java,190,private final LazyReference<Set<CachedClass>> interfaces = new LazyReference<Set<CachedClass>> (softBundle) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,191,public Set<CachedClass> initValue() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,192,Set<CachedClass> res = new HashSet<CachedClass> (0);
src/main/org/codehaus/groovy/reflection/CachedClass.java,195,res.add(CachedClass.this);
src/main/org/codehaus/groovy/reflection/CachedClass.java,197,Class[] classes = getTheClass().getInterfaces();
src/main/org/codehaus/groovy/reflection/CachedClass.java,198,for (Class cls : classes) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,199,final CachedClass aClass = ReflectionCache.getCachedClass(cls);
src/main/org/codehaus/groovy/reflection/CachedClass.java,201,res.addAll(aClass.getInterfaces());
src/main/org/codehaus/groovy/reflection/CachedClass.java,204,final CachedClass superClass = getCachedSuperClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,206,res.addAll(superClass.getInterfaces());
src/main/org/codehaus/groovy/reflection/CachedClass.java,208,return res;
src/main/org/codehaus/groovy/reflection/CachedClass.java,212,public final boolean isArray;
src/main/org/codehaus/groovy/reflection/CachedClass.java,213,public final boolean isPrimitive;
src/main/org/codehaus/groovy/reflection/CachedClass.java,214,public final int modifiers;
src/main/org/codehaus/groovy/reflection/CachedClass.java,215,int distance = -1;
src/main/org/codehaus/groovy/reflection/CachedClass.java,216,public final boolean isInterface;
src/main/org/codehaus/groovy/reflection/CachedClass.java,217,public final boolean isNumber;
src/main/org/codehaus/groovy/reflection/CachedClass.java,219,public CachedClass(Class klazz, ClassInfo classInfo) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,220,cachedClass = klazz;
src/main/org/codehaus/groovy/reflection/CachedClass.java,221,this.classInfo = classInfo;
src/main/org/codehaus/groovy/reflection/CachedClass.java,222,isArray = klazz.isArray();
src/main/org/codehaus/groovy/reflection/CachedClass.java,223,isPrimitive = klazz.isPrimitive();
src/main/org/codehaus/groovy/reflection/CachedClass.java,224,modifiers = klazz.getModifiers();
src/main/org/codehaus/groovy/reflection/CachedClass.java,225,isInterface = klazz.isInterface();
src/main/org/codehaus/groovy/reflection/CachedClass.java,226,isNumber = Number.class.isAssignableFrom(klazz);
src/main/org/codehaus/groovy/reflection/CachedClass.java,228,for (CachedClass inf : getInterfaces()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,229,ReflectionCache.isAssignableFrom(klazz, inf.cachedClass);
src/main/org/codehaus/groovy/reflection/CachedClass.java,232,for (CachedClass cur = this; cur != null; cur = cur.getCachedSuperClass()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,233,ReflectionCache.setAssignableFrom(cur.cachedClass, klazz);
src/main/org/codehaus/groovy/reflection/CachedClass.java,237,public CachedClass getCachedSuperClass() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,238,return cachedSuperClass.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,241,public Set<CachedClass> getInterfaces() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,242,return interfaces.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,245,public Set<CachedClass> getDeclaredInterfaces() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,246,return declaredInterfaces.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,249,public CachedMethod[] getMethods() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,250,return methods.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,253,public CachedField[] getFields() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,254,return fields.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,257,public CachedConstructor[] getConstructors() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,258,return constructors.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,261,public CachedMethod searchMethods(String name, CachedClass[] parameterTypes) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,262,CachedMethod[] methods = getMethods();
src/main/org/codehaus/groovy/reflection/CachedClass.java,264,CachedMethod res = null;
src/main/org/codehaus/groovy/reflection/CachedClass.java,265,for (CachedMethod m : methods) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,269,res = m;
src/main/org/codehaus/groovy/reflection/CachedClass.java,272,return res;
src/main/org/codehaus/groovy/reflection/CachedClass.java,275,public int getModifiers() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,276,return modifiers;
src/main/org/codehaus/groovy/reflection/CachedClass.java,279,public Object coerceArgument(Object argument) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,280,return argument;
src/main/org/codehaus/groovy/reflection/CachedClass.java,283,public int getSuperClassDistance() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,284,synchronized (getTheClass()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,285,if (distance == -1) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,286,int distance = 0;
src/main/org/codehaus/groovy/reflection/CachedClass.java,287,for (Class klazz= getTheClass(); klazz != null; klazz = klazz.getSuperclass()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,288,distance++;
src/main/org/codehaus/groovy/reflection/CachedClass.java,290,this.distance = distance;
src/main/org/codehaus/groovy/reflection/CachedClass.java,292,return distance;
src/main/org/codehaus/groovy/reflection/CachedClass.java,296,public int hashCode() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,297,if (hashCode == 0) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,298,hashCode = super.hashCode();
src/main/org/codehaus/groovy/reflection/CachedClass.java,300,hashCode = 0xcafebebe;
src/main/org/codehaus/groovy/reflection/CachedClass.java,302,return hashCode;
src/main/org/codehaus/groovy/reflection/CachedClass.java,305,public boolean isPrimitive() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,306,return isPrimitive;
src/main/org/codehaus/groovy/reflection/CachedClass.java,309,public boolean isVoid() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,310,return getTheClass() == void.class;
src/main/org/codehaus/groovy/reflection/CachedClass.java,313,public boolean isInterface() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,314,return isInterface;
src/main/org/codehaus/groovy/reflection/CachedClass.java,317,public String getName() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,318,return getTheClass().getName();
src/main/org/codehaus/groovy/reflection/CachedClass.java,321,public String getTypeDescription() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,322,return BytecodeHelper.getTypeDescription(getTheClass());
src/main/org/codehaus/groovy/reflection/CachedClass.java,325,public final Class getTheClass() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,326,return cachedClass;
src/main/org/codehaus/groovy/reflection/CachedClass.java,329,public MetaMethod[] getNewMetaMethods() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,330,List<MetaMethod> arr = new ArrayList<MetaMethod>();
src/main/org/codehaus/groovy/reflection/CachedClass.java,331,arr.addAll(Arrays.asList(classInfo.newMetaMethods));
src/main/org/codehaus/groovy/reflection/CachedClass.java,333,final MetaClass metaClass = classInfo.getStrongMetaClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,334,if (metaClass != null && metaClass instanceof ExpandoMetaClass) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,335,arr.addAll(((ExpandoMetaClass)metaClass).getExpandoMethods());
src/main/org/codehaus/groovy/reflection/CachedClass.java,338,if (isInterface) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,339,MetaClass mc = ReflectionCache.OBJECT_CLASS.classInfo.getStrongMetaClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,340,addSubclassExpandos(arr, mc);
src/main/org/codehaus/groovy/reflection/CachedClass.java,342,else {
src/main/org/codehaus/groovy/reflection/CachedClass.java,343,for (CachedClass cls = this; cls != null; cls = cls.getCachedSuperClass()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,344,MetaClass mc = cls.classInfo.getStrongMetaClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,345,addSubclassExpandos(arr, mc);
src/main/org/codehaus/groovy/reflection/CachedClass.java,349,for (CachedClass inf : getInterfaces()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,350,MetaClass mc = inf.classInfo.getStrongMetaClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,351,addSubclassExpandos(arr, mc);
src/main/org/codehaus/groovy/reflection/CachedClass.java,354,return arr.toArray(new MetaMethod[arr.size()]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,357,private void addSubclassExpandos(List<MetaMethod> arr, MetaClass mc) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,358,if (mc != null && mc instanceof ExpandoMetaClass) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,359,ExpandoMetaClass emc = (ExpandoMetaClass) mc;
src/main/org/codehaus/groovy/reflection/CachedClass.java,360,for (Object mm : emc.getExpandoSubclassMethods()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,361,if (mm instanceof MetaMethod) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,362,MetaMethod method = (MetaMethod) mm;
src/main/org/codehaus/groovy/reflection/CachedClass.java,364,arr.add(method);
src/main/org/codehaus/groovy/reflection/CachedClass.java,366,else {
src/main/org/codehaus/groovy/reflection/CachedClass.java,367,FastArray farr = (FastArray) mm;
src/main/org/codehaus/groovy/reflection/CachedClass.java,368,for (int i = 0; i != farr.size; ++i) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,369,MetaMethod method = (MetaMethod) farr.get(i);
src/main/org/codehaus/groovy/reflection/CachedClass.java,371,arr.add(method);
src/main/org/codehaus/groovy/reflection/CachedClass.java,378,public void setNewMopMethods(List<MetaMethod> arr) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,379,final MetaClass metaClass = classInfo.getStrongMetaClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,380,if (metaClass != null) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,381,if (metaClass.getClass() == MetaClassImpl.class) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,382,classInfo.setStrongMetaClass(null);
src/main/org/codehaus/groovy/reflection/CachedClass.java,383,updateSetNewMopMethods(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,384,classInfo.setStrongMetaClass(new MetaClassImpl(metaClass.getTheClass()));
src/main/org/codehaus/groovy/reflection/CachedClass.java,385,return;
src/main/org/codehaus/groovy/reflection/CachedClass.java,388,if (metaClass.getClass() == ExpandoMetaClass.class) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,389,classInfo.setStrongMetaClass(null);
src/main/org/codehaus/groovy/reflection/CachedClass.java,390,updateSetNewMopMethods(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,391,ExpandoMetaClass newEmc = new ExpandoMetaClass(metaClass.getTheClass());
src/main/org/codehaus/groovy/reflection/CachedClass.java,392,newEmc.initialize();
src/main/org/codehaus/groovy/reflection/CachedClass.java,393,classInfo.setStrongMetaClass(newEmc);
src/main/org/codehaus/groovy/reflection/CachedClass.java,394,return;
src/main/org/codehaus/groovy/reflection/CachedClass.java,397,throw new GroovyRuntimeException("Can't add methods to class " + getTheClass().getName() + ". Strong custom meta class already set.");
src/main/org/codehaus/groovy/reflection/CachedClass.java,400,classInfo.setWeakMetaClass(null);
src/main/org/codehaus/groovy/reflection/CachedClass.java,401,updateSetNewMopMethods(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,404,private void updateSetNewMopMethods(List<MetaMethod> arr) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,405,if (arr != null) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,406,final MetaMethod[] metaMethods = arr.toArray(new MetaMethod[arr.size()]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,407,classInfo.dgmMetaMethods = metaMethods;
src/main/org/codehaus/groovy/reflection/CachedClass.java,408,classInfo.newMetaMethods = metaMethods;
src/main/org/codehaus/groovy/reflection/CachedClass.java,410,else
src/main/org/codehaus/groovy/reflection/CachedClass.java,411,classInfo.newMetaMethods = classInfo.dgmMetaMethods;
src/main/org/codehaus/groovy/reflection/CachedClass.java,414,public void addNewMopMethods(List<MetaMethod> arr) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,415,final MetaClass metaClass = classInfo.getStrongMetaClass();
src/main/org/codehaus/groovy/reflection/CachedClass.java,416,if (metaClass != null) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,417,if (metaClass.getClass() == MetaClassImpl.class) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,418,classInfo.setStrongMetaClass(null);
src/main/org/codehaus/groovy/reflection/CachedClass.java,419,updateAddNewMopMethods(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,420,classInfo.setStrongMetaClass(new MetaClassImpl(metaClass.getTheClass()));
src/main/org/codehaus/groovy/reflection/CachedClass.java,421,return;
src/main/org/codehaus/groovy/reflection/CachedClass.java,424,if (metaClass.getClass() == ExpandoMetaClass.class) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,425,ExpandoMetaClass emc = (ExpandoMetaClass)metaClass;
src/main/org/codehaus/groovy/reflection/CachedClass.java,426,classInfo.setStrongMetaClass(null);
src/main/org/codehaus/groovy/reflection/CachedClass.java,427,updateAddNewMopMethods(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,428,ExpandoMetaClass newEmc = new ExpandoMetaClass(metaClass.getTheClass());
src/main/org/codehaus/groovy/reflection/CachedClass.java,429,for (MetaMethod mm : emc.getExpandoMethods()) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,430,newEmc.registerInstanceMethod(mm);
src/main/org/codehaus/groovy/reflection/CachedClass.java,432,newEmc.initialize();
src/main/org/codehaus/groovy/reflection/CachedClass.java,433,classInfo.setStrongMetaClass(newEmc);
src/main/org/codehaus/groovy/reflection/CachedClass.java,434,return;
src/main/org/codehaus/groovy/reflection/CachedClass.java,437,throw new GroovyRuntimeException("Can't add methods to class " + getTheClass().getName() + ". Strong custom meta class already set.");
src/main/org/codehaus/groovy/reflection/CachedClass.java,440,classInfo.setWeakMetaClass(null);
src/main/org/codehaus/groovy/reflection/CachedClass.java,442,updateAddNewMopMethods(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,445,private void updateAddNewMopMethods(List<MetaMethod> arr) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,446,List<MetaMethod> res = new ArrayList<MetaMethod>();
src/main/org/codehaus/groovy/reflection/CachedClass.java,447,res.addAll(Arrays.asList(classInfo.newMetaMethods));
src/main/org/codehaus/groovy/reflection/CachedClass.java,448,res.addAll(arr);
src/main/org/codehaus/groovy/reflection/CachedClass.java,449,classInfo.newMetaMethods = res.toArray(new MetaMethod[res.size()]);
src/main/org/codehaus/groovy/reflection/CachedClass.java,452,public boolean isAssignableFrom(Class argument) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,453,return argument == null || ReflectionCache.isAssignableFrom(getTheClass(), argument);
src/main/org/codehaus/groovy/reflection/CachedClass.java,456,public boolean isDirectlyAssignable(Object argument) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,457,return ReflectionCache.isAssignableFrom(getTheClass(), argument.getClass());
src/main/org/codehaus/groovy/reflection/CachedClass.java,460,public CallSiteClassLoader getCallSiteLoader() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,461,return callSiteClassLoader.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,464,public Collection<ClassInfo> getHierarchy() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,465,return hierarchy.get();
src/main/org/codehaus/groovy/reflection/CachedClass.java,468,public static class CachedMethodComparatorByName implements Comparator {
src/main/org/codehaus/groovy/reflection/CachedClass.java,469,public static final Comparator INSTANCE = new CachedMethodComparatorByName();
src/main/org/codehaus/groovy/reflection/CachedClass.java,471,public int compare(Object o1, Object o2) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,472,return ((CachedMethod)o1).getName().compareTo(((CachedMethod)o2).getName());
src/main/org/codehaus/groovy/reflection/CachedClass.java,476,public static class CachedMethodComparatorWithString implements Comparator {
src/main/org/codehaus/groovy/reflection/CachedClass.java,477,public static final Comparator INSTANCE = new CachedMethodComparatorWithString();
src/main/org/codehaus/groovy/reflection/CachedClass.java,479,public int compare(Object o1, Object o2) {
src/main/org/codehaus/groovy/reflection/CachedClass.java,481,return ((CachedMethod)o1).getName().compareTo((String)o2);
src/main/org/codehaus/groovy/reflection/CachedClass.java,482,else
src/main/org/codehaus/groovy/reflection/CachedClass.java,483,return ((String)o1).compareTo(((CachedMethod)o2).getName());
src/main/org/codehaus/groovy/reflection/CachedClass.java,487,public String toString() {
src/main/org/codehaus/groovy/reflection/CachedClass.java,488,return cachedClass.toString();
src/main/org/codehaus/groovy/reflection/CachedClass.java,495,public CachedClass getCachedClass () {
src/main/org/codehaus/groovy/reflection/CachedClass.java,496,return this;
src/main/org/codehaus/groovy/tools/javac/JavaStubCompilationUnit.java,38,public class JavaStubCompilationUnit
src/main/org/codehaus/groovy/tools/javac/JavaStubCompilationUnit.java,39,extends CompilationUnit
src/main/org/codehaus/groovy/tools/javac/JavaStubCompilationUnit.java,48,super(config,null,gcl);
src/main/org/codehaus/groovy/tools/javac/JavaStubCompilationUnit.java,99,if (file.getName().toLowerCase().endsWith(DOT_GROOVY)) {
src/main/org/codehaus/groovy/tools/javac/JavaStubCompilationUnit.java,107,if (url.getPath().toLowerCase().endsWith(DOT_GROOVY)) {
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,258,realType,
src/main/groovy/lang/MetaClassImpl.java,79,import java.security.PrivilegedAction;
src/main/groovy/lang/MetaClassImpl.java,896,final Object[] arguments = originalArguments == null ? EMPTY_ARGUMENTS : originalArguments;
src/main/groovy/lang/MetaClassImpl.java,901,MetaMethod method = getMethodWithCaching(sender, methodName, arguments, isCallToSuper);
src/main/groovy/lang/MetaClassImpl.java,905,method = tryListParamMetaMethod(sender, methodName, isCallToSuper, arguments);
src/main/groovy/lang/MetaClassImpl.java,913,if (CLOSURE_CALL_METHOD.equals(methodName) || CLOSURE_DO_CALL_METHOD.equals(methodName)) {
src/main/org/codehaus/groovy/classgen/Verifier.java,174,for (ClassNode current = node; current!=null; current=current.getSuperClass()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,175,FieldNode ret = current.getDeclaredField(fieldName);
src/main/org/codehaus/groovy/classgen/Verifier.java,176,if (ret == null) continue;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,699,innerClass.setSuperClass(classNode);
src/main/org/codehaus/groovy/antlr/EnumHelper.java,61,FieldNode fn = new FieldNode(name,modifiers,enumClass,enumClass,init);
src/main/org/codehaus/groovy/ast/ClassHelper.java,346,return make(Reference.class);
src/main/org/codehaus/groovy/ast/ClassNode.java,36,import groovy.lang.GroovyObject;
src/main/org/codehaus/groovy/ast/ClassNode.java,1366,n.setRedirect(this.redirect);
src/main/org/codehaus/groovy/ast/expr/ClosureExpression.java,39,super.setType(ClassHelper.CLOSURE_TYPE);
src/main/org/codehaus/groovy/ast/expr/MethodPointerExpression.java,79,return ClassHelper.CLOSURE_TYPE;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,27,import org.codehaus.groovy.control.CompilerConfiguration;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1242,icl.addField(staticFieldName, ACC_STATIC + ACC_SYNTHETIC, ClassHelper.CLASS_Type, new ClassExpression(referencedClasses.get(staticFieldName)));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1252,boolean type = fn.getType() == ClassHelper.CLASS_Type;
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,73,values = new FieldNode("$VALUES",PRIVATE_FS|Opcodes.ACC_SYNTHETIC,enumClass.makeArray(),enumClass,null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,79,minValue = new FieldNode("MIN_VALUE", PUBLIC_FS, enumClass, enumClass, null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,80,maxValue = new FieldNode("MAX_VALUE", PUBLIC_FS, enumClass, enumClass, null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,100,MethodNode valuesMethod = new MethodNode("values",PUBLIC_FS,enumClass.makeArray(),new Parameter[0],ClassNode.EMPTY_ARRAY,null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,119,MethodNode nextMethod = new MethodNode("next", Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, enumClass, new Parameter[0], ClassNode.EMPTY_ARRAY, null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,178,MethodNode nextMethod = new MethodNode("previous", Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC, enumClass, new Parameter[0], ClassNode.EMPTY_ARRAY, null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,237,MethodNode valueOfMethod = new MethodNode("valueOf",PS,enumClass,new Parameter[]{stringParameter},ClassNode.EMPTY_ARRAY,null);
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,271,MethodNode initMethod = new MethodNode("$INIT",PUBLIC_FS | Opcodes.ACC_SYNTHETIC,enumClass,parameter,ClassNode.EMPTY_ARRAY,null);
src/main/org/codehaus/groovy/classgen/InnerClassVisitor.java,67,thisField = innerClass.addField("this$0", PUBLIC_SYNTHETIC, node.getOuterClass(), null);
src/main/org/codehaus/groovy/classgen/InnerClassVisitor.java,125,Parameter thisPara = new Parameter(classNode.getOuterClass(), getUniqueName(params, node));
src/main/org/codehaus/groovy/classgen/InnerClassVisitor.java,284,ClassNode outerClassType = getClassNode(innerClass.getOuterClass(), isStatic);
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,177,InnerClassNode answer = new InnerClassNode(classNode, name, mods, ClassHelper.CLOSURE_TYPE); // closures are local inners and not public
src/main/org/codehaus/groovy/transform/SingletonASTTransformation.java,67,final FieldNode fieldNode = classNode.addField("instance", ACC_PUBLIC|ACC_FINAL|ACC_STATIC, classNode, new ConstructorCallExpression(classNode, new ArgumentListExpression()));
src/main/org/codehaus/groovy/transform/SingletonASTTransformation.java,72,classNode.addMethod("getInstance", ACC_STATIC|ACC_PUBLIC, classNode, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, body);
src/main/org/codehaus/groovy/transform/SingletonASTTransformation.java,76,final FieldNode fieldNode = classNode.addField("instance", ACC_PRIVATE|ACC_STATIC|ACC_VOLATILE, classNode, null);
src/main/org/codehaus/groovy/transform/SingletonASTTransformation.java,93,classNode.addMethod("getInstance", ACC_STATIC|ACC_PUBLIC, classNode, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, body);
src/main/groovy/text/SimpleTemplateEngine.java,254,sw.write("/* Generated by SimpleTemplateEngine */\n");
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,207,fileList.addAll(Arrays.asList(filenames));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2016,ClassNode classNode = controller.getClassNode();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2017,if ( !classNode.isUsingGenerics() &&
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2018,!classNode.isAnnotated()  &&
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2021,return Opcodes.V1_3;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2024,final String target = getCompileUnit().getConfig().getTargetBytecode();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2025,return CompilerConfiguration.POST_JDK5.equals(target) ? Opcodes.V1_5 : Opcodes.V1_3;
src/main/org/codehaus/groovy/control/GenericsVisitor.java,108,if (cnType.isInterface() && nType.declaresInterface(cnType)) continue;
src/main/groovy/lang/ExpandoMetaClass.java,365,findMixinMethod(methodName, new Class[0]);
src/main/org/codehaus/groovy/reflection/stdclasses/DoubleCachedClass.java,68,|| classToTransformFrom == BigInteger.class;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1207,controller.getOperandStack().push(controller.getClassNode().getOuterClass());
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,101,if (!compileStack.containsVariable(name) && compileStack.getScope().isReferencedClassVariable(name)) {
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,102,acg.visitFieldExpression(new FieldExpression(classNode.getDeclaredField(name)));
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,104,BytecodeVariable v = compileStack.getVariable(name, !classNodeUsesReferences());
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,105,if (v == null) {
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,110,FieldNode field = classNode.getDeclaredField(name);
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,111,mv.visitVarInsn(ALOAD, 0);
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,112,mv.visitFieldInsn(GETFIELD, controller.getInternalClassName(), name, BytecodeHelper.getTypeDescription(field.getType()));
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,114,mv.visitVarInsn(ALOAD, v.getIndex());
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,116,if (param.getNodeMetaData(ClosureWriter.UseExistingReference.class)==null) {
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,117,param.setNodeMetaData(ClosureWriter.UseExistingReference.class,Boolean.TRUE);
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,119,controller.getOperandStack().push(ClassHelper.REFERENCE_TYPE);
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,144,private boolean classNodeUsesReferences() {
src/main/org/codehaus/groovy/classgen/asm/ClosureWriter.java,145,ClassNode classNode = controller.getClassNode();
src/main/org/codehaus/groovy/classgen/Verifier.java,233,mv.visitJumpInsn(IF_ACMPNE, l1);
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,592,out.print(genericsTypes[i].toString());
src/main/org/codehaus/groovy/tools/RootLoader.java,117,protected Class loadClass(final String name, boolean resolve) throws ClassNotFoundException {
src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,519,if (!isMethodDefinitionAllowed && ast.getMethods()!=null && ast.getMethods().size()>0) {
src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,547,ast.getStatementBlock().visit(new SecuringCodeVisitor());
src/main/org/codehaus/groovy/runtime/ComposedClosure.java,63,super(first);
src/main/org/codehaus/groovy/runtime/ComposedClosure.java,64,this.first = (Closure) first.clone();
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,119,mv.visitInsn(D2I);
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,120,mv.visitInsn(I2B);
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,122,mv.visitInsn(L2I);
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,123,mv.visitInsn(I2B);
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,125,mv.visitInsn(F2I);
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,126,mv.visitInsn(I2B);
src/main/org/codehaus/groovy/classgen/asm/OperandStack.java,128,mv.visitInsn(I2B);
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,159,left = transform(be.getLeftExpression());
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,269,setSourcePosition(smce, mce);
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,324,if (foundArgs != null && foundConstant != null) {
src/main/org/codehaus/groovy/tools/javac/JavaStubCompilationUnit.java,83,super.compile(Phases.SEMANTIC_ANALYSIS);
src/main/groovy/lang/MetaClassImpl.java,1134,private static boolean sameClasses(Class[] params, Class[] arguments, boolean weakNullCheck) {
src/main/groovy/lang/MetaClassImpl.java,1145,return false;
src/main/groovy/lang/MetaClassImpl.java,1147,return false;
src/main/groovy/lang/MetaClassImpl.java,1169,if (cacheEntry != null
src/main/groovy/lang/MetaClassImpl.java,1170,&& (sameClasses(cacheEntry.params, params, methods instanceof MetaMethod))) {
src/main/groovy/lang/MetaClassImpl.java,2556,GroovyClassLoader gcl = (GroovyClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
src/main/groovy/lang/MetaClassImpl.java,2557,public Object run() {
src/main/groovy/lang/MetaClassImpl.java,2558,return new GroovyClassLoader(parent);
src/main/org/codehaus/groovy/ast/GenericsType.java,56,String ret = (type == null || placeholder || wildcard) ? name : type.getName();
src/main/org/codehaus/groovy/ast/GenericsType.java,60,ret += upperBounds[i].getName();
src/main/org/codehaus/groovy/ast/GenericsType.java,64,ret += " super " + lowerBound.getName();
src/main/groovy/util/ObservableList.java,403,ObservableList.this.remove(cursor--);
src/main/groovy/util/ObservableList.java,383,protected int cursor = 0;
src/main/groovy/util/ObservableList.java,410,cursor = index;
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,240,if (operation==LEFT_SQUARE_BRACKET) {
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,241,leftType = leftTypeOrig.getComponentType();
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,244,int operationType = getOperandConversionType(leftType,rightType);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,245,BinaryExpressionWriter bew = binExpWriter[operationType];
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,249,if (bew.arrayGet(operation, true)) {
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,250,leftExp.visit(acg);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,251,os.doGroovyCast(leftTypeOrig);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,252,rightExp.visit(acg);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,253,os.doGroovyCast(int_TYPE);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,254,bew.arrayGet(operation, false);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,255,os.doGroovyCast(bew.getArrayGetResultType());
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,257,leftExp.visit(acg);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,258,os.doGroovyCast(bew.getNormalOpResultType());
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,259,rightExp.visit(acg);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,260,os.doGroovyCast(bew.getNormalOpResultType());
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,261,bew.write(operation, false);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionMultiTypeDispatcher.java,263,super.evaluateBinaryExpression(message, binExp);
src/main/org/codehaus/groovy/classgen/asm/BinaryExpressionWriter.java,246,controller.getOperandStack().replace(getNormalOpResultType(),2);
