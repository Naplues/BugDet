File,Line_number,SRC
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,276,throw new ConfigurationException("thrift_max_message_length_in_mb must be greater than thrift_framed_transport_size_in_mb when using TFramedTransport");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,667,return conf.thrift_max_message_length_in_mb * 1024 * 1024;
src/java/org/apache/cassandra/thrift/TBinaryProtocol.java,37,this(trans, false, true);
src/java/org/apache/cassandra/thrift/TBinaryProtocol.java,61,super(strictRead, strictWrite, readLength);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,39,import org.apache.cassandra.db.ColumnFamilyStore;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,41,import org.apache.cassandra.db.SystemTable;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,42,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/io/sstable/Descriptor.java,74,hashCode = Objects.hashCode(directory, generation, ksname, cfname);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,202,return that.directory.equals(this.directory) && that.generation == this.generation && that.ksname.equals(this.ksname) && that.cfname.equals(this.cfname);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,350,try
src/java/org/apache/cassandra/db/HintedHandOffManager.java,356,throw new RuntimeException(e);
src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java,53,con.closeSocket();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,271,boolean cacheLoading = keyCache != null && !keysToLoadInCache.isEmpty();
src/java/org/apache/cassandra/thrift/ThriftValidation.java,373,IPartitioner p = StorageService.getPartitioner();
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,40,protected final SimpleCondition condition = new SimpleCondition();
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,95,condition.signal();
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,79,condition.signal();
src/java/org/apache/cassandra/service/WriteResponseHandler.java,72,condition.signal();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,20,import java.io.Closeable;
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,184,return row = filter.getSSTableColumnIterator(sstable, file, key);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,153,List<String> tokens = getSubSplits(keyspace, cfName, range, conf);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,173,private List<String> getSubSplits(String keyspace, String cfName, TokenRange range, Configuration conf) throws IOException
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,182,return client.describe_splits(cfName, range.start_token, range.end_token, splitsize);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,92,totalRowCount = ConfigHelper.getInputSplitSize(conf);
src/java/org/apache/cassandra/hadoop/ColumnFamilySplit.java,62,return Long.MAX_VALUE;
src/java/org/apache/cassandra/service/StorageService.java,1540,List<Token> tokens = new ArrayList<Token>();
src/java/org/apache/cassandra/service/StorageService.java,1542,tokens.add(range.left);
src/java/org/apache/cassandra/service/StorageService.java,1553,int splits = keys.size() * DatabaseDescriptor.getIndexInterval() / keysPerSplit;
src/java/org/apache/cassandra/service/StorageService.java,1559,int index = i * (keys.size() / splits);
src/java/org/apache/cassandra/service/StorageService.java,1560,tokens.add(keys.get(index).token);
src/java/org/apache/cassandra/thrift/CassandraServer.java,599,List<String> splits = new ArrayList<String>(tokens.size());
src/java/org/apache/cassandra/thrift/CassandraServer.java,602,splits.add(tf.toString(token));
src/java/org/apache/cassandra/thrift/CassandraServer.java,604,return splits;
src/java/org/apache/cassandra/thrift/CassandraServer.java,460,IPartitioner p = StorageService.getPartitioner();
src/java/org/apache/cassandra/thrift/CassandraServer.java,464,Token.TokenFactory tokenFactory = p.getTokenFactory();
src/java/org/apache/cassandra/config/Config.java,37,public Integer max_hint_window_in_ms = Integer.MAX_VALUE;
src/java/org/apache/cassandra/config/Config.java,82,public Integer in_memory_compaction_limit_in_mb = 256;
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,139,return datacenters.get(dc);
src/java/org/apache/cassandra/utils/ExpiringMap.java,21,import java.util.*;
src/java/org/apache/cassandra/utils/ExpiringMap.java,28,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/utils/ExpiringMap.java,82,private final NonBlockingHashMap<K, CacheableObject<V>> cache = new NonBlockingHashMap<K, CacheableObject<V>>();
src/java/org/apache/cassandra/cli/CliClient.java,1146,sessionState.out.println("Not authenticated to a working keyspace.");
src/java/org/apache/cassandra/cli/CliClient.java,1147,return false;
src/java/org/apache/cassandra/cli/CliClient.java,1150,return true;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,441,if (r.cf != null) //ignore removed rows
src/java/org/apache/cassandra/db/HintedHandOffManager.java,442,result.put(new String(r.key.key.array()), r.cf.getColumnCount());
src/java/org/apache/cassandra/service/AntiEntropyService.java,589,throw new IOError(e);
src/java/org/apache/cassandra/dht/BootStrapper.java,39,import org.apache.cassandra.gms.FailureDetector;
src/java/org/apache/cassandra/service/MigrationManager.java,107,Gossiper.instance.addLocalApplicationState(ApplicationState.SCHEMA, StorageService.instance.valueFactory.migration(version));
src/java/org/apache/cassandra/service/StorageService.java,434,logger_.info("This node will not auto bootstrap because it is configured to be a seed node.");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2008,throw new RuntimeException("The min_compaction_threshold cannot be larger than the max.");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2022,throw new RuntimeException("The max_compaction_threshold cannot be smaller than the min.");
src/java/org/apache/cassandra/tools/NodeProbe.java,413,cfsProxy.setMinimumCompactionThreshold(minimumCompactionThreshold);
src/java/org/apache/cassandra/tools/NodeProbe.java,414,cfsProxy.setMaximumCompactionThreshold(maximumCompactionThreshold);
src/java/org/apache/cassandra/db/SystemTable.java,308,return false;
src/java/org/apache/cassandra/db/SystemTable.java,310,return c.value().get(c.value().position()) == 1;
src/java/org/apache/cassandra/service/StorageService.java,1633,SystemTable.setBootstrapped(false);
src/java/org/apache/cassandra/service/MigrationManager.java,55,UUID theirVersion = UUID.fromString(value.value);
src/java/org/apache/cassandra/service/MigrationManager.java,56,rectify(theirVersion, endpoint);
src/java/org/apache/cassandra/service/MigrationManager.java,65,UUID theirVersion = UUID.fromString(value.value);
src/java/org/apache/cassandra/service/MigrationManager.java,66,rectify(theirVersion, endpoint);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,970,long expectedFileSize = 0;
src/java/org/apache/cassandra/db/Memtable.java,57,private final AtomicLong currentThroughput = new AtomicLong(0);
src/java/org/apache/cassandra/db/Memtable.java,95,return currentThroughput.get();
src/java/org/apache/cassandra/db/Memtable.java,131,currentThroughput.addAndGet(cf.size());
src/java/org/apache/cassandra/service/StorageService.java,1638,logger_.info("Announcing that I have left the ring for " + RING_DELAY + "ms");
src/java/org/apache/cassandra/service/StorageService.java,1641,Thread.sleep(RING_DELAY);
src/java/org/apache/cassandra/tools/NodeCmd.java,100,addCmdHelp(header, "decommission", "Decommission the node");
src/java/org/apache/cassandra/db/ColumnFamily.java,331,int size = 0;
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,162,StorageService.instance.getTokenMetadata().invalidateCaches();
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,165,ColumnFamilySplit split = new ColumnFamilySplit(tokens.get(i - 1), tokens.get(i), endpoints);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,166,logger.debug("adding " + split);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,167,splits.add(split);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,30,import com.google.common.collect.AbstractIterator;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,218,rows = null;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,360,throw new InvalidRequestException("start key and end key must either both be non-null, or both be null");
src/java/org/apache/cassandra/thrift/ThriftValidation.java,364,throw new InvalidRequestException("start token and end token must either both be non-null, or both be null");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,25,import java.util.concurrent.Future;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,26,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,28,import java.util.zip.Checksum;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,34,import org.apache.cassandra.concurrent.Stage;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,35,import org.apache.cassandra.concurrent.StageManager;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,46,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,47,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,48,import org.apache.cassandra.utils.WrappedRunnable;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,80,private static final int MAX_OUTSTANDING_REPLAY_COUNT = 1024;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,82,static final Logger logger = LoggerFactory.getLogger(CommitLog.class);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,169,List<Future<?>> futures = new ArrayList<Future<?>>();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,170,byte[] bytes = new byte[4096];
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,171,Map<Integer, AtomicInteger> invalidMutations = new HashMap<Integer, AtomicInteger>();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,178,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,197,logger.debug("skipping replay of fully-flushed {}", file);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,198,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,201,reader.seek(replayPosition);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,204,logger.debug("Replaying " + file + " starting at " + reader.getFilePointer());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,210,logger.debug("Reading mutation at " + reader.getFilePointer());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,212,long claimedCRC32;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,214,int serializedSize;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,215,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,218,serializedSize = reader.readInt();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,224,break;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,225,long claimedSizeChecksum = reader.readLong();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,226,checksum.update(serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,228,break; // entry wasn't synced correctly/fully.  that's ok.
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,231,bytes = new byte[(int) (1.2 * serializedSize)];
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,232,reader.readFully(bytes, 0, serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,233,claimedCRC32 = reader.readLong();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,237,break; // last CL entry didn't get completely written.  that's ok.
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,240,checksum.update(bytes, 0, serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,245,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,250,RowMutation rm = null;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,251,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,257,AtomicInteger i = invalidMutations.get(ex.cfId);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,260,i = new AtomicInteger(1);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,261,invalidMutations.put(ex.cfId, i);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,263,else
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,264,i.incrementAndGet();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,265,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,269,logger.debug(String.format("replaying mutation for %s.%s: %s",
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,270,rm.getTable(),
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,271,ByteBufferUtil.bytesToHex(rm.key()),
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,276,final long entryLocation = reader.getFilePointer();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,278,final RowMutation frm = rm;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,281,public void runMayThrow() throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,283,RowMutation newRm = new RowMutation(frm.getTable(), frm.key());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,292,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,295,newRm.add(columnFamily);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,303,futures.add(StageManager.getStage(Stage.MUTATION).submit(runnable));
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,306,FBUtilities.waitOnFutures(futures);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,307,futures.clear();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,311,finally
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,313,FileUtils.closeQuietly(reader);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,314,logger.info("Finished reading " + file);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,319,logger.info(String.format("Skipped %d mutations from unknown (probably removed) CF with id %d", entry.getValue().intValue(), entry.getKey()));
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,322,FBUtilities.waitOnFutures(futures);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,323,logger.debug("Finished waiting on mutations from recovery");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,326,futures.clear();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,328,futures.addAll(table.flush());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,329,FBUtilities.waitOnFutures(futures);
src/java/org/apache/cassandra/utils/CLibrary.java,181,Process p = pb.start();
src/java/org/apache/cassandra/utils/CLibrary.java,182,try
src/java/org/apache/cassandra/utils/CLibrary.java,188,throw new RuntimeException(e);
src/java/org/apache/cassandra/utils/FBUtilities.java,414,ClassLoader loader = PropertyFileSnitch.class.getClassLoader();
src/java/org/apache/cassandra/cli/CliClient.java,687,String keyspaceName = statement.getChild(0).getText();
src/java/org/apache/cassandra/cli/CliCompiler.java,128,return getKeySpace(statement.getChild(0).getText(), keyspaces);
interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java,362,this.read_repair_chance = 1;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,104,throw new IOException("Keys must not be null.");
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,108,logger.info("Last written key : " + lastWrittenKey);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,109,logger.info("Current key : " + decoratedKey);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,110,logger.info("Writing into file " + getFilename());
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,111,throw new IOException("Keys must be written in ascending order.");
src/java/org/apache/cassandra/utils/CLibrary.java,104,int result = mlockall(MCL_CURRENT);
src/java/org/apache/cassandra/utils/CLibrary.java,105,assert result == 0; // mlockall should always be zero on success
src/java/org/apache/cassandra/utils/CLibrary.java,142,int result = link(sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());
src/java/org/apache/cassandra/utils/CLibrary.java,143,assert result == 0; // success is always zero
src/java/org/apache/cassandra/utils/CLibrary.java,222,assert result >= 0; // on error a value of -1 is returned and errno is set to indicate the error.
src/java/org/apache/cassandra/streaming/StreamInSession.java,37,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/streaming/StreamInSession.java,40,public class StreamInSession
src/java/org/apache/cassandra/streaming/StreamInSession.java,47,private final Pair<InetAddress, Long> context;
src/java/org/apache/cassandra/streaming/StreamInSession.java,48,private final Runnable callback;
src/java/org/apache/cassandra/streaming/StreamInSession.java,49,private String table;
src/java/org/apache/cassandra/streaming/StreamInSession.java,55,this.context = context;
src/java/org/apache/cassandra/streaming/StreamInSession.java,56,this.callback = callback;
src/java/org/apache/cassandra/streaming/StreamInSession.java,121,logger.info("Streaming of file {} from {} failed: requesting a retry.", remoteFile, this);
src/java/org/apache/cassandra/streaming/StreamInSession.java,168,callback.run();
src/java/org/apache/cassandra/streaming/StreamInSession.java,169,sessions.remove(context);
src/java/org/apache/cassandra/streaming/StreamInSession.java,175,return context.right;
src/java/org/apache/cassandra/streaming/StreamInSession.java,180,return context.left;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,32,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,39,private static final Logger logger = LoggerFactory.getLogger( StreamOutSession.class );
src/java/org/apache/cassandra/streaming/StreamOutSession.java,69,public final String table;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,70,private final Pair<InetAddress, Long> context;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,71,private final Runnable callback;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,76,this.table = table;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,77,this.context = context;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,78,this.callback = callback;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,83,return context.left;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,88,return context.right;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,127,callback.run();
src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java,62,session.close();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,64,private static int currentIndex = 0;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,897,String dataFileDirectory = conf.data_file_directories[currentIndex];
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,898,currentIndex = (currentIndex + 1) % conf.data_file_directories.length;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,899,return dataFileDirectory;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,933,long maxFreeDisk = 0;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,934,int maxDiskIndex = 0;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,935,String dataFileDirectory = null;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,936,String[] dataDirectoryForTable = getAllDataFileLocationsForTable(table);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,940,File f = new File(dataDirectoryForTable[i]);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,943,maxFreeDisk = f.getUsableSpace();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,944,maxDiskIndex = i;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,948,maxFreeDisk = (long)(0.9 * maxFreeDisk);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,951,dataFileDirectory = dataDirectoryForTable[maxDiskIndex];
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,952,currentIndex = (maxDiskIndex + 1 )%dataDirectoryForTable.length ;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,954,else
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,956,currentIndex = maxDiskIndex;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,221,return newdesc;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,21,import java.util.ArrayDeque;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,29,private final int size;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,30,protected final ArrayDeque<Double> deque;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,34,this.size = size;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,35,deque = new ArrayDeque<Double>(size);
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,57,deque.remove();
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,59,deque.add(o);
src/java/org/apache/cassandra/db/ColumnFamilySerializer.java,32,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/ColumnFamilySerializer.java,117,throw new UnserializableColumnFamilyException("Couldn't find cfId=" + cfId, cfId);
src/java/org/apache/cassandra/db/UnserializableColumnFamilyException.java,24,public class UnserializableColumnFamilyException extends IOException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,28,import java.util.concurrent.ExecutorService;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,29,import java.util.concurrent.TimeoutException;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,199,final ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,112,logger.error("Fatal exception in thread " + t, e);
src/java/org/apache/cassandra/utils/ExpiringMap.java,83,private final Timer timer;
src/java/org/apache/cassandra/utils/ExpiringMap.java,84,private static int counter = 0;
src/java/org/apache/cassandra/utils/ExpiringMap.java,103,timer = new Timer("EXPIRING-MAP-TIMER-" + (++counter), true);
src/java/org/apache/cassandra/utils/ExpiringMap.java,109,timer.cancel();
src/java/org/apache/cassandra/thrift/CassandraServer.java,637,m.announce();
src/java/org/apache/cassandra/cli/CliOptions.java,177,else
src/java/org/apache/cassandra/cli/CliOptions.java,179,css.schema_mwt = 10 * 1000;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,115,static
src/java/org/apache/cassandra/service/StorageService.java,164,private IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
src/java/org/apache/cassandra/service/StorageService.java,165,public VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
src/java/org/apache/cassandra/service/StorageService.java,171,return instance.partitioner;
src/java/org/apache/cassandra/service/StorageService.java,1709,move(partitioner.getTokenFactory().fromString(newToken));
src/java/org/apache/cassandra/service/StorageService.java,1799,Token token = partitioner.getTokenFactory().fromString(tokenString);
src/java/org/apache/cassandra/service/StorageService.java,2116,IPartitioner oldPartitioner = partitioner;
src/java/org/apache/cassandra/service/StorageService.java,2117,partitioner = newPartitioner;
src/java/org/apache/cassandra/service/StorageService.java,2118,valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,28,import org.apache.cassandra.db.SuperColumn;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,45,import org.apache.pig.impl.logicalLayer.FrontendException;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,64,private RecordReader reader;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,65,private RecordWriter writer;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,96,ByteBuffer key = (ByteBuffer)reader.getCurrentKey();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,97,SortedMap<ByteBuffer,IColumn> cf = (SortedMap<ByteBuffer,IColumn>)reader.getCurrentValue();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,102,ArrayList<Tuple> columns = new ArrayList<Tuple>();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,103,tuple.set(0, new DataByteArray(key.array(), key.position()+key.arrayOffset(), key.limit()+key.arrayOffset()));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,109,tuple.set(1, new DefaultDataBag(columns));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,246,public void putNext(Tuple t) throws ExecException, IOException
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,249,DefaultDataBag pairs = (DefaultDataBag) t.get(1);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,252,try
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,256,Mutation mutation = new Mutation();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,257,if (DataType.findType(pair.get(1)) == DataType.BAG) // supercolumn
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,260,sc.name = objToBB(pair.get(0));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,265,column.name = objToBB(subcol.get(0));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,266,column.value = objToBB(subcol.get(1));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,268,columns.add(column);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,270,if (columns.isEmpty()) // a deletion
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,272,mutation.deletion = new Deletion();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,273,mutation.deletion.super_column = objToBB(pair.get(0));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,276,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,278,sc.columns = columns;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,279,mutation.column_or_supercolumn = new ColumnOrSuperColumn();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,280,mutation.column_or_supercolumn.super_column = sc;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,287,mutation.deletion = new Deletion();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,289,mutation.deletion.predicate.column_names = Arrays.asList(objToBB(pair.get(0)));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,292,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,298,mutation.column_or_supercolumn = new ColumnOrSuperColumn();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,299,mutation.column_or_supercolumn.column = column;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,303,mutationList.add(mutation);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,312,writer.write(key, mutationList);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,316,throw new IOException(e);
src/java/org/apache/cassandra/locator/TokenMetadata.java,288,return tokenToEndpointMap.entrySet();
src/java/org/apache/cassandra/service/StorageService.java,584,Map<Token, InetAddress> mapInetAddress = tokenMetadata_.getTokenToEndpointMap();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,242,o = new DataByteArray((String)o);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,243,return ByteBuffer.wrap(((DataByteArray) o).get());
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,47,private final List<InetAddress> sources;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,52,this.sources = sources;
src/java/org/apache/cassandra/service/StorageProxy.java,516,RangeSliceResponseResolver resolver = new RangeSliceResponseResolver(command.keyspace, liveEndpoints);
src/java/org/apache/cassandra/service/StorageProxy.java,768,RangeSliceResponseResolver resolver = new RangeSliceResponseResolver(keyspace, liveEndpoints);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,84,TokenMetadata dcTokens = new TokenMetadata();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,88,dcTokens.updateNormalToken(tokenEntry.getKey(), tokenEntry.getValue());
src/java/org/apache/cassandra/locator/TokenMetadata.java,103,assert token != null;
src/java/org/apache/cassandra/locator/TokenMetadata.java,104,assert endpoint != null;
src/java/org/apache/cassandra/locator/TokenMetadata.java,109,bootstrapTokens.inverse().remove(endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,110,tokenToEndpointMap.inverse().remove(endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,111,InetAddress prev = tokenToEndpointMap.put(token, endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,115,logger.warn("Token " + token + " changing ownership from " + prev + " to " + endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,116,sortedTokens = sortTokens();
src/java/org/apache/cassandra/locator/TokenMetadata.java,118,leavingEndpoints.remove(endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,119,invalidateCaches();
src/java/org/apache/cassandra/tools/NodeCmd.java,152,Collections.sort(sortedTokens);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,132,ArrayList<Tuple> subcols = new ArrayList<Tuple>();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,136,pair.set(1, new DefaultDataBag(subcols));
src/java/org/apache/cassandra/locator/TokenMetadata.java,97,n++;
src/java/org/apache/cassandra/locator/TokenMetadata.java,480,sb.append("Bootstrapping Tokens:" );
src/java/org/apache/cassandra/locator/TokenMetadata.java,481,sb.append(System.getProperty("line.separator"));
src/java/org/apache/cassandra/locator/TokenMetadata.java,484,sb.append(entry.getValue() + ":" + entry.getKey());
src/java/org/apache/cassandra/locator/TokenMetadata.java,583,Map<Token, InetAddress> map = new HashMap<Token, InetAddress>(tokenToEndpointMap.size() + bootstrapTokens.size());
src/java/org/apache/cassandra/locator/TokenMetadata.java,584,map.putAll(tokenToEndpointMap);
src/java/org/apache/cassandra/locator/TokenMetadata.java,585,map.putAll(bootstrapTokens);
src/java/org/apache/cassandra/locator/TokenMetadata.java,586,return map;
src/java/org/apache/cassandra/service/StorageService.java,942,InetAddress endpoint = entry.getValue();
src/java/org/apache/cassandra/service/StorageService.java,944,allLeftMetadata.updateNormalToken(entry.getKey(), endpoint);
src/java/org/apache/cassandra/service/StorageService.java,946,pendingRanges.put(range, endpoint);
src/java/org/apache/cassandra/service/StorageService.java,947,allLeftMetadata.removeEndpoint(endpoint);
src/java/org/apache/cassandra/service/ClientState.java,21,import java.util.ArrayList;
src/java/org/apache/cassandra/service/ClientState.java,22,import java.util.List;
src/java/org/apache/cassandra/service/ClientState.java,23,import java.util.Map;
src/java/org/apache/cassandra/service/ClientState.java,24,import java.util.Set;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,212,hintStore.forceFlush();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,349,hintStore.forceFlush();
src/java/org/apache/cassandra/db/SystemTable.java,174,ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(filter);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,359,super(minWorkerThread, maxWorkerThreads, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,146,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,149,try
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,151,executorService_.awaitTermination(timeoutMS, TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,152,break;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,156,long newnow = System.currentTimeMillis();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,157,timeoutMS -= (newnow - now);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,158,now = newnow;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,255,private int waitForSchemaAgreement(InetAddress endpoint) throws InterruptedException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,260,while (gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA) == null) {
src/java/org/apache/cassandra/db/HintedHandOffManager.java,261,Thread.sleep(1000);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,264,throw new RuntimeException("Didin't receive gossiped schema from " + endpoint + " in " + 2 * StorageService.RING_DELAY + "ms");
src/java/org/apache/cassandra/db/HintedHandOffManager.java,271,Thread.sleep(1000);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,274,throw new RuntimeException("Could not reach schema agreement with " + endpoint + " in " + 2 * StorageService.RING_DELAY + "ms");
src/java/org/apache/cassandra/db/HintedHandOffManager.java,280,private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, DigestMismatchException, InvalidRequestException, TimeoutException, InterruptedException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,285,int waited = waitForSchemaAgreement(endpoint);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,288,if (waited == 0) {
src/java/org/apache/cassandra/db/HintedHandOffManager.java,291,Thread.sleep(sleep);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,295,logger_.info("Endpoint {} died before hint delivery, aborting", endpoint);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,296,return;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,360,logger_.info(String.format("Finished hinted handoff of %s rows to endpoint %s",
src/java/org/apache/cassandra/db/HintedHandOffManager.java,361,rowsReplayed, endpoint));
src/java/org/apache/cassandra/service/ReadCallback.java,24,import java.util.Random;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,320,QueryFilter filter = QueryFilter.getSliceFilter(epkey, new QueryPath(HINTS_CF), startColumn, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, PAGE_SIZE);
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java,63,public Object forceFlush() throws IOException;
src/java/org/apache/cassandra/service/StorageService.java,571,map.put(entry.getKey(), stringify(l));
src/java/org/apache/cassandra/service/StorageService.java,585,Map<Token, String> mapString = new HashMap<Token, String>(mapInetAddress.size());
src/java/org/apache/cassandra/service/StorageService.java,588,mapString.put(entry.getKey(), entry.getValue().getHostAddress());
src/java/org/apache/cassandra/service/StorageService.java,2149,List<Token> sortedTokens = new ArrayList<Token>(getTokenToEndpointMap().keySet());
src/java/org/apache/cassandra/service/StorageService.java,2151,return partitioner.describeOwnership(sortedTokens);
src/java/org/apache/cassandra/service/StorageServiceMBean.java,101,public Map<Token, String> getTokenToEndpointMap();
src/java/org/apache/cassandra/service/StorageServiceMBean.java,267,public Map<Token, Float> getOwnership();
src/java/org/apache/cassandra/tools/NodeCmd.java,150,Map<Token, String> tokenToEndpoint = probe.getTokenToEndpointMap();
src/java/org/apache/cassandra/tools/NodeCmd.java,151,List<Token> sortedTokens = new ArrayList<Token>(tokenToEndpoint.keySet());
src/java/org/apache/cassandra/tools/NodeCmd.java,167,Map<Token, Float> ownerships = probe.getOwnership();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,80,return startWith.compareTo(row.getKey()) <= 0
src/java/org/apache/cassandra/config/ReplicationStrategy.java,1,package org.apache.cassandra.config;
src/java/org/apache/cassandra/config/ReplicationStrategy.java,24,import java.util.Map;
src/java/org/apache/cassandra/config/ReplicationStrategy.java,26,public class ReplicationStrategy
src/java/org/apache/cassandra/config/ReplicationStrategy.java,28,public String strategy_class;
src/java/org/apache/cassandra/config/ReplicationStrategy.java,29,public Map<String, String> strategy_options;
src/java/org/apache/cassandra/db/filter/QueryFilter.java,101,return o1.name().equals(o2.name());
src/java/org/apache/cassandra/db/marshal/AbstractType.java,90,return -AbstractType.this.compare(o1, o2);
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,137,defaultDCRack = value.split(":");
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,139,defaultDCRack = new String[] { "default", "default" };
src/java/org/apache/cassandra/net/ProtocolHeader.java,19,package org.apache.cassandra.net;
src/java/org/apache/cassandra/net/ProtocolHeader.java,21,public class ProtocolHeader
src/java/org/apache/cassandra/net/ProtocolHeader.java,23,public static final String SERIALIZER = "SERIALIZER";
src/java/org/apache/cassandra/net/ProtocolHeader.java,24,public static final String COMPRESSION = "COMPRESSION";
src/java/org/apache/cassandra/net/ProtocolHeader.java,25,public static final String VERSION = "VERSION";
src/java/org/apache/cassandra/net/ProtocolHeader.java,27,public int serializerType_;
src/java/org/apache/cassandra/net/ProtocolHeader.java,28,public boolean isCompressed_;
src/java/org/apache/cassandra/net/ProtocolHeader.java,29,public boolean isStreamingMode_;
src/java/org/apache/cassandra/net/ProtocolHeader.java,30,public int version_;
src/java/org/apache/cassandra/utils/FBUtilities.java,377,return -o1.compareTo(o2);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1407,throws ExecutionException, InterruptedException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,128,return false;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,171,return true;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,321,ColumnFamily hintColumnFamily = ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter), Integer.MAX_VALUE);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,415,public void deliverHints(String to) throws UnknownHostException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,417,deliverHints(InetAddress.getByName(to));
src/java/org/apache/cassandra/db/HintedHandOffManagerMBean.java,30,public void deleteHintsForEndpoint(final String epaddr);
src/java/org/apache/cassandra/service/StorageProxy.java,496,rows.addAll(cfs.getRangeSlice(command.super_column,
src/java/org/apache/cassandra/service/StorageProxy.java,497,range,
src/java/org/apache/cassandra/service/StorageProxy.java,498,command.max_keys,
src/java/org/apache/cassandra/service/StorageProxy.java,499,QueryFilter.getFilter(command.predicate, cfs.getComparator())));
src/java/org/apache/cassandra/service/StorageProxy.java,503,throw new RuntimeException(e.getCause());
src/java/org/apache/cassandra/service/StorageProxy.java,507,throw new AssertionError(e);
src/java/org/apache/cassandra/service/StorageService.java,429,HintedHandOffManager.instance.registerMBean();
src/java/org/apache/cassandra/service/StorageService.java,1131,deliverHints(endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1181,HintedHandOffManager.instance.deliverHints(endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1186,HintedHandOffManager.instance.deliverHints(host);
src/java/org/apache/cassandra/service/StorageServiceMBean.java,258,public void deliverHints(String host) throws UnknownHostException;
src/java/org/apache/cassandra/thrift/CassandraServer.java,899,public void truncate(String cfname) throws InvalidRequestException, UnavailableException, TException
src/java/org/apache/cassandra/thrift/CassandraServer.java,910,throw (UnavailableException) new UnavailableException().initCause(e);
src/java/org/apache/cassandra/net/MessagingService.java,359,logger_.info("Shutting down MessageService...");
src/java/org/apache/cassandra/net/MessagingService.java,361,try
src/java/org/apache/cassandra/net/MessagingService.java,367,throw new IOError(e);
src/java/org/apache/cassandra/service/StorageService.java,325,MessagingService.instance().shutdown();
src/java/org/apache/cassandra/service/StorageService.java,1622,MessagingService.instance().shutdown();
src/java/org/apache/cassandra/service/StorageService.java,1930,MessagingService.instance().shutdown();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,31,import org.apache.thrift.TProcessorFactory;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,33,import org.apache.thrift.protocol.TProtocolFactory;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,35,import org.apache.thrift.transport.*;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,118,int failureCount = 0;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,130,++failureCount;
src/java/org/apache/cassandra/utils/ExpiringMap.java,38,private final long age;
src/java/org/apache/cassandra/utils/ExpiringMap.java,44,age = System.currentTimeMillis();
src/java/org/apache/cassandra/utils/ExpiringMap.java,88,this(expiration, null);
src/java/org/apache/cassandra/utils/ExpiringMap.java,133,return co == null ? 0 : co.age;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,96,CLibrary.tryMlockall();
src/java/org/apache/cassandra/utils/CLibrary.java,184,p.waitFor();
src/java/org/apache/cassandra/service/StorageService.java,381,tokenMetadata_.updateNormalToken(entry.getKey(), entry.getValue());
src/java/org/apache/cassandra/service/StorageService.java,382,Gossiper.instance.addSavedEndpoint(entry.getValue());
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,25,import java.net.UnknownHostException;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,36,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,90,private void forwardToLocalNodes(Message message, byte[] forwardBytes) throws UnknownHostException
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,96,assert forwardBytes.length >= bytesPerInetAddress;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,97,assert forwardBytes.length % bytesPerInetAddress == 0;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,99,int offset = 0;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,100,byte[] addressBytes = new byte[bytesPerInetAddress];
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,105,System.arraycopy(forwardBytes, offset, addressBytes, 0, bytesPerInetAddress);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,106,InetAddress address = InetAddress.getByAddress(addressBytes);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,109,logger_.debug("Forwarding message to " + address);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,115,offset += bytesPerInetAddress;
src/java/org/apache/cassandra/net/MessagingService.java,261,String id = nextId();
src/java/org/apache/cassandra/service/StorageProxy.java,222,MessagingService.instance().sendRR(message, destination, handler);
src/java/org/apache/cassandra/service/StorageProxy.java,224,else
src/java/org/apache/cassandra/service/StorageProxy.java,227,Iterator<InetAddress> iter = messages.getValue().iterator();
src/java/org/apache/cassandra/service/StorageProxy.java,228,InetAddress target = iter.next();
src/java/org/apache/cassandra/service/StorageProxy.java,246,MessagingService.instance().sendRR(message, target, handler);
src/java/org/apache/cassandra/service/StorageProxy.java,208,String dataCenter = entry.getKey();
src/java/org/apache/cassandra/service/StorageProxy.java,232,InetAddress destination = iter.next();
src/java/org/apache/cassandra/service/StorageProxy.java,242,dos.write(destination.getAddress());
src/java/org/apache/cassandra/cli/CliMain.java,229,String message = (e.getCause() == null) ? e.getMessage() : e.getCause().getMessage();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,154,Arrays.sort(files, new FileUtils.FileComparator());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,155,logger.info("Replaying " + StringUtils.join(files, ", "));
src/java/org/apache/cassandra/io/sstable/Component.java,100,case DATA:
src/java/org/apache/cassandra/io/sstable/Component.java,101,case PRIMARY_INDEX:
src/java/org/apache/cassandra/io/sstable/Component.java,102,case FILTER:
src/java/org/apache/cassandra/io/sstable/Component.java,103,case COMPACTED_MARKER:
src/java/org/apache/cassandra/io/sstable/Component.java,104,case STATS:
src/java/org/apache/cassandra/io/sstable/Component.java,105,return type.repr;
src/java/org/apache/cassandra/io/sstable/Component.java,106,case BITMAP_INDEX:
src/java/org/apache/cassandra/io/sstable/Component.java,109,throw new IllegalStateException();
src/java/org/apache/cassandra/io/sstable/Component.java,123,String repr = path.right;
src/java/org/apache/cassandra/io/sstable/Component.java,124,int id = -1;
src/java/org/apache/cassandra/io/sstable/Component.java,128,id = Integer.parseInt(repr.substring(0, separatorPos));
src/java/org/apache/cassandra/io/sstable/Component.java,129,repr = repr.substring(separatorPos+1, repr.length());
src/java/org/apache/cassandra/io/sstable/Component.java,131,Type type = Type.fromRepresentation(repr);
src/java/org/apache/cassandra/io/sstable/Component.java,141,case BITMAP_INDEX:
src/java/org/apache/cassandra/io/sstable/Component.java,142,component = new Component(type, id);
src/java/org/apache/cassandra/io/sstable/Component.java,143,break;
src/java/org/apache/cassandra/io/sstable/SSTable.java,188,final Set<Component> components = new HashSet<Component>();
src/java/org/apache/cassandra/io/sstable/SSTable.java,195,components.add(component.right);
src/java/org/apache/cassandra/io/sstable/SSTable.java,196,return false;
src/java/org/apache/cassandra/service/AntiEntropyService.java,779,throw new RuntimeException("Interrupted while waiting for repair: repair will continue in the background.");
src/java/org/apache/cassandra/client/RingCache.java,58,private Multimap<Range, InetAddress> rangeMap;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1414,DecoratedKey startWith = new DecoratedKey(range.left, null);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1415,DecoratedKey stopAt = new DecoratedKey(range.right, null);
src/java/org/apache/cassandra/db/DecoratedKey.java,38,public class DecoratedKey<T extends Token> implements Comparable<DecoratedKey>
src/java/org/apache/cassandra/db/DecoratedKey.java,40,private static IPartitioner partitioner = StorageService.getPartitioner();
src/java/org/apache/cassandra/db/DecoratedKey.java,55,super();
src/java/org/apache/cassandra/db/DecoratedKey.java,56,assert token != null;
src/java/org/apache/cassandra/db/DecoratedKey.java,64,return token.hashCode();
src/java/org/apache/cassandra/db/DecoratedKey.java,73,return false;
src/java/org/apache/cassandra/db/DecoratedKey.java,77,DecoratedKey other = (DecoratedKey) obj;
src/java/org/apache/cassandra/db/DecoratedKey.java,78,return token.equals(other.token);
src/java/org/apache/cassandra/db/DecoratedKey.java,83,return token.compareTo(other.token);
src/java/org/apache/cassandra/db/DecoratedKey.java,88,return token.equals(partitioner.getMinimumToken());
src/java/org/apache/cassandra/db/HintedHandOffManager.java,461,ByteBuffer empty = ByteBufferUtil.EMPTY_BYTE_BUFFER;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,462,Range range = new Range(partitioner.getToken(empty), partitioner.getToken(empty));
src/java/org/apache/cassandra/db/IndexScanCommand.java,45,public final AbstractBounds range;
src/java/org/apache/cassandra/db/IndexScanCommand.java,62,serializer.serialize(this, dob);
src/java/org/apache/cassandra/db/IndexScanCommand.java,77,return serializer.deserialize(new DataInputStream(bis));
src/java/org/apache/cassandra/db/IndexScanCommand.java,82,public void serialize(IndexScanCommand o, DataOutput out) throws IOException
src/java/org/apache/cassandra/db/IndexScanCommand.java,89,AbstractBounds.serializer().serialize(o.range, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,92,public IndexScanCommand deserialize(DataInput in) throws IOException
src/java/org/apache/cassandra/db/IndexScanCommand.java,102,AbstractBounds range = AbstractBounds.serializer().deserialize(in);
src/java/org/apache/cassandra/db/Memtable.java,61,private final ConcurrentNavigableMap<DecoratedKey, ColumnFamily> columnFamilies = new ConcurrentSkipListMap<DecoratedKey, ColumnFamily>();
src/java/org/apache/cassandra/db/Memtable.java,195,return columnFamilies.tailMap(startWith).entrySet().iterator();
src/java/org/apache/cassandra/db/RangeSliceCommand.java,71,public final AbstractBounds range;
src/java/org/apache/cassandra/db/RangeSliceCommand.java,137,AbstractBounds.serializer().serialize(sliceCommand.range, dos);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,155,AbstractBounds range = AbstractBounds.serializer().deserialize(dis);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,65,final DecoratedKey startWith,
src/java/org/apache/cassandra/db/RowIteratorFactory.java,66,final DecoratedKey stopAt,
src/java/org/apache/cassandra/db/RowIteratorFactory.java,81,&& (stopAt.isEmpty() || row.getKey().compareTo(stopAt) <= 0);
src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java,53,return partitioner.decorateKey(o1).compareTo(partitioner.decorateKey(o2));
src/java/org/apache/cassandra/dht/AbstractBounds.java,33,public abstract class AbstractBounds implements Serializable
src/java/org/apache/cassandra/dht/AbstractBounds.java,49,public final Token left;
src/java/org/apache/cassandra/dht/AbstractBounds.java,50,public final Token right;
src/java/org/apache/cassandra/dht/AbstractBounds.java,69,assert left.equals(token) || contains(token);
src/java/org/apache/cassandra/dht/AbstractBounds.java,70,AbstractBounds lb = createFrom(token);
src/java/org/apache/cassandra/dht/AbstractBounds.java,72,AbstractBounds rb = lb != null && token.equals(right) ? null : new Range(token, right);
src/java/org/apache/cassandra/dht/AbstractBounds.java,73,return new Pair<AbstractBounds,AbstractBounds>(lb, rb);
src/java/org/apache/cassandra/dht/AbstractBounds.java,83,public abstract boolean equals(Object obj);
src/java/org/apache/cassandra/dht/AbstractBounds.java,85,public abstract boolean contains(Token start);
src/java/org/apache/cassandra/dht/AbstractBounds.java,88,public abstract AbstractBounds createFrom(Token right);
src/java/org/apache/cassandra/dht/AbstractBounds.java,90,public abstract List<AbstractBounds> unwrap();
src/java/org/apache/cassandra/dht/AbstractBounds.java,98,List<AbstractBounds> output = new ArrayList<AbstractBounds>();
src/java/org/apache/cassandra/dht/AbstractBounds.java,115,public void serialize(AbstractBounds range, DataOutput out) throws IOException
src/java/org/apache/cassandra/dht/AbstractBounds.java,117,out.writeInt(range instanceof Range ? Type.RANGE.ordinal() : Type.BOUNDS.ordinal());
src/java/org/apache/cassandra/dht/AbstractBounds.java,118,Token.serializer().serialize(range.left, out);
src/java/org/apache/cassandra/dht/AbstractBounds.java,119,Token.serializer().serialize(range.right, out);
src/java/org/apache/cassandra/dht/AbstractBounds.java,122,public AbstractBounds deserialize(DataInput in) throws IOException
src/java/org/apache/cassandra/dht/AbstractBounds.java,125,return new Range(Token.serializer().deserialize(in), Token.serializer().deserialize(in));
src/java/org/apache/cassandra/dht/AbstractBounds.java,126,return new Bounds(Token.serializer().deserialize(in), Token.serializer().deserialize(in));
src/java/org/apache/cassandra/dht/AbstractByteOrderedPartitioner.java,40,public abstract class AbstractByteOrderedPartitioner implements IPartitioner<BytesToken>
src/java/org/apache/cassandra/dht/AbstractByteOrderedPartitioner.java,176,List<Range> sortedRanges = new ArrayList<Range>();
src/java/org/apache/cassandra/dht/AbstractByteOrderedPartitioner.java,183,sortedRanges.add(new Range(lastToken, node));
src/java/org/apache/cassandra/dht/BootStrapper.java,78,final Multimap<String, Map.Entry<InetAddress, Collection<Range>>> rangesToFetch = HashMultimap.create();
src/java/org/apache/cassandra/dht/BootStrapper.java,83,Map<InetAddress, Collection<Range>> workMap = getWorkMap(getRangesWithSources(table)).asMap();
src/java/org/apache/cassandra/dht/BootStrapper.java,195,Collection<Range> myRanges = strat.getPendingAddressRanges(tokenMetadata, token, address);
src/java/org/apache/cassandra/dht/BootStrapper.java,197,Multimap<Range, InetAddress> myRangeAddresses = ArrayListMultimap.create();
src/java/org/apache/cassandra/dht/BootStrapper.java,198,Multimap<Range, InetAddress> rangeAddresses = strat.getRangeAddresses(tokenMetadata);
src/java/org/apache/cassandra/dht/BootStrapper.java,234,Multimap<InetAddress, Range> sources = ArrayListMultimap.create();
src/java/org/apache/cassandra/dht/Bounds.java,29,public class Bounds extends AbstractBounds
src/java/org/apache/cassandra/dht/Bounds.java,40,assert left.compareTo(right) <= 0 || right.equals(partitioner.getMinimumToken()) : "[" + left + "," + right + "]";
src/java/org/apache/cassandra/dht/Bounds.java,45,return Range.contains(left, right, token) || left.equals(token);
src/java/org/apache/cassandra/dht/Bounds.java,56,return Collections.<AbstractBounds>singletonList(this);
src/java/org/apache/cassandra/dht/Bounds.java,64,Bounds rhs = (Bounds)o;
src/java/org/apache/cassandra/dht/LocalPartitioner.java,31,public class LocalPartitioner implements IPartitioner<LocalToken>
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,36,public class OrderPreservingPartitioner implements IPartitioner<StringToken>
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,175,List<Range> sortedRanges = new ArrayList<Range>();
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,182,sortedRanges.add(new Range(lastToken, node));
src/java/org/apache/cassandra/dht/RandomPartitioner.java,38,public class RandomPartitioner implements IPartitioner<BigIntegerToken>
src/java/org/apache/cassandra/dht/Range.java,36,public class Range extends AbstractBounds implements Comparable<Range>, Serializable
src/java/org/apache/cassandra/dht/Range.java,71,return ( compare(bi,left) > 0 && compare(right,bi) >= 0);
src/java/org/apache/cassandra/dht/Range.java,87,return compare(left,that.left) <= 0 && compare(that.right,right) <= 0;
src/java/org/apache/cassandra/dht/Range.java,93,return compare(left,that.left) <= 0 || compare(that.right,right) <= 0;
src/java/org/apache/cassandra/dht/Range.java,125,return Collections.unmodifiableSet(new HashSet<Range>(Arrays.asList(ranges)));
src/java/org/apache/cassandra/dht/Range.java,148,return rangeSet(new Range((Token)ObjectUtils.max(this.left, that.left),
src/java/org/apache/cassandra/dht/Range.java,175,Set<Range> intersection = new HashSet<Range>(2);
src/java/org/apache/cassandra/dht/Range.java,184,Set<Range> intersection = new HashSet<Range>(2);
src/java/org/apache/cassandra/dht/Range.java,203,return (List)Arrays.asList(this);
src/java/org/apache/cassandra/dht/Range.java,204,List<AbstractBounds> unwrapped = new ArrayList<AbstractBounds>(2);
src/java/org/apache/cassandra/dht/Range.java,215,return compare(left,right) >= 0;
src/java/org/apache/cassandra/dht/Range.java,220,ByteBuffer l,r;
src/java/org/apache/cassandra/dht/Range.java,224,l  = ByteBuffer.wrap((byte[]) left.token);
src/java/org/apache/cassandra/dht/Range.java,228,l  = (ByteBuffer) left.token;
src/java/org/apache/cassandra/dht/Range.java,230,else
src/java/org/apache/cassandra/dht/Range.java,233,return left.compareTo(right);
src/java/org/apache/cassandra/dht/Range.java,238,r  = ByteBuffer.wrap((byte[]) right.token);
src/java/org/apache/cassandra/dht/Range.java,240,else
src/java/org/apache/cassandra/dht/Range.java,242,r  = (ByteBuffer) right.token;
src/java/org/apache/cassandra/dht/Range.java,245,return ByteBufferUtil.compareUnsigned(l, r);
src/java/org/apache/cassandra/dht/Range.java,260,return compare(right,rhs.right);
src/java/org/apache/cassandra/dht/Range.java,283,Range rhs = (Range)o;
src/java/org/apache/cassandra/dht/Range.java,284,return compare(left,rhs.left) == 0 && compare(right,rhs.right) == 0;
src/java/org/apache/cassandra/dht/Token.java,31,public abstract class Token<T> implements Comparable<Token<T>>, Serializable
src/java/org/apache/cassandra/dht/Token.java,60,if (!(obj instanceof Token)) {
src/java/org/apache/cassandra/dht/Token.java,63,return token.equals(((Token)obj).token);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,123,Range range = ringCache.getRange(keybuff);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,333,int index = Collections.binarySearch(indexSummary.getIndexPositions(), new IndexSummary.KeyPosition(decoratedKey, -1));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,387,return kp.key;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,402,long left = getPosition(new DecoratedKey(range.left, null), Operator.GT);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,406,long right = getPosition(new DecoratedKey(range.right, null), Operator.GT);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,447,assert decoratedKey.key != null; // null is ok for GE scans
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,459,IndexSummary.KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,481,int comparison = indexDecoratedKey.compareTo(decoratedKey);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,191,Multimap<InetAddress, Range> map = HashMultimap.create();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,195,Range range = metadata.getPrimaryRangeFor(token);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,207,Multimap<Range, InetAddress> map = HashMultimap.create();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,211,Range range = metadata.getPrimaryRangeFor(token);
src/java/org/apache/cassandra/locator/TokenMetadata.java,94,Range sourceRange = getPrimaryRangeFor(getToken(source));
src/java/org/apache/cassandra/locator/TokenMetadata.java,306,return new Range(getPredecessor(right), right);
src/java/org/apache/cassandra/locator/TokenMetadata.java,324,Multimap<Range, InetAddress> map = pendingRanges.get(table);
src/java/org/apache/cassandra/locator/TokenMetadata.java,328,Multimap<Range, InetAddress> priorMap = pendingRanges.putIfAbsent(table, map);
src/java/org/apache/cassandra/locator/TokenMetadata.java,343,List<Range> ranges = new ArrayList<Range>();
src/java/org/apache/cassandra/locator/TokenMetadata.java,417,final boolean insertMin = (includeMin && !ring.get(0).equals(StorageService.getPartitioner().getMinimumToken())) ? true : false;
src/java/org/apache/cassandra/locator/TokenMetadata.java,561,Map<Range, Collection<InetAddress>> ranges = getPendingRanges(table);
src/java/org/apache/cassandra/service/AntiEntropyService.java,158,Map<Range, List<InetAddress>> replicaSets = ss.getRangeToAddressMap(table);
src/java/org/apache/cassandra/service/StorageProxy.java,483,List<AbstractBounds> ranges = getRestrictedRanges(command.range);
src/java/org/apache/cassandra/service/StorageProxy.java,653,List<AbstractBounds> ranges = new ArrayList<AbstractBounds>();
src/java/org/apache/cassandra/service/StorageProxy.java,655,Iterator<Token> ringIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), queryRange.left, true);
src/java/org/apache/cassandra/service/StorageProxy.java,656,AbstractBounds remainder = queryRange;
src/java/org/apache/cassandra/service/StorageProxy.java,663,Pair<AbstractBounds,AbstractBounds> splits = remainder.split(token);
src/java/org/apache/cassandra/service/StorageProxy.java,756,Token leftToken = index_clause.start_key == null ? p.getMinimumToken() : p.getToken(index_clause.start_key);
src/java/org/apache/cassandra/service/StorageProxy.java,757,List<AbstractBounds> ranges = getRestrictedRanges(new Bounds(leftToken, p.getMinimumToken()));
src/java/org/apache/cassandra/service/StorageService.java,552,Map<Range, List<String>> map = new HashMap<Range, List<String>>();
src/java/org/apache/cassandra/service/StorageService.java,567,Map<Range, List<String>> map = new HashMap<Range, List<String>>();
src/java/org/apache/cassandra/service/StorageService.java,578,List<Range> ranges = getAllRanges(tokenMetadata_.sortedTokens());
src/java/org/apache/cassandra/service/StorageService.java,601,Map<Range, List<InetAddress>> rangeToEndpointMap = new HashMap<Range, List<InetAddress>>();
src/java/org/apache/cassandra/service/StorageService.java,903,Multimap<Range, InetAddress> pendingRanges = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,915,Multimap<InetAddress, Range> addressRanges = strategy.getAddressRanges();
src/java/org/apache/cassandra/service/StorageService.java,921,Set<Range> affectedRanges = new HashSet<Range>();
src/java/org/apache/cassandra/service/StorageService.java,966,Multimap<Range, InetAddress> rangeAddresses = Table.open(table).getReplicationStrategy().getRangeAddresses(tokenMetadata_);
src/java/org/apache/cassandra/service/StorageService.java,967,Multimap<InetAddress, Range> sourceRanges = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1030,Multimap<String, Map.Entry<InetAddress, Collection<Range>>> rangesToFetch = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1037,Set<Range> myNewRanges = new HashSet<Range>();
src/java/org/apache/cassandra/service/StorageService.java,1043,Multimap<InetAddress, Range> sourceRanges = getNewSourceRanges(table, myNewRanges);
src/java/org/apache/cassandra/service/StorageService.java,1056,Collection<Range> ranges = entry.getValue();
src/java/org/apache/cassandra/service/StorageService.java,1080,Collection<Range> ranges = getRangesForEndpoint(table, endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1085,Map<Range, List<InetAddress>> currentReplicaEndpoints = new HashMap<Range, List<InetAddress>>();
src/java/org/apache/cassandra/service/StorageService.java,1098,Multimap<Range, InetAddress> changedRanges = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1460,List<Range> ranges = new ArrayList<Range>();
src/java/org/apache/cassandra/service/StorageService.java,1464,Range range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i));
src/java/org/apache/cassandra/service/StorageService.java,1467,Range range = new Range(sortedTokens.get(size - 1), sortedTokens.get(0));
src/java/org/apache/cassandra/service/StorageService.java,1499,return Table.open(table).getReplicationStrategy().getNaturalEndpoints(token);
src/java/org/apache/cassandra/service/StorageService.java,1511,return getLiveNaturalEndpoints(table, partitioner.getToken(key));
src/java/org/apache/cassandra/service/StorageService.java,1517,List<InetAddress> endpoints = Table.open(table).getReplicationStrategy().getNaturalEndpoints(token);
src/java/org/apache/cassandra/service/StorageService.java,1571,Range range = getLocalPrimaryRange();
src/java/org/apache/cassandra/service/StorageService.java,1827,Multimap<Range, InetAddress> changedRanges = getChangedRangesForLeaving(table, endpoint);
src/java/org/apache/cassandra/service/StorageServiceMBean.java,93,public Map<Range, List<String>> getPendingRangeToEndpointMap(String keyspace);
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,65,protected final Collection<Range> ranges;
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,141,AbstractBounds.serializer().serialize(range, dos);
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,160,List<Range> ranges = (size == 0) ? null : new ArrayList<Range>();
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,163,ranges.add((Range) AbstractBounds.serializer().deserialize(dis));
src/java/org/apache/cassandra/thrift/CassandraServer.java,461,AbstractBounds bounds;
src/java/org/apache/cassandra/thrift/CassandraServer.java,467,bounds = new Range(left, right);
src/java/org/apache/cassandra/thrift/CassandraServer.java,471,bounds = new Bounds(p.getToken(range.start_key), p.getToken(range.end_key));
src/java/org/apache/cassandra/thrift/CassandraServer.java,575,Range range = entry.getKey();
src/java/org/apache/cassandra/thrift/CassandraServer.java,598,List<Token> tokens = StorageService.instance.getSplits(state().getKeyspace(), cfName, new Range(tf.fromString(start_token), tf.fromString(end_token)), keys_per_split);
src/java/org/apache/cassandra/utils/MerkleTree.java,312,private byte[] hashHelper(Hashable hashable, Range active, Range range) throws StopRecursion
src/java/org/apache/cassandra/utils/MerkleTree.java,324,Range leftactive = new Range(active.left, node.token);
src/java/org/apache/cassandra/utils/MerkleTree.java,325,Range rightactive = new Range(node.token, active.right);
src/java/org/apache/cassandra/utils/MerkleTree.java,466,public static class TreeRange extends Range
src/java/org/apache/cassandra/service/StorageService.java,394,mutationStage.shutdown();
src/java/org/apache/cassandra/service/StorageService.java,395,mutationStage.awaitTermination(1, TimeUnit.SECONDS);
src/java/org/apache/cassandra/service/StorageService.java,396,CommitLog.instance.shutdownBlocking();
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,93,message.removeHeader(RowMutation.FORWARD_HEADER);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,113,MessagingService.instance().sendOneWay(message, address);
src/java/org/apache/cassandra/net/Header.java,50,protected Map<String, byte[]> details_ = new Hashtable<String, byte[]>();
src/java/org/apache/cassandra/net/Header.java,63,this(from, verb);
src/java/org/apache/cassandra/net/Header.java,64,details_ = details;
src/java/org/apache/cassandra/net/Header.java,84,details_.put(key, value);
src/java/org/apache/cassandra/net/Header.java,89,details_.remove(key);
src/java/org/apache/cassandra/net/Message.java,69,header_.setDetail(key, value);
src/java/org/apache/cassandra/net/Message.java,74,header_.removeDetail(key);
src/java/org/apache/cassandra/service/StorageProxy.java,216,message.removeHeader(RowMutation.FORWARD_HEADER);
src/java/org/apache/cassandra/service/StorageProxy.java,234,ByteArrayOutputStream bos = new ByteArrayOutputStream();
src/java/org/apache/cassandra/service/StorageProxy.java,235,DataOutputStream dos = new DataOutputStream(bos);
src/java/org/apache/cassandra/service/StorageProxy.java,238,byte[] previousHints = message.getHeader(RowMutation.FORWARD_HEADER);
src/java/org/apache/cassandra/service/StorageProxy.java,240,dos.write(previousHints);
src/java/org/apache/cassandra/service/StorageProxy.java,243,message.setHeader(RowMutation.FORWARD_HEADER, bos.toByteArray());
src/java/org/apache/cassandra/service/StorageProxy.java,252,private static void addHintHeader(Message message, InetAddress target) throws IOException
src/java/org/apache/cassandra/service/StorageProxy.java,262,message.setHeader(RowMutation.HINT, bos.toByteArray());
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,22,import java.io.DataInputStream;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,26,import java.nio.ByteBuffer;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,35,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/gms/FailureDetector.java,50,private List<IFailureDetectionEventListener> fdEvntListeners_ = new ArrayList<IFailureDetectionEventListener>();
src/java/org/apache/cassandra/cli/CliClient.java,1243,e.printStackTrace();
src/java/org/apache/cassandra/cli/CliMain.java,84,e.printStackTrace();
src/java/org/apache/cassandra/cli/CliMain.java,164,e.printStackTrace();
src/java/org/apache/cassandra/cli/CliOptions.java,70,options.addOption(null, DEBUG_OPTION,   "display stack traces");
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,48,session = StreamInSession.get(remoteAddress.getAddress(), header.sessionId);
src/java/org/apache/cassandra/streaming/StreamHeader.java,99,return new StreamHeader(table, sessionId, file, pendingFiles);
src/java/org/apache/cassandra/service/StorageService.java,197,private volatile boolean efficientCrossDCWrites;
src/java/org/apache/cassandra/service/StorageService.java,637,case RELEASE_VERSION:
src/java/org/apache/cassandra/service/StorageService.java,638,updateEfficientCrossDCWriteMode();
src/java/org/apache/cassandra/service/StorageService.java,639,break;
src/java/org/apache/cassandra/service/StorageService.java,665,VersionedValue version = entry.getValue().getApplicationState(ApplicationState.RELEASE_VERSION);
src/java/org/apache/cassandra/service/StorageService.java,670,efficientCrossDCWrites = false;
src/java/org/apache/cassandra/service/StorageService.java,671,return;
src/java/org/apache/cassandra/service/StorageService.java,674,efficientCrossDCWrites = true;
src/java/org/apache/cassandra/service/StorageService.java,2187,return efficientCrossDCWrites;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,30,import javax.management.MBeanServer;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,31,import javax.management.ObjectName;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,391,MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,392,ObjectName nameObj = new ObjectName(mbeanName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,394,mbs.unregisterMBean(nameObj);
src/java/org/apache/cassandra/db/Table.java,291,cfs.removeAllSSTables();
src/java/org/apache/cassandra/db/Table.java,309,cfs.unregisterMBean();
src/java/org/apache/cassandra/service/ReadCallback.java,170,case ANY:
src/java/org/apache/cassandra/thrift/CassandraServer.java,91,throw new InvalidRequestException("Consistency level any may not be applied to read operations");
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,229,rows = null;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,230,return;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,236,try
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,260,throw new RuntimeException(e);
src/java/org/apache/cassandra/locator/TokenMetadata.java,53,private BiMap<Token, InetAddress> bootstrapTokens = HashBiMap.create();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,105,private boolean invalid = false;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,390,invalid = true;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1025,return invalid;
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,60,try
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,87,finally
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,532,throw new IOException("Unable to create compaction marker");
src/java/org/apache/cassandra/service/StorageService.java,195,private String operationMode;
src/java/org/apache/cassandra/service/StorageService.java,218,setMode("Normal", false);
src/java/org/apache/cassandra/service/StorageService.java,345,setMode("Client", false);
src/java/org/apache/cassandra/service/StorageService.java,506,logger_.info(m);
src/java/org/apache/cassandra/service/StorageService.java,508,logger_.debug(m);
src/java/org/apache/cassandra/service/StorageService.java,1614,setMode("Leaving: sleeping " + RING_DELAY + " ms for pending range setup", true);
src/java/org/apache/cassandra/service/StorageService.java,1624,setMode("Decommissioned", true);
src/java/org/apache/cassandra/service/StorageService.java,1910,return operationMode;
src/java/org/apache/cassandra/service/StorageService.java,1927,setMode("Starting drain process", true);
src/java/org/apache/cassandra/service/StorageService.java,1929,setMode("Draining: shutting down MessageService", false);
src/java/org/apache/cassandra/service/StorageService.java,1934,setMode("Draining: clearing mutation stage", false);
src/java/org/apache/cassandra/service/StorageService.java,1939,setMode("Draining: flushing column families", false);
src/java/org/apache/cassandra/service/StorageService.java,1961,setMode("Node is drained", true);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,95,private static final String SEPARATOR = "-";
src/java/org/apache/cassandra/db/HintedHandOffManager.java,178,rm.apply();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,34,long[] bits = bf.bitset.getBits();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,35,int bitLength = bits.length;
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,41,dos.writeLong(bits[i]);
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,48,int bitLength = dis.readInt();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,49,long[] bits = new long[bitLength];
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,51,bits[i] = dis.readLong();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,52,OpenBitSet bs = new OpenBitSet(bits, bitLength);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,76,public class OpenBitSet implements Cloneable, Serializable {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,77,protected long[] bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,84,public OpenBitSet(long numBits) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,85,bits = new long[bits2words(numBits)];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,86,wlen = bits.length;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,106,public OpenBitSet(long[] bits, int numWords) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,107,this.bits = bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,108,this.wlen = numWords;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,119,public long capacity() { return bits.length << 6; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,130,public int length() {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,131,return bits.length << 6;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,138,public long[] getBits() { return bits; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,141,public void setBits(long[] bits) { this.bits = bits; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,147,public void setNumWords(int nWords) { this.wlen=nWords; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,156,if (i>=bits.length) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,160,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,173,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,182,if (i>=bits.length) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,185,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,195,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,200,public boolean get1(int index) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,201,int i = index >> 6;                // div 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,202,int bit = index & 0x3f;            // mod 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,203,return ((bits[i]>>>bit) & 0x01) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,217,return ((int)(bits[i]>>>bit)) & 0x01;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,222,public boolean get2(int index) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,223,int word = index >> 6;            // div 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,224,int bit = index & 0x0000003f;     // mod 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,225,return (bits[word] << bit) < 0;   // hmmm, this would work if bit order were reversed
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,235,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,246,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,256,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,277,bits[startWord] |= (startmask & endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,281,bits[startWord] |= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,282,Arrays.fill(bits, startWord+1, endWord, -1L);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,283,bits[endWord] |= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,305,bits[wordNum] &= ~bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,322,bits[wordNum] &= ~bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,331,bits[wordNum] &= ~bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,357,bits[startWord] &= (startmask | endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,361,bits[startWord] &= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,364,Arrays.fill(bits, startWord+1, middle, 0L);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,366,bits[endWord] &= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,394,bits[startWord] &= (startmask | endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,395,return;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,398,bits[startWord] &= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,401,Arrays.fill(bits, startWord+1, middle, 0L);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,403,bits[endWord] &= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,416,boolean val = (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,417,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,428,boolean val = (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,429,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,440,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,450,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,458,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,468,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,469,return (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,479,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,480,return (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,507,bits[startWord] ^= (startmask & endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,511,bits[startWord] ^= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,514,bits[i] = ~bits[i];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,517,bits[endWord] ^= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,522,public static int pop(long v0, long v1, long v2, long v3) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,526,long twosA=v0 & v1;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,527,long ones=v0^v1;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,529,long u2=ones^v2;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,530,long twosB =(ones&v2)|(u2&v3);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,531,ones=u2^v3;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,533,long fours=(twosA&twosB);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,534,long twos=twosA^twosB;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,538,+ pop(ones);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,545,public long cardinality() {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,546,return BitUtil.pop_array(bits,0,wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,552,public static long intersectionCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,553,return BitUtil.pop_intersect(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,559,public static long unionCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,560,long tot = BitUtil.pop_union(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,561,if (a.wlen < b.wlen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,562,tot += BitUtil.pop_array(b.bits, a.wlen, b.wlen-a.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,564,tot += BitUtil.pop_array(a.bits, b.wlen, a.wlen-b.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,566,return tot;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,573,public static long andNotCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,574,long tot = BitUtil.pop_andnot(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,575,if (a.wlen > b.wlen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,576,tot += BitUtil.pop_array(a.bits, b.wlen, a.wlen-b.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,578,return tot;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,584,public static long xorCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,585,long tot = BitUtil.pop_xor(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,586,if (a.wlen < b.wlen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,587,tot += BitUtil.pop_array(b.bits, a.wlen, b.wlen-a.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,589,tot += BitUtil.pop_array(a.bits, b.wlen, a.wlen-b.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,591,return tot;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,602,long word = bits[i] >> subIndex;  // skip all the bits to the right of index
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,609,word = bits[i];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,623,long word = bits[i] >>> subIndex;  // skip all the bits to the right of index
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,630,word = bits[i];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,641,public Object clone() {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,642,try {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,643,OpenBitSet obs = (OpenBitSet)super.clone();
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,644,obs.bits = obs.bits.clone();  // hopefully an array clone is as fast(er) than arraycopy
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,645,return obs;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,647,throw new RuntimeException(e);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,654,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,655,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,659,thisArr[pos] &= otherArr[pos];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,663,Arrays.fill(bits,newLen,this.wlen,0);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,669,public void union(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,670,int newLen = Math.max(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,671,ensureCapacityWords(newLen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,673,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,674,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,675,int pos=Math.min(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,676,while(--pos>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,677,thisArr[pos] |= otherArr[pos];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,679,if (this.wlen < newLen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,680,System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,682,this.wlen = newLen;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,687,public void remove(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,688,int idx = Math.min(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,689,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,690,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,691,while(--idx>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,692,thisArr[idx] &= ~otherArr[idx];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,697,public void xor(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,698,int newLen = Math.max(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,699,ensureCapacityWords(newLen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,701,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,702,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,703,int pos=Math.min(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,704,while(--pos>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,705,thisArr[pos] ^= otherArr[pos];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,707,if (this.wlen < newLen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,708,System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,710,this.wlen = newLen;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,722,public void or(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,723,union(other);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,727,public void andNot(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,728,remove(other);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,732,public boolean intersects(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,733,int pos = Math.min(this.wlen, other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,734,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,735,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,736,while (--pos>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,737,if ((thisArr[pos] & otherArr[pos])!=0) return true;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,739,return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,747,public void ensureCapacityWords(int numWords) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,748,if (bits.length < numWords) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,749,bits = ArrayUtil.grow(bits, numWords);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,765,while (idx>=0 && bits[idx]==0) idx--;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,791,if (a.bits[i]!=0) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,795,if (a.bits[i] != b.bits[i]) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,807,for (int i = bits.length; --i>=0;) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,808,h ^= bits[i];
src/java/org/apache/cassandra/service/StorageProxy.java,572,logger.debug("Received schema check response from " + message.getFrom().getHostAddress());
src/java/org/apache/cassandra/service/StorageProxy.java,600,logger.debug("My version is " + myVersion);
src/java/org/apache/cassandra/service/StorageProxy.java,622,logger.debug("Hosts not in agreement. Didn't get a response from everybody: " + StringUtils.join(results.get(UNREACHABLE), ","));
src/java/org/apache/cassandra/service/StorageProxy.java,629,logger.debug("%s disagrees (%s)", host, entry.getKey());
src/java/org/apache/cassandra/service/StorageProxy.java,647,logger.debug("restricted single token match for query " + queryRange);
src/java/org/apache/cassandra/service/StorageProxy.java,671,logger.debug("restricted ranges for query " + queryRange + " are " + ranges);
src/java/org/apache/cassandra/service/StorageProxy.java,758,logger.debug("scan ranges are " + StringUtils.join(ranges, ","));
src/java/org/apache/cassandra/service/StorageProxy.java,785,logger.debug("reading " + command + " from " + endpoint);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1277,SliceQueryFilter sliceFilter = (SliceQueryFilter) filter.filter;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1283,IColumn sc = cached.getColumn(filter.path.superColumnName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1286,ColumnFamily cf = cached.cloneMeShallow();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1288,cf.addColumn(sc);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1289,return removeDeleted(cf, gcBefore);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1292,else
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1297,removeDeletedColumnsOnly(cached, gcBefore);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1298,return removeDeletedCF(cached, gcBefore);
src/java/org/apache/cassandra/config/KSMetaData.java,44,this.name = name;
src/java/org/apache/cassandra/config/KSMetaData.java,46,this.strategyOptions = strategyOptions;
src/java/org/apache/cassandra/config/KSMetaData.java,48,Map<String, CFMetaData> cfmap = new HashMap<String, CFMetaData>();
src/java/org/apache/cassandra/config/KSMetaData.java,50,cfmap.put(cfm.cfName, cfm);
src/java/org/apache/cassandra/config/KSMetaData.java,51,this.cfMetaData = Collections.unmodifiableMap(cfmap);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,21,import java.io.*;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,365,KSMetaData systemMeta = new KSMetaData(Table.SYSTEM_TABLE,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,366,LocalStrategy.class,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,369,CFMetaData.StatusCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,370,CFMetaData.HintsCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,371,CFMetaData.MigrationsCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,372,CFMetaData.SchemaCf,
src/java/org/apache/cassandra/config/KSMetaData.java,32,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/config/KSMetaData.java,134,CFMetaData[] cfMetaData = new CFMetaData[cfsz];
src/java/org/apache/cassandra/config/KSMetaData.java,137,cfMetaData[i] = CFMetaData.inflate(cfiter.next());
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,5,import java.util.ArrayList;
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,6,import java.util.List;
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,7,import java.util.Map;
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,67,List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,68,newCfs.add(cfm);
src/java/org/apache/cassandra/db/Table.java,321,public void renameCf(Integer cfId, String newName) throws IOException
src/java/org/apache/cassandra/db/Table.java,323,assert columnFamilyStores.containsKey(cfId);
src/java/org/apache/cassandra/db/Table.java,324,ColumnFamilyStore cfs = columnFamilyStores.remove(cfId);
src/java/org/apache/cassandra/db/Table.java,325,unloadCf(cfs);
src/java/org/apache/cassandra/db/Table.java,326,cfs.renameSSTables(newName);
src/java/org/apache/cassandra/db/Table.java,327,initCf(cfId, newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,1,package org.apache.cassandra.db.migration;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,3,import java.io.IOException;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,4,import java.util.ArrayList;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,5,import java.util.List;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,7,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,8,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,9,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,10,import org.apache.cassandra.config.KSMetaData;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,11,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,12,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,13,import org.apache.cassandra.utils.UUIDGen;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,35,public class RenameColumnFamily extends Migration
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,37,private String tableName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,38,private String oldName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,39,private String newName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,40,private Integer cfId;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,43,protected RenameColumnFamily() { /* pass */ }
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,47,public RenameColumnFamily(String tableName, String oldName, String newName) throws ConfigurationException, IOException
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,49,super(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()), DatabaseDescriptor.getDefsVersion());
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,50,this.tableName = tableName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,51,this.oldName = oldName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,52,this.newName = newName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,54,KSMetaData ksm = DatabaseDescriptor.getTableDefinition(tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,58,throw new ConfigurationException("CF is not defined in that keyspace.");
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,60,throw new ConfigurationException("CF is already defined in that keyspace.");
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,62,throw new ConfigurationException("Invalid column family name: " + newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,64,cfId = ksm.cfMetaData().get(oldName).cfId;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,67,KSMetaData newKsm = makeNewKeyspaceDefinition(ksm);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,68,rm = Migration.makeDefinitionMutation(newKsm, null, newVersion);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,73,CFMetaData oldCfm = ksm.cfMetaData().get(oldName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,74,List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,75,newCfs.remove(oldCfm);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,76,assert newCfs.size() == ksm.cfMetaData().size() - 1;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,77,CFMetaData newCfm = CFMetaData.rename(oldCfm, newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,78,newCfs.add(newCfm);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,83,public void applyModels() throws IOException
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,89,KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,90,CFMetaData.purge(oldKsm.cfMetaData().get(oldName));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,91,KSMetaData ksm = makeNewKeyspaceDefinition(DatabaseDescriptor.getTableDefinition(tableName));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,92,try
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,94,CFMetaData.map(ksm.cfMetaData().get(newName));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,100,throw new RuntimeException(ex);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,102,DatabaseDescriptor.setTableDefinition(ksm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,106,Table.open(ksm.name).renameCf(cfId, newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,112,org.apache.cassandra.db.migration.avro.RenameColumnFamily rcf = new org.apache.cassandra.db.migration.avro.RenameColumnFamily();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,113,rcf.ksname = new org.apache.avro.util.Utf8(tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,114,rcf.cfid = cfId;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,115,rcf.old_cfname = new org.apache.avro.util.Utf8(oldName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,116,rcf.new_cfname = new org.apache.avro.util.Utf8(newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,117,mi.migration = rcf;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,122,org.apache.cassandra.db.migration.avro.RenameColumnFamily rcf = (org.apache.cassandra.db.migration.avro.RenameColumnFamily)mi.migration;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,123,tableName = rcf.ksname.toString();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,124,cfId = rcf.cfid;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,125,oldName = rcf.old_cfname.toString();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,126,newName = rcf.new_cfname.toString();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,132,return String.format("Rename column family (%d) %s.%s to %s.%s", cfId, tableName, oldName, tableName, newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,19,package org.apache.cassandra.db.migration;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,21,import java.io.File;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,22,import java.io.IOException;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,23,import java.util.ArrayList;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,24,import java.util.List;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,26,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,28,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,29,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,30,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,31,import org.apache.cassandra.config.KSMetaData;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,33,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,34,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,35,import org.apache.cassandra.utils.UUIDGen;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,39,public class RenameKeyspace extends Migration
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,41,private String oldName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,42,private String newName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,45,protected RenameKeyspace() { /* pass */ }
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,47,public RenameKeyspace(String oldName, String newName) throws ConfigurationException, IOException
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,49,super(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()), DatabaseDescriptor.getDefsVersion());
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,50,this.oldName = oldName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,51,this.newName = newName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,53,KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(oldName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,55,throw new ConfigurationException("Keyspace either does not exist or does not match the one currently defined.");
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,57,throw new ConfigurationException("Keyspace already exists.");
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,59,throw new ConfigurationException("Invalid keyspace name: " + newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,62,KSMetaData newKsm = rename(oldKsm, newName, false);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,64,rm = makeDefinitionMutation(newKsm, oldKsm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,71,List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().size());
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,75,CFMetaData.purge(oldCf);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,76,newCfs.add(CFMetaData.renameTable(oldCf, newName));
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,82,public void applyModels() throws IOException
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,85,renameKsStorageFiles(oldName, newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,87,KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(oldName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,89,CFMetaData.purge(cfm);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,90,KSMetaData newKsm = rename(oldKsm, newName, true);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,93,try
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,95,CFMetaData.map(cfm);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,101,throw new RuntimeException(ex);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,106,DatabaseDescriptor.clearTableDefinition(oldKsm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,107,DatabaseDescriptor.setTableDefinition(newKsm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,111,Table.clear(oldKsm.name);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,112,Table.open(newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,117,private static void renameKsStorageFiles(String oldKs, String newKs) throws IOException
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,119,ArrayList<File> failed = new ArrayList<File>();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,122,File ksDir = new File(dataDir, oldKs);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,125,failed.add(ksDir);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,129,throw new IOException("One or more problems encountered while renaming " + StringUtils.join(failed, ","));
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,134,org.apache.cassandra.db.migration.avro.RenameKeyspace rks = new org.apache.cassandra.db.migration.avro.RenameKeyspace();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,135,rks.old_ksname = new org.apache.avro.util.Utf8(oldName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,136,rks.new_ksname = new org.apache.avro.util.Utf8(newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,137,mi.migration = rks;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,142,org.apache.cassandra.db.migration.avro.RenameKeyspace rks = (org.apache.cassandra.db.migration.avro.RenameKeyspace)mi.migration;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,143,oldName = rks.old_ksname.toString();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,144,newName = rks.new_ksname.toString();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,150,return String.format("Rename keyspace %s to %s", oldName, newName);
src/java/org/apache/cassandra/db/ColumnIndexer.java,73,int endPosition = 0, startPosition = -1;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,973,long size = sstable.length();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,990,maxSize = sstable.length();
src/java/org/apache/cassandra/io/sstable/SSTable.java,244,sum += sstable.length();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,409,right = length();
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,288,long estimatedRows;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,291,estimatedRows = SSTable.estimateRowsFromData(desc, dfile);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,292,iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,427,return getCachedPosition(new Pair<Descriptor, DecoratedKey>(descriptor, key));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,433,return keyCache.get(unifiedKey);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,780,logger.debug("forceFlush requested but everything is clean");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1838,public Future<?> truncate() throws IOException
src/java/org/apache/cassandra/db/Truncation.java,64,public void apply() throws IOException
src/java/org/apache/cassandra/db/Truncation.java,66,Table.open(keyspace).getColumnFamilyStore(columnFamily).truncate();
src/java/org/apache/cassandra/cli/CliClient.java,377,throw new RuntimeException(errorMessage.append(Function.getFunctionNames()).toString());
src/java/org/apache/cassandra/cli/CliClient.java,543,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,572,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,576,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,659,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,700,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,704,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,730,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,734,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,761,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,765,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,791,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,795,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1559,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1590,throw new RuntimeException("IndexType '" + indexTypeAsString + "' is unsupported.");
src/java/org/apache/cassandra/cli/CliClient.java,1738,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1874,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,1895,throw new RuntimeException(errorMessage.append(Function.getFunctionNames()).toString());
src/java/org/apache/cassandra/tools/NodeCmd.java,518,NodeCommand command = null;
src/java/org/apache/cassandra/tools/NodeCmd.java,522,command = cmd.getCommand();
src/java/org/apache/cassandra/tools/NodeCmd.java,526,badUse(e.getMessage());
src/java/org/apache/cassandra/tools/NodeCmd.java,530,NodeCmd nodeCmd = new NodeCmd(probe);
src/java/org/apache/cassandra/tools/NodeCmd.java,533,String[] arguments = cmd.getCommandArguments();
src/java/org/apache/cassandra/tools/NodeCmd.java,537,case RING            : nodeCmd.printRing(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,538,case INFO            : nodeCmd.printInfo(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,539,case CFSTATS         : nodeCmd.printColumnFamilyStats(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,540,case DECOMMISSION    : probe.decommission(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,543,case TPSTATS         : nodeCmd.printThreadPoolStats(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,544,case VERSION         : nodeCmd.printReleaseVersion(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,545,case COMPACTIONSTATS : nodeCmd.printCompactionStats(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,546,case DISABLEGOSSIP   : probe.stopGossiping(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,547,case ENABLEGOSSIP    : probe.startGossiping(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,548,case DISABLETHRIFT   : probe.stopThriftServer(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,549,case ENABLETHRIFT    : probe.startThriftServer(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,551,case DRAIN :
src/java/org/apache/cassandra/tools/NodeCmd.java,552,try { probe.drain(); }
src/java/org/apache/cassandra/tools/NodeCmd.java,553,catch (ExecutionException ee) { err(ee, "Error occured during flushing"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,554,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,556,case NETSTATS :
src/java/org/apache/cassandra/tools/NodeCmd.java,557,if (arguments.length > 0) { nodeCmd.printNetworkStats(InetAddress.getByName(arguments[0]), System.out); }
src/java/org/apache/cassandra/tools/NodeCmd.java,558,else                      { nodeCmd.printNetworkStats(null, System.out); }
src/java/org/apache/cassandra/tools/NodeCmd.java,559,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,561,case SNAPSHOT :
src/java/org/apache/cassandra/tools/NodeCmd.java,564,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,566,case MOVE :
src/java/org/apache/cassandra/tools/NodeCmd.java,567,if (arguments.length != 1) { badUse("Missing token argument for move."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,568,probe.move(arguments[0]);
src/java/org/apache/cassandra/tools/NodeCmd.java,569,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,571,case JOIN:
src/java/org/apache/cassandra/tools/NodeCmd.java,574,System.err.println("This node has already joined the ring.");
src/java/org/apache/cassandra/tools/NodeCmd.java,575,System.exit(1);
src/java/org/apache/cassandra/tools/NodeCmd.java,578,probe.joinRing();
src/java/org/apache/cassandra/tools/NodeCmd.java,579,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,581,case REMOVETOKEN :
src/java/org/apache/cassandra/tools/NodeCmd.java,582,if (arguments.length != 1) { badUse("Missing an argument for removetoken (either status, force, or a token)"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,583,else if (arguments[0].equals("status")) { nodeCmd.printRemovalStatus(System.out); }
src/java/org/apache/cassandra/tools/NodeCmd.java,584,else if (arguments[0].equals("force"))  { nodeCmd.printRemovalStatus(System.out); probe.forceRemoveCompletion(); }
src/java/org/apache/cassandra/tools/NodeCmd.java,585,else                                    { probe.removeToken(arguments[0]); }
src/java/org/apache/cassandra/tools/NodeCmd.java,586,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,588,case CLEANUP :
src/java/org/apache/cassandra/tools/NodeCmd.java,589,case COMPACT :
src/java/org/apache/cassandra/tools/NodeCmd.java,590,case REPAIR  :
src/java/org/apache/cassandra/tools/NodeCmd.java,591,case FLUSH   :
src/java/org/apache/cassandra/tools/NodeCmd.java,592,case SCRUB   :
src/java/org/apache/cassandra/tools/NodeCmd.java,593,case INVALIDATEKEYCACHE :
src/java/org/apache/cassandra/tools/NodeCmd.java,594,case INVALIDATEROWCACHE :
src/java/org/apache/cassandra/tools/NodeCmd.java,596,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,598,case GETCOMPACTIONTHRESHOLD :
src/java/org/apache/cassandra/tools/NodeCmd.java,599,if (arguments.length != 2) { badUse("getcompactionthreshold requires ks and cf args."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,600,probe.getCompactionThreshold(System.out, arguments[0], arguments[1]);
src/java/org/apache/cassandra/tools/NodeCmd.java,601,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,603,case CFHISTOGRAMS :
src/java/org/apache/cassandra/tools/NodeCmd.java,604,if (arguments.length != 2) { badUse("cfhistograms requires ks and cf args"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,605,nodeCmd.printCfHistograms(arguments[0], arguments[1], System.out);
src/java/org/apache/cassandra/tools/NodeCmd.java,606,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,608,case SETCACHECAPACITY :
src/java/org/apache/cassandra/tools/NodeCmd.java,609,if (arguments.length != 4) { badUse("setcachecapacity requires ks, cf, keycachecap, and rowcachecap args."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,610,probe.setCacheCapacities(arguments[0], arguments[1], Integer.parseInt(arguments[2]), Integer.parseInt(arguments[3]));
src/java/org/apache/cassandra/tools/NodeCmd.java,611,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,613,case SETCOMPACTIONTHRESHOLD :
src/java/org/apache/cassandra/tools/NodeCmd.java,614,if (arguments.length != 4) { badUse("setcompactionthreshold requires ks, cf, min, and max threshold args."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,615,int minthreshold = Integer.parseInt(arguments[2]);
src/java/org/apache/cassandra/tools/NodeCmd.java,616,int maxthreshold = Integer.parseInt(arguments[3]);
src/java/org/apache/cassandra/tools/NodeCmd.java,617,if ((minthreshold < 0) || (maxthreshold < 0)) { badUse("Thresholds must be positive integers"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,618,if (minthreshold > maxthreshold)              { badUse("Min threshold cannot be greater than max."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,619,if (minthreshold < 2 && maxthreshold != 0)    { badUse("Min threshold must be at least 2"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,620,probe.setCompactionThreshold(arguments[0], arguments[1], minthreshold, maxthreshold);
src/java/org/apache/cassandra/tools/NodeCmd.java,621,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,623,default :
src/java/org/apache/cassandra/tools/NodeCmd.java,624,throw new RuntimeException("Unreachable code.");
src/java/org/apache/cassandra/tools/NodeCmd.java,595,optionalKSandCFs(command, arguments, probe);
src/java/org/apache/cassandra/gms/FailureDetector.java,213,interArrivalTime = (value - tLast_);
src/java/org/apache/cassandra/gms/FailureDetector.java,219,tLast_ = value;
src/java/org/apache/cassandra/gms/FailureDetector.java,220,arrivalIntervals_.add(interArrivalTime);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,81,long currentPosition = -1L;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,314,ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
src/java/org/apache/cassandra/db/SystemTable.java,21,import java.io.File;
src/java/org/apache/cassandra/db/SystemTable.java,22,import java.io.FilenameFilter;
src/java/org/apache/cassandra/db/SystemTable.java,73,final ByteBuffer hintsPurged6to7 = ByteBufferUtil.bytes("Hints purged as part of upgrading from 0.6.x to 0.7");
src/java/org/apache/cassandra/db/SystemTable.java,75,QueryFilter dotSeven = QueryFilter.getNamesFilter(decorate(COOKIE_KEY), new QueryPath(STATUS_CF), hintsPurged6to7);
src/java/org/apache/cassandra/db/SystemTable.java,76,ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(dotSeven);
src/java/org/apache/cassandra/db/SystemTable.java,82,RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, COOKIE_KEY);
src/java/org/apache/cassandra/db/SystemTable.java,83,rm.add(new QueryPath(STATUS_CF, null, hintsPurged6to7), ByteBufferUtil.bytes("oh yes, it they were purged."), System.currentTimeMillis());
src/java/org/apache/cassandra/db/SystemTable.java,84,rm.apply();
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,23,import java.util.Collection;
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,24,import java.util.List;
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,33,public abstract List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress);
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,34,public abstract void sortByProximity(InetAddress address, List<InetAddress> addresses);
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,38,return a1.getHostAddress().compareTo(a2.getHostAddress());
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,58,List<InetAddress> preferred = new ArrayList<InetAddress>(addresses);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,59,sortByProximity(address, preferred);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,60,return preferred;
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,75,return compareEndpoints(address, a1, a2);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,151,return compareEndpoints(address, a1, a2);
src/java/org/apache/cassandra/locator/SimpleSnitch.java,45,return new ArrayList<InetAddress>(addresses);
src/java/org/apache/cassandra/utils/FBUtilities.java,45,import org.apache.cassandra.db.marshal.AbstractType;
src/java/org/apache/cassandra/utils/FBUtilities.java,248,byte[] bytes = new byte[str.length()/2];
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,882,cf.remove(cname);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,904,c.remove(subColumn.name());
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,33,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,34,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,35,import org.apache.cassandra.db.IColumn;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,175,ColumnFamily cf = columnFamily.cloneMeShallow();
src/java/org/apache/cassandra/db/filter/QueryFilter.java,121,c = filter.filterSuperColumn((SuperColumn)c, gcBefore);
src/java/org/apache/cassandra/db/filter/QueryFilter.java,124,curCF.clear();
src/java/org/apache/cassandra/io/sstable/ReducingKeyIterator.java,27,import java.util.Iterator;
src/java/org/apache/cassandra/io/sstable/ReducingKeyIterator.java,32,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/dht/BootStrapper.java,130,public static Token getBootstrapToken(final TokenMetadata metadata, final Map<InetAddress, Double> load) throws IOException, ConfigurationException
src/java/org/apache/cassandra/dht/BootStrapper.java,134,logger.debug("token manually specified as " + DatabaseDescriptor.getInitialToken());
src/java/org/apache/cassandra/dht/BootStrapper.java,135,Token token = StorageService.getPartitioner().getTokenFactory().fromString(DatabaseDescriptor.getInitialToken());
src/java/org/apache/cassandra/dht/BootStrapper.java,137,throw new ConfigurationException("Bootstraping to existing token " + token + " is not allowed (decommission/removetoken the old node first).");
src/java/org/apache/cassandra/dht/BootStrapper.java,138,return token;
src/java/org/apache/cassandra/dht/BootStrapper.java,141,return getBalancedToken(metadata, load);
src/java/org/apache/cassandra/service/StorageService.java,464,String initialToken = DatabaseDescriptor.getInitialToken();
src/java/org/apache/cassandra/service/StorageService.java,467,token = partitioner.getRandomToken();
src/java/org/apache/cassandra/service/StorageService.java,468,logger_.warn("Generated random token " + token + ". Random tokens will result in an unbalanced ring; see http://wiki.apache.org/cassandra/Operations");
src/java/org/apache/cassandra/service/StorageService.java,470,else
src/java/org/apache/cassandra/service/StorageService.java,472,token = partitioner.getTokenFactory().fromString(initialToken);
src/java/org/apache/cassandra/service/StorageService.java,473,logger_.info("Saved token not found. Using " + token + " from configuration");
src/java/org/apache/cassandra/streaming/StreamOutSession.java,37,public class StreamOutSession
src/java/org/apache/cassandra/tools/NodeCmd.java,468,(i < rwlh.length ? rrlh[i] : ""),
src/java/org/apache/cassandra/tools/NodeCmd.java,469,(i < rrlh.length ? rwlh[i] : ""),
src/java/org/apache/cassandra/cli/CliClient.java,1185,keySpaceName = statement.getChild(0).getText();
src/java/org/apache/cassandra/cli/CliClient.java,1187,if (childCount == 3) {
src/java/org/apache/cassandra/db/Table.java,344,List<Memtable> memtablesToFlush = Collections.emptyList();
src/java/org/apache/cassandra/db/Table.java,419,memtable.cfs.maybeSwitchMemtable(memtable, writeCommitLog);
src/java/org/apache/cassandra/db/Memtable.java,24,import java.util.Collection;
src/java/org/apache/cassandra/db/Memtable.java,25,import java.util.Comparator;
src/java/org/apache/cassandra/db/Memtable.java,26,import java.util.Iterator;
src/java/org/apache/cassandra/db/Memtable.java,27,import java.util.Map;
src/java/org/apache/cassandra/cli/CliClient.java,719,CfDef cfDef = new CfDef(keySpace, statement.getChild(0).getText());
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,125,return bytes;
interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java,66,ENDPOINTS((short)3, "endpoints");
src/java/org/apache/cassandra/thrift/CassandraServer.java,576,List<String> endpoints = entry.getValue();
src/java/org/apache/cassandra/thrift/CassandraServer.java,577,ranges.add(new TokenRange(tf.toString(range.left), tf.toString(range.right), endpoints));
src/java/org/apache/cassandra/service/StorageService.java,549,keyspace = DatabaseDescriptor.getNonSystemTables().get(0);
src/java/org/apache/cassandra/dht/BootStrapper.java,164,throw new RuntimeException("No other nodes seen!  Unable to bootstrap");
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,330,String msg = "Exception encountered during startup.";
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,331,logger.error(msg, e);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,334,System.out.println(msg);
src/java/org/apache/cassandra/config/CFMetaData.java,52,public final static double DEFAULT_READ_REPAIR_CHANCE = 1.0;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,21,import java.io.IOError;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,22,import java.io.IOException;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,24,import java.util.Map.Entry;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,26,import com.google.common.base.Function;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,28,import com.google.common.collect.Iterators;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,95,final SSTableScanner scanner = sstable.getScanner(RANGE_FILE_BUFFER_SIZE, filter);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,175,int bufferSize = (int) Math.min(Math.max(file.length(), 1), 32 * 1024 * 1024);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,548,return new SSTableScanner(this, filter, bufferSize);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,558,return new SSTableScanner(this, bufferSize, true);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,567,return dfile.getSegment(position, bufferSize);
src/java/org/apache/cassandra/io/util/SegmentedFile.java,64,public abstract FileDataInput getSegment(long position, int bufferSize);
src/java/org/apache/cassandra/io/util/SegmentedFile.java,130,FileDataInput segment = getSegment(nextpos, bufferSize);
src/java/org/apache/cassandra/streaming/FileStreamTask.java,46,public static final int CHUNK_SIZE = 10*1024*1024;
src/java/org/apache/cassandra/io/sstable/IndexSummary.java,61,indexPositions.add(new KeyPosition(decoratedKey, indexPosition));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,154,logger.info("Opening " + descriptor);
src/java/org/apache/cassandra/service/StorageProxy.java,334,ReadCommand digestCommand = null;
src/java/org/apache/cassandra/service/StorageProxy.java,337,digestCommand = command.copy();
src/java/org/apache/cassandra/service/StorageProxy.java,338,digestCommand.setDigestQuery(true);
src/java/org/apache/cassandra/service/StorageProxy.java,345,logger.debug("reading data locally");
src/java/org/apache/cassandra/service/StorageProxy.java,352,logger.debug("reading data from " + dataPoint);
src/java/org/apache/cassandra/service/StorageProxy.java,364,logger.debug("reading digest locally");
src/java/org/apache/cassandra/service/StorageProxy.java,372,logger.debug("reading digest for from " + digestPoint);
src/java/org/apache/cassandra/service/StorageProxy.java,377,readCallbacks.add(handler);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,87,String addressRack = getRack(address);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,88,String a1Rack = getRack(a1);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,89,String a2Rack = getRack(a2);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,91,return -1;
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,93,return 1;
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,63,protected void runMayThrow() throws ConfigurationException
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,65,reloadConfiguration();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,68,ResourceWatcher.watch(RACK_PROPERTY_FILENAME, runnable, 60 * 1000);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,355,buildSecondaryIndexes(getSSTables(), FBUtilities.singleton(info.name));
src/java/org/apache/cassandra/streaming/StreamInSession.java,159,entry.getKey().buildSecondaryIndexes(entry.getValue(), entry.getKey().getIndexedColumns());
src/java/org/apache/cassandra/scheduler/RoundRobinScheduler.java,47,private static boolean started = false;
src/java/org/apache/cassandra/scheduler/RoundRobinScheduler.java,59,assert !started;
src/java/org/apache/cassandra/scheduler/RoundRobinScheduler.java,64,taskCount = new Semaphore(options.throttle_limit);
src/java/org/apache/cassandra/service/StorageService.java,331,return initialized;
src/java/org/apache/cassandra/service/StorageService.java,1005,try
src/java/org/apache/cassandra/service/StorageService.java,1036,Multimap<Range, InetAddress> changedRanges = getChangedRangesForLeaving(table, endpoint);
src/java/org/apache/cassandra/gms/FailureDetector.java,155,listener.convict(ep);
src/java/org/apache/cassandra/gms/Gossiper.java,621,subscriber.onDead(ep, epState);
src/java/org/apache/cassandra/gms/IFailureDetectionEventListener.java,35,public void convict(InetAddress ep);
src/java/org/apache/cassandra/service/AntiEntropyService.java,33,import org.apache.cassandra.concurrent.Stage;
src/java/org/apache/cassandra/service/AntiEntropyService.java,34,import org.apache.cassandra.concurrent.StageManager;
src/java/org/apache/cassandra/service/AntiEntropyService.java,94,public final static long REQUEST_TIMEOUT = 48*60*60*1000;
src/java/org/apache/cassandra/service/AntiEntropyService.java,102,private final ExpiringMap<String, Map<TreeRequest, TreePair>> requests;
src/java/org/apache/cassandra/service/AntiEntropyService.java,114,requests = new ExpiringMap<String, Map<TreeRequest, TreePair>>(REQUEST_TIMEOUT);
src/java/org/apache/cassandra/service/AntiEntropyService.java,723,class RepairSession extends Thread
src/java/org/apache/cassandra/dht/Bounds.java,50,return new Bounds(left, token);
src/java/org/apache/cassandra/dht/Range.java,149,(Token)ObjectUtils.min(this.right, that.right)));
src/java/org/apache/cassandra/dht/Range.java,177,intersection.add(new Range(first.left, that.right));
src/java/org/apache/cassandra/dht/Range.java,178,intersection.add(new Range(that.left, first.right));
src/java/org/apache/cassandra/dht/Range.java,186,intersection.add(new Range(other.left, wrapping.right));
src/java/org/apache/cassandra/dht/Range.java,189,intersection.add(new Range(wrapping.left, other.right));
src/java/org/apache/cassandra/dht/Range.java,197,return new Range(left, token);
src/java/org/apache/cassandra/dht/Range.java,205,unwrapped.add(new Range(left, partitioner.getMinimumToken()));
src/java/org/apache/cassandra/dht/Range.java,206,unwrapped.add(new Range(partitioner.getMinimumToken(), right));
src/java/org/apache/cassandra/service/ClientState.java,112,public void hasKeyspaceListAccess(Permission perm) throws InvalidRequestException
src/java/org/apache/cassandra/service/ClientState.java,126,public void hasColumnFamilyListAccess(Permission perm) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/CassandraServer.java,431,state().hasKeyspaceListAccess(Permission.READ);
src/java/org/apache/cassandra/thrift/CassandraServer.java,539,state().hasKeyspaceListAccess(Permission.READ);
src/java/org/apache/cassandra/thrift/CassandraServer.java,670,state().hasColumnFamilyListAccess(Permission.WRITE);
src/java/org/apache/cassandra/thrift/CassandraServer.java,696,state().hasColumnFamilyListAccess(Permission.WRITE);
src/java/org/apache/cassandra/thrift/CassandraServer.java,721,state().hasKeyspaceListAccess(Permission.WRITE);
src/java/org/apache/cassandra/thrift/CassandraServer.java,767,state().hasKeyspaceListAccess(Permission.WRITE);
src/java/org/apache/cassandra/thrift/CassandraServer.java,793,state().hasKeyspaceListAccess(Permission.WRITE);
src/java/org/apache/cassandra/thrift/CassandraServer.java,826,state().hasColumnFamilyListAccess(Permission.WRITE);
src/java/org/apache/cassandra/streaming/FileStreamTask.java,23,import java.io.RandomAccessFile;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,27,import java.nio.channels.FileChannel;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,28,import java.nio.channels.SocketChannel;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,30,import org.slf4j.Logger;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,31,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,33,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,43,private static Logger logger = LoggerFactory.getLogger( FileStreamTask.class );
src/java/org/apache/cassandra/streaming/FileStreamTask.java,93,RandomAccessFile raf = new RandomAccessFile(new File(header.file.getFilename()), "r");
src/java/org/apache/cassandra/streaming/FileStreamTask.java,96,FileChannel fc = raf.getChannel();
src/java/org/apache/cassandra/streaming/FileStreamTask.java,115,FileUtils.closeQuietly(raf);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,69,final ColumnFamilyStore cfs
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,60,static
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,64,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,43,import org.apache.cassandra.io.DeletionService;
src/java/org/apache/cassandra/io/DeletionService.java,1,package org.apache.cassandra.io;
src/java/org/apache/cassandra/io/DeletionService.java,24,import java.io.File;
src/java/org/apache/cassandra/io/DeletionService.java,25,import java.io.IOException;
src/java/org/apache/cassandra/io/DeletionService.java,26,import java.util.concurrent.ExecutionException;
src/java/org/apache/cassandra/io/DeletionService.java,27,import java.util.concurrent.ExecutorService;
src/java/org/apache/cassandra/io/DeletionService.java,29,import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
src/java/org/apache/cassandra/io/DeletionService.java,30,import org.apache.cassandra.io.util.FileUtils;
src/java/org/apache/cassandra/io/DeletionService.java,31,import org.apache.cassandra.utils.WrappedRunnable;
src/java/org/apache/cassandra/io/DeletionService.java,33,public class DeletionService
src/java/org/apache/cassandra/io/DeletionService.java,35,public static final int MAX_RETRIES = 10;
src/java/org/apache/cassandra/io/DeletionService.java,37,public static final ExecutorService executor = new JMXEnabledThreadPoolExecutor("FILEUTILS-DELETE-POOL");
src/java/org/apache/cassandra/io/DeletionService.java,43,protected void runMayThrow() throws IOException
src/java/org/apache/cassandra/io/DeletionService.java,45,FileUtils.deleteWithConfirm(new File(file));
src/java/org/apache/cassandra/io/DeletionService.java,48,executor.execute(deleter);
src/java/org/apache/cassandra/io/DeletionService.java,51,public static void waitFor() throws InterruptedException, ExecutionException
src/java/org/apache/cassandra/io/DeletionService.java,53,executor.submit(new Runnable() { public void run() { }}).get();
src/java/org/apache/cassandra/service/StorageService.java,54,import org.apache.cassandra.io.DeletionService;
src/java/org/apache/cassandra/service/StorageService.java,1959,DeletionService.waitFor();
src/java/org/apache/cassandra/cli/CliCompiler.java,99,return getColumnFamily(astNode.getChild(0).getText(), cfDefs);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,317,IPartitioner rowPartitioner = StorageService.getPartitioner();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,319,? BytesType.instance
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,320,: new LocalByPartionerType(StorageService.getPartitioner());
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,321,final CFMetaData indexedCfMetadata = CFMetaData.newIndexMetadata(metadata, info, columnComparator);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,141,return open(desc, components, DatabaseDescriptor.getCFMetaData(desc.ksname, desc.cfname), StorageService.getPartitioner());
src/java/org/apache/cassandra/service/GCInspector.java,25,import java.lang.reflect.InvocationTargetException;
src/java/org/apache/cassandra/service/GCInspector.java,26,import java.lang.reflect.Method;
src/java/org/apache/cassandra/service/GCInspector.java,27,import java.util.*;
src/java/org/apache/cassandra/service/GCInspector.java,49,List<Object> beans = new ArrayList<Object>(); // these are instances of com.sun.management.GarbageCollectorMXBean
src/java/org/apache/cassandra/service/GCInspector.java,55,Class gcBeanClass = null;
src/java/org/apache/cassandra/service/GCInspector.java,56,try
src/java/org/apache/cassandra/service/GCInspector.java,58,gcBeanClass = Class.forName("com.sun.management.GarbageCollectorMXBean");
src/java/org/apache/cassandra/service/GCInspector.java,59,Class.forName("com.sun.management.GcInfo");
src/java/org/apache/cassandra/service/GCInspector.java,64,logger.warn("Cannot load sun GC monitoring classes. GCInspector is disabled.");
src/java/org/apache/cassandra/service/GCInspector.java,73,Object gc = ManagementFactory.newPlatformMXBeanProxy(server, name.getCanonicalName(), gcBeanClass);
src/java/org/apache/cassandra/service/GCInspector.java,102,SunGcWrapper gcw = new SunGcWrapper(gc);
src/java/org/apache/cassandra/service/GCInspector.java,106,Long previous = gctimes.get(gcw.getName());
src/java/org/apache/cassandra/service/GCInspector.java,108,continue;
src/java/org/apache/cassandra/service/GCInspector.java,109,gctimes.put(gcw.getName(), gcw.getCollectionTime());
src/java/org/apache/cassandra/service/GCInspector.java,111,long previousMemoryUsed = 0;
src/java/org/apache/cassandra/service/GCInspector.java,112,long memoryUsed = 0;
src/java/org/apache/cassandra/service/GCInspector.java,113,long memoryMax = 0;
src/java/org/apache/cassandra/service/GCInspector.java,116,previousMemoryUsed += entry.getValue().getUsed();
src/java/org/apache/cassandra/service/GCInspector.java,120,MemoryUsage mu = entry.getValue();
src/java/org/apache/cassandra/service/GCInspector.java,121,memoryUsed += mu.getUsed();
src/java/org/apache/cassandra/service/GCInspector.java,122,memoryMax += mu.getMax();
src/java/org/apache/cassandra/service/GCInspector.java,125,String st = String.format("GC for %s: %s ms, %s reclaimed leaving %s used; max is %s",
src/java/org/apache/cassandra/service/GCInspector.java,126,gcw.getName(), gcw.getDuration(), previousMemoryUsed - memoryUsed, memoryUsed, memoryMax);
src/java/org/apache/cassandra/service/GCInspector.java,157,private static final class SunGcWrapper
src/java/org/apache/cassandra/service/GCInspector.java,160,private Map<String, MemoryUsage> usageBeforeGc = null;
src/java/org/apache/cassandra/service/GCInspector.java,161,private Map<String, MemoryUsage> usageAfterGc = null;
src/java/org/apache/cassandra/service/GCInspector.java,162,private String name;
src/java/org/apache/cassandra/service/GCInspector.java,163,private Long collectionTime;
src/java/org/apache/cassandra/service/GCInspector.java,164,private Long duration;
src/java/org/apache/cassandra/service/GCInspector.java,171,try
src/java/org/apache/cassandra/service/GCInspector.java,173,assert Class.forName("com.sun.management.GarbageCollectorMXBean").isAssignableFrom(gcMxBean.getClass());
src/java/org/apache/cassandra/service/GCInspector.java,174,Method getGcInfo = gcMxBean.getClass().getDeclaredMethod("getLastGcInfo");
src/java/org/apache/cassandra/service/GCInspector.java,175,Object lastGcInfo = getGcInfo.invoke(gcMxBean);
src/java/org/apache/cassandra/service/GCInspector.java,178,usageBeforeGc = (Map<String, MemoryUsage>)lastGcInfo.getClass().getDeclaredMethod("getMemoryUsageBeforeGc").invoke(lastGcInfo);
src/java/org/apache/cassandra/service/GCInspector.java,179,usageAfterGc = (Map<String, MemoryUsage>)lastGcInfo.getClass().getDeclaredMethod("getMemoryUsageAfterGc").invoke(lastGcInfo);
src/java/org/apache/cassandra/service/GCInspector.java,180,duration = (Long)lastGcInfo.getClass().getDeclaredMethod("getDuration").invoke(lastGcInfo);
src/java/org/apache/cassandra/service/GCInspector.java,181,name = (String)gcMxBean.getClass().getDeclaredMethod("getName").invoke(gcMxBean);
src/java/org/apache/cassandra/service/GCInspector.java,182,collectionTime = (Long)gcMxBean.getClass().getDeclaredMethod("getCollectionTime").invoke(gcMxBean);
src/java/org/apache/cassandra/service/GCInspector.java,187,throw new RuntimeException(e);
src/java/org/apache/cassandra/service/GCInspector.java,191,throw new RuntimeException(e);
src/java/org/apache/cassandra/service/GCInspector.java,195,throw new RuntimeException(e);
src/java/org/apache/cassandra/service/GCInspector.java,199,throw new RuntimeException(e);
src/java/org/apache/cassandra/service/GCInspector.java,205,return name;
src/java/org/apache/cassandra/service/GCInspector.java,210,return collectionTime;
src/java/org/apache/cassandra/service/GCInspector.java,215,return duration;
src/java/org/apache/cassandra/service/GCInspector.java,220,return usageAfterGc;
src/java/org/apache/cassandra/service/GCInspector.java,225,return usageBeforeGc;
src/java/org/apache/cassandra/service/GCInspector.java,230,return usageBeforeGc == null;
src/java/org/apache/cassandra/db/CompactionManager.java,79,private Map<ColumnFamilyStore, Integer> estimatedCompactions = new NonBlockingHashMap<ColumnFamilyStore, Integer>();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,169,return split.getLocations()[0];
src/java/org/apache/cassandra/config/CFMetaData.java,582,AbstractType validator = defaultValidator;
src/java/org/apache/cassandra/config/CFMetaData.java,583,ColumnDefinition columnDefinition = column_metadata.get(column);
src/java/org/apache/cassandra/config/CFMetaData.java,586,return validator;
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,1,package org.apache.cassandra.concurrent;
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,24,import java.util.concurrent.*;
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,28,public class RetryingScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,32,this(1, threadPoolName, priority);
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,37,super(corePoolSize, new NamedThreadFactory(threadPoolName, priority));
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,42,this(1, threadPoolName, Thread.NORM_PRIORITY);
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,48,return new LoggingScheduledFuture<V>(task);
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,56,private static class LoggingScheduledFuture<V> implements RunnableScheduledFuture<V>
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,58,private final RunnableScheduledFuture<V> task;
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,62,this.task = task;
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,67,return task.isPeriodic();
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,72,return task.getDelay(unit);
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,77,return task.compareTo(o);
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,82,try
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,84,task.run();
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,89,Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e.getCause());
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,95,return task.cancel(mayInterruptIfRunning);
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,100,return task.isCancelled();
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,105,return task.isDone();
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,108,public V get() throws InterruptedException, ExecutionException
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,110,return task.get();
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,113,public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java,115,return task.get(timeout, unit);
src/java/org/apache/cassandra/service/StorageService.java,81,private static Logger logger_ = LoggerFactory.getLogger(StorageService.class);
src/java/org/apache/cassandra/service/StorageService.java,153,public static final RetryingScheduledThreadPoolExecutor scheduledTasks = new RetryingScheduledThreadPoolExecutor("ScheduledTasks");
src/java/org/apache/cassandra/service/StorageService.java,158,public static final RetryingScheduledThreadPoolExecutor tasks = new RetryingScheduledThreadPoolExecutor("NonPeriodicTasks");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1842,try
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1844,forceBlockingFlush();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1848,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/SystemTable.java,80,logger.info("Upgrading to 0.7. Purging hints if there are any. Old hints will be snapshotted.");
src/java/org/apache/cassandra/db/SystemTable.java,81,new Truncation(Table.SYSTEM_TABLE, HintedHandOffManager.HINTS_CF).apply();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,483,sync();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,484,segments.add(new CommitLogSegment());
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,86,List<ColumnFamily> versions = new ArrayList<ColumnFamily>(sources.size());
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,87,List<InetAddress> versionSources = new ArrayList<InetAddress>(sources.size());
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,88,DecoratedKey key;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,98,key = current.left.key;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,99,versions.add(current.left.cf);
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,100,versionSources.add(current.right);
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,107,versions.clear();
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,108,versionSources.clear();
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,109,return new Row(key, resolved);
src/java/org/apache/cassandra/service/RepairCallback.java,35,public class RepairCallback<T> implements IAsyncCallback
src/java/org/apache/cassandra/service/RepairCallback.java,37,private final IResponseResolver<T> resolver;
src/java/org/apache/cassandra/service/RepairCallback.java,57,public T get() throws TimeoutException, DigestMismatchException, IOException
src/java/org/apache/cassandra/service/RowRepairResolver.java,113,MessagingService.instance().sendOneWay(repairMessage, endpoints.get(i));
src/java/org/apache/cassandra/service/StorageProxy.java,49,import org.apache.cassandra.net.IAsyncCallback;
src/java/org/apache/cassandra/service/StorageProxy.java,50,import org.apache.cassandra.net.Message;
src/java/org/apache/cassandra/service/StorageProxy.java,51,import org.apache.cassandra.net.MessagingService;
src/java/org/apache/cassandra/service/StorageProxy.java,795,throw new RuntimeException(e);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,333,throw new InvalidRequestException(String.format("[%s][%s][%s] = [%s] failed validation (%s)",
src/java/org/apache/cassandra/thrift/ThriftValidation.java,336,ByteBufferUtil.bytesToHex(column.name),
src/java/org/apache/cassandra/thrift/ThriftValidation.java,337,ByteBufferUtil.bytesToHex(column.value),
src/java/org/apache/cassandra/thrift/ThriftValidation.java,338,me.getMessage()));
src/java/org/apache/cassandra/config/KSMetaData.java,114,Class<AbstractReplicationStrategy> repStratClass;
src/java/org/apache/cassandra/config/KSMetaData.java,130,strategyOptions.put(e.getKey().toString(), e.getValue().toString());
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,106,listenAddr = FBUtilities.getLocalAddress();
src/java/org/apache/cassandra/streaming/StreamInSession.java,203,set.addAll(session.files);
src/java/org/apache/cassandra/streaming/StreamInSession.java,204,if(session.current != null) {
src/java/org/apache/cassandra/service/RowRepairResolver.java,86,return new Row(key, resolved);
src/java/org/apache/cassandra/service/StorageProxy.java,321,assert !command.isDigestQuery();
src/java/org/apache/cassandra/service/StorageProxy.java,322,logger.debug("Command/ConsistencyLevel is {}/{}", command, consistency_level);
src/java/org/apache/cassandra/service/StorageProxy.java,324,List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(command.table, command.key);
src/java/org/apache/cassandra/service/StorageProxy.java,327,RowDigestResolver resolver = new RowDigestResolver(command.table, command.key);
src/java/org/apache/cassandra/service/StorageProxy.java,328,ReadCallback<Row> handler = getReadCallback(resolver, command, consistency_level, endpoints);
src/java/org/apache/cassandra/service/StorageProxy.java,329,handler.assureSufficientLiveNodes();
src/java/org/apache/cassandra/service/StorageProxy.java,330,assert !handler.endpoints.isEmpty();
src/java/org/apache/cassandra/service/StorageProxy.java,341,InetAddress dataPoint = handler.endpoints.get(0);
src/java/org/apache/cassandra/service/StorageProxy.java,346,StageManager.getStage(Stage.READ).execute(new LocalReadRunnable(command, handler));
src/java/org/apache/cassandra/service/StorageProxy.java,348,else
src/java/org/apache/cassandra/service/StorageProxy.java,365,StageManager.getStage(Stage.READ).execute(new LocalReadRunnable(digestCommand, handler));
src/java/org/apache/cassandra/service/StorageProxy.java,381,List<RepairCallback<Row>> repairResponseHandlers = null;
src/java/org/apache/cassandra/service/StorageProxy.java,384,ReadCallback<Row> handler = readCallbacks.get(i);
src/java/org/apache/cassandra/service/StorageProxy.java,385,Row row;
src/java/org/apache/cassandra/service/StorageProxy.java,386,ReadCommand command = commands.get(i);
src/java/org/apache/cassandra/service/StorageProxy.java,387,try
src/java/org/apache/cassandra/service/StorageProxy.java,389,long startTime2 = System.currentTimeMillis();
src/java/org/apache/cassandra/service/StorageProxy.java,390,row = handler.get(); // CL.ONE is special cased here to ignore digests even if some have arrived
src/java/org/apache/cassandra/service/StorageProxy.java,392,rows.add(row);
src/java/org/apache/cassandra/service/StorageProxy.java,395,logger.debug("Read: " + (System.currentTimeMillis() - startTime2) + " ms.");
src/java/org/apache/cassandra/service/StorageProxy.java,402,RowRepairResolver resolver = new RowRepairResolver(command.table, command.key);
src/java/org/apache/cassandra/service/StorageProxy.java,403,RepairCallback<Row> repairHandler = new RepairCallback<Row>(resolver, handler.endpoints);
src/java/org/apache/cassandra/service/StorageProxy.java,409,repairResponseHandlers = new ArrayList<RepairCallback<Row>>();
src/java/org/apache/cassandra/service/StorageProxy.java,410,repairResponseHandlers.add(repairHandler);
src/java/org/apache/cassandra/service/StorageProxy.java,421,Row row = handler.get();
src/java/org/apache/cassandra/service/StorageProxy.java,427,throw new AssertionError(e); // full data requested from each node here, no digests should be sent
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,440,logger.info("Discarding obsolete commit log:" + segment);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,441,segment.close();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,443,DeletionService.executeDelete(segment.getPath());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,446,iter.remove();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,448,else
src/java/org/apache/cassandra/service/StorageService.java,1378,String[] families;
src/java/org/apache/cassandra/service/StorageService.java,1381,ArrayList<String> names = new ArrayList<String>();
src/java/org/apache/cassandra/service/StorageService.java,1382,for (ColumnFamilyStore cfStore : getValidColumnFamilies(tableName)) {
src/java/org/apache/cassandra/service/StorageService.java,1383,names.add(cfStore.getColumnFamilyName());
src/java/org/apache/cassandra/service/StorageService.java,1385,families = names.toArray(new String[] {});
src/java/org/apache/cassandra/service/StorageService.java,1387,else
src/java/org/apache/cassandra/service/StorageService.java,1389,families = columnFamilies;
src/java/org/apache/cassandra/gms/VersionedValue.java,122,return new VersionedValue(VersionedValue.STATUS_NORMAL
src/java/org/apache/cassandra/gms/VersionedValue.java,124,+ VersionedValue.DELIMITER + VersionedValue.REMOVING_TOKEN
src/java/org/apache/cassandra/gms/VersionedValue.java,125,+ VersionedValue.DELIMITER + partitioner.getTokenFactory().toString(token));
src/java/org/apache/cassandra/gms/VersionedValue.java,130,return new VersionedValue(VersionedValue.STATUS_NORMAL
src/java/org/apache/cassandra/gms/VersionedValue.java,132,+ VersionedValue.DELIMITER + VersionedValue.REMOVED_TOKEN
src/java/org/apache/cassandra/gms/VersionedValue.java,133,+ VersionedValue.DELIMITER + partitioner.getTokenFactory().toString(token));
src/java/org/apache/cassandra/service/StorageService.java,759,assert pieces.length == 4;
src/java/org/apache/cassandra/service/StorageService.java,760,handleStateRemoving(endpoint, getPartitioner().getTokenFactory().fromString(pieces[3]), pieces[2]);
src/java/org/apache/cassandra/service/StorageService.java,827,InetAddress removeEndpoint = tokenMetadata_.getEndpoint(removeToken);
src/java/org/apache/cassandra/service/StorageService.java,830,return;
src/java/org/apache/cassandra/service/StorageService.java,834,logger_.info("Received removeToken gossip about myself. Is this node a replacement for a removed one?");
src/java/org/apache/cassandra/service/StorageService.java,835,return;
src/java/org/apache/cassandra/service/StorageService.java,840,excise(removeToken, removeEndpoint);
src/java/org/apache/cassandra/service/StorageService.java,845,logger_.debug("Token " + removeToken + " removed manually (endpoint was " + removeEndpoint + ")");
src/java/org/apache/cassandra/service/StorageService.java,848,tokenMetadata_.addLeavingEndpoint(removeEndpoint);
src/java/org/apache/cassandra/service/StorageService.java,849,calculatePendingRanges();
src/java/org/apache/cassandra/service/StorageService.java,852,restoreReplicaCount(removeEndpoint, endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1843,Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.removingNonlocal(localToken, token));
src/java/org/apache/cassandra/service/StorageService.java,1864,Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.removedNonlocal(localToken, token));
src/java/org/apache/cassandra/service/StorageService.java,1872,assert !replicatingNodes.isEmpty();
src/java/org/apache/cassandra/service/StorageService.java,1873,replicatingNodes.remove(node);
src/java/org/apache/cassandra/io/sstable/SSTable.java,233,assert keys > 0 && ifile.getFilePointer() > 0 && ifile.length() > 0;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,300,mutationList.add(mutation);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,308,throw new IOException(e + " Output must be (key, {(column,value)...}) for ColumnFamily or (key, {supercolumn:{(column,value)...}...}) for SuperColumnFamily");
src/java/org/apache/cassandra/service/AntiEntropyService.java,25,import java.util.concurrent.ConcurrentHashMap;
src/java/org/apache/cassandra/service/AntiEntropyService.java,26,import java.util.concurrent.ConcurrentMap;
src/java/org/apache/cassandra/service/AntiEntropyService.java,107,private final ConcurrentMap<String, RepairSession.Callback> sessions;
src/java/org/apache/cassandra/service/AntiEntropyService.java,115,sessions = new ConcurrentHashMap<String, RepairSession.Callback>();
src/java/org/apache/cassandra/service/AntiEntropyService.java,133,sessions.get(request.sessionid).completed(request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,142,Map<TreeRequest, TreePair> ctrees = requests.get(sessionid);
src/java/org/apache/cassandra/service/AntiEntropyService.java,145,ctrees = new HashMap<TreeRequest, TreePair>();
src/java/org/apache/cassandra/service/AntiEntropyService.java,146,requests.put(sessionid, ctrees);
src/java/org/apache/cassandra/service/AntiEntropyService.java,148,return ctrees;
src/java/org/apache/cassandra/service/AntiEntropyService.java,173,InetAddress LOCAL = FBUtilities.getLocalAddress();
src/java/org/apache/cassandra/service/AntiEntropyService.java,176,Map<TreeRequest, TreePair> ctrees = rendezvousPairs(request.sessionid);
src/java/org/apache/cassandra/service/AntiEntropyService.java,178,List<Differencer> differencers = new ArrayList<Differencer>();
src/java/org/apache/cassandra/service/AntiEntropyService.java,185,TreePair waiting = ctrees.remove(remotereq);
src/java/org/apache/cassandra/service/AntiEntropyService.java,190,differencers.add(new Differencer(remotereq, tree, waiting.right));
src/java/org/apache/cassandra/service/AntiEntropyService.java,191,continue;
src/java/org/apache/cassandra/service/AntiEntropyService.java,195,ctrees.put(remotereq, new TreePair(tree, null));
src/java/org/apache/cassandra/service/AntiEntropyService.java,196,logger.debug("Stored local tree for " + request + " to wait for " + remotereq);
src/java/org/apache/cassandra/service/AntiEntropyService.java,199,else
src/java/org/apache/cassandra/service/AntiEntropyService.java,202,TreePair waiting = ctrees.remove(request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,206,differencers.add(new Differencer(request, waiting.left, tree));
src/java/org/apache/cassandra/service/AntiEntropyService.java,211,ctrees.put(request, new TreePair(null, tree));
src/java/org/apache/cassandra/service/AntiEntropyService.java,212,logger.debug("Stored remote tree for " + request + " to wait for local tree.");
src/java/org/apache/cassandra/service/AntiEntropyService.java,218,logger.info("Queueing comparison " + differencer);
src/java/org/apache/cassandra/service/AntiEntropyService.java,219,StageManager.getStage(Stage.ANTI_ENTROPY).execute(differencer);
src/java/org/apache/cassandra/service/AntiEntropyService.java,401,StageManager.getStage(Stage.ANTI_ENTROPY).execute(this);
src/java/org/apache/cassandra/service/AntiEntropyService.java,402,logger.debug("Validated " + validated + " rows into AEService tree for " + request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,420,public static class Differencer implements Runnable
src/java/org/apache/cassandra/service/AntiEntropyService.java,422,public final TreeRequest request;
src/java/org/apache/cassandra/service/AntiEntropyService.java,423,public final MerkleTree ltree;
src/java/org/apache/cassandra/service/AntiEntropyService.java,424,public final MerkleTree rtree;
src/java/org/apache/cassandra/service/AntiEntropyService.java,429,this.request = request;
src/java/org/apache/cassandra/service/AntiEntropyService.java,430,this.ltree = ltree;
src/java/org/apache/cassandra/service/AntiEntropyService.java,431,this.rtree = rtree;
src/java/org/apache/cassandra/service/AntiEntropyService.java,440,InetAddress local = FBUtilities.getLocalAddress();
src/java/org/apache/cassandra/service/AntiEntropyService.java,445,ltree.partitioner(StorageService.getPartitioner());
src/java/org/apache/cassandra/service/AntiEntropyService.java,447,rtree.partitioner(StorageService.getPartitioner());
src/java/org/apache/cassandra/service/AntiEntropyService.java,462,logger.info(String.format(format, "are consistent"));
src/java/org/apache/cassandra/service/AntiEntropyService.java,463,AntiEntropyService.instance.completedRequest(request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,464,return;
src/java/org/apache/cassandra/service/AntiEntropyService.java,468,logger.info(String.format(format, "have " + differences.size() + " range(s) out of sync"));
src/java/org/apache/cassandra/service/AntiEntropyService.java,469,try
src/java/org/apache/cassandra/service/AntiEntropyService.java,471,performStreamingRepair();
src/java/org/apache/cassandra/service/AntiEntropyService.java,475,throw new RuntimeException(e);
src/java/org/apache/cassandra/service/AntiEntropyService.java,483,void performStreamingRepair() throws IOException
src/java/org/apache/cassandra/service/AntiEntropyService.java,485,logger.info("Performing streaming repair of " + differences.size() + " ranges for " + request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,486,ColumnFamilyStore cfstore = Table.open(request.cf.left).getColumnFamilyStore(request.cf.right);
src/java/org/apache/cassandra/service/AntiEntropyService.java,487,try
src/java/org/apache/cassandra/service/AntiEntropyService.java,490,Collection<SSTableReader> sstables = cfstore.getSSTables();
src/java/org/apache/cassandra/service/AntiEntropyService.java,491,Callback callback = new Callback();
src/java/org/apache/cassandra/service/AntiEntropyService.java,493,StreamOutSession outsession = StreamOutSession.create(request.cf.left, request.endpoint, callback);
src/java/org/apache/cassandra/service/AntiEntropyService.java,500,throw new IOException("Streaming repair failed.", e);
src/java/org/apache/cassandra/service/AntiEntropyService.java,506,return "#<Differencer " + request + ">";
src/java/org/apache/cassandra/service/AntiEntropyService.java,513,class Callback extends WrappedRunnable
src/java/org/apache/cassandra/service/AntiEntropyService.java,516,private final AtomicInteger outstanding = new AtomicInteger(2);
src/java/org/apache/cassandra/service/AntiEntropyService.java,518,protected void runMayThrow() throws Exception
src/java/org/apache/cassandra/service/AntiEntropyService.java,522,return;
src/java/org/apache/cassandra/service/AntiEntropyService.java,525,logger.info("Finished streaming repair for " + request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,526,AntiEntropyService.instance.completedRequest(request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,727,private final SimpleCondition requestsMade;
src/java/org/apache/cassandra/service/AntiEntropyService.java,728,private final ConcurrentHashMap<TreeRequest,Object> requests;
src/java/org/apache/cassandra/service/AntiEntropyService.java,731,super("manual-repair-" + UUID.randomUUID());
src/java/org/apache/cassandra/service/AntiEntropyService.java,732,this.tablename = tablename;
src/java/org/apache/cassandra/service/AntiEntropyService.java,733,this.cfnames = cfnames;
src/java/org/apache/cassandra/service/AntiEntropyService.java,734,this.requestsMade = new SimpleCondition();
src/java/org/apache/cassandra/service/AntiEntropyService.java,735,this.requests = new ConcurrentHashMap<TreeRequest,Object>();
src/java/org/apache/cassandra/service/AntiEntropyService.java,741,public void blockUntilRunning() throws InterruptedException
src/java/org/apache/cassandra/service/AntiEntropyService.java,743,requestsMade.await();
src/java/org/apache/cassandra/service/AntiEntropyService.java,757,Callback callback = new Callback();
src/java/org/apache/cassandra/service/AntiEntropyService.java,770,logger.info("Waiting for repair requests: " + requests.keySet());
src/java/org/apache/cassandra/service/AntiEntropyService.java,771,requestsMade.signalAll();
src/java/org/apache/cassandra/service/AntiEntropyService.java,775,callback.completed.await();
src/java/org/apache/cassandra/service/AntiEntropyService.java,787,class Callback
src/java/org/apache/cassandra/service/AntiEntropyService.java,789,public final SimpleCondition completed = new SimpleCondition();
src/java/org/apache/cassandra/service/AntiEntropyService.java,795,blockUntilRunning();
src/java/org/apache/cassandra/service/AntiEntropyService.java,799,throw new AssertionError(e);
src/java/org/apache/cassandra/service/AntiEntropyService.java,801,requests.remove(request);
src/java/org/apache/cassandra/service/AntiEntropyService.java,802,logger.info("{} completed successfully: {} outstanding.", request, requests.size());
src/java/org/apache/cassandra/service/AntiEntropyService.java,804,return;
src/java/org/apache/cassandra/service/AntiEntropyService.java,809,completed.signalAll();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,462,generations.add(desc.generation);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,465,throw new RuntimeException(String.format("Can't open sstables from the future! Current version %s, found file: %s",
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,466,Descriptor.CURRENT_VERSION, desc));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,621,Pair<Descriptor,Component> component = SSTable.tryComponentFromFilename(dir, name);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,626,Set<Component> components = sstables.get(component.left);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,629,components = new HashSet<Component>();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,630,sstables.put(component.left, components);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,632,components.add(component.right);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,634,else
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,635,logger.debug("not including compacted sstable " + component.left.cfname + "-" + component.left.generation);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,637,return false;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,71,logger.debug("Creating file for {}", localFile.getFilename());
src/java/org/apache/cassandra/cli/CliClient.java,780,CfDef cfDef = getCfDef(cfName);
src/java/org/apache/cassandra/cli/CliClient.java,237,String key = CliCompiler.getKey(columnFamilySpec);
src/java/org/apache/cassandra/cli/CliClient.java,245,byte[] superColumn = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), columnFamily);
src/java/org/apache/cassandra/cli/CliClient.java,264,String key = CliCompiler.getKey(columnFamilySpec);
src/java/org/apache/cassandra/cli/CliClient.java,270,CfDef cfDef = getCfDef(columnFamily);
src/java/org/apache/cassandra/cli/CliClient.java,283,superColumnName = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
src/java/org/apache/cassandra/cli/CliClient.java,285,columnName = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
src/java/org/apache/cassandra/cli/CliClient.java,290,superColumnName = columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 0), cfDef);
src/java/org/apache/cassandra/cli/CliClient.java,291,columnName = subColumnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec, 1), cfDef);
src/java/org/apache/cassandra/cli/CliClient.java,907,cfDef.setDefault_validation_class(mValue);
src/java/org/apache/cassandra/tools/NodeCmd.java,541,case LOADBALANCE     : probe.loadBalance(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,542,case CLEARSNAPSHOT   : probe.clearSnapshot(); break;
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,93,public ArrayList<InetAddress> getNaturalEndpoints(Token searchToken) throws IllegalStateException
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,104,assert getReplicationFactor() <= endpoints.size() : String.format("endpoints %s generated for RF of %s",
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,105,Arrays.toString(endpoints.toArray()),
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,106,getReplicationFactor());
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,121,public abstract List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) throws IllegalStateException;
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,118,throw new IllegalStateException(String.format("datacenter (%s) has no more endpoints, (%s) replicas still needed",
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,119,dcName, dcReplicas - dcEndpoints.size()));
src/java/org/apache/cassandra/locator/OldNetworkTopologyStrategy.java,100,throw new IllegalStateException(String.format("replication factor (%s) exceeds number of endpoints (%s)", replicas, endpoints.size()));
src/java/org/apache/cassandra/locator/SimpleStrategy.java,60,throw new IllegalStateException(String.format("replication factor (%s) exceeds number of endpoints (%s)", replicas, endpoints.size()));
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,102,url.openStream(); // catches well-formed but bogus URLs
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,74,throw new RuntimeException("Couldn't figure out log4j configuration.");
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,76,PropertyConfigurator.configureAndWatch(configLocation.getFile(), 10000);
src/java/org/apache/cassandra/service/ReadCallback.java,81,: endpoints.subList(0, Math.min(endpoints.size(), blockfor)); // min so as to not throw exception until assureSufficient is called
src/java/org/apache/cassandra/service/StorageService.java,49,import org.apache.cassandra.dht.BootStrapper;
src/java/org/apache/cassandra/service/StorageService.java,50,import org.apache.cassandra.dht.IPartitioner;
src/java/org/apache/cassandra/service/StorageService.java,51,import org.apache.cassandra.dht.Range;
src/java/org/apache/cassandra/service/StorageService.java,52,import org.apache.cassandra.dht.Token;
src/java/org/apache/cassandra/service/StorageService.java,1584,return partitioner.midpoint(range.left, range.right);
src/java/org/apache/cassandra/service/StorageService.java,1585,else
src/java/org/apache/cassandra/service/StorageService.java,1586,return keys.get(keys.size() / 2).token;
src/java/org/apache/cassandra/service/StorageService.java,1707,public void move(String newToken) throws IOException, InterruptedException
src/java/org/apache/cassandra/service/StorageServiceMBean.java,195,public void move(String newToken) throws IOException, InterruptedException;
src/java/org/apache/cassandra/tools/NodeProbe.java,355,public void move(String newToken) throws IOException, InterruptedException
src/java/org/apache/cassandra/cli/CliClient.java,1296,cf_def.memtable_operations_in_millions, cf_def.memtable_throughput_in_mb, cf_def.memtable_flush_after_mins);
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,193,allTokens.put(r.right, allTokens.get(r.right) + StorageService.instance.getSplits(ks, cfmd.cfName, r, 1).size());
src/java/org/apache/cassandra/cli/CliClient.java,205,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,209,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/db/ColumnFamily.java,23,import java.util.Collection;
src/java/org/apache/cassandra/db/ColumnFamily.java,24,import java.util.Iterator;
src/java/org/apache/cassandra/db/ColumnFamily.java,28,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/db/ColumnFamily.java,29,import java.util.concurrent.atomic.AtomicLong;
src/java/org/apache/cassandra/db/ColumnFamily.java,31,import org.slf4j.Logger;
src/java/org/apache/cassandra/db/ColumnFamily.java,32,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/db/ColumnFamily.java,42,public class ColumnFamily implements IColumnContainer, IIterableColumns
src/java/org/apache/cassandra/db/ColumnFamily.java,44,private static Logger logger = LoggerFactory.getLogger(ColumnFamily.class);
src/java/org/apache/cassandra/db/ColumnFamily.java,74,final AtomicLong markedForDeleteAt = new AtomicLong(Long.MIN_VALUE);
src/java/org/apache/cassandra/db/ColumnFamily.java,75,final AtomicInteger localDeletionTime = new AtomicInteger(Integer.MIN_VALUE);
src/java/org/apache/cassandra/db/ColumnFamily.java,76,private ConcurrentSkipListMap<ByteBuffer, IColumn> columns;
src/java/org/apache/cassandra/db/ColumnFamily.java,89,cf.markedForDeleteAt.set(markedForDeleteAt.get());
src/java/org/apache/cassandra/db/ColumnFamily.java,90,cf.localDeletionTime.set(localDeletionTime.get());
src/java/org/apache/cassandra/db/ColumnFamily.java,106,ColumnFamily cf = cloneMeShallow();
src/java/org/apache/cassandra/db/ColumnFamily.java,107,cf.columns = columns.clone();
src/java/org/apache/cassandra/db/ColumnFamily.java,131,addColumn(column);
src/java/org/apache/cassandra/db/ColumnFamily.java,132,delete(cf);
src/java/org/apache/cassandra/db/ColumnFamily.java,145,return columns.size();
src/java/org/apache/cassandra/db/ColumnFamily.java,214,ByteBuffer name = column.name();
src/java/org/apache/cassandra/db/ColumnFamily.java,215,IColumn oldColumn;
src/java/org/apache/cassandra/db/ColumnFamily.java,220,((SuperColumn) oldColumn).putColumn(column);
src/java/org/apache/cassandra/db/ColumnFamily.java,221,break;  // Delegated to SuperColumn
src/java/org/apache/cassandra/db/ColumnFamily.java,223,else
src/java/org/apache/cassandra/db/ColumnFamily.java,226,IColumn reconciledColumn = column.reconcile(oldColumn);
src/java/org/apache/cassandra/db/ColumnFamily.java,228,break;
src/java/org/apache/cassandra/db/ColumnFamily.java,238,return columns.get(name);
src/java/org/apache/cassandra/db/ColumnFamily.java,243,return columns.keySet();
src/java/org/apache/cassandra/db/ColumnFamily.java,248,return columns.values();
src/java/org/apache/cassandra/db/ColumnFamily.java,253,return columns.descendingMap().values();
src/java/org/apache/cassandra/db/ColumnFamily.java,258,return columns;
src/java/org/apache/cassandra/db/ColumnFamily.java,263,columns.remove(columnName);
src/java/org/apache/cassandra/db/ColumnFamily.java,269,localDeletionTime.set(localtime);
src/java/org/apache/cassandra/db/ColumnFamily.java,270,markedForDeleteAt.set(timestamp);
src/java/org/apache/cassandra/db/ColumnFamily.java,275,FBUtilities.atomicSetMax(localDeletionTime, cf2.getLocalDeletionTime()); // do this first so we won't have a column that's "deleted" but has no local deletion time
src/java/org/apache/cassandra/db/ColumnFamily.java,276,FBUtilities.atomicSetMax(markedForDeleteAt, cf2.getMarkedForDeleteAt());
src/java/org/apache/cassandra/db/ColumnFamily.java,281,return markedForDeleteAt.get() > Long.MIN_VALUE;
src/java/org/apache/cassandra/db/ColumnFamily.java,326,return (AbstractType)columns.comparator();
src/java/org/apache/cassandra/db/ColumnFamily.java,378,return markedForDeleteAt.get();
src/java/org/apache/cassandra/db/ColumnFamily.java,383,return localDeletionTime.get();
src/java/org/apache/cassandra/db/ColumnFamily.java,410,return getColumnCount();
src/java/org/apache/cassandra/db/ColumnFamily.java,415,return columns.values().iterator();
src/java/org/apache/cassandra/db/ColumnFamilySerializer.java,99,dos.writeInt(columnFamily.localDeletionTime.get());
src/java/org/apache/cassandra/db/ColumnFamilySerializer.java,100,dos.writeLong(columnFamily.markedForDeleteAt.get());
src/java/org/apache/cassandra/db/RowMutation.java,175,sc.markForDeleteAt(localDeleteTime, timestamp);
src/java/org/apache/cassandra/db/SuperColumn.java,29,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/db/SuperColumn.java,30,import java.util.concurrent.atomic.AtomicLong;
src/java/org/apache/cassandra/db/SuperColumn.java,43,public class SuperColumn implements IColumn, IColumnContainer
src/java/org/apache/cassandra/db/SuperColumn.java,52,private ByteBuffer name_;
src/java/org/apache/cassandra/db/SuperColumn.java,53,private ConcurrentSkipListMap<ByteBuffer, IColumn> columns_;
src/java/org/apache/cassandra/db/SuperColumn.java,54,private AtomicInteger localDeletionTime = new AtomicInteger(Integer.MIN_VALUE);
src/java/org/apache/cassandra/db/SuperColumn.java,55,private AtomicLong markedForDeleteAt = new AtomicLong(Long.MIN_VALUE);
src/java/org/apache/cassandra/db/SuperColumn.java,66,name_ = name;
src/java/org/apache/cassandra/db/SuperColumn.java,67,columns_ = columns;
src/java/org/apache/cassandra/db/SuperColumn.java,72,return (AbstractType)columns_.comparator();
src/java/org/apache/cassandra/db/SuperColumn.java,77,SuperColumn sc = new SuperColumn(name_, getComparator());
src/java/org/apache/cassandra/db/SuperColumn.java,78,sc.markForDeleteAt(localDeletionTime.get(), markedForDeleteAt.get());
src/java/org/apache/cassandra/db/SuperColumn.java,84,SuperColumn sc = new SuperColumn(name_, new ConcurrentSkipListMap<ByteBuffer, IColumn>(columns_));
src/java/org/apache/cassandra/db/SuperColumn.java,85,sc.markForDeleteAt(localDeletionTime.get(), markedForDeleteAt.get());
src/java/org/apache/cassandra/db/SuperColumn.java,91,return markedForDeleteAt.get() > Long.MIN_VALUE;
src/java/org/apache/cassandra/db/SuperColumn.java,96,return name_;
src/java/org/apache/cassandra/db/SuperColumn.java,101,return columns_.values();
src/java/org/apache/cassandra/db/SuperColumn.java,106,IColumn column = columns_.get(columnName);
src/java/org/apache/cassandra/db/SuperColumn.java,134,return DBConstants.shortSize_ + name_.remaining() + DBConstants.intSize_ + DBConstants.longSize_ + DBConstants.intSize_ + size();
src/java/org/apache/cassandra/db/SuperColumn.java,139,columns_.remove(columnName);
src/java/org/apache/cassandra/db/SuperColumn.java,169,ByteBuffer name = column.name();
src/java/org/apache/cassandra/db/SuperColumn.java,170,IColumn oldColumn;
src/java/org/apache/cassandra/db/SuperColumn.java,173,IColumn reconciledColumn = column.reconcile(oldColumn);
src/java/org/apache/cassandra/db/SuperColumn.java,175,break;
src/java/org/apache/cassandra/db/SuperColumn.java,188,assert column instanceof SuperColumn;
src/java/org/apache/cassandra/db/SuperColumn.java,194,FBUtilities.atomicSetMax(localDeletionTime, column.getLocalDeletionTime()); // do this first so we won't have a column that's "deleted" but has no local deletion time
src/java/org/apache/cassandra/db/SuperColumn.java,195,FBUtilities.atomicSetMax(markedForDeleteAt, column.getMarkedForDeleteAt());
src/java/org/apache/cassandra/db/SuperColumn.java,200,return markedForDeleteAt.get();
src/java/org/apache/cassandra/db/SuperColumn.java,208,((SuperColumn)columnDiff).markForDeleteAt(columnNew.getLocalDeletionTime(), columnNew.getMarkedForDeleteAt());
src/java/org/apache/cassandra/db/SuperColumn.java,216,IColumn columnInternal = columns_.get(subColumn.name());
src/java/org/apache/cassandra/db/SuperColumn.java,239,assert name_ != null;
src/java/org/apache/cassandra/db/SuperColumn.java,240,digest.update(name_.duplicate());
src/java/org/apache/cassandra/db/SuperColumn.java,244,buffer.writeLong(markedForDeleteAt.get());
src/java/org/apache/cassandra/db/SuperColumn.java,261,sb.append(comparator.getString(name_));
src/java/org/apache/cassandra/db/SuperColumn.java,268,sb.append(getComparator().getColumnsString(columns_.values()));
src/java/org/apache/cassandra/db/SuperColumn.java,276,return mostRecentLiveChangeAt() > markedForDeleteAt.get();
src/java/org/apache/cassandra/db/SuperColumn.java,281,return localDeletionTime.get();
src/java/org/apache/cassandra/db/SuperColumn.java,287,this.localDeletionTime.set(localDeleteTime);
src/java/org/apache/cassandra/db/SuperColumn.java,288,this.markedForDeleteAt.set(timestamp);
src/java/org/apache/cassandra/db/SuperColumn.java,293,SuperColumn sc = new SuperColumn(ByteBufferUtil.clone(name_), this.getComparator());
src/java/org/apache/cassandra/db/SuperColumn.java,294,sc.localDeletionTime = localDeletionTime;
src/java/org/apache/cassandra/db/SuperColumn.java,295,sc.markedForDeleteAt = markedForDeleteAt;
src/java/org/apache/cassandra/db/SuperColumn.java,368,superColumn.markForDeleteAt(localDeleteTime, markedForDeleteAt);
src/java/org/apache/cassandra/db/filter/QueryFilter.java,119,((SuperColumn)c).markForDeleteAt(c.getLocalDeletionTime(), returnCF.getMarkedForDeleteAt());
src/java/org/apache/cassandra/db/filter/QueryFilter.java,122,((SuperColumn)c).markForDeleteAt(c.getLocalDeletionTime(), deletedAt); // reset sc tombstone time to what it should be
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,38,import org.apache.cassandra.thrift.Cassandra;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,39,import org.apache.cassandra.thrift.InvalidRequestException;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,40,import org.apache.cassandra.thrift.TokenRange;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,41,import org.apache.cassandra.thrift.TBinaryProtocol;
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,44,public static void skipBloomFilter(FileDataInput in) throws IOException
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,59,public static void skipIndex(FileDataInput file) throws IOException
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,62,int columnIndexSize = file.readInt();
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,28,import java.util.ArrayList;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,38,import org.apache.cassandra.utils.Filter;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,46,private final BufferedRandomAccessFile file;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,53,private final long columnPosition;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,74,this.file = file;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,82,file.seek(this.dataStart);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,85,try
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,87,IndexHelper.defreezeBloomFilter(file, dataSize, sstable.descriptor.usesOldBloomFilter);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,92,throw (EOFException) e;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,94,logger.debug("Invalid bloom filter in {}; will rebuild it", sstable);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,97,try
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,99,IndexHelper.deserializeIndex(file);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,103,logger.debug("Invalid row summary in {}; will rebuild it", sstable);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,105,file.seek(this.dataStart);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,108,IndexHelper.skipBloomFilter(file);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,109,IndexHelper.skipIndex(file);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,111,ColumnFamily.serializer().deserializeFromSSTableNoColumns(columnFamily, file);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,112,columnCount = file.readInt();
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,113,columnPosition = file.getFilePointer();
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,133,return file.getFilePointer() < finishedAt;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,160,return file.getPath();
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,165,file.seek(dataStart);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,168,out.write(file.readByte());
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,174,file.seek(columnPosition - 4); // seek to before column count int
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,187,try
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,189,file.seek(columnPosition);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,193,throw new IOError(e);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,73,FileOutputStream fos = new FileOutputStream(localFile.getFilename(), true);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,74,FileChannel fc = fos.getChannel();
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,76,long offset = 0;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,77,try
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,81,long length = section.right - section.left;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,82,long bytesRead = 0;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,90,offset += length;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,96,session.retry(remoteFile);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,99,FileUtils.deleteWithConfirm(new File(localFile.getFilename()));
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,100,throw ex;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,102,finally
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,104,fc.close();
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,107,session.finished(remoteFile, localFile);
src/java/org/apache/cassandra/streaming/StreamInSession.java,102,public void finished(PendingFile remoteFile, PendingFile localFile) throws IOException
src/java/org/apache/cassandra/streaming/StreamInSession.java,108,buildFutures.add(future);
src/java/org/apache/cassandra/streaming/StreamInSession.java,136,assert sstable.getTableName().equals(table);
src/java/org/apache/cassandra/streaming/StreamInSession.java,138,continue;
src/java/org/apache/cassandra/streaming/StreamInSession.java,139,ColumnFamilyStore cfs = Table.open(sstable.getTableName()).getColumnFamilyStore(sstable.getColumnFamilyName());
src/java/org/apache/cassandra/streaming/StreamInSession.java,140,cfs.addSSTable(sstable);
src/java/org/apache/cassandra/streaming/StreamInSession.java,142,cfstores.put(cfs, new ArrayList<SSTableReader>());
src/java/org/apache/cassandra/streaming/StreamInSession.java,143,cfstores.get(cfs).add(sstable);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1487,NamesQueryFilter extraFilter = null;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1588,data.addAll(getColumnFamily(new QueryFilter(dk, path, extraFilter)));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1496,logger.debug("Expanding slice filter to entire row to cover additional expressions");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1497,firstFilter = new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1498,ByteBufferUtil.EMPTY_BYTE_BUFFER,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1499,((SliceQueryFilter) dataFilter).reversed,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1500,Integer.MAX_VALUE);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1502,else
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1504,logger.debug("adding extraFilter to cover additional expressions");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1505,SortedSet<ByteBuffer> columns = new TreeSet<ByteBuffer>(getComparator());
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1509,continue;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1510,columns.add(expr.column_name);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1512,extraFilter = new NamesQueryFilter(columns);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1515,else
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1517,logger.debug("adding columns to firstFilter to cover additional expressions");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1519,assert dataFilter instanceof NamesQueryFilter;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1520,SortedSet<ByteBuffer> columns = new TreeSet<ByteBuffer>(getComparator());
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1524,continue;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1525,columns.add(expr.column_name);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1529,columns.addAll(((NamesQueryFilter) dataFilter).columns);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1530,firstFilter = new NamesQueryFilter(columns);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1645,continue;
src/java/org/apache/cassandra/cli/CliClient.java,875,double chance = Double.parseDouble(mValue) / 100;
src/java/org/apache/cassandra/cli/CliClient.java,878,throw new RuntimeException("Error: read_repair_chance / 100 should not be greater than 1.");
src/java/org/apache/cassandra/gms/Gossiper.java,921,epState = new EndpointState(new HeartBeatState(0));
src/java/org/apache/cassandra/gms/Gossiper.java,924,epState.setHasToken(true);
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,68,Gossiper.instance.setVersion(socket.getInetAddress(), version);
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,83,logger.error("Received untranslated stream from newer protcol version. Terminating connection!");
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,84,close();
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,85,return;
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,101,logger.info("Received connection from newer protocol version. Ignorning message.");
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,102,else
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,113,version = MessagingService.getBits(header, 15, 8);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,37,import org.apache.hadoop.mapreduce.OutputFormat;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,43,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,218,close((org.apache.hadoop.mapred.Reporter)null);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,226,client.stopNicely();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,227,try
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,231,client.join();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,237,throw new AssertionError(e);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,290,public void stopNicely() throws IOException
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,293,throw lastException;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,355,close();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,372,close();
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,106,RowRepairResolver.maybeScheduleRepairs(resolved, table, key, versions, versionSources);
src/java/org/apache/cassandra/service/RowRepairResolver.java,77,maybeScheduleRepairs(resolved, table, key, versions, endpoints);
src/java/org/apache/cassandra/tools/NodeCmd.java,39,import org.apache.cassandra.concurrent.IExecutorMBean;
src/java/org/apache/cassandra/tools/NodeCmd.java,192,outs.printf("%-25s%10s%10s%15s%n", "Pool Name", "Active", "Pending", "Completed");
src/java/org/apache/cassandra/tools/NodeCmd.java,194,Iterator<Map.Entry<String, IExecutorMBean>> threads = probe.getThreadPoolMBeanProxies();
src/java/org/apache/cassandra/tools/NodeCmd.java,197,Entry<String, IExecutorMBean> thread = threads.next();
src/java/org/apache/cassandra/tools/NodeCmd.java,199,IExecutorMBean threadPoolProxy = thread.getValue();
src/java/org/apache/cassandra/tools/NodeCmd.java,200,outs.printf("%-25s%10s%10s%15s%n",
src/java/org/apache/cassandra/tools/NodeCmd.java,201,poolName, threadPoolProxy.getActiveCount(), threadPoolProxy.getPendingTasks(), threadPoolProxy.getCompletedTasks());
src/java/org/apache/cassandra/tools/NodeProbe.java,43,import org.apache.cassandra.concurrent.IExecutorMBean;
src/java/org/apache/cassandra/tools/NodeProbe.java,590,class ThreadPoolProxyMBeanIterator implements Iterator<Map.Entry<String, IExecutorMBean>>
src/java/org/apache/cassandra/tools/NodeProbe.java,613,IExecutorMBean threadPoolProxy = JMX.newMBeanProxy(mbeanServerConn, objectName, IExecutorMBean.class);
src/java/org/apache/cassandra/tools/NodeProbe.java,614,return new AbstractMap.SimpleImmutableEntry<String, IExecutorMBean>(poolName, threadPoolProxy);
src/java/org/apache/cassandra/utils/StatusLogger.java,36,import org.apache.cassandra.concurrent.IExecutorMBean;
src/java/org/apache/cassandra/utils/StatusLogger.java,51,logger.info(String.format("%-25s%10s%10s", "Pool Name", "Active", "Pending"));
src/java/org/apache/cassandra/utils/StatusLogger.java,65,IExecutorMBean threadPoolProxy = JMX.newMBeanProxy(server, objectName, IExecutorMBean.class);
src/java/org/apache/cassandra/utils/StatusLogger.java,66,logger.info(String.format("%-25s%10s%10s",
src/java/org/apache/cassandra/utils/StatusLogger.java,67,poolName, threadPoolProxy.getActiveCount(), threadPoolProxy.getPendingTasks()));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,489,SSTable.delete(desc, components);
src/java/org/apache/cassandra/db/Memtable.java,161,writer.append(entry.getKey(), entry.getValue());
src/java/org/apache/cassandra/db/Memtable.java,163,SSTableReader ssTable = writer.closeAndOpenReader();
src/java/org/apache/cassandra/io/sstable/SSTable.java,24,import java.io.IOError;
src/java/org/apache/cassandra/io/sstable/SSTable.java,129,try
src/java/org/apache/cassandra/io/sstable/SSTable.java,133,FileUtils.deleteWithConfirm(desc.filenameFor(Component.DATA));
src/java/org/apache/cassandra/io/sstable/SSTable.java,137,continue;
src/java/org/apache/cassandra/io/sstable/SSTable.java,138,FileUtils.deleteWithConfirm(desc.filenameFor(component));
src/java/org/apache/cassandra/io/sstable/SSTable.java,141,FileUtils.delete(desc.filenameFor(Component.COMPACTED_MARKER));
src/java/org/apache/cassandra/io/sstable/SSTable.java,145,throw new IOError(e);
src/java/org/apache/cassandra/io/sstable/SSTableDeletingReference.java,96,SSTable.delete(desc, Sets.difference(components, Collections.singleton(Component.DATA)));
src/java/org/apache/cassandra/io/util/FileUtils.java,94,logger_.warn("Failed closing stream", e);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,67,private final Map<String, PendingFile> files = new LinkedHashMap<String, PendingFile>();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,72,private String currentFile;
src/java/org/apache/cassandra/streaming/StreamOut.java,152,session.addFilesToStream(pending);
src/java/org/apache/cassandra/streaming/StreamOut.java,153,session.begin();
src/java/org/apache/cassandra/streaming/StreamOut.java,155,else
src/java/org/apache/cassandra/streaming/StreamOut.java,157,session.close();
src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java,30,import org.apache.commons.collections.IteratorUtils;
src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java,31,import org.apache.commons.collections.iterators.ReverseListIterator;
src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java,83,subcolumns = new ReverseListIterator(columnsAsList);
src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java,97,subcolumns = IteratorUtils.chainedIterator(IteratorUtils.singletonIterator(column), subcolumns);
src/java/org/apache/cassandra/streaming/StreamInSession.java,46,private final List<PendingFile> files = new ArrayList<PendingFile>();
src/java/org/apache/cassandra/streaming/StreamInSession.java,50,private final List<Future<SSTableReader>> buildFutures = new ArrayList<Future<SSTableReader>>();
src/java/org/apache/cassandra/service/RowRepairResolver.java,25,import java.util.ArrayList;
src/java/org/apache/cassandra/service/RowRepairResolver.java,26,import java.util.List;
src/java/org/apache/cassandra/service/RowRepairResolver.java,27,import java.util.Map;
src/java/org/apache/cassandra/service/RowRepairResolver.java,126,resolved = cf.cloneMe();
src/java/org/apache/cassandra/service/RowRepairResolver.java,127,break;
src/java/org/apache/cassandra/service/RowRepairResolver.java,134,resolved.resolve(cf);
src/java/org/apache/cassandra/service/RowRepairResolver.java,136,return resolved;
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,123,public IWriteResponseHandler getWriteResponseHandler(Collection<InetAddress> writeEndpoints,
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,142,Multimap<InetAddress, InetAddress> map = HashMultimap.create(targets.size(), 1);
src/java/org/apache/cassandra/locator/TokenMetadata.java,563,return naturalEndpoints;
src/java/org/apache/cassandra/locator/TokenMetadata.java,571,endpoints.addAll(entry.getValue());
src/java/org/apache/cassandra/locator/TokenMetadata.java,575,return endpoints;
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,63,super(writeEndpoints, hintedEndpoints, consistencyLevel);
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,77,return new DatacenterSyncWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,56,super(writeEndpoints, hintedEndpoints, consistencyLevel, table);
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,62,return new DatacenterWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,69,return (strategy.getReplicationFactor(localdc) / 2) + 1;
src/java/org/apache/cassandra/service/WriteResponseHandler.java,47,super(writeEndpoints, hintedEndpoints, consistencyLevel);
src/java/org/apache/cassandra/service/WriteResponseHandler.java,61,return new WriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1851,final long truncatedAt = System.currentTimeMillis();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1852,snapshot(Table.getTimestampedSnapshotName("before-truncate"));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1856,public void runMayThrow() throws InterruptedException, IOException
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1862,List<SSTableReader> truncatedSSTables = new ArrayList<SSTableReader>();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1866,truncatedSSTables.add(sstable);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1868,cfs.markCompacted(truncatedSSTables);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1872,invalidateRowCache();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1876,return postFlushExecutor.submit(runnable);
src/java/org/apache/cassandra/db/Table.java,691,public void truncate(String cfname) throws InterruptedException, ExecutionException, IOException
src/java/org/apache/cassandra/db/Table.java,693,logger.debug("Truncating...");
src/java/org/apache/cassandra/db/Table.java,694,ColumnFamilyStore cfs = getColumnFamilyStore(cfname);
src/java/org/apache/cassandra/db/Table.java,696,cfs.truncate().get();
src/java/org/apache/cassandra/db/Table.java,697,logger.debug("Truncation done.");
src/java/org/apache/cassandra/db/TruncateVerbHandler.java,55,Table.open(t.keyspace).truncate(t.columnFamily);
src/java/org/apache/cassandra/dht/BootStrapper.java,218,BootstrapTokenCallback btc = new BootstrapTokenCallback();
src/java/org/apache/cassandra/dht/BootStrapper.java,219,MessagingService.instance().sendRR(message, maxEndpoint, btc);
src/java/org/apache/cassandra/dht/BootStrapper.java,220,return btc.getToken();
src/java/org/apache/cassandra/dht/BootStrapper.java,271,condition.await();
src/java/org/apache/cassandra/dht/BootStrapper.java,277,return token;
src/java/org/apache/cassandra/service/StorageService.java,315,throw new IllegalStateException("No configured RPC daemon");
src/java/org/apache/cassandra/db/CompactionManager.java,512,logger.info("Scrubbing " + sstable);
src/java/org/apache/cassandra/db/CompactionManager.java,515,String compactionFileLocation = cfs.table.getDataFileLocation(sstable.length());
src/java/org/apache/cassandra/db/CompactionManager.java,517,throw new IOException("disk full");
src/java/org/apache/cassandra/db/CompactionManager.java,518,int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(),
src/java/org/apache/cassandra/db/CompactionManager.java,519,(int)(SSTableReader.getApproximateKeyCount(Arrays.asList(sstable))));
src/java/org/apache/cassandra/db/CompactionManager.java,525,final BufferedRandomAccessFile dataFile = BufferedRandomAccessFile.getUncachingReader(sstable.getFilename());
src/java/org/apache/cassandra/db/CompactionManager.java,526,String indexFilename = sstable.descriptor.filenameFor(Component.PRIMARY_INDEX);
src/java/org/apache/cassandra/db/CompactionManager.java,527,BufferedRandomAccessFile indexFile = BufferedRandomAccessFile.getUncachingReader(indexFilename);
src/java/org/apache/cassandra/db/filter/QueryFilter.java,106,curCF.addColumn(current);
src/java/org/apache/cassandra/gms/FailureDetector.java,255,double mean = mean();
src/java/org/apache/cassandra/gms/FailureDetector.java,256,double exponent = (-1)*(t)/mean;
src/java/org/apache/cassandra/gms/FailureDetector.java,257,return Math.pow(Math.E, exponent);
src/java/org/apache/cassandra/gms/FailureDetector.java,263,double log = 0d;
src/java/org/apache/cassandra/gms/FailureDetector.java,266,double t = tnow - tLast_;
src/java/org/apache/cassandra/gms/FailureDetector.java,267,double probability = p(t);
src/java/org/apache/cassandra/gms/FailureDetector.java,268,log = (-1) * Math.log10( probability );
src/java/org/apache/cassandra/gms/FailureDetector.java,270,return log;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,277,private static final double SENTINEL_COMPARE = 0.0001; // arbitrary; as long as it is the same across hosts it doesn't matter
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,310,double mean = mean();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,311,double exponent = (-1) * (t) / mean;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,312,return 1 - Math.pow( Math.E, exponent);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,317,double log = 0d;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,320,double probability = p(SENTINEL_COMPARE);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,321,log = (-1) * Math.log10( probability );
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,323,return log;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,105,ColumnFamily resolved = RowRepairResolver.resolveSuperset(versions);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,132,DecoratedKey dkey = StorageService.getPartitioner().decorateKey(key);
src/java/org/apache/cassandra/db/marshal/IntegerType.java,125,return new java.math.BigInteger(TBaseHelper.byteBufferToByteArray(bytes)).toString(10);
src/java/org/apache/cassandra/io/util/BufferedRandomAccessFile.java,192,bufferOffset = current;
src/java/org/apache/cassandra/io/util/BufferedRandomAccessFile.java,195,validBufferBytes = 0;
src/java/org/apache/cassandra/locator/RackInferringSnitch.java,31,return Byte.toString(endpoint.getAddress()[2]);
src/java/org/apache/cassandra/locator/RackInferringSnitch.java,36,return Byte.toString(endpoint.getAddress()[1]);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,119,private static boolean sendMessage(InetAddress endpoint, String tableName, String cfName, ByteBuffer key) throws IOException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,137,QueryFilter filter = QueryFilter.getSliceFilter(dkey, new QueryPath(cfs.getColumnFamilyName()), startColumn, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, PAGE_SIZE);
src/java/org/apache/cassandra/cli/CliClient.java,54,BYTES       (BytesType.instance),
src/java/org/apache/cassandra/cli/CliClient.java,55,INTEGER     (IntegerType.instance),
src/java/org/apache/cassandra/cli/CliClient.java,56,LONG        (LongType.instance),
src/java/org/apache/cassandra/cli/CliClient.java,57,LEXICALUUID (LexicalUUIDType.instance),
src/java/org/apache/cassandra/cli/CliClient.java,58,TIMEUUID    (TimeUUIDType.instance),
src/java/org/apache/cassandra/cli/CliClient.java,59,UTF8        (UTF8Type.instance),
src/java/org/apache/cassandra/cli/CliClient.java,60,ASCII       (AsciiType.instance);
src/java/org/apache/cassandra/net/MessagingService.java,269,sendOneWay(message, nextId(), to);
src/java/org/apache/cassandra/service/AbstractRowResolver.java,66,logger.debug("Preprocessed {} response", result.isDigestQuery() ? "digest" : "data");
src/java/org/apache/cassandra/service/IResponseResolver.java,44,public void preprocess(Message message);
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,31,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,32,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,33,import org.apache.cassandra.db.RangeSliceReply;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,34,import org.apache.cassandra.db.Row;
src/java/org/apache/cassandra/service/ReadCallback.java,128,resolver.preprocess(message);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1556,clause.count);
src/java/org/apache/cassandra/gms/Gossiper.java,897,HeartBeatState hbState = new HeartBeatState(generationNbr);
src/java/org/apache/cassandra/gms/Gossiper.java,898,localState = new EndpointState(hbState);
src/java/org/apache/cassandra/gms/Gossiper.java,899,localState.isAlive(true);
src/java/org/apache/cassandra/gms/Gossiper.java,900,localState.isAGossiper(true);
src/java/org/apache/cassandra/gms/Gossiper.java,901,endpointStateMap_.put(localEndpoint_, localState);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,488,bloomFilterTracker.addTruePositive();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,453,Pair<Descriptor, DecoratedKey> unifiedKey = new Pair<Descriptor, DecoratedKey>(descriptor, decoratedKey);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,454,Long cachedPosition = getCachedPosition(unifiedKey);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,456,return cachedPosition;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,168,Set<Table> tablesRecovered = new HashSet<Table>();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,273,final Table table = Table.open(rm.getTable());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,274,tablesRecovered.add(table);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,275,final Collection<ColumnFamily> columnFamilies = new ArrayList<ColumnFamily>(rm.getColumnFamilies());
src/java/org/apache/cassandra/db/SystemTable.java,232,return name.endsWith(".db");
src/java/org/apache/cassandra/db/SystemTable.java,236,throw new ConfigurationException("Found system table files, but they couldn't be loaded. Did you change the partitioner?");
src/java/org/apache/cassandra/thrift/CassandraServer.java,407,private void doInsert(ConsistencyLevel consistency_level, List<RowMutation> mutations) throws UnavailableException, TimedOutException
src/java/org/apache/cassandra/db/BinaryMemtable.java,86,cfs.submitFlush(this, new CountDownLatch(1));
src/java/org/apache/cassandra/db/BinaryMemtable.java,125,private SSTableReader writeSortedContents(List<DecoratedKey> sortedKeys) throws IOException
src/java/org/apache/cassandra/db/BinaryMemtable.java,152,cfs.addSSTable(writeSortedContents(sortedKeys));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,48,import org.apache.cassandra.db.commitlog.CommitLogSegment;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,709,final CommitLogSegment.CommitLogContext ctx = writeCommitLog ? CommitLog.instance.getContext() : null;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,799,submitFlush(binaryMemtable.get(), new CountDownLatch(1));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1049,flushable.flushAndSignal(latch, flushSorter, flushWriter);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2191,public SSTableWriter createCompactionWriter(long estimatedRows, String location) throws IOException
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2193,return new SSTableWriter(getTempSSTablePath(location), estimatedRows, metadata, partitioner);
src/java/org/apache/cassandra/db/CompactionManager.java,448,writer = cfs.createCompactionWriter(expectedBloomFilterSize, compactionFileLocation);
src/java/org/apache/cassandra/db/CompactionManager.java,535,SSTableWriter writer = maybeCreateWriter(cfs, compactionFileLocation, expectedBloomFilterSize, null);
src/java/org/apache/cassandra/db/CompactionManager.java,789,writer = cfs.createCompactionWriter(expectedBloomFilterSize, compactionFileLocation);
src/java/org/apache/cassandra/db/IFlushable.java,29,public void flushAndSignal(CountDownLatch condition, ExecutorService sorter, ExecutorService writer);
src/java/org/apache/cassandra/db/Memtable.java,155,private SSTableReader writeSortedContents() throws IOException
src/java/org/apache/cassandra/db/Table.java,701,public String toString() {
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,39,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,40,import org.apache.cassandra.db.RowMutation;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,41,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,42,import org.apache.cassandra.db.UnserializableColumnFamilyException;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,135,public static void recover() throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,151,return;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,156,recover(files);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,159,FileUtils.delete(CommitLogHeader.getHeaderPathFromSegmentPath(f.getAbsolutePath())); // may not actually exist
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,163,logger.info("Log replay complete");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,166,public static void recover(File[] clogs) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,180,CommitLogHeader clHeader = null;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,181,int replayPosition = 0;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,182,String headerPath = CommitLogHeader.getHeaderPathFromSegmentPath(file.getAbsolutePath());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,183,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,185,clHeader = CommitLogHeader.readCommitLogHeader(headerPath);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,186,replayPosition = clHeader.getReplayPosition();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,190,logger.info(headerPath + " incomplete, missing or corrupt.  Everything is ok, don't panic.  CommitLog will be replayed from the beginning");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,191,logger.debug("exception was", ioe);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,277,final CommitLogHeader finalHeader = clHeader;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,341,public CommitLogSegment.CommitLogContext call() throws Exception
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,377,public void discardCompletedSegments(final Integer cfId, final CommitLogSegment.CommitLogContext context) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,408,private void discardCompletedSegmentsInternal(CommitLogSegment.CommitLogContext context, Integer id) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,423,CommitLogHeader header = segment.getHeader();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,431,logger.debug("Marking replay position " + context.position + " on commit log " + segment);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,432,header.turnOn(id, context.position);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,433,segment.writeHeader();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,437,header.turnOff(id);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,442,DeletionService.executeDelete(segment.getHeaderPath());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,451,logger.debug("Not safe to delete commit log " + segment + "; dirty is " + header.dirtyString());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,452,segment.writeHeader();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,19,package org.apache.cassandra.db.commitlog;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,21,import java.io.*;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,22,import java.util.Collections;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,23,import java.util.HashMap;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,24,import java.util.Map;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,25,import java.util.zip.CRC32;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,26,import java.util.zip.Checksum;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,28,import org.apache.cassandra.io.ICompactSerializer2;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,29,import org.apache.cassandra.io.util.FileUtils;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,31,public class CommitLogHeader
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,35,return getHeaderPathFromSegmentPath(segment.getPath());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,40,return segmentPath + ".header";
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,43,public static CommitLogHeaderSerializer serializer = new CommitLogHeaderSerializer();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,45,private Map<Integer, Integer> cfDirtiedAt; // position at which each CF was last flushed
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,49,this(new HashMap<Integer, Integer>());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,59,this.cfDirtiedAt = cfDirtiedAt;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,64,return cfDirtiedAt.containsKey(cfId);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,69,Integer x = cfDirtiedAt.get(cfId);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,70,return x == null ? 0 : x;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,75,assert position >= 0 && position <= Integer.MAX_VALUE;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,76,cfDirtiedAt.put(cfId, (int)position);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,81,cfDirtiedAt.remove(cfId);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,84,boolean isSafeToDelete() throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,86,return cfDirtiedAt.isEmpty();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,92,StringBuilder sb = new StringBuilder("");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,93,sb.append("CLH(dirty+flushed={");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,96,sb.append(entry.getKey()).append(": ").append(entry.getValue()).append(", ");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,98,sb.append("})");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,99,return sb.toString();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,104,StringBuilder sb = new StringBuilder();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,106,sb.append(entry.getKey()).append(", ");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,107,return sb.toString();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,110,static void writeCommitLogHeader(CommitLogHeader header, String headerFile) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,112,DataOutputStream out = null;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,113,try
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,120,out = new DataOutputStream(new FileOutputStream(headerFile));
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,121,serializer.serialize(header, out);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,123,finally
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,126,out.close();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,130,static CommitLogHeader readCommitLogHeader(String headerFile) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,132,DataInputStream reader = null;
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,133,try
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,135,reader = new DataInputStream(new BufferedInputStream(new FileInputStream(headerFile)));
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,136,return serializer.deserialize(reader);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,138,finally
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,140,FileUtils.closeQuietly(reader);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,146,return cfDirtiedAt.isEmpty() ? -1 : Collections.min(cfDirtiedAt.values());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,149,static class CommitLogHeaderSerializer implements ICompactSerializer2<CommitLogHeader>
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,151,public void serialize(CommitLogHeader clHeader, DataOutput dos) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,153,Checksum checksum = new CRC32();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,156,dos.writeInt(clHeader.cfDirtiedAt.size()); // 4
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,157,checksum.update(clHeader.cfDirtiedAt.size());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,158,dos.writeLong(checksum.getValue());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,163,dos.writeInt(entry.getKey()); // 4
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,164,checksum.update(entry.getKey());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,165,dos.writeInt(entry.getValue()); // 4
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,166,checksum.update(entry.getValue());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,168,dos.writeLong(checksum.getValue());
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,171,public CommitLogHeader deserialize(DataInput dis) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,173,Checksum checksum = new CRC32();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,175,int lastFlushedAtSize = dis.readInt();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,176,checksum.update(lastFlushedAtSize);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,179,throw new IOException("Invalid or corrupt commitlog header");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,181,Map<Integer, Integer> lastFlushedAt = new HashMap<Integer, Integer>();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,184,int key = dis.readInt();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,185,checksum.update(key);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,186,int value = dis.readInt();
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,187,checksum.update(value);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,188,lastFlushedAt.put(key, value);
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,192,throw new IOException("Invalid or corrupt commitlog header");
src/java/org/apache/cassandra/db/commitlog/CommitLogHeader.java,195,return new CommitLogHeader(lastFlushedAt);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,32,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,44,private final CommitLogHeader header;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,48,this.header = new CommitLogHeader();
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,49,String logFile = DatabaseDescriptor.getCommitLogLocation() + File.separator + "CommitLog-" + System.currentTimeMillis() + ".log";
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,56,writeHeader();
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,66,return filename.matches("CommitLog-\\d+.log");
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,69,public void writeHeader() throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,71,CommitLogHeader.writeCommitLogHeader(header, getHeaderPath());
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,85,CommitLogSegment.CommitLogContext cLogCtx = new CommitLogSegment.CommitLogContext(currentPosition);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,93,CFMetaData cfm = DatabaseDescriptor.getCFMetaData(columnFamily.id());
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,96,logger.error("Attempted to write commit log entry for unrecognized column family: " + columnFamily.id());
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,98,else
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,100,Integer id = cfm.cfId;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,103,header.turnOn(id, logWriter.getFilePointer());
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,104,writeHeader();
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,146,return new CommitLogContext(logWriter.getFilePointer());
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,151,return header;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,161,return CommitLogHeader.getHeaderPathFromSegment(this);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,191,return "CommitLogSegment(" + logWriter.getPath() + ')';
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,194,public class CommitLogContext
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,196,public final long position;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,200,assert position >= 0;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,201,this.position = position;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,206,return CommitLogSegment.this;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,212,return "CommitLogContext(" +
src/java/org/apache/cassandra/io/sstable/Descriptor.java,41,public static final String CURRENT_VERSION = "f";
src/java/org/apache/cassandra/io/sstable/SSTable.java,75,this(descriptor, new HashSet<Component>(), metadata, partitioner);
src/java/org/apache/cassandra/io/sstable/SSTable.java,80,this(descriptor, components, metadata, partitioner, defaultRowHistogram(), defaultColumnHistogram());
src/java/org/apache/cassandra/io/sstable/SSTable.java,85,return new EstimatedHistogram(114);
src/java/org/apache/cassandra/io/sstable/SSTable.java,90,return new EstimatedHistogram(150);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,164,logger.debug("Load statistics for {}", descriptor);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,181,SSTableReader sstable = new SSTableReader(descriptor, components, metadata, partitioner, null, null, null, null, System.currentTimeMillis(), rowSizes, columnCounts);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,206,static SSTableReader internalOpen(Descriptor desc, Set<Component> components, CFMetaData metadata, IPartitioner partitioner, SegmentedFile ifile, SegmentedFile dfile, IndexSummary isummary, Filter bf, long maxDataAge, EstimatedHistogram rowsize,
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,210,return new SSTableReader(desc, components, metadata, partitioner, ifile, dfile, isummary, bf, maxDataAge, rowsize, columncount);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,226,super(desc, components, metadata, partitioner, rowSizes, columnCounts);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,65,this(filename, keyCount, DatabaseDescriptor.getCFMetaData(Descriptor.fromFilename(filename)), StorageService.getPartitioner());
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,68,public SSTableWriter(String filename, long keyCount, CFMetaData metadata, IPartitioner partitioner) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,185,writeStatistics(descriptor, estimatedRowSize, estimatedColumnCount);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,193,SSTableReader sstable = SSTableReader.internalOpen(newdesc, components, metadata, partitioner, ifile, dfile, iwriter.summary, iwriter.bf, maxDataAge, estimatedRowSize, estimatedColumnCount);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,199,private static void writeStatistics(Descriptor desc, EstimatedHistogram rowSizes, EstimatedHistogram columnnCounts) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,203,EstimatedHistogram.serializer.serialize(columnnCounts, out);
src/java/org/apache/cassandra/config/CFMetaData.java,162,private final Map<ByteBuffer, ColumnDefinition> column_metadata;
src/java/org/apache/cassandra/config/CFMetaData.java,669,Set<ByteBuffer> newIndexNames = new HashSet<ByteBuffer>();
src/java/org/apache/cassandra/config/CFMetaData.java,673,newIndexNames.add(def.name);
src/java/org/apache/cassandra/config/CFMetaData.java,679,toRemove.add(indexName);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,288,latencies.remove();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1549,logger.debug(String.format("Scanning index row %s:%s starting with %s",
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1550,indexCFS.columnFamily, indexKey, indexCFS.getComparator().getString(startKey)));
src/java/org/apache/cassandra/db/Table.java,435,ColumnFamily cf2 = cf.cloneMe();
src/java/org/apache/cassandra/db/Table.java,438,cf2.addColumn(oldColumn);
src/java/org/apache/cassandra/db/Table.java,440,ColumnFamily resolved = ColumnFamilyStore.removeDeleted(cf2, Integer.MAX_VALUE);
src/java/org/apache/cassandra/db/Table.java,444,IColumn resolvedColumn = resolved == null ? null : resolved.getColumn(oldColumn.name());
src/java/org/apache/cassandra/db/Table.java,448,logger.debug("ignoring obsolete mutation of " + cf.getComparator().getString(oldColumn.name()));
src/java/org/apache/cassandra/db/Table.java,449,cf.remove(oldColumn.name());
src/java/org/apache/cassandra/db/Table.java,450,mutatedIndexedColumns.remove(oldColumn.name());
src/java/org/apache/cassandra/db/Table.java,451,oldIndexedColumns.remove(oldColumn.name());
src/java/org/apache/cassandra/db/CompactionManager.java,393,table.snapshot("compact-" + cfs.columnFamily);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1685,try
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1688,File dataDirectory = ssTable.descriptor.directory.getParentFile();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1689,String snapshotDirectoryPath = Table.getSnapshotPath(dataDirectory.getAbsolutePath(), table.name, snapshotName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1690,FileUtils.createDirectory(snapshotDirectoryPath);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1693,ssTable.createLinks(snapshotDirectoryPath);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1695,logger.debug("Snapshot for " + table + " keyspace data file " + ssTable.getFilename() +
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1700,throw new IOError(e);
src/java/org/apache/cassandra/utils/MerkleTree.java,384,Token midpoint = partitioner.midpoint(pleft, pright);
src/java/org/apache/cassandra/streaming/PendingFile.java,30,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/streaming/PendingFile.java,98,return getFilename() + "/" + StringUtils.join(sections, ",") + "\n\t progress=" + progress + "/" + size + " - " + progress*100/size + "%";
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,43,List<ByteBuffer> values = super.generateValues();
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java,42,List<ByteBuffer> values = generateValues();
src/java/org/apache/cassandra/db/CompactionManager.java,385,int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int gcBefore) throws IOException
src/java/org/apache/cassandra/db/CompactionManager.java,400,String compactionFileLocation = table.getDataFileLocation(cfs.getExpectedCompactedFileSize(sstables));
src/java/org/apache/cassandra/db/CompactionManager.java,403,List<SSTableReader> smallerSSTables = new ArrayList<SSTableReader>(sstables);
src/java/org/apache/cassandra/db/CompactionManager.java,406,logger.warn("insufficient space to compact all requested files " + StringUtils.join(smallerSSTables, ", "));
src/java/org/apache/cassandra/db/CompactionManager.java,407,smallerSSTables.remove(cfs.getMaxSizeFile(smallerSSTables));
src/java/org/apache/cassandra/db/CompactionManager.java,408,compactionFileLocation = table.getDataFileLocation(cfs.getExpectedCompactedFileSize(smallerSSTables));
src/java/org/apache/cassandra/db/CompactionManager.java,412,logger.error("insufficient space to compact even the two smallest files, aborting");
src/java/org/apache/cassandra/db/CompactionManager.java,413,return 0;
src/java/org/apache/cassandra/db/CompactionManager.java,415,sstables = smallerSSTables;
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,56,resolver.preprocess(message);
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,64,condition.signal();
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,71,((RowDigestResolver) resolver).injectPreProcessed(result);
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,76,condition.signal();
src/java/org/apache/cassandra/service/AbstractRowResolver.java,89,return replies.size();
src/java/org/apache/cassandra/service/AsyncRepairCallback.java,35,private final int count;
src/java/org/apache/cassandra/service/AsyncRepairCallback.java,40,this.count = count;
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,26,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,45,private AtomicInteger localResponses;
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,50,localResponses = new AtomicInteger(blockfor);
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,60,: localResponses.get();
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,73,int n = localResponses.decrementAndGet();
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,79,maybeResolveForRepair();
src/java/org/apache/cassandra/service/IResponseResolver.java,48,public int getMessageCount();
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,155,return responses.size();
src/java/org/apache/cassandra/service/ReadCallback.java,120,throw new TimeoutException("Operation timed out - received only " + resolver.getMessageCount() + " responses from " + sb.toString() + " .");
src/java/org/apache/cassandra/service/ReadCallback.java,129,assert resolver.getMessageCount() <= endpoints.size() : "Got " + resolver.getMessageCount() + " replies but requests were only sent to " + endpoints.size() + " endpoints";
src/java/org/apache/cassandra/service/ReadCallback.java,131,return;
src/java/org/apache/cassandra/service/ReadCallback.java,142,assert resolver.getMessageCount() <= endpoints.size();
src/java/org/apache/cassandra/service/ReadCallback.java,144,return;
src/java/org/apache/cassandra/service/RepairCallback.java,69,return resolver.getMessageCount() > 1 ? resolver.resolve() : null;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,571,saveRowCacheTask = StorageService.scheduledTasks.scheduleWithFixedDelay(runnable,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,572,rowCacheSavePeriodInSeconds,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,573,rowCacheSavePeriodInSeconds,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,574,TimeUnit.SECONDS);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,591,saveKeyCacheTask = StorageService.scheduledTasks.scheduleWithFixedDelay(runnable,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,592,keyCacheSavePeriodInSeconds,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,593,keyCacheSavePeriodInSeconds,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,594,TimeUnit.SECONDS);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,221,StorageService.scheduledTasks.execute(runnable);
src/java/org/apache/cassandra/db/Table.java,267,flushTask = StorageService.scheduledTasks.scheduleWithFixedDelay(runnable, 10, 10, TimeUnit.SECONDS);
src/java/org/apache/cassandra/gms/Gossiper.java,907,scheduledGossipTask = StorageService.scheduledTasks.scheduleWithFixedDelay(new GossipTask(),
src/java/org/apache/cassandra/gms/Gossiper.java,908,Gossiper.intervalInMillis_,
src/java/org/apache/cassandra/gms/Gossiper.java,909,Gossiper.intervalInMillis_,
src/java/org/apache/cassandra/gms/Gossiper.java,910,TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/service/StorageProxy.java,400,logger.debug("Digest mismatch:", ex);
src/java/org/apache/cassandra/thrift/CassandraServer.java,109,logger.debug("... timed out");
src/java/org/apache/cassandra/thrift/CassandraServer.java,419,logger.debug("... timed out");
src/java/org/apache/cassandra/thrift/CassandraServer.java,486,logger.debug("... timed out");
src/java/org/apache/cassandra/thrift/CassandraServer.java,531,logger.debug("... timed out");
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,174,CompactionManager.instance.checkAllColumnFamilies();
src/java/org/apache/cassandra/db/ColumnFamily.java,66,assert cfm != null;
src/java/org/apache/cassandra/db/ColumnFamily.java,67,return new ColumnFamily(cfm.cfType, cfm.comparator, cfm.subcolumnComparator, cfm.cfId);
src/java/org/apache/cassandra/db/ColumnFamily.java,70,private final Integer cfid;
src/java/org/apache/cassandra/db/ColumnFamily.java,71,private final ColumnFamilyType type;
src/java/org/apache/cassandra/db/ColumnFamily.java,80,this.type = type;
src/java/org/apache/cassandra/db/ColumnFamily.java,81,columnSerializer = type == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(subcolumnComparator);
src/java/org/apache/cassandra/db/ColumnFamily.java,82,columns = new ConcurrentSkipListMap<ByteBuffer, IColumn>(comparator);
src/java/org/apache/cassandra/db/ColumnFamily.java,83,this.cfid = cfid;
src/java/org/apache/cassandra/db/ColumnFamily.java,88,ColumnFamily cf = new ColumnFamily(type, getComparator(), getSubComparator(), cfid);
src/java/org/apache/cassandra/db/ColumnFamily.java,101,return type;
src/java/org/apache/cassandra/db/ColumnFamily.java,113,return cfid;
src/java/org/apache/cassandra/db/ColumnFamily.java,121,return DatabaseDescriptor.getCFMetaData(cfid);
src/java/org/apache/cassandra/db/ColumnFamily.java,150,return type == ColumnFamilyType.Super;
src/java/org/apache/cassandra/db/ColumnFamily.java,290,ColumnFamily cfDiff = new ColumnFamily(cfComposite.type, getComparator(), getSubComparator(), cfComposite.id());
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,127,return WriteResponseHandler.create(writeEndpoints, hintedEndpoints, consistencyLevel, table);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,159,return DatacenterWriteResponseHandler.create(writeEndpoints, hintedEndpoints, consistency_level, table);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,163,return DatacenterSyncWriteResponseHandler.create(writeEndpoints, hintedEndpoints, consistency_level, table);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,165,return super.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
src/java/org/apache/cassandra/config/CFMetaData.java,585,validator = columnDefinition.validator;
src/java/org/apache/cassandra/config/CFMetaData.java,689,column_metadata.get(def.name).setIndexType(def.index_type == null ? null : org.apache.cassandra.thrift.IndexType.valueOf(def.index_type.name()));
src/java/org/apache/cassandra/config/CFMetaData.java,690,column_metadata.get(def.name).setIndexName(def.index_name == null ? null : def.index_name.toString());
src/java/org/apache/cassandra/config/CFMetaData.java,735,tcd.setValidation_class(cd.validator.getClass().getName());
src/java/org/apache/cassandra/config/CFMetaData.java,776,tcd.validation_class = cd.validator.getClass().getName();
src/java/org/apache/cassandra/config/ColumnDefinition.java,39,public final AbstractType validator;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,324,new LocalPartitioner(metadata.getColumn_metadata().get(info.name).validator),
src/java/org/apache/cassandra/service/StorageService.java,32,import com.google.common.base.Charsets;
src/java/org/apache/cassandra/service/StorageService.java,34,import com.google.common.collect.Iterables;
src/java/org/apache/cassandra/service/StorageService.java,2082,rcd.validator_class = cd.validator.getClass().getName();
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,105,assert writeEndpoints.contains(destination);
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,107,String destinationDC = snitch.getDatacenter(destination);
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,108,dcEndpoints.get(destinationDC).incrementAndGet();
src/java/org/apache/cassandra/cli/CliClient.java,462,AbstractType valueValidator = getFormatTypeForColumn(typeName);
src/java/org/apache/cassandra/cli/CliClient.java,1312,AbstractType columnNameValidator = getFormatTypeForColumn(isSuper ? cf_def.subcomparator_type
src/java/org/apache/cassandra/cli/CliClient.java,1313,: cf_def.comparator_type);
src/java/org/apache/cassandra/cli/CliClient.java,1636,return getBytesAccordingToType(column, getFormatTypeForColumn(comparatorClass));
src/java/org/apache/cassandra/cli/CliClient.java,1689,return getBytesAccordingToType(superColumn, getFormatTypeForColumn(comparatorClass));
src/java/org/apache/cassandra/cli/CliClient.java,1734,return getBytesAccordingToType(columnValue, getFormatTypeForColumn(validationClass));
src/java/org/apache/cassandra/cli/CliClient.java,1763,return getFormatTypeForColumn(columnDefinition.getValidation_class());
src/java/org/apache/cassandra/cli/CliClient.java,1769,return getFormatTypeForColumn(defaultValidator);
src/java/org/apache/cassandra/cli/CliClient.java,1963,AbstractType keyComparator = this.cfKeysComparators.get(columnFamilyName);
src/java/org/apache/cassandra/cli/CliClient.java,2050,AbstractType keyComparator = this.cfKeysComparators.get(columnFamily);
src/java/org/apache/cassandra/cli/CliClient.java,2051,return getBytesAccordingToType(key, keyComparator);
src/java/org/apache/cassandra/db/Memtable.java,132,currentOperations.addAndGet(cf.getColumnCount());
src/java/org/apache/cassandra/db/RowMutation.java,225,RowMutation rm = new RowMutation(keyspace, key);
src/java/org/apache/cassandra/db/RowMutation.java,228,String cfName = entry.getKey();
src/java/org/apache/cassandra/db/RowMutation.java,237,addColumnOrSuperColumnToRowMutation(rm, cfName, mutation.column_or_supercolumn);
src/java/org/apache/cassandra/db/RowMutation.java,241,return rm;
src/java/org/apache/cassandra/db/RowMutation.java,309,rm.add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, column.timestamp, column.ttl);
src/java/org/apache/cassandra/db/RowMutation.java,314,rm.add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, cosc.column.timestamp, cosc.column.ttl);
src/java/org/apache/cassandra/service/StorageProxy.java,94,public static void mutate(List<RowMutation> mutations, ConsistencyLevel consistency_level) throws UnavailableException, TimeoutException
src/java/org/apache/cassandra/service/StorageProxy.java,109,AbstractReplicationStrategy rs = Table.open(table).getReplicationStrategy();
src/java/org/apache/cassandra/service/StorageProxy.java,113,Multimap<InetAddress, InetAddress> hintedEndpoints = rs.getHintedEndpoints(writeEndpoints);
src/java/org/apache/cassandra/service/StorageProxy.java,115,final IWriteResponseHandler responseHandler = rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
src/java/org/apache/cassandra/service/StorageProxy.java,118,responseHandler.assureSufficientLiveNodes();
src/java/org/apache/cassandra/service/StorageProxy.java,120,responseHandlers.add(responseHandler);
src/java/org/apache/cassandra/thrift/CassandraServer.java,404,doInsert(consistency_level, Arrays.asList(rm));
src/java/org/apache/cassandra/db/marshal/IntegerType.java,141,return ByteBuffer.wrap(integerType.toByteArray());
src/java/org/apache/cassandra/db/marshal/LongType.java,81,return ByteBufferUtil.bytes(longType);
src/java/org/apache/cassandra/cli/CliUtils.java,41,int j = 1;
src/java/org/apache/cassandra/cli/CliUtils.java,42,final char start = b.charAt(0);
src/java/org/apache/cassandra/cli/CliUtils.java,43,final char end = b.charAt(b.length() - 1);
src/java/org/apache/cassandra/cli/CliUtils.java,47,j = 0;
src/java/org/apache/cassandra/cli/CliUtils.java,50,StringBuilder sb = new StringBuilder(b.length());
src/java/org/apache/cassandra/cli/CliUtils.java,56,char n = b.charAt(i + 1);
src/java/org/apache/cassandra/cli/CliUtils.java,59,case '0':
src/java/org/apache/cassandra/cli/CliUtils.java,60,sb.append("\0");
src/java/org/apache/cassandra/cli/CliUtils.java,61,break;
src/java/org/apache/cassandra/cli/CliUtils.java,62,case '\'':
src/java/org/apache/cassandra/cli/CliUtils.java,63,sb.append("'");
src/java/org/apache/cassandra/cli/CliUtils.java,64,break;
src/java/org/apache/cassandra/cli/CliUtils.java,65,case '"':
src/java/org/apache/cassandra/cli/CliUtils.java,66,sb.append("\"");
src/java/org/apache/cassandra/cli/CliUtils.java,67,break;
src/java/org/apache/cassandra/cli/CliUtils.java,68,case 'b':
src/java/org/apache/cassandra/cli/CliUtils.java,69,sb.append("\b");
src/java/org/apache/cassandra/cli/CliUtils.java,70,break;
src/java/org/apache/cassandra/cli/CliUtils.java,71,case 'n':
src/java/org/apache/cassandra/cli/CliUtils.java,72,sb.append("\n");
src/java/org/apache/cassandra/cli/CliUtils.java,73,break;
src/java/org/apache/cassandra/cli/CliUtils.java,74,case 'r':
src/java/org/apache/cassandra/cli/CliUtils.java,75,sb.append("\r");
src/java/org/apache/cassandra/cli/CliUtils.java,76,break;
src/java/org/apache/cassandra/cli/CliUtils.java,77,case 't':
src/java/org/apache/cassandra/cli/CliUtils.java,78,sb.append("\t");
src/java/org/apache/cassandra/cli/CliUtils.java,79,break;
src/java/org/apache/cassandra/cli/CliUtils.java,80,case 'Z':
src/java/org/apache/cassandra/cli/CliUtils.java,81,sb.append("\u001A");
src/java/org/apache/cassandra/cli/CliUtils.java,82,break;
src/java/org/apache/cassandra/cli/CliUtils.java,83,case '\\':
src/java/org/apache/cassandra/cli/CliUtils.java,84,sb.append("\\");
src/java/org/apache/cassandra/cli/CliUtils.java,85,break;
src/java/org/apache/cassandra/cli/CliUtils.java,86,case '%':
src/java/org/apache/cassandra/cli/CliUtils.java,87,sb.append("%");
src/java/org/apache/cassandra/cli/CliUtils.java,88,break;
src/java/org/apache/cassandra/cli/CliUtils.java,89,case '_':
src/java/org/apache/cassandra/cli/CliUtils.java,90,sb.append("_");
src/java/org/apache/cassandra/cli/CliUtils.java,91,break;
src/java/org/apache/cassandra/cli/CliUtils.java,92,default:
src/java/org/apache/cassandra/cli/CliUtils.java,93,sb.append(n);
src/java/org/apache/cassandra/cli/CliUtils.java,96,else
src/java/org/apache/cassandra/cli/CliUtils.java,98,sb.append(b.charAt(i));
src/java/org/apache/cassandra/cli/CliUtils.java,102,return sb.toString();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,663,return getTempSSTablePath(location);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,668,Descriptor desc = new Descriptor(new File(directory),
src/java/org/apache/cassandra/streaming/StreamIn.java,54,requestRanges(source, tableName, ranges, null);
src/java/org/apache/cassandra/streaming/StreamIn.java,77,Descriptor localdesc = Descriptor.fromFilename(cfStore.getFlushPath());
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,421,DecoratedKey copiedKey = new DecoratedKey(key.token, key.key == null ? null : ByteBufferUtil.clone(key.key));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,490,cacheKey(decoratedKey, dataPosition);
src/java/org/apache/cassandra/thrift/CassandraServer.java,744,ks_def.strategy_options,
src/java/org/apache/cassandra/thrift/ThriftValidation.java,31,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,32,import org.apache.cassandra.config.DatabaseDescriptor;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,52,public class CassandraStorage extends LoadFunc implements StoreFuncInterface, LoadPushDown
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,326,public List<OperatorSet> getFeatures() {
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,327,return Arrays.asList(LoadPushDown.OperatorSet.PROJECTION);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,330,public RequiredFieldResponse pushProjection(RequiredFieldList requiredFieldList) throws FrontendException
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,332,return new RequiredFieldResponse(true);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,162,ByteBuffer name,
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,163,ByteBuffer value,
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,168,this.value = value;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,169,this.timestamp = timestamp;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,170,setTimestampIsSet(true);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,424,boolean this_present_timestamp = true;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,425,boolean that_present_timestamp = true;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,459,boolean present_timestamp = true;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,575,if (!isSetTimestamp()) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,591,oprot.writeFieldBegin(VALUE_FIELD_DESC);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,592,oprot.writeBinary(this.value);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,595,oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,596,oprot.writeI64(this.timestamp);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,597,oprot.writeFieldEnd();
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,619,if (!first) sb.append(", ");
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,620,sb.append("value:");
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,621,if (this.value == null) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,622,sb.append("null");
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,626,first = false;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,627,if (!first) sb.append(", ");
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,628,sb.append("timestamp:");
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,629,sb.append(this.timestamp);
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,630,first = false;
interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java,646,if (value == null) {
src/java/org/apache/cassandra/cli/CliClient.java,641,Column columnToInsert = new Column(columnName, columnValueInBytes, FBUtilities.timestampMicros());
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,205,return new Column(acol.name, acol.value, acol.timestamp);
src/java/org/apache/cassandra/thrift/CassandraServer.java,138,Column thrift_column = new Column(column.name(), column.value(), column.timestamp());
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,87,private static UUID defsVersion = INITIAL_VERSION;
src/java/org/apache/cassandra/config/KSMetaData.java,124,Map<String, String> strategyOptions = null;
src/java/org/apache/cassandra/config/KSMetaData.java,127,strategyOptions = new HashMap<String, String>();
src/java/org/apache/cassandra/config/KSMetaData.java,133,int cfsz = (int)ks.cf_defs.size();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1614,startKey = dataKey;
src/java/org/apache/cassandra/service/StorageProxy.java,277,StageManager.getStage(Stage.MUTATION).execute(runnable);
src/java/org/apache/cassandra/io/CompactionIterator.java,35,import org.apache.cassandra.db.ColumnFamilyStore;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,42,import org.apache.cassandra.io.AbstractCompactedRow;
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,51,String startOffset = "0";
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,52,ByteBuffer value = values.get(index % values.size());
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,78,dataFile = new BufferedRandomAccessFile(new File(getFilename()), "rw", DatabaseDescriptor.getInMemoryCompactionLimit(), true);
src/java/org/apache/cassandra/tools/NodeCmd.java,76,DECOMMISSION, MOVE, LOADBALANCE, REMOVETOKEN, REPAIR, CLEANUP, COMPACT, SCRUB,
src/java/org/apache/cassandra/tools/NodeCmd.java,101,addCmdHelp(header, "loadbalance", "Loadbalance the node");
src/java/org/apache/cassandra/tools/NodeProbe.java,352,ssProxy.loadBalance();
src/java/org/apache/cassandra/service/StorageService.java,482,SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
src/java/org/apache/cassandra/service/StorageService.java,483,setToken(token);
src/java/org/apache/cassandra/io/CompactionIterator.java,114,else
src/java/org/apache/cassandra/io/CompactionIterator.java,116,return compactedRow;
src/java/org/apache/cassandra/db/CompactionManager.java,814,CompactionIterator ci = new ValidationCompactionIterator(cfs);
src/java/org/apache/cassandra/db/CompactionManager.java,973,public ValidationCompactionIterator(ColumnFamilyStore cfs) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,43,private final BufferedRandomAccessFile file;
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,46,private boolean exhausted = false;
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,47,private Iterator<IColumnIterator> iterator;
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,144,private class KeyScanningIterator implements Iterator<IColumnIterator>
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,146,private long finishedAt;
src/java/org/apache/cassandra/service/AntiEntropyService.java,124,return new RepairSession(tablename, cfnames);
src/java/org/apache/cassandra/service/AntiEntropyService.java,157,Set<InetAddress> neighbors = new HashSet<InetAddress>();
src/java/org/apache/cassandra/service/AntiEntropyService.java,162,neighbors.addAll(replicaSets.get(range));
src/java/org/apache/cassandra/service/AntiEntropyService.java,164,neighbors.remove(FBUtilities.getLocalAddress());
src/java/org/apache/cassandra/service/AntiEntropyService.java,184,TreeRequest remotereq = new TreeRequest(request.sessionid, neighbor, request.cf);
src/java/org/apache/cassandra/service/AntiEntropyService.java,228,TreeRequest request = new TreeRequest(sessionid, remote, new CFPair(ksname, cfname));
src/java/org/apache/cassandra/service/AntiEntropyService.java,270,private transient Token mintoken;
src/java/org/apache/cassandra/service/AntiEntropyService.java,282,new MerkleTree(DatabaseDescriptor.getPartitioner(), MerkleTree.RECOMMENDED_DEPTH, (int)Math.pow(2, 15)));
src/java/org/apache/cassandra/service/AntiEntropyService.java,290,mintoken = null;
src/java/org/apache/cassandra/service/AntiEntropyService.java,320,mintoken = tree.partitioner().getMinimumToken();
src/java/org/apache/cassandra/service/AntiEntropyService.java,321,ranges = tree.invalids(new Range(mintoken, mintoken));
src/java/org/apache/cassandra/service/AntiEntropyService.java,346,assert ranges != null : "Validator was not prepared()";
src/java/org/apache/cassandra/service/AntiEntropyService.java,352,minrows.add(rowHash(row));
src/java/org/apache/cassandra/service/AntiEntropyService.java,353,return;
src/java/org/apache/cassandra/service/AntiEntropyService.java,355,mintoken = null;
src/java/org/apache/cassandra/service/AntiEntropyService.java,399,range.addHash(minrow);
src/java/org/apache/cassandra/service/AntiEntropyService.java,425,public final List<Range> differences;
src/java/org/apache/cassandra/service/AntiEntropyService.java,432,differences = new ArrayList<Range>();
src/java/org/apache/cassandra/service/AntiEntropyService.java,441,StorageService ss = StorageService.instance;
src/java/org/apache/cassandra/service/AntiEntropyService.java,450,Set<Range> interesting = new HashSet(ss.getRangesForEndpoint(request.cf.left, local));
src/java/org/apache/cassandra/service/AntiEntropyService.java,451,interesting.retainAll(ss.getRangesForEndpoint(request.cf.left, request.endpoint));
src/java/org/apache/cassandra/service/AntiEntropyService.java,456,differences.addAll(diff.intersectionWith(localrange));
src/java/org/apache/cassandra/service/AntiEntropyService.java,459,String format = "Endpoints " + local + " and " + request.endpoint + " %s for " + request.cf;
src/java/org/apache/cassandra/service/AntiEntropyService.java,489,List<Range> ranges = new ArrayList<Range>(differences);
src/java/org/apache/cassandra/service/AntiEntropyService.java,563,return new TreeRequest(dis.readUTF(),
src/java/org/apache/cassandra/service/AntiEntropyService.java,564,CompactEndpointSerializationHelper.deserialize(dis),
src/java/org/apache/cassandra/service/AntiEntropyService.java,565,new CFPair(dis.readUTF(), dis.readUTF()));
src/java/org/apache/cassandra/service/AntiEntropyService.java,579,TreeRequest request = new TreeRequest(remotereq.sessionid, message.getFrom(), remotereq.cf);
src/java/org/apache/cassandra/service/AntiEntropyService.java,647,TreeRequest request = new TreeRequest(response.request.sessionid, message.getFrom(), response.request.cf);
src/java/org/apache/cassandra/service/AntiEntropyService.java,699,return Objects.hashCode(sessionid, endpoint, cf);
src/java/org/apache/cassandra/service/AntiEntropyService.java,709,return Objects.equal(sessionid, that.sessionid) && Objects.equal(endpoint, that.endpoint) && Objects.equal(cf, that.cf);
src/java/org/apache/cassandra/service/AntiEntropyService.java,715,return "#<TreeRequest " + sessionid + ", " + endpoint + ", " + cf + ">";
src/java/org/apache/cassandra/service/AntiEntropyService.java,749,Set<InetAddress> endpoints = AntiEntropyService.getNeighbors(tablename);
src/java/org/apache/cassandra/service/AntiEntropyService.java,752,logger.info("No neighbors to repair with: " + getName() + " completed.");
src/java/org/apache/cassandra/service/StorageService.java,1391,AntiEntropyService.RepairSession sess = AntiEntropyService.instance.getRepairSession(tableName, families);
src/java/org/apache/cassandra/service/StorageService.java,1393,try
src/java/org/apache/cassandra/service/StorageService.java,1395,sess.start();
src/java/org/apache/cassandra/service/StorageService.java,1397,sess.join();
src/java/org/apache/cassandra/service/StorageService.java,1401,throw new IOException("Repair session " + sess + " failed.", e);
src/java/org/apache/cassandra/utils/MerkleTree.java,104,Token mintoken = partitioner.getMinimumToken();
src/java/org/apache/cassandra/utils/MerkleTree.java,105,root = initHelper(mintoken, mintoken, (byte)0, depth);
src/java/org/apache/cassandra/utils/MerkleTree.java,115,Hashable lchild = initHelper(left, midpoint, inc(depth), max);
src/java/org/apache/cassandra/utils/MerkleTree.java,116,Hashable rchild = initHelper(midpoint, right, inc(depth), max);
src/java/org/apache/cassandra/utils/MerkleTree.java,165,Token mintoken = ltree.partitioner.getMinimumToken();
src/java/org/apache/cassandra/utils/MerkleTree.java,166,TreeRange active = new TreeRange(null, mintoken, mintoken, (byte)0, null);
src/java/org/apache/cassandra/utils/MerkleTree.java,241,Token mintoken = partitioner.getMinimumToken();
src/java/org/apache/cassandra/utils/MerkleTree.java,242,return getHelper(root, mintoken, mintoken, (byte)0, t);
src/java/org/apache/cassandra/utils/MerkleTree.java,267,invalidateHelper(root, partitioner.getMinimumToken(), t);
src/java/org/apache/cassandra/utils/MerkleTree.java,298,Token mintoken = partitioner.getMinimumToken();
src/java/org/apache/cassandra/utils/MerkleTree.java,301,return hashHelper(root, new Range(mintoken, mintoken), range);
src/java/org/apache/cassandra/utils/MerkleTree.java,363,Token mintoken = partitioner.getMinimumToken();
src/java/org/apache/cassandra/utils/MerkleTree.java,366,root = splitHelper(root, mintoken, mintoken, (byte)0, t);
src/java/org/apache/cassandra/utils/MerkleTree.java,408,root = compactHelper(root, t);
src/java/org/apache/cassandra/utils/MerkleTree.java,414,assert !(hashable instanceof Leaf);
src/java/org/apache/cassandra/utils/MerkleTree.java,416,Inner node = (Inner)hashable;
src/java/org/apache/cassandra/utils/MerkleTree.java,417,int comp = t.compareTo(node.token);
src/java/org/apache/cassandra/utils/MerkleTree.java,421,assert node.lchild() instanceof Leaf && node.rchild() instanceof Leaf :
src/java/org/apache/cassandra/utils/MerkleTree.java,425,size--;
src/java/org/apache/cassandra/utils/MerkleTree.java,426,return new Leaf(node.lchild().hash(), node.rchild().hash());
src/java/org/apache/cassandra/utils/MerkleTree.java,430,node.lchild(compactHelper(node.lchild(), t));
src/java/org/apache/cassandra/utils/MerkleTree.java,431,else
src/java/org/apache/cassandra/utils/MerkleTree.java,433,node.rchild(compactHelper(node.rchild(), t));
src/java/org/apache/cassandra/utils/MerkleTree.java,434,return node;
src/java/org/apache/cassandra/utils/MerkleTree.java,445,return new TreeRangeIterator(this, range);
src/java/org/apache/cassandra/utils/MerkleTree.java,527,private final Range range;
src/java/org/apache/cassandra/utils/MerkleTree.java,532,Token mintoken = tree.partitioner().getMinimumToken();
src/java/org/apache/cassandra/utils/MerkleTree.java,534,tovisit.add(new TreeRange(tree, mintoken, mintoken, (byte)0, tree.root));
src/java/org/apache/cassandra/utils/MerkleTree.java,537,this.range = range;
src/java/org/apache/cassandra/utils/MerkleTree.java,554,continue;
src/java/org/apache/cassandra/utils/MerkleTree.java,565,tovisit.push(right);
src/java/org/apache/cassandra/utils/MerkleTree.java,567,tovisit.push(left);
src/java/org/apache/cassandra/db/CompactionManager.java,591,AbstractCompactedRow compactedRow = getCompactedRow(row, cfs, sstable.descriptor, true);
src/java/org/apache/cassandra/db/CompactionManager.java,619,AbstractCompactedRow compactedRow = getCompactedRow(row, cfs, sstable.descriptor, true);
src/java/org/apache/cassandra/db/CompactionManager.java,715,writer.append(getCompactedRow(row, cfs, sstable.descriptor, false));
src/java/org/apache/cassandra/db/CompactionManager.java,780,: new PrecompactedRow(cfs, Arrays.asList(row), false, getDefaultGcBefore(cfs), forceDeserialize);
src/java/org/apache/cassandra/db/CompactionManager.java,975,super(cfs, cfs.getSSTables(), getDefaultGcBefore(cfs), true);
src/java/org/apache/cassandra/io/CompactionIterator.java,51,private final ColumnFamilyStore cfs;
src/java/org/apache/cassandra/io/CompactionIterator.java,52,private final int gcBefore;
src/java/org/apache/cassandra/io/CompactionIterator.java,53,private final boolean major;
src/java/org/apache/cassandra/io/CompactionIterator.java,59,public CompactionIterator(ColumnFamilyStore cfs, Iterable<SSTableReader> sstables, int gcBefore, boolean major) throws IOException
src/java/org/apache/cassandra/io/CompactionIterator.java,61,this(cfs, getCollatingIterator(sstables), gcBefore, major);
src/java/org/apache/cassandra/io/CompactionIterator.java,74,this.cfs = cfs;
src/java/org/apache/cassandra/io/CompactionIterator.java,75,this.gcBefore = gcBefore;
src/java/org/apache/cassandra/io/CompactionIterator.java,76,this.major = major;
src/java/org/apache/cassandra/io/CompactionIterator.java,111,cfs.invalidateCachedRow(compactedRow.key);
src/java/org/apache/cassandra/io/CompactionIterator.java,145,return new LazilyCompactedRow(cfs, rows, major, gcBefore, false);
src/java/org/apache/cassandra/io/CompactionIterator.java,147,return new PrecompactedRow(cfs, rows, major, gcBefore, false);
src/java/org/apache/cassandra/io/CompactionIterator.java,175,return major ? "Major" : "Minor";
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,60,private final int gcBefore;
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,62,private final boolean forceDeserialize;
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,71,this.gcBefore = gcBefore;
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,72,this.forceDeserialize = forceDeserialize;
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,75,Set<SSTable> sstables = new HashSet<SSTable>();
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,78,sstables.add(row.sstable);
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,86,this.shouldPurge = major || !cfStore.isKeyInRemainingSSTables(key, sstables);
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,151,boolean cfIrrelevant = ColumnFamilyStore.removeDeletedCF(emptyColumnFamily, gcBefore) == null;
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,178,return getComparator().compare(o1.name(), o2.name());
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,181,iter = new LazyColumnIterator(new CollatingIterator(nameComparator, rows));
src/java/org/apache/cassandra/io/LazilyCompactedRow.java,216,ColumnFamily purged = shouldPurge ? ColumnFamilyStore.removeDeleted(container, gcBefore) : container;
src/java/org/apache/cassandra/io/PrecompactedRow.java,63,Set<SSTable> sstables = new HashSet<SSTable>();
src/java/org/apache/cassandra/io/PrecompactedRow.java,66,sstables.add(row.sstable);
src/java/org/apache/cassandra/io/PrecompactedRow.java,68,boolean shouldPurge = major || !cfStore.isKeyInRemainingSSTables(key, sstables);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,47,public final SSTableReader sstable;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,73,this.sstable = sstable;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,110,columnFamily = sstable.createColumnFamily();
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,44,private final SSTableReader sstable;
src/java/org/apache/cassandra/io/CompactionIterator.java,154,scanner.close();
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,118,assert length <= remaining
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,119,: String.format("mmap segment underflow; remaining is %d but %d requested", remaining, length);
src/java/org/apache/cassandra/config/CFMetaData.java,104,return (int) (Runtime.getRuntime().maxMemory() / (1048576 * 16));
src/java/org/apache/cassandra/thrift/CassandraServer.java,235,return multigetSliceInternal(state().getKeyspace(), Collections.singletonList(key), column_parent, predicate, consistency_level).get(key);
src/java/org/apache/cassandra/thrift/CassandraServer.java,245,return multigetSliceInternal(state().getKeyspace(), keys, column_parent, predicate, consistency_level);
src/java/org/apache/cassandra/thrift/CassandraServer.java,251,ThriftValidation.validateColumnParent(keyspace, column_parent);
src/java/org/apache/cassandra/thrift/CassandraServer.java,252,ThriftValidation.validatePredicate(keyspace, column_parent, predicate);
src/java/org/apache/cassandra/thrift/CassandraServer.java,284,ThriftValidation.validateColumnPath(keyspace, column_path);
src/java/org/apache/cassandra/thrift/CassandraServer.java,323,Map<ByteBuffer, List<ColumnOrSuperColumn>> columnFamiliesMap = multigetSliceInternal(keyspace, keys, column_parent, predicate, consistency_level);
src/java/org/apache/cassandra/thrift/CassandraServer.java,339,ThriftValidation.validateColumnParent(state().getKeyspace(), column_parent);
src/java/org/apache/cassandra/thrift/CassandraServer.java,340,ThriftValidation.validateColumnNames(state().getKeyspace(), column_parent, Arrays.asList(column.name));
src/java/org/apache/cassandra/thrift/CassandraServer.java,341,ThriftValidation.validateColumnData(state().getKeyspace(), column_parent.column_family, column);
src/java/org/apache/cassandra/thrift/CassandraServer.java,382,ThriftValidation.validateMutation(state().getKeyspace(), cfName, mutation);
src/java/org/apache/cassandra/thrift/CassandraServer.java,399,ThriftValidation.validateColumnPathOrParent(state().getKeyspace(), column_path);
src/java/org/apache/cassandra/thrift/CassandraServer.java,453,ThriftValidation.validateColumnParent(keyspace, column_parent);
src/java/org/apache/cassandra/thrift/CassandraServer.java,454,ThriftValidation.validatePredicate(keyspace, column_parent, predicate);
src/java/org/apache/cassandra/thrift/CassandraServer.java,516,ThriftValidation.validateColumnParent(keyspace, column_parent);
src/java/org/apache/cassandra/thrift/CassandraServer.java,517,ThriftValidation.validatePredicate(keyspace, column_parent, column_predicate);
src/java/org/apache/cassandra/thrift/CassandraServer.java,518,ThriftValidation.validateIndexClauses(keyspace, column_parent.column_family, index_clause);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,77,public static ColumnFamilyType validateColumnFamily(String tablename, String cfName) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,83,ColumnFamilyType cfType = DatabaseDescriptor.getColumnFamilyType(tablename, cfName);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,86,throw new InvalidRequestException("unconfigured columnfamily " + cfName);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,88,return cfType;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,94,static void validateColumnPath(String tablename, ColumnPath column_path) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,96,validateTable(tablename);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,97,ColumnFamilyType cfType = validateColumnFamily(tablename, column_path.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,102,throw new InvalidRequestException("supercolumn parameter is invalid for standard CF " + column_path.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,106,throw new InvalidRequestException("column parameter is not optional for standard CF " + column_path.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,112,throw new InvalidRequestException("supercolumn parameter is not optional for super CF " + column_path.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,116,validateColumnNames(tablename, column_path.column_family, column_path.super_column, Arrays.asList(column_path.column));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,120,validateColumnNames(tablename, column_path.column_family, null, Arrays.asList(column_path.super_column));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,124,static void validateColumnParent(String tablename, ColumnParent column_parent) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,126,validateTable(tablename);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,127,ColumnFamilyType cfType = validateColumnFamily(tablename, column_parent.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,132,throw new InvalidRequestException("columnfamily alone is required for standard CF " + column_parent.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,137,validateColumnNames(tablename, column_parent.column_family, null, Arrays.asList(column_parent.super_column));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,142,static void validateColumnPathOrParent(String tablename, ColumnPath column_path_or_parent) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,144,validateTable(tablename);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,145,ColumnFamilyType cfType = validateColumnFamily(tablename, column_path_or_parent.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,150,throw new InvalidRequestException("supercolumn may not be specified for standard CF " + column_path_or_parent.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,157,throw new InvalidRequestException("A column cannot be specified without specifying a super column for removal on super CF " + column_path_or_parent.column_family);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,162,validateColumnNames(tablename, column_path_or_parent.column_family, column_path_or_parent.super_column, Arrays.asList(column_path_or_parent.column));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,166,validateColumnNames(tablename, column_path_or_parent.column_family, null, Arrays.asList(column_path_or_parent.super_column));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,183,throw new InvalidRequestException("supercolumn specified to ColumnFamily " + columnFamilyName + " containing normal columns");
src/java/org/apache/cassandra/thrift/ThriftValidation.java,185,AbstractType comparator = ColumnFamily.getComparatorFor(keyspace, columnFamilyName, superColumnName);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,203,public static void validateColumnNames(String keyspace, ColumnParent column_parent, Iterable<ByteBuffer> column_names) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,205,validateColumnNames(keyspace, column_parent.column_family, column_parent.super_column, column_names);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,208,public static void validateRange(String keyspace, ColumnParent column_parent, SliceRange range) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,210,AbstractType comparator = ColumnFamily.getComparatorFor(keyspace, column_parent.column_family, column_parent.super_column);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,239,ThriftValidation.validateColumnPath(keyspace, new ColumnPath(cfName).setSuper_column((ByteBuffer)null).setColumn(cosc.column.name));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,240,validateColumnData(keyspace, cfName, cosc.column);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,245,ColumnParent cp = new ColumnParent(cfName).setSuper_column(cosc.super_column.name);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,248,ThriftValidation.validateColumnPath(keyspace, new ColumnPath(cfName).setSuper_column(cosc.super_column.name).setColumn(c.name));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,249,validateColumnData(keyspace, cp.column_family, c);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,278,validateColumnOrSuperColumn(keyspace, cfName, cosc);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,282,validateDeletion(keyspace, cfName, del);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,290,public static void validateDeletion(String keyspace, String cfName, Deletion del) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,292,validateColumnFamily(keyspace, cfName);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,295,validateSlicePredicate(keyspace, cfName, del.super_column, del.predicate);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,302,String msg = String.format("deletion of super_column is not possible on a standard ColumnFamily (KeySpace=%s ColumnFamily=%s Deletion=%s)", keyspace, cfName, del);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,307,public static void validateSlicePredicate(String keyspace, String cfName, ByteBuffer scName, SlicePredicate predicate) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,313,validateRange(keyspace, new ColumnParent(cfName).setSuper_column(scName), predicate.slice_range);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,316,validateColumnNames(keyspace, cfName, scName, predicate.column_names);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,322,public static void validateColumnData(String keyspace, String column_family, Column column) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,327,AbstractType validator = DatabaseDescriptor.getValueValidator(keyspace, column_family, column.name);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,334,keyspace,
src/java/org/apache/cassandra/thrift/ThriftValidation.java,335,column_family,
src/java/org/apache/cassandra/thrift/ThriftValidation.java,351,validateRange(keyspace, column_parent, predicate.slice_range);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,353,validateColumnNames(keyspace, column_parent, predicate.column_names);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,396,Set<ByteBuffer> indexedColumns = Table.open(keyspace).getColumnFamilyStore(columnFamily).getIndexedColumns();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,703,logger.debug("column family was dropped; no point in flushing");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,704,return null;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,699,? DatabaseDescriptor.getCFMetaData(table.name, getParentColumnfamily()) == null
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,700,: DatabaseDescriptor.getCFMetaData(metadata.cfId) == null;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,689,Table.flusherLock.writeLock().lock();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,749,Table.flusherLock.writeLock().unlock();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1079,Table.flusherLock.readLock().lock();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1086,Table.flusherLock.readLock().unlock();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1133,return Table.flusherLock.getQueueLength();
src/java/org/apache/cassandra/db/Memtable.java,40,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/db/Memtable.java,176,cfs.addSSTable(writeSortedContents());
src/java/org/apache/cassandra/db/Memtable.java,177,cfs.getMemtablesPendingFlush().remove(Memtable.this);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,184,Table.flusherLock.readLock().lock();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,191,Table.flusherLock.readLock().unlock();
src/java/org/apache/cassandra/db/Table.java,30,import java.util.concurrent.locks.Lock;
src/java/org/apache/cassandra/db/Table.java,67,static final ReentrantReadWriteLock flusherLock = new ReentrantReadWriteLock();
src/java/org/apache/cassandra/db/Table.java,124,return flusherLock.writeLock();
src/java/org/apache/cassandra/db/Table.java,349,flusherLock.readLock().lock();
src/java/org/apache/cassandra/db/Table.java,413,flusherLock.readLock().unlock();
src/java/org/apache/cassandra/db/Table.java,568,flusherLock.readLock().lock();
src/java/org/apache/cassandra/db/Table.java,580,flusherLock.readLock().unlock();
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,73,return;
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,75,cfs.snapshot(Table.getTimestampedSnapshotName(null));
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,79,public void applyModels() throws IOException
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,81,acquireLocks();
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,82,try
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,85,KSMetaData existing = DatabaseDescriptor.getTableDefinition(tableName);
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,86,CFMetaData cfm = existing.cfMetaData().get(cfName);
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,87,KSMetaData ksm = makeNewKeyspaceDefinition(existing);
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,88,CFMetaData.purge(cfm);
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,89,DatabaseDescriptor.setTableDefinition(ksm, newVersion);
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,96,finally
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,98,releaseLocks();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,53,Table.open(name).snapshot(null);
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,59,acquireLocks();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,64,Table table = Table.clear(ksm.name);
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,66,throw new IOException("Table is not active. " + ksm.name);
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,74,table.dropCf(cfm.cfId);
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,89,releaseLocks();
src/java/org/apache/cassandra/db/migration/Migration.java,100,CompactionManager.instance.getCompactionLock().lock();
src/java/org/apache/cassandra/db/migration/Migration.java,101,Table.getFlushLock().lock();
src/java/org/apache/cassandra/db/migration/Migration.java,106,Table.getFlushLock().unlock();
src/java/org/apache/cassandra/db/migration/Migration.java,107,CompactionManager.instance.getCompactionLock().unlock();
src/java/org/apache/cassandra/db/migration/Migration.java,111,public void beforeApplyModels() {}
src/java/org/apache/cassandra/db/migration/Migration.java,124,beforeApplyModels();
src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java,72,return;
src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java,73,ColumnFamilyStore cfs = Table.open(metadata.tableName).getColumnFamilyStore(metadata.cfName);
src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java,74,cfs.snapshot(Table.getTimestampedSnapshotName(null));
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,175,long curOffset = file.skipBytes((int) curColPosition.offset);
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,176,assert curOffset == curColPosition.offset;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,175,long curOffsert = file.skipBytes((int) indexInfo.offset);
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,176,assert curOffsert == indexInfo.offset;
src/java/org/apache/cassandra/hadoop/streaming/AvroOutputReader.java,142,long skipped = 0;
src/java/org/apache/cassandra/hadoop/streaming/AvroOutputReader.java,146,int skip = (int)Math.min(Integer.MAX_VALUE, n);
src/java/org/apache/cassandra/hadoop/streaming/AvroOutputReader.java,147,skipped += in.skipBytes(skip);
src/java/org/apache/cassandra/hadoop/streaming/AvroOutputReader.java,148,n -= skip;
src/java/org/apache/cassandra/hadoop/streaming/AvroOutputReader.java,150,return skipped;
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,49,int skipped = in.skipBytes(size);
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,51,throw new EOFException("attempted to skip " + size + " bytes but only skipped " + skipped);
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,65,throw new EOFException();
src/java/org/apache/cassandra/io/sstable/SSTable.java,230,ifile.skipBytes(8);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,302,int skipped = in.skipBytes(skip);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,303,if (skipped == 0) throw new EOFException();
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,304,skip -= skipped;
contrib/bmt_example/CassandraBulkLoader.java,178,ByteBuffer.wrap(SuperColumnName.getBytes(Charsets.UTF_8)),
contrib/bmt_example/CassandraBulkLoader.java,179,ByteBuffer.wrap(ColumnName.getBytes(Charsets.UTF_8))),
contrib/bmt_example/CassandraBulkLoader.java,180,ByteBuffer.wrap(ColumnValue.getBytes()),
contrib/client_only/src/ClientOnlyExample.java,66,RowMutation change = new RowMutation(KEYSPACE, ByteBuffer.wrap(("key" + i).getBytes()));
contrib/client_only/src/ClientOnlyExample.java,68,change.add(new QueryPath(cp), ByteBuffer.wrap(("value" + i).getBytes()), 0);
contrib/client_only/src/ClientOnlyExample.java,90,SliceByNamesReadCommand readCommand = new SliceByNamesReadCommand(KEYSPACE, ByteBuffer.wrap(("key" + i).getBytes()),
contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java,375,ColumnDef standardColumn = new ColumnDef(ByteBuffer.wrap("C1".getBytes()), "BytesType");
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,39,SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[]{}),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,40,ByteBuffer.wrap(new byte[] {}),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,47,ByteBuffer columnName = ByteBuffer.wrap("C1".getBytes());
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java,59,ByteBuffer.wrap(startOffset.getBytes()),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java,62,superColumns.add(new SuperColumn(ByteBuffer.wrap(superColumnName.getBytes()), columns));
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java,39,SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[]{}),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java,40,ByteBuffer.wrap(new byte[] {}),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java,52,ColumnParent parent = new ColumnParent("Super1").setSuper_column(("S" + j).getBytes());
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,45,SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[] {}),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,46,ByteBuffer.wrap(new byte[] {}),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,52,byte[] start = String.format(format, index).getBytes();
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,60,ColumnParent parent = new ColumnParent("Super1").setSuper_column(ByteBuffer.wrap(superColumnName.getBytes()));
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,86,new String(start),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,100,byte[] start = String.format(format, index).getBytes();
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java,132,new String(start),
contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Reader.java,66,ColumnParent parent = new ColumnParent("Super1").setSuper_column(superColumn.getBytes());
contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java,33,import org.apache.cassandra.utils.ByteBufferUtil;
contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java,112,return String.format(format, (int) token).getBytes();
contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java,151,byte[] messageDigest = md.digest(input.getBytes());
contrib/word_count/src/WordCount.java,85,sourceColumn = ByteBuffer.wrap(context.getConfiguration().get(CONF_COLUMN_NAME).getBytes());
contrib/word_count/src/WordCount.java,123,outputKey = ByteBuffer.wrap(context.getConfiguration().get(CONF_COLUMN_NAME).getBytes());
contrib/word_count/src/WordCount.java,138,c.value = ByteBuffer.wrap(String.valueOf(sum).getBytes());
contrib/word_count/src/WordCount.java,197,SlicePredicate predicate = new SlicePredicate().setColumn_names(Arrays.asList(ByteBuffer.wrap(columnName.getBytes())));
src/java/org/apache/cassandra/cli/CliClient.java,1744,return ByteBuffer.wrap(columnValue.getBytes());
src/java/org/apache/cassandra/cli/CliClient.java,1967,String keyName = (keyComparator == null) ? ByteBufferUtil.string(ks.key, Charsets.UTF_8) : keyComparator.getString(ks.key);
src/java/org/apache/cassandra/db/DefsTable.java,38,import static com.google.common.base.Charsets.UTF_8;
src/java/org/apache/cassandra/db/DefsTable.java,60,rm.add(new QueryPath(Migration.SCHEMA_CF, null, ByteBuffer.wrap(ksm.name.getBytes(UTF_8))), SerDeUtils.serialize(ksm.deflate()), now);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,200,final RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(ipaddr.getBytes()));
src/java/org/apache/cassandra/db/HintedHandOffManager.java,233,byte[] withsep = ArrayUtils.addAll(tableName.getBytes(UTF_8), SEPARATOR.getBytes());
src/java/org/apache/cassandra/db/HintedHandOffManager.java,239,int index = ByteBufferUtil.lastIndexOf(joined, SEPARATOR.getBytes()[0], joined.limit());
src/java/org/apache/cassandra/db/HintedHandOffManager.java,311,ByteBuffer endpointAsUTF8 = ByteBuffer.wrap(endpoint.getHostAddress().getBytes(UTF_8)); // keys have to be UTF8 to make OPP happy
src/java/org/apache/cassandra/db/HintedHandOffManager.java,381,RowMutation insert = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(newTable.getBytes(UTF_8)));
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,28,import com.google.common.base.Charsets;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,64,logger_.debug("Adding hint for " + InetAddress.getByName(ByteBufferUtil.string(addressBytes, Charsets.UTF_8)));
src/java/org/apache/cassandra/db/SystemTable.java,47,import static com.google.common.base.Charsets.UTF_8;
src/java/org/apache/cassandra/db/SystemTable.java,242,cf.addColumn(new Column(PARTITIONER, ByteBuffer.wrap(DatabaseDescriptor.getPartitioner().getClass().getName().getBytes(UTF_8)), FBUtilities.timestampMicros()));
src/java/org/apache/cassandra/db/SystemTable.java,243,cf.addColumn(new Column(CLUSTERNAME, ByteBuffer.wrap(DatabaseDescriptor.getClusterName().getBytes()), FBUtilities.timestampMicros()));
src/java/org/apache/cassandra/db/SystemTable.java,257,String savedClusterName = ByteBufferUtil.string(clusterCol.value(), UTF_8);
src/java/org/apache/cassandra/db/SystemTable.java,334,QueryFilter filter = QueryFilter.getNamesFilter(decorate(ByteBuffer.wrap(table.getBytes(UTF_8))),
src/java/org/apache/cassandra/db/SystemTable.java,336,ByteBuffer.wrap(indexName.getBytes(UTF_8)));
src/java/org/apache/cassandra/db/SystemTable.java,343,cf.addColumn(new Column(ByteBuffer.wrap(indexName.getBytes(UTF_8)), ByteBufferUtil.EMPTY_BYTE_BUFFER, System.currentTimeMillis()));
src/java/org/apache/cassandra/db/SystemTable.java,344,RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(table.getBytes(UTF_8)));
src/java/org/apache/cassandra/db/SystemTable.java,360,RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(table.getBytes(UTF_8)));
src/java/org/apache/cassandra/db/SystemTable.java,361,rm.delete(new QueryPath(INDEX_CF, null, ByteBuffer.wrap(indexName.getBytes(UTF_8))), System.currentTimeMillis());
src/java/org/apache/cassandra/db/marshal/AsciiType.java,52,return ByteBuffer.wrap(source.getBytes(Charsets.US_ASCII));
src/java/org/apache/cassandra/db/marshal/UTF8Type.java,26,import com.google.common.base.Charsets;
src/java/org/apache/cassandra/db/marshal/UTF8Type.java,40,return ByteBufferUtil.string(bytes, Charsets.UTF_8);
src/java/org/apache/cassandra/db/marshal/UTF8Type.java,50,return ByteBuffer.wrap(source.getBytes(Charsets.UTF_8));
src/java/org/apache/cassandra/db/migration/Migration.java,48,import static com.google.common.base.Charsets.UTF_8;
src/java/org/apache/cassandra/db/migration/Migration.java,240,rm.add(new QueryPath(SCHEMA_CF, null, ByteBuffer.wrap(ksm.name.getBytes(UTF_8))), SerDeUtils.serialize(ksm.deflate()), now);
src/java/org/apache/cassandra/db/migration/Migration.java,326,return ByteBuffer.wrap(version.toString().getBytes(UTF_8));
src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java,28,import com.google.common.base.Charsets;
src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java,44,skey = ByteBufferUtil.string(key, Charsets.UTF_8);
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,26,import com.google.common.base.Charsets;
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,121,return ByteBuffer.wrap(stringToken.token.getBytes(Charsets.UTF_8));
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,128,return new StringToken(ByteBufferUtil.string(bytes, Charsets.UTF_8));
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,162,skey = ByteBufferUtil.string(key, Charsets.UTF_8);
src/java/org/apache/cassandra/dht/RandomPartitioner.java,33,import static com.google.common.base.Charsets.UTF_8;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,68,token = ByteBufferUtil.string(fromdisk, fromdisk.position(), splitPoint - fromdisk.position(), UTF_8);
src/java/org/apache/cassandra/service/StorageProxy.java,55,import static com.google.common.base.Charsets.UTF_8;
src/java/org/apache/cassandra/service/StorageProxy.java,261,ByteBufferUtil.writeWithShortLength(ByteBuffer.wrap(target.getHostAddress().getBytes(UTF_8)), dos);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,26,import java.io.UnsupportedEncodingException;
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,106,return string(buffer, Charset.defaultCharset());
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,111,return string(buffer, position, length, Charset.defaultCharset());
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,182,try
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,184,return ByteBuffer.wrap(s.getBytes("UTF-8"));
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,188,throw new RuntimeException(e);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,201,DataOutputStream out = new DataOutputStream(new FileOutputStream(desc.filenameFor(SSTable.COMPONENT_STATS)));
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,21,import java.io.DataInputStream;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,22,import java.io.DataOutputStream;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,27,import org.apache.cassandra.io.ICompactSerializer;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,191,public static class EstimatedHistogramSerializer implements ICompactSerializer<EstimatedHistogram>
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,193,public void serialize(EstimatedHistogram eh, DataOutputStream dos) throws IOException
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,205,public EstimatedHistogram deserialize(DataInputStream dis) throws IOException
contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java,94,return String.format(format, Stress.randomizer.nextInt(Stress.session.getNumKeys() - 1)).getBytes();
src/java/org/apache/cassandra/cli/CliClient.java,301,thriftClient.remove(ByteBuffer.wrap(key.getBytes(Charsets.UTF_8)), path,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,616,ByteBuffer columnName = ByteBuffer.wrap(rcd.name.getBytes(Charsets.UTF_8));
src/java/org/apache/cassandra/db/DefsTable.java,66,ByteBuffer.wrap(org.apache.cassandra.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
src/java/org/apache/cassandra/db/HintedHandOffManager.java,367,DecoratedKey oldTableKey = StorageService.getPartitioner().decorateKey(ByteBuffer.wrap(oldTable.getBytes(UTF_8)));
src/java/org/apache/cassandra/db/migration/Migration.java,245,ByteBuffer.wrap(org.apache.cassandra.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
src/java/org/apache/cassandra/service/StorageService.java,2081,rcd.name = ByteBufferUtil.string(cd.name, Charsets.UTF_8);
src/java/org/apache/cassandra/db/CompactionManager.java,375,Table ks = Table.open(ksname);
src/java/org/apache/cassandra/db/Table.java,26,import java.util.concurrent.ExecutionException;
src/java/org/apache/cassandra/db/Table.java,27,import java.util.concurrent.Future;
src/java/org/apache/cassandra/db/Table.java,28,import java.util.concurrent.ScheduledFuture;
src/java/org/apache/cassandra/db/Table.java,29,import java.util.concurrent.TimeUnit;
src/java/org/apache/cassandra/db/Table.java,92,public final Map<Integer, ColumnFamilyStore> columnFamilyStores = new HashMap<Integer, ColumnFamilyStore>(); // TODO make private again
src/java/org/apache/cassandra/db/ColumnFamily.java,38,import org.apache.cassandra.io.ICompactSerializer2;
src/java/org/apache/cassandra/db/ColumnFamily.java,73,private transient ICompactSerializer2<IColumn> columnSerializer;
src/java/org/apache/cassandra/db/ColumnSerializer.java,32,import org.apache.cassandra.io.ICompactSerializer2;
src/java/org/apache/cassandra/db/ColumnSerializer.java,35,public class ColumnSerializer implements ICompactSerializer2<IColumn>
src/java/org/apache/cassandra/db/SuperColumn.java,36,import org.apache.cassandra.io.ICompactSerializer2;
src/java/org/apache/cassandra/db/SuperColumn.java,311,class SuperColumnSerializer implements ICompactSerializer2<IColumn>
src/java/org/apache/cassandra/db/SuperColumn.java,362,ColumnSortedMap preSortedMap = new ColumnSortedMap(comparator, serializer, dis, size);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,140,return sstable.getColumnSerializer().deserialize(file);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,42,import org.apache.cassandra.io.ICompactSerializer2;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,141,return new ColumnSet(serializer, dis, length);
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,175,return new ColumnIterator(serializer, dis, length);
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,242,return serializer.deserialize(dis);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1650,int v = data.getComparator().compare(column.value(), expression.value);
src/java/org/apache/cassandra/config/CFMetaData.java,593,cf_def.min_compaction_threshold = CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD;
src/java/org/apache/cassandra/config/CFMetaData.java,595,cf_def.max_compaction_threshold = CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD;
src/java/org/apache/cassandra/config/CFMetaData.java,597,cf_def.row_cache_save_period_in_seconds = CFMetaData.DEFAULT_ROW_CACHE_SAVE_PERIOD_IN_SECONDS;
src/java/org/apache/cassandra/config/CFMetaData.java,599,cf_def.key_cache_save_period_in_seconds = CFMetaData.DEFAULT_KEY_CACHE_SAVE_PERIOD_IN_SECONDS;
src/java/org/apache/cassandra/config/CFMetaData.java,601,cf_def.memtable_flush_after_mins = CFMetaData.DEFAULT_MEMTABLE_LIFETIME_IN_MINS;
src/java/org/apache/cassandra/config/CFMetaData.java,603,cf_def.memtable_throughput_in_mb = CFMetaData.DEFAULT_MEMTABLE_THROUGHPUT_IN_MB;
src/java/org/apache/cassandra/config/CFMetaData.java,605,cf_def.memtable_operations_in_millions = CFMetaData.DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS;
src/java/org/apache/cassandra/config/CFMetaData.java,653,comment = cf_def.comment == null ? "" : cf_def.comment.toString();
src/java/org/apache/cassandra/config/CFMetaData.java,715,def.setComment(cfm.comment == null ? "" : cfm.comment);
src/java/org/apache/cassandra/config/CFMetaData.java,756,def.comment = cfm.comment == null ? "" : cfm.comment;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,400,return;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,402,throw new InvalidRequestException("No indexed columns present in index clause with operator EQ");
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,35,this(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(threadPoolName, priority));
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,40,super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,45,this.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,47,else
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,58,BlockingQueue<Runnable> queue = executor.getQueue();
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,62,throw new RejectedExecutionException("ThreadPoolExecutor has shut down");
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,63,try
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,66,break;
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,70,throw new AssertionError(e);
src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java,28,int maximumPoolSize,
src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java,29,long keepAliveTime,
src/java/org/apache/cassandra/concurrent/JMXConfigurableThreadPoolExecutor.java,35,super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, jmxPath);
src/java/org/apache/cassandra/concurrent/JMXEnabledThreadPoolExecutor.java,41,this(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(threadPoolName), "internal");
src/java/org/apache/cassandra/concurrent/JMXEnabledThreadPoolExecutor.java,46,this(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(threadPoolName), jmxPath);
src/java/org/apache/cassandra/concurrent/JMXEnabledThreadPoolExecutor.java,51,this(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(threadPoolName, priority), "internal");
src/java/org/apache/cassandra/concurrent/JMXEnabledThreadPoolExecutor.java,55,int maximumPoolSize,
src/java/org/apache/cassandra/concurrent/JMXEnabledThreadPoolExecutor.java,62,super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);
src/java/org/apache/cassandra/concurrent/StageManager.java,45,stages.put(Stage.REQUEST_RESPONSE, multiThreadedStage(Stage.REQUEST_RESPONSE, Math.max(2, Runtime.getRuntime().availableProcessors())));
src/java/org/apache/cassandra/concurrent/StageManager.java,46,stages.put(Stage.INTERNAL_RESPONSE, multiThreadedStage(Stage.INTERNAL_RESPONSE, Math.max(2, Runtime.getRuntime().availableProcessors())));
src/java/org/apache/cassandra/concurrent/StageManager.java,53,stages.put(Stage.READ_REPAIR, multiThreadedStage(Stage.READ_REPAIR, Math.max(2, Runtime.getRuntime().availableProcessors())));
src/java/org/apache/cassandra/concurrent/StageManager.java,60,assert numThreads > 1 : "multi-threaded stages must have at least 2 threads";
src/java/org/apache/cassandra/concurrent/StageManager.java,63,numThreads,
src/java/org/apache/cassandra/concurrent/StageManager.java,73,assert numThreads > 1 : "multi-threaded stages must have at least 2 threads";
src/java/org/apache/cassandra/concurrent/StageManager.java,76,numThreads,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,82,= new JMXEnabledThreadPoolExecutor(1,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,83,Runtime.getRuntime().availableProcessors(),
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,90,= new JMXEnabledThreadPoolExecutor(1,
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,91,DatabaseDescriptor.getFlushWriters(),
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,94,new SynchronousQueue<Runnable>(),
src/java/org/apache/cassandra/thrift/CassandraServer.java,630,private static void applyMigrationOnStage(final Migration m) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/CassandraServer.java,647,throw new RuntimeException(e);
src/java/org/apache/cassandra/thrift/CassandraServer.java,654,InvalidRequestException ex = new InvalidRequestException(e.getCause().getMessage());
src/java/org/apache/cassandra/thrift/CassandraServer.java,655,ex.initCause(e.getCause());
src/java/org/apache/cassandra/thrift/CassandraServer.java,656,throw ex;
src/java/org/apache/cassandra/thrift/CassandraServer.java,658,else
src/java/org/apache/cassandra/thrift/CassandraServer.java,660,InvalidRequestException ex = new InvalidRequestException(e.getMessage());
src/java/org/apache/cassandra/thrift/CassandraServer.java,661,ex.initCause(e);
src/java/org/apache/cassandra/thrift/CassandraServer.java,662,throw ex;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,24,import java.util.Arrays;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,25,import java.util.Comparator;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,26,import java.util.Set;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,29,import javax.management.JMX;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,179,ColumnFamilyStore indexCfs = indexedColumns.remove(indexName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,182,logger.debug("index {} already removed; ignoring", ByteBufferUtil.bytesToHex(indexName));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,183,continue;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,185,indexCfs.unregisterMBean();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,186,SystemTable.setIndexRemoved(metadata.tableName, metadata.cfName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,187,indexCfs.removeAllSSTables();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,331,return;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,335,return;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,359,new Thread(runnable, "Create index " + indexedCfMetadata.cfName).start();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,102,final Memtable firstMemtable = memtables.iterator().next();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,128,ColumnFamily returnCF;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,138,returnCF = firstMemtable.getColumnFamily(key);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,143,: returnCF.cloneMeShallow();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,144,long lastDeletedAt = Long.MIN_VALUE;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,147,columns.hasNext(); // force cf initializtion
src/java/org/apache/cassandra/db/RowIteratorFactory.java,148,try
src/java/org/apache/cassandra/db/RowIteratorFactory.java,151,lastDeletedAt = Math.max(lastDeletedAt, columns.getColumnFamily().getMarkedForDeleteAt());
src/java/org/apache/cassandra/db/RowIteratorFactory.java,155,throw new IOError(e);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,158,returnCF.markedForDeleteAt.set(lastDeletedAt);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,161,else
src/java/org/apache/cassandra/db/RowIteratorFactory.java,163,returnCF = null;
src/java/org/apache/cassandra/tools/NodeProbe.java,61,private static final String fmtUrl = "service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi";
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,110,Thread.sleep(100);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,226,activeClients.decrementAndGet();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,231,inputTransport.close();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,236,outputTransport.close();
src/java/org/apache/cassandra/service/MigrationManager.java,44,public class MigrationManager implements IEndpointStateChangeSubscriber
src/java/org/apache/cassandra/service/MigrationManager.java,54,return;
src/java/org/apache/cassandra/service/StorageService.java,322,Gossiper.instance.unregister(migrationManager);
src/java/org/apache/cassandra/service/StorageService.java,421,Gossiper.instance.register(migrationManager);
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,37,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/service/StorageService.java,1334,return table.getColumnFamilyStores();
src/java/org/apache/cassandra/service/StorageService.java,1337,Set<ColumnFamilyStore> valid = new HashSet<ColumnFamilyStore>();
src/java/org/apache/cassandra/service/StorageService.java,640,case STATUS:
src/java/org/apache/cassandra/service/StorageService.java,641,String apStateValue = value.value;
src/java/org/apache/cassandra/service/StorageService.java,642,String[] pieces = apStateValue.split(VersionedValue.DELIMITER_STR, -1);
src/java/org/apache/cassandra/service/StorageService.java,643,assert (pieces.length > 0);
src/java/org/apache/cassandra/service/StorageService.java,645,String moveName = pieces[0];
src/java/org/apache/cassandra/service/StorageService.java,648,handleStateBootstrap(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,650,handleStateNormal(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,652,handleStateLeaving(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,654,handleStateLeft(endpoint, pieces);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,101,endpoints = new ArrayList<InetAddress>(calculateNaturalEndpoints(searchToken, tokenMetadataClone));
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,62,this.tokenMetadata.register(this);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,71,return cachedEndpoints.get(t);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,76,cachedEndpoints.put(t, addr);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,81,logger.debug("clearing cached endpoints");
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,82,cachedEndpoints.clear();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,99,TokenMetadata tokenMetadataClone = tokenMetadata.cloneOnlyTokenMap();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,100,keyToken = TokenMetadata.firstToken(tokenMetadataClone.sortedTokens(), searchToken);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,102,cacheEndpoint(keyToken, endpoints);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,235,clearEndpointCache();
src/java/org/apache/cassandra/locator/TokenMetadata.java,25,import java.util.concurrent.CopyOnWriteArrayList;
src/java/org/apache/cassandra/locator/TokenMetadata.java,68,private final CopyOnWriteArrayList<AbstractReplicationStrategy> subscribers = new CopyOnWriteArrayList<AbstractReplicationStrategy>();
src/java/org/apache/cassandra/locator/TokenMetadata.java,195,invalidateCaches();
src/java/org/apache/cassandra/locator/TokenMetadata.java,535,subscriber.invalidateCachedTokenEndpointValues();
src/java/org/apache/cassandra/locator/TokenMetadata.java,541,subscribers.add(subscriber);
src/java/org/apache/cassandra/locator/TokenMetadata.java,546,subscribers.remove(subscriber);
src/java/org/apache/cassandra/gms/FailureDetector.java,136,heartbeatWindow.add(now);
src/java/org/apache/cassandra/gms/FailureDetector.java,210,double interArrivalTime;
src/java/org/apache/cassandra/utils/FBUtilities.java,508,throw new ConfigurationException(String.format("Unable to find %s class '%s'", readable, classname));
src/java/org/apache/cassandra/db/HintedHandOffManager.java,268,while (!gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(
src/java/org/apache/cassandra/locator/TokenMetadata.java,384,return leavingEndpoints;
src/java/org/apache/cassandra/gms/Gossiper.java,198,return liveMbrs;
src/java/org/apache/cassandra/service/StorageProxy.java,861,Set<InetAddress> allEndpoints = Gossiper.instance.getLiveMembers();
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,770,public static int bits2words(long numBits) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,771,return (int)(((numBits-1)>>>6)+1);
src/java/org/apache/cassandra/db/SystemTable.java,247,return;
src/java/org/apache/cassandra/gms/Gossiper.java,352,int size = epSet.size();
src/java/org/apache/cassandra/gms/Gossiper.java,354,List<InetAddress> liveEndpoints = new ArrayList<InetAddress>(epSet);
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,166,throw new RuntimeException("The provided key was not UTF8 encoded.", e);
src/java/org/apache/cassandra/db/SystemTable.java,150,try
src/java/org/apache/cassandra/db/SystemTable.java,156,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/SystemTable.java,160,throw new AssertionError(e);
src/java/org/apache/cassandra/cli/CliMain.java,287,return;
src/java/org/apache/cassandra/cli/CliMain.java,290,evaluateFileStatements(new BufferedReader(fileReader));
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,186,partitioner = FBUtilities.newPartitioner(client.describe_partitioner());
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,190,KsDef ks_def = client.describe_keyspace(keyspace);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,191,List<String> cfnames = new ArrayList<String>();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,193,cfnames.add(cfd.name);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,194,int idx = cfnames.indexOf(cfName);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,195,CfDef cf_def = ks_def.cf_defs.get(idx);
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,29,public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor
src/java/org/apache/cassandra/net/MessagingService.java,29,import java.util.concurrent.ExecutorService;
src/java/org/apache/cassandra/net/MessagingService.java,383,ExecutorService stage = StageManager.getStage(message.getMessageType());
src/java/org/apache/cassandra/net/MessagingService.java,385,stage.execute(runnable);
src/java/org/apache/cassandra/service/MigrationManager.java,26,import java.util.concurrent.Future;
src/java/org/apache/cassandra/tools/NodeProbe.java,398,ColumnFamilyStoreMBean cfsProxy = getCfsProxy(ks, cf);
src/java/org/apache/cassandra/tools/NodeProbe.java,399,outs.println("Current compaction thresholds for " + ks + "/" + cf + ": \n" +
src/java/org/apache/cassandra/db/commitlog/BatchCommitLogExecutorService.java,85,long end = System.nanoTime() + (long)(1000000 * DatabaseDescriptor.getCommitLogSyncBatchWindow());
src/java/org/apache/cassandra/service/StorageService.java,347,Gossiper.instance.start((int)(System.currentTimeMillis() / 1000)); // needed for node-ring gathering.
src/java/org/apache/cassandra/service/StorageService.java,348,MessagingService.instance().listen(FBUtilities.getLocalAddress());
src/java/org/apache/cassandra/db/RowMutation.java,348,return rm;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,40,import org.apache.cassandra.concurrent.NamedThreadFactory;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,41,import org.apache.cassandra.concurrent.StageManager;
src/java/org/apache/cassandra/db/SystemTable.java,37,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/SystemTable.java,40,import org.apache.cassandra.db.marshal.BytesType;
src/java/org/apache/cassandra/db/SystemTable.java,44,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/SystemTable.java,45,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/service/StorageService.java,422,Gossiper.instance.start(SystemTable.incrementAndGetGeneration()); // needed for node-ring gathering.
src/java/org/apache/cassandra/service/StorageService.java,427,Gossiper.instance.addLocalApplicationState(ApplicationState.RELEASE_VERSION, valueFactory.releaseVersion());
src/java/org/apache/cassandra/db/Table.java,677,return Table.open(tableName);
src/java/org/apache/cassandra/service/StorageService.java,1940,List<ColumnFamilyStore> cfses = new ArrayList<ColumnFamilyStore>();
src/java/org/apache/cassandra/service/StorageService.java,1943,Table table = Table.open(tableName);
src/java/org/apache/cassandra/service/StorageService.java,1944,cfses.addAll(table.getColumnFamilyStores());
src/java/org/apache/cassandra/service/StorageService.java,1946,totalCFs = remainingCFs = cfses.size();
src/java/org/apache/cassandra/service/StorageService.java,1949,cfs.forceBlockingFlush();
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,168,socket.setTcpNoDelay(true);
src/java/org/apache/cassandra/service/StorageService.java,2131,StorageProxy.truncateBlocking(keyspace, columnFamily);
src/java/org/apache/cassandra/service/StorageService.java,2160,public void updateSnitch(String epSnitchClassName, Boolean dynamic, Integer dynamicUpdateInterval, Integer dynamicResetInterval, Double dynamicBadnessThreshold) throws ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,2165,IEndpointSnitch newSnitch = FBUtilities.construct(epSnitchClassName, "snitch");
src/java/org/apache/cassandra/service/StorageServiceMBean.java,255,public void truncate(String keyspace, String columnFamily) throws UnavailableException, TimeoutException, IOException;
src/java/org/apache/cassandra/service/StorageServiceMBean.java,280,public void updateSnitch(String epSnitchClassName, Boolean dynamic, Integer dynamicUpdateInterval, Integer dynamicResetInterval, Double dynamicBadnessThreshold) throws ConfigurationException;
src/java/org/apache/cassandra/tools/NodeProbe.java,340,public void joinRing() throws IOException, ConfigurationException
src/java/org/apache/cassandra/tools/NodeProbe.java,474,throw new RuntimeException("Error while executing truncate", e);
src/java/org/apache/cassandra/streaming/StreamHeader.java,27,import java.util.ArrayList;
src/java/org/apache/cassandra/streaming/StreamHeader.java,28,import java.util.Collection;
src/java/org/apache/cassandra/streaming/StreamHeader.java,29,import java.util.Collections;
src/java/org/apache/cassandra/streaming/StreamHeader.java,30,import java.util.List;
src/java/org/apache/cassandra/streaming/StreamHeader.java,54,public final long sessionId;
src/java/org/apache/cassandra/streaming/StreamHeader.java,77,dos.writeLong(sh.sessionId);
src/java/org/apache/cassandra/streaming/StreamHeader.java,89,long sessionId = dis.readLong();
src/java/org/apache/cassandra/streaming/StreamInSession.java,36,import org.apache.cassandra.utils.Pair;
src/java/org/apache/cassandra/streaming/StreamInSession.java,62,StreamInSession session = new StreamInSession(context, callback);
src/java/org/apache/cassandra/streaming/StreamInSession.java,63,sessions.put(context, session);
src/java/org/apache/cassandra/streaming/StreamInSession.java,70,StreamInSession session = sessions.get(context);
src/java/org/apache/cassandra/streaming/StreamInSession.java,73,StreamInSession possibleNew = new StreamInSession(context, null);
src/java/org/apache/cassandra/streaming/StreamInSession.java,202,StreamInSession session = entry.getValue();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,42,private static final ConcurrentMap<Pair<InetAddress, Long>, StreamOutSession> streams = new NonBlockingHashMap<Pair<InetAddress, Long>, StreamOutSession>();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,57,StreamOutSession session = new StreamOutSession(table, context, callback);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,58,streams.put(context, session);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,125,streams.remove(context);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,158,list.addAll(entry.getValue().getFiles());
src/java/org/apache/cassandra/streaming/StreamReply.java,45,public final long sessionId;
src/java/org/apache/cassandra/streaming/StreamReply.java,78,dos.writeLong(reply.sessionId);
src/java/org/apache/cassandra/streaming/StreamReply.java,85,long sessionId = dis.readLong();
src/java/org/apache/cassandra/gms/Gossiper.java,955,HeartBeatState hbState = new HeartBeatState(generationNbr);
src/java/org/apache/cassandra/gms/Gossiper.java,956,localState = new EndpointState(hbState);
src/java/org/apache/cassandra/service/StorageService.java,373,initialized = true;
src/java/org/apache/cassandra/tools/NodeCmd.java,762,toReturn[i - 1] = (String) params.get(i);
src/java/org/apache/cassandra/concurrent/Stage.java,28,STREAM,
src/java/org/apache/cassandra/concurrent/Stage.java,45,case STREAM:
src/java/org/apache/cassandra/concurrent/StageManager.java,48,stages.put(Stage.STREAM, new JMXEnabledThreadPoolExecutor(Stage.STREAM));
src/java/org/apache/cassandra/service/ClientState.java,55,reset();
src/java/org/apache/cassandra/service/ClientState.java,91,logger.debug("logged out: {}", user);
src/java/org/apache/cassandra/service/ClientState.java,92,reset();
src/java/org/apache/cassandra/service/ClientState.java,104,user = DatabaseDescriptor.getAuthenticator().defaultUser();
src/java/org/apache/cassandra/service/ClientState.java,105,keyspace = null;
src/java/org/apache/cassandra/service/ClientState.java,106,resourceClear();
src/java/org/apache/cassandra/thrift/CassandraServer.java,37,import org.apache.cassandra.config.*;
src/java/org/apache/cassandra/thrift/CassandraServer.java,64,return new ClientState();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,96,return getEndpointInfo(endpoint)[0];
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,107,return getEndpointInfo(endpoint)[1];
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,78,throw new UnsupportedOperationException("you must set the keyspace and columnfamily with setColumnFamily()");
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,82,throw new UnsupportedOperationException("you must set the predicate with setPredicate");
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,42,protected final Collection<InetAddress> writeEndpoints;
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,51,this.writeEndpoints = writeEndpoints;
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,33,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,35,import org.apache.cassandra.locator.NetworkTopologyStrategy;
src/java/org/apache/cassandra/service/WriteResponseHandler.java,31,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/config/Config.java,36,public Boolean hinted_handoff_enabled = true;
src/java/org/apache/cassandra/config/Config.java,114,public boolean incremental_backups = false;
src/java/org/apache/cassandra/service/StorageProxy.java,812,return hintedHandoffEnabled;
src/java/org/apache/cassandra/service/StorageProxy.java,817,hintedHandoffEnabled = b;
src/java/org/apache/cassandra/service/StorageProxy.java,827,return maxHintWindow;
src/java/org/apache/cassandra/service/StorageProxy.java,832,maxHintWindow = ms;
src/java/org/apache/cassandra/cli/CliClient.java,694,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,725,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,756,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,786,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,941,validateSchemaIsSettled(version);
src/java/org/apache/cassandra/cli/CliClient.java,960,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,2065,sessionState.out.println("Waiting for schema agreement...");
src/java/org/apache/cassandra/cli/CliClient.java,2066,Map<String, List<String>> versions = null;
src/java/org/apache/cassandra/cli/CliClient.java,2068,long limit = System.currentTimeMillis() + sessionState.schema_mwt;
src/java/org/apache/cassandra/cli/CliClient.java,2069,boolean inAgreement = false;
src/java/org/apache/cassandra/cli/CliClient.java,2070,outer:
src/java/org/apache/cassandra/cli/CliClient.java,2073,try
src/java/org/apache/cassandra/cli/CliClient.java,2075,versions = thriftClient.describe_schema_versions(); // getting schema version for nodes of the ring
src/java/org/apache/cassandra/cli/CliClient.java,2079,sessionState.err.println((e instanceof InvalidRequestException) ? ((InvalidRequestException) e).getWhy() : e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,2080,continue;
src/java/org/apache/cassandra/cli/CliClient.java,2086,continue outer;
src/java/org/apache/cassandra/cli/CliClient.java,2088,inAgreement = true;
src/java/org/apache/cassandra/cli/CliClient.java,2092,sessionState.err.printf("Warning: unreachable nodes %s", Joiner.on(", ").join(versions.get(StorageProxy.UNREACHABLE)));
src/java/org/apache/cassandra/cli/CliClient.java,2095,sessionState.err.printf("The schema has not settled in %d seconds; further migrations are ill-advised until it does.%nVersions are %s%n",
src/java/org/apache/cassandra/cli/CliClient.java,2096,sessionState.schema_mwt / 1000, FBUtilities.toString(versions));
src/java/org/apache/cassandra/cli/CliClient.java,2097,System.exit(-1);
src/java/org/apache/cassandra/cli/CliClient.java,2099,sessionState.out.println("... schemas agree across the cluster");
src/java/org/apache/cassandra/thrift/CassandraServer.java,672,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,697,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,722,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,768,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,797,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,832,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,859,Map<String, List<String>> versions = Maps.filterKeys(StorageProxy.describeSchemaVersions(),
src/java/org/apache/cassandra/thrift/CassandraServer.java,860,Predicates.not(Predicates.equalTo(StorageProxy.UNREACHABLE)));
src/java/org/apache/cassandra/service/ReadCallback.java,141,((RowDigestResolver) resolver).injectPreProcessed(result);
src/java/org/apache/cassandra/service/ReadCallback.java,147,condition.signal();
src/java/org/apache/cassandra/service/ReadCallback.java,148,maybeResolveForRepair();
src/java/org/apache/cassandra/service/StorageProxy.java,492,logger.debug("local range slice");
src/java/org/apache/cassandra/service/StorageProxy.java,518,handler.assureSufficientLiveNodes();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,76,List<InetAddress> endpoints = new ArrayList<InetAddress>(getReplicationFactor());
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,80,String dcName = dcEntry.getKey();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,81,int dcReplicas = dcEntry.getValue();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,91,List<InetAddress> dcEndpoints = new ArrayList<InetAddress>(dcReplicas);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,92,Set<String> racks = new HashSet<String>();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,94,for (Iterator<Token> iter = TokenMetadata.ringIterator(dcTokens.sortedTokens(), searchToken, false);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,97,Token token = iter.next();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,98,InetAddress endpoint = dcTokens.getEndpoint(token);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,99,String rack = snitch.getRack(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,102,dcEndpoints.add(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,103,racks.add(rack);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,108,for (Iterator<Token> iter = TokenMetadata.ringIterator(dcTokens.sortedTokens(), searchToken, false);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,111,Token token = iter.next();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,112,InetAddress endpoint = dcTokens.getEndpoint(token);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,114,dcEndpoints.add(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,121,logger.debug("{} endpoints in datacenter {} for token {} ",
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,122,new Object[] { StringUtils.join(dcEndpoints, ","), dcName, searchToken});
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,123,endpoints.addAll(dcEndpoints);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,126,return endpoints;
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,223,return getAddressRanges(tokenMetadata);
src/java/org/apache/cassandra/locator/TokenMetadata.java,65,private ArrayList<Token> sortedTokens;
src/java/org/apache/cassandra/locator/TokenMetadata.java,72,this(null);
src/java/org/apache/cassandra/locator/TokenMetadata.java,78,tokenToEndpointMap = HashBiMap.create();
src/java/org/apache/cassandra/locator/TokenMetadata.java,258,return new TokenMetadata(HashBiMap.create(tokenToEndpointMap));
src/java/org/apache/cassandra/locator/TokenMetadata.java,311,lock.readLock().lock();
src/java/org/apache/cassandra/locator/TokenMetadata.java,312,try
src/java/org/apache/cassandra/locator/TokenMetadata.java,314,return sortedTokens;
src/java/org/apache/cassandra/locator/TokenMetadata.java,316,finally
src/java/org/apache/cassandra/locator/TokenMetadata.java,318,lock.readLock().unlock();
src/java/org/apache/cassandra/locator/TokenMetadata.java,378,return bootstrapTokens;
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,61,MessagingService.validateMagic(input.readInt());
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,62,int header = input.readInt();
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,87,int size = input.readInt();
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,88,byte[] headerBytes = new byte[size];
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,89,input.readFully(headerBytes);
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,94,else
src/java/org/apache/cassandra/net/MessagingService.java,45,import org.apache.cassandra.net.io.SerializerType;
src/java/org/apache/cassandra/net/MessagingService.java,406,return x >>> (p + 1) - n & ~(-1 << n);
src/java/org/apache/cassandra/net/MessagingService.java,442,Setting up the protocol header. This is 4 bytes long
src/java/org/apache/cassandra/net/MessagingService.java,443,represented as an integer. The first 2 bits indicate
src/java/org/apache/cassandra/net/MessagingService.java,444,the serializer type. The 3rd bit indicates if compression
src/java/org/apache/cassandra/net/MessagingService.java,445,is turned on or off. It is turned off by default. The 4th
src/java/org/apache/cassandra/net/MessagingService.java,446,bit indicates if we are in streaming mode. It is turned off
src/java/org/apache/cassandra/net/io/SerializerType.java,19,package org.apache.cassandra.net.io;
src/java/org/apache/cassandra/net/io/SerializerType.java,21,public enum SerializerType
src/java/org/apache/cassandra/net/io/SerializerType.java,23,BINARY,
src/java/org/apache/cassandra/net/io/SerializerType.java,24,JAVA,
src/java/org/apache/cassandra/net/io/SerializerType.java,25,XML,
src/java/org/apache/cassandra/net/io/SerializerType.java,26,JSON
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,26,import java.util.concurrent.LinkedBlockingDeque;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,35,import org.apache.cassandra.utils.AbstractStatsDeque;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,53,private final ConcurrentHashMap<InetAddress, AdaptiveLatencyTracker> windows = new ConcurrentHashMap<InetAddress, AdaptiveLatencyTracker>();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,194,AdaptiveLatencyTracker tracker = windows.get(host);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,197,AdaptiveLatencyTracker alt = new AdaptiveLatencyTracker(WINDOW_SIZE);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,198,tracker = windows.putIfAbsent(host, alt);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,200,tracker = alt;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,202,tracker.add(latency);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,221,scores.put(entry.getKey(), entry.getValue().score());
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,230,tracker.clear();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,260,AdaptiveLatencyTracker window = windows.get(host);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,274,class AdaptiveLatencyTracker extends AbstractStatsDeque
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,276,private final LinkedBlockingDeque<Double> latencies;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,281,latencies = new LinkedBlockingDeque<Double>(size);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,289,latencies.offer(i);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,295,latencies.clear();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,300,return latencies.iterator();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,305,return latencies.size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,19,package org.apache.cassandra.utils;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,21,import java.util.Iterator;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,23,public abstract class AbstractStatsDeque implements Iterable<Double>
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,25,public abstract Iterator<Double> iterator();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,26,public abstract int size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,27,public abstract void add(double o);
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,28,public abstract void clear();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,36,double sum = 0d;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,39,sum += interval;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,41,return sum;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,46,double sumOfDeviations = 0d;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,47,double mean = mean();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,51,double v = interval - mean;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,52,sumOfDeviations += v * v;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,55,return sumOfDeviations;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,60,return sum() / size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,65,return sumOfDeviations() / size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,70,return Math.sqrt(variance());
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,27,public class BoundedStatsDeque extends AbstractStatsDeque
src/java/org/apache/cassandra/gms/EndpointState.java,24,import java.util.Map;
src/java/org/apache/cassandra/gms/Gossiper.java,489,int localHbVersion = epState.getHeartBeatState().getHeartBeatVersion();
src/java/org/apache/cassandra/net/MessagingService.java,154,getConnectionPool(ep).reset();
src/java/org/apache/cassandra/net/MessagingService.java,210,return getConnectionPool(to).getConnection(msg);
src/java/org/apache/cassandra/locator/TokenMetadata.java,327,map = HashMultimap.create();
src/java/org/apache/cassandra/locator/TokenMetadata.java,330,map = priorMap;
src/java/org/apache/cassandra/locator/TokenMetadata.java,524,sb.append(System.getProperty("line.separator"));
src/java/org/apache/cassandra/net/MessagingService.java,548,server.close();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,60,reloadConfiguration();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,110,public void reloadConfiguration() throws ConfigurationException
src/java/org/apache/cassandra/service/GCInspector.java,92,logGCResults();
src/java/org/apache/cassandra/service/GCInspector.java,95,StorageService.scheduledTasks.scheduleWithFixedDelay(t, INTERVAL_IN_MS, INTERVAL_IN_MS, TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/service/GCInspector.java,104,continue;
src/java/org/apache/cassandra/service/GCInspector.java,128,logger.info(st);
src/java/org/apache/cassandra/service/GCInspector.java,130,logger.debug(st);
src/java/org/apache/cassandra/service/GCInspector.java,133,StatusLogger.log();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,868,return conf.in_memory_compaction_limit_in_mb * 1024 * 1024;
src/java/org/apache/cassandra/service/StorageService.java,1531,org.apache.log4j.Logger.getLogger(classQualifier).setLevel(level);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,28,protected abstract void seekInternal(int position);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,29,protected abstract int getPosition();
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,32,!! DataInput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,220,int unreadPosition = 0;
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,228,seekInternal(unreadPosition);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,239,seekInternal(unreadPosition);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,28,public class MappedFileDataInput extends AbstractDataInput implements FileDataInput
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,53,position = pos;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,59,return position;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,71,seekInternal(((MappedFileDataInputMark) mark).position);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,140,public int skipBytes(int n) throws IOException
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,142,assert n >= 0 : "skipping negative bytes is illegal: " + n;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,144,return 0;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,145,int oldPosition = position;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,146,assert ((long)oldPosition) + n <= Integer.MAX_VALUE;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,147,position = Math.min(buffer.capacity(), position + n);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,148,return position - oldPosition;
src/java/org/apache/cassandra/service/StorageProxy.java,884,return !Gossiper.instance.getUnreachableMembers().isEmpty();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,161,Double first = scores.get(addresses.get(0));
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,163,return;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,166,Double next = scores.get(addr);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,90,Configuration conf = context.getConfiguration();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,91,this(context.getConfiguration());
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,44,private long[] bucketOffsets;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,56,makeOffsets(bucketCount);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,69,bucketOffsets = new long[size];
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,71,bucketOffsets[0] = last;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,77,bucketOffsets[i] = next;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,120,long[] rv = new long[buckets.length()];
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,122,rv[i] = buckets.get(i);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,126,buckets.set(i, 0L);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,176,elements += buckets.get(i);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,177,sum += buckets.get(i) * bucketOffsets[i];
src/java/org/apache/cassandra/io/sstable/Descriptor.java,157,String component = st.nextToken();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,338,int greaterThan = (index + 1) * -1;
src/java/org/apache/cassandra/net/MessagingService.java,530,Socket socket = server.accept();
src/java/org/apache/cassandra/net/MessagingService.java,541,throw new RuntimeException(e);
src/java/org/apache/cassandra/gms/FailureDetector.java,129,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/gms/FailureDetector.java,146,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,44,protected final ConsistencyLevel consistencyLevel;
src/java/org/apache/cassandra/io/util/SegmentedFile.java,50,this.path = path;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,438,Map<String, Integer> result = new HashMap<String, Integer>();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,444,return result;
src/java/org/apache/cassandra/db/HintedHandOffManagerMBean.java,44,public Map<String, Integer> countPendingHints();
src/java/org/apache/cassandra/service/ReadCallback.java,134,condition.signal();
src/java/org/apache/cassandra/service/TruncateResponseHandler.java,74,condition.signal();
src/java/org/apache/cassandra/utils/SimpleCondition.java,61,set = true;
src/java/org/apache/cassandra/utils/SimpleCondition.java,62,notify();
src/java/org/apache/cassandra/utils/FBUtilities.java,426,InputStream in = FBUtilities.class.getClassLoader().getResourceAsStream("org/apache/cassandra/config/version.properties");
src/java/org/apache/cassandra/io/sstable/IndexSummary.java,35,public class IndexSummary
src/java/org/apache/cassandra/db/IndexScanCommand.java,20,package org.apache.cassandra.db;
src/java/org/apache/cassandra/db/IndexScanCommand.java,25,import org.apache.cassandra.dht.AbstractBounds;
src/java/org/apache/cassandra/db/IndexScanCommand.java,30,import org.apache.cassandra.thrift.IndexClause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,31,import org.apache.cassandra.thrift.SlicePredicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,32,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/IndexScanCommand.java,33,import org.apache.thrift.TDeserializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,34,import org.apache.thrift.TSerializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,41,public final String keyspace;
src/java/org/apache/cassandra/db/IndexScanCommand.java,42,public final String column_family;
src/java/org/apache/cassandra/db/IndexScanCommand.java,43,public final IndexClause index_clause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,44,public final SlicePredicate predicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,50,this.keyspace = keyspace;
src/java/org/apache/cassandra/db/IndexScanCommand.java,51,this.column_family = column_family;
src/java/org/apache/cassandra/db/IndexScanCommand.java,52,this.index_clause = index_clause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,53,this.predicate = predicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,54,this.range = range;
src/java/org/apache/cassandra/db/IndexScanCommand.java,84,out.writeUTF(o.keyspace);
src/java/org/apache/cassandra/db/IndexScanCommand.java,85,out.writeUTF(o.column_family);
src/java/org/apache/cassandra/db/IndexScanCommand.java,86,TSerializer ser = new TSerializer(new TBinaryProtocol.Factory());
src/java/org/apache/cassandra/db/IndexScanCommand.java,87,FBUtilities.serialize(ser, o.index_clause, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,88,FBUtilities.serialize(ser, o.predicate, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,94,String keyspace = in.readUTF();
src/java/org/apache/cassandra/db/IndexScanCommand.java,95,String columnFamily = in.readUTF();
src/java/org/apache/cassandra/db/IndexScanCommand.java,101,FBUtilities.deserialize(dser, predicate, in);
src/java/org/apache/cassandra/dht/LocalPartitioner.java,42,return decorateKey(key);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,152,nexttok = st.nextToken();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,354,bf = LegacyBloomFilter.alwaysMatchingBloomFilter();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,604,public static long readRowSize(DataInput in, Descriptor d) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,607,return in.readInt();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,608,return in.readLong();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,627,return p.convertFromDiskFormat(bytes);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,628,return p.decorateKey(bytes);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,19,package org.apache.cassandra.service;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,21,import java.util.List;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,23,import org.slf4j.Logger;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,24,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,26,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,28,import org.apache.cassandra.net.IVerbHandler;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,30,import org.apache.cassandra.net.MessagingService;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,34,private static final Logger logger = LoggerFactory.getLogger(IndexScanVerbHandler.class);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,38,try
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,41,ColumnFamilyStore cfs = Table.open(command.keyspace).getColumnFamilyStore(command.column_family);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,43,RangeSliceReply reply = new RangeSliceReply(rows);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,51,throw new RuntimeException(ex);
src/java/org/apache/cassandra/service/StorageService.java,286,Gossiper.instance.start((int)(System.currentTimeMillis() / 1000));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,19,package org.apache.cassandra.utils;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,22,import java.nio.ByteBuffer;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,23,import java.util.BitSet;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,26,import org.slf4j.Logger;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,27,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,31,private static final int EXCESS = 20;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,32,private static final Logger logger = LoggerFactory.getLogger(LegacyBloomFilter.class);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,44,hashCount = hashes;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,50,long numBits = numElements * bucketsPer + EXCESS;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,51,return new BitSet((int)Math.min(Integer.MAX_VALUE, numBits));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,60,int maxBucketsPerElement = Math.max(1, BloomCalculations.maxBucketsPerElement(numElements));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,61,int bucketsPerElement = Math.min(targetBucketsPerElem, maxBucketsPerElement);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,64,logger.warn(String.format("Cannot provide an optimal LegacyBloomFilter for %d elements (%d/%d buckets per element).",
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,65,numElements, bucketsPerElement, targetBucketsPerElem));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,67,BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,68,return new LegacyBloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,79,assert maxFalsePosProbability <= 1.0 : "Invalid probability";
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,80,int bucketsPerElement = BloomCalculations.maxBucketsPerElement(numElements);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,81,BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement, maxFalsePosProbability);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,82,return new LegacyBloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,101,return false;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,104,return true;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,110,This is a general purpose API.
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,132,int n = 0;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,137,n++;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,140,return n;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,146,BitSet set = new BitSet(64);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,147,set.set(0, 64);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,148,return new LegacyBloomFilter(1, set);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,153,return LegacyBloomFilter.getHashBuckets(key, hashCount, buckets());
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,163,int[] result = new int[hashCount];
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,164,int hash1 = MurmurHash.hash32(b, b.position(), b.remaining(), 0);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,165,int hash2 = MurmurHash.hash32(b, b.position(), b.remaining(), hash1);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,168,result[i] = Math.abs((hash1 + i * hash2) % max);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,170,return result;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,173,public BitSet getBitSet(){
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,24,import java.util.BitSet;
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,36,throws IOException
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,48,try
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,50,BitSet bs = (BitSet) ois.readObject();
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,51,return new LegacyBloomFilter(hashes, bs);
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,54,throw new RuntimeException(e);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,36,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,39,import org.apache.cassandra.dht.AbstractBounds;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,40,import org.apache.cassandra.dht.IPartitioner;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,41,import org.apache.cassandra.dht.Range;
src/java/org/apache/cassandra/db/ColumnFamily.java,205,columns.clear();
src/java/org/apache/cassandra/db/Memtable.java,200,return columnFamilies.isEmpty();
src/java/org/apache/cassandra/db/Memtable.java,290,return columnFamilies.get(key);
src/java/org/apache/cassandra/db/Memtable.java,295,columnFamilies.clear();
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,35,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,35,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/columniterator/SimpleSliceReader.java,31,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/SimpleSliceReader.java,32,import org.apache.cassandra.db.DecoratedKey;
