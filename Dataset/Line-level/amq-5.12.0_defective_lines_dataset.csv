File,Line_number,SRC
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,204,public Object chooseValue(ActiveMQDestination destination) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,209,SortedSet sortedSet = new TreeSet(set);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1824,static protected class MessageKeysMarshaller extends VariableMarshaller<MessageKeys> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1825,static final MessageKeysMarshaller INSTANCE = new MessageKeysMarshaller();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1829,return new MessageKeys(dataIn.readUTF(), LocationMarshaller.INSTANCE.readPayload(dataIn));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1835,LocationMarshaller.INSTANCE.writePayload(object.location, dataOut);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3011,defaultPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3014,lowPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3017,highPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,423,if (subscription != null){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,424,subscription.resetConsumedCount();
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,61,return getXStream().fromXML(reader);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,224,long x = s1.getConsumerInfo().getAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,225,long y = s2.getConsumerInfo().getAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2089,subscription.getConsumerInfo().decrementAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2105,subs.getConsumerInfo().incrementAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/group/CachedMessageGroupMap.java,47,s.getConsumerInfo().decrementAssignedGroupCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/group/CachedMessageGroupMap.java,93,s.getConsumerInfo().clearAssignedGroupCount();
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,66,private transient long assignedGroupCount;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,497,public void incrementAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,498,this.assignedGroupCount++;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,501,public void clearAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,502,this.assignedGroupCount=0;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,505,public void decrementAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,506,this.assignedGroupCount--;
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,509,public long getAssignedGroupCount() {
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,510,return assignedGroupCount;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,66,LOG.info("Corrupt journal records found in '" + dataFile.getFile() + "' between offsets: " + sequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,335,LOG.info("Corrupt journal records found in '"+dataFile.getFile()+"' between offsets: "+sequence);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,44,return load(classDesc.getName(), cl, inLoader);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,56,return Proxy.getProxyClass(cl, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,59,return Proxy.getProxyClass(inLoader, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,64,return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,69,throw new ClassNotFoundException(null, e);
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,97,public XStream getXStream() {
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,113,XStream xstream = new XStream();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,94,throw new Exception("Unkown transformation: " + transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,257,xstream = new XStream();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,86,return e;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,381,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,404,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,431,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,23,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,45,private final Map<MessageId, Object> audit = new HashMap<MessageId, Object>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,71,if (!audit.containsKey(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,72,audit.put(messageId, Boolean.TRUE);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,73,return false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,76,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,136,if (map.values().contains(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,137,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,140,for (PendingNode value : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,141,if (value.getMessage().equals(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,142,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,70,assert mappedDestinations.size() < 2;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AmqpAuthenticator.java,79,connectionInfo.setUserName(mechanism.getUsername());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AmqpAuthenticator.java,80,connectionInfo.setPassword(mechanism.getPassword());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AmqpAuthenticator.java,82,if (tryAuthenticate(connectionInfo, transport.getPeerCertificates())) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AmqpAuthenticator.java,83,sasl.done(Sasl.SaslOutcome.PN_SASL_OK);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AmqpAuthenticator.java,88,LOG.debug("SASL [{}} Handshake complete.", mechanism.getMechanismName());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AnonymousMechanism.java,24,public class AnonymousMechanism implements SaslMechanism {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AnonymousMechanism.java,36,public String getUsername() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AnonymousMechanism.java,37,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AnonymousMechanism.java,41,public String getPassword() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/AnonymousMechanism.java,42,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/PlainMechanism.java,31,Buffer[] parts = new Buffer(data).split((byte) 0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/PlainMechanism.java,33,if (parts.length > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/PlainMechanism.java,34,username = parts[0].utf8().toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/PlainMechanism.java,37,if (parts.length > 1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/sasl/PlainMechanism.java,38,password = parts[1].utf8().toString();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,232,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,692,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,52,import org.apache.activemq.broker.region.cursors.*;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,231,Message messageSend = (Message) this.wireFormat.unmarshal(packet);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,244,messageSend.setMessageId(new MessageId(this.producerId, this.messageIdGenerator.getNextSequenceId()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,248,rescheduleAt = protonTransport.tick(System.currentTimeMillis()) - System.currentTimeMillis();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,816,long nextIdleCheck = protonTransport.tick(System.currentTimeMillis());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,818,LOG.trace("Connection keep-alive processing starts at: {}", new Date(nextIdleCheck));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,819,monitor.startKeepAliveTask(nextIdleCheck - System.currentTimeMillis());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,89,String converted = convertMQTTToActiveMQ(topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,96,protocol.getClientId() + ":" + requestedQoS + "." +
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,102,String converted = convertMQTTToActiveMQ(topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,229,LOG.warn("Could not delete the MQTT queue subsscriptions.", e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,277,if (destination.getPhysicalName().startsWith("Consumer." + clientId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1066,if (data instanceof KahaSubscriptionCommand) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1067,KahaSubscriptionCommand kahaSubscriptionCommand = (KahaSubscriptionCommand)data;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1068,if (kahaSubscriptionCommand.hasSubscriptionInfo()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1070,LOG.debug("ignoring add sub command during recovery replay:" + data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1071,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,23,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,310,throw new UnsupportedOperationException("You cannot dynamically change the selector for durable topic subscriptions");
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,32,import org.apache.commons.pool2.BasePooledObjectFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,33,import org.apache.commons.pool2.KeyedObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,38,import org.apache.commons.pool2.impl.GenericObjectPool;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,154,if (destination == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,159,if (destination.isQueue() == destination2.isQueue()) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,210,return sortedSet.last();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2030,if (storeLimit > dirFreeSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2034,dirFreeSpace / (1024 * 1024) + " mb.");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2035,usage.getTempUsage().setLimit(dirFreeSpace);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,364,for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,365,Map.Entry entry = (Map.Entry) iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,366,msg.setObjectProperty((String) entry.getKey(), entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,386,connection.close();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,677,if (tracked == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,79,for (String selector : selectors) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,80,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,81,final BooleanExpression expression = getExpression(selector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,82,matches = expression.matches(msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,83,if (matches) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,84,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,87,LOG.error(e.getMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,96,private long lastUpdated;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,225,protected void query() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,694,entries.clear();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,118,protected final List<Command> dispatchQueue = new LinkedList<Command>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,120,protected final AtomicReference<Throwable> transportException = new AtomicReference<Throwable>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,142,private final Map<ProducerId, ProducerBrokerExchange> producerExchanges = new HashMap<ProducerId, ProducerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,143,private final Map<ConsumerId, ConsumerBrokerExchange> consumerExchanges = new HashMap<ConsumerId, ConsumerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,237,if (info.getPrefetchSize() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,238,return (getInFlightSize() * 100)/info.getPrefetchSize();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1386,if(previousKeys != null && !previousKeys.location.equals(location)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1387,sd.locationIndex.remove(tx, previousKeys.location);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,180,jms.setJMSCorrelationID(properties.getCorrelationId().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,209,props.setCorrelationId(msg.getJMSCorrelationID());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/ListNode.java,197,entryToRemove = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,775,if (isAutoAcknowledgeEach()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,776,synchronized(deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,788,pendingAck = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1038,if (!oldPendingAck.isDeliveredAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1040,session.sendAck(oldPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1047,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1051,deliveredCounter = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1052,additionalWindowSize = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,149,private MessageAck pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,782,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,787,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,964,if (pendingAck != null && deliveredCounter > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,965,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1028,MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1029,pendingAck = new MessageAck(md, ackType, deliveredCounter);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1030,pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1031,if( oldPendingAck==null ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1032,pendingAck.setFirstMessageId(pendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1034,pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1039,LOG.debug("Sending old pending ack {}, new pending: {}", oldPendingAck, pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1042,LOG.debug("dropping old pending ack {}, new pending: {}", oldPendingAck, pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1048,LOG.debug("ackLater: sending: {}", pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1049,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1050,pendingAck=null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,84,private int currentCredit;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,104,this.currentCredit = endpoint.getRemoteCredit();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,123,sendToActiveMQ(removeCommand, null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,136,sendToActiveMQ(removeCommand, null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,144,sendToActiveMQ(rsi, null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,155,int updatedCredit = getEndpoint().getCredit();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,160,if (getEndpoint().getDrain() && (updatedCredit != currentCredit || !draining)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,161,currentCredit = updatedCredit >= 0 ? updatedCredit : 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,162,draining = true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,169,sendToActiveMQ(control, null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,174,MessagePull pullRequest = new MessagePull();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,175,pullRequest.setConsumerId(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,176,pullRequest.setDestination(getDestination());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,177,pullRequest.setTimeout(-1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,178,pullRequest.setAlwaysSignalDone(true);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,179,pullRequest.setQuantity(currentCredit);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,180,sendToActiveMQ(pullRequest, null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,182,currentCredit = updatedCredit >= 0 ? updatedCredit : 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,186,control.setPrefetch(currentCredit);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,187,sendToActiveMQ(control, null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,404,currentCredit = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,157,LOG.trace("Flow: drain={} credit={}, remoteCredit={}",
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,158,getEndpoint().getDrain(), getEndpoint().getCredit(), getEndpoint().getRemoteCredit());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,342,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,343,connected.set(false);
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractMQTTSocket.java,61,doConsume(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,79,getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,850,if (store == null || (!context.isInTransaction() && !message.isPersistent())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,851,messageSent(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,635,List<MessageReference> rc = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,641,rc.addAll(pending.remove(context, destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,644,return rc;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,650,updateDestinationStats(rc, destination, dispatched);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,653,updateDestinationStats(rc, destination, dispatched);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,656,return rc;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,659,private void updateDestinationStats(List<MessageReference> rc, Destination destination, List<MessageReference> dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,667,rc.addAll(references);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,244,if (paramTypes.length != 0 && paramTypes[0].equals(String.class)) {
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,256,if (paramTypes.length != 0 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,161,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,163,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,165,if (outboundQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,167,if (outboundQueueConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,168,outboundQueueConnectionFactory = jndiOutboundTemplate
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,169,.lookup(outboundQueueConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,177,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,180,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,181,newConnection = outboundQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,182,.createQueueConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,184,newConnection = outboundQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,189,newConnection = (QueueConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,192,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,193,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,195,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,197,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,200,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,201,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,205,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,207,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,208,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,213,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,219,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,221,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,223,if (localQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,224,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,226,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,227,localQueueConnectionFactory = jndiLocalTemplate
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,228,.lookup(localConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,229,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,230,newConnection = localQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,231,.createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,233,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,236,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,239,newConnection = embeddedConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,242,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,243,newConnection = localQueueConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,244,createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,246,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,252,newConnection = (QueueConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,255,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,256,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,258,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,260,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,263,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,264,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,268,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,270,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,271,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,276,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,160,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,162,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,164,if (outboundTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,166,if (outboundTopicConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,167,outboundTopicConnectionFactory = jndiOutboundTemplate
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,168,.lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,176,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,179,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,180,newConnection = outboundTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,181,.createTopicConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,183,newConnection = outboundTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,188,newConnection = (TopicConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,191,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,192,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,194,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,196,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,199,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,200,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,204,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,206,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,207,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,212,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,218,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,220,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,222,if (localTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,223,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,225,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,226,localTopicConnectionFactory = jndiLocalTemplate
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,227,.lookup(localConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,228,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,229,newConnection = localTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,230,.createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,232,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,235,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,238,newConnection = embeddedConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,241,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,242,newConnection = localTopicConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,243,createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,245,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,251,newConnection = (TopicConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,254,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,255,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,257,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,259,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,262,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,263,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,267,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,269,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,270,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,275,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,674,addConsumerBrokerExchange(info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1516,private ConsumerBrokerExchange addConsumerBrokerExchange(ConsumerId id) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1521,TransportConnectionState state = lookupConnectionState(id);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1522,context = state.getContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1524,SessionState ss = state.getSessionState(id.getParentId());
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,49,import org.apache.activemq.transport.nio.SelectorManager;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,50,import org.apache.activemq.transport.nio.SelectorSelection;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,68,protected ServerSocket serverSocket;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,69,protected SelectorSelection selector;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,112,protected BlockingQueue<Socket> socketQueue = new LinkedBlockingQueue<Socket>();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,119,protected AtomicInteger currentTransportCount = new AtomicInteger();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,136,this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog, addr);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,137,configureServerSocket(this.serverSocket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,301,final ServerSocketChannel chan = serverSocket.getChannel();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,302,if (chan != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,304,chan.configureBlocking(false);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,305,selector = SelectorManager.getInstance().register(chan, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,307,public void onSelect(SelectorSelection sel) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,309,SocketChannel sc = chan.accept();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,322,onError(sel, e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,326,public void onError(SelectorSelection sel, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,327,Exception e = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,328,if (error instanceof Exception) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,329,e = (Exception)error;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,331,e = new Exception(error);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,333,if (!isStopping()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,334,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,336,LOG.warn("run()", e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,337,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,341,selector.setInterestOps(SelectionKey.OP_ACCEPT);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,342,selector.enable();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,344,selector = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,347,while (!isStopped()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,348,Socket socket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,349,try {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,350,socket = serverSocket.accept();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,351,if (socket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,352,if (isStopped() || getAcceptListener() == null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,353,socket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,355,if (useQueueForAccept) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,356,socketQueue.put(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,358,handleSocket(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,365,if (!isStopping()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,366,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,368,LOG.warn("run()", e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,369,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,460,if (selector != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,461,selector.disable();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,462,selector.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,463,selector = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,465,if (serverSocket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,466,serverSocket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,467,serverSocket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,469,super.doStop(stopper);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,128,private boolean resetNeeded;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,164,jms.setJMSMessageID(properties.getMessageId().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,183,props.setMessageId(msgId.getTextView());
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,26,import org.apache.activemq.transport.InactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,60,LOG.trace("Not created with a TextWireFormat: " + wireFormat);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,90,HttpClientTransport httpTransport = (HttpClientTransport)transport.narrow(HttpClientTransport.class);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,91,if(httpTransport != null && httpTransport.isTrace() ) {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,100,transport = new InactivityMonitor(transport, null /* ignore wire format as no negotiation over http */);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,83,((SessionHolder)pooledObject.getObject()).close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,361,try {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,362,if (isReconnectOnException()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,363,if (connection.getExceptionListener() != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,364,parentExceptionListener = connection.getExceptionListener();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,366,connection.setExceptionListener(this);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,368,if (parentExceptionListener != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,369,connection.setExceptionListener(parentExceptionListener);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,371,parentExceptionListener = null;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,374,LOG.warn("Cannot set reconnect exception listener", jmse);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,380,close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,125,return getConnection().getExceptionListener();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,135,getConnection().setExceptionListener(exceptionListener);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,106,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,107,LOG.trace("Created new connection: {}", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,119,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,120,LOG.trace("Destroying connection: {}", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,132,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,133,LOG.trace("Connection has expired: {} and will be destroyed", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,305,connectionsPool != null ? connectionsPool.getNumActive() : 0);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,43,import org.apache.activemq.command.ConsumerControl;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,115,private final TransportListener disposedListener = new DefaultTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,117,private final TransportListener myTransportListener = createTransportListener();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,184,TransportListener createTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,188,Command command = (Command) o;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,189,if (command == null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,190,return;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,192,if (command.isResponse()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,193,Object object = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,194,synchronized (requestMap) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,195,object = requestMap.remove(Integer.valueOf(((Response) command).getCorrelationId()));
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,197,if (object != null && object.getClass() == Tracked.class) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,198,((Tracked) object).onResponses(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,202,if (command.isConnectionControl()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,203,handleConnectionControl((ConnectionControl) command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,205,else if (command.isConsumerControl()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,206,ConsumerControl consumerControl = (ConsumerControl)command;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,207,if (consumerControl.isClose()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,208,stateTracker.processRemoveConsumer(consumerControl.getConsumerId(), RemoveInfo.LAST_DELIVERED_UNKNOWN);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,212,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,213,transportListener.onCommand(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,220,handleTransportFailure(error);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,223,transportListener.onException(new InterruptedIOException());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,229,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,230,transportListener.transportInterupted();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,236,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,237,transportListener.transportResumed();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,260,Transport transport = connectedTransport.getAndSet(null);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,261,if (transport != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,262,disposeTransport(transport);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,273,LOG.warn("Transport (" + connectedTransportURI + ") failed"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,274,+ (reconnectOk ? "," : ", not") + " attempting to automatically reconnect", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,351,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,352,LOG.debug("Started " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,377,LOG.debug("Stopped " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,411,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,412,LOG.trace("Stopped backup: " + transport);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,585,myTransportListener.onCommand(response);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,595,myTransportListener.onCommand(dispatch);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,611,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,612,LOG.trace("Waiting for transport to reconnect..: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,617,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,618,LOG.info("Failover timed out after " + (end - start) + "ms");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,626,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,627,LOG.debug("Interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,652,LOG.debug("Cannot track the command " + command, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,693,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,694,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,703,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,704,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,772,LOG.error("Failed to parse URI: " + u);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,816,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,817,LOG.debug("urlList connectionList:" + l + ", from: " + uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,861,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,862,LOG.trace("restore requestMap, replay: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,916,LOG.error("Failed to read updateURIsURL: " + fileURL, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,954,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,955,LOG.debug("Doing rebalance from: " + connectedTransportURI + " to " + connectList);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,964,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,965,LOG.debug("Caught an exception stopping existing transport for rebalance", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1026,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1027,LOG.debug("Attempting  " + connectFailures + "th  connect to: " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1029,transport.setTransportListener(myTransportListener);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1032,if (started &&  !firstConnection) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1036,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1037,LOG.debug("Connection established");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1061,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1062,LOG.debug("transport resumed by transport listener not set");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1068,LOG.info("Successfully connected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1070,LOG.info("Successfully reconnected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1076,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1077,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1084,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1085,LOG.debug("Stop of failed transport: " + transport +
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1101,LOG.error("Failed to connect to " + uris + " after: " + connectFailures + " attempt(s)");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1399,LOG.error("Failed to Lookup INetAddress for URI[ " + first + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1401,LOG.error("Failed to Lookup INetAddress for URI[ " + second + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1000,if (transport == null && !firstConnection && (reconnectDelay > 0) && !disposed) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1001,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1002,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1003,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1005,try {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1006,sleepMutex.wait(reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1008,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1136,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1137,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,38,ManagedRegionBroker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,39,String currentState = "Good";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,170,this.currentState = "Getting Worried {";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,172,currentState += hs + " , ";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,174,currentState += " }";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,176,this.currentState = "Good";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,273,journal = new Journal() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,275,protected void cleanup() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,276,super.cleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,277,txStoreCleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,280,journal.setDirectory(getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,281,journal.setMaxFileLength(journalMaxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,282,journal.setWriteBatchSize(journalWriteBatchSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,283,IOHelper.mkdirs(journal.getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,284,journal.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,285,recoverPendingLocalTransactions();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,286,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,307,journal.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,308,journal = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,858,LOG.debug("on close, rollback duplicate: {}", old.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,845,if (compressed) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,869,ByteSequence data = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,870,if (data == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,871,data = new ByteSequence(new byte[] {}, 0, 0);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,873,InputStream is = new ByteArrayInputStream(data);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,874,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,875,if (data.length != 0) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,876,is = new ByteArrayInputStream(decompress(data));
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,879,length = data.getLength();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,882,dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/Message.java,145,copy.content = content;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,146,copy.marshalledProperties = marshalledProperties;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,101,return new Iterator<MessageReference>() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,103,Iterator<MessageReference> redeliveries = redeliveredWaitingDispatch.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,104,Iterator<MessageReference> pendingDispatch = pagedInPendingDispatch.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,105,Iterator<MessageReference> current = redeliveries;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,109,public boolean hasNext() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,110,if (!redeliveries.hasNext() && (current == redeliveries)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,111,current = pendingDispatch;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,113,return current.hasNext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,117,public MessageReference next() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,118,return current.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,122,public void remove() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,123,current.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,319,return this.maxBrowsePageSize > 0 ? this.maxBrowsePageSize : getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1100,messagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1101,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1102,maxPageInAttempts += (messages.size() / getMaxPageSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1104,messagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1107,while (shouldPageInMoreForBrowse(max) && maxPageInAttempts-- > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1108,pageInMessages(!memoryUsage.isFull(110));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1217,doPageIn(true, false);  // signal no expiry processing needed.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1585,pageInMessages(hasBrowsers);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1840,doPageIn(force, true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1843,private void doPageIn(boolean force, boolean processExpired) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1844,PendingList newlyPaged = doPageInForDispatch(force, processExpired);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1862,private PendingList doPageInForDispatch(boolean force, boolean processExpired) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1866,int toPageIn = Math.min(getMaxPageSize(), messages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1875,LOG.debug("{} toPageIn: {}, Inflight: {}, pagedInMessages.size {}, pagedInPendingDispatch.size {}, enqueueCount: {}, dequeueCount: {}, memUsage:{}",
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1876,new Object[]{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1877,this,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1878,toPageIn,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1879,destinationStatistics.getInflight().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1880,pagedInMessages.size(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1881,pagedInPendingSize,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1882,destinationStatistics.getEnqueues().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1883,destinationStatistics.getDequeues().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1891,if (toPageIn > 0 && (force || (!consumers.isEmpty() && pagedInPendingSize < getMaxPageSize()))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1899,while (messages.hasNext() && count < toPageIn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2108,protected void pageInMessages(boolean force) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2109,doDispatch(doPageInForDispatch(force, true));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2127,boolean zeroPrefetch = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2131,zeroPrefetch |= s.getPrefetchSize() == 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2138,if (total == 0 && zeroPrefetch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2139,total = 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1051,Checksum checksum = new Adler32();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1055,for (PageWrite w : batch) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1056,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1066,writeFile.seek(toOffset(w.page.getPageId()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1067,writeFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1068,w.done();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1072,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1074,if (recoveryPageCount > recoveryFileMaxPageCount) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1075,int t = Math.max(recoveryFileMinPageCount, batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1076,recoveryFile.setLength(recoveryFileSizeForPages(t));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1080,recoveryFile.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1082,recoveryFile.writeLong(nextTxid.get());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1086,recoveryFile.writeLong(checksum.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1088,recoveryFile.writeInt(batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1093,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1094,recoveryFile.sync();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,780,if (isGcIfInactive()&& this.lastActiveTime != 0l) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,284,return safeGetBroker().getTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,289,return safeGetBroker().getQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,294,return safeGetBroker().getTemporaryTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,299,return safeGetBroker().getTemporaryQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,304,return safeGetBroker().getTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,309,return safeGetBroker().getDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,314,return safeGetBroker().getQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,319,return safeGetBroker().getTemporaryTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,324,return safeGetBroker().getTemporaryQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,329,return safeGetBroker().getInactiveDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,334,return safeGetBroker().getTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,339,return safeGetBroker().getQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,344,return safeGetBroker().getTemporaryTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,349,return safeGetBroker().getTemporaryQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,354,return safeGetBroker().getDynamicDestinationProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,24,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,26,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,414,private boolean isAllowedToRegister(ObjectName name) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,276,job.decrementRepeatCount();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,509,this.store.referenceRemovedLocation(tx, location, removed);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,593,this.store.referenceRemovedLocation(tx, location, job);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,400,boolean orphanedRemve = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,407,orphanedRemve = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,414,if (!orphanedRemve) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,415,LOG.trace("A remove in log {} has an add still in existance.", entry.getKey());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,168,redeliveredWaitingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,172,return !redeliveredWaitingDispatch.isEmpty();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,34,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,36,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,79,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,83,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,229,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,233,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,234,MessageDispatch md = (MessageDispatch)i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1392,LOG.warn("Non existent message update attempt rejected. Destination: {}://{}, Message id: {}", command.getDestination().getType(), command.getDestination().getName(), command.getMessageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1680,if (pendingAcks == null || pendingAcks.size() <= 1) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,53,this.i++;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,54,final Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + this.i);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,90,worker.release();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,62,return retainCounter.get()==0;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,72,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,73,while( (task= ioTasks.poll()) !=null ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,91,processIoTasks();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,93,int count = selector.select(10);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,101,Set keys = selector.selectedKeys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,103,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,104,final SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,107,final SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,109,if( key.isValid() ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,137,Set keys = selector.keys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,138,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,139,SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,140,SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,148,ignore.printStackTrace();
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,34,private BrokerSupport() {
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,51,public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,799,ActiveMQDestination deadLetterDestination = deadLetterStrategy.getDeadLetterQueueFor(message, subscription);
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,19,import org.apache.activemq.broker.region.*;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,23,import java.util.Set;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,27,public PolicyEntryProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,42,PolicyMap existingMap = plugin.getBrokerService().getDestinationPolicy();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,46,Set existingEntry = existingMap.get(updatedEntry.getDestination());
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,47,if (existingEntry.size() == 1) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,48,updatedEntry = fromDto(candidate, (PolicyEntry) existingEntry.iterator().next());
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,52,plugin.info("cannot modify policy matching multiple destinations: " + existingEntry + ", destination:" + updatedEntry.getDestination());
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,57,RegionBroker regionBroker = (RegionBroker) plugin.getBrokerService().getRegionBroker();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,58,for (Destination destination : regionBroker.getDestinations(updatedEntry.getDestination())) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,59,Destination target = destination;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,60,if (destination instanceof DestinationFilter) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,61,target = ((DestinationFilter)destination).getNext();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,63,if (target.getActiveMQDestination().isQueue()) {
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,64,updatedEntry.update((Queue) target);
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,66,updatedEntry.update((Topic) target);
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/PolicyEntryProcessor.java,68,plugin.debug("applied update to:" + target);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,645,getPersistenceAdapter().setUsageManager(getProducerSystemUsage());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,646,getPersistenceAdapter().setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,647,LOG.info("Using Persistence Adapter: {}", getPersistenceAdapter());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,651,getPersistenceAdapter().start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,809,stopper.stop(getManagementContext());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1201,if (persistenceAdapter == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,630,startException = e;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,679,startException = t;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,689,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,690,return;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,806,stopper.stop(persistenceAdapter);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,964,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1200,public PersistenceAdapter getPersistenceAdapter() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,3009,public Throwable getStartException() {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,112,public void unlock() {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,574,LOG.debug("{} detail: {}", message, cause);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,287,message.setRegionDestination(Queue.this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1724,metadata.ackMessageFileMap.remove(candidate);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1705,boolean result = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1706,boolean empty = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1708,File directory = getTmpDataDirectory();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1709,if (directory.exists() && directory.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1710,File[] files = directory.listFiles();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1711,if (files != null && files.length > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1712,empty = false;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1713,for (int i = 0; i < files.length; i++) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1714,File file = files[i];
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1715,if (!file.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1716,result &= file.delete();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1721,if (!empty) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1722,String str = result ? "Successfully deleted" : "Failed to delete";
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1723,LOG.info("{} temporary storage", str);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1730,this.tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1745,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1746,tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1748,RuntimeException exception = new RuntimeException("Failed to start provided temp data store: " + tempDataStore, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1749,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1750,throw exception;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,825,if (LOG.isInfoEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,826,LOG.info("Some journal files are missing: " + missingJournalFiles);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,842,missingPredicates.add(new BTreeVisitor.BetweenVisitor<Location, Long>(new Location(id, (int) seq.getFirst()), new Location(id, (int) seq.getLast() + 1)));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,876,throw new IOException("Detected missing/corrupt journal files. "+matches.size()+" messages affected.");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeVisitor.java,169,return first+" <= key < "+last;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,196,public void doStart() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,96,message.setRegionDestination(regionDestination);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,353,ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,355,if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,372,ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,374,if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,379,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,380,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,395,ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,397,if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,402,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,403,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,418,ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,420,if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,429,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,430,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,509,ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,511,if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,566,protected boolean isIncludeBodyForAdvisory(ActiveMQDestination activemqDestination) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,567,Destination destination = next.getDestinationMap(activemqDestination).get(activemqDestination);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,568,return (destination instanceof BaseDestination &&
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,569,((BaseDestination) destination).isIncludeBodyForAdvisory()) ? true : false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,473,message.setRegionDestination(this);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,67,resp.setAcceptedSubProtocol("mqtt");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,70,resp.setAcceptedSubProtocol("stomp");
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,634,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,723,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,724,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,731,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,737,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,738,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,663,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,668,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,669,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,19,import java.io.InterruptedIOException;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,38,import org.apache.activemq.command.Response;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,319,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,393,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,394,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,396,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,398,setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,404,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,405,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,407,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,409,setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,448,IntegerResponse response = (IntegerResponse)syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,509,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,548,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,604,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,702,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,741,private Response syncSendPacketWithInterruptionHandling(Command command) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,742,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,743,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,745,if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,746,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,747,Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,748,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,750,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,754,throw e;
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,42,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,43,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,44,LOG.debug("Operation interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,46,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,58,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,67,FutureResponse future = new FutureResponse(responseCallback);
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,125,dispose(error);
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,97,if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,101,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,102,throw new InterruptedIOException();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,133,public FailoverTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,160,public FanoutTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/util/ThreadPoolUtils.java,127,executorService.shutdownNow();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,764,sd.locationIndex.remove(tx, keys.location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,765,sd.messageIdIndex.remove(tx, keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,766,metadata.producerSequenceIdTracker.rollback(keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,767,undoCounter++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,768,decrementAndSubSizeToStoreStat(key, keys.location.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,53,boolean matches = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,54,MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,55,msgContext.setDestination(dest.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,56,msgContext.setMessageReference(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,57,List<Subscription> subs = dest.getConsumers();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,58,for (Subscription sub : subs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,59,if (sub.matches(message, msgContext)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,60,matches = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,61,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,64,if (matches == false) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,65,matches = tryMatchingCachedSubs(broker, dest, msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,67,return matches;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,142,return true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1400,md.setRollbackCause(e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,823,checkUsage(context, producerExchange, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,824,sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,825,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,826,message.getMessageId().setBrokerSequenceId(getDestinationSequenceId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,827,if (store != null && message.isPersistent()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,828,message.getMessageId().setFutureOrSequenceLong(null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,829,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,830,if (messages.isCacheEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,831,result = store.asyncAddQueueMessage(context, message, isOptimizeStorage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,832,result.addListener(new PendingMarshalUsageTracker(message));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,834,store.addMessage(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,836,if (isReduceMemoryFootprint()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,837,message.clearMarshalledState();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,842,resetNeeded = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,843,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,846,orderedCursorAdd(message, context);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,848,sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,863,private void orderedCursorAdd(Message message, ConnectionContext context) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,870,cursorAdd(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1794,final boolean cursorAdd(final Message msg) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,86,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,90,return addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,46,private LinkedList<MessageId> pendingCachedIds = new LinkedList<>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,202,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,206,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,207,return tryAddMessageLast(node, 0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,186,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,public synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,97,nonPersistent.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,100,public synchronized boolean addMessageLast(MessageReference node) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,443,LOG.info("socketQueue interuppted - stopping");
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,444,if (!isStopping()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractStompSocket.java,67,doConsume(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,63,protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,189,throw new IOException("Failed to move " + src + " to " + targetDirectory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,86,BrokerService brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,473,this.brokerService = brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,482,public BrokerService getBrokerService() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,483,return brokerService;
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractMQTTSocket.java,114,return new X509Certificate[0];
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractStompSocket.java,138,protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOSSLTransportFactory.java,41,TcpTransportServer result = new TcpTransportServer(this, location, serverSocketFactory) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,169,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,170,if (trace && peerCerts != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,171,LOG.debug("Peer Identity has been verified\n");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,173,return peerCerts;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,175,return null;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,77,usageLock.readLock().lock();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,85,inputBuffer = ByteBuffer.allocate(8 * 1024);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,89,NIOOutputStream outPutStream = new NIOOutputStream(channel, 16 * 1024);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,67,if (System.getProperty(getVmLockKey()) != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,68,throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,70,System.setProperty(getVmLockKey(), new Date().toString());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,89,System.setProperty(getVmLockKey(), new Date().toString());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,104,System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,126,System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,129,lock = null;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,100,if (!ENDED_XA_TRANSACTION_CONTEXTS.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,101,synchronized(ENDED_XA_TRANSACTION_CONTEXTS) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,102,for(List<TransactionContext> transactions : ENDED_XA_TRANSACTION_CONTEXTS.values()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,103,if (transactions.contains(this)) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,104,return true;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,452,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,453,if (l != null && !l.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,466,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,467,if (l != null && !l.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,468,for (TransactionContext ctx : l) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,469,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,470,ctx.afterRollback();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,472,LOG.debug("failed to firing afterRollback callbacks on prepare " +
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,512,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,513,if (l != null && !l.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,514,for (TransactionContext ctx : l) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,515,ctx.afterRollback();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,551,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,552,if (l != null && !l.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,553,for (TransactionContext ctx : l) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,554,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,555,ctx.afterCommit();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,557,LOG.debug("ignoring exception from after completion on ended transaction: {}", ignored, ignored);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,567,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,568,if (l != null && !l.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,569,for (TransactionContext ctx : l) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,570,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,571,ctx.afterRollback();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,573,LOG.debug("failed to firing afterRollback callbacks commit failure, txid: {}, context: {}", x, ctx, ignored);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,712,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.get(transactionId);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,716,l.add(this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,610,&& !Thread.currentThread().isInterrupted()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1095,indexLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1099,indexLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1322,long id = sd.orderIndex.getNextMessageId(priority);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1437,LOG.debug("no message sequence exists for id: " + command.getMessageId() + " and sub: " + command.getSubscriptionKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3151,long getNextMessageId(int priority) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,339,Map transactionMap = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,340,synchronized (xaTransactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,341,transactionMap = xid.isXATransaction() ? xaTransactions : context.getTransactions();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,343,Transaction transaction = (Transaction)transactionMap.get(xid);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,121,Handler handler = null;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,122,try {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,123,handler = (Handler)Class.forName("org.eclipse.jetty.server.handler.GzipHandler", true, Handler.class.getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,125,handler = (Handler)Class.forName("org.eclipse.jetty.servlets.gzip.GzipHandler", true, Handler.class.getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,22,import org.apache.activemq.transport.https.Krb5AndCertsSslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,119,return new Krb5AndCertsSslSocketConnector(factory, auth);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,121,try {
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,122,Class<?> cls = Class.forName("org.eclipse.jetty.server.ssl.SslSelectChannelConnector", true, Server.class.getClassLoader());
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,123,return (Connector)cls.getConstructor(SslContextFactory.class).newInstance(factory);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,125,Class<?> c = Class.forName("org.eclipse.jetty.server.ServerConnector", true, Server.class.getClassLoader());
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,126,Connector connector = (Connector)c.getConstructor(Server.class, SslContextFactory.class).newInstance(server, factory);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,127,Server.class.getMethod("setStopTimeout", Long.TYPE).invoke(server, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,128,connector.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(connector, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,129,return connector;
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,30,Connector connector = null;
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,32,try {
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,33,connector = (Connector)Class.forName("org.eclipse.jetty.server.nio.SelectChannelConnector", true, Server.class.getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,35,Class<?> c = Class.forName("org.eclipse.jetty.server.ServerConnector", true, Server.class.getClassLoader());
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,36,connector = (Connector)c.getConstructor(Server.class).newInstance(server);
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,37,Server.class.getMethod("setStopTimeout", Long.TYPE).invoke(server, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,38,connector.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(connector, 500);
activemq-http/src/main/java/org/apache/activemq/transport/SocketConnectorFactory.java,40,System.out.println(transportOptions);
activemq-http/src/main/java/org/apache/activemq/transport/WebTransportServerSupport.java,61,if (Server.getVersion().startsWith("8")) {
activemq-http/src/main/java/org/apache/activemq/transport/WebTransportServerSupport.java,62,connector.setServer(server);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,20,import java.net.ServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,21,import java.security.KeyManagementException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,22,import java.security.NoSuchAlgorithmException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,23,import java.security.NoSuchProviderException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,24,import java.security.Principal;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,25,import java.util.Collections;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,26,import java.util.List;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,27,import java.util.Random;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,28,import javax.net.ssl.SSLContext;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,29,import javax.net.ssl.SSLServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,30,import javax.net.ssl.SSLSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,32,import org.eclipse.jetty.http.HttpSchemes;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,33,import org.eclipse.jetty.io.EndPoint;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,34,import org.eclipse.jetty.server.Request;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,35,import org.eclipse.jetty.server.ssl.ServletSSL;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,36,import org.eclipse.jetty.server.ssl.SslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,37,import org.eclipse.jetty.util.ssl.SslContextFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,38,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,39,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,47,public class Krb5AndCertsSslSocketConnector extends SslSocketConnector {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,48,public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,49,static {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,50,System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,53,private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,55,private static final String REMOTE_PRINCIPAL = "remote_principal";
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,57,public enum MODE {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,58,KRB, CERTS, BOTH
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,61,private boolean useKrb;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,62,private boolean useCerts;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,64,public Krb5AndCertsSslSocketConnector() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,66,super();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,67,useKrb = false;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,68,useCerts = true;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,69,setPasswords();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,71,public Krb5AndCertsSslSocketConnector(SslContextFactory f, String auth) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,73,super(f);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,74,useKrb = false;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,75,useCerts = true;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,76,setPasswords();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,77,setMode(auth);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,80,public static boolean isKrb(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,81,return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,84,public void setMode(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,85,useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,86,useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,87,logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,92,private void setPasswords() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,93,if (!useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,94,Random r = new Random();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,95,System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,96,System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,101,public SslContextFactory getSslContextFactory() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,102,final SslContextFactory factory = super.getSslContextFactory();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,104,if (useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,105,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,108,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,109,SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,110,factory.getProvider());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,111,context.init(null, null, null);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,112,factory.setSslContext(context);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,118,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,129,protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,130,logIfDebug("Creating new KrbServerSocket for: " + host);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,131,SSLServerSocket ss = null;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,133,if (useCerts) // Get the server socket from the SSL super impl
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,134,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,135,else { // Create a default server socket
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,136,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,137,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,139,LOG.warn("Could not create KRB5 Listener", e);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,140,throw new IOException("Could not create KRB5 Listener: " + e.toString());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,145,if (useKrb) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,146,ss.setNeedClientAuth(true);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,147,String[] combined;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,148,if (useCerts) { // combine the cipher suites
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,149,String[] certs = ss.getEnabledCipherSuites();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,150,combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,151,System.arraycopy(certs, 0, combined, 0, certs.length);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,152,System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,154,combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,157,ss.setEnabledCipherSuites(combined);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,159,return ss;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,163,public void customize(EndPoint endpoint, Request request) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,164,if (useKrb) { // Add Kerberos-specific info
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,165,SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,166,Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,167,logIfDebug("Remote principal = " + remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,168,request.setScheme(HttpSchemes.HTTPS);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,169,request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,171,if (!useCerts) { // Add extra info that would have been added by
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,173,String cipherSuite = sslSocket.getSession().getCipherSuite();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,174,Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,175,;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,177,request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,178,request.setAttribute("javax.servlet.request.key_size", keySize);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,183,super.customize(endpoint, request);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,186,private void logIfDebug(String s) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,188,LOG.debug(s);
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,84,int port = getConnectorLocalPort();
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,101,if (Server.getVersion().startsWith("9")) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,102,return (Servlet)Class.forName("org.apache.activemq.transport.ws.jetty9.WSServlet", true,
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,103,getClass().getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,105,return (Servlet)Class.forName("org.apache.activemq.transport.ws.jetty8.WSServlet", true,
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,106,getClass().getClassLoader()).newInstance();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,17,package org.apache.activemq.transport.ws.jetty8;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,21,import org.apache.activemq.transport.ws.AbstractMQTTSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,22,import org.apache.activemq.util.ByteSequence;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,23,import org.apache.activemq.util.IOExceptionSupport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,24,import org.eclipse.jetty.websocket.WebSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,25,import org.fusesource.mqtt.codec.DISCONNECT;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,26,import org.fusesource.mqtt.codec.MQTTFrame;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,27,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,28,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,30,public class MQTTSocket extends AbstractMQTTSocket implements WebSocket.OnBinaryMessage {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,32,private static final Logger LOG = LoggerFactory.getLogger(MQTTSocket.class);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,34,private Connection outbound;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,36,public MQTTSocket(String remoteAddress) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,37,super(remoteAddress);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,41,public void sendToMQTT(MQTTFrame command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,42,ByteSequence bytes = wireFormat.marshal(command);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,43,outbound.sendMessage(bytes.getData(), 0, bytes.getLength());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,47,public void handleStopped() throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,48,if (outbound != null && outbound.isOpen()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,49,outbound.close();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,56,public void onOpen(Connection connection) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,57,this.outbound = connection;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,61,public void onMessage(byte[] bytes, int offset, int length) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,62,if (!transportStartedAtLeastOnce()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,63,LOG.debug("Waiting for MQTTSocket to be properly started...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,64,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,65,socketTransportStarted.await();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,67,LOG.warn("While waiting for MQTTSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,71,receiveCounter += length;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,73,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,74,MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,75,getProtocolConverter().onMQTTCommand(frame);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,77,onException(IOExceptionSupport.create(e));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,82,public void onClose(int closeCode, String message) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,83,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,84,getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/MQTTSocket.java,86,LOG.warn("Failed to close WebSocket", e);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,17,package org.apache.activemq.transport.ws.jetty8;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,21,import org.apache.activemq.transport.stomp.Stomp;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,22,import org.apache.activemq.transport.stomp.StompFrame;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,23,import org.apache.activemq.transport.ws.AbstractStompSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,24,import org.eclipse.jetty.websocket.WebSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,25,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,26,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,31,public class StompSocket extends AbstractStompSocket implements WebSocket.OnTextMessage {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,33,private static final Logger LOG = LoggerFactory.getLogger(StompSocket.class);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,35,private Connection outbound;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,37,public StompSocket(String remoteAddress) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,38,super(remoteAddress);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,42,public void handleStopped() throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,43,if (outbound != null && outbound.isOpen()) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,44,outbound.close();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,49,public void sendToStomp(StompFrame command) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,50,outbound.sendMessage(command.format());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,56,public void onOpen(Connection connection) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,57,this.outbound = connection;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,61,public void onClose(int closeCode, String message) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,62,try {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,63,protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,65,LOG.warn("Failed to close WebSocket", e);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,70,public void onMessage(String data) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/StompSocket.java,71,processStompFrame(data);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,17,package org.apache.activemq.transport.ws.jetty8;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,21,import javax.servlet.ServletException;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,22,import javax.servlet.http.HttpServletRequest;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,23,import javax.servlet.http.HttpServletResponse;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,25,import org.apache.activemq.transport.Transport;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,26,import org.apache.activemq.transport.TransportAcceptListener;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,27,import org.apache.activemq.transport.util.HttpTransportUtils;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,28,import org.eclipse.jetty.websocket.WebSocket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,29,import org.eclipse.jetty.websocket.WebSocketServlet;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,34,public class WSServlet extends WebSocketServlet {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,36,private static final long serialVersionUID = -4716657876092884139L;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,38,private TransportAcceptListener listener;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,41,public void init() throws ServletException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,42,super.init();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,43,listener = (TransportAcceptListener) getServletContext().getAttribute("acceptListener");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,44,if (listener == null) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,45,throw new ServletException("No such attribute 'acceptListener' available in the ServletContext");
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,50,protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,51,getServletContext().getNamedDispatcher("default").forward(request, response);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,55,public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,56,WebSocket socket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,58,if (protocol != null && protocol.startsWith("mqtt")) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,59,socket = new MQTTSocket(HttpTransportUtils.generateWsRemoteAddress(request));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,61,socket = new StompSocket(HttpTransportUtils.generateWsRemoteAddress(request));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,63,listener.onAccept((Transport) socket);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty8/WSServlet.java,64,return socket;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,65,if (req.getSubProtocols().contains("mqtt")) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,30,import org.apache.activemq.transport.tcp.SslTransportServer;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,92,boolean isSSL = false;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,93,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,94,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,95,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,96,isSSL = transportConnector.getServer().isSslServer();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,99,if (isSSL) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,113,boolean isSSL;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,114,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,115,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,116,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,117,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,119,isSSL = false;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,122,if (isSSL) {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,73,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,79,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,103,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,109,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,126,int nextMonth = getNext(month, currentMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,153,nextWeekDay = getNext(dayOfWeek, currentDayOfWeek);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,157,nextCalendarDay = getNext(dayOfMonth, currentDayOfMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,193,static int getNext(final CronEntry entry, final int current) throws MessageFormatException {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,212,result = entry.end + first - entry.start - current;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1406,BrokerSupport.resend(context, m.getMessage(), dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1407,removeMessage(context, m);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1408,messagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1410,messages.rollback(m.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1411,if (isDLQ()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1412,DeadLetterStrategy stratagy = getDeadLetterStrategy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1413,stratagy.rollback(m.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1416,messagesLock.writeLock().unlock();
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,117,broker.waitUntilStarted();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,78,public void marshal(Object command, DataOutput os) throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,79,StompFrame stomp = (org.apache.activemq.transport.stomp.StompFrame)command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,81,if (stomp.getAction().equals(Stomp.Commands.KEEPALIVE)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,82,os.write(Stomp.BREAK);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,83,return;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,86,StringBuilder buffer = new StringBuilder();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,101,os.write(buffer.toString().getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,215,HashMap<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,52,protected final LinkedHashMap<MessageId, MessageDispatch> dispatchedMessage = new LinkedHashMap<MessageId, MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,53,protected final LinkedList<MessageDispatch> unconsumedMessage = new LinkedList<MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,69,synchronized (this) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,70,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,186,dispatchedMessage.remove(msgId);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,32,public class MQTTSocket extends AbstractMQTTSocket implements WebSocketListener {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,69,MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,70,getProtocolConverter().onMQTTCommand(frame);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,48,private int maxAmqpFrameSize = NO_AMQP_MAX_FRAME_SIZE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormatFactory.java,29,private int maxAmqpFrameSize = AmqpWireFormat.NO_AMQP_MAX_FRAME_SIZE;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1576,gcCandidateSet.remove(lastUpdate.getDataFileId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1564,pageFile.flush();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2528,public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2529,SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2530,if (messageSequences != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2531,long result = messageSequences.rangeSize();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2533,return result > 0 ? result - 1 : 0;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,64,protected final ConcurrentMap<ConnectionId, ConnectionState> connectionStates = new ConcurrentHashMap<ConnectionId, ConnectionState>();
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,206,Vector<TransactionInfo> toRollback = new Vector<TransactionInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2536,List<TransportConnector> al = new ArrayList<TransportConnector>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1021,LOG.error("KahaDB failed to store to Journal", ioe);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,200,firstAsyncException = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,203,if (firstAsyncException != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,204,throw firstAsyncException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,277,final byte[] end = new byte[]{0};
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,389,logger.info("Journal failed while writing at: " + wb.offset);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,391,firstAsyncException = e;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,392,if (wb != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,393,wb.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,394,wb.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,396,if (nextWriteBatch != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,397,nextWriteBatch.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,398,nextWriteBatch.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,423,if (write.onComplete != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1533,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1535,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1536,checkpointUpdate(tx, cleanup);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1552,void checkpointUpdate(Transaction tx, boolean cleanup) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2202,protected ObjectName createNetworkConnectorObjectName(NetworkConnector connector) throws MalformedObjectNameException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2535,Set<ActiveMQDestination> durableDestinations = getBroker().getDurableDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2573,connector.setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2574,connector.setDurableDestinations(durableDestinations);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2575,if (getDefaultSocketURIString() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2576,connector.setBrokerURL(getDefaultSocketURIString());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2578,if (networkConnectorStartExecutor != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2579,networkConnectorStartExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2581,public void run() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2582,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2583,LOG.info("Async start of {}", connector);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2584,connector.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2586,LOG.error("Async start of network connector: {} failed", connector, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2591,connector.start();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/NetworkConnectorProcessor.java,24,import java.util.TreeMap;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/NetworkConnectorProcessor.java,39,nc.start();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,45,private ExecutorService executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,84,if (initDone.compareAndSet(false, true)) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,87,if (dedicatedTaskRunner || "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.UseDedicatedTaskRunner"))) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,88,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,90,executor = createDefaultExecutor();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,92,LOG.debug("Initialized TaskRunnerFactory[{}] using ExecutorService: {}", name, executor);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,104,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,106,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,117,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,119,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,130,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,132,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,197,return executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,201,this.executor = executor;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,181,IntrospectionSupport.setProperties(socket, transportOptions);
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,139,public static boolean setProperties(Object target, Map props) {
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,152,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,425,subscriptions.put(info.getConsumerId(), sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,299,boolean isActive = destinationStatistics.getConsumers().getCount() != 0 ||
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,300,destinationStatistics.getProducers().getCount() != 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,301,if (isActive && isGcWithNetworkConsumers() && destinationStatistics.getConsumers().getCount() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,193,super.removeSubscription(context, sub, lastDeliveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,195,consumers.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,269,if (sub.matches(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,270,throw new JMSException("Destination still has an active subscription: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,165,addSubscriptionsForDestination(context, dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,781,if ((System.currentTimeMillis() - this.lastActiveTime) >= getInactiveTimeoutBeforeGC()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1595,LOG.trace("gc candidates after producerSequenceIdTrackerLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1603,LOG.trace("gc candidates after ackMessageFileMapLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1614,LOG.trace("gc candidates after tx range:" + Arrays.asList(inProgressTxRange) + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,427,if (writeFile.length() < PAGE_FILE_HEADER_SIZE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,428,writeFile.setLength(PAGE_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,430,nextFreePageId.set((writeFile.length() - PAGE_FILE_HEADER_SIZE) / pageSize);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,237,getSubscriptionStatistics().getDispatched().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1215,long originalMessageCount = this.destinationStatistics.getMessages().getCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1216,do {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1218,pagedInMessagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1219,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1220,list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1222,pagedInMessagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1225,for (MessageReference ref : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1227,QueueMessageReference r = (QueueMessageReference) ref;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1228,removeMessage(c, r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1236,if (this.destinationStatistics.getMessages().getCount() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1237,LOG.warn("{} after purge of {} messages, message count stats report: {}", getActiveMQDestination().getQualifiedName(), originalMessageCount, this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1239,gc();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1240,this.destinationStatistics.getMessages().setCount(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1241,getMessages().clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,216,if (totalLength.get() > maxFileLength && lastAppendLocation.get().getOffset() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,217,totalLength.addAndGet(lastAppendLocation.get().getOffset() - maxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,134,protected transient Map<Integer, Set<Integer>> ackMessageFileMap = new HashMap<Integer, Set<Integer>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,140,destinations = new BTreeIndex<String, StoredDestination>(pageFile, is.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,291,metadata.destinations = new BTreeIndex<String, StoredDestination>(pageFile, tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,412,IOHelper.mkdirs(directory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,432,if( opened.compareAndSet(true, false)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,519,HashMap<KahaDestination, opCount> destinationOpCount = new HashMap<KahaDestination, opCount>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,562,ArrayList<TranInfo> infos = new ArrayList<TranInfo>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,648,Set<TransactionId> toRollback = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,649,Set<TransactionId> toDiscard = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,753,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,818,HashSet<Integer> missingJournalFiles = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,830,ArrayList<BTreeVisitor.Predicate<Location>> missingPredicates = new ArrayList<BTreeVisitor.Predicate<Location>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1309,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1446,referenceFileIds = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1568,final TreeSet<Integer> completeFileSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1569,final TreeSet<Integer> gcCandidateSet = new TreeSet<Integer>(completeFileSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1807,protected final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1917,final TreeMap<Long, Long> messageReferences = new TreeMap<Long, Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1918,final HashSet<String> subscriptionCache = new LinkedHashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1941,value.orderIndex.defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1942,value.locationIndex = new BTreeIndex<Location, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1943,value.messageIdIndex = new BTreeIndex<String, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1946,value.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1947,value.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1949,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1955,LinkedHashMap<String, SequenceSet> temp = new LinkedHashMap<String, SequenceSet>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1960,new BTreeIndex<Long, HashSet<String>>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1985,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1998,value.subLocations = new ListIndex<String, Location>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2004,value.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2013,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2014,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2020,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2025,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2108,rc.locationIndex = new BTreeIndex<Location, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2109,rc.messageIdIndex = new BTreeIndex<String, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2112,rc.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2113,rc.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2114,rc.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2115,rc.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2162,rc.subscriptionCursors = new HashMap<String, MessageOrderCursor>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2288,new ConcurrentHashMap<String, MessageStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2444,ArrayList<Long> unreferenced = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2462,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2510,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2547,private final LinkedHashMap<TransactionId, List<Operation>> inflightTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2549,protected final LinkedHashMap<TransactionId, List<Operation>> preparedTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2550,protected final Set<String> ackedAndPrepared = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2551,protected final Set<String> rolledBackAcks = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2996,final List<Long> pendingAdditions = new LinkedList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3022,defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3024,lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3025,highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3031,TreeSet<Long> orderedSet = new TreeSet<Long>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,824,if (e instanceof SecurityException) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,826,delayedStop(2000, "Failed with SecurityException: " + e.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,136,private boolean starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,137,private boolean pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,240,if (!stopping.get() && !pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,319,if (pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,337,if (!pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,972,if (pendingStop || stopping.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1030,starting = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1051,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1079,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1108,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1109,if (starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1320,public synchronized boolean isStarting() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1321,return starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1334,protected synchronized void setStarting(boolean starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1335,this.starting = starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1341,public synchronized boolean isPendingStop() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1342,return pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1345,protected synchronized void setPendingStop(boolean pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1346,this.pendingStop = pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,39,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,126,private final AtomicBoolean started = new AtomicBoolean();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,569,this.subscriptionRecoveryPolicy.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,570,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,571,memoryUsage.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,574,if (getExpireMessagesPeriod() > 0 && !AdvisorySupport.isAdvisoryTopic(getActiveMQDestination())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,575,scheduler.executePeriodically(expireMessagesTask, getExpireMessagesPeriod());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,581,if (taskRunner != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,582,taskRunner.shutdown();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,584,this.subscriptionRecoveryPolicy.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,585,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,586,memoryUsage.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,588,if (this.topicStore != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,589,this.topicStore.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,592,scheduler.cancel(expireMessagesTask);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,160,selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,162,public void onSelect(SelectorSelection selection) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,163,serviceRead();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,167,public void onError(SelectorSelection selection, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,168,if (error instanceof IOException) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,169,onException((IOException) error);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,171,onException(IOExceptionSupport.create(error));
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,127,contextHandler.setHandler(handler);
activemq-broker/src/main/java/org/apache/activemq/plugin/StatisticsBroker.java,123,statsMessage.setLong("averageMessageSize", (long) stats.getMessageSize().getAveragePerSecond());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,851,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,855,matches.add(value);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,866,for (Long sequenceId : matches) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,46,private static final int MAX_BATCH_SIZE = 32*1024*1024;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1333,private Runnable listener;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1354,this.listener = listener;
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,56,getServletContext().getNamedDispatcher("default").forward(request, response);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,23,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,279,if (ack.isStandardAck() || ack.isPoisonAck() || ack.isIndividualAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,280,if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,281,context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,284,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,292,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,313,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,314,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,317,prefetchExtension.addAndGet(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,318,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,319,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,334,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,335,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,340,throw new JMSException("Invalid acknowledgment: " + ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,437,prefetchExtension.get() - getSubscriptionStatistics().getDequeues().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,536,return getDispatchedQueueSize() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,549,return getDispatchedQueueSize() <= (info.getPrefetchSize() * .4);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,557,return getDispatchedQueueSize() >= (info.getPrefetchSize() * .9);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,57,private final TreeMap<Long, ScheduledTask> jobs = new TreeMap<Long, ScheduledTask>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,60,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,168,List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,182,final List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,197,final List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,226,startTime = (startTime / 1000) * 1000;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,371,private final Map<String, InMemoryJob> jobs = new TreeMap<String, InMemoryJob>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,386,return new ArrayList<InMemoryJob>(jobs.values());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,60,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,135,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,172,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,201,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,232,startTime = (startTime / 1000) * 1000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,332,values = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,410,target = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,567,List<Long> keys = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,657,List<JobLocation> references = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,704,List<JobLocation> list = new ArrayList<JobLocation>(first.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,705,List<JobLocation> toRemove = new ArrayList<JobLocation>(list.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,847,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,858,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), in.readLong());
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,45,session.getRemote().sendBytes(ByteBuffer.wrap(bytes.getData(), 0, bytes.getLength()));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,44,session.getRemote().sendString(command.format());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,216,if (!delivery.remotelySettled()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,217,sendToActiveMQ(message, new ResponseHandler() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,220,public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,221,if (response.isException()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,223,Rejected rejected = new Rejected();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,224,ErrorCondition condition = new ErrorCondition();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,227,rejected.setError(condition);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,228,delivery.disposition(rejected);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,231,LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,232,getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,235,if (remoteState != null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,236,TransactionalState txAccepted = new TransactionalState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,237,txAccepted.setOutcome(Accepted.getInstance());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,238,txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,240,delivery.disposition(txAccepted);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,242,delivery.disposition(Accepted.getInstance());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,246,delivery.settle();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,247,session.pumpProtonToSocket();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,252,LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,253,getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,254,session.pumpProtonToSocket();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,258,sendToActiveMQ(message);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,78,private boolean disposed;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,94,private boolean started;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,131,private boolean shuttingDown = false;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,133,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,134,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,211,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,212,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,156,public void clearMarshalledState() throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,221,md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,222,LOG.trace("onDelivery: Rejected state = {}, delivery count now {}", state, md.getRedeliveryCounter());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,223,settle(delivery, -1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,28,import javax.jms.Destination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,35,import javax.jms.Queue;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,37,import javax.jms.TemporaryQueue;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,38,import javax.jms.TemporaryTopic;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,40,import javax.jms.Topic;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,307,private static byte destinationType(Destination destination) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,308,if (destination instanceof Queue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,309,if (destination instanceof TemporaryQueue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,315,if (destination instanceof TemporaryTopic) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpAbstractReceiver.java,81,public void commit() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpAbstractReceiver.java,85,public void rollback() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpLink.java,65,void commit() throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpLink.java,73,void rollback() throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,78,private final LinkedList<MessageDispatch> dispatchedInTx = new LinkedList<MessageDispatch>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,205,txAccepted.setTxnId(((TransactionalState) state).getTxnId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,209,settle(delivery, MessageAck.DELIVERED_ACK_TYPE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,250,public void commit() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,252,for (MessageDispatch md : dispatchedInTx) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,253,MessageAck pendingTxAck = new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,254,pendingTxAck.setFirstMessageId(md.getMessage().getMessageId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,255,pendingTxAck.setTransactionId(md.getMessage().getTransactionId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,279,public void rollback() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,284,for (MessageDispatch dispatch : dispatchedInTx) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,285,dispatch.setRedeliveryCounter(dispatch.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,287,outbound.addFirst(dispatch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,449,DeliveryState remoteState = delivery.getRemoteState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,450,if (remoteState != null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,451,TransactionalState txState = (TransactionalState) remoteState;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,452,TransactionId txId = new LocalTransactionId(session.getConnection().getConnectionId(), toLong(txState.getTxnId()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,453,ack.setTransactionId(txId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,456,session.enlist(txId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,457,md.getMessage().setTransactionId(txId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,458,dispatchedInTx.addFirst(md);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,123,public void commit() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,125,consumer.commit();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,136,public void rollback() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,138,consumer.rollback();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,101,LOG.trace("started transaction {}", txId.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,113,LOG.trace("rollback transaction {}", txId.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,116,LOG.trace("commit transaction {}", txId.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,122,txSession.rollback();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,124,txSession.commit();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,19,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,24,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,34,return new AMQPRawInboundTransformer(getVendor());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,19,import java.nio.ByteBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,21,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,23,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,28,import org.apache.qpid.proton.codec.CompositeWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,29,import org.apache.qpid.proton.codec.DroppingWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,30,import org.apache.qpid.proton.codec.WritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,33,public class AMQPNativeOutboundTransformer extends OutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,36,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,40,public EncodedMessage transform(Message msg) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,41,if (msg == null || !(msg instanceof BytesMessage)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,42,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,45,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,46,if (!msg.getBooleanProperty(prefixVendor + "NATIVE")) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,47,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,53,return transform(this, (BytesMessage) msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,56,static EncodedMessage transform(OutboundTransformer options, BytesMessage msg) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,59,messageFormat = msg.getLongProperty(options.prefixVendor + "MESSAGE_FORMAT");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,63,byte data[] = new byte[(int) msg.getBodyLength()];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,64,int dataSize = data.length;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,65,msg.readBytes(data);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,66,msg.reset();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,68,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,69,int count = msg.getIntProperty("JMSXDeliveryCount");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,70,if (count > 1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,73,ProtonJMessage amqp = (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,74,int offset = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,75,int len = data.length;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,76,while (len > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,77,final int decoded = amqp.decode(data, offset, len);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,78,assert decoded > 0 : "Make progress decoding the message";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,79,offset += decoded;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,80,len -= decoded;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,86,if (amqp.getHeader() == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,87,amqp.setHeader(new Header());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,90,amqp.getHeader().setDeliveryCount(new UnsignedInteger(count - 1));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,93,ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,94,final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,95,int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,96,if (overflow.position() > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,97,buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,98,c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,100,data = buffer.array();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,101,dataSize = c;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,106,return new EncodedMessage(messageFormat, data, 0, dataSize);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,19,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,20,import javax.jms.DeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,23,public class AMQPRawInboundTransformer extends InboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,26,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,51,if (defaultTtl > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,17,package org.apache.activemq.transport.amqp.message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,19,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,20,import javax.jms.Destination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,21,import javax.jms.MapMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,22,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,23,import javax.jms.ObjectMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,24,import javax.jms.StreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,25,import javax.jms.TextMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,27,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,28,import org.apache.activemq.command.ActiveMQDestination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,29,import org.apache.activemq.command.ActiveMQMapMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,30,import org.apache.activemq.command.ActiveMQMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,31,import org.apache.activemq.command.ActiveMQObjectMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,32,import org.apache.activemq.command.ActiveMQStreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,33,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,37,final public static ActiveMQJMSVendor INSTANCE = new ActiveMQJMSVendor();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,39,private ActiveMQJMSVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,43,public BytesMessage createBytesMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,44,return new ActiveMQBytesMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,63,public ObjectMessage createObjectMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,64,return new ActiveMQObjectMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,68,public MapMessage createMapMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,69,return new ActiveMQMapMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,73,public Destination createDestination(String name) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,74,return ActiveMQDestination.createDestination(name, ActiveMQDestination.QUEUE_TYPE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,78,public void setJMSXUserID(Message msg, String value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,79,((ActiveMQMessage) msg).setUserID(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,83,public void setJMSXGroupID(Message msg, String value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,84,((ActiveMQMessage) msg).setGroupID(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,88,public void setJMSXGroupSequence(Message msg, int value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,89,((ActiveMQMessage) msg).setGroupSequence(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,93,public void setJMSXDeliveryCount(Message msg, long value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,94,((ActiveMQMessage) msg).setRedeliveryCounter((int) value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,98,public String toAddress(Destination dest) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,99,return ((ActiveMQDestination) dest).getQualifiedName();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,19,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,20,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,22,public class AutoOutboundTransformer extends JMSMappingOutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,24,private final JMSMappingOutboundTransformer transformer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,27,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,28,transformer = new JMSMappingOutboundTransformer(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,32,public EncodedMessage transform(Message msg) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,42,return transformer.transform(msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,22,import javax.jms.DeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,59,this.vendor = vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,68,public int getDefaultDeliveryMode() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,69,return defaultDeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,72,public void setDefaultDeliveryMode(int defaultDeliveryMode) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,73,this.defaultDeliveryMode = defaultDeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,76,public int getDefaultPriority() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,77,return defaultPriority;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,80,public void setDefaultPriority(int defaultPriority) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,81,this.defaultPriority = defaultPriority;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,84,public long getDefaultTtl() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,85,return defaultTtl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,88,public void setDefaultTtl(long defaultTtl) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,89,this.defaultTtl = defaultTtl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,92,public String getPrefixVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,93,return prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,96,public void setPrefixVendor(String prefixVendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,97,this.prefixVendor = prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,101,return vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,109,protected void populateMessage(Message jms, org.apache.qpid.proton.message.Message amqp) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,111,if (header == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,112,header = new Header();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,115,if (header.getDurable() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,116,jms.setJMSDeliveryMode(header.getDurable().booleanValue() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,118,jms.setJMSDeliveryMode(defaultDeliveryMode);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,120,if (header.getPriority() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,121,jms.setJMSPriority(header.getPriority().intValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,123,jms.setJMSPriority(defaultPriority);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,125,if (header.getFirstAcquirer() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,126,jms.setBooleanProperty(prefixVendor + "FirstAcquirer", header.getFirstAcquirer());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,128,if (header.getDeliveryCount() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,129,vendor.setJMSXDeliveryCount(jms, header.getDeliveryCount().longValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,136,if ("x-opt-jms-type".equals(key) && entry.getValue() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,138,jms.setJMSType(entry.getValue().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,141,setProperty(jms, prefixVendor + prefixMessageAnnotations + key, entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,148,String key = entry.getKey().toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,149,if ("JMSXGroupID".equals(key)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,150,vendor.setJMSXGroupID(jms, entry.getValue().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,152,vendor.setJMSXGroupSequence(jms, ((Number) entry.getValue()).intValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,154,vendor.setJMSXUserID(jms, entry.getValue().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,156,setProperty(jms, key, entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,168,vendor.setJMSXUserID(jms, new String(userId.getArray(), userId.getArrayOffset(), userId.getLength(), "UTF-8"));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,171,jms.setJMSDestination(vendor.createDestination(properties.getTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,174,jms.setJMSType(properties.getSubject());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,177,jms.setJMSReplyTo(vendor.createDestination(properties.getReplyTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,183,jms.setStringProperty(prefixVendor + "ContentType", properties.getContentType().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,186,jms.setStringProperty(prefixVendor + "ContentEncoding", properties.getContentEncoding().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,189,jms.setJMSTimestamp(properties.getCreationTime().getTime());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,192,vendor.setJMSXGroupID(jms, properties.getGroupId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,195,vendor.setJMSXGroupSequence(jms, properties.getGroupSequence().intValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,198,jms.setStringProperty(prefixVendor + "ReplyToGroupID", properties.getReplyToGroupId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,201,jms.setJMSExpiration(properties.getAbsoluteExpiryTime().getTime());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,206,if (jms.getJMSExpiration() == 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,208,long ttl = defaultTtl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,212,if (ttl == 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,213,jms.setJMSExpiration(0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,215,jms.setJMSExpiration(System.currentTimeMillis() + ttl);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,223,setProperty(jms, prefixVendor + prefixFooter + key, entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,28,import javax.jms.StreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,40,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,50,return new AMQPNativeInboundTransformer(getVendor());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,69,StreamMessage m = vendor.createStreamMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,89,StreamMessage m = vendor.createStreamMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,19,import java.io.UnsupportedEncodingException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,20,import java.nio.ByteBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,23,import java.util.Enumeration;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,26,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,27,import javax.jms.DeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,30,import javax.jms.MapMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,33,import javax.jms.MessageFormatException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,34,import javax.jms.ObjectMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,36,import javax.jms.StreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,58,import org.apache.qpid.proton.codec.CompositeWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,59,import org.apache.qpid.proton.codec.DroppingWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,60,import org.apache.qpid.proton.codec.WritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,61,import org.apache.qpid.proton.message.ProtonJMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,63,public class JMSMappingOutboundTransformer extends OutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,75,public static final Symbol LEGACY_JMS_DEST_TYPE_MSG_ANNOTATION = Symbol.valueOf("x-opt-to-type");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,76,public static final Symbol LEGACY_JMS_REPLY_TO_TYPE_MSG_ANNOTATION = Symbol.valueOf("x-opt-reply-type");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,78,public static final String LEGACY_QUEUE_TYPE = "queue";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,79,public static final String LEGACY_TOPIC_TYPE = "topic";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,80,public static final String LEGACY_TEMP_QUEUE_TYPE = "temporary,queue";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,81,public static final String LEGACY_TEMP_TOPIC_TYPE = "temporary,topic";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,84,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,88,public EncodedMessage transform(Message msg) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,89,if (msg == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,90,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,93,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,94,if (msg.getBooleanProperty(prefixVendor + "NATIVE")) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,95,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,100,ProtonJMessage amqp = convert(msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,102,long messageFormat;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,103,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,104,messageFormat = msg.getLongProperty(this.messageFormatKey);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,106,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,109,ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,110,final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,111,int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,112,if (overflow.position() > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,113,buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,114,c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,117,return new EncodedMessage(messageFormat, buffer.array(), 0, c);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,130,Header header = new Header();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,131,Properties props = new Properties();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,135,Section body = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,225,while (keys.hasMoreElements()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,226,String key = keys.nextElement();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,235,if (amqpDeliveryCount > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,236,header.setDeliveryCount(new UnsignedInteger(amqpDeliveryCount));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,240,props.setUserId(new Binary(value.getBytes("UTF-8")));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,243,props.setGroupId(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,244,if (apMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,247,apMap.put(key, value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,250,props.setGroupSequence(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,251,if (apMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,254,apMap.put(key, value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,256,if (daMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,257,daMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,259,String name = key.substring(prefixDeliveryAnnotationsKey.length());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,262,if (maMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,263,maMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,265,String name = key.substring(prefixMessageAnnotationsKey.length());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,274,if (footerMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,277,String name = key.substring(prefixFooterKey.length());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,280,if (apMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,287,MessageAnnotations ma = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,288,if (maMap != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,289,ma = new MessageAnnotations(maMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,291,DeliveryAnnotations da = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,293,da = new DeliveryAnnotations(daMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,295,ApplicationProperties ap = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,297,ap = new ApplicationProperties(apMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,299,Footer footer = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,301,footer = new Footer(footerMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,304,return (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create(header, da, ma, props, ap, body, footer);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,327,private static String destinationAttributes(Destination destination) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,328,if (destination instanceof Queue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,329,if (destination instanceof TemporaryQueue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,330,return LEGACY_TEMP_QUEUE_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,332,return LEGACY_QUEUE_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,335,if (destination instanceof TemporaryTopic) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,336,return LEGACY_TEMP_TOPIC_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,338,return LEGACY_TOPIC_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,342,throw new IllegalArgumentException("Unknown Destination Type passed to JMS Transformer.");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,19,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,21,public abstract class OutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,41,this.vendor = vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,42,this.setPrefixVendor("JMS_AMQP_");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,45,public abstract EncodedMessage transform(Message jms) throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,47,public String getPrefixVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,48,return prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,51,public void setPrefixVendor(String prefixVendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,52,this.prefixVendor = prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,54,messageFormatKey = prefixVendor + "MESSAGE_FORMAT";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,55,nativeKey = prefixVendor + "NATIVE";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,56,firstAcquirerKey = prefixVendor + "FirstAcquirer";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,57,prefixDeliveryAnnotationsKey = prefixVendor + prefixDeliveryAnnotations;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,58,prefixMessageAnnotationsKey = prefixVendor + prefixMessageAnnotations;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,62,prefixFooterKey = prefixVendor + prefixFooter;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,67,return vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,39,import org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,133,inboundTransformer = new JMSMappingInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,135,inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,137,inboundTransformer = new AMQPRawInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,140,inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,40,import org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,75,private final OutboundTransformer outboundTransformer = new AutoOutboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,79,private final String MESSAGE_FORMAT_KEY = outboundTransformer.getPrefixVendor() + "MESSAGE_FORMAT";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,393,if (!temp.getProperties().containsKey(MESSAGE_FORMAT_KEY)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,394,temp.setProperty(MESSAGE_FORMAT_KEY, 0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,165,ConsumerControl control = new ConsumerControl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,166,control.setConsumerId(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,167,control.setDestination(getDestination());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,168,control.setPrefetch(0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,183,ConsumerControl control = new ConsumerControl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,184,control.setConsumerId(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,185,control.setDestination(getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,691,LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getCurrentPrefetchSize()});
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,25,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,59,protected final AtomicInteger prefetchExtension = new AtomicInteger();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,435,for (Destination dest : destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,436,dest.wakeup();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,892,protected int getPrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,893,return this.prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,72,+ this.prefetchExtension + ", pending=" + getPendingQueueSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,67,private final AtomicInteger prefetchExtension = new AtomicInteger(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,719,+ getDequeueCounter() + ", matched=" + matched() + ", discarded=" + discarded();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,487,protected Region getRegion(ActiveMQDestination destination) throws JMSException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/plist/PListStoreImpl.java,276,this.directory = new File(IOHelper.getDefaultDataDirectory() + File.pathSeparator + "delayedDB");
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,147,longFirstIndex = (int) (index - (index % BitArray.LONG_SIZE));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,214,private boolean hasDurableSubChanged(SubscriptionInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,369,private boolean hasDurableSubChanged(ConsumerInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,46,public class MemoryPersistenceAdapter implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,64,public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore, TransactionIdTransformerAware {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,88,public class KahaDBStore extends MessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,72,public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, BrokerServiceAware {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,53,public boolean equals(Object o) {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,54,ConversionKey x = (ConversionKey)o;
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,55,return x.from == from && x.to == to;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,145,return;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,150,if (!done) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,151,queued = true;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,154,if (queued) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,155,executor.execute(runable);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1939,LOG.warn("{}, duplicate message {} paged in, is cursor audit disabled? Removing from store and redirecting to dlq", this, ref.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1942,store.removeMessage(connectionContext, new MessageAck(ref.getMessage(), MessageAck.POSION_ACK_TYPE, 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1943,broker.getRoot().sendToDeadLetterQueue(connectionContext, ref.getMessage(), null, new Throwable("duplicate paged in from store for " + destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,118,if (message.getMessageId().getEntryLocator() instanceof Long) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,161,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,162,if (trace && peerCerts != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,163,LOG.debug("Peer Identity has been verified\n");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,165,return peerCerts;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,167,return null;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,21,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,33,import org.apache.activemq.store.AbstractMessageStore;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,95,if( removed !=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,110,for (Iterator<Message> iter = messageTable.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,140,int count = 0;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,141,for (Iterator iter = messageTable.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,142,Map.Entry entry = (Entry)iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,144,count++;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,146,lastBatchId = (MessageId)entry.getKey();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,148,listener.recoverMessageReference((MessageId)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,150,listener.recoverMessage((Message)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,190,for (Iterator<Message> iter = messageTable.values().iterator(); iter
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,191,.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,192,Message msg = iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,193,size += msg.getSize();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,179,return (MemoryMessageStore)value;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,182,MessageStore delegate = ((ProxyMessageStore)value).getDelegate();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,213,public File getDirectory(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,222,public long size(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,56,public MemoryTopicMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable, Map<SubscriptionKey, SubscriptionInfo> subscriberDatabase) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,76,for (Iterator<MemoryTopicSub> i = topicSubMap.values().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,77,MemoryTopicSub sub = i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,83,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,84,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,100,MemoryTopicSub sub = new MemoryTopicSub();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,103,for (Iterator i = messageTable.entrySet().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,104,Map.Entry entry = (Entry)i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,105,sub.addMessage((MessageId)entry.getKey(), (Message)entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,113,org.apache.activemq.util.SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,173,public MemoryTopicMessageStoreLRUCache(int initialCapacity, int maximumCacheSize,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,174,float loadFactor, boolean accessOrder) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,178,public void setMessageStoreStatistics(
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,179,MessageStoreStatistics messageStoreStatistics) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,34,private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,38,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,46,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,52,if( removed!=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,137,this.persistenceAdapter=persistenceAdapter;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,216,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,217,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,218,MemoryTransactionStore.this.acknowledge((TopicMessageStore)getDelegate(), clientId,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,219,subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,260,public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,305,listener.recover((XATransactionId)txid, tx.getMessages(), tx.getAcks());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,388,public void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,389,final MessageId messageId, final MessageAck ack) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,274,Message msg = (Message) wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,275,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,276,return listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,280,return listener.recoverMessageReference(new MessageId(reference));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,705,KahaProducerAuditCommand audit = (KahaProducerAuditCommand) load(metadata.producerSequenceIdTrackerLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,727,KahaAckMessageFileMapCommand audit = (KahaAckMessageFileMapCommand) load(metadata.ackMessageFileMapLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessor.java,95,throw new IOException("Invalid location: " + location + ", : " + e, e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1140,JournalCommand<?> command = load(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1141,KahaAddMessageCommand addMessage = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1142,switch (command.type()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1143,case KAHA_UPDATE_MESSAGE_COMMAND:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1144,addMessage = ((KahaUpdateMessageCommand)command).getMessage();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1145,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1146,default:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1147,addMessage = (KahaAddMessageCommand) command;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1149,Message msg = (Message) wireFormat.unmarshal(new DataInputStream(addMessage.getMessage().newInput()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1150,return msg;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,235,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,239,((Destination)node.getRegionDestination()).getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,240,broker.messageExpired(getContext(), node, this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,629,if (LOG.isInfoEnabled() && redoCounter % 100000 == 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,630,LOG.info("@" + recoveryPosition +  ", "  + redoCounter + " entries recovered ..");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,42,private boolean used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,57,used = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,71,public synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,72,used = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,76,return used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,97,synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,98,for (Pool pool : pools.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,99,pool.clearUsedMark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,103,synchronized void disposeUnused() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,507,protected synchronized void cleanup() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,738,boolean expired = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,739,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,740,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,742,Message message = messageReference.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,743,synchronized (message) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,744,expired = stampAsExpired(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,747,LOG.warn("unexpected exception on message expiry determination for: {}", messageReference, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,750,return expired;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,501,if (broker.isExpired(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,502,getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,503,broker.messageExpired(context, message, null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,471,if (broker.isExpired(reference)) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,20,import java.sql.Connection;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,21,import java.sql.PreparedStatement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,22,import java.sql.SQLException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,23,import java.sql.Statement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,25,import java.util.List;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,152,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,73,protected ReadWriteLock cleanupExclusiveLock = new ReentrantReadWriteLock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,87,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,88,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,143,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,165,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,177,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,196,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,206,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,217,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,231,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,260,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,272,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,283,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,293,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,313,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,324,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,336,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,346,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,357,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,367,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,377,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,389,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,413,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,425,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,444,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,455,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,472,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,482,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,509,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,521,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,549,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,569,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,580,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,592,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,613,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,625,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,649,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,661,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,686,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,698,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,713,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,733,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,770,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,780,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,799,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,810,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,828,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,838,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,848,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,857,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,865,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,874,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,877,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatementWithPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,884,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,895,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,909,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,935,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,943,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1020,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1035,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1044,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1076,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1084,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1093,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1105,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1114,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1126,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1168,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1179,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1190,cleanupExclusiveLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,149,result.setDurableDestinations(dest);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,151,return result;
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,154,protected Transport createLocalTransport() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,155,return TransportFactory.connect(localURI);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,596,Thread.sleep(policy.getNextDelay(attempt));
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,630,while ((maxRetries == INFINITE || maxRetries > ++attempt) && !connectionService.isShutdown());
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,237,nextDelay = nextDelay * (long)(attempt * backOffMultiplier);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,320,if (ack.getFirstMessageId() == null
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,321,|| ack.getFirstMessageId().equals(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,325,if (node.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,326,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,327,Destination regionDestination = nodeDest;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,328,regionDestination.messageExpired(context, this, node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,330,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,331,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,91,sendToActiveMQ(new RemoveInfo(getProducerId()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,94,super.close();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,125,session.unregisterSender(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,128,super.detach();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,138,if (consumerInfo.isDurable()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,139,RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,140,rsi.setConnectionId(session.getConnection().getConnectionId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,141,rsi.setSubscriptionName(getEndpoint().getName());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,142,rsi.setClientId(session.getConnection().getClientId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,147,session.unregisterSender(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,150,super.close();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,111,getEndpoint().setContext(null);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,112,getEndpoint().close();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,113,getEndpoint().free();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,115,connection.sendToActiveMQ(new RemoveInfo(getSessionId()));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,49,import static javax.xml.bind.DatatypeConverter.parseBase64Binary;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,50,import static javax.xml.bind.DatatypeConverter.printBase64Binary;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,85,public void doCreateTables(TransactionContext c) throws SQLException, IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,86,Statement s = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,94,boolean alreadyExists = false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,95,ResultSet rs = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,97,rs = c.getConnection().getMetaData().getTables(null, null, this.statements.getFullMessageTableName(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,98,new String[] { "TABLE" });
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,99,alreadyExists = rs.next();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,102,close(rs);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,104,s = c.getConnection().createStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,105,String[] createStatments = this.statements.getCreateSchemaStatements();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,106,for (int i = 0; i < createStatments.length; i++) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,109,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,110,LOG.debug("Executing SQL: " + createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,111,s.execute(createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,113,if (alreadyExists) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,114,LOG.debug("Could not create JDBC tables; The message table already existed." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,116,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,118,LOG.warn("Could not create JDBC tables; they could already exist." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,120,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,121,JDBCPersistenceAdapter.log("Failure details: ", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,127,if(!c.getConnection().getAutoCommit()){
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,128,c.getConnection().commit();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,133,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,134,s.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,161,if(!c.getConnection().getAutoCommit()){
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,162,c.getConnection().commit();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,174,final BrokerService brokerService = this.broker.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,226,BrokerService bService = connector.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,227,if (bService.isShutdownOnSlaveFailure()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,228,if (brokerInfo != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,229,if (brokerInfo.isSlaveBroker()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,230,LOG.error("Slave has exception: {} shutting down master now.", e.getMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,231,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,232,doStop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,233,bService.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,235,LOG.warn("Failed to stop the master", ex);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1393,MBeanNetworkListener listener = new MBeanNetworkListener(broker.getBrokerService(), config, broker.getBrokerService().createDuplexNetworkConnectorObjectName(duplexName));
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1396,duplexBridge.setBrokerService(broker.getBrokerService());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1486,result.setLastStoredSequenceId(broker.getBrokerService().getPersistenceAdapter().getLastProducerSequenceId(id));
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,106,XAException xae = new XAException("Prepare cannot be called now.");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,107,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,187,XAException xae = new XAException("PRE COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,188,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,202,XAException xae = new XAException("POST COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,203,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,173,public static XAException newXAException(String s, int errorCode) {
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,174,XAException xaException = new XAException(s + " " + TransactionContext.xaErrorCodeMarker + errorCode);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,175,xaException.errorCode = errorCode;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,176,return xaException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,406,void done() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,407,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,408,browser.decrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,410,LOG.warn("decrement ref on browser: " + browser, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1581,boolean hasBrowsers = browserDispatches.size() > 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1594,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1609,LOG.debug("dispatch to browser: {}, already dispatched/paged count: {}", browser, alreadyDispatchedMessages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1611,for (MessageReference node : alreadyDispatchedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1889,toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,353,&& !ni.getDisplayName().startsWith("vnic")) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,351,if (ia.getAddress() instanceof java.net.Inet4Address
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1720,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1730,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1760,if (!reference.isDropped()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1761,reference.drop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1762,destinationStatistics.getMessages().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,25,import org.apache.activemq.broker.region.QueueMessageReference;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,552,for (MessageReference ref : unAckedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,574,if (!qmr.isDropped()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,575,dispatchPendingList.addMessageForRedelivery(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueDispatchPendingList.java,167,public void addMessageForRedelivery(QueueMessageReference qmr) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,36,private boolean copyMessage = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,41,return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isCopyMessage(), isConcurrentSend());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,88,return copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,97,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,45,private boolean copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,48,public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean copyMessage, boolean concurrentSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,52,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,116,Message forwarded_message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,117,if (copyMessage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,118,forwarded_message = message.copy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,119,forwarded_message.setDestination(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,121,else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,122,forwarded_message = message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,127,regionBroker.send(context, forwarded_message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,715,for (Destination dest :destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,716,dest.slowConsumer(context, this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,22,import javax.jms.*;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,25,import org.apache.activemq.command.*;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,35,private ActiveMQMessageTransformation() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,48,ActiveMQDestination activeMQDestination = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,50,if (destination != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,51,if (destination instanceof ActiveMQDestination) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,52,return (ActiveMQDestination)destination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,55,if (destination instanceof TemporaryQueue) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,56,activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,58,activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,60,activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,62,activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,67,return activeMQDestination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,149,BlobMessage blobMessage = (BlobMessage)message;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,150,ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,151,msg.setConnection(connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,153,msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,155,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,156,msg.setURL(blobMessage.getURL());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,160,activeMessage = msg;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,187,return new ActiveMQTopic(VIRTUALTOPIC_PREFIX + topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTVirtualTopicSubscriptionStrategy.java,189,return new ActiveMQTopic(topicName);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,279,this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,54,private long reconnectDelay = initialReconnectDelay;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,145,LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: "+event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,150,LOG.warn("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled for: " + event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,154,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,155,try {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,156,if (!running.get()) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,157,LOG.debug("Reconnecting disabled: stopped");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,158,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,161,LOG.debug("Waiting "+event.reconnectDelay+" ms before attempting to reconnect.");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,162,sleepMutex.wait(event.reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,164,LOG.debug("Reconnecting disabled: " + ie);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,165,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,166,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,170,if (!useExponentialBackOff) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,175,if (!AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,193,FileInputStream fis = new FileInputStream(persistFile);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,194,try {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,204,fis.close();
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,134,if (!AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,67,public CompositeType getCompositeType() throws OpenDataException {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,101,return this.connector.isUpdateClusterClientsOnRemove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,34,import org.apache.activemq.store.PListStore;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,42,import org.apache.activemq.util.ByteSequence;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,398,expireOldMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,414,protected synchronized void expireOldMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,420,discardExpiredMessage(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,430,if (LOG.isTraceEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,432,LOG.trace("{}, flushToDisk() mem list size: {} {}", new Object[]{ name, memoryList.size(), (systemUsage != null ? systemUsage.getMemoryUsage() : "") });
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,389,UNSUBACK ack = new UNSUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,390,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,391,sendToMQTT(ack.encode());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,632,LOG.info("Usage Manager Memory Limit ({}) reached on {}, size {}. Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it. See http://activemq.apache.org/producer-flow-control.html for more info.",
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,633,memoryUsage.getLimit(), getActiveMQDestination().getQualifiedName(), destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,50,protected boolean hadSpace = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,387,if (this.batchList.isEmpty() && this.size >0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,41,private final Broker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,47,public QueueStorePrefetch(Queue queue, Broker broker) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,50,this.broker = broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,107,hadSpace = this.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,108,if (!broker.getBrokerService().isPersistent() || hadSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,109,this.store.recoverNextMessages(this.maxBatchSize, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,110,dealWithDuplicates(); // without the index lock
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,50,this.persistent = new QueueStorePrefetch(queue, broker);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,43,private boolean storeHasMessages = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,59,this.storeHasMessages=this.size > 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,73,public final synchronized boolean addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,74,this.storeHasMessages = super.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,75,return this.storeHasMessages;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,89,storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,123,this.storeHasMessages = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,126,if (!this.storeHasMessages && (!this.batchList.isEmpty() || !hadSpace)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,127,this.storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,146,return "TopicStorePrefetch(" + clientId + "," + subscriberName + ",storeHasMessages=" + this.storeHasMessages +") " + this.subscription.getConsumerInfo().getConsumerId() + " - " + super.toString();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,340,public boolean recoverMessage(long sequenceId, byte[] data) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,341,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,342,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,343,msg.getMessageId().setFutureOrSequenceLong(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,344,listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,345,trackLastRecovered(sequenceId, msg.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,346,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,349,public boolean recoverMessageReference(String reference) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,350,if (listener.hasSpace()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,351,listener.recoverMessageReference(new MessageId(reference));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,352,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,354,return false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,40,import org.apache.activemq.store.jdbc.JDBCMessageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,636,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,642,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,673,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,679,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1147,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1156,while (rs.next() && count < maxReturned) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,577,if (counter >= maxReturned) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,128,if (info != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,129,return info.isDispatchAsync();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1016,String str = brokerName.replaceAll("[^a-zA-Z0-9\\.\\_\\-\\:]", "_");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1018,LOG.error("Broker Name: {} contained illegal characters - replaced with {}", brokerName, str);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1572,vmConnectorURI = new URI("vm://" + getBrokerName().replaceAll("[^a-zA-Z0-9\\.\\_\\-]", "_"));
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,132,activeEvents.remove(uri);
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,141,activeEvents.remove(uri);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,282,LOG.warn("Exception occurred processing: \n" + command + ": " + exception.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,976,LOG.debug("Stomp Connect heartbeat conf RW[" + hbReadInterval + "," + hbWriteInterval + "]");
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,991,LOG.warn("Could not send a receipt for " + command, e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,269,throw new ProtocolException("Unknown STOMP action: " + action);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,169,private boolean hasWildcards(String selector) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,170,return selector.contains("%") || selector.contains("_");
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,91,if (escape == (0xFFFF & c)) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,93,if (i >= like.length()) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,95,break;
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,102,regexp.append(".*?"); // Do a non-greedy match
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,104,regexp.append("."); // match one
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,106,regexp.append("\\x");
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,107,regexp.append(Integer.toHexString(0xFFFF & c));
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,109,regexp.append(c);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1592,ArrayList<MessageReference> alreadyDispatchedMessages = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1595,alreadyDispatchedMessages = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,152,Iterator<MessageReference> iterator = iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,145,List<MessageReference> messageReferences = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,146,for (PendingNode pendingNode : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,147,messageReferences.add(pendingNode.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,149,return messageReferences;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,633,TransactionInfo info = new TransactionInfo(getConnectionId(), null, TransactionInfo.RECOVER);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,634,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,635,this.connection.checkClosedOrFailed();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,636,this.connection.ensureConnectionInfoSent();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,638,DataArrayResponse receipt = (DataArrayResponse)this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,639,DataStructure[] data = receipt.getData();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,640,XATransactionId[] answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,641,if (data instanceof XATransactionId[]) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,642,answer = (XATransactionId[])data;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,644,answer = new XATransactionId[data.length];
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,645,System.arraycopy(data, 0, answer, 0, data.length);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,647,LOG.debug("recover({})={}", flag, answer);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,648,return answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,650,throw toXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,physicalConnection.cleanup();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,769,xae.errorCode = original.errorCode;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,770,if (xae.errorCode == XA_OK) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,774,xae.initCause(original);
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractMQTTSocket.java,128,protocolConverter = new MQTTProtocolConverter(this, brokerService);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,585,LOG.error("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,586,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,589,LOG.warn("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,590,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,362,LOG.error("Failed to create TopicSubscription ", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,250,long seq = ack.getLastMessageId().getFutureOrSequenceLong() != null ?
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,47,protected void initializeStreams() throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,48,codec = new StompCodec(this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,49,super.initializeStreams();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,50,if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,51,serviceRead();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,785,getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getFutureOrSequenceLong(), null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,240,connection = connectionsPool.borrowObject(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,241,synchronized (connection) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,242,if (connection.getConnection() != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,243,connection.incrementReferenceCount();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,244,break;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,248,connectionsPool.returnObject(key, connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,249,connection = null;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,251,if( !targetScores.isEmpty() ) {
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,253,int bestScore=0;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,255,if( entry.getValue().value > bestScore ) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,910,public void setObjectProperty(String name, Object value) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,911,initializeWriting();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,912,super.setObjectProperty(name, value);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,499,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,510,public int getMaxAuditDepth() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,209,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,226,public int getMaxAuditDepth() {
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,22,private long maxSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,23,private long minSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,97,public synchronized long getMinSize() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,125,private Marshaller<Key> keyMarshaller;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,395,public synchronized void setKeyMarshaller(Marshaller<Key> marshaller) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,136,PreparedStatement statement = connection.prepareStatement(getStatements().getCurrentDateTime());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,137,ResultSet resultSet = statement.executeQuery();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,138,long result = 0l;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,139,if (resultSet.next()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,140,Timestamp timestamp = resultSet.getTimestamp(1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,141,long diff = System.currentTimeMillis() - timestamp.getTime();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,142,if (Math.abs(diff) > maxAllowableDiffFromDBTime) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,144,result = (-diff);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,146,LOG.info(getLeaseHolderId() + " diff adjust from db: " + result + ", db time: " + timestamp);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,148,return result;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,398,class BrowserDispatch {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,399,QueueBrowserSubscription browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,401,public BrowserDispatch(QueueBrowserSubscription browserSubscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,402,browser = browserSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,403,browser.incrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,414,public QueueBrowserSubscription getBrowser() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,415,return browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,419,ConcurrentLinkedQueue<BrowserDispatch> browserDispatches = new ConcurrentLinkedQueue<BrowserDispatch>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,468,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,469,browserDispatches.add(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,580,browserDispatches.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1600,Iterator<BrowserDispatch> browsers = browserDispatches.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1602,BrowserDispatch browserDispatch = browsers.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1607,QueueBrowserSubscription browser = browserDispatch.getBrowser();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1623,browserDispatches.remove(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1626,LOG.warn("exception on dispatch to browser: {}", browserDispatch.getBrowser(), e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,27,import javax.jms.Destination;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,519,destination = activeMQDestinationMap.get(command.topicName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,263,LOG.info("Loaded the Bouncy Castle security provider.");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,128,String clientId = activationSpec.getClientId();
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,95,factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,71,public static final int MAX_CLIENT_TIMEOUT = 30000;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,97,public boolean waitForSpace(long timeout) throws InterruptedException {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,109,while (percentUsage >= 100 ) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,110,waitForSpaceCondition.await(timeout, TimeUnit.MILLISECONDS);
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,112,usageLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,60,final Set<TransactionId> recoveredPendingCommit = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,317,recoveredPendingCommit.addAll(inflightTransactions.keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,318,LOG.info("pending local transactions: " + recoveredPendingCommit);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,374,if (recoveredPendingCommit.contains(txid)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,314,process(load(location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,333,public void process(JournalCommand<?> command) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,337,getTx(TransactionIdConversion.convert(prepareCommand.getTransactionInfo()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,321,if (name.endsWith(".data") || name.endsWith(".redo") || name.endsWith(".log")) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,119,private final IdGenerator ACK_ID_GENERATOR = new IdGenerator();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,133,private static class AckEntry {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,135,private final String messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,136,private final StompSubscription subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,138,public AckEntry(String messageId, StompSubscription subscription) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,139,this.messageId = messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,140,this.subscription = subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,143,public MessageAck onMessageAck(TransactionId transactionId) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,144,return subscription.onStompMessageAck(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,147,public MessageAck onMessageNack(TransactionId transactionId) throws ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,148,return subscription.onStompMessageNack(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,151,public String getMessageId() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,152,return this.messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,156,public StompSubscription getSubscription() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,157,return this.subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,375,AckEntry pendingAck = this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,377,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,431,AckEntry pendingAck = this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,433,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,514,pedingAcks.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,545,pedingAcks.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,607,stompSubscription = new StompSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,609,stompSubscription = new StompQueueBrowserSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,866,String ackId = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,867,if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO && md.getMessage() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,868,AckEntry pendingAck = new AckEntry(md.getMessage().getMessageId().toString(), sub);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,869,ackId = this.ACK_ID_GENERATOR.generateId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,870,this.pedingAcks.put(ackId, pendingAck);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,872,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,873,sub.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,875,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,876,this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,30,public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,31,super(stompTransport, subscriptionId, consumerInfo, transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,35,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,38,super.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,24,import java.util.Map.Entry;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,59,public StompSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,66,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,74,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,103,protocolConverter.getStompTransport().sendToStomp(command);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,107,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,113,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,117,if (unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,123,ack = new MessageAck(unconsumedMessage.getLast(), MessageAck.STANDARD_ACK_TYPE, unconsumedMessage.size());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,124,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,if (!dispatchedMessage.containsKey(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,145,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,152,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,155,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,156,MessageId id = (MessageId)entry.getKey();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,157,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,160,if (!unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,161,unconsumedMessage.add(msg);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,165,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,169,if (id.equals(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,170,ack.setLastMessageId(id);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,183,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,205,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,208,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,656,protected List<JobLocation> getAllScheduledJobs(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,659,for (Iterator<Map.Entry<Long, List<JobLocation>>> i = this.index.iterator(tx); i.hasNext();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,660,Map.Entry<Long, List<JobLocation>> entry = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,661,List<JobLocation> scheduled = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,662,for (JobLocation job : scheduled) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,663,references.add(job);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,667,return references;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,825,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,826,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,853,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,854,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,936,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,937,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,908,sd.orderIndex.setBatch(tx, cursorPos);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,946,sd.orderIndex.setBatch(tx, pos);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1028,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1029,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1031,if (taskRunnerFactory != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1032,taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1033,+ getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1035,taskRunner = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1037,transport.start();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1038,active = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1039,BrokerInfo info = connector.getBrokerInfo().copy();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1040,if (connector.isUpdateClusterClients()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1041,info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1043,info.setPeerBrokerInfos(null);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1045,dispatchAsync(info);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1047,connector.onStarted(this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1052,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1057,setStarting(false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1058,if (isPendingStop()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1059,LOG.debug("Calling the delayed stop() after start() {}", this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1060,stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1078,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1080,transportException.set(cause);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1107,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1110,LOG.debug("stopAsync() called in the middle of start(). Delaying till start completes..");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1111,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,81,onException(new InactivityIOException("Channel was inactive for too (>" + (readKeepAliveTime + readGraceTime) + ") long: "
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1560,metadata.ackMessageFileMapLocation = checkpointAckMessageFileMap();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2180,Iterator<Entry<String, SequenceSet>> subscriptions = rc.ackPositions.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2181,while (subscriptions.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2182,Entry<String, SequenceSet> subscription = subscriptions.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2183,SequenceSet pendingAcks = subscription.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2184,if (pendingAcks != null && !pendingAcks.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2185,Long lastPendingAck = pendingAcks.getTail().getLast();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2186,for (Long sequenceId : pendingAcks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2187,Long current = rc.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2188,if (current == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2189,current = new Long(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2194,if (!sequenceId.equals(lastPendingAck)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2195,current = current.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2197,current = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2200,rc.messageReferences.put(sequenceId, current);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2222,if (!rc.messageReferences.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2223,Long nextMessageId = (Long) rc.messageReferences.keySet().toArray()[rc.messageReferences.size() - 1];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2224,rc.orderIndex.nextMessageId =
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2225,Math.max(rc.orderIndex.nextMessageId, nextMessageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2380,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2381,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2382,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2384,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2385,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2400,for (Long ackPosition : allOutstanding) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2401,Long count = sd.messageReferences.get(ackPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2406,if (count != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2407,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2408,sd.messageReferences.put(ackPosition, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2426,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2427,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2428,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2430,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2431,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2432,sd.messageReferences.put(messageSequence + 1, Long.valueOf(0L));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2447,Long references = sd.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2448,if (references != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2449,references = references.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2451,if (references.longValue() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2452,sd.messageReferences.put(sequenceId, references);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2454,sd.messageReferences.remove(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2455,unreferenced.add(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2498,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2499,if (count != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2500,long references = count.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2501,if (references > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2502,sd.messageReferences.put(messageSequence, Long.valueOf(references));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2503,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2505,sd.messageReferences.remove(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,463,metaData.setCleanShutdown(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,414,freeList = new SequenceSet();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,415,for (Iterator<Page> i = tx().iterator(true); i.hasNext(); ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,416,Page page = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,417,if (page.getType() == Page.PAGE_FREE_TYPE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,418,freeList.add(page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1285,List<Operation> tx = inflightTransactions.remove(key);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,283,destinationMap.removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,298,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,53,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,215,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,258,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,299,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,830,ConnectionContext answer = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,472,ConnectionContext context = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,85,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1070,MessageEvaluationContext messageEvalContext = new MessageEvaluationContext();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,57,long messageFormat;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,58,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,61,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,191,maMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,201,maMap = new HashMap<Symbol, Object>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,&& messages.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,20,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,21,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,215,double value = flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,52,String SUBSCRIBE = "SUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,53,String UNSUBSCRIBE = "UNSUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,110,private final ConcurrentMap<Integer, ResponseHandler> resposeHandlers = new ConcurrentHashMap<Integer, ResponseHandler>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,111,private final ConcurrentMap<ConsumerId, StompSubscription> subscriptionsByConsumerId = new ConcurrentHashMap<ConsumerId, StompSubscription>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,112,private final ConcurrentMap<String, StompSubscription> subscriptions = new ConcurrentHashMap<String, StompSubscription>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,113,private final ConcurrentMap<String, ActiveMQDestination> tempDestinations = new ConcurrentHashMap<String, ActiveMQDestination>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,114,private final ConcurrentMap<String, String> tempDestinationAmqToStompMap = new ConcurrentHashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,115,private final Map<String, LocalTransactionId> transactions = new ConcurrentHashMap<String, LocalTransactionId>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,118,private final ConcurrentMap<String, AckEntry> pedingAcks = new ConcurrentHashMap<String, AckEntry>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,293,HashMap<String, String> headers = new HashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,795,HashMap<String, String> responseHeaders = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,223,getInternalScheduler().schedule(msg.getMessageId().toString(),
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,224,new ByteSequence(packet.data, packet.offset, packet.length), cronEntry, delay, period, repeat);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,385,if (md.getDestination().isTopic()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,386,synchronized (md.getMessage()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,387,temp = (ActiveMQMessage) md.getMessage().copy();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,390,temp = (ActiveMQMessage) md.getMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,118,public final ConcurrentMap<ActiveMQTempDestination, ActiveMQTempDestination> activeTempDestinations = new ConcurrentHashMap<ActiveMQTempDestination, ActiveMQTempDestination>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,171,private final CopyOnWriteArrayList<ActiveMQSession> sessions = new CopyOnWriteArrayList<ActiveMQSession>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,172,private final CopyOnWriteArrayList<ActiveMQConnectionConsumer> connectionConsumers = new CopyOnWriteArrayList<ActiveMQConnectionConsumer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,173,private final CopyOnWriteArrayList<TransportListener> transportListeners = new CopyOnWriteArrayList<TransportListener>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,176,private final ConcurrentMap<ConsumerId, ActiveMQDispatcher> dispatchers = new ConcurrentHashMap<ConsumerId, ActiveMQDispatcher>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,177,private final ConcurrentMap<ProducerId, ActiveMQMessageProducer> producers = new ConcurrentHashMap<ProducerId, ActiveMQMessageProducer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,822,Map<String, String> options = new HashMap<String, String>(info.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1241,Map<String, String> options = new HashMap<String, String>(consumerInfo.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1344,if(exception!=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1348,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1359,forceCloseOnSecurityException(exception);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1361,if (jmsEx !=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1393,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1403,forceCloseOnSecurityException(er.getException());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1405,if (jmsEx !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,262,getSubscriptionStatistics().getInflightMessageSize().addSize(node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,400,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,401,boolean inAckRange = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,404,MessageId messageId = node.getMessageId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,405,if (ack.getFirstMessageId() == null
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,406,|| ack.getFirstMessageId().equals(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,407,inAckRange = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,409,if (inAckRange) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,410,removeList.add(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,411,if (ack.getLastMessageId().equals(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,412,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,418,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,419,getSubscriptionStatistics().getInflightMessageSize().addSize(-node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,649,getSubscriptionStatistics().getInflightMessageSize().addSize(node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,79,protected final List<MessageReference> dispatched = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,261,dispatched.add(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,402,List<MessageReference> removeList = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,403,for (final MessageReference node : dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,417,for (final MessageReference node : removeList) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,648,dispatched.add(node);
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,42,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,191,nonPersistent.addMessageLast(node);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,205,Set set = get(destination);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,818,RemoveSubscriptionInfo info = ((RemoveSubscriptionInfo) data);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,819,SubscriptionInfo subscriptionInfo = new SubscriptionInfo(info.getClientId(), info.getSubscriptionName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,823,if (removed) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,455,localClientId = configuration.getName() + "_" + remoteBrokerName + "_inbound_" + configuration.getBrokerName();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,483,duplexLocalConnectionInfo.setClientId(configuration.getName() + "_" + remoteBrokerName + "_inbound_duplex_"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,484,+ configuration.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,552,remoteConnectionInfo.setClientId(configuration.getName() + "_" + configuration.getBrokerName() + "_outbound");
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,75,ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,93,import org.apache.activemq.transport.tcp.SslTransport;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1185,sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,60,if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,87,return ds.isStaticallyIncluded() || !ds.getRemoteInfo().isNetworkSubscription();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,937,localBroker.oneway(sub.getLocalInfo().createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,75,if (subName != null && subName.equals(candidateSubName)) {
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,77,sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,78,sub.setStaticallyIncluded(true);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,79,addSubscription(sub);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,80,break;
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,106,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,269,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,270,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,271,int newExtension = Math.max(currentExtension, currentExtension + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,272,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,273,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,294,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,295,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,296,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,297,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,298,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,336,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,337,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,338,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,339,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,340,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,406,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,407,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,408,int newExtension = Math.max(0, currentExtension - (index + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,409,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,410,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,451,public void beforeEnd() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,453,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,454,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,455,int newExtension = Math.max(0, currentExtension - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,456,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,457,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,467,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,479,synchronized(dispatchLock) {
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,28,public class MessagePull extends BaseCommand {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,47,e.printStackTrace();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQStreamMessage.java,746,return rc;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2673,private Journal createJournal() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,149,location.setLatch(batch.latch);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,176,WriteBatch batch = enqueue(write);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,178,location.setLatch(batch.latch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,251,rescheduleAt = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,253,throw new InactivityIOException("Channel was inactive for to long");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,817,if (nextIdleCheck > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,90,private final AtomicBoolean connectorStarting = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,144,connectorStarting.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,153,connectorStarting.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,201,if (!connectorStarting.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,329,return connectorStarting.get() || (connectorServer != null && connectorServer.isActive());
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,53,if (ignoreAllErrors) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,94,lockable.getBrokerService().handleIOException(IOExceptionSupport.create(e));
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,68,SecurityContext s = authenticate(info.getUserName(), info.getPassword(), null);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,69,context.setSecurityContext(s);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,70,securityContexts.add(s);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,75,super.addConnection(context, info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,624,if (getBrokerService().isStarted()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,626,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,627,String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,628,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,630,String url = getBrokerService().getVmConnectorURI().toString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,633,if (context.getConnector() instanceof TransportConnector
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,634,&& ((TransportConnector) context.getConnector()).getPublishableConnectString() != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,635,url = ((TransportConnector) context.getConnector()).getPublishableConnectString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,637,url = getBrokerService().getDefaultSocketURIString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,639,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,642,advisoryMessage.setDataStructure(command);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,643,advisoryMessage.setPersistent(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,644,advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,645,advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,646,advisoryMessage.setTargetConsumerId(targetConsumerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,647,advisoryMessage.setDestination(topic);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,648,advisoryMessage.setResponseRequired(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,649,advisoryMessage.setProducerId(advisoryProducerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,650,boolean originalFlowControl = context.isProducerFlowControl();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,651,final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,652,producerExchange.setConnectionContext(context);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,653,producerExchange.setMutable(true);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,654,producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,655,try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,656,context.setProducerFlowControl(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,657,next.send(producerExchange, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,659,context.setProducerFlowControl(originalFlowControl);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,if (!unconsumedMessage.isEmpty()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,349,ActiveMQConnection connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,350,connection.start();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,485,if (context == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1323,this.future.setException(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1339,public void setException(final Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1440,this.future.setException(e);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,59,public void purge() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,666,LOG.error("expired waiting for space..");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,71,public int removeMatchingMessages(String selector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,75,public int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,103,public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,109,public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,115,public int retryMessages() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1050,throw new IOException("Could not load journal record. Invalid location: "+location);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,205,if (!isCacheEnabled() && size==0 && isStarted() && useCache) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,206,if (LOG.isTraceEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,207,LOG.trace("{} - enabling cache for empty store {} {}", this, node.getMessageId(), node.getMessageId().getFutureOrSequenceLong());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,209,setCacheEnabled(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,236,if (lastCachedIds[SYNC_ADD] == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,238,for (ListIterator<MessageId> it = pendingCachedIds.listIterator(pendingCachedIds.size()); it.hasPrevious(); ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,239,MessageId lastPending = it.previous();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,240,Object futureOrLong = lastPending.getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,241,if (futureOrLong instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,242,Future future = (Future) futureOrLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,243,if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,244,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,246,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,247,future.get(5, TimeUnit.SECONDS);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,248,setLastCachedId(ASYNC_ADD, lastPending);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,250,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,252,LOG.debug("{} timed out waiting for async add", this, potentialDeadlock);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,LOG.debug("{} exception waiting for async add", this, worstCaseWeReplay);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,259,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,261,if (lastCachedIds[ASYNC_ADD] != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,if (isAsync(currentAdd) || Long.compare(((Long) currentAdd.getMessageId().getFutureOrSequenceLong()), ((Long) lastCachedIds[ASYNC_ADD].getFutureOrSequenceLong())) > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,264,setBatch(lastCachedIds[ASYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,268,setBatch(lastCachedIds[SYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,463,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,464,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,488,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,489,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1992,if (!closing.get() && !closed.get()) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,49,connection.connect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,50,connection.disconnect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,69,throw new IOException("PUT was not successful: " + connection.getResponseCode() + " "
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,270,tl.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,51,if (!sub.getActiveMQDestination().isPattern() || sub.getActiveMQDestination().equals(next.getActiveMQDestination())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,54,if (noSubs && !getConsumers().isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,56,final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,57,final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,59,final ActiveMQDestination newDestination = sub.getActiveMQDestination();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,60,final BaseDestination regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,62,for (Destination virtualDest : virtualDests) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,63,if (virtualDest.getActiveMQDestination().isTopic() &&
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,64,(virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,66,Topic topic = (Topic) getBaseDestination(virtualDest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,67,if (topic != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,69,final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,72,for (Message message : messages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,73,final Message copy = message.copy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,74,copy.setOriginalDestination(message.getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,75,copy.setDestination(newDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,76,copy.setRegionDestination(regionDest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,77,sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2548,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2550,map.put("async", "false");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2551,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2572,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1383,Transport localTransport = NetworkBridgeFactory.createLocalTransport(broker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,185,duplexInboundLocalBroker = NetworkBridgeFactory.createLocalTransport(brokerService.getBroker());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,727,MessageAck ack = new MessageAck(message, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,729,remoteBroker.oneway(ack);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,914,localBroker.request(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,916,localBroker.oneway(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,61,public static Transport createLocalTransport(Broker broker) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,62,URI uri = broker.getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,64,map.put("async", "true");
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,690,addConsumerInfo((ConsumerInfo) command);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,771,synchronized (brokerService.getVmConnectorURI()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,912,if (isDuplex()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1208,&& !configuration.isSuppressDuplicateTopicSubscriptions()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,69,protected boolean warnOnProducerFlowControl = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,682,long nextWarn = start;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,690,long now = System.currentTimeMillis();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,691,if (now >= nextWarn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,692,getLog().info("{}: {} (blocking for: {}s)", new Object[]{ usage, warning, new Long(((now - start) / 1000))});
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,693,nextWarn = now + blockedProducerWarningInterval;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,630,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,631,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,353,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,354,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected boolean usePrefetchExtension = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,267,if (usePrefetchExtension && getPrefetchSize() != 0 && ack.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,292,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,334,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,452,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,884,public boolean isUsePrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,885,return usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,888,public void setUsePrefetchExtension(boolean usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,889,this.usePrefetchExtension = usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,682,while (pending.hasNext() && !isFull() && count < numberToDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,107,if (message.isRecievedByDFBridge()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,152,return systemUsage != null ? (!systemUsage.getMemoryUsage().isFull(memoryUsageHighWaterMark)) : true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,180,private final List<TransportConnector> transportConnectors = new CopyOnWriteArrayList<TransportConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,181,private final List<NetworkConnector> networkConnectors = new CopyOnWriteArrayList<NetworkConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,182,private final List<ProxyConnector> proxyConnectors = new CopyOnWriteArrayList<ProxyConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,183,private final List<JmsConnector> jmsConnectors = new CopyOnWriteArrayList<JmsConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,184,private final List<Service> services = new ArrayList<Service>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,220,private final List<Runnable> shutdownHooks = new ArrayList<Runnable>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,608,LOG.error("Failed to start Apache ActiveMQ ({}, {})", new Object[]{ getBrokerName(), brokerId }, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1325,Map<String, String> answer = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1446,return new ArrayList<TransportConnector>(transportConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1481,return new ArrayList<NetworkConnector>(networkConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1485,return new ArrayList<ProxyConnector>(proxyConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2322,List<DestinationInterceptor> answer = new ArrayList<DestinationInterceptor>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2549,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2672,Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,104,transport.doConsume(new StompFrameError(new ProtocolException("The maximum data length was exceeded", true)));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,108,transport.doConsume(new StompFrameError(new ProtocolException("The maximum frame size was exceeded", true)));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import java.util.HashSet;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,35,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,253,MessageAvailableConsumer consumer, long deadline) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,304,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,305,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,306,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,308,if (isXmlContent(message)) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,309,response.setContentType(defaultContentType);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,311,response.setContentType("text/plain");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,398,for (Enumeration names = message.getPropertyNames(); names.hasMoreElements();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,679,return "KahaDBPersistenceAdapter[" + path + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,151,private String nameFromDestinationFilter(ActiveMQDestination destination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,400,File defaultDir = MessageDatabase.DEFAULT_DIRECTORY;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,505,posionAck(md, "dispatch to " + getConsumerId() + " exceeds redelivery policy limit:" + redeliveryPolicy);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1248,ack.setPoisonCause(new Throwable("Exceeded redelivery policy limit:" + redeliveryPolicy
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1385,posionAck(md, "dispatch to " + getConsumerId() + " exceeds redelivery policy limit:" + redeliveryPolicy);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,238,if (PreallocationStrategy.OS_KERNEL_COPY == preallocationStrategy) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,239,doPreallocationKernelCopy(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,242,doPreallocationZeros(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,245,doPreallocationSparseFile(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,262,ByteBuffer buffer = ByteBuffer.allocate(maxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,270,channel.write(buffer);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,187,if (!brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,188,Response response = service(command);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,189,if (response != null && !brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,190,dispatchSync(response);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,193,throw new BrokerStoppedException("Broker " + brokerService + " is being stopped");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,340,response = new ExceptionResponse(transportException.get());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,433,Collection<TransactionState> transactions = cs.getTransactionStates();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,434,for (TransactionState transaction : transactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,435,rc++;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,67,private static int defaultJmxPort = 1099;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,140,int id = getNextId();
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,186,return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection:" + id);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,40,log.debug("SENDING REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,45,log.debug("GOT RESPONSE: "+response);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,50,log.debug("SENDING ASNYC REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,55,log.debug("SENDING: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,60,log.debug("RECEIVED: " + command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,65,log.debug("RECEIVED Exception: "+error, error);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,284,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,289,templateRaf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,303,RandomAccessFile templateFile = new RandomAccessFile(tmpFile, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,304,templateFile.setLength(size);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,305,templateFile.getChannel().force(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,306,templateFile.getChannel().transferTo(0, size, raf.getChannel());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,307,templateFile.close();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,93,synchronized (transactionStore) {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,94,transactionStore.rollback(getTransactionId());
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,96,try {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,97,fireAfterRollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,99,LOG.warn("POST ROLLBACK FAILED: ", e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,100,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,101,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,102,xae.initCause(e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,103,throw xae;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1052,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1053,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1057,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1058,checksum.update(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1060,throw IOExceptionSupport.create("Cannot create recovery file. Reason: " + t, t);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1062,recoveryFile.writeLong(w.page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1063,recoveryFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1071,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,38,private HashMap<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,218,public void setPortMapping(HashMap<Integer, Integer> portMapping) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/IntrospectionSupport.java,97,if (boolean.class.isAssignableFrom(to) && value instanceof String) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,67,private ConcurrentMap<String, Set<String>> subSelectorCache = new ConcurrentHashMap<String, Set<String>>();
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,270,if (subSelectorCache.containsKey(destinationName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,271,return new HashSet<String>(subSelectorCache.get(destinationName));
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,286,if (subSelectorCache.containsKey(destinationName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,287,Set<String> cachedSelectors = subSelectorCache.get(destinationName);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,288,return cachedSelectors.remove(selector);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,291,return false;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,295,if (subSelectorCache.containsKey(destinationName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,296,Set<String> cachedSelectors = subSelectorCache.get(destinationName);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,240,public Set<String> getSelector(final String destination) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,241,return subSelectorCache.get(destination);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,259,return "ServerSessionImpl:" + serverSessionId + "{" + session +"}";
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,765,private XAException toXAException(JMSException e) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,784,private int parseFromMessageOr(String message, int fallbackCode) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,738,private void checkReadOnlyProperties() throws MessageNotWriteableException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,312,Location location = journal.getNextLocation(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,313,while (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,315,location = journal.getNextLocation(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,373,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,375,LOG.info("delivering pending commit outcome for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,376,broker.commitTransaction(null, txid, false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,379,LOG.info("delivering rollback outcome to store for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,380,broker.forgetTransaction(null, txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,382,persistCompletion(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,384,LOG.error("failed to deliver pending outcome for tid: " + txid, ex);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,334,Sequence sequence = new Sequence(location.getOffset(), nextOffset - 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,358,dataFile.setLength((int) dataFile.corruptedBlocks.removeLastSequence().getFirst());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,889,final ActiveMQMessage message = (ActiveMQMessage)md.getMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,753,this.transactionContext = null;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,80,protected ByteSequence marshalledProperties;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,276,((JDBCPersistenceAdapter)persistenceAdapter).rollbackLastAck(context, priority, jdbcTopicMessageStore.getDestination(), subName, clientId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1068,String subName = rs.getString(3);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1069,String subId = rs.getString(4);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,540,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,545,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,567,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,570,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,589,protected int recoverRolledBackAcks(StoredDestination sd, Transaction tx, int maxReturned, MessageRecoveryListener listener) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,604,LOG.info("rolledback ack message {} with seq {} will be picked up in future batch {}", id, sequence, sd.orderIndex.cursor);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,909,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,913,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,953,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,957,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1312,StoredDestination sd = getStoredDestination(command.getDestination(), tx);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,67,public boolean removeMessage(String messageId) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,79,public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,85,public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,91,public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,97,public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1301,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1368,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1460,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1489,set.addAll(pagedInMessages.values());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,126,private PreviouslyDeliveredMap<MessageId, Boolean> previouslyDeliveredMessages;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,146,private boolean clearDeliveredList;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,762,inProgressClearRequiredFlag.decrementAndGet();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,769,clearDeliveredList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1133,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1134,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1161,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1162,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1165,previouslyDeliveredMessages.transactionId, entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1237,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1268,if (nonBlockingRedelivery) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1269,if (!unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1271,final LinkedList<MessageDispatch> pendingRedeliveries =
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1272,new LinkedList<MessageDispatch>(deliveredMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1274,Collections.reverse(pendingRedeliveries);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1276,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1277,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1285,for(MessageDispatch dispatch : pendingRedeliveries) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1297,unconsumedMessages.stop();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1299,for (MessageDispatch md : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1300,unconsumedMessages.enqueueFirst(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1303,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1304,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1306,if (redeliveryDelay > 0 && !unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1308,session.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1312,if (started.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1313,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1321,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1327,if (messageListener.get() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1328,session.redispatch(this, unconsumedMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1339,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1340,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1341,LOG.trace("rollback non redelivered: {}" + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1342,removeFromDeliveredMessages(entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1382,if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1409,if (!unconsumedMessages.isRunning()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1411,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1452,if (previouslyDeliveredMessages.containsKey(md.getMessage().getMessageId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1454,previouslyDeliveredMessages.put(md.getMessage().getMessageId(), true);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1483,if (previouslyDeliveredMessages == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1484,previouslyDeliveredMessages = new PreviouslyDeliveredMap<MessageId, Boolean>(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1486,for (MessageDispatch delivered : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1487,previouslyDeliveredMessages.put(delivered.getMessage().getMessageId(), false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1489,LOG.debug("{} tracking existing transacted {} delivered list ({}) on transport interrupt",
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1490,getConsumerId(), previouslyDeliveredMessages.transactionId, deliveredMessages.size());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2095,for (MessageDispatch md : c) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2096,this.connection.rollbackDuplicate(dispatcher, md.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1362,int oldMaxSize = getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1363,setMaxPageSize((int) this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1364,doPageIn(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1365,setMaxPageSize(oldMaxSize);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,84,this.cleanupConnectionTemporaryDestinations();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,290,exception.printStackTrace(stream);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,319,protected void acknowledge(ConnectionContext context, MessageAck ack, MessageReference node) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,223,String remoteHost = transport.getRemoteAddress();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,230,String remoteHost = transport.getRemoteAddress();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,286,updated.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,795,if (!updated.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,796,return updated;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,798,ArrayList<URI> l = new ArrayList<URI>(uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,801,removed = l.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,944,List<URI> connectList = getConnectList();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,244,return new XAResource[]{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,245,new TransactionContext() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,248,public boolean isSameRM(XAResource xaresource) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,249,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,251,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,252,boolean result = super.isSameRM(xaresource);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,253,LOG.trace("{}.recover({})={}", getConnection(), xaresource, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,254,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,257,LOG.trace("isSameRM({}) failed", xaresource, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,258,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,259,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,261,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,266,protected String getResourceManagerId() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,267,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,268,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,269,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,270,return super.getResourceManagerId();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,272,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,277,public void commit(Xid xid, boolean onePhase) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,278,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,279,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,280,setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,281,super.commit(xid, onePhase);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,282,LOG.trace("{}.commit({},{})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,285,LOG.trace("{}.commit({},{}) failed", getConnection(), xid, onePhase, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,286,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,288,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,293,public void rollback(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,294,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,295,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,296,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,297,super.rollback(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,298,LOG.trace("{}.rollback({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,301,LOG.trace("{}.rollback({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,302,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,304,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,309,public Xid[] recover(int flags) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,310,Xid[] result = new Xid[]{};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,311,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,312,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,313,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,314,result = super.recover(flags);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,315,LOG.trace("{}.recover({})={}", getConnection(), flags, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,318,LOG.trace("{}.recover({}) failed", getConnection(), flags, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,319,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,321,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,323,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,327,public void forget(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,328,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,329,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,330,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,331,super.forget(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,332,LOG.trace("{}.forget({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,335,LOG.trace("{}.forget({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,336,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,338,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,342,private void throwXAException(JMSException e) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,343,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,344,xaException.errorCode = XAException.XAER_RMFAIL;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,345,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,348,private ActiveMQConnection newConnection() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,351,return connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,354,private void closeConnection(ActiveMQConnection original) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,355,ActiveMQConnection connection = getConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,356,if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,357,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,358,connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,361,setConnection(original);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,611,boolean willSent = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,613,if (connect != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,614,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,615,if (connect.willTopic() != null && connect.willMessage() != null && !willSent) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,616,willSent = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,617,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,618,PUBLISH publish = new PUBLISH();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,619,publish.topicName(connect.willTopic());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,620,publish.qos(connect.willQos());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,621,publish.messageId(packetIdGenerator.getNextSequenceId(getClientId()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,622,publish.payload(connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,623,ActiveMQMessage message = convertMessage(publish);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,624,message.setProducerId(producerId);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,625,message.onSend();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,627,sendToActiveMQ(message, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,629,LOG.warn("Failed to publish Will Message " + connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,633,sendToActiveMQ(connectionInfo.createRemoveCommand(), null);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,166,lastBatchId = messageId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,82,public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,89,public synchronized void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/store/PersistenceAdapter.java,190,void checkpoint(boolean sync) throws IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/AbstractKahaDBStore.java,669,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,83,public void checkpoint(boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,84,this.letter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,334,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,436,checkpointUpdate(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1017,startCheckpoint();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,171,public void checkpoint(final boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,173,persistenceAdapter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,233,checkpointUpdate(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,19,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,20,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,21,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,22,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,76,if (getMaxSlowDuration() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,79,for (SlowConsumerEntry entry : slowConsumers.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,80,entry.mark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,61,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,860,public void duplicateFromStore(Message message, Subscription durableSub) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,862,getLog().warn("duplicate message from store {}, redirecting for dlq processing", message.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,863,Throwable cause = new Throwable("duplicate from store for " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,869,acknowledge(connectionContext, durableSub, messageAck, message);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,131,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1691,if (tempDataStore == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1873,if (jobSchedulerStore == null) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,120,if( sslContext == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,121,if( provider == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,122,sslContext = SSLContext.getInstance(protocol);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,124,sslContext = SSLContext.getInstance(protocol, provider);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,126,sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,130,public void setSSLContext(SSLContext sslContext) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,294,if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,295,it.remove();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1048,LOG.error("error dispatching message: ", e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2168,return "ActiveMQSession {id=" + info.getSessionId() + ",started=" + started.get() + "} " + sendMutex;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,198,activeSessions.remove(ss);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,230,if (!l.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,136,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,118,purgeInactiveDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,741,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,49,private boolean started=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,38,private boolean started;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,48,private boolean cacheEnabled=true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,769,public void commitAdd(ConnectionContext context, MessageId messageId, long preparedSequenceId) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,772,long sequence = (Long)messageId.getEntryLocator();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,773,getAdapter().doCommitAddOp(c, preparedSequenceId, sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,87,persistenceAdapter.commitTransaction(ctx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,132,message.getMessageId().setEntryLocator(jdbcPersistenceAdapter.getNextSequenceId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,137,message.getMessageId().setFutureOrSequenceLong(message.getMessageId().getEntryLocator());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,146,jdbcPersistenceAdapter.commitAdd(context, message.getMessageId(), preparedEntrySequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,181,((JDBCPersistenceAdapter) persistenceAdapter).commitAdd(ctx, messageId, (Long)messageId.getEntryLocator());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,70,close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,138,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,141,if (connection != null && !connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,152,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,153,if (connection != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,154,connection.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,158,LOG.trace("Closing connection failed due: " + e.getMessage() + ". This exception is ignored.", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,160,connection = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,184,if (!connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,216,private void doRollback() throws SQLException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,217,if (addMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,218,addMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,219,addMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,221,if (removedMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,222,removedMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,223,removedMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,225,if (updateLastAckStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,226,updateLastAckStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,227,updateLastAckStatement = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,165,private final Set<TransactionStore> stores = new HashSet<TransactionStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,169,stores.add(store);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,172,public Set<TransactionStore> getStores() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,216,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,217,store.commit(txid, true, null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,265,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,266,store.rollback(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,359,getTx(xid).trackStore(adapter.createTransactionStore());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,30,import org.apache.activemq.ActiveMQMessageAudit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,85,final ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,131,Destination destination =  addDestination(context, amqDestination, false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,132,registerSync(destination, transaction, ack);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,135,private void registerSync(Destination destination, Transaction transaction, BaseCommand command) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,136,Synchronization sync = new PreparedDestinationCompletion(destination, command.isMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,147,final Destination destination;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,150,public PreparedDestinationCompletion(final Destination destination, boolean messageSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,176,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,184,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,185,destination.getDestinationStatistics().getEnqueues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,186,destination.getDestinationStatistics().getMessages().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,189,destination.getDestinationStatistics().getDequeues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,190,destination.getDestinationStatistics().getMessages().subtract(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,382,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,383,next.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,469,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,470,getSubscriptionStatistics().getInflightMessageSize().addSize(-node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,471,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1245,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,806,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,78,resetSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,337,setCacheEnabled(false);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,32,public class ProxyTopicMessageStore implements TopicMessageStore {
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,34,final TopicMessageStore delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,37,this.delegate = delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,86,return delegate.lookupSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,92,delegate.acknowledge(context, clientId, subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,97,delegate.addSubscription(subscriptionInfo, retroactive);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,102,delegate.deleteSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,108,delegate.recoverSubscription(clientId, subscriptionName, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,114,delegate.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,119,delegate.resetBatching(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,129,return delegate.getAllSubscriptions();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,139,return delegate.getMessageCount(clientId, subscriberName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,114,persistenceAdapter.commitTransaction(ctx);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,266,tx = preparedTransactions.remove(txid);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,75,setStateFinished();
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,91,LOG.warn("Store COMMIT FAILED: ", t);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,92,rollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,93,XAException xae = newXAException("STORE COMMIT FAILED: Transaction rolled back", XAException.XA_RBOTHER);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,119,queue.clearPendingMessages();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,87,private MemoryTransactionStore transactionStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,194,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,195,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,196,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,203,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,204,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,205,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,250,if (transactionStore == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,251,transactionStore = new JdbcMemoryTransactionStore(this);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,149,return perPriority[javax.jms.Message.DEFAULT_PRIORITY];
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,308,recovered.perPriority[isPrioritizedMessages() ? priority : javax.jms.Message.DEFAULT_PRIORITY].recovered = sequenceId;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,21,import java.util.HashMap;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,33,import org.apache.activemq.store.ProxyTopicMessageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,52,private HashMap<ActiveMQDestination, MessageStore> topicStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,53,private HashMap<ActiveMQDestination, MessageStore> queueStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,309,protected void onProxyTopicStore(ProxyTopicMessageStore proxyTopicMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,310,topicStores.put(proxyTopicMessageStore.getDestination(), proxyTopicMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,314,protected void onProxyQueueStore(ProxyMessageStore proxyQueueMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,315,queueStores.put(proxyQueueMessageStore.getDestination(), proxyQueueMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,323,JDBCTopicMessageStore jdbcTopicMessageStore = (JDBCTopicMessageStore) topicStores.get(lastAckCommand.getMessageAck().getDestination());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,330,((JDBCPersistenceAdapter)persistenceAdapter).getBrokerService().getRegionBroker().getDestinationMap().get(removeMessageCommand.getMessageAck().getDestination()).getDestinationStatistics().getMessages().increment();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,334,ActiveMQDestination destination = addMessageCommand.getMessage().getDestination();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,335,addMessageCommand.setMessageStore(destination.isQueue() ? queueStores.get(destination) : topicStores.get(destination));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2556,public void trackRecoveredAcks(ArrayList<MessageAck> acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2557,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2558,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2559,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2560,ackedAndPrepared.add(ack.getLastMessageId().toProducerKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2563,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2567,public void forgetRecoveredAcks(ArrayList<MessageAck> acks, boolean rollback) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2568,if (acks != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2569,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2570,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2571,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2572,final String id = ack.getLastMessageId().toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2573,ackedAndPrepared.remove(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2574,if (rollback) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2575,rolledBackAcks.add(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2579,this.indexLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,208,Message msg = (Message) ((JDBCPersistenceAdapter)persistenceAdapter).getWireFormat().unmarshal(new ByteSequence(message));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,213,tx.add(new RemoveMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,226,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,456,while (result && tokenizer.hasMoreTokens()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,467,boolean result = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,106,private final Map<Destination, String> mqttTopicMap = new LRUCache<Destination, String>(DEFAULT_CACHE_SIZE);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,555,topicName = mqttTopicMap.get(message.getJMSDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,557,String amqTopicName = findSubscriptionStrategy().onSend(message.getDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,559,mqttTopicMap.put(message.getJMSDestination(), topicName);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,176,diskBoundLocation = -1;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,801,serialExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,803,public void run() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,804,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,805,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,807,LOG.warn("failed to deliver remove command for destination: {}", destInfo.getDestination(), e);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,812,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,910,protected void addSubscription(DemandSubscription sub) throws IOException {
